uint64_t *initializeBufferWithCopyOfBuffer for SubscriptionView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    v17 = (_QWORD *)((v10 + v16) & 0xFFFFFFFFFFFFFFF8);
    v18 = v17[1];
    v19 = (_QWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v17;
    v19[1] = v18;
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for SubscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for SubscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)((v12 + v17) & 0xFFFFFFFFFFFFF8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  else
  {
    if (((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18716CD58 + 4 * byte_187C0E720[v15]))();
  }
}

void storeEnumTagSinglePayload for SubscriptionView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18716CF1C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18716CFACLL);
}

void sub_18716CF24(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18716CF2CLL);
  JUMPOUT(0x18716CFACLL);
}

void sub_18716CF70()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18716CFACLL);
}

void sub_18716CF78()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18716CFACLL);
}

uint64_t sub_18716CF80(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x18716CFACLL);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x18716CF8CLL);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

_UNKNOWN **sub_18716CFC4()
{
  return &protocol witness table for SubscriptionView<A, B>;
}

uint64_t assignWithCopy for SubscriptionView.Subscriber(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SubscriptionView.Subscriber(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

void sub_18716D078()
{
  type metadata accessor for SubscriptionView();
}

uint64_t sub_18716D0B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v2 + ((v4 + 48) & ~v4);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5 + *(int *)(a1 + 52), v1);
  swift_release();
  return swift_deallocObject();
}

void sub_18716D144()
{
  type metadata accessor for SubscriptionView();
}

uint64_t sub_18716D184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = (v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v2 + v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v11, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v11 + *(int *)(a1 + 52), v1);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v2 + v10, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_18716D268()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18716D28C()
{
  return swift_deallocObject();
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionDispatcherSubscriber(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 28);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for CombineIdentifier();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain();
    v10(v7, v8, v9);
  }
  return v5;
}

_QWORD *assignWithCopy for ActionDispatcherSubscriber(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for ActionDispatcherSubscriber(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for ActionDispatcherSubscriber(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_18716D470(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CombineIdentifier();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

char *sub_18716D4EC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CombineIdentifier();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in ActionDispatcherSubscriber<A>()
{
  return MEMORY[0x1E0DEDD18];
}

uint64_t sub_18716D56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ActionDispatcherSubscriber(0, v5, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = (v8 + *(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v4 + v8;
  swift_release();
  v12 = v11 + *(int *)(v6 + 28);
  v13 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v4 + v10, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActionDispatcherSubscriber.respond(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t);

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ActionDispatcherSubscriber(0, v5, a3, a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v8 = v4
     + ((((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
       + v7) & ~v7);
  MEMORY[0x18D755D04](&v10);
  v10(v8);
  return swift_release();
}

uint64_t specialized ActionDispatcherSubscriber.receive(subscription:)(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  static Subscribers.Demand.unlimited.getter();
  return dispatch thunk of Subscription.request(_:)();
}

ValueMetadata *type metadata accessor for NavigationStackViewPosition()
{
  return &type metadata for NavigationStackViewPosition;
}

uint64_t NavigationStackViewPosition.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  _StringGuts.grow(_:)(104);
  v1._countAndFlagsBits = 0xD000000000000028;
  v1._object = (void *)0x8000000187BD8F40;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x79656B202020200ALL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  NavigationState.StackContent.Key.debugDescription.getter(*(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x8000000187BD8F70;
  v5._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD000000000000018;
  v7._object = (void *)0x8000000187BD8F90;
  String.append(_:)(v7);
  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationStackViewPosition()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt8 v6;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_BYTE *)(v0 + 40);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NavigationStackViewPosition()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt8 v5;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationStackViewPosition()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt8 v6;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_BYTE *)(v0 + 40);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationStackViewPosition(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return specialized static NavigationStackViewPosition.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t specialized static NavigationStackViewPosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      ? (v2 = *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
      : (v2 = 0),
        v2 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)))
  {
    return (((*(_BYTE *)(a1 + 40) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 40)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t View.menuStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MenuStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for MenuStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MenuStyleModifier);
}

void protocol witness for View.body.getter in conformance MenuStyleConfiguration.Label()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for View.body.getter in conformance MenuStyleConfiguration.Content()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

uint64_t key path getter for MenuStyleConfiguration.primaryAction : MenuStyleConfiguration@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t key path setter for MenuStyleConfiguration.primaryAction : MenuStyleConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  outlined copy of AppIntentExecutor?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t MenuStyleConfiguration.primaryAction.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  outlined copy of AppIntentExecutor?(*v0);
  return v1;
}

uint64_t MenuStyleConfiguration.primaryAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v2);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MenuStyleConfiguration.primaryAction.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for MenuStyleConfiguration.onPresentationChanged : MenuStyleConfiguration@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unsigned __int8 *);

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t key path setter for MenuStyleConfiguration.onPresentationChanged : MenuStyleConfiguration(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of AppIntentExecutor?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t MenuStyleConfiguration.onPresentationChanged.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t MenuStyleConfiguration.onPresentationChanged.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MenuStyleConfiguration.onPresentationChanged.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t instantiation function for generic protocol witness table for MenuStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleConfiguration.Label, &type metadata for MenuStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleConfiguration.Label, &type metadata for MenuStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in MenuStyleConfiguration.Label()
{
  return &protocol witness table for MenuStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for MenuStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleConfiguration.Content, &type metadata for MenuStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleConfiguration.Content, &type metadata for MenuStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in MenuStyleConfiguration.Content()
{
  return &protocol witness table for MenuStyleConfiguration.Content;
}

uint64_t dispatch thunk of MenuStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for MenuStyleConfiguration()
{
  return &type metadata for MenuStyleConfiguration;
}

ValueMetadata *type metadata accessor for MenuStyleConfiguration.Label()
{
  return &type metadata for MenuStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for MenuStyleConfiguration.Content()
{
  return &type metadata for MenuStyleConfiguration.Content;
}

uint64_t sub_18716E0D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for MenuStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for MenuStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

_QWORD *destroy for MenuStyleConfiguration(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  if (v1[2])
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *initializeWithCopy for MenuStyleConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  return a1;
}

_QWORD *assignWithCopy for MenuStyleConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for MenuStyleConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuStyleConfiguration(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MenuStyleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedMenuStyle()
{
  return &type metadata for ResolvedMenuStyle;
}

uint64_t getEnumTagSinglePayload for MenuStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18716E4E0 + 4 * byte_187C0E9F0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for MenuStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in MenuStyleModifier<A>()
{
  return &protocol witness table for MenuStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in MenuStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedMenuStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  outlined copy of AppIntentExecutor?(v2);
  return outlined copy of AppIntentExecutor?(v4);
}

double protocol witness for View.body.getter in conformance ResolvedMenuStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  _OWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v6);
  specialized AccessibilityMenuModifier.body(content:)(v3, v4, v6, v5, v3, v4, (uint64_t)v12);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
  v7 = v13;
  v8 = v14;
  v9 = v15;
  result = *(double *)v12;
  v11 = v12[1];
  *(_OWORD *)a1 = v12[0];
  *(_OWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  return result;
}

void View.menuStyle<A, B>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  v6 = type metadata accessor for MenuStyleModifier(0, v4, v5, v4);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for StyleContextAcceptsPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v8);
  type metadata accessor for StaticIf();
}

uint64_t sub_18716E920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v2 + 16))(v5, *(_QWORD *)(v9 - 200), v7, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v5, v7);
  v15 = *(_QWORD *)(v9 - 184);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v6, *(_QWORD *)(v9 - 176), v4);
  *(_QWORD *)(v9 - 120) = v4;
  *(_QWORD *)(v9 - 112) = v6;
  *(_QWORD *)(v9 - 128) = *(_QWORD *)(v9 - 168);
  ViewModifier.requiring<A>(_:)(v9 - 112, 1, v8, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 192) + 8))(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v6, v4);
  MEMORY[0x18D75B4AC](v14, *(_QWORD *)(v9 - 152), a1, *(_QWORD *)(v9 - 144));
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a1);
}

uint64_t MenuStyleModifier.styleBody(configuration:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  _OWORD v20[2];

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v20 - v14;
  v16 = a1[1];
  v20[0] = *a1;
  v20[1] = v16;
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v5 + 24))(v20, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for MenuStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuStyleModifier<DefaultMenuStyle> and conformance MenuStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MenuStyleModifier<DefaultMenuStyle> and conformance MenuStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type MenuStyleModifier<DefaultMenuStyle> and conformance MenuStyleModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleModifier<DefaultMenuStyle> and conformance MenuStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultMenuStyle and conformance DefaultMenuStyle;
  if (!lazy protocol witness table cache variable for type DefaultMenuStyle and conformance DefaultMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultMenuStyle, &type metadata for DefaultMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultMenuStyle and conformance DefaultMenuStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedMenuStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle;
  if (!lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedMenuStyle, &type metadata for ResolvedMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle;
  if (!lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedMenuStyle, &type metadata for ResolvedMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedMenuStyle and conformance ResolvedMenuStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized AccessibilityMenuModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 8;
  outlined copy of AppIntentExecutor?(a1);
  outlined copy of AppIntentExecutor?(a3);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v31;
  *(_QWORD *)(v13 + 24) = v32;
  outlined copy of AppIntentExecutor?(a1);
  outlined copy of AppIntentExecutor?(a3);
  swift_release();
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v13 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v13 + 16, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v13 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  if (a5)
  {
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = a5;
    *(_QWORD *)(v14 + 24) = a6;
    v15 = v14;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = partial apply for thunk for @callee_guaranteed () -> ();
    *(_QWORD *)(v16 + 24) = v15;
    v17 = v16;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = partial apply for thunk for @callee_guaranteed () -> ();
    *(_QWORD *)(v18 + 24) = v17;
    v28 = a2;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
    *(_QWORD *)(v19 + 24) = v18;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v27 = a1;
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
    LODWORD(v17) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
    *(_QWORD *)(v20 + 56) = v21;
    *(_QWORD *)(v20 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v22 = swift_allocObject();
    *(_QWORD *)(v20 + 32) = v22;
    *(_OWORD *)(v22 + 16) = 0u;
    *(_OWORD *)(v22 + 32) = 0u;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_QWORD *)(v22 + 64) = 0;
    *(_QWORD *)(v22 + 72) = 2;
    *(_OWORD *)(v22 + 80) = 0u;
    *(_OWORD *)(v22 + 96) = 0u;
    *(_QWORD *)(v22 + 112) = 0;
    *(_QWORD *)(v22 + 120) = partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:);
    *(_QWORD *)(v22 + 128) = v19;
    *(_DWORD *)(v22 + 136) = v17;
    *(_BYTE *)(v20 + 72) = 0;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    outlined copy of AppIntentExecutor?(a5);
    swift_retain();
    outlined copy of AppIntentExecutor?(v27);
    outlined copy of AppIntentExecutor?(a3);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v23 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v23);
    swift_bridgeObjectRelease();
    v24 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.setter(v24);
    v33 = specialized AccessibilityProperties.subscript.getter(*(_QWORD *)(v13 + 16));
    v25 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v25);
    specialized AccessibilityProperties.subscript.setter(v33);
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
    outlined copy of AppIntentExecutor?(v27);
    outlined copy of AppIntentExecutor?(a3);
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    a2 = v28;
    swift_release();
    a1 = v27;
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
    swift_release();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
    swift_release();
    swift_release();
    result = swift_release();
  }
  else
  {
    result = outlined copy of AppIntentExecutor?(0);
  }
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_BYTE *)(a7 + 32) = 1;
  *(_QWORD *)(a7 + 40) = v13;
  *(_QWORD *)(a7 + 48) = v12;
  return result;
}

uint64_t sub_18716F278()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = 2;
  return result;
}

void type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityVoidAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction, (uint64_t)&type metadata for AccessibilityVoidAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>();
    v6 = type metadata accessor for AnyAccessibilityAction.ConcreteBase(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityVoidAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction, (uint64_t)&type metadata for AccessibilityVoidAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityActionStorage<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>);
  }
  return result;
}

uint64_t sub_18716F3B0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18716F438()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>)
  {
    type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(255, v0, v1, v2);
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>);
  }
}

uint64_t type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>)
    type metadata accessor for Menu();
  return result;
}

void type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>)
  {
    v4 = type metadata accessor for AccessibilityLargeContentViewModifier(0, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t)&protocol witness table for AccessibilityLargeContentViewModifier<A>);
}

unint64_t lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>;
  if (!lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>)
  {
    v1 = type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Menu<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>);
  }
  return result;
}

uint64_t sub_18716F668()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyVStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.place(children:context:state:in:));
}

uint64_t protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, void *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:));
}

unint64_t specialized IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, double (*a13)(uint64_t, double, double, double, double, double, double, double, double), void (*a14)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), char a15)
{
  unint64_t v16;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  unint64_t v26;
  unint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  __int128 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  v16 = result;
  if ((a4 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a2 + 16) > result)
    {
      v18 = a2 + 72 * result;
      v19 = *(_BYTE *)(v18 + 48);
      v20 = *(_QWORD *)(v18 + 56);
      v21 = *(_BYTE *)(v18 + 64);
      *(_QWORD *)a9 = *(_QWORD *)(v18 + 40);
      *(_BYTE *)(a9 + 8) = v19;
      *(_QWORD *)(a9 + 16) = v20;
      *(_BYTE *)(a9 + 24) = v21;
      v22 = *(_OWORD *)(v18 + 72);
      v23 = *(_OWORD *)(v18 + 88);
LABEL_13:
      *(_OWORD *)(a9 + 32) = v22;
      *(_OWORD *)(a9 + 48) = v23;
      return result;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v26 = *(_QWORD *)(a5 + 280);
  v27 = *(_QWORD *)(a5 + 288);
  v28 = *(_BYTE *)(a5 + 296);
  v29 = *(_OWORD *)(a5 + 104);
  v30 = *(_OWORD *)(a5 + 136);
  v69 = *(_OWORD *)(a5 + 120);
  v70 = v30;
  v71 = *(_OWORD *)(a5 + 152);
  v31 = *(_OWORD *)(a5 + 72);
  v65 = *(_OWORD *)(a5 + 56);
  v66 = v31;
  v67 = *(_OWORD *)(a5 + 88);
  v68 = v29;
  if ((v28 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v27, v26));
  ScrollGeometry.visibleRect.getter();
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  LOBYTE(v57) = a11 & 1;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = a8;
  *(_QWORD *)(v40 + 24) = a10;
  *(_BYTE *)(v40 + 32) = v57;
  *(_DWORD *)(v40 + 36) = HIDWORD(a11);
  Array<A>.synthesizedPlacement(of:in:avoiding:distance:)(v16, a2, a13, a3, (uint64_t)&v65, v33, v35, v37, v39);
  result = swift_release();
  if ((v69 & 1) == 0)
  {
    v44 = BYTE8(v66);
    v45 = v66;
    v46 = BYTE8(v65);
    v22 = v67;
    v23 = v68;
    *(_QWORD *)a9 = v65;
    *(_BYTE *)(a9 + 8) = v46 & 1;
    *(_QWORD *)(a9 + 16) = v45;
    *(_BYTE *)(a9 + 24) = v44 & 1;
    goto LABEL_13;
  }
  if ((v16 & 0x8000000000000000) != 0)
    goto LABEL_17;
  if (*(_QWORD *)(a2 + 16) <= v16)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v41 = a2 + 72 * v16;
  v42 = *(_OWORD *)(v41 + 80);
  v67 = *(_OWORD *)(v41 + 64);
  v68 = v42;
  *(_QWORD *)&v69 = *(_QWORD *)(v41 + 96);
  v43 = *(_OWORD *)(v41 + 48);
  v65 = *(_OWORD *)(v41 + 32);
  v66 = v43;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v65);
  a14(&v57, &v65, a6, a5, a7, a8, a10, a11 & 0xFFFFFFFF00000001);
  if ((v64 & 1) != 0)
  {
    Array<A>.externalPlacement(of:avoiding:in:)(v16, a15, a2, a9);
    return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v65);
  }
  else
  {
    v48 = v62;
    v47 = v63;
    v56 = v61;
    v49 = v60;
    v50 = v59;
    v51 = v58;
    v52 = v57;
    result = outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v65);
    *(_QWORD *)a9 = v52;
    *(_BYTE *)(a9 + 8) = v51 & 1;
    *(_QWORD *)(a9 + 16) = v50;
    *(_BYTE *)(a9 + 24) = v49 & 1;
    *(_OWORD *)(a9 + 32) = v56;
    *(_QWORD *)(a9 + 48) = v48;
    *(_QWORD *)(a9 + 56) = v47;
  }
  return result;
}

unint64_t protocol witness for IncrementalLayout.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:) in conformance LazyVStackLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  __int128 v10;

  *((_QWORD *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:);
  *(_QWORD *)&v10 = &unk_1E1B24538;
  return protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyVStackLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:), 1);
}

unint64_t specialized IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, double (*a14)(uint64_t, double, double, double, double, double, double, double, double), void (*a15)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), char a16)
{
  unint64_t v17;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  unint64_t v28;
  unint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  __int128 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v17 = result;
  if ((a4 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a2 + 16) > result)
    {
      v19 = a2 + 72 * result;
      v20 = *(_BYTE *)(v19 + 48);
      v21 = *(_QWORD *)(v19 + 56);
      v22 = *(_BYTE *)(v19 + 64);
      *(_QWORD *)a9 = *(_QWORD *)(v19 + 40);
      *(_BYTE *)(a9 + 8) = v20;
      *(_QWORD *)(a9 + 16) = v21;
      *(_BYTE *)(a9 + 24) = v22;
      v23 = *(_OWORD *)(v19 + 72);
      v24 = *(_OWORD *)(v19 + 88);
LABEL_13:
      *(_OWORD *)(a9 + 32) = v23;
      *(_OWORD *)(a9 + 48) = v24;
      return result;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v28 = *(_QWORD *)(a5 + 280);
  v29 = *(_QWORD *)(a5 + 288);
  v30 = *(_BYTE *)(a5 + 296);
  v31 = *(_OWORD *)(a5 + 104);
  v32 = *(_OWORD *)(a5 + 136);
  v70 = *(_OWORD *)(a5 + 120);
  v71 = v32;
  v72 = *(_OWORD *)(a5 + 152);
  v33 = *(_OWORD *)(a5 + 72);
  v66 = *(_OWORD *)(a5 + 56);
  v67 = v33;
  v68 = *(_OWORD *)(a5 + 88);
  v69 = v31;
  if ((v30 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v29, v28));
  ScrollGeometry.visibleRect.getter();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  LOBYTE(v58) = a12 & 1;
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = a8;
  *(_QWORD *)(v42 + 24) = a10;
  *(_QWORD *)(v42 + 32) = a11;
  *(_BYTE *)(v42 + 40) = v58;
  *(_DWORD *)(v42 + 44) = HIDWORD(a12);
  swift_bridgeObjectRetain();
  Array<A>.synthesizedPlacement(of:in:avoiding:distance:)(v17, a2, a14, a3, (uint64_t)&v66, v35, v37, v39, v41);
  result = swift_release();
  if ((v70 & 1) == 0)
  {
    v46 = BYTE8(v67);
    v47 = v67;
    v48 = BYTE8(v66);
    v23 = v68;
    v24 = v69;
    *(_QWORD *)a9 = v66;
    *(_BYTE *)(a9 + 8) = v48 & 1;
    *(_QWORD *)(a9 + 16) = v47;
    *(_BYTE *)(a9 + 24) = v46 & 1;
    goto LABEL_13;
  }
  if ((v17 & 0x8000000000000000) != 0)
    goto LABEL_17;
  if (*(_QWORD *)(a2 + 16) <= v17)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v43 = a2 + 72 * v17;
  v44 = *(_OWORD *)(v43 + 80);
  v68 = *(_OWORD *)(v43 + 64);
  v69 = v44;
  *(_QWORD *)&v70 = *(_QWORD *)(v43 + 96);
  v45 = *(_OWORD *)(v43 + 48);
  v66 = *(_OWORD *)(v43 + 32);
  v67 = v45;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v66);
  a15(&v58, &v66, a6, a5, a7, a8, a10, a11, a12 & 0xFFFFFFFF00000001);
  if ((v65 & 1) != 0)
  {
    Array<A>.externalPlacement(of:avoiding:in:)(v17, a16, a2, a9);
    return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v66);
  }
  else
  {
    v50 = v63;
    v49 = v64;
    v57 = v62;
    v51 = v61;
    v52 = v60;
    v53 = v59;
    v54 = v58;
    result = outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v66);
    *(_QWORD *)a9 = v54;
    *(_BYTE *)(a9 + 8) = v53 & 1;
    *(_QWORD *)(a9 + 16) = v52;
    *(_BYTE *)(a9 + 24) = v51 & 1;
    *(_OWORD *)(a9 + 32) = v57;
    *(_QWORD *)(a9 + 48) = v50;
    *(_QWORD *)(a9 + 56) = v49;
  }
  return result;
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyVStackLayout(uint64_t a1, const void *a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.firstIndex(children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout);
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyVStackLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  return protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyVStackLayout(a3, a1, a2, a4, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.boundingRect(at:children:context:state:), a5);
}

uint64_t specialized IncrementalStack<>.boundingRect(at:children:context:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  double v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __int128 *Value;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  char v44;
  double v45;
  double v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  char v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  char v66;
  double v67;
  double v68;
  double v69;
  char v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int64x2_t v102;
  __int128 v103;
  __int128 v104;
  char v105;
  double v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[31];
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  __int128 v120;
  double v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  _OWORD v125[2];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133[3];

  v17 = *(double *)(a3 + 40);
  *(double *)&v98 = v17;
  v18 = a8 & 0xFFFFFFFF00000000;
  *(double *)&result = COERCE_DOUBLE(specialized HVGrid.minorGeometry(updatingSize:)((double *)&v98, a5));
  if (result < 1 || (v21 = *(double *)&v98, *(double *)&v98 <= 0.0))
  {
    *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
    v43 = 0.0;
    v44 = 1;
    v45 = 0.0;
    v46 = 0.0;
LABEL_34:
    *(double *)a9 = v45;
    *(_QWORD *)(a9 + 8) = 0;
    *(double *)(a9 + 16) = v46;
    *(double *)(a9 + 24) = v43;
    *(_BYTE *)(a9 + 32) = v44;
    return result;
  }
  v22 = result;
  v93 = a5;
  v94 = a7;
  v95 = v20;
  v23 = a1 / result;
  v91 = a1 / result * result;
  if ((unsigned __int128)(a1 / result * (__int128)result) >> 64 != v91 >> 63)
  {
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v24 = *(_DWORD *)(a3 + 12);
  v25 = *(_OWORD *)(a4 + 80);
  v128 = *(_OWORD *)(a4 + 64);
  v129 = v25;
  v130 = *(_OWORD *)(a4 + 96);
  v131 = *(_QWORD *)(a4 + 112);
  v26 = *(_OWORD *)(a4 + 16);
  v125[0] = *(_OWORD *)a4;
  v125[1] = v26;
  v27 = *(_OWORD *)(a4 + 48);
  v126 = *(_OWORD *)(a4 + 32);
  v127 = v27;
  v28 = *(_OWORD *)(a3 + 104);
  v29 = *(_OWORD *)(a3 + 136);
  v102 = *(int64x2_t *)(a3 + 120);
  v103 = v29;
  v104 = *(_OWORD *)(a3 + 152);
  v30 = *(_OWORD *)(a3 + 72);
  v98 = *(_OWORD *)(a3 + 56);
  v99 = v30;
  v100 = *(_OWORD *)(a3 + 88);
  v101 = v28;
  outlined retain of _IncrementalStack_State<LazyHGridLayout>(a4);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  v32 = v31;
  v34 = v33;
  v35 = 0.0;
  if (v24 != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v37 = Value[1];
    v98 = *Value;
    v99 = v37;
    MEMORY[0x18D75BE3C]();
  }
  v39 = *(_QWORD *)(a4 + 104);
  v38 = *(_QWORD *)(a4 + 112);
  v133[0] = v39;
  v41 = *(double *)(a4 + 88);
  v40 = *(double *)(a4 + 96);
  if (v41 > 0.0 && v34 - v32 > 0.0)
  {
    v42 = vabdd_f64(v41, v34 - v32);
    if (v40 <= 0.0 || v35 <= 0.0)
    {
      if (v42 < 0.01)
        goto LABEL_16;
      goto LABEL_18;
    }
    if (v42 >= 0.01)
      goto LABEL_18;
LABEL_15:
    if (vabdd_f64(v40, v35) < 0.01)
    {
LABEL_16:
      v47 = 0;
      goto LABEL_19;
    }
LABEL_18:
    v132 = v38;
    v48 = MEMORY[0x1E0DEE9D8];
    v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    outlined release of _IncrementalLayout_Placements((uint64_t)v133);
    *((_QWORD *)&v130 + 1) = v39;
    v49 = specialized Dictionary.init(dictionaryLiteral:)(v48);
    outlined release of _IncrementalLayout_Placements((uint64_t)&v132);
    v131 = v49;
    v47 = 1;
    goto LABEL_19;
  }
  v47 = 0;
  if (v40 > 0.0 && v35 > 0.0)
    goto LABEL_15;
LABEL_19:
  v92 = v47;
  if (!*(_QWORD *)(v39 + 16))
  {
    v97 = 0;
    *(_QWORD *)&v98 = 0;
    specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)((double *)&v98, &v97, v22, v95, a2, (uint64_t)v125, v93, a6, v21, v94, v18 | a8 & 1, HIDWORD(v18));
  }
  v50 = *((_QWORD *)&v130 + 1);
  v51 = v131;
  v52 = COERCE_DOUBLE(EstimationState.average.getter(*((uint64_t *)&v130 + 1), v131));
  v55 = v54;
  v56 = v52;
  if ((v53 & 1) != 0)
    v57 = 0.0;
  else
    v57 = v52;
  v45 = (v55 + v57) * (double)v23;
  if (*(_QWORD *)(a4 + 40) == *(_QWORD *)(a4 + 48))
    goto LABEL_30;
  v90 = a1;
  v58 = *(_QWORD *)(a4 + 16);
  if (!v58
    || v22 != *(_QWORD *)a4
    || v21 != *(double *)(a4 + 8)
    || (v59 = v53,
        v88 = *(_QWORD *)(a4 + 40),
        swift_bridgeObjectRetain_n(),
        swift_bridgeObjectRetain(),
        v89 = specialized static Array<A>.== infix(_:_:)(v95, v58),
        swift_bridgeObjectRelease_n(),
        *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease()),
        v92 & 1 | ((v89 & 1) == 0)))
  {
    a1 = v90;
    goto LABEL_30;
  }
  v60 = 0.0;
  if (!((v23 < 1) | v59 & 1))
    v60 = v56;
  v61 = v91 - v88;
  if (__OFSUB__(v91, v88))
    goto LABEL_70;
  v62 = v61 / v22;
  v63 = v61 / v22;
  if (v61 / v22 < 0)
  {
    v63 = -v62;
    if (__OFSUB__(0, v62))
      goto LABEL_72;
  }
  v45 = v45 - v60;
  if (*(_QWORD *)(v50 + 16))
  {
    *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v50, v51));
    v65 = *(double *)&result;
    if ((v66 & 1) != 0)
      v65 = 0.0;
    v67 = (v64 + v65) * (double)v63;
    if (*(_QWORD *)(v50 + 16))
    {
      *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v50, v51));
      v69 = *(double *)&result;
      if ((v70 & 1) != 0)
        v69 = 0.0;
      v71 = v68 + v69;
    }
    else
    {
      v71 = 32.0;
    }
  }
  else
  {
    v71 = 32.0;
    v67 = (double)v63 * 32.0;
  }
  v72 = *(double *)(a4 + 56);
  v73 = v72 + v71 * (double)v62;
  if (v73 >= 0.0)
    v45 = v73;
  v46 = -1.0;
  if (v67 >= (*(double *)(a4 + 80) - *(double *)(a4 + 72)) * 3.0)
  {
    a1 = v90;
    v82 = v94;
    v78 = v95;
    v77 = v93;
  }
  else
  {
    v114 = 0u;
    memset(v115, 0, sizeof(v115));
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    v74 = MEMORY[0x1E0DEE9D8];
    v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v76 = specialized Dictionary.init(dictionaryLiteral:)(v74);
    v77 = v93;
    v78 = v95;
    *(_QWORD *)&v98 = v93;
    *((_QWORD *)&v98 + 1) = a6;
    *(_QWORD *)&v99 = v94;
    BYTE8(v99) = a8 & 1;
    a1 = v90;
    HIDWORD(v99) = HIDWORD(a8);
    *((_QWORD *)&v100 + 1) = v22;
    *(double *)&v101 = v21;
    *((_QWORD *)&v101 + 1) = v95;
    LOBYTE(v100) = 0;
    v102 = vdupq_n_s64(0x7FF0000000000000uLL);
    LODWORD(v103) = 0;
    *((_QWORD *)&v103 + 1) = v90;
    LOBYTE(v104) = 0;
    *((_QWORD *)&v104 + 1) = 0;
    v105 = 0;
    v106 = 0.0;
    v107 = 0;
    v108 = 1;
    v109 = v74;
    v110 = 0;
    v116 = v74;
    v117 = 0x7FFFFFFFFFFFFFFFLL;
    v118 = 0x8000000000000000;
    v119 = 0x7FF0000000000000;
    v120 = xmmword_187C05370;
    v121 = -INFINITY;
    v122 = 0;
    v123 = v75;
    v124 = v76;
    if (v61 < 0)
    {
      LOBYTE(v97) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v83 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v91, v88, a2, 2 * v22, &v97);
      specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v83, v88, v91 == 0, v97, 0, v72);
      swift_bridgeObjectRelease();
      v80 = *((_QWORD *)&v104 + 1);
      v81 = v106;
      v79 = a2;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v79 = a2;
      v80 = v88;
      v81 = v72;
    }
    *(double *)&result = COERCE_DOUBLE(specialized StackPlacement.place(children:from:position:stopping:style:)(v79, v80, v90, 0, v81));
    v82 = v94;
    if (*((double *)&v120 + 1) < v121)
    {
      if (*((double *)&v120 + 1) > v121)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      if (*((double *)&v120 + 1) >= 0.0)
      {
        v46 = v121 - *((double *)&v120 + 1);
        v45 = *((double *)&v120 + 1);
      }
    }
    *(double *)&result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v98, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout));
  }
  if (*((uint64_t *)&v126 + 1) <= a1)
    goto LABEL_67;
  v84 = *(double *)&v129 - *((double *)&v128 + 1);
  if (*(double *)&v129 - *((double *)&v128 + 1) < 0.0)
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v114 = 0u;
  memset(v115, 0, sizeof(v115));
  v112 = 0u;
  v113 = 0u;
  v111 = 0u;
  v85 = MEMORY[0x1E0DEE9D8];
  v86 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v87 = specialized Dictionary.init(dictionaryLiteral:)(v85);
  *(_QWORD *)&v98 = v77;
  *((_QWORD *)&v98 + 1) = a6;
  *(_QWORD *)&v99 = v82;
  BYTE8(v99) = a8 & 1;
  HIDWORD(v99) = HIDWORD(a8);
  *((_QWORD *)&v100 + 1) = v22;
  *(double *)&v101 = v21;
  LOBYTE(v100) = 0;
  *((_QWORD *)&v101 + 1) = v78;
  v102.i64[0] = 0;
  *(double *)&v102.i64[1] = v84;
  LODWORD(v103) = 0;
  *((_QWORD *)&v103 + 1) = a1;
  LOBYTE(v104) = 0;
  *((_QWORD *)&v104 + 1) = 0;
  v105 = 0;
  v106 = 0.0;
  v107 = 0;
  v108 = 1;
  v109 = v85;
  v110 = 0;
  v116 = v85;
  v117 = 0x7FFFFFFFFFFFFFFFLL;
  v118 = 0x8000000000000000;
  v119 = 0x7FF0000000000000;
  v120 = xmmword_187C05370;
  v121 = -INFINITY;
  v122 = 0;
  v123 = v86;
  v124 = v87;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(double *)&result = COERCE_DOUBLE(specialized StackPlacement.place(children:from:position:stopping:style:)(a2, 0, 0, 1, 0.0));
  if (*((double *)&v120 + 1) >= v121)
  {
LABEL_66:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v98, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
LABEL_67:
    if (v46 >= 0.0)
    {
LABEL_33:
      specialized IncrementalStack<>.log(_:)(a1, 0xD000000000000036, 0x8000000187BD5F30, v45, 0.0, v46, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
      v44 = 0;
      v43 = v17;
      goto LABEL_34;
    }
LABEL_30:
    if (*(_QWORD *)(*((_QWORD *)&v130 + 1) + 16))
      v46 = v55;
    else
      v46 = 0.0;
    goto LABEL_33;
  }
  if (*((double *)&v120 + 1) <= v121)
  {
    v46 = v121 - *((double *)&v120 + 1);
    v45 = *((double *)&v120 + 1);
    goto LABEL_66;
  }
LABEL_74:
  __break(1u);
  return result;
}

{
  double v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __int128 *Value;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  char v44;
  double v45;
  double v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  char v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  char v66;
  double v67;
  double v68;
  double v69;
  char v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int64x2_t v102;
  __int128 v103;
  __int128 v104;
  char v105;
  double v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[31];
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  __int128 v120;
  double v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  _OWORD v125[2];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133[3];

  v17 = *(double *)(a3 + 32);
  *(double *)&v98 = v17;
  v18 = a8 & 0xFFFFFFFF00000000;
  *(double *)&result = COERCE_DOUBLE(specialized HVGrid.minorGeometry(updatingSize:)((double *)&v98, a5));
  if (result < 1 || (v21 = *(double *)&v98, *(double *)&v98 <= 0.0))
  {
    *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
    v43 = 0.0;
    v44 = 1;
    v45 = 0.0;
    v46 = 0.0;
LABEL_34:
    *(_QWORD *)a9 = 0;
    *(double *)(a9 + 8) = v45;
    *(double *)(a9 + 16) = v43;
    *(double *)(a9 + 24) = v46;
    *(_BYTE *)(a9 + 32) = v44;
    return result;
  }
  v22 = result;
  v93 = a5;
  v94 = a7;
  v95 = v20;
  v23 = a1 / result;
  v91 = a1 / result * result;
  if ((unsigned __int128)(a1 / result * (__int128)result) >> 64 != v91 >> 63)
  {
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v24 = *(_DWORD *)(a3 + 12);
  v25 = *(_OWORD *)(a4 + 80);
  v128 = *(_OWORD *)(a4 + 64);
  v129 = v25;
  v130 = *(_OWORD *)(a4 + 96);
  v131 = *(_QWORD *)(a4 + 112);
  v26 = *(_OWORD *)(a4 + 16);
  v125[0] = *(_OWORD *)a4;
  v125[1] = v26;
  v27 = *(_OWORD *)(a4 + 48);
  v126 = *(_OWORD *)(a4 + 32);
  v127 = v27;
  v28 = *(_OWORD *)(a3 + 104);
  v29 = *(_OWORD *)(a3 + 136);
  v102 = *(int64x2_t *)(a3 + 120);
  v103 = v29;
  v104 = *(_OWORD *)(a3 + 152);
  v30 = *(_OWORD *)(a3 + 72);
  v98 = *(_OWORD *)(a3 + 56);
  v99 = v30;
  v100 = *(_OWORD *)(a3 + 88);
  v101 = v28;
  outlined retain of _IncrementalStack_State<LazyHGridLayout>(a4);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  v32 = v31;
  v34 = v33;
  v35 = 0.0;
  if (v24 != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v37 = Value[1];
    v98 = *Value;
    v99 = v37;
    MEMORY[0x18D75BE3C]();
  }
  v39 = *(_QWORD *)(a4 + 104);
  v38 = *(_QWORD *)(a4 + 112);
  v133[0] = v39;
  v41 = *(double *)(a4 + 88);
  v40 = *(double *)(a4 + 96);
  if (v41 > 0.0 && v34 - v32 > 0.0)
  {
    v42 = vabdd_f64(v41, v34 - v32);
    if (v40 <= 0.0 || v35 <= 0.0)
    {
      if (v42 < 0.01)
        goto LABEL_16;
      goto LABEL_18;
    }
    if (v42 >= 0.01)
      goto LABEL_18;
LABEL_15:
    if (vabdd_f64(v40, v35) < 0.01)
    {
LABEL_16:
      v47 = 0;
      goto LABEL_19;
    }
LABEL_18:
    v132 = v38;
    v48 = MEMORY[0x1E0DEE9D8];
    v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    outlined release of _IncrementalLayout_Placements((uint64_t)v133);
    *((_QWORD *)&v130 + 1) = v39;
    v49 = specialized Dictionary.init(dictionaryLiteral:)(v48);
    outlined release of _IncrementalLayout_Placements((uint64_t)&v132);
    v131 = v49;
    v47 = 1;
    goto LABEL_19;
  }
  v47 = 0;
  if (v40 > 0.0 && v35 > 0.0)
    goto LABEL_15;
LABEL_19:
  v92 = v47;
  if (!*(_QWORD *)(v39 + 16))
  {
    v97 = 0;
    *(_QWORD *)&v98 = 0;
    specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)((double *)&v98, &v97, v22, v95, a2, (uint64_t)v125, v93, a6, v21, v94, v18 | a8 & 1, HIDWORD(v18));
  }
  v50 = *((_QWORD *)&v130 + 1);
  v51 = v131;
  v52 = COERCE_DOUBLE(EstimationState.average.getter(*((uint64_t *)&v130 + 1), v131));
  v55 = v54;
  v56 = v52;
  if ((v53 & 1) != 0)
    v57 = 0.0;
  else
    v57 = v52;
  v45 = (v55 + v57) * (double)v23;
  if (*(_QWORD *)(a4 + 40) == *(_QWORD *)(a4 + 48))
    goto LABEL_30;
  v90 = a1;
  v58 = *(_QWORD *)(a4 + 16);
  if (!v58
    || v22 != *(_QWORD *)a4
    || v21 != *(double *)(a4 + 8)
    || (v59 = v53,
        v88 = *(_QWORD *)(a4 + 40),
        swift_bridgeObjectRetain_n(),
        swift_bridgeObjectRetain(),
        v89 = specialized static Array<A>.== infix(_:_:)(v95, v58),
        swift_bridgeObjectRelease_n(),
        *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease()),
        v92 & 1 | ((v89 & 1) == 0)))
  {
    a1 = v90;
    goto LABEL_30;
  }
  v60 = 0.0;
  if (!((v23 < 1) | v59 & 1))
    v60 = v56;
  v61 = v91 - v88;
  if (__OFSUB__(v91, v88))
    goto LABEL_70;
  v62 = v61 / v22;
  v63 = v61 / v22;
  if (v61 / v22 < 0)
  {
    v63 = -v62;
    if (__OFSUB__(0, v62))
      goto LABEL_72;
  }
  v45 = v45 - v60;
  if (*(_QWORD *)(v50 + 16))
  {
    *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v50, v51));
    v65 = *(double *)&result;
    if ((v66 & 1) != 0)
      v65 = 0.0;
    v67 = (v64 + v65) * (double)v63;
    if (*(_QWORD *)(v50 + 16))
    {
      *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v50, v51));
      v69 = *(double *)&result;
      if ((v70 & 1) != 0)
        v69 = 0.0;
      v71 = v68 + v69;
    }
    else
    {
      v71 = 32.0;
    }
  }
  else
  {
    v71 = 32.0;
    v67 = (double)v63 * 32.0;
  }
  v72 = *(double *)(a4 + 56);
  v73 = v72 + v71 * (double)v62;
  if (v73 >= 0.0)
    v45 = v73;
  v46 = -1.0;
  if (v67 >= (*(double *)(a4 + 80) - *(double *)(a4 + 72)) * 3.0)
  {
    a1 = v90;
    v82 = v94;
    v78 = v95;
    v77 = v93;
  }
  else
  {
    v114 = 0u;
    memset(v115, 0, sizeof(v115));
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    v74 = MEMORY[0x1E0DEE9D8];
    v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v76 = specialized Dictionary.init(dictionaryLiteral:)(v74);
    v77 = v93;
    v78 = v95;
    *(_QWORD *)&v98 = v93;
    *((_QWORD *)&v98 + 1) = a6;
    *(_QWORD *)&v99 = v94;
    BYTE8(v99) = a8 & 1;
    a1 = v90;
    HIDWORD(v99) = HIDWORD(a8);
    *((_QWORD *)&v100 + 1) = v22;
    *(double *)&v101 = v21;
    *((_QWORD *)&v101 + 1) = v95;
    LOBYTE(v100) = 1;
    v102 = vdupq_n_s64(0x7FF0000000000000uLL);
    LODWORD(v103) = 0;
    *((_QWORD *)&v103 + 1) = v90;
    LOBYTE(v104) = 0;
    *((_QWORD *)&v104 + 1) = 0;
    v105 = 0;
    v106 = 0.0;
    v107 = 0;
    v108 = 1;
    v109 = v74;
    v110 = 0;
    v116 = v74;
    v117 = 0x7FFFFFFFFFFFFFFFLL;
    v118 = 0x8000000000000000;
    v119 = 0x7FF0000000000000;
    v120 = xmmword_187C05370;
    v121 = -INFINITY;
    v122 = 0;
    v123 = v75;
    v124 = v76;
    if (v61 < 0)
    {
      LOBYTE(v97) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v83 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v91, v88, a2, 2 * v22, &v97);
      specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v83, v88, v91 == 0, v97, 0, v72);
      swift_bridgeObjectRelease();
      v80 = *((_QWORD *)&v104 + 1);
      v81 = v106;
      v79 = a2;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v79 = a2;
      v80 = v88;
      v81 = v72;
    }
    *(double *)&result = COERCE_DOUBLE(specialized StackPlacement.place(children:from:position:stopping:style:)(v79, v80, v90, 0, v81));
    v82 = v94;
    if (*((double *)&v120 + 1) < v121)
    {
      if (*((double *)&v120 + 1) > v121)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      if (*((double *)&v120 + 1) >= 0.0)
      {
        v46 = v121 - *((double *)&v120 + 1);
        v45 = *((double *)&v120 + 1);
      }
    }
    *(double *)&result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v98, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout));
  }
  if (*((uint64_t *)&v126 + 1) <= a1)
    goto LABEL_67;
  v84 = *(double *)&v129 - *((double *)&v128 + 1);
  if (*(double *)&v129 - *((double *)&v128 + 1) < 0.0)
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v114 = 0u;
  memset(v115, 0, sizeof(v115));
  v112 = 0u;
  v113 = 0u;
  v111 = 0u;
  v85 = MEMORY[0x1E0DEE9D8];
  v86 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v87 = specialized Dictionary.init(dictionaryLiteral:)(v85);
  *(_QWORD *)&v98 = v77;
  *((_QWORD *)&v98 + 1) = a6;
  *(_QWORD *)&v99 = v82;
  BYTE8(v99) = a8 & 1;
  HIDWORD(v99) = HIDWORD(a8);
  *((_QWORD *)&v100 + 1) = v22;
  *(double *)&v101 = v21;
  LOBYTE(v100) = 1;
  *((_QWORD *)&v101 + 1) = v78;
  v102.i64[0] = 0;
  *(double *)&v102.i64[1] = v84;
  LODWORD(v103) = 0;
  *((_QWORD *)&v103 + 1) = a1;
  LOBYTE(v104) = 0;
  *((_QWORD *)&v104 + 1) = 0;
  v105 = 0;
  v106 = 0.0;
  v107 = 0;
  v108 = 1;
  v109 = v85;
  v110 = 0;
  v116 = v85;
  v117 = 0x7FFFFFFFFFFFFFFFLL;
  v118 = 0x8000000000000000;
  v119 = 0x7FF0000000000000;
  v120 = xmmword_187C05370;
  v121 = -INFINITY;
  v122 = 0;
  v123 = v86;
  v124 = v87;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(double *)&result = COERCE_DOUBLE(specialized StackPlacement.place(children:from:position:stopping:style:)(a2, 0, 0, 1, 0.0));
  if (*((double *)&v120 + 1) >= v121)
  {
LABEL_66:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v98, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
LABEL_67:
    if (v46 >= 0.0)
    {
LABEL_33:
      specialized IncrementalStack<>.log(_:)(a1, 0xD000000000000036, 0x8000000187BD5FE0, 0.0, v45, v17, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
      v44 = 0;
      v43 = v17;
      goto LABEL_34;
    }
LABEL_30:
    if (*(_QWORD *)(*((_QWORD *)&v130 + 1) + 16))
      v46 = v55;
    else
      v46 = 0.0;
    goto LABEL_33;
  }
  if (*((double *)&v120 + 1) <= v121)
  {
    v46 = v121 - *((double *)&v120 + 1);
    v45 = *((double *)&v120 + 1);
    goto LABEL_66;
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t specialized IncrementalStack<>.boundingRect(at:children:context:state:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __int128 *Value;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  int v39;
  __int128 v40;
  char v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  char v53;
  double v54;
  double v55;
  double v56;
  char v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[32];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[31];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _QWORD v110[3];

  v9 = *(double *)(a3 + 40);
  if (v9 <= 0.0)
  {
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
LABEL_72:
    *(double *)a8 = v11;
    *(_QWORD *)(a8 + 8) = 0;
    *(double *)(a8 + 16) = v12;
    *(double *)(a8 + 24) = v10;
    *(_BYTE *)(a8 + 32) = v9 <= 0.0;
    return result;
  }
  v18 = result;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = *(_OWORD *)(a3 + 104);
  v21 = *(_OWORD *)(a3 + 136);
  *(_OWORD *)&v82[16] = *(_OWORD *)(a3 + 120);
  v83 = v21;
  v84 = *(_OWORD *)(a3 + 152);
  v22 = *(_OWORD *)(a3 + 72);
  v79 = *(_OWORD *)(a3 + 56);
  v80 = v22;
  v81 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)v82 = v20;
  v23 = *(_OWORD *)(a4 + 80);
  v105 = *(_OWORD *)(a4 + 64);
  v106 = v23;
  v24 = *(_OWORD *)(a4 + 112);
  v107 = *(_OWORD *)(a4 + 96);
  v108 = v24;
  v25 = *(_OWORD *)(a4 + 16);
  v101 = *(_OWORD *)a4;
  v102 = v25;
  v26 = *(_OWORD *)(a4 + 48);
  v103 = *(_OWORD *)(a4 + 32);
  v104 = v26;
  outlined retain of _IncrementalStack_State<LazyVStackLayout>(a4);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  v28 = v27;
  v30 = v29;
  v31 = 0.0;
  if (v19 != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v33 = Value[1];
    v79 = *Value;
    v80 = v33;
    MEMORY[0x18D75BE3C]();
  }
  v35 = *(_QWORD *)(a4 + 112);
  v34 = *(_QWORD *)(a4 + 120);
  v110[0] = v35;
  v37 = *(double *)(a4 + 96);
  v36 = *(double *)(a4 + 104);
  if (v37 > 0.0 && v30 - v28 > 0.0)
  {
    v38 = vabdd_f64(v37, v30 - v28);
    if (v36 <= 0.0 || v31 <= 0.0)
    {
      if (v38 >= 0.01)
        goto LABEL_43;
      goto LABEL_14;
    }
    if (v38 >= 0.01)
    {
LABEL_43:
      v109 = v34;
      v59 = MEMORY[0x1E0DEE9D8];
      v60 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      outlined release of _IncrementalLayout_Placements((uint64_t)v110);
      *(_QWORD *)&v108 = v60;
      v61 = specialized Dictionary.init(dictionaryLiteral:)(v59);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v109);
      *((_QWORD *)&v108 + 1) = v61;
      v39 = 1;
      if (!*(_QWORD *)(v60 + 16))
        goto LABEL_44;
      goto LABEL_16;
    }
LABEL_13:
    if (vabdd_f64(v36, v31) >= 0.01)
      goto LABEL_43;
LABEL_14:
    v39 = 0;
    goto LABEL_15;
  }
  v39 = 0;
  if (v36 > 0.0 && v31 > 0.0)
    goto LABEL_13;
LABEL_15:
  if (!*(_QWORD *)(v35 + 16))
  {
LABEL_44:
    v78 = 0;
    *(_QWORD *)&v79 = 0;
    specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)((double *)&v79, &v78, 1, a2, (uint64_t)&v101, a5, a6, a7 & 0xFFFFFFFF00000001, v9, v9);
  }
LABEL_16:
  v77 = a2;
  v40 = v108;
  *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v108, *((uint64_t *)&v108 + 1)));
  v43 = v42;
  v44 = *(double *)&result;
  if ((v41 & 1) != 0)
    v45 = 0.0;
  else
    v45 = *(double *)&result;
  v46 = *(_QWORD *)(a4 + 48);
  v11 = (v43 + v45) * (double)v18;
  if (v46 == *(_QWORD *)(a4 + 56) || (*(_BYTE *)(a4 + 24) & 1) != 0)
    goto LABEL_68;
  v48 = v9 != *(double *)(a4 + 8) || *(_QWORD *)a4 != 1;
  if (v9 != *(double *)(a4 + 16))
    v48 = 1;
  if (((v39 | v48) & 1) != 0)
    goto LABEL_68;
  if ((v18 < 1) | v41 & 1)
    v44 = 0.0;
  v49 = v18 - v46;
  if (__OFSUB__(v18, v46))
  {
    __break(1u);
    goto LABEL_74;
  }
  v50 = v18 - v46;
  if (v49 < 0)
  {
    v50 = v46 - v18;
    if (__OFSUB__(0, v49))
      goto LABEL_75;
  }
  v11 = v11 - v44;
  if (*(_QWORD *)(v40 + 16))
  {
    *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v40, *((uint64_t *)&v40 + 1)));
    v52 = *(double *)&result;
    if ((v53 & 1) != 0)
      v52 = 0.0;
    v54 = (v51 + v52) * (double)v50;
    if (*(_QWORD *)(v40 + 16))
    {
      *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v40, *((uint64_t *)&v40 + 1)));
      v56 = *(double *)&result;
      if ((v57 & 1) != 0)
        v56 = 0.0;
      v58 = v55 + v56;
    }
    else
    {
      v58 = 32.0;
    }
    v49 = v18 - v46;
  }
  else
  {
    v58 = 32.0;
    v54 = (double)v50 * 32.0;
  }
  v62 = *(double *)(a4 + 64);
  v63 = v62 + v58 * (double)v49;
  if (v63 >= 0.0)
    v11 = v63;
  v12 = -1.0;
  if (v54 >= (*(double *)(a4 + 88) - *(double *)(a4 + 80)) * 3.0)
  {
    v71 = v77;
  }
  else
  {
    memset(v93, 0, sizeof(v93));
    v92 = 0u;
    v91 = 0u;
    v90 = 0u;
    v89 = 0u;
    v64 = MEMORY[0x1E0DEE9D8];
    v65 = v49;
    v66 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v67 = specialized Dictionary.init(dictionaryLiteral:)(v64);
    *(_QWORD *)&v79 = a5;
    *((_QWORD *)&v79 + 1) = a6;
    LOBYTE(v80) = a7 & 1;
    DWORD1(v80) = HIDWORD(a7);
    *(_QWORD *)&v81 = 1;
    *((double *)&v81 + 1) = v9;
    *(double *)v82 = v9;
    BYTE8(v80) = 0;
    *(int64x2_t *)&v82[8] = vdupq_n_s64(0x7FF0000000000000uLL);
    *(_DWORD *)&v82[24] = 0;
    *(_QWORD *)&v83 = v18;
    BYTE8(v83) = 0;
    *(_QWORD *)&v84 = 0;
    BYTE8(v84) = 0;
    v85 = 0uLL;
    v86 = 1;
    v87 = v64;
    v88 = 0;
    v94 = v64;
    v95 = xmmword_187C05350;
    v96 = xmmword_187C05360;
    v97 = xmmword_187C05360;
    v98 = 0;
    v99 = v66;
    v100 = v67;
    if (v65 < 0)
    {
      LOBYTE(v78) = 0;
      v72 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v18, v46, v77, 2uLL, &v78);
      specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v72, v46, v18 == 0, v78, 0, v62);
      swift_bridgeObjectRelease();
      v69 = v84;
      v70 = *(double *)&v85;
      v68 = v77;
    }
    else
    {
      v68 = v77;
      v69 = v46;
      v70 = v62;
    }
    *(double *)&result = COERCE_DOUBLE(specialized StackPlacement.place(children:from:position:stopping:style:)(v68, v69, v18, 0, v70));
    if (*(double *)&v97 >= *((double *)&v97 + 1))
    {
      v71 = v77;
    }
    else
    {
      v71 = v77;
      if (*(double *)&v97 > *((double *)&v97 + 1))
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      if (*(double *)&v97 >= 0.0)
      {
        v12 = *((double *)&v97 + 1) - *(double *)&v97;
        v11 = *(double *)&v97;
      }
    }
    *(double *)&result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v79, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout));
  }
  if ((uint64_t)v104 <= v18)
    goto LABEL_67;
  v73 = *((double *)&v106 + 1) - *(double *)&v106;
  if (*((double *)&v106 + 1) - *(double *)&v106 < 0.0)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  memset(v93, 0, sizeof(v93));
  v92 = 0u;
  v91 = 0u;
  v90 = 0u;
  v89 = 0u;
  v74 = MEMORY[0x1E0DEE9D8];
  v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v76 = specialized Dictionary.init(dictionaryLiteral:)(v74);
  *(_QWORD *)&v79 = a5;
  *((_QWORD *)&v79 + 1) = a6;
  LOBYTE(v80) = a7 & 1;
  DWORD1(v80) = HIDWORD(a7);
  *(_QWORD *)&v81 = 1;
  *((double *)&v81 + 1) = v9;
  *(_OWORD *)v82 = *(unint64_t *)&v9;
  BYTE8(v80) = 0;
  *(double *)&v82[16] = v73;
  *(_DWORD *)&v82[24] = 0;
  *(_QWORD *)&v83 = v18;
  BYTE8(v83) = 0;
  *(_QWORD *)&v84 = 0;
  BYTE8(v84) = 0;
  v85 = 0uLL;
  v86 = 1;
  v87 = v74;
  v88 = 0;
  v94 = v74;
  v95 = xmmword_187C05350;
  v96 = xmmword_187C05360;
  v97 = xmmword_187C05360;
  v98 = 0;
  v99 = v75;
  v100 = v76;
  *(double *)&result = COERCE_DOUBLE(specialized StackPlacement.place(children:from:position:stopping:style:)(v71, 0, 0, 1, 0.0));
  if (*(double *)&v97 >= *((double *)&v97 + 1))
  {
LABEL_66:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v79, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
LABEL_67:
    if (v12 >= 0.0)
    {
LABEL_71:
      specialized IncrementalStack<>.log(_:)(v18, 0xD000000000000010, 0x8000000187BD5CE0, v11, 0.0, v12, v9);
      *(_OWORD *)&v82[16] = v105;
      v83 = v106;
      v84 = v107;
      v85 = v108;
      v79 = v101;
      v80 = v102;
      v81 = v103;
      *(_OWORD *)v82 = v104;
      *(double *)&result = COERCE_DOUBLE(outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)&v79));
      v10 = v9;
      goto LABEL_72;
    }
LABEL_68:
    if (*(_QWORD *)(v40 + 16))
      v12 = v43;
    else
      v12 = 0.0;
    goto LABEL_71;
  }
  if (*(double *)&v97 <= *((double *)&v97 + 1))
  {
    v12 = *((double *)&v97 + 1) - *(double *)&v97;
    v11 = *(double *)&v97;
    goto LABEL_66;
  }
LABEL_77:
  __break(1u);
  return result;
}

{
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __int128 *Value;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  int v39;
  __int128 v40;
  char v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  char v53;
  double v54;
  double v55;
  double v56;
  char v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[32];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[31];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _QWORD v110[3];

  v9 = *(double *)(a3 + 32);
  if (v9 <= 0.0)
  {
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
LABEL_72:
    *(_QWORD *)a8 = 0;
    *(double *)(a8 + 8) = v11;
    *(double *)(a8 + 16) = v10;
    *(double *)(a8 + 24) = v12;
    *(_BYTE *)(a8 + 32) = v9 <= 0.0;
    return result;
  }
  v18 = result;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = *(_OWORD *)(a3 + 104);
  v21 = *(_OWORD *)(a3 + 136);
  *(_OWORD *)&v82[16] = *(_OWORD *)(a3 + 120);
  v83 = v21;
  v84 = *(_OWORD *)(a3 + 152);
  v22 = *(_OWORD *)(a3 + 72);
  v79 = *(_OWORD *)(a3 + 56);
  v80 = v22;
  v81 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)v82 = v20;
  v23 = *(_OWORD *)(a4 + 80);
  v105 = *(_OWORD *)(a4 + 64);
  v106 = v23;
  v24 = *(_OWORD *)(a4 + 112);
  v107 = *(_OWORD *)(a4 + 96);
  v108 = v24;
  v25 = *(_OWORD *)(a4 + 16);
  v101 = *(_OWORD *)a4;
  v102 = v25;
  v26 = *(_OWORD *)(a4 + 48);
  v103 = *(_OWORD *)(a4 + 32);
  v104 = v26;
  outlined retain of _IncrementalStack_State<LazyVStackLayout>(a4);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  v28 = v27;
  v30 = v29;
  v31 = 0.0;
  if (v19 != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v33 = Value[1];
    v79 = *Value;
    v80 = v33;
    MEMORY[0x18D75BE3C]();
  }
  v35 = *(_QWORD *)(a4 + 112);
  v34 = *(_QWORD *)(a4 + 120);
  v110[0] = v35;
  v37 = *(double *)(a4 + 96);
  v36 = *(double *)(a4 + 104);
  if (v37 > 0.0 && v30 - v28 > 0.0)
  {
    v38 = vabdd_f64(v37, v30 - v28);
    if (v36 <= 0.0 || v31 <= 0.0)
    {
      if (v38 >= 0.01)
        goto LABEL_43;
      goto LABEL_14;
    }
    if (v38 >= 0.01)
    {
LABEL_43:
      v109 = v34;
      v59 = MEMORY[0x1E0DEE9D8];
      v60 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      outlined release of _IncrementalLayout_Placements((uint64_t)v110);
      *(_QWORD *)&v108 = v60;
      v61 = specialized Dictionary.init(dictionaryLiteral:)(v59);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v109);
      *((_QWORD *)&v108 + 1) = v61;
      v39 = 1;
      if (!*(_QWORD *)(v60 + 16))
        goto LABEL_44;
      goto LABEL_16;
    }
LABEL_13:
    if (vabdd_f64(v36, v31) >= 0.01)
      goto LABEL_43;
LABEL_14:
    v39 = 0;
    goto LABEL_15;
  }
  v39 = 0;
  if (v36 > 0.0 && v31 > 0.0)
    goto LABEL_13;
LABEL_15:
  if (!*(_QWORD *)(v35 + 16))
  {
LABEL_44:
    v78 = 0;
    *(_QWORD *)&v79 = 0;
    specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)((double *)&v79, &v78, 1, a2, (uint64_t)&v101, a5, a6, a7 & 0xFFFFFFFF00000001, v9, v9);
  }
LABEL_16:
  v77 = a2;
  v40 = v108;
  *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v108, *((uint64_t *)&v108 + 1)));
  v43 = v42;
  v44 = *(double *)&result;
  if ((v41 & 1) != 0)
    v45 = 0.0;
  else
    v45 = *(double *)&result;
  v46 = *(_QWORD *)(a4 + 48);
  v11 = (v43 + v45) * (double)v18;
  if (v46 == *(_QWORD *)(a4 + 56) || (*(_BYTE *)(a4 + 24) & 1) != 0)
    goto LABEL_68;
  v48 = v9 != *(double *)(a4 + 8) || *(_QWORD *)a4 != 1;
  if (v9 != *(double *)(a4 + 16))
    v48 = 1;
  if (((v39 | v48) & 1) != 0)
    goto LABEL_68;
  if ((v18 < 1) | v41 & 1)
    v44 = 0.0;
  v49 = v18 - v46;
  if (__OFSUB__(v18, v46))
  {
    __break(1u);
    goto LABEL_74;
  }
  v50 = v18 - v46;
  if (v49 < 0)
  {
    v50 = v46 - v18;
    if (__OFSUB__(0, v49))
      goto LABEL_75;
  }
  v11 = v11 - v44;
  if (*(_QWORD *)(v40 + 16))
  {
    *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v40, *((uint64_t *)&v40 + 1)));
    v52 = *(double *)&result;
    if ((v53 & 1) != 0)
      v52 = 0.0;
    v54 = (v51 + v52) * (double)v50;
    if (*(_QWORD *)(v40 + 16))
    {
      *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v40, *((uint64_t *)&v40 + 1)));
      v56 = *(double *)&result;
      if ((v57 & 1) != 0)
        v56 = 0.0;
      v58 = v55 + v56;
    }
    else
    {
      v58 = 32.0;
    }
    v49 = v18 - v46;
  }
  else
  {
    v58 = 32.0;
    v54 = (double)v50 * 32.0;
  }
  v62 = *(double *)(a4 + 64);
  v63 = v62 + v58 * (double)v49;
  if (v63 >= 0.0)
    v11 = v63;
  v12 = -1.0;
  if (v54 >= (*(double *)(a4 + 88) - *(double *)(a4 + 80)) * 3.0)
  {
    v71 = v77;
  }
  else
  {
    memset(v93, 0, sizeof(v93));
    v92 = 0u;
    v91 = 0u;
    v90 = 0u;
    v89 = 0u;
    v64 = MEMORY[0x1E0DEE9D8];
    v65 = v49;
    v66 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v67 = specialized Dictionary.init(dictionaryLiteral:)(v64);
    *(_QWORD *)&v79 = a5;
    *((_QWORD *)&v79 + 1) = a6;
    LOBYTE(v80) = a7 & 1;
    DWORD1(v80) = HIDWORD(a7);
    *(_QWORD *)&v81 = 1;
    *((double *)&v81 + 1) = v9;
    *(double *)v82 = v9;
    BYTE8(v80) = 1;
    *(int64x2_t *)&v82[8] = vdupq_n_s64(0x7FF0000000000000uLL);
    *(_DWORD *)&v82[24] = 0;
    *(_QWORD *)&v83 = v18;
    BYTE8(v83) = 0;
    *(_QWORD *)&v84 = 0;
    BYTE8(v84) = 0;
    v85 = 0uLL;
    v86 = 1;
    v87 = v64;
    v88 = 0;
    v94 = v64;
    v95 = xmmword_187C05350;
    v96 = xmmword_187C05360;
    v97 = xmmword_187C05360;
    v98 = 0;
    v99 = v66;
    v100 = v67;
    if (v65 < 0)
    {
      LOBYTE(v78) = 0;
      v72 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v18, v46, v77, 2uLL, &v78);
      specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v72, v46, v18 == 0, v78, 0, v62);
      swift_bridgeObjectRelease();
      v69 = v84;
      v70 = *(double *)&v85;
      v68 = v77;
    }
    else
    {
      v68 = v77;
      v69 = v46;
      v70 = v62;
    }
    *(double *)&result = COERCE_DOUBLE(specialized StackPlacement.place(children:from:position:stopping:style:)(v68, v69, v18, 0, v70));
    if (*(double *)&v97 >= *((double *)&v97 + 1))
    {
      v71 = v77;
    }
    else
    {
      v71 = v77;
      if (*(double *)&v97 > *((double *)&v97 + 1))
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      if (*(double *)&v97 >= 0.0)
      {
        v12 = *((double *)&v97 + 1) - *(double *)&v97;
        v11 = *(double *)&v97;
      }
    }
    *(double *)&result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v79, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout));
  }
  if ((uint64_t)v104 <= v18)
    goto LABEL_67;
  v73 = *((double *)&v106 + 1) - *(double *)&v106;
  if (*((double *)&v106 + 1) - *(double *)&v106 < 0.0)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  memset(v93, 0, sizeof(v93));
  v92 = 0u;
  v91 = 0u;
  v90 = 0u;
  v89 = 0u;
  v74 = MEMORY[0x1E0DEE9D8];
  v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v76 = specialized Dictionary.init(dictionaryLiteral:)(v74);
  *(_QWORD *)&v79 = a5;
  *((_QWORD *)&v79 + 1) = a6;
  LOBYTE(v80) = a7 & 1;
  DWORD1(v80) = HIDWORD(a7);
  *(_QWORD *)&v81 = 1;
  *((double *)&v81 + 1) = v9;
  *(_OWORD *)v82 = *(unint64_t *)&v9;
  BYTE8(v80) = 1;
  *(double *)&v82[16] = v73;
  *(_DWORD *)&v82[24] = 0;
  *(_QWORD *)&v83 = v18;
  BYTE8(v83) = 0;
  *(_QWORD *)&v84 = 0;
  BYTE8(v84) = 0;
  v85 = 0uLL;
  v86 = 1;
  v87 = v74;
  v88 = 0;
  v94 = v74;
  v95 = xmmword_187C05350;
  v96 = xmmword_187C05360;
  v97 = xmmword_187C05360;
  v98 = 0;
  v99 = v75;
  v100 = v76;
  *(double *)&result = COERCE_DOUBLE(specialized StackPlacement.place(children:from:position:stopping:style:)(v71, 0, 0, 1, 0.0));
  if (*(double *)&v97 >= *((double *)&v97 + 1))
  {
LABEL_66:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v79, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
LABEL_67:
    if (v12 >= 0.0)
    {
LABEL_71:
      specialized IncrementalStack<>.log(_:)(v18, 0xD000000000000010, 0x8000000187BD5BD0, 0.0, v11, v9, v12);
      *(_OWORD *)&v82[16] = v105;
      v83 = v106;
      v84 = v107;
      v85 = v108;
      v79 = v101;
      v80 = v102;
      v81 = v103;
      *(_OWORD *)v82 = v104;
      *(double *)&result = COERCE_DOUBLE(outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)&v79));
      v10 = v9;
      goto LABEL_72;
    }
LABEL_68:
    if (*(_QWORD *)(v40 + 16))
      v12 = v43;
    else
      v12 = 0.0;
    goto LABEL_71;
  }
  if (*(double *)&v97 <= *((double *)&v97 + 1))
  {
    v12 = *((double *)&v97 + 1) - *(double *)&v97;
    v11 = *(double *)&v97;
    goto LABEL_66;
  }
LABEL_77:
  __break(1u);
  return result;
}

uint64_t EstimationState.merge(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  uint64_t v8;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *v2;
  *v2 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  *v2 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v8 = v2[1];
  v2[1] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v6, &v8);
  v2[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(uint64_t result, BOOL *a2, uint64_t a3, uint64_t **a4, unint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v13;
  uint64_t **v14;
  BOOL *v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  int64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  BOOL *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  BOOL *v46;
  uint64_t **v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  int v51;
  char v52[104];

  v11 = a7;
  v13 = a5;
  v14 = a4;
  v16 = a2;
  v17 = result;
  if ((*(_BYTE *)(result + 93) & 1) != 0)
  {
    v18 = 1;
  }
  else if (*(_BYTE *)(result + 94))
  {
    v18 = 2;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(_DWORD *)(result + 88);
  v20 = *(_BYTE *)(result + 92);
  if ((*(_BYTE *)(a3 + 4) & 1) == 0)
  {
    if ((*(_BYTE *)(result + 92) & 1) == 0)
    {
      v22 = *(_DWORD *)a3 == v19;
      if (v18)
      {
LABEL_14:
        v21 = a5 >> 1;
        if (a5 >> 1 == 1)
          goto LABEL_20;
LABEL_15:
        if (!v21)
        {
          __break(1u);
          goto LABEL_48;
        }
        v23 = *a6;
        v24 = *a6 % v21;
        if (v24)
        {
          v25 = __OFSUB__(v21, v24);
          v26 = v21 - v24;
          if (v25)
            goto LABEL_49;
          v25 = __OFADD__(v23, v26);
          v27 = v23 + v26;
          if (v25)
            goto LABEL_50;
          *a6 = v27;
        }
LABEL_20:
        v28 = *a7 < *a6;
        *a2 = v28;
        if (v28)
          goto LABEL_46;
        goto LABEL_24;
      }
      if (*(_DWORD *)a3 == v19)
        goto LABEL_23;
    }
LABEL_12:
    v22 = 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(result + 92) & 1) == 0)
    goto LABEL_12;
  if (v18)
  {
    v21 = a5 >> 1;
    v22 = 1;
    if (a5 >> 1 == 1)
      goto LABEL_20;
    goto LABEL_15;
  }
LABEL_23:
  v22 = 1;
LABEL_24:
  v50 = v20;
  v51 = v19;
  v48 = a9;
  v9 = (uint64_t *)(a8 + 16);
  v29 = *(unsigned __int8 *)a4;
  if (v29 != v18)
    v22 = 0;
  if (v29 == 3)
    goto LABEL_33;
  if (v22)
    goto LABEL_33;
  swift_beginAccess();
  v10 = *v9;
  if (!*(_QWORD *)(*v9 + 16))
    goto LABEL_33;
  v49 = v11;
  v47 = v14;
  v14 = (uint64_t **)(a9 + 16);
  swift_beginAccess();
  v11 = *(uint64_t **)(a9 + 16);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a9 + 16) = v11;
  v45 = v13;
  v46 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_52;
  while (1)
  {
    v32 = v11[2];
    v31 = v11[3];
    if (v32 >= v31 >> 1)
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v11);
      *v14 = v11;
    }
    v14 = v47;
    v11[2] = v32 + 1;
    v11[v32 + 4] = v10;
    swift_beginAccess();
    *v9 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    v11 = v49;
    v13 = v45;
    v16 = v46;
LABEL_33:
    outlined init with copy of _IncrementalLayout_Child(v17, (uint64_t)v52);
    swift_beginAccess();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_Child], (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    Array.append(_:)();
    result = swift_endAccess();
    if (!v18)
      break;
    if (!__OFADD__(*a6, v13 >> 1))
    {
      *a6 += v13 >> 1;
      goto LABEL_45;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    *v14 = v11;
  }
  v49 = v11;
  if (__OFADD__(*a6, 1))
    goto LABEL_51;
  v33 = v16;
  ++*a6;
  swift_beginAccess();
  v34 = swift_bridgeObjectRetain();
  v35 = MEMORY[0x18D75D024](v34, &type metadata for _IncrementalLayout_Child);
  result = swift_bridgeObjectRelease();
  v36 = v35 == v13 >> 1;
  v16 = v33;
  if (v36)
  {
    result = swift_beginAccess();
    v37 = *v9;
    if (*(_QWORD *)(*v9 + 16))
    {
      v38 = (_QWORD *)(v48 + 16);
      swift_beginAccess();
      v39 = *(_QWORD **)(v48 + 16);
      swift_bridgeObjectRetain();
      v40 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v48 + 16) = v39;
      if ((v40 & 1) == 0)
      {
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
        *v38 = v39;
      }
      v42 = v39[2];
      v41 = v39[3];
      v43 = v42 + 1;
      if (v42 >= v41 >> 1)
      {
        v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v39);
        v43 = v42 + 1;
        v39 = v44;
        *v38 = v44;
      }
      v16 = v33;
      v39[2] = v43;
      v39[v42 + 4] = v37;
      swift_beginAccess();
      *v9 = MEMORY[0x1E0DEE9D8];
      result = swift_bridgeObjectRelease();
      v11 = v49;
    }
  }
LABEL_45:
  *v16 = *v11 < *a6;
  v20 = v50;
  v19 = v51;
LABEL_46:
  *(_DWORD *)a3 = v19;
  *(_BYTE *)(a3 + 4) = v20;
  *(_BYTE *)v14 = v18;
  return result;
}

uint64_t specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  double v14;
  double v15;
  char v16;
  double v17;
  uint64_t result;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  __C::CGRect v47;
  char v48;
  _BYTE v49[24];
  _BYTE v50[16];
  uint64_t v51;

  v30 = a8;
  v31 = a3;
  v33 = a6;
  v34 = a7;
  v32 = a5;
  v13 = *(_QWORD *)(a4 + 104);
  if (*(_QWORD *)(v13 + 16))
  {
    v15 = COERCE_DOUBLE(EstimationState.average.getter(*(_QWORD *)(a4 + 104), *(_QWORD *)(a4 + 112)));
    if ((v16 & 1) != 0)
      v15 = 0.0;
    v17 = v14 + v15;
  }
  else
  {
    v17 = 32.0;
  }
  outlined init with take of MinorProperties<LazyHGridLayout>?(a4, (uint64_t)v49, &lazy cache variable for type metadata for MinorProperties<LazyHGridLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
  result = outlined init with take of MinorProperties<LazyHGridLayout>?((uint64_t)v49, (uint64_t)v50, &lazy cache variable for type metadata for MinorProperties<LazyHGridLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
  if (!v51)
    goto LABEL_16;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_16;
  v20 = *(double *)(a4 + 88);
  if (v20 <= 0.0 || v17 <= 0.0)
    goto LABEL_16;
  v21 = v20 / v17;
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v22 = *(_QWORD *)(a4 + 48);
  if (__OFADD__(v22, (uint64_t)v21))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v29 = (uint64_t)&v29;
  v44 = v22;
  v45 = v22;
  v42 = 0;
  v43 = 1;
  MEMORY[0x1E0C80A78](result, v19);
  v47.origin.x = *(CGFloat *)(a2 + 104);
  v23 = outlined init with copy of _ViewList_Node(a2 + 16, (uint64_t)&v36);
  v46[0] = 2;
  MEMORY[0x1E0C80A78](v23, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v36);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v43 & 1) != 0
    || (specialized IncrementalStack<>.boundingRect(at:children:context:state:)(v42, a2, v31, a4, v32, v33, v34, v30 & 0xFFFFFFFF00000001, (uint64_t)v46), result = outlined init with take of CGRect?((uint64_t)v46, (uint64_t)&v47), (v48 & 1) != 0))
  {
LABEL_16:
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_BYTE *)(a9 + 64) = 1;
    return result;
  }
  v35[0] = *(_OWORD *)(a1 + 8);
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)(a1 + 17);
  UnitPoint.in(_:)(v47);
  result = _Placement.init(proposedSize:anchoring:at:)();
  v25 = v37;
  v26 = v38;
  v27 = v39;
  *(_QWORD *)a9 = v36;
  *(_QWORD *)(a9 + 8) = v25;
  *(_QWORD *)(a9 + 16) = v26;
  *(_QWORD *)(a9 + 24) = v27;
  v28 = v41;
  *(_OWORD *)(a9 + 32) = v40;
  *(_OWORD *)(a9 + 48) = v28;
  *(_BYTE *)(a9 + 64) = 0;
  return result;
}

{
  uint64_t v13;
  double v14;
  double v15;
  char v16;
  double v17;
  uint64_t result;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  __C::CGRect v47;
  char v48;
  _BYTE v49[24];
  _BYTE v50[16];
  uint64_t v51;

  v30 = a8;
  v31 = a3;
  v33 = a6;
  v34 = a7;
  v32 = a5;
  v13 = *(_QWORD *)(a4 + 104);
  if (*(_QWORD *)(v13 + 16))
  {
    v15 = COERCE_DOUBLE(EstimationState.average.getter(*(_QWORD *)(a4 + 104), *(_QWORD *)(a4 + 112)));
    if ((v16 & 1) != 0)
      v15 = 0.0;
    v17 = v14 + v15;
  }
  else
  {
    v17 = 32.0;
  }
  outlined init with take of MinorProperties<LazyHGridLayout>?(a4, (uint64_t)v49, &lazy cache variable for type metadata for MinorProperties<LazyVGridLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
  result = outlined init with take of MinorProperties<LazyHGridLayout>?((uint64_t)v49, (uint64_t)v50, &lazy cache variable for type metadata for MinorProperties<LazyVGridLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
  if (!v51)
    goto LABEL_16;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_16;
  v20 = *(double *)(a4 + 88);
  if (v20 <= 0.0 || v17 <= 0.0)
    goto LABEL_16;
  v21 = v20 / v17;
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v22 = *(_QWORD *)(a4 + 48);
  if (__OFADD__(v22, (uint64_t)v21))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v29 = (uint64_t)&v29;
  v44 = v22;
  v45 = v22;
  v42 = 0;
  v43 = 1;
  MEMORY[0x1E0C80A78](result, v19);
  v47.origin.x = *(CGFloat *)(a2 + 104);
  v23 = outlined init with copy of _ViewList_Node(a2 + 16, (uint64_t)&v36);
  v46[0] = 2;
  MEMORY[0x1E0C80A78](v23, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v36);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v43 & 1) != 0
    || (specialized IncrementalStack<>.boundingRect(at:children:context:state:)(v42, a2, v31, a4, v32, v33, v34, v30 & 0xFFFFFFFF00000001, (uint64_t)v46), result = outlined init with take of CGRect?((uint64_t)v46, (uint64_t)&v47), (v48 & 1) != 0))
  {
LABEL_16:
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_BYTE *)(a9 + 64) = 1;
    return result;
  }
  v35[0] = *(_OWORD *)(a1 + 8);
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)(a1 + 17);
  UnitPoint.in(_:)(v47);
  result = _Placement.init(proposedSize:anchoring:at:)();
  v25 = v37;
  v26 = v38;
  v27 = v39;
  *(_QWORD *)a9 = v36;
  *(_QWORD *)(a9 + 8) = v25;
  *(_QWORD *)(a9 + 16) = v26;
  *(_QWORD *)(a9 + 24) = v27;
  v28 = v41;
  *(_OWORD *)(a9 + 32) = v40;
  *(_OWORD *)(a9 + 48) = v28;
  *(_BYTE *)(a9 + 64) = 0;
  return result;
}

uint64_t specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  double v13;
  double v14;
  char v15;
  double v16;
  uint64_t result;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[3];
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  __C::CGRect v45;
  char v46;
  _BYTE v47[32];
  _BYTE v48[40];

  v29 = a7;
  v30 = a3;
  v31 = a5;
  v32 = a6;
  v12 = *(_QWORD *)(a4 + 112);
  if (*(_QWORD *)(v12 + 16))
  {
    v14 = COERCE_DOUBLE(EstimationState.average.getter(*(_QWORD *)(a4 + 112), *(_QWORD *)(a4 + 120)));
    if ((v15 & 1) != 0)
      v14 = 0.0;
    v16 = v13 + v14;
  }
  else
  {
    v16 = 32.0;
  }
  outlined init with take of MinorProperties<LazyHGridLayout>?(a4, (uint64_t)v47, &lazy cache variable for type metadata for MinorProperties<LazyHStackLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
  result = outlined init with take of MinorProperties<LazyHGridLayout>?((uint64_t)v47, (uint64_t)v48, &lazy cache variable for type metadata for MinorProperties<LazyHStackLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
  if ((v48[24] & 1) != 0)
    goto LABEL_16;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_16;
  v19 = *(double *)(a4 + 96);
  if (v19 <= 0.0 || v16 <= 0.0)
    goto LABEL_16;
  v20 = v19 / v16;
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v21 = *(_QWORD *)(a4 + 56);
  if (__OFADD__(v21, (uint64_t)v20))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v28[1] = v28;
  v42 = v21;
  v43 = v21;
  v40 = 0;
  v41 = 1;
  MEMORY[0x1E0C80A78](result, v18);
  v45.origin.x = *(CGFloat *)(a2 + 104);
  v22 = outlined init with copy of _ViewList_Node(a2 + 16, (uint64_t)&v34);
  v44[0] = 2;
  MEMORY[0x1E0C80A78](v22, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v34);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v41 & 1) != 0
    || (specialized IncrementalStack<>.boundingRect(at:children:context:state:)(v40, a2, v30, a4, v31, v32, v29 & 0xFFFFFFFF00000001, (uint64_t)v44), result = outlined init with take of CGRect?((uint64_t)v44, (uint64_t)&v45), (v46 & 1) != 0))
  {
LABEL_16:
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_BYTE *)(a8 + 64) = 1;
    return result;
  }
  v33[0] = *(_OWORD *)(a1 + 8);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a1 + 17);
  UnitPoint.in(_:)(v45);
  result = _Placement.init(proposedSize:anchoring:at:)();
  v24 = v35;
  v25 = v36;
  v26 = v37;
  *(_QWORD *)a8 = v34;
  *(_QWORD *)(a8 + 8) = v24;
  *(_QWORD *)(a8 + 16) = v25;
  *(_QWORD *)(a8 + 24) = v26;
  v27 = v39;
  *(_OWORD *)(a8 + 32) = v38;
  *(_OWORD *)(a8 + 48) = v27;
  *(_BYTE *)(a8 + 64) = 0;
  return result;
}

{
  uint64_t v12;
  double v13;
  double v14;
  char v15;
  double v16;
  uint64_t result;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[3];
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  __C::CGRect v45;
  char v46;
  _BYTE v47[32];
  _BYTE v48[40];

  v29 = a7;
  v30 = a3;
  v31 = a5;
  v32 = a6;
  v12 = *(_QWORD *)(a4 + 112);
  if (*(_QWORD *)(v12 + 16))
  {
    v14 = COERCE_DOUBLE(EstimationState.average.getter(*(_QWORD *)(a4 + 112), *(_QWORD *)(a4 + 120)));
    if ((v15 & 1) != 0)
      v14 = 0.0;
    v16 = v13 + v14;
  }
  else
  {
    v16 = 32.0;
  }
  outlined init with take of MinorProperties<LazyHGridLayout>?(a4, (uint64_t)v47, &lazy cache variable for type metadata for MinorProperties<LazyVStackLayout>?, (unint64_t *)&lazy cache variable for type metadata for MinorProperties<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
  result = outlined init with take of MinorProperties<LazyHGridLayout>?((uint64_t)v47, (uint64_t)v48, &lazy cache variable for type metadata for MinorProperties<LazyVStackLayout>?, (unint64_t *)&lazy cache variable for type metadata for MinorProperties<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
  if ((v48[24] & 1) != 0)
    goto LABEL_16;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_16;
  v19 = *(double *)(a4 + 96);
  if (v19 <= 0.0 || v16 <= 0.0)
    goto LABEL_16;
  v20 = v19 / v16;
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v21 = *(_QWORD *)(a4 + 56);
  if (__OFADD__(v21, (uint64_t)v20))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v28[1] = v28;
  v42 = v21;
  v43 = v21;
  v40 = 0;
  v41 = 1;
  MEMORY[0x1E0C80A78](result, v18);
  v45.origin.x = *(CGFloat *)(a2 + 104);
  v22 = outlined init with copy of _ViewList_Node(a2 + 16, (uint64_t)&v34);
  v44[0] = 2;
  MEMORY[0x1E0C80A78](v22, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v34);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v41 & 1) != 0
    || (specialized IncrementalStack<>.boundingRect(at:children:context:state:)(v40, a2, v30, a4, v31, v32, v29 & 0xFFFFFFFF00000001, (uint64_t)v44), result = outlined init with take of CGRect?((uint64_t)v44, (uint64_t)&v45), (v46 & 1) != 0))
  {
LABEL_16:
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_BYTE *)(a8 + 64) = 1;
    return result;
  }
  v33[0] = *(_OWORD *)(a1 + 8);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a1 + 17);
  UnitPoint.in(_:)(v45);
  result = _Placement.init(proposedSize:anchoring:at:)();
  v24 = v35;
  v25 = v36;
  v26 = v37;
  *(_QWORD *)a8 = v34;
  *(_QWORD *)(a8 + 8) = v24;
  *(_QWORD *)(a8 + 16) = v25;
  *(_QWORD *)(a8 + 24) = v26;
  v27 = v39;
  *(_OWORD *)(a8 + 32) = v38;
  *(_OWORD *)(a8 + 48) = v27;
  *(_BYTE *)(a8 + 64) = 0;
  return result;
}

uint64_t closure #1 in IncrementalStack<>.placementOfNearbyChild(_:children:context:state:)(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v12;

  result = static _ViewList_ID.== infix(_:_:)();
  v12 = *a3;
  if ((result & 1) != 0)
  {
    *(_QWORD *)a6 = v12;
    *(_BYTE *)(a6 + 8) = 0;
    *a2 = 1;
    v12 = *a3 + 1;
    if (!__OFADD__(*a3, 1))
    {
LABEL_8:
      *a3 = v12;
      return result;
    }
    __break(1u);
  }
  if (v12 >= a7)
    *a2 = 1;
  if (!__OFADD__(v12++, 1))
    goto LABEL_8;
  __break(1u);
  return result;
}

uint64_t static MinorProperties.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  swift_getAssociatedTypeWitness();
  type metadata accessor for MinorProperties(0, a3, a4, v6);
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MinorProperties<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static MinorProperties.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t specialized Sequence.min(by:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = a1 + 64;
  v2 = *(_BYTE *)(a1 + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v24 = *(_QWORD *)(a1 + 72);
    if (v24)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v24 = *(_QWORD *)(a1 + 80);
      if (v24)
      {
        v6 = 2;
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 88);
        if (v24)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v24 = *(_QWORD *)(a1 + 96);
          if (v24)
          {
            v6 = 4;
          }
          else
          {
            v24 = *(_QWORD *)(a1 + 104);
            if (!v24)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v24 - 1) & v24;
    v7 = __clz(__rbit64(v24)) + (v6 << 6);
  }
  v10 = 8 * v7;
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(double *)(v11 + v10);
  v14 = *(_QWORD *)(v12 + v10);
  while (v8)
  {
    v15 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v16 = v15 | (v6 << 6);
LABEL_7:
    v17 = 8 * v16;
    v18 = *(double *)(v11 + v17);
    v19 = *(_QWORD *)(v12 + v17);
    if (v19 < v14)
    {
      v13 = v18;
      v14 = v19;
    }
  }
  v20 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v20 >= v9)
    return *(_QWORD *)&v13;
  v21 = *(_QWORD *)(v1 + 8 * v20);
  ++v6;
  if (v21)
    goto LABEL_25;
  v6 = v20 + 1;
  if (v20 + 1 >= v9)
    return *(_QWORD *)&v13;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
    goto LABEL_25;
  v6 = v20 + 2;
  if (v20 + 2 >= v9)
    return *(_QWORD *)&v13;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
    goto LABEL_25;
  v6 = v20 + 3;
  if (v20 + 3 >= v9)
    return *(_QWORD *)&v13;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
  {
LABEL_25:
    v8 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v6 << 6);
    goto LABEL_7;
  }
  v22 = v20 + 4;
  if (v22 >= v9)
    return *(_QWORD *)&v13;
  v21 = *(_QWORD *)(v1 + 8 * v22);
  if (v21)
  {
    v6 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v6 >= v9)
      return *(_QWORD *)&v13;
    v21 = *(_QWORD *)(v1 + 8 * v6);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v25 = 0;
  v26 = 6;
  if (v9 > 6)
    v26 = v9;
  v27 = v26 - 6;
  while (v27 != v25)
  {
    v24 = *(_QWORD *)(a1 + 112 + 8 * v25++);
    if (v24)
    {
      v6 = v25 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EstimationState(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0)
    return specialized static Dictionary<>.== infix(_:_:)(v2, v3);
  else
    return 0;
}

uint64_t specialized StackPlacement.log(_:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;

  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v16 = __swift_project_value_buffer(v10, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v16, v10);
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v17._countAndFlagsBits = 0x20676E6963616C70;
    v17._object = (void *)0xEE0023206D6F7266;
    String.append(_:)(v17);
    v33._countAndFlagsBits = a5;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 8236;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 544106784;
    v21._object = (void *)0xE400000000000000;
    String.append(_:)(v21);
    v34 = a3;
    v35 = a2;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v22._countAndFlagsBits = 3026478;
    v22._object = (void *)0xE300000000000000;
    String.append(_:)(v22);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    v25 = v36;
    v24 = v37;
    swift_bridgeObjectRetain();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v32 = v25;
      v29 = v28;
      v30 = swift_slowAlloc();
      v36 = v30;
      *(_DWORD *)v29 = 136315394;
      v33._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000006DLL, a6, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2080;
      swift_bridgeObjectRetain();
      v33._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v24, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v26, v27, "%s: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v30, -1, -1);
      MEMORY[0x18D760108](v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;

  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v16 = __swift_project_value_buffer(v10, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v16, v10);
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v17._countAndFlagsBits = 0x20676E6963616C70;
    v17._object = (void *)0xEE0023206D6F7266;
    String.append(_:)(v17);
    v33._countAndFlagsBits = a5;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 8236;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 544106784;
    v21._object = (void *)0xE400000000000000;
    String.append(_:)(v21);
    v34 = a3;
    v35 = a2;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v22._countAndFlagsBits = 3026478;
    v22._object = (void *)0xE300000000000000;
    String.append(_:)(v22);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    v25 = v36;
    v24 = v37;
    swift_bridgeObjectRetain();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v32 = v25;
      v29 = v28;
      v30 = swift_slowAlloc();
      v36 = v30;
      *(_DWORD *)v29 = 136315394;
      v33._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000047, a6, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2080;
      swift_bridgeObjectRetain();
      v33._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v24, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v26, v27, "%s: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v30, -1, -1);
      MEMORY[0x18D760108](v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  return result;
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t a1, uint64_t *a2, _BYTE *a3, char a4, _BYTE *a5, _BYTE *a6)
{
  return specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, a6, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:));
}

{
  return specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, a6, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:));
}

{
  return specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, a6, (double (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:));
}

{
  return specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, a6, (double (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:));
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t *a2, _BYTE *a3, char a4, _BYTE *a5, _BYTE *a6, double (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _OWORD v34[6];
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  _BYTE v43[104];

  v11 = result;
  v12 = a2 + 18;
  v13 = a2[18];
  v14 = *(_QWORD *)(v13 + 16);
  if ((result & 1) != 0 || v14)
  {
    v15 = a2 + 19;
    v16 = a2[19];
    if (!v16)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v14)
    {
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(v16 + 16))
      {
LABEL_6:
        outlined init with copy of _IncrementalLayout_Child(v16 + 32, (uint64_t)v43);
        if ((v43[93] & 1) == 0 && v43[94] != 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of _IncrementalLayout_Child((uint64_t)v43);
          v20 = *a2;
          v29 = a2[2];
          v30 = a2[1];
          v31 = a6;
          v21 = *((_BYTE *)a2 + 24);
          v22 = a2[7];
          v28 = *((unsigned int *)a2 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LOBYTE(v34[0]) = v21;
          v15 = a2 + 19;
          v17 = a7(v16, v13, v22, v20, v30, v29, LOBYTE(v34[0]) | (unint64_t)(v28 << 32));
          v19 = v23;
          a6 = v31;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        swift_bridgeObjectRetain();
        outlined destroy of _IncrementalLayout_Child((uint64_t)v43);
        outlined init with copy of _IncrementalLayout_Child(v16 + 32, (uint64_t)v43);
        swift_bridgeObjectRelease();
        result = _ProposedSize.init(_:in:by:)();
        v35 = v39;
        v36 = v40;
        v37 = v41;
        v38 = v42;
        LOBYTE(a7) = *((_BYTE *)a2 + 32);
        if (v13)
        {
          if (!*(_QWORD *)(v13 + 16))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          outlined init with copy of _IncrementalLayout_Child(v13 + 32, (uint64_t)v34);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_13:
        memset(v34, 0, 95);
LABEL_14:
        v17 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v35, (char)a7, (uint64_t)v34, a2[2], *((_BYTE *)a2 + 24));
        v19 = v18;
        outlined destroy of _IncrementalLayout_Child?((uint64_t)v34);
        outlined destroy of _IncrementalLayout_Child((uint64_t)v43);
LABEL_16:
        result = swift_beginAccess();
        if (*a3 == 1)
          *((double *)a2 + 15) = *((double *)a2 + 15) - v17;
        v24 = a2[13];
        if (v24)
        {
          result = swift_beginAccess();
          if ((*a3 & 1) != 0)
            *((double *)a2 + 15) = *((double *)a2 + 15) - v19;
        }
        if (v19 + *((double *)a2 + 15) <= *((double *)a2 + 8) && (v11 & 1) == 0 && (a4 & 1) == 0)
        {
          swift_beginAccess();
          *a5 = 1;
          return swapChildren(_:_:)(v15, v12);
        }
        v25 = a2[5];
        v26 = __OFSUB__(v24, v25);
        v27 = v24 - v25;
        if (!v26)
        {
          swift_beginAccess();
          if (*a6 == 1 && (v27 & 0x8000000000000000) == 0)
            a2[13] = v27;
          return swapChildren(_:_:)(v15, v12);
        }
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      v13 = 0;
      if (*(_QWORD *)(v16 + 16))
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t *a2, _BYTE *a3, char a4, _BYTE *a5, _BYTE *a6, double (*a7)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double))
{
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _OWORD v30[6];
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  _BYTE v39[104];

  v11 = result;
  v12 = a2 + 17;
  v13 = a2[17];
  v14 = *(_QWORD *)(v13 + 16);
  if ((result & 1) != 0 || v14)
  {
    v15 = a2[18];
    if (!v15)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v14)
    {
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(v15 + 16))
      {
LABEL_6:
        outlined init with copy of _IncrementalLayout_Child(v15 + 32, (uint64_t)v39);
        if ((v39[93] & 1) == 0 && v39[94] != 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of _IncrementalLayout_Child((uint64_t)v39);
          v19 = *(double *)a2;
          v20 = a2[1];
          v21 = *((double *)a2 + 6);
          v22 = *((unsigned int *)a2 + 5);
          LOBYTE(v30[0]) = *((_BYTE *)a2 + 16);
          v16 = a7(v15, v13, *(_QWORD *)&v19, v20, LOBYTE(v30[0]) | (unint64_t)(v22 << 32), v21);
          v18 = v23;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        swift_bridgeObjectRetain();
        outlined destroy of _IncrementalLayout_Child((uint64_t)v39);
        outlined init with copy of _IncrementalLayout_Child(v15 + 32, (uint64_t)v39);
        swift_bridgeObjectRelease();
        result = _ProposedSize.init(_:in:by:)();
        v31 = v35;
        v32 = v36;
        v33 = v37;
        v34 = v38;
        LOBYTE(a7) = *((_BYTE *)a2 + 24);
        if (v13)
        {
          if (!*(_QWORD *)(v13 + 16))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          outlined init with copy of _IncrementalLayout_Child(v13 + 32, (uint64_t)v30);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_13:
        memset(v30, 0, 95);
LABEL_14:
        v16 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v31, (char)a7, (uint64_t)v30, a2[1], *((_BYTE *)a2 + 16));
        v18 = v17;
        outlined destroy of _IncrementalLayout_Child?((uint64_t)v30);
        outlined destroy of _IncrementalLayout_Child((uint64_t)v39);
LABEL_16:
        result = swift_beginAccess();
        if (*a3 == 1)
          *((double *)a2 + 14) = *((double *)a2 + 14) - v16;
        v24 = a2[12];
        if (v24)
        {
          result = swift_beginAccess();
          if ((*a3 & 1) != 0)
            *((double *)a2 + 14) = *((double *)a2 + 14) - v18;
        }
        if (v18 + *((double *)a2 + 14) <= *((double *)a2 + 7) && (v11 & 1) == 0 && (a4 & 1) == 0)
        {
          swift_beginAccess();
          *a5 = 1;
          return swapChildren(_:_:)(a2 + 18, v12);
        }
        v25 = a2[4];
        v26 = __OFSUB__(v24, v25);
        v27 = v24 - v25;
        if (!v26)
        {
          swift_beginAccess();
          if (*a6 == 1 && (v27 & 0x8000000000000000) == 0)
            a2[12] = v27;
          return swapChildren(_:_:)(a2 + 18, v12);
        }
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      v13 = 0;
      if (*(_QWORD *)(v15 + 16))
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t one-time initialization function for lazyStackLog()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.lazyStackLog);
  __swift_project_value_buffer(v0, (uint64_t)static Log.lazyStackLog);
  return Logger.init(subsystem:category:)();
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableLazyStackLogging()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableLazyStackLogging()
{
  swift_beginAccess();
  return static EnableLazyStackLogging.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableLazyStackLogging(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static EnableLazyStackLogging.cachedValue = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableLazyStackLogging())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableLazyStackLogging()
{
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyStackLogging()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyStackLogging()
{
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyStackLogging@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  v4 = lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t specialized closure #1 in LazyHVStack<>.flexibleMinorSize(children:)(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;

  IncrementalLayoutViewCache.item(data:)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  static _ProposedSize.unspecified.getter();
  result = LayoutProxy.size(in:)();
  *a3 = v6;
  *a2 = 1;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  IncrementalLayoutViewCache.item(data:)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  static _ProposedSize.unspecified.getter();
  result = LayoutProxy.size(in:)();
  *a3 = v6;
  *a2 = 1;
  return result;
}

unint64_t protocol witness for static IncrementalLayout.initialState.getter in conformance LazyVStackLayout@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = _Q1;
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  result = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = result;
  return result;
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyHStackLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD))specialized IncrementalStack<>.sizeThatFits(proposedSize:children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyHStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.place(children:context:state:in:));
}

uint64_t protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyVStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t))
{
  uint64_t v7;
  _BYTE __dst[304];

  memcpy(__dst, a2, 0x129uLL);
  return a7(a1, __dst, a3, a4, *(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(unsigned __int8 *)(v7 + 16) | ((unint64_t)*(unsigned int *)(v7 + 20) << 32));
}

uint64_t protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyHStackLayout(uint64_t a1, uint64_t a2, void *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:));
}

uint64_t protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, void *__src, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, _QWORD, _QWORD, unint64_t))
{
  uint64_t v8;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE __dst[304];
  _OWORD v20[8];

  memcpy(__dst, __src, 0x129uLL);
  v14 = a4[5];
  v20[4] = a4[4];
  v20[5] = v14;
  v15 = a4[7];
  v20[6] = a4[6];
  v20[7] = v15;
  v16 = a4[1];
  v20[0] = *a4;
  v20[1] = v16;
  v17 = a4[3];
  v20[2] = a4[2];
  v20[3] = v17;
  return a8(a1, a2, __dst, v20, a5, *(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(unsigned __int8 *)(v8 + 16) | ((unint64_t)*(unsigned int *)(v8 + 20) << 32));
}

unint64_t protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyHStackLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  __int128 v10;

  *((_QWORD *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:);
  *(_QWORD *)&v10 = &unk_1E1B245B0;
  return protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyVStackLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:), 0);
}

unint64_t protocol witness for IncrementalLayout.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:) in conformance LazyHStackLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  __int128 v10;

  *((_QWORD *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:);
  *(_QWORD *)&v10 = &unk_1E1B24588;
  return protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyVStackLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:), 0);
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyHStackLayout(uint64_t a1, const void *a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.firstIndex(children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyHStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout);
}

uint64_t protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  uint64_t v14;

  v14 = a8();
  return IncrementalStack<>.firstIndex<A>(of:children:context:)(a1, a2, a3, a6, a4, v14, a5);
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyHStackLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  return protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyVStackLayout(a3, a1, a2, a4, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.boundingRect(at:children:context:state:), a5);
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyHGridLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD))specialized IncrementalStack<>.sizeThatFits(proposedSize:children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyHGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.place(children:context:state:in:));
}

uint64_t protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyHGridLayout(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, unsigned __int8))specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:));
}

unint64_t protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyHGridLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  __int128 v10;

  *((_QWORD *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:);
  *(_QWORD *)&v10 = &unk_1E1B244C0;
  return protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyHGridLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:), 0);
}

unint64_t protocol witness for IncrementalLayout.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:) in conformance LazyHGridLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  __int128 v10;

  *((_QWORD *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:);
  *(_QWORD *)&v10 = &unk_1E1B24498;
  return protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyHGridLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:), 0);
}

unint64_t protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyHGridLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, __int128 a10, void (*a11)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), char a12)
{
  uint64_t v12;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE __dst[304];
  _OWORD v25[7];
  uint64_t v26;

  memcpy(__dst, __src, 0x129uLL);
  v19 = *(_OWORD *)(a7 + 80);
  v25[4] = *(_OWORD *)(a7 + 64);
  v25[5] = v19;
  v25[6] = *(_OWORD *)(a7 + 96);
  v26 = *(_QWORD *)(a7 + 112);
  v20 = *(_OWORD *)(a7 + 16);
  v25[0] = *(_OWORD *)a7;
  v25[1] = v20;
  v21 = *(_OWORD *)(a7 + 48);
  v25[2] = *(_OWORD *)(a7 + 32);
  v25[3] = v21;
  return specialized IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)(a2, a3, a4, a5, (uint64_t)__dst, a6, (uint64_t)v25, *(_QWORD *)v12, a8, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(unsigned __int8 *)(v12 + 24) | ((unint64_t)*(unsigned int *)(v12 + 28) << 32), a10, *((double (**)(uint64_t, double, double, double, double, double, double, double, double))&a10 + 1), a11, a12);
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyHGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.firstIndex(children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyHGridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout);
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyHGridLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyHGridLayout(a3, a1, a2, a4, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.boundingRect(at:children:context:state:), a5);
}

unint64_t protocol witness for static IncrementalLayout.initialState.getter in conformance LazyHGridLayout@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 88) = _Q0;
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  result = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(_QWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyVGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.place(children:context:state:in:));
}

uint64_t protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyHGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t))
{
  uint64_t v7;
  _BYTE __dst[304];

  memcpy(__dst, a2, 0x129uLL);
  return a7(a1, __dst, a3, a4, *(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(unsigned __int8 *)(v7 + 24) | ((unint64_t)*(unsigned int *)(v7 + 28) << 32));
}

uint64_t protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyVGridLayout(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, unsigned __int8))specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:));
}

uint64_t protocol witness for IncrementalLayout.prefetch(children:edges:context:state:offsetPastVisible:) in conformance LazyHGridLayout(uint64_t a1, uint64_t a2, void *__src, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, unsigned __int8))
{
  uint64_t v8;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned __int8 v18;
  _BYTE __dst[304];
  _OWORD v20[7];
  uint64_t v21;

  memcpy(__dst, __src, 0x129uLL);
  v14 = *(_OWORD *)(a4 + 80);
  v20[4] = *(_OWORD *)(a4 + 64);
  v20[5] = v14;
  v20[6] = *(_OWORD *)(a4 + 96);
  v21 = *(_QWORD *)(a4 + 112);
  v15 = *(_OWORD *)(a4 + 16);
  v20[0] = *(_OWORD *)a4;
  v20[1] = v15;
  v16 = *(_OWORD *)(a4 + 48);
  v20[2] = *(_OWORD *)(a4 + 32);
  v20[3] = v16;
  v18 = *(_BYTE *)(v8 + 24);
  return a8(a1, a2, __dst, v20, a5, *(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16), v18 | ((unint64_t)*(unsigned int *)(v8 + 28) << 32), v18);
}

unint64_t protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyVGridLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  __int128 v10;

  *((_QWORD *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:);
  *(_QWORD *)&v10 = &unk_1E1B24510;
  return protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyHGridLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:), 1);
}

unint64_t protocol witness for IncrementalLayout.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:) in conformance LazyVGridLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  __int128 v10;

  *((_QWORD *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:);
  *(_QWORD *)&v10 = &unk_1E1B244E8;
  return protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyHGridLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:), 1);
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyVGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, _QWORD, unint64_t))specialized IncrementalStack<>.firstIndex(children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyHGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, _QWORD, unint64_t))
{
  uint64_t v6;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE __dst[304];
  _OWORD v15[7];
  uint64_t v16;

  memcpy(__dst, a2, 0x129uLL);
  v10 = *(_OWORD *)(a3 + 80);
  v15[4] = *(_OWORD *)(a3 + 64);
  v15[5] = v10;
  v15[6] = *(_OWORD *)(a3 + 96);
  v16 = *(_QWORD *)(a3 + 112);
  v11 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v11;
  v12 = *(_OWORD *)(a3 + 48);
  v15[2] = *(_OWORD *)(a3 + 32);
  v15[3] = v12;
  return a6(a1, __dst, v15, *(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(unsigned __int8 *)(v6 + 24) | ((unint64_t)*(unsigned int *)(v6 + 28) << 32));
}

uint64_t protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyVGridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout);
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyVGridLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyHGridLayout(a3, a1, a2, a4, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.boundingRect(at:children:context:state:), a5);
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyHGridLayout@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, void (*a5)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t)@<X6>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];
  _BYTE __dst[304];
  _OWORD v21[7];
  uint64_t v22;

  memcpy(__dst, __src, 0x129uLL);
  v12 = *(_OWORD *)(a4 + 80);
  v21[4] = *(_OWORD *)(a4 + 64);
  v21[5] = v12;
  v21[6] = *(_OWORD *)(a4 + 96);
  v22 = *(_QWORD *)(a4 + 112);
  v13 = *(_OWORD *)(a4 + 16);
  v21[0] = *(_OWORD *)a4;
  v21[1] = v13;
  v14 = *(_OWORD *)(a4 + 48);
  v21[2] = *(_OWORD *)(a4 + 32);
  v21[3] = v14;
  v15 = *v6;
  v16 = v6[1];
  v17 = *((unsigned int *)v6 + 7);
  LOBYTE(v19[0]) = *((_BYTE *)v6 + 24);
  a5(v19, a2, a3, __dst, v21, v15, v16, v6[2], LOBYTE(v19[0]) | (unint64_t)(v17 << 32));
  return outlined init with take of CGRect?((uint64_t)v19, a6);
}

unint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if ((v9 & 1) != 0)
    goto LABEL_24;
  v10 = v7;
  v11 = v8;
  v12 = *(double *)&v7;
  v13 = (_QWORD *)*a5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v7);
  v16 = v13[2];
  v17 = (v15 & 1) == 0;
  v18 = __OFADD__(v16, v17);
  v19 = v16 + v17;
  if (v18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = v15;
  if (v13[3] < v19)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    if ((v20 & 1) == (v21 & 1))
      goto LABEL_7;
LABEL_5:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((a4 & 1) != 0)
  {
LABEL_7:
    v22 = (_QWORD *)*a5;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  v25 = result;
  specialized _NativeDictionary.copy()();
  result = v25;
  v22 = (_QWORD *)*a5;
  if ((v20 & 1) != 0)
  {
LABEL_8:
    v23 = (_QWORD *)(v22[7] + 8 * result);
    v24 = *v23 + v11;
    if (__OFADD__(*v23, v11))
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    *v23 = v24;
    v28 = specialized LazyMapSequence.Iterator.next()();
    if ((v30 & 1) == 0)
    {
      v10 = v28;
      v11 = v29;
      v20 = 1;
      do
      {
        v37 = (_QWORD *)*a5;
        result = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v10);
        v39 = v37[2];
        v40 = (v38 & 1) == 0;
        v18 = __OFADD__(v39, v40);
        v41 = v39 + v40;
        if (v18)
          goto LABEL_25;
        a4 = v38;
        if (v37[3] < v41)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
          result = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v10);
          if ((a4 & 1) != (v42 & 1))
            goto LABEL_5;
        }
        v43 = (_QWORD *)*a5;
        if ((a4 & 1) != 0)
        {
          v32 = (_QWORD *)(v43[7] + 8 * result);
          v34 = *v32 + v11;
          if (__OFADD__(*v32, v11))
            goto LABEL_23;
        }
        else
        {
          v43[(result >> 6) + 8] |= 1 << result;
          v31 = 8 * result;
          *(_QWORD *)(v43[6] + v31) = v10;
          *(_QWORD *)(v43[7] + v31) = v11;
          v33 = v43[2];
          v32 = v43 + 2;
          v34 = v33 + 1;
          if (__OFADD__(v33, 1))
            goto LABEL_26;
        }
        *v32 = v34;
        v10 = specialized LazyMapSequence.Iterator.next()();
        v11 = v35;
      }
      while ((v36 & 1) == 0);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
LABEL_12:
  v22[(result >> 6) + 8] |= 1 << result;
  v26 = 8 * result;
  *(_QWORD *)(v22[6] + v26) = v10;
  *(_QWORD *)(v22[7] + v26) = v11;
  v27 = v22[2];
  v23 = v22 + 2;
  v24 = v27 + 1;
  if (!__OFADD__(v27, 1))
    goto LABEL_13;
LABEL_26:
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;

  if (a2 <= a1)
    v4 = a1;
  else
    v4 = a2;
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size_2(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 17;
  v6[2] = a1;
  v6[3] = 2 * (v8 >> 4);
  return v6;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v13;
  CGRect v14;

  v13.origin.x = a5;
  v13.origin.y = a6;
  v13.size.width = a7;
  v13.size.height = a8;
  CGRectGetWidth(v13);
  v14.origin.x = a5;
  v14.origin.y = a6;
  v14.size.width = a7;
  v14.size.height = a8;
  CGRectGetHeight(v14);
  return CGRect.distance(to:)();
}

unint64_t lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyStackLogging, &unk_1E1ADB8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyStackLogging, &unk_1E1ADB8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyStackLogging, &unk_1E1ADB8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyStackLogging, &unk_1E1ADB8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyStackLogging, &unk_1E1ADB8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyStackLogging, &unk_1E1ADB8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyStackLogging, &unk_1E1ADB8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyStackLogging, &unk_1E1ADB8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

uint64_t specialized IncrementalStack<>.log(_:)(uint64_t a1, uint64_t a2, unint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;

  v14 = type metadata accessor for Logger();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v20 = __swift_project_value_buffer(v14, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v20, v14);
    v34 = 0.0;
    v35 = -2.68156159e154;
    _StringGuts.grow(_:)(25);
    v38 = *(_QWORD *)&v34;
    v39 = v35;
    v21._object = (void *)0x8000000187BD9040;
    v21._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v21);
    v34 = *(double *)&a1;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 544434464;
    v23._object = (void *)0xE400000000000000;
    String.append(_:)(v23);
    v34 = a4;
    v35 = a5;
    v36 = a6;
    v37 = a7;
    type metadata accessor for CGRect(0);
    _print_unlocked<A, B>(_:_:)();
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.append(_:)(v24);
    v26 = v38;
    v25 = *(_QWORD *)&v39;
    swift_bridgeObjectRetain();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v33 = v26;
      v30 = v29;
      *(double *)&v31 = COERCE_DOUBLE(swift_slowAlloc());
      v34 = *(double *)&v31;
      *(_DWORD *)v30 = 136315394;
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2080;
      swift_bridgeObjectRetain();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v25, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v27, v28, "%s: %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v31, -1, -1);
      MEMORY[0x18D760108](v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  return result;
}

double specialized LazyHVStack<>.flexibleMinorSize(children:)(uint64_t a1)
{
  _BYTE v2[88];
  uint64_t v3;
  uint64_t v4;
  double v5;

  v4 = 0;
  v5 = 0.0;
  v3 = *(_QWORD *)(a1 + 104);
  outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v2);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v5;
}

{
  _BYTE v2[88];
  uint64_t v3;
  uint64_t v4;
  double v5;

  v4 = 0;
  v5 = 0.0;
  v3 = *(_QWORD *)(a1 + 104);
  outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v2);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized IncrementalStack<>.log(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v11 = __swift_project_value_buffer(v5, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v11, v5);
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v12._countAndFlagsBits = 0x74616854657A6973;
    v12._object = (void *)0xED00002873746946;
    String.append(_:)(v12);
    v13._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x72657A203E2D2029;
    v14._object = (void *)0xE90000000000006FLL;
    String.append(_:)(v14);
    v16 = v24;
    v15 = v25;
    swift_bridgeObjectRetain();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v22 = v16;
      v20 = v19;
      v21 = swift_slowAlloc();
      v24 = v21;
      *(_DWORD *)v20 = 136315394;
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v17, v18, "%s: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v21, -1, -1);
      MEMORY[0x18D760108](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v11 = __swift_project_value_buffer(v5, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v11, v5);
    v24 = 0;
    v25 = 0xE000000000000000;
    v12._countAndFlagsBits = 0x74616C736E617274;
    v12._object = (void *)0xED00002079622065;
    String.append(_:)(v12);
    v13._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    String.append(_:)(v14);
    v16 = v24;
    v15 = v25;
    swift_bridgeObjectRetain();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v22 = v16;
      v20 = v19;
      v21 = swift_slowAlloc();
      v24 = v21;
      *(_DWORD *)v20 = 136315394;
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v17, v18, "%s: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v21, -1, -1);
      MEMORY[0x18D760108](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t specialized IncrementalStack<>.log(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v12 = __swift_project_value_buffer(v6, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v12, v6);
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    v13._countAndFlagsBits = 0x74616854657A6973;
    v13._object = (void *)0xED00002873746946;
    String.append(_:)(v13);
    v14._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x203E2D2029;
    v15._object = (void *)0xE500000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    v19 = v27;
    v18 = v28;
    swift_bridgeObjectRetain();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v25 = v19;
      v23 = v22;
      v24 = swift_slowAlloc();
      v27 = v24;
      *(_DWORD *)v23 = 136315394;
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v18, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v20, v21, "%s: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v24, -1, -1);
      MEMORY[0x18D760108](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

uint64_t specialized IncrementalStack<>.log(_:)(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v11._countAndFlagsBits = 0xD00000000000001BLL;
    v11._object = (void *)0x8000000187BD9000;
    String.append(_:)(v11);
    v24 = a2;
    v25 = a1;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3026478;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    v15 = v26;
    v14 = v27;
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v22 = v15;
      v19 = v18;
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315394;
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5BD0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v11._countAndFlagsBits = 0x28646563616C70;
    v11._object = (void *)0xE700000000000000;
    String.append(_:)(v11);
    v24 = a2;
    v25 = a1;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3026478;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x5D5B203E2D2029;
    v13._object = (void *)0xE700000000000000;
    String.append(_:)(v13);
    v15 = v26;
    v14 = v27;
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v22 = v15;
      v19 = v18;
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315394;
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5BD0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v11._object = (void *)0x8000000187BD9000;
    v11._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v11);
    v24 = a2;
    v25 = a1;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3026478;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    v15 = v26;
    v14 = v27;
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v22 = v15;
      v19 = v18;
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315394;
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x8000000187BD5F30, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v11._countAndFlagsBits = 0x28646563616C70;
    v11._object = (void *)0xE700000000000000;
    String.append(_:)(v11);
    v24 = a2;
    v25 = a1;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3026478;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x5D5B203E2D2029;
    v13._object = (void *)0xE700000000000000;
    String.append(_:)(v13);
    v15 = v26;
    v14 = v27;
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v22 = v15;
      v19 = v18;
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315394;
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x8000000187BD5F30, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v11._object = (void *)0x8000000187BD9000;
    v11._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v11);
    v24 = a2;
    v25 = a1;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3026478;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    v15 = v26;
    v14 = v27;
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v22 = v15;
      v19 = v18;
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315394;
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x8000000187BD5FE0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v11._countAndFlagsBits = 0x28646563616C70;
    v11._object = (void *)0xE700000000000000;
    String.append(_:)(v11);
    v24 = a2;
    v25 = a1;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3026478;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x5D5B203E2D2029;
    v13._object = (void *)0xE700000000000000;
    String.append(_:)(v13);
    v15 = v26;
    v14 = v27;
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v22 = v15;
      v19 = v18;
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315394;
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x8000000187BD5FE0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v11._countAndFlagsBits = 0xD00000000000001BLL;
    v11._object = (void *)0x8000000187BD9000;
    String.append(_:)(v11);
    v24 = a2;
    v25 = a1;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3026478;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    v15 = v26;
    v14 = v27;
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v22 = v15;
      v19 = v18;
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315394;
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5CE0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v11._countAndFlagsBits = 0x28646563616C70;
    v11._object = (void *)0xE700000000000000;
    String.append(_:)(v11);
    v24 = a2;
    v25 = a1;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 3026478;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x5D5B203E2D2029;
    v13._object = (void *)0xE700000000000000;
    String.append(_:)(v13);
    v15 = v26;
    v14 = v27;
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v22 = v15;
      v19 = v18;
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315394;
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5CE0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t specialized IncrementalStack<>.log(_:)(_OWORD *a1)
{
  return specialized IncrementalStack<>.log(_:)(a1, 0x8000000187BD5BD0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, 0x8000000187BD5CE0);
}

uint64_t specialized IncrementalStack<>.log(_:)(uint64_t a1)
{
  return specialized IncrementalStack<>.log(_:)(a1, 0xD000000000000010, 0x8000000187BD5BD0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, 0x8000000187BD5F30);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, 0xD000000000000036, 0x8000000187BD5F30);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, 0x8000000187BD5FE0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, 0xD000000000000036, 0x8000000187BD5FE0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, 0xD000000000000010, 0x8000000187BD5CE0);
}

uint64_t specialized IncrementalStack<>.log(_:)(uint64_t a1, uint64_t a2)
{
  return specialized IncrementalStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3123, 0xD000000000000010, 0x8000000187BD5BD0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3223, 0xD000000000000010, 0x8000000187BD5BD0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3123, 0xD000000000000036, 0x8000000187BD5F30);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3223, 0xD000000000000036, 0x8000000187BD5F30);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3123, 0xD000000000000036, 0x8000000187BD5FE0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3223, 0xD000000000000036, 0x8000000187BD5FE0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3123, 0xD000000000000010, 0x8000000187BD5CE0);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3223, 0xD000000000000010, 0x8000000187BD5CE0);
}

uint64_t specialized IncrementalStack<>.log(_:)(double *a1, uint64_t a2, double a3, double a4)
{
  return specialized IncrementalStack<>.log(_:)(a1, a2, 0x8000000187BD5BD0, a3, a4);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, 0x8000000187BD5F30, a3, a4);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, 0x8000000187BD5FE0, a3, a4);
}

{
  return specialized IncrementalStack<>.log(_:)(a1, a2, 0x8000000187BD5CE0, a3, a4);
}

uint64_t specialized IncrementalStack<>.log(_:)()
{
  return specialized IncrementalStack<>.log(_:)(0xD000000000000010, 0x8000000187BD5BD0);
}

{
  return specialized IncrementalStack<>.log(_:)(0xD000000000000036, 0x8000000187BD5F30);
}

{
  return specialized IncrementalStack<>.log(_:)(0xD000000000000036, 0x8000000187BD5FE0);
}

{
  return specialized IncrementalStack<>.log(_:)(0xD000000000000010, 0x8000000187BD5CE0);
}

uint64_t outlined destroy of _IncrementalLayout_Child?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized IncrementalStack<>.log(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v11._object = (void *)0x8000000187BD9020;
    v11._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v11);
    v12 = *(_QWORD *)(a1 + 104);
    if (*(_QWORD *)(v12 + 16))
    {
      v13 = *(_QWORD *)(a1 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      EstimationState.average.getter(v12, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v14._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    String.append(_:)(v15);
    v17 = v25;
    v16 = v26;
    swift_bridgeObjectRetain();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v23 = v5;
      v22 = v21;
      v25 = v21;
      *(_DWORD *)v20 = 136315394;
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, a2, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v18, v19, "%s: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v22, -1, -1);
      MEMORY[0x18D760108](v20, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v8, v4);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v11._countAndFlagsBits = 0x2064696C61766E69;
    v11._object = (void *)0xEC000000203B3323;
    String.append(_:)(v11);
    v12._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 544437792;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    String.append(_:)(v15);
    v17 = v25;
    v16 = v26;
    swift_bridgeObjectRetain();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v23 = v17;
      v21 = v20;
      v22 = swift_slowAlloc();
      v25 = v22;
      *(_DWORD *)v21 = 136315394;
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v18, v19, "%s: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v22, -1, -1);
      MEMORY[0x18D760108](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t specialized IncrementalStack<>.log(_:)(double *a1, uint64_t a2, unint64_t a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  double v20;
  Swift::String v21;
  Swift::String v22;
  double v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  double v41;
  double v42;
  uint64_t v43;
  unint64_t v44;

  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    v37 = a3;
    v38 = a2;
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v16 = __swift_project_value_buffer(v10, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v16, v10);
    v39 = v11;
    v43 = 0;
    v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    v17._countAndFlagsBits = 0x28646563616C70;
    v17._object = (void *)0xE700000000000000;
    String.append(_:)(v17);
    v41 = a5;
    v42 = a4;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v18._countAndFlagsBits = 3026478;
    v18._object = (void *)0xE300000000000000;
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0x203E2D2029;
    v19._object = (void *)0xE500000000000000;
    String.append(_:)(v19);
    v20 = a1[5];
    v41 = a1[6];
    v42 = v20;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v21._countAndFlagsBits = 3943982;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 8236;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    v23 = a1[7];
    v41 = a1[8];
    v42 = v23;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v24._countAndFlagsBits = 3026478;
    v24._object = (void *)0xE300000000000000;
    String.append(_:)(v24);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x696C61766E69202CLL;
    v25._object = (void *)0xEB00000000203A64;
    String.append(_:)(v25);
    if (*(_BYTE *)(v38 + 40))
      v26 = 1702195828;
    else
      v26 = 0x65736C6166;
    if (*(_BYTE *)(v38 + 40))
      v27 = 0xE400000000000000;
    else
      v27 = 0xE500000000000000;
    v28 = v27;
    String.append(_:)(*(Swift::String *)&v26);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    v31 = v43;
    v30 = v44;
    swift_bridgeObjectRetain();
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v43 = v35;
      *(_DWORD *)v34 = 136315394;
      v40._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, v37, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2080;
      swift_bridgeObjectRetain();
      v40._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v32, v33, "%s: %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v35, -1, -1);
      MEMORY[0x18D760108](v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v14, v10);
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  double v20;
  Swift::String v21;
  Swift::String v22;
  double v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  double v41;
  double v42;
  uint64_t v43;
  unint64_t v44;

  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    v37 = a3;
    v38 = a2;
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v16 = __swift_project_value_buffer(v10, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v16, v10);
    v39 = v11;
    v43 = 0;
    v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    v17._countAndFlagsBits = 0x28646563616C70;
    v17._object = (void *)0xE700000000000000;
    String.append(_:)(v17);
    v41 = a5;
    v42 = a4;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v18._countAndFlagsBits = 3026478;
    v18._object = (void *)0xE300000000000000;
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0x203E2D2029;
    v19._object = (void *)0xE500000000000000;
    String.append(_:)(v19);
    v20 = a1[6];
    v41 = a1[7];
    v42 = v20;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v21._countAndFlagsBits = 3943982;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 8236;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    v23 = a1[8];
    v41 = a1[9];
    v42 = v23;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v24._countAndFlagsBits = 3026478;
    v24._object = (void *)0xE300000000000000;
    String.append(_:)(v24);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x696C61766E69202CLL;
    v25._object = (void *)0xEB00000000203A64;
    String.append(_:)(v25);
    if (*(_BYTE *)(v38 + 40))
      v26 = 1702195828;
    else
      v26 = 0x65736C6166;
    if (*(_BYTE *)(v38 + 40))
      v27 = 0xE400000000000000;
    else
      v27 = 0xE500000000000000;
    v28 = v27;
    String.append(_:)(*(Swift::String *)&v26);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    v31 = v43;
    v30 = v44;
    swift_bridgeObjectRetain();
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v43 = v35;
      *(_DWORD *)v34 = 136315394;
      v40._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v37, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2080;
      swift_bridgeObjectRetain();
      v40._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v32, v33, "%s: %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v35, -1, -1);
      MEMORY[0x18D760108](v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v14, v10);
  }
  return result;
}

uint64_t specialized IncrementalStack<>.log(_:)(_OWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD v31[7];
  __int128 v32;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v11._countAndFlagsBits = 0xD000000000000016;
    v11._object = (void *)0x8000000187BD9020;
    String.append(_:)(v11);
    v12 = a1[3];
    v31[2] = a1[2];
    v31[3] = v12;
    v13 = a1[7];
    v31[6] = a1[6];
    v32 = v13;
    v14 = a1[5];
    v31[4] = a1[4];
    v31[5] = v14;
    v15 = a1[1];
    v31[0] = *a1;
    v31[1] = v15;
    v16 = v32;
    if (*(_QWORD *)(v32 + 16))
    {
      v17 = *((_QWORD *)&v32 + 1);
      outlined retain of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v31);
      EstimationState.average.getter(v16, v17);
      outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v31);
    }
    v18._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    v21 = v29;
    v20 = v30;
    swift_bridgeObjectRetain();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc();
      v27 = v21;
      v25 = v24;
      v26 = swift_slowAlloc();
      v29 = v26;
      *(_DWORD *)v25 = 136315394;
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, a2, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v20, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v22, v23, "%s: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v26, -1, -1);
      MEMORY[0x18D760108](v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t specialized IncrementalStack<>.log(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  result = static UserDefaultKeyedFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    if (one-time initialization token for lazyStackLog != -1)
      swift_once();
    v14 = __swift_project_value_buffer(v8, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v14, v8);
    v30 = 0;
    v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v15._countAndFlagsBits = 0x2064696C61766E69;
    v15._object = a3;
    String.append(_:)(v15);
    v16._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 544437792;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    v20 = v30;
    v21 = v31;
    swift_bridgeObjectRetain();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc();
      v25 = swift_slowAlloc();
      v26 = a5;
      v27 = v25;
      v30 = v25;
      *(_DWORD *)v24 = 136315394;
      v28 = v20;
      v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v22, v23, "%s: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v27, -1, -1);
      MEMORY[0x18D760108](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return result;
}

void type metadata accessor for (Int, Int)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Int, Int))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, Int));
  }
}

uint64_t outlined destroy of StackPlacement<LazyHStackLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1871799FC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  return specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

void type metadata accessor for MinorProperties<LazyHStackLayout>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MinorProperties);
    v6 = type metadata accessor for Optional();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void partial apply for closure #1 in HVGrid.flexibleMinorSize(children:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  closure #1 in HVGrid.flexibleMinorSize(children:)(a1, a2, *(double **)(v2 + 16), *(_BYTE *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_187179AB8()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:)()
{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:)();
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:)();
}

{
  return CGRect.distance(to:in:)();
}

uint64_t sub_187179AD0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in LazyHVStack<>.flexibleMinorSize(children:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return specialized closure #1 in LazyHVStack<>.flexibleMinorSize(children:)(a1, a2, *(_QWORD **)(v2 + 16));
}

{
  uint64_t v2;

  return specialized closure #1 in LazyHVStack<>.flexibleMinorSize(children:)(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_187179AE8()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of MinorProperties<LazyHGridLayout>?(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;

  type metadata accessor for MinorProperties<LazyHStackLayout>?(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t partial apply for closure #1 in IncrementalStack<>.placementOfNearbyChild(_:children:context:state:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return closure #1 in IncrementalStack<>.placementOfNearbyChild(_:children:context:state:)(a1, a2, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_187179B64()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for AccessibilityLinkElement()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AccessibilityLinkElement;
  if (!lazy cache variable for type metadata for AccessibilityLinkElement)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLinkElement);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MinorProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v10 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v10 + v6 + 8) & ~v6, ((unint64_t)v11 + v6 + 8) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

_QWORD *initializeWithCopy for MinorProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *assignWithCopy for MinorProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *initializeWithTake for MinorProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *assignWithTake for MinorProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for MinorProperties(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v6)
    goto LABEL_20;
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_20;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_20:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_20;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v13 = v8;
    else
      v13 = 4;
    __asm { BR              X11 }
  }
  return (v6 + v12 + 1);
}

void storeEnumTagSinglePayload for MinorProperties(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t *initializeBufferWithCopyOfBuffer for PlacementProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v11 + v6 + 8) & ~v6, ((unint64_t)v12 + v6 + 8) & ~v6, AssociatedTypeWitness);
    v13 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
    *(_BYTE *)(v13 + 17) = *(_BYTE *)(v14 + 17);
    v15 = (_QWORD *)((v13 + 25) & 0xFFFFFFFFFFFFF8);
    v16 = (_QWORD *)((v14 + 25) & 0xFFFFFFFFFFFFF8);
    *v15 = *v16;
    *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for MinorProperties(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

_QWORD *initializeWithCopy for PlacementProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v8 + 8) & ~v8, ((unint64_t)v5 + v8 + 8) & ~v8, AssociatedTypeWitness);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = ((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  v12 = (_QWORD *)((v10 + 25) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + 25) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithCopy for PlacementProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v4 + v8 + 8) & ~v8, ((unint64_t)v5 + v8 + 8) & ~v8, AssociatedTypeWitness);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = ((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  v12 = (_QWORD *)((v10 + 25) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + 25) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for PlacementProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v4 + v8 + 8) & ~v8, ((unint64_t)v5 + v8 + 8) & ~v8, AssociatedTypeWitness);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = ((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  v12 = (_QWORD *)((v10 + 25) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + 25) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for PlacementProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v4 + v8 + 8) & ~v8, ((unint64_t)v5 + v8 + 8) & ~v8, AssociatedTypeWitness);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = ((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  v12 = (_QWORD *)((v10 + 25) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + 25) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlacementProperties(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X16 }
  }
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
  v13 = *(unsigned __int8 *)(((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v13 >= 2)
    return ((v13 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for PlacementProperties(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(unsigned __int8 *)(v6 + 80) + 16) & ~*(unsigned __int8 *)(v6 + 80)) + *(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8)
           + 25) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((((((*(unsigned __int8 *)(v6 + 80) + 16) & ~*(unsigned __int8 *)(v6 + 80)) + *(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8)
         + 25) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((((((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 64)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 25) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18717AABC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18717AAC4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18717AACCLL);
}

void sub_18717AB30()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_18717AB54()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18717AB5C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

void sub_18717AB64(uint64_t a1, size_t a2, unsigned int a3)
{
  int v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;

  *(_WORD *)&v4[v6] = 0;
  if (v5)
  {
    if (a3 < 0xFE)
      JUMPOUT(0x18717AB38);
    if (a3 >= v5)
      JUMPOUT(0x18717AB70);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v3 = a2;
      else
        v3 = 4;
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }
}

void sub_18717ABA0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18717ABB0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void *type metadata accessor for EnableLazyStackLogging()
{
  return &unk_1E1ADB8A0;
}

_QWORD *initializeBufferWithCopyOfBuffer for StackPlacement(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(unint64_t, unint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  _QWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v61;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  v11 = v10 <= 7 && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) == 0;
  if (v11
    && (v12 = v9 | 7,
        v13 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7,
        ((((((((((((((((((((v13 + (((v9 | 7) + v6 + 1) & ~(v9 | 7))) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 43) & 0xFFFFFFFFFFFFFFF8)
                    + 31) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 102) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 47) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    v61 = AssociatedTypeWitness;
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v4);
    *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
    v14 = (char *)a2 + v6 + v12;
    v15 = (_QWORD *)(((unint64_t)a1 + v6 + v12 + 1) & ~v12);
    v16 = (_QWORD *)((unint64_t)(v14 + 1) & ~v12);
    *v15 = *v16;
    v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v17 + v9 + 8) & ~v9, ((unint64_t)v18 + v9 + 8) & ~v9, v61);
    v19 = (_OWORD *)(((unint64_t)v15 + v13) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_OWORD *)(((unint64_t)v16 + v13) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = (_DWORD *)(((unint64_t)v20 + 19) & 0xFFFFFFFFFFFFFFF8);
    v22 = (unint64_t)v21 + 43;
    v23 = (_DWORD *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v21;
    v24 = ((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8;
    v25 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)v25;
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
    *(_QWORD *)v24 = v26;
    v27 = ((unint64_t)v23 + 27) & 0xFFFFFFFFFFFFFFF8;
    v28 = ((unint64_t)v21 + 27) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    v29 = (_QWORD *)(((unint64_t)v23 + 43) & 0xFFFFFFFFFFFFFFF8);
    v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 15;
    v31 = (v22 & 0xFFFFFFFFFFFFFFF8) + 31;
    *v29 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    v32 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    v30 &= 0xFFFFFFFFFFFFFFF8;
    v33 = *(_QWORD *)v30;
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v30 + 8);
    *(_QWORD *)v32 = v33;
    v31 &= 0xFFFFFFFFFFFFF8uLL;
    v34 = (_QWORD *)(((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFF8);
    *v34 = *(_QWORD *)v31;
    v35 = (_QWORD *)((v31 + 15) & 0xFFFFFFFFFFFFF8);
    v36 = (_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFF8);
    *v36 = *v35;
    v37 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    v38 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
    v39 = *(_QWORD *)v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39 < 0xFFFFFFFF)
    {
      v46 = *(_OWORD *)(v38 + 16);
      *(_OWORD *)v37 = *(_OWORD *)v38;
      *(_OWORD *)(v37 + 16) = v46;
      v47 = *(_OWORD *)(v38 + 32);
      v48 = *(_OWORD *)(v38 + 48);
      v49 = *(_OWORD *)(v38 + 64);
      *(_OWORD *)(v37 + 79) = *(_OWORD *)(v38 + 79);
      *(_OWORD *)(v37 + 48) = v48;
      *(_OWORD *)(v37 + 64) = v49;
      *(_OWORD *)(v37 + 32) = v47;
    }
    else
    {
      *(_QWORD *)v37 = v39;
      *(_DWORD *)(v37 + 8) = *(_DWORD *)(v38 + 8);
      v40 = *(_QWORD *)(v38 + 40);
      *(_QWORD *)(v37 + 40) = v40;
      *(_QWORD *)(v37 + 48) = *(_QWORD *)(v38 + 48);
      v41 = **(void (***)(unint64_t, unint64_t, uint64_t))(v40 - 8);
      swift_retain();
      v41(v37 + 16, v38 + 16, v40);
      *(_DWORD *)(v37 + 56) = *(_DWORD *)(v38 + 56);
      *(_DWORD *)(v37 + 60) = *(_DWORD *)(v38 + 60);
      *(_QWORD *)(v37 + 64) = *(_QWORD *)(v38 + 64);
      *(_QWORD *)(v37 + 72) = *(_QWORD *)(v38 + 72);
      v42 = *(_DWORD *)(v38 + 80);
      *(_BYTE *)(v37 + 84) = *(_BYTE *)(v38 + 84);
      *(_DWORD *)(v37 + 80) = v42;
      v43 = *(_DWORD *)(v38 + 91);
      *(_DWORD *)(v37 + 88) = *(_DWORD *)(v38 + 88);
      *(_DWORD *)(v37 + 91) = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v50 = (_QWORD *)((v37 + 102) & 0xFFFFFFFFFFFFF8);
    v51 = (_QWORD *)((v38 + 102) & 0xFFFFFFFFFFFFFFF8);
    *v50 = *v51;
    v52 = (_OWORD *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
    v53 = (_OWORD *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v52 = *v53;
    v54 = (_OWORD *)(((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8);
    v55 = (_OWORD *)(((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v54 = *v55;
    v56 = ((unint64_t)v54 + 23) & 0xFFFFFFFFFFFFFFF8;
    v57 = ((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *(_BYTE *)(v56 + 16) = *(_BYTE *)(v57 + 16);
    v58 = (_QWORD *)(((unint64_t)v54 + 47) & 0xFFFFFFFFFFFFFFF8);
    v59 = (_QWORD *)(((unint64_t)v55 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v58 = *v59;
    v58[1] = v59[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  else
  {
    v44 = *a2;
    *a1 = *a2;
    v45 = v44 + (((v10 | 7) + 16) & ~(unint64_t)(v10 | 7));
    swift_retain();
  }
  return (_QWORD *)v45;
}

uint64_t assignWithCopy for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  void (*v40)(unint64_t, unint64_t, uint64_t);
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (_QWORD *)((v12 + v7) & ~(v11 | 7));
  v14 = (_QWORD *)((unint64_t)&v8[v12] & ~(v11 | 7));
  *v13 = *v14;
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))(((unint64_t)v15 + v11 + 8) & ~v11, ((unint64_t)v16 + v11 + 8) & ~v11, AssociatedTypeWitness);
  v17 = *(_QWORD *)(v10 + 64) + ((v11 + 16) & ~v11) + 7;
  v18 = (_QWORD *)(((unint64_t)v13 + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v14 + v17) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v18[1] = v19[1];
  v20 = (_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_DWORD *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v24;
  v25 = ((unint64_t)v20 + 27) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v21 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = ((unint64_t)v20 + 43) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v21 + 43) & 0xFFFFFFFFFFFFFFF8;
  v29 = v28 + 15;
  v30 = *(_QWORD *)v28;
  v28 += 31;
  v31 = v27 + 15;
  *(_QWORD *)v27 = v30;
  v27 += 31;
  v31 &= 0xFFFFFFFFFFFFFFF8;
  v29 &= 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v22) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v31 = *(_QWORD *)v29;
  *(_BYTE *)(v31 + 8) = v22;
  v32 = (v28 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v28 & 0xFFFFFFFFFFFFF8);
  v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 &= 0xFFFFFFFFFFFFFFF8;
  v32 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v33 = *(_QWORD *)v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_QWORD *)v35;
  if (*(_QWORD *)v34 < 0xFFFFFFFFuLL)
  {
    if (v36 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v34 = v36;
      *(_DWORD *)(v34 + 8) = *(_DWORD *)(v35 + 8);
      v39 = *(_QWORD *)(v35 + 40);
      *(_QWORD *)(v34 + 40) = v39;
      *(_QWORD *)(v34 + 48) = *(_QWORD *)(v35 + 48);
      v40 = **(void (***)(unint64_t, unint64_t, uint64_t))(v39 - 8);
      swift_retain();
      v40(v34 + 16, v35 + 16, v39);
      *(_DWORD *)(v34 + 56) = *(_DWORD *)(v35 + 56);
      *(_DWORD *)(v34 + 60) = *(_DWORD *)(v35 + 60);
      *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
      *(_QWORD *)(v34 + 72) = *(_QWORD *)(v35 + 72);
      v41 = *(_DWORD *)(v35 + 80);
      *(_BYTE *)(v34 + 84) = *(_BYTE *)(v35 + 84);
      *(_DWORD *)(v34 + 80) = v41;
      v42 = *(_DWORD *)(v35 + 91);
      *(_DWORD *)(v34 + 88) = *(_DWORD *)(v35 + 88);
      *(_DWORD *)(v34 + 91) = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    v43 = *(_OWORD *)(v35 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *(_OWORD *)(v34 + 16) = v43;
    v44 = *(_OWORD *)(v35 + 32);
    v45 = *(_OWORD *)(v35 + 48);
    v46 = *(_OWORD *)(v35 + 64);
    *(_OWORD *)(v34 + 79) = *(_OWORD *)(v35 + 79);
    *(_OWORD *)(v34 + 48) = v45;
    *(_OWORD *)(v34 + 64) = v46;
    *(_OWORD *)(v34 + 32) = v44;
    goto LABEL_8;
  }
  if (v36 < 0xFFFFFFFF)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v34 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(_QWORD *)v34 = v36;
  swift_retain();
  swift_release();
  *(_DWORD *)(v34 + 8) = *(_DWORD *)(v35 + 8);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v34 + 16), (uint64_t *)(v35 + 16));
  *(_DWORD *)(v34 + 56) = *(_DWORD *)(v35 + 56);
  *(_DWORD *)(v34 + 60) = *(_DWORD *)(v35 + 60);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v34 + 72) = *(_QWORD *)(v35 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = *(_DWORD *)(v35 + 80);
  *(_BYTE *)(v34 + 84) = *(_BYTE *)(v35 + 84);
  *(_DWORD *)(v34 + 80) = v37;
  v38 = *(_DWORD *)(v35 + 88);
  *(_BYTE *)(v34 + 92) = *(_BYTE *)(v35 + 92);
  *(_DWORD *)(v34 + 88) = v38;
  *(_BYTE *)(v34 + 93) = *(_BYTE *)(v35 + 93);
  *(_BYTE *)(v34 + 94) = *(_BYTE *)(v35 + 94);
LABEL_8:
  v47 = (_QWORD *)((v34 + 102) & 0xFFFFFFFFFFFFFFF8);
  v48 = (v35 + 102) & 0xFFFFFFFFFFFFFFF8;
  v49 = *(_QWORD *)v48;
  v48 += 15;
  *v47 = v49;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = (_QWORD *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v50 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF8);
  v50[1] = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFF8) + 8);
  v51 = (_QWORD *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF8);
  v52 = (_QWORD *)(((v48 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v51 = *v52;
  v51[1] = v52[1];
  v53 = ((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF8;
  v54 = ((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *(_QWORD *)(v53 + 8) = *(_QWORD *)(v54 + 8);
  *(_BYTE *)(v53 + 16) = *(_BYTE *)(v54 + 16);
  v55 = (_QWORD *)(((unint64_t)v51 + 47) & 0xFFFFFFFFFFFFFFF8);
  v56 = (_QWORD *)(((unint64_t)v52 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v55 = *v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55[1] = v56[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  unint64_t v48;
  unint64_t v49;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (_QWORD *)((v12 + v7) & ~(v11 | 7));
  v14 = (_QWORD *)((unint64_t)&v8[v12] & ~(v11 | 7));
  *v13 = *v14;
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)v15 + v11 + 8) & ~v11, ((unint64_t)v16 + v11 + 8) & ~v11, AssociatedTypeWitness);
  v17 = *(_QWORD *)(v10 + 64) + ((v11 + 16) & ~v11) + 7;
  v18 = (_OWORD *)(((unint64_t)v13 + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)(((unint64_t)v14 + v17) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_DWORD *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = v24;
  v25 = ((unint64_t)v20 + 27) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v21 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = (_QWORD *)(((unint64_t)v20 + 43) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v21 + 43) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  *(_QWORD *)v29 = v31;
  v32 = (_QWORD *)(((unint64_t)v27 + 31) & 0xFFFFFFFFFFFFF8);
  v33 = (_QWORD *)(((unint64_t)v28 + 31) & 0xFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFF8);
  *v34 = *v35;
  v36 = (_OWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_OWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  v38 = v37[2];
  v39 = v37[3];
  v40 = v37[4];
  *(_OWORD *)((char *)v36 + 79) = *(_OWORD *)((char *)v37 + 79);
  v36[3] = v39;
  v36[4] = v40;
  v36[2] = v38;
  v41 = v37[1];
  *v36 = *v37;
  v36[1] = v41;
  v42 = (_QWORD *)(((unint64_t)v36 + 102) & 0xFFFFFFFFFFFFF8);
  v43 = (_QWORD *)(((unint64_t)v37 + 102) & 0xFFFFFFFFFFFFF8);
  *v42 = *v43;
  v44 = (_OWORD *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  v45 = (_OWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v44 = *v45;
  v46 = (_OWORD *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8);
  v47 = (_OWORD *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v46 = *v47;
  v48 = ((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8;
  v49 = ((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_BYTE *)(v48 + 16) = *(_BYTE *)(v49 + 16);
  *(_OWORD *)(((unint64_t)v46 + 47) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v47 + 47) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (_QWORD *)((v12 + v7) & ~(v11 | 7));
  v14 = (_QWORD *)((unint64_t)&v8[v12] & ~(v11 | 7));
  *v13 = *v14;
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))(((unint64_t)v15 + v11 + 8) & ~v11, ((unint64_t)v16 + v11 + 8) & ~v11, AssociatedTypeWitness);
  v17 = *(_QWORD *)(v10 + 64) + ((v11 + 16) & ~v11) + 7;
  v18 = (_QWORD *)(((unint64_t)v13 + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v14 + v17) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v18[1] = v19[1];
  v20 = (_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_DWORD *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v24;
  v25 = ((unint64_t)v20 + 27) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v21 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = ((unint64_t)v20 + 43) & 0xFFFFFFFFFFFFFFF8;
  v28 = (_QWORD *)(((unint64_t)v21 + 43) & 0xFFFFFFFFFFFFFFF8);
  v29 = v27 + 15;
  *(_QWORD *)v27 = *v28;
  v27 += 31;
  v29 &= 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v22) = *(_BYTE *)(v30 + 8);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = v22;
  v31 = (_QWORD *)(((unint64_t)v28 + 31) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8) = *v31;
  v32 = (v27 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease();
  v32 &= 0xFFFFFFFFFFFFFFF8;
  v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)v32 = *v33;
  swift_bridgeObjectRelease();
  v34 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v34 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)v35 < 0xFFFFFFFFuLL)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v34 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v40 = *(_OWORD *)(v35 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *(_OWORD *)(v34 + 16) = v40;
    v41 = *(_OWORD *)(v35 + 32);
    v42 = *(_OWORD *)(v35 + 48);
    v43 = *(_OWORD *)(v35 + 64);
    *(_OWORD *)(v34 + 79) = *(_OWORD *)(v35 + 79);
    *(_OWORD *)(v34 + 48) = v42;
    *(_OWORD *)(v34 + 64) = v43;
    *(_OWORD *)(v34 + 32) = v41;
    goto LABEL_6;
  }
  *(_QWORD *)v34 = *(_QWORD *)v35;
  swift_release();
  *(_DWORD *)(v34 + 8) = *(_DWORD *)(v35 + 8);
  __swift_destroy_boxed_opaque_existential_1(v34 + 16);
  v36 = *(_OWORD *)(v35 + 16);
  v37 = *(_OWORD *)(v35 + 32);
  *(_QWORD *)(v34 + 48) = *(_QWORD *)(v35 + 48);
  *(_OWORD *)(v34 + 16) = v36;
  *(_OWORD *)(v34 + 32) = v37;
  *(_DWORD *)(v34 + 56) = *(_DWORD *)(v35 + 56);
  *(_DWORD *)(v34 + 60) = *(_DWORD *)(v35 + 60);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v34 + 72) = *(_QWORD *)(v35 + 72);
  swift_bridgeObjectRelease();
  v38 = *(_DWORD *)(v35 + 80);
  *(_BYTE *)(v34 + 84) = *(_BYTE *)(v35 + 84);
  *(_DWORD *)(v34 + 80) = v38;
  v39 = *(_DWORD *)(v35 + 88);
  *(_BYTE *)(v34 + 92) = *(_BYTE *)(v35 + 92);
  *(_DWORD *)(v34 + 88) = v39;
  *(_BYTE *)(v34 + 93) = *(_BYTE *)(v35 + 93);
  *(_BYTE *)(v34 + 94) = *(_BYTE *)(v35 + 94);
LABEL_6:
  v44 = (_QWORD *)((v34 + 102) & 0xFFFFFFFFFFFFFFF8);
  v45 = (v35 + 102) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(_QWORD *)v45;
  v45 += 15;
  *v44 = v46;
  swift_bridgeObjectRelease();
  v47 = (_QWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v47 = *(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
  v47[1] = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 8);
  v48 = (_QWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
  v49 = (_QWORD *)(((v45 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v48 = *v49;
  v48[1] = v49[1];
  v50 = ((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  v51 = ((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_QWORD *)(v50 + 8) = *(_QWORD *)(v51 + 8);
  *(_BYTE *)(v50 + 16) = *(_BYTE *)(v51 + 16);
  v52 = (_QWORD *)(((unint64_t)v48 + 47) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_QWORD *)(((unint64_t)v49 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  swift_bridgeObjectRelease();
  v52[1] = v53[1];
  swift_bridgeObjectRelease();
  return a1;
}

void storeEnumTagSinglePayload for StackPlacement(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (v8 <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = v8;
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 >= a3)
  {
    v14 = 0u;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if ((((((((((((((((((((((((_DWORD)v11 + 16) & ~(_DWORD)v11)
                           + *(_DWORD *)(v9 + 64)
                           + 7
                           + ((*(_DWORD *)(v7 + 64) + (v11 | 7) + 1) & ~(v11 | 7))) & 0xFFFFFFF8)
                         + 19) & 0xFFFFFFF8)
                       + 43) & 0xFFFFFFF8)
                     + 31) & 0xFFFFFFF8)
                   + 15) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 102) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v12 = a3 - v10 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X0 }
  }
  if ((((((((((((((((((((((((_DWORD)v11 + 16) & ~(_DWORD)v11)
                         + *(_DWORD *)(v9 + 64)
                         + 7
                         + ((*(_DWORD *)(v7 + 64) + (v11 | 7) + 1) & ~(v11 | 7))) & 0xFFFFFFF8)
                       + 19) & 0xFFFFFFF8)
                     + 43) & 0xFFFFFFF8)
                   + 31) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 102) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 47) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v15 = ~v10 + a2;
    bzero(a1, ((((((((((((((((((((((v11 + 16) & ~v11)+ *(_QWORD *)(v9 + 64)+ 7+ ((*(_QWORD *)(v7 + 64) + (v11 | 7) + 1) & ~(v11 | 7))) & 0xFFFFFFFFFFFFFFF8)+ 19) & 0xFFFFFFFFFFFFFFF8)+ 43) & 0xFFFFFFFFFFFFFFF8)+ 31) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 102) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 47) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_18717BB74()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18717BC40);
}

void sub_18717BB7C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x18717BB84);
  JUMPOUT(0x18717BC40);
}

void sub_18717BBF0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18717BC40);
}

void sub_18717BBF8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18717BC40);
}

uint64_t sub_18717BC00@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_WORD *)(v15 + v18) = 0;
  if (!(_DWORD)v14)
    JUMPOUT(0x18717BC40);
  if ((_DWORD)v17 == v8)
  {
    v3 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v4 = v15;
    v5 = v14;
    a1 = v17;
    a2 = v16;
  }
  else
  {
    v6 = (v15 + v10 + v11 + 1) & v13;
    if ((_DWORD)a1 != v8)
      JUMPOUT(0x18717BC0CLL);
    v4 = (v9 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v12;
    v3 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    v5 = v14;
  }
  return v3(v4, v5, a1, a2);
}

_QWORD *initializeBufferWithCopyOfBuffer for _IncrementalStack_State(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = v6;
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  if (v7)
    v10 = ((v6 + 16) & ~(unint64_t)v6) + *(_QWORD *)(v5 + 64);
  else
    v10 = v9 + 1;
  v11 = v6 & 0x100000;
  v12 = v8 <= 7 && v11 == 0;
  if (v12
    && ((((((((((((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16 <= 0x18)
  {
    v13 = AssociatedTypeWitness;
    v14 = ~v8;
    if (v7)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))(((((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v14, *(unsigned int *)(v5 + 84), AssociatedTypeWitness))
      {
LABEL_24:
        *a1 = *a2;
        v18 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        v19 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v18 = *v19;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v18 + v8 + 8) & v14, ((unint64_t)v19 + v8 + 8) & v14, v13);
        if (!v7)
          *((_BYTE *)a1 + v9) = 0;
        goto LABEL_26;
      }
    }
    else
    {
      if (!*((_BYTE *)a2 + v9))
        goto LABEL_24;
      v16 = (*((unsigned __int8 *)a2 + v9) - 1) << (8 * v9);
      if (v9 > 3)
        v16 = 0;
      if ((_DWORD)v9)
      {
        if (v9 <= 3)
          v17 = ((v8 + 16) & ~(_DWORD)v8) + *(_DWORD *)(v5 + 64);
        else
          v17 = 4;
        __asm { BR              X11 }
      }
      if (v16 == -1)
        goto LABEL_24;
    }
    memcpy(a1, a2, v10);
LABEL_26:
    v20 = ((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = ((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
    *(_QWORD *)v20 = v22;
    v23 = (_OWORD *)(((unint64_t)a1 + v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_OWORD *)(((unint64_t)a2 + v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v24;
    v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v28;
    v29 = (_QWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFF8);
    v30 = (_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFF8);
    *v29 = *v30;
    v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
    *v31 = *v32;
    v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v33[1] = v34[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  v15 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _IncrementalStack_State(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(unint64_t, uint64_t, uint64_t);
  int v11;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ~v7;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64);
  if ((_DWORD)v6)
  {
    v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    v11 = v10(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    v12 = v10(((((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (v11)
    {
      if (!v12)
        goto LABEL_33;
LABEL_27:
      if ((_DWORD)v6)
        v18 = v9;
      else
        v18 = v9 + 1;
      memcpy(a1, a2, v18);
      goto LABEL_35;
    }
    goto LABEL_25;
  }
  v13 = 8 * v9;
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_16;
  v14 = (*((unsigned __int8 *)a1 + v9) - 1) << v13;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 <= 3)
      v15 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64);
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  if (v14 == -1)
  {
LABEL_16:
    if (!*((_BYTE *)a2 + v9))
      goto LABEL_31;
    v16 = (*((unsigned __int8 *)a2 + v9) - 1) << v13;
    if (v9 > 3)
      v16 = 0;
    if ((_DWORD)v9)
    {
      if (v9 <= 3)
        v17 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64);
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    v12 = v16 + 1;
LABEL_25:
    if (v12)
    {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_27;
    }
LABEL_31:
    *a1 = *a2;
    v19 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)v19 + v7 + 8) & v8, ((unint64_t)v20 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_35;
  }
  if (*((_BYTE *)a2 + v9) && (*((unsigned __int8 *)a2 + v9) - 1) << v13 != -1)
    goto LABEL_27;
LABEL_33:
  *a1 = *a2;
  v21 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v21 + v7 + 8) & v8, ((unint64_t)v22 + v7 + 8) & v8, AssociatedTypeWitness);
  if (!(_DWORD)v6)
    *((_BYTE *)a1 + v9) = 0;
LABEL_35:
  if ((_DWORD)v6)
    v23 = v9;
  else
    v23 = v9 + 1;
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (unint64_t)(v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = v28;
  v29 = (_QWORD *)((unint64_t)(v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)((unint64_t)(v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v29[1] = v30[1];
  v31 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v31[1] = v32[1];
  v33 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v33[1] = v34[1];
  v35 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFF8);
  v36 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = (_QWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFF8);
  *v37 = *v38;
  v39 = (_QWORD *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for _IncrementalStack_State(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ~v7;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64);
  if (!v6)
  {
    if (!*((_BYTE *)a2 + v9))
      goto LABEL_17;
    v10 = (*((unsigned __int8 *)a2 + v9) - 1) << (8 * v9);
    if (v9 > 3)
      v10 = 0;
    if ((_DWORD)v9)
    {
      if (v9 <= 3)
        v11 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64);
      else
        v11 = 4;
      __asm { BR              X11 }
    }
    if (v10 == -1)
      goto LABEL_17;
LABEL_13:
    if (v6)
      v12 = v9;
    else
      v12 = v9 + 1;
    memcpy(a1, a2, v12);
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))(((((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness))
  {
    goto LABEL_13;
  }
LABEL_17:
  *a1 = *a2;
  v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v13 + v7 + 8) & v8, ((unint64_t)v14 + v7 + 8) & v8, AssociatedTypeWitness);
  if (!v6)
    *((_BYTE *)a1 + v9) = 0;
LABEL_19:
  if (v6)
    v15 = v9;
  else
    v15 = v9 + 1;
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = (unint64_t)(v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = v20;
  v21 = (_OWORD *)((unint64_t)(v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_OWORD *)((unint64_t)(v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  *v29 = *v30;
  *(_OWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _IncrementalStack_State(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t result;
  unint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  if ((_DWORD)v6)
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = v9 + ((v10 + 16) & ~v10);
  if (v8 < a2)
  {
    if (((((((((((((((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v12 = 2;
    else
      v12 = a2 - v8 + 1;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    __asm { BR              X17 }
  }
  if (v7 < 0x7FFFFFFF)
  {
    v18 = *(_QWORD *)((((((((((((a1 + v11 + 23) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)
                         + 23) & 0xFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    return (v18 + 1);
  }
  else
  {
    if (!(_DWORD)v6)
      return 0;
    v15 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & ~v10, v6, AssociatedTypeWitness);
    v16 = v15 != 0;
    result = (v15 - 1);
    if ((_DWORD)result == 0 || !v16)
      return 0;
  }
  return result;
}

void storeEnumTagSinglePayload for _IncrementalStack_State(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = *(_QWORD *)(v7 + 64);
  if (v8)
    v13 = v11 + v12;
  else
    v13 = v11 + v12 + 1;
  if (v10 < a3)
  {
    if ((((((((((((((_DWORD)v13 + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v14 = a3 - v10 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((((((((_DWORD)v13 + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v16 = ~v10 + a2;
      bzero(a1, ((((((((((((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

uint64_t sub_18717C864@<X0>(size_t a1@<X1>, unsigned int a2@<W2>, size_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t result;

  v15[v17] = 0;
  if (v16)
  {
    if (v12 < 0x7FFFFFFF)
    {
      v19 = (_QWORD *)((((((((((((unint64_t)&v15[a3 + 23] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                            + 23) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v16 & 0x80000000) != 0)
      {
        *v19 = v16 ^ 0x80000000;
        v19[1] = 0;
      }
      else
      {
        *v19 = v16 - 1;
      }
    }
    else if (v12 >= v16)
    {
      if (v16 + 1 <= a2)
      {
        if (v16 != -1)
          return (*(uint64_t (**)(unint64_t, _QWORD))(v11 + 56))((((unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 8) & v14, v16 + 1);
      }
      else if ((_DWORD)a1)
      {
        if (a1 <= 3)
          v20 = a1;
        else
          v20 = 4;
        bzero(v15, a1);
        __asm { BR              X10 }
      }
    }
    else if ((_DWORD)a3)
    {
      if (a3 <= 3)
        v18 = a3;
      else
        v18 = 4;
      bzero(v15, a3);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_18717C9E8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18717C9F0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableLazyStackLogging()
{
  return &protocol witness table for EnableLazyStackLogging;
}

uint64_t destroy for EstimationState()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for EstimationState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EstimationState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for EstimationState(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for EstimationState()
{
  return &unk_1E1ABB110;
}

uint64_t type metadata accessor for StackPlacement.StoppingCondition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StackPlacement.StoppingCondition);
}

void static OpenWindowAction.SharingBehavior.required.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static OpenWindowAction.Destination.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static OpenWindowAction.Destination.sharingSession.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void OpenWindowAction.callAsFunction<A>(value:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;

  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.openWindow<A>(presenting:withBehavior:)(a1, a2, a3, a4, a5);
  }
  else
  {
    static os_log_type_t.fault.getter();
    v5 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
}

void OpenWindowAction.callAsFunction<A>(presenting:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OpenWindowAction.callAsFunction<A>(value:)(a1, a2, a3, a4, a5);
}

uint64_t OpenWindowAction.callAsFunction<A>(value:sharingBehavior:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t OpenWindowAction.callAsFunction<A>(value:destination:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

Swift::Void __swiftcall OpenWindowAction.callAsFunction(id:)(Swift::String id)
{
  id v1;

  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.openWindow(id:withBehavior:)(id._countAndFlagsBits, (uint64_t)id._object);
  }
  else
  {
    static os_log_type_t.fault.getter();
    v1 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
}

uint64_t OpenWindowAction.callAsFunction(id:sharingBehavior:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t OpenWindowAction.callAsFunction(id:destination:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

void OpenWindowAction.callAsFunction<A>(id:value:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v7;

  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.openWindow<A>(id:presenting:withBehavior:)(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    static os_log_type_t.fault.getter();
    v7 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
}

void OpenWindowAction.callAsFunction<A>(id:presenting:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  OpenWindowAction.callAsFunction<A>(value:)(a3, a4, a5, a6, a7);
}

uint64_t OpenWindowAction.callAsFunction<A>(id:value:sharingBehavior:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t OpenWindowAction.callAsFunction<A>(id:value:destination:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t EnvironmentValues.openWindow.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.openWindow : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t EnvironmentValues.openWindow.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.OpenWindowActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_18717D4A0()
{
  return EnvironmentValues.openWindow.setter();
}

ValueMetadata *type metadata accessor for OpenWindowAction()
{
  return &type metadata for OpenWindowAction;
}

ValueMetadata *type metadata accessor for OpenWindowAction.SharingBehavior()
{
  return &type metadata for OpenWindowAction.SharingBehavior;
}

ValueMetadata *type metadata accessor for OpenWindowAction.Destination()
{
  return &type metadata for OpenWindowAction.Destination;
}

ValueMetadata *type metadata accessor for OpenWindowAction.Destination.Role()
{
  return &type metadata for OpenWindowAction.Destination.Role;
}

uint64_t storeEnumTagSinglePayload for OpenWindowAction.SharingBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18717D56C + 4 * byte_187C0F055[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18717D5A0 + 4 * byte_187C0F050[v4]))();
}

uint64_t sub_18717D5A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18717D5A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18717D5B0);
  return result;
}

uint64_t sub_18717D5BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18717D5C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18717D5C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18717D5D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OpenWindowAction.SharingBehavior.Behavior()
{
  return &type metadata for OpenWindowAction.SharingBehavior.Behavior;
}

void *type metadata accessor for EnvironmentValues.OpenWindowActionKey()
{
  return &unk_1E1AC3728;
}

unint64_t lazy protocol witness table accessor for type OpenWindowAction.SharingBehavior.Behavior and conformance OpenWindowAction.SharingBehavior.Behavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpenWindowAction.SharingBehavior.Behavior and conformance OpenWindowAction.SharingBehavior.Behavior;
  if (!lazy protocol witness table cache variable for type OpenWindowAction.SharingBehavior.Behavior and conformance OpenWindowAction.SharingBehavior.Behavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OpenWindowAction.SharingBehavior.Behavior, &type metadata for OpenWindowAction.SharingBehavior.Behavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenWindowAction.SharingBehavior.Behavior and conformance OpenWindowAction.SharingBehavior.Behavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OpenWindowAction.Destination.Role and conformance OpenWindowAction.Destination.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpenWindowAction.Destination.Role and conformance OpenWindowAction.Destination.Role;
  if (!lazy protocol witness table cache variable for type OpenWindowAction.Destination.Role and conformance OpenWindowAction.Destination.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OpenWindowAction.Destination.Role, &type metadata for OpenWindowAction.Destination.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenWindowAction.Destination.Role and conformance OpenWindowAction.Destination.Role);
  }
  return result;
}

void static OpenWindowAction.SharingBehavior.requested.getter()
{
  static OpenWindowAction.SharingBehavior.required.getter();
}

uint64_t ToolbarItemGroup.init(placement:isEmpty:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  char v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v9 = a2;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ToolbarItemPlacement(v15, a6);
  v17 = type metadata accessor for ToolbarItemGroup(0, a4, a5, v16);
  *(_BYTE *)(a6 + *(int *)(v17 + 40)) = v9;
  a3();
  outlined destroy of ToolbarItemPlacement(a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a6 + *(int *)(v17 + 36), v14, a4);
}

uint64_t ToolbarItemGroup.init(placement:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  _BYTE v11[48];

  outlined init with copy of ToolbarItemPlacement(a1, (uint64_t)v11);
  ToolbarItemGroup.init(placement:isEmpty:content:)((uint64_t)v11, 0, a2, a3, a4, a5);
  return outlined destroy of ToolbarItemPlacement(a1);
}

uint64_t static ToolbarItemGroup._makeToolbar(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t View;
  uint64_t v14;
  int v16;
  int OffsetAttribute2;
  uint64_t v18;
  int v19;
  int v20;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = a2[2];
  v26 = *((_DWORD *)a2 + 7);
  v27 = *((_DWORD *)a2 + 6);
  v24 = *((_DWORD *)a2 + 9);
  v25 = *((_DWORD *)a2 + 8);
  v9 = a2[6];
  v23 = a2[5];
  v19 = *((_DWORD *)a2 + 14);
  v20 = *((_DWORD *)a2 + 2);
  v18 = a2[8];
  v22 = *((_DWORD *)a2 + 18);
  v10 = *a1;
  LODWORD(v33) = *a1;
  type metadata accessor for ToolbarItemGroup(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
    closure #1 in static ToolbarItemGroup._makeToolbar(content:inputs:)(1, a3, a4, v11);
  AGGraphCreateOffsetAttribute2();
  View = type metadata accessor for ToolbarItemGroup.MakeView(0, a3, a4, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemGroup<A>.MakeView, View);
  _GraphValue.init<A>(_:)();
  _GraphValue.value.getter();
  closure #2 in static ToolbarItemGroup._makeToolbar(content:inputs:)(1, a3, a4, v14);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  DWORD2(v33) = v20;
  *(_QWORD *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = __PAIR64__(v26, v27);
  *(_QWORD *)&v35 = __PAIR64__(v24, v25);
  *((_QWORD *)&v35 + 1) = v23;
  *(_QWORD *)&v36 = v9;
  DWORD2(v36) = v19;
  *(_QWORD *)&v37 = v18;
  DWORD2(v37) = v22;
  v16 = static ToolbarContent.makeViewList<A>(placement:content:inputs:)();
  *(_QWORD *)&v33 = __PAIR64__(HIDWORD(v7), v10);
  _GraphValue.value.getter();
  *(_QWORD *)&v28 = v7;
  DWORD2(v28) = v20;
  *(_QWORD *)&v29 = v8;
  *((_QWORD *)&v29 + 1) = __PAIR64__(v26, v27);
  *(_QWORD *)&v30 = __PAIR64__(v24, v25);
  *((_QWORD *)&v30 + 1) = v23;
  *(_QWORD *)&v31 = v9;
  DWORD2(v31) = v19;
  *(_QWORD *)&v32 = v18;
  DWORD2(v32) = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ToolbarMakeEntries.init<A>(placement:toolbarItemGroup:viewList:inputs:)(OffsetAttribute2, v16, (uint64_t)&v28, a3, a4, (uint64_t)&v33);
  v30 = v35;
  v31 = v36;
  v32 = v37;
  v28 = v33;
  v29 = v34;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [ToolbarStorage.Entry]();
  lazy protocol witness table accessor for type ToolbarMakeEntries and conformance ToolbarMakeEntries();
  Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v28 = v7;
  DWORD2(v28) = v20;
  *(_QWORD *)&v29 = v8;
  *((_QWORD *)&v29 + 1) = __PAIR64__(v26, v27);
  *(_QWORD *)&v30 = __PAIR64__(v24, v25);
  *((_QWORD *)&v30 + 1) = v23;
  *(_QWORD *)&v31 = v9;
  DWORD2(v31) = v19;
  *(_QWORD *)&v32 = v18;
  DWORD2(v32) = v22;
  static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)((uint64_t)&v28, a5);
  return outlined release of ToolbarMakeEntries((uint64_t)&v33);
}

uint64_t type metadata accessor for ToolbarItemGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarItemGroup);
}

uint64_t closure #1 in static ToolbarItemGroup._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for ToolbarItemGroup(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t type metadata accessor for ToolbarItemGroup.MakeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarItemGroup.MakeView);
}

uint64_t closure #2 in static ToolbarItemGroup._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for ToolbarItemGroup(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_7, (uint64_t)v8, (uint64_t)&type metadata for ToolbarItemPlacement, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t ToolbarItemGroup.MakeView.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, Value, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarItemGroup<A>.MakeView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarItemGroup.MakeView.value.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance ToolbarItemGroup<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ToolbarItemGroup._makeToolbar(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void ToolbarItemGroup.init<A, B>(placement:content:label:)(uint64_t a1)
{
  _BYTE v1[56];

  outlined init with copy of ToolbarItemPlacement(a1, (uint64_t)v1);
  type metadata accessor for LabeledToolbarItemGroupContent();
}

uint64_t sub_18717DD5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledToolbarItemGroupContent<A, B>, a1);
  ToolbarItemGroup.init(placement:content:)((uint64_t)&v6, (void (*)(void))partial apply for closure #1 in ToolbarItemGroup.init<A, B>(placement:content:label:), a1, v4, v2);
  return outlined destroy of ToolbarItemPlacement(v1);
}

void closure #1 in ToolbarItemGroup.init<A, B>(placement:content:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for LabeledToolbarItemGroupContent();
}

void sub_18717DE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v19 = (*(uint64_t (**)(double))(v13 - 152))(v18);
  (*(void (**)(uint64_t))(v13 - 136))(v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v15, v12, v11);
  *(_QWORD *)(v13 - 112) = v11;
  *(_QWORD *)(v13 - 104) = v9;
  v20 = *(_QWORD *)(v13 - 160);
  *(_QWORD *)(v13 - 96) = *(_QWORD *)(v13 - 168);
  *(_QWORD *)(v13 - 88) = v20;
  type metadata accessor for LabeledToolbarItemGroupContent();
}

uint64_t sub_18717DEF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 128) + 32))(v1 + *(int *)(a1 + 52), v5, v2);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledToolbarItemGroupContent<A, B>, v3);
  static ViewBuilder.buildExpression<A>(_:)(v1, v3, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v9(v1, v3);
  static ViewBuilder.buildBlock<A>(_:)(v6, v3, *(_QWORD *)(v7 - 120));
  return v9(v6, v3);
}

void LabeledToolbarItemGroupContent.body.getter()
{
  type metadata accessor for LabeledControlGroupContent();
}

void sub_18717DFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledControlGroupContent<A, B>, a1);
  v18 = type metadata accessor for ControlGroup(0, a1, v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v14 - 160) = v10;
  *(_QWORD *)(v14 - 152) = v11;
  *(_QWORD *)(v14 - 144) = v12;
  *(_QWORD *)(v14 - 136) = v13;
  *(_QWORD *)(v14 - 128) = v9;
  *(_QWORD *)(v14 - 224) = v10;
  *(_QWORD *)(v14 - 216) = v11;
  *(_QWORD *)(v14 - 208) = v12;
  *(_QWORD *)(v14 - 200) = v13;
  *(_QWORD *)(v14 - 192) = v9;
  ControlGroup.init<A, B>(content:label:)((uint64_t)partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter, v14 - 176, (void (*)(uint64_t))partial apply for closure #2 in LabeledToolbarItemGroupContent.body.getter, v10, v11, v12, v13, (uint64_t)v21);
}

uint64_t sub_18717E084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroup<A>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, v0);
  return v6(v3, v1);
}

void closure #2 in LabeledToolbarItemGroupContent.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for LabeledToolbarItemGroupContent();
}

uint64_t sub_18717E164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 52), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void type metadata accessor for [ToolbarStorage.Entry]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ToolbarStorage.Entry])
  {
    type metadata accessor for ToolbarStorage.Entry(255);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry]);
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarMakeEntries and conformance ToolbarMakeEntries()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarMakeEntries and conformance ToolbarMakeEntries;
  if (!lazy protocol witness table cache variable for type ToolbarMakeEntries and conformance ToolbarMakeEntries)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarMakeEntries, &type metadata for ToolbarMakeEntries);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarMakeEntries and conformance ToolbarMakeEntries);
  }
  return result;
}

uint64_t outlined release of ToolbarMakeEntries(uint64_t a1)
{

  return a1;
}

void partial apply for closure #1 in ToolbarItemGroup.init<A, B>(placement:content:label:)()
{
  uint64_t v0;

  closure #1 in ToolbarItemGroup.init<A, B>(placement:content:label:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void type metadata accessor for LabeledToolbarItemGroupContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in ModalLink.body.getter);
}

uint64_t partial apply for closure #2 in LabeledToolbarItemGroupContent.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in LabeledToolbarItemGroupContent.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in LabeledToolbarItemGroupContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ToolbarItemGroup()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for ToolbarItemGroup(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v8 + ((v7 + 41) & (unint64_t)~v7) + 1 > 0x18)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ~v7;
    if (*((_BYTE *)a2 + 40) == 1)
    {
      v13 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)((char *)a1 + 24) = v13;
      (**(void (***)(_OWORD *, uint64_t *))(v13 - 8))(a1, a2);
      *((_BYTE *)v4 + 40) = 1;
    }
    else
    {
      v14 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v14;
      *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    }
    v15 = (uint64_t)a2 + v7;
    v16 = ((unint64_t)v4 + v7 + 41) & v12;
    v17 = (v15 + 41) & v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v16, v17, v5);
    *(_BYTE *)(v16 + v8) = *(_BYTE *)(v17 + v8);
  }
  return v4;
}

uint64_t destroy for ToolbarItemGroup(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40) == 1)
    __swift_destroy_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for ToolbarItemGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a2 + 40) == 1)
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 41 + a1) & ~v9;
  v11 = (v9 + 41 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v10, v11);
  *(_BYTE *)(v10 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t assignWithCopy for ToolbarItemGroup(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1);
    if (*((_BYTE *)a2 + 40) == 1)
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 41 + a1) & ~v10;
  v12 = ((unint64_t)a2 + v10 + 41) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v9 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v9 + 64));
  return a1;
}

_OWORD *initializeWithTake for ToolbarItemGroup(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 41) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 41) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  *(_BYTE *)(v7 + *(_QWORD *)(v5 + 64)) = *(_BYTE *)(v8 + *(_QWORD *)(v5 + 64));
  return a1;
}

_OWORD *assignWithTake for ToolbarItemGroup(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)a1);
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 41) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 41) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  *(_BYTE *)(v9 + *(_QWORD *)(v7 + 64)) = *(_BYTE *)(v10 + *(_QWORD *)(v7 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarItemGroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v10 = v8 + ((v7 + 41) & ~v7) + 1;
  v11 = 8 * v10;
  if (v10 > 3)
    goto LABEL_7;
  v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
  if (HIWORD(v13))
  {
    v12 = *(_DWORD *)(a1 + v10);
    if (v12)
      goto LABEL_14;
  }
  else
  {
    if (v13 <= 0xFF)
    {
      if (v13 < 2)
        goto LABEL_21;
LABEL_7:
      v12 = *(unsigned __int8 *)(a1 + v10);
      if (!*(_BYTE *)(a1 + v10))
        goto LABEL_21;
LABEL_14:
      v14 = (v12 - 1) << v11;
      if (v10 > 3)
        v14 = 0;
      if ((_DWORD)v8 + (((_DWORD)v7 + 41) & ~(_DWORD)v7) == -1)
        return v6 + v14 + 1;
      if (v10 > 3)
        LODWORD(v10) = 4;
      return ((uint64_t (*)(void))((char *)&loc_18717E81C + 4 * byte_187C0F1A0[(v10 - 1)]))();
    }
    v12 = *(unsigned __int16 *)(a1 + v10);
    if (*(_WORD *)(a1 + v10))
      goto LABEL_14;
  }
LABEL_21:
  v16 = (a1 + v7 + 41) & ~v7;
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v16);
  v17 = *(unsigned __int8 *)(v16 + v8);
  if (v17 < 2)
    return 0;
  return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for ToolbarItemGroup(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 41) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t getEnumTagSinglePayload for LabeledToolbarItemGroupContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18717EB70 + 4 * byte_187C0F1AE[v17 - 1]))();
}

void storeEnumTagSinglePayload for LabeledToolbarItemGroupContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_18717EDEC()
{
  type metadata accessor for LabeledControlGroupContent();
}

uint64_t sub_18717EE10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledControlGroupContent<A, B>, a1);
  v4 = type metadata accessor for ControlGroup(255, a1, v2, v3);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroup<A>, v4);
}

void base witness table accessor for _AttributeBody in ToolbarItemGroup<A>.MakeView()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t View.systemColorScheme()(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 1;
  return MEMORY[0x18D75B4AC](&v3, a1, MEMORY[0x1E0CE5ED0], a2);
}

uint64_t View.systemColorScheme(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, MEMORY[0x1E0CE5ED0], a3);
}

uint64_t sub_18717EECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = MEMORY[0x1E0CE5EC0];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void static WorldAlignmentBehavior.gravityAligned.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WorldAlignmentBehavior.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.volumeWorldAlignment(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WorldAlignmentBehavior()
{
  return &type metadata for WorldAlignmentBehavior;
}

uint64_t storeEnumTagSinglePayload for WorldAlignmentBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18717EFB0 + 4 * byte_187C0F355[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18717EFE4 + 4 * byte_187C0F350[v4]))();
}

uint64_t sub_18717EFE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18717EFEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18717EFF4);
  return result;
}

uint64_t sub_18717F000(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18717F008);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18717F00C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18717F014(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorldAlignmentBehavior.Storage()
{
  return &type metadata for WorldAlignmentBehavior.Storage;
}

unint64_t lazy protocol witness table accessor for type WorldAlignmentBehavior.Storage and conformance WorldAlignmentBehavior.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WorldAlignmentBehavior.Storage and conformance WorldAlignmentBehavior.Storage;
  if (!lazy protocol witness table cache variable for type WorldAlignmentBehavior.Storage and conformance WorldAlignmentBehavior.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WorldAlignmentBehavior.Storage, &type metadata for WorldAlignmentBehavior.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorldAlignmentBehavior.Storage and conformance WorldAlignmentBehavior.Storage);
  }
  return result;
}

void static WorldAlignmentBehavior.automatic.getter()
{
  static WorldAlignmentBehavior.gravityAligned.getter();
}

void static WorldAlignmentBehavior.adaptive.getter()
{
  static WorldAlignmentBehavior.gravityAligned.getter();
}

void static WorldAlignmentBehavior.floor.getter()
{
  static WorldAlignmentBehavior.gravityAligned.getter();
}

uint64_t _FlipForRTLEffect.isEnabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t _FlipForRTLEffect.isEnabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_FlipForRTLEffect.isEnabled.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::_FlipForRTLEffect __swiftcall _FlipForRTLEffect.init(isEnabled:)(Swift::Bool isEnabled)
{
  return (SwiftUI::_FlipForRTLEffect)isEnabled;
}

BOOL static _FlipForRTLEffect.== infix(_:_:)(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

void type metadata accessor for _GraphValue<_FlipForRTLEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<_FlipForRTLEffect>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_FlipForRTLEffect>);
  }
}

void protocol witness for ViewModifier.body(content:) in conformance _FlipForRTLEffect()
{
  specialized ViewModifier.bodyError()();
}

uint64_t View.flipsForRightToLeftLayoutDirection(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for _FlipForRTLEffect, a3);
}

_BYTE *protocol witness for Rule.value.getter in conformance Child@<X0>(char *a1@<X8>)
{
  _BYTE *result;
  char v3;

  result = (_BYTE *)AGGraphGetValue();
  if (*result)
    v3 = 1;
  else
    v3 = 2;
  *a1 = v3;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _FlipForRTLEffect()
{
  return &protocol witness table for _FlipForRTLEffect;
}

uint64_t storeEnumTagSinglePayload for _FlipForRTLEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18717F204 + 4 * byte_187C0F425[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18717F238 + 4 * byte_187C0F420[v4]))();
}

uint64_t sub_18717F238(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18717F240(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18717F248);
  return result;
}

uint64_t sub_18717F254(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18717F25CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18717F260(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18717F268(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18717F274(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _FlipForRTLEffect;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void *type metadata accessor for Child()
{
  return &unk_1E1B0AC60;
}

uint64_t OpenDocumentAction.callAsFunction(at:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

void NewDocumentAction.callAsFunction<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  NewDocumentAction.callAsFunction<A>(_:)();
}

void NewDocumentAction.callAsFunction(contentType:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NewDocumentAction.callAsFunction(contentType:prepareNewDocument:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.newDocument.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.openDocument.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18717F3D4()
{
  keypath_getTm_0();
}

void sub_18717F3E0()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18717F3F0()
{
  keypath_getTm_0();
}

void keypath_getTm_0()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for OpenDocumentAction()
{
  return &type metadata for OpenDocumentAction;
}

ValueMetadata *type metadata accessor for NewDocumentAction()
{
  return &type metadata for NewDocumentAction;
}

void sub_18717F44C()
{
  sub_18717F3E0();
}

void __swiftcall TitleBarWindowStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void TitleBarWindowStyle.configureWindow(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for TitleBarWindowStyle()
{
  return &type metadata for TitleBarWindowStyle;
}

uint64_t type metadata completion function for FormVStack()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FormVStack(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 17) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    (*(void (**)(uint64_t, unint64_t))(v4 + 16))((a1 + v5 + 17) & ~v5, ((unint64_t)a2 + v5 + 17) & ~v5);
  }
  return v3;
}

uint64_t destroy for FormVStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t initializeWithTake for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))((*(unsigned __int8 *)(v5 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for FormVStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 17) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 17) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18717F7F8 + 4 * byte_187C0F600[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for FormVStack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 17) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 17) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for FormVStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormVStack);
}

uint64_t getEnumTagSinglePayload for _FormVStackLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _FormVStackLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _FormVStackLayout()
{
  return &type metadata for _FormVStackLayout;
}

uint64_t static FormVStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FormVStack(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  type metadata accessor for _VariadicView.Tree();
  _GraphValue.subscript.getter();
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

uint64_t closure #1 in static FormVStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v8[2] = type metadata accessor for FormVStack(0, a2, a3, a4);
  v9 = type metadata accessor for _VariadicView.Tree();
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v9, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v10;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FormVStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FormVStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FormVStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormVStack<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FormVStack<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormVStack<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance FormVStack<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormVStack<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for HVStack.spacing.getter in conformance _FormVStackLayout()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void protocol witness for static Layout.layoutProperties.getter in conformance _FormVStackLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance _FormVStackLayout()
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return HVStack.makeCache(subviews:)();
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance _FormVStackLayout()
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return HVStack.updateCache(_:subviews:)();
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance _FormVStackLayout()
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return HVStack.spacing(subviews:cache:)();
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _FormVStackLayout()
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return HVStack.sizeThatFits(proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _FormVStackLayout()
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return HVStack.placeSubviews(in:proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _FormVStackLayout(a1, a2, a9, a10, a11, a12, a3, a4, a5, a6, a7, a8, a13, MEMORY[0x1E0CE7768]);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _FormVStackLayout(a1, a2, a9, a10, a11, a12, a3, a4, a5, a6, a7, a8, a13, MEMORY[0x1E0CE7770]);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _FormVStackLayout(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t, double, double, double, double))
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return a14(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _FormVStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v23 = *a1;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v12 = *(_OWORD *)(a2 + 5);
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v12;
  v20 = *(_OWORD *)(a2 + 7);
  v21 = a2[9];
  v22 = v11;
  v13 = lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 88))(&v23, &v15, a3, a4, a5, v13);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _FormVStackLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _FormVStackLayout()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t instantiation function for generic protocol witness table for _FormVStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _FormVStackLayout, &type metadata for _FormVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _FormVStackLayout, &type metadata for _FormVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _FormVStackLayout, &type metadata for _FormVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _FormVStackLayout, &type metadata for _FormVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout;
  if (!lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _FormVStackLayout, &type metadata for _FormVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FormVStackLayout and conformance _FormVStackLayout);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _VariadicView_UnaryViewRoot in _FormVStackLayout()
{
  return &protocol witness table for _FormVStackLayout;
}

_UNKNOWN **base witness table accessor for View in FormVStack<A>()
{
  return &protocol witness table for FormVStack<A>;
}

uint64_t protocol witness for static _VariadicView_ImplicitRoot.implicitRoot.getter in conformance _FormVStackLayout@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = static HorizontalAlignment.center.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _FormVStackLayout()
{
  lazy protocol witness table accessor for type _FormVStackLayout and conformance _FormVStackLayout();
  return static _VariadicView_ImplicitRoot.visitType<A>(visitor:)();
}

_UNKNOWN **base witness table accessor for _VariadicView_ViewRoot in _FormVStackLayout()
{
  return &protocol witness table for _FormVStackLayout;
}

uint64_t partial apply for closure #1 in static FormVStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static FormVStack._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedTextEditorStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TextEditorStyleConfiguration(v1, a1);
}

uint64_t TextEditorStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 24))(a1, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, AssociatedTypeWitness);
}

uint64_t EnvironmentValues.textEditorStyle.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey>, (uint64_t)&unk_1E1AC36C8, (uint64_t)&protocol witness table for EnvironmentValues.TextEditorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey>, (uint64_t)&unk_1E1AC36C8, (uint64_t)&protocol witness table for EnvironmentValues.TextEditorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.textEditorStyle.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey>, (uint64_t)&unk_1E1AC36C8, (uint64_t)&protocol witness table for EnvironmentValues.TextEditorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.textEditorStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TextEditorStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for TextEditorStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextEditorStyleModifier);
}

uint64_t dispatch thunk of TextEditorStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for TextEditorStyleConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    type metadata accessor for Binding<TextSelection?>(0);
    v11 = v10;
    v12 = *(_QWORD *)(v10 - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13(v9, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v15 = v9[1];
      *v8 = *v9;
      v8[1] = v15;
      v16 = *(int *)(v11 + 32);
      __dst = (char *)v8 + v16;
      v17 = (char *)v9 + v16;
      v18 = type metadata accessor for TextSelection(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      swift_retain();
      swift_retain();
      if (v20(v17, 1, v18))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v22 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(__dst, v17, v23);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        __dst[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
  }
  return v5;
}

uint64_t destroy for TextEditorStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for Binding<TextSelection?>(0);
  v6 = v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v8 = v4 + *(int *)(v6 + 32);
    v9 = type metadata accessor for TextSelection(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      type metadata accessor for TextSelection.Indices(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  return result;
}

_QWORD *initializeWithCopy for TextEditorStyleConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *__dst;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v8[1];
    *v7 = *v8;
    v7[1] = v14;
    v15 = *(int *)(v10 + 32);
    __dst = (char *)v7 + v15;
    v16 = (char *)v8 + v15;
    v17 = type metadata accessor for TextSelection(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_retain();
    swift_retain();
    if (v19(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(__dst, v16, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      __dst[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithCopy for TextEditorStyleConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *__dst;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v7, 1, v9);
  v14 = v12(v8, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    *(_QWORD *)v7 = *(_QWORD *)v8;
    swift_retain();
    swift_release();
    *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
    swift_retain();
    swift_release();
    v26 = *(int *)(v10 + 32);
    v27 = &v7[v26];
    v28 = &v8[v26];
    v29 = type metadata accessor for TextSelection(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v32 = v31(v27, 1, v29);
    v33 = v31(v28, 1, v29);
    if (v32)
    {
      if (!v33)
      {
        v34 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v27, v28, v35);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        v27[*(int *)(v29 + 20)] = v28[*(int *)(v29 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        return a1;
      }
    }
    else
    {
      if (!v33)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, type metadata accessor for TextSelection.Indices);
          v42 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v27, v28, v43);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          }
        }
        v27[*(int *)(v29 + 20)] = v28[*(int *)(v29 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v17 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
    v18 = v27;
    v19 = v28;
    goto LABEL_7;
  }
  if (v14)
  {
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v15);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
    v18 = v7;
    v19 = v8;
LABEL_7:
    memcpy(v18, v19, v17);
    return a1;
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
  v20 = *(int *)(v10 + 32);
  __dst = &v7[v20];
  v21 = &v8[v20];
  v22 = type metadata accessor for TextSelection(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  swift_retain();
  swift_retain();
  if (v24(v21, 1, v22))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v36 = v23;
    v37 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      v39 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(__dst, v21, v38);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v39 = __dst;
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    v39[*(int *)(v22 + 20)] = v21[*(int *)(v22 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v39, 0, 1, v22);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  return a1;
}

_OWORD *initializeWithTake for TextEditorStyleConfiguration(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v7[1];
    *v6 = *v7;
    v6[1] = v12;
    v13 = *(int *)(v9 + 32);
    v14 = (char *)v6 + v13;
    v15 = (char *)v7 + v13;
    v16 = type metadata accessor for TextSelection(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithTake for TextEditorStyleConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  type metadata accessor for Binding<TextSelection?>(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v8, 1, v10);
  v15 = v13(v9, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    *(_QWORD *)v8 = *(_QWORD *)v9;
    swift_release();
    *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
    swift_release();
    v28 = *(int *)(v11 + 32);
    v29 = &v8[v28];
    v30 = &v9[v28];
    v31 = type metadata accessor for TextSelection(0);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
    v34 = v33(v29, 1, v31);
    v35 = v33(v30, 1, v31);
    if (v34)
    {
      if (!v35)
      {
        v36 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v29, v30, v37);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        v29[*(int *)(v31 + 20)] = v30[*(int *)(v31 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
        return a1;
      }
    }
    else
    {
      if (!v35)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, type metadata accessor for TextSelection.Indices);
          v42 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v29, v30, v43);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          }
        }
        v29[*(int *)(v31 + 20)] = v30[*(int *)(v31 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v18 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
    v19 = v29;
    v20 = v30;
    goto LABEL_7;
  }
  if (v15)
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
    v19 = v8;
    v20 = v9;
LABEL_7:
    memcpy(v19, v20, v18);
    return a1;
  }
  v21 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *((_QWORD *)v8 + 1) = v21;
  v22 = *(int *)(v11 + 32);
  v23 = &v8[v22];
  v24 = &v9[v22];
  v25 = type metadata accessor for TextSelection(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v38 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v23, v24, v39);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEditorStyleConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18718188C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TextEditorStyleConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18718192C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TextEditorStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TextEditorStyleConfiguration);
}

void type metadata completion function for TextEditorStyleConfiguration()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_187181A58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for TextEditorStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for TextEditorStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t storeEnumTagSinglePayload for TextEditorBorderStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187181B04 + 4 * byte_187C0F7E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187181B38 + 4 * byte_187C0F7E0[v4]))();
}

uint64_t sub_187181B38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187181B40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187181B48);
  return result;
}

uint64_t sub_187181B54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187181B5CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187181B60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187181B68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextEditorBorderStyle()
{
  return &type metadata for TextEditorBorderStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedTextEditorStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *__dst;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    a1[3] = a2[3];
    v8 = *(int *)(v4 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for Binding<TextSelection?>(0);
    v12 = v11;
    v13 = *(_QWORD *)(v11 - 8);
    v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v10, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = v10[1];
      *v9 = *v10;
      v9[1] = v16;
      v17 = *(int *)(v12 + 32);
      __dst = (char *)v9 + v17;
      v18 = (char *)v10 + v17;
      v19 = type metadata accessor for TextSelection(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      swift_retain();
      swift_retain();
      if (v21(v18, 1, v19))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v23 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(__dst, v18, v24);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        __dst[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for ResolvedTextEditorStyle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  type metadata accessor for Binding<TextSelection?>(0);
  v4 = v3;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v6 = v2 + *(int *)(v4 + 32);
    v7 = type metadata accessor for TextSelection(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
    if (!(_DWORD)result)
    {
      type metadata accessor for TextSelection.Indices(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
      }
    }
  }
  return result;
}

_QWORD *initializeWithCopy for ResolvedTextEditorStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *__dst;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v8[1];
    *v7 = *v8;
    v7[1] = v14;
    v15 = *(int *)(v10 + 32);
    __dst = (char *)v7 + v15;
    v16 = (char *)v8 + v15;
    v17 = type metadata accessor for TextSelection(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_retain();
    swift_retain();
    if (v19(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(__dst, v16, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      __dst[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithCopy for ResolvedTextEditorStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *__dst;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  type metadata accessor for Binding<TextSelection?>(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v5, 1, v7);
  v12 = v10(v6, 1, v8);
  if (!v11)
  {
    if (v12)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    *(_QWORD *)v5 = *(_QWORD *)v6;
    swift_retain();
    swift_release();
    *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
    swift_retain();
    swift_release();
    v24 = *(int *)(v8 + 32);
    v25 = &v5[v24];
    v26 = &v6[v24];
    v27 = type metadata accessor for TextSelection(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
    v30 = v29(v25, 1, v27);
    v31 = v29(v26, 1, v27);
    if (v30)
    {
      if (!v31)
      {
        v32 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v25, v26, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        return a1;
      }
    }
    else
    {
      if (!v31)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, type metadata accessor for TextSelection.Indices);
          v40 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v25, v26, v41);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
        }
        v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v15 = *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64);
    v16 = v25;
    v17 = v26;
    goto LABEL_7;
  }
  if (v12)
  {
    v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v13);
    v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
    v16 = v5;
    v17 = v6;
LABEL_7:
    memcpy(v16, v17, v15);
    return a1;
  }
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
  v18 = *(int *)(v8 + 32);
  __dst = &v5[v18];
  v19 = &v6[v18];
  v20 = type metadata accessor for TextSelection(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_retain();
  swift_retain();
  if (v22(v19, 1, v20))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v34 = v21;
    v35 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      v37 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(__dst, v19, v36);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v37 = __dst;
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    v37[*(int *)(v20 + 20)] = v19[*(int *)(v20 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v20);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  return a1;
}

_OWORD *initializeWithTake for ResolvedTextEditorStyle(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v7[1];
    *v6 = *v7;
    v6[1] = v12;
    v13 = *(int *)(v9 + 32);
    v14 = (char *)v6 + v13;
    v15 = (char *)v7 + v13;
    v16 = type metadata accessor for TextSelection(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithTake for ResolvedTextEditorStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRelease();
  v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  type metadata accessor for Binding<TextSelection?>(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v6, 1, v8);
  v13 = v11(v7, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    *(_QWORD *)v6 = *(_QWORD *)v7;
    swift_release();
    *((_QWORD *)v6 + 1) = *((_QWORD *)v7 + 1);
    swift_release();
    v26 = *(int *)(v9 + 32);
    v27 = &v6[v26];
    v28 = &v7[v26];
    v29 = type metadata accessor for TextSelection(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v32 = v31(v27, 1, v29);
    v33 = v31(v28, 1, v29);
    if (v32)
    {
      if (!v33)
      {
        v34 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v27, v28, v35);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        v27[*(int *)(v29 + 20)] = v28[*(int *)(v29 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        return a1;
      }
    }
    else
    {
      if (!v33)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, type metadata accessor for TextSelection.Indices);
          v40 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v27, v28, v41);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
        }
        v27[*(int *)(v29 + 20)] = v28[*(int *)(v29 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v16 = *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64);
    v17 = v27;
    v18 = v28;
    goto LABEL_7;
  }
  if (v13)
  {
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v14);
    v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    v17 = v6;
    v18 = v7;
LABEL_7:
    memcpy(v17, v18, v16);
    return a1;
  }
  v19 = *((_QWORD *)v7 + 1);
  *(_QWORD *)v6 = *(_QWORD *)v7;
  *((_QWORD *)v6 + 1) = v19;
  v20 = *(int *)(v9 + 32);
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = type metadata accessor for TextSelection(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v36 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v21, v22, v37);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    v21[*(int *)(v23 + 20)] = v22[*(int *)(v23 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTextEditorStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187182BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedTextEditorStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187182C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedTextEditorStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTextEditorStyle);
}

uint64_t type metadata completion function for ResolvedTextEditorStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TextEditorStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TextEditorStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187182DA0 + 4 * byte_187C0F7EA[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TextEditorStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in TextEditorStyleModifier<A>()
{
  return &protocol witness table for TextEditorStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in TextEditorStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for TextEditorStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextEditorStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextEditorStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedTextEditorStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextEditorStyleModifier<AutomaticTextEditorStyle> and conformance TextEditorStyleModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for TextEditorStyleModifier<AutomaticTextEditorStyle>, (uint64_t)&protocol conformance descriptor for TextEditorStyleModifier<A>);
}

void type metadata accessor for TextEditorStyleModifier<AutomaticTextEditorStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TextEditorStyleModifier<AutomaticTextEditorStyle>)
  {
    v2 = lazy protocol witness table accessor for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle();
    v4 = type metadata accessor for TextEditorStyleModifier(a1, (uint64_t)&type metadata for AutomaticTextEditorStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TextEditorStyleModifier<AutomaticTextEditorStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle;
  if (!lazy protocol witness table cache variable for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticTextEditorStyle, &type metadata for AutomaticTextEditorStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticTextEditorStyle and conformance AutomaticTextEditorStyle);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ResolvedTextEditorStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TextEditorBorderStyle and conformance TextEditorBorderStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextEditorBorderStyle and conformance TextEditorBorderStyle;
  if (!lazy protocol witness table cache variable for type TextEditorBorderStyle and conformance TextEditorBorderStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextEditorBorderStyle, &type metadata for TextEditorBorderStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEditorBorderStyle and conformance TextEditorBorderStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedTextEditorStyle()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of TextEditorStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey>, (uint64_t)&unk_1E1AC36C8, (uint64_t)&protocol witness table for EnvironmentValues.TextEditorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextEditorStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for EnvironmentValues.TextEditorStyleKey()
{
  return &unk_1E1AC36C8;
}

uint64_t TextEditor.init(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a5 = swift_getKeyPath();
  *(_WORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 10) = 0;
  v10 = a5 + *(int *)(type metadata accessor for TextEditor() + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  v12 = v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v14(v10, 1, 1, v11);
  *(_QWORD *)(a5 + 16) = a1;
  *(_QWORD *)(a5 + 24) = a2;
  *(_QWORD *)(a5 + 32) = a3;
  *(_QWORD *)(a5 + 40) = a4;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v10, 1, 1, v12);
}

uint64_t TextEditor.init(text:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a6 = swift_getKeyPath();
  *(_WORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 10) = 0;
  v12 = a6 + *(int *)(type metadata accessor for TextEditor() + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  v14 = v13;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v16(v12, 1, 1, v13);
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  *(_QWORD *)(a6 + 32) = a3;
  *(_QWORD *)(a6 + 40) = a4;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  outlined init with take of Binding<TextSelection?>(a5, v12);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v16)(v12, 0, 1, v14);
}

{
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);

  KeyPath = swift_getKeyPath();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection>);
  *(_QWORD *)a6 = KeyPath;
  *(_WORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 10) = 0;
  v13 = a6 + *(int *)(type metadata accessor for TextEditor() + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  v15 = v14;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v17(v13, 1, 1, v14);
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  *(_QWORD *)(a6 + 32) = a3;
  *(_QWORD *)(a6 + 40) = a4;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v13, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v17)(v13, 1, 1, v15);
}

uint64_t TextEditor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a2 = swift_getKeyPath();
  *(_WORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 10) = 0;
  v4 = a2 + *(int *)(type metadata accessor for TextEditor() + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  v8 = a1 + *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  return outlined assign with take of Binding<TextSelection?>?(v8, v4);
}

uint64_t TextEditor.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a1;
  v2 = type metadata accessor for ResolvedTextEditorStyle(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>(0);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>(0);
  v35 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1[2];
  v16 = v1[3];
  v18 = v1[4];
  v17 = v1[5];
  v19 = (uint64_t)v1 + *(int *)(type metadata accessor for TextEditor() + 24);
  v20 = type metadata accessor for TextEditorStyleConfiguration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v19, (uint64_t)v5 + *(int *)(v20 + 20), (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  *v5 = v15;
  v5[1] = v16;
  v5[2] = v18;
  v5[3] = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v17) = static Edge.Set.all.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v5, (uint64_t)v10, type metadata accessor for ResolvedTextEditorStyle);
  v21 = &v10[*(int *)(v7 + 36)];
  *(_QWORD *)v21 = 1;
  v21[8] = v17;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for ResolvedTextEditorStyle);
  v22 = static Alignment.center.getter();
  v24 = v23;
  v25 = *v1;
  v26 = *((unsigned __int16 *)v1 + 4);
  LODWORD(v15) = *((unsigned __int8 *)v1 + 10);
  outlined copy of Environment<SceneBridge?>.Content(*v1, v26);
  v27 = specialized Environment.wrappedValue.getter(v25, v26 | ((_DWORD)v15 << 16));
  LOBYTE(v16) = v28;
  outlined consume of Environment<Color?>.Content(v25, v26);
  if (v16 == 2)
  {
    v37 = static Color.clear.getter();
    v29 = AnyShapeStyle.init<A>(_:)();
    swift_release();
    v27 = v29;
  }
  else if (!v27)
  {
    v31 = 0;
    v30 = 0;
    v32 = 0;
    goto LABEL_6;
  }
  v30 = -1;
  v31 = 256;
  v32 = static Edge.Set.all.getter();
LABEL_6:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>);
  v33 = &v14[*(int *)(v35 + 36)];
  *(_QWORD *)v33 = v27;
  *((_QWORD *)v33 + 1) = v31;
  *((_QWORD *)v33 + 2) = v30;
  v33[24] = v32;
  *((_QWORD *)v33 + 4) = v22;
  *((_QWORD *)v33 + 5) = v24;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, v36, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TextEditor()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>(0);
  type metadata accessor for ViewInputFlagModifier<ProvidesEditMenuInteraction>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseLegacySafeAreaPropagation()
{
  static Semantics.v4.getter();
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

uint64_t key path getter for EnvironmentValues.scrollContentBackground : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = EnvironmentValues.scrollContentBackground.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t sub_18718391C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = EnvironmentValues.scrollContentBackground.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.scrollContentBackground : EnvironmentValues()
{
  swift_retain();
  specialized EnvironmentValues.subscript.setter();
  return swift_release();
}

uint64_t type metadata accessor for TextEditor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TextEditor;
  if (!type metadata singleton initialization cache for TextEditor)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for Binding<TextSelection?>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t outlined init with take of Binding<TextSelection?>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Binding<TextSelection?>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<TextSelection?>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ResolvedTextEditorStyle, (void (*)(uint64_t))type metadata accessor for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>)
  {
    lazy protocol witness table accessor for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation;
  if (!lazy protocol witness table cache variable for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseLegacySafeAreaPropagation, &unk_1E1AF8C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseLegacySafeAreaPropagation and conformance UseLegacySafeAreaPropagation);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>);
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?();
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>);
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for _ShapeView<Rectangle, AnyShapeStyle>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>);
  }
}

void type metadata accessor for _ShapeView<Rectangle, AnyShapeStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, AnyShapeStyle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, AnyShapeStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, AnyShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AnyShapeStyle>, MEMORY[0x1E0CE0E50]);
    v3[1] = MEMORY[0x1E0CE65D8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for Binding<TextSelection>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<TextSelection>, type metadata accessor for TextSelection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

uint64_t associated type witness table accessor for View.Body : View in TextEditor()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for TextEditor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 10);
    v9 = *((_WORD *)a2 + 4);
    outlined copy of Environment<SceneBridge?>.Content(*a2, v9);
    *(_QWORD *)a1 = v7;
    *(_WORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 10) = v8;
    v10 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v10;
    v11 = a2[5];
    v12 = *(int *)(a3 + 24);
    v13 = (_QWORD *)(a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v11;
    type metadata accessor for Binding<TextSelection?>(0);
    v16 = v15;
    v17 = *(_QWORD *)(v15 - 8);
    v18 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v18(v14, 1, v16))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = v14[1];
      *v13 = *v14;
      v13[1] = v21;
      v22 = *(int *)(v16 + 32);
      __dst = (char *)v13 + v22;
      v23 = (char *)v14 + v22;
      v24 = type metadata accessor for TextSelection(0);
      v25 = *(_QWORD *)(v24 - 8);
      v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_retain();
      swift_retain();
      if (v26(v23, 1, v24))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v28 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(__dst, v23, v29);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        __dst[*(int *)(v24 + 20)] = v23[*(int *)(v24 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
  }
  return a1;
}

void type metadata accessor for RangeSet<String.Index>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for RangeSet<String.Index>)
  {
    v0 = type metadata accessor for RangeSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>);
  }
}

uint64_t destroy for TextEditor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  outlined consume of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int16 *)(a1 + 8));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  v6 = v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v8 = v4 + *(int *)(v6 + 32);
    v9 = type metadata accessor for TextSelection(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      type metadata accessor for TextSelection.Indices(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for TextEditor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *__dst;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 10);
  v8 = *((_WORD *)a2 + 4);
  outlined copy of Environment<SceneBridge?>.Content(*a2, v8);
  *(_QWORD *)a1 = v6;
  *(_WORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 10) = v7;
  v9 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v9;
  v10 = a2[5];
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v10;
  type metadata accessor for Binding<TextSelection?>(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v17(v13, 1, v15))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = v13[1];
    *v12 = *v13;
    v12[1] = v19;
    v20 = *(int *)(v15 + 32);
    __dst = (char *)v12 + v20;
    v21 = (char *)v13 + v20;
    v22 = type metadata accessor for TextSelection(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_retain();
    swift_retain();
    if (v24(v21, 1, v22))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(__dst, v21, v27);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      __dst[*(int *)(v22 + 20)] = v21[*(int *)(v22 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  return a1;
}

uint64_t *assignWithCopy for TextEditor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *__dst;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 10);
  v8 = *((_WORD *)a2 + 4);
  outlined copy of Environment<SceneBridge?>.Content(*a2, v8);
  v9 = *a1;
  *a1 = v6;
  v10 = *((unsigned __int16 *)a1 + 4);
  *((_WORD *)a1 + 4) = v8;
  *((_BYTE *)a1 + 10) = v7;
  outlined consume of Environment<Color?>.Content(v9, v10);
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  type metadata accessor for Binding<TextSelection?>(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v12, 1, v14);
  v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
      v20 = *(int *)(v15 + 32);
      __dst = &v12[v20];
      v21 = &v13[v20];
      v22 = type metadata accessor for TextSelection(0);
      v23 = *(_QWORD *)(v22 - 8);
      v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
      swift_retain();
      swift_retain();
      if (v24(v21, 1, v22))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v40 = v23;
        v41 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          v43 = __dst;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(__dst, v21, v42);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          v43 = __dst;
          memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        v43[*(int *)(v22 + 20)] = v21[*(int *)(v22 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v43, 0, 1, v22);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      return a1;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    v27 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64);
    v28 = v12;
    v29 = v13;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_retain();
  swift_release();
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_retain();
  swift_release();
  v30 = *(int *)(v15 + 32);
  v31 = &v12[v30];
  v32 = &v13[v30];
  v33 = type metadata accessor for TextSelection(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      v38 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v31, v32, v39);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      v31[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      return a1;
    }
    goto LABEL_17;
  }
  if (v37)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    v27 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64);
    v28 = v31;
    v29 = v32;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, type metadata accessor for TextSelection.Indices);
    v46 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v31, v32, v47);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
  }
  v31[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
  return a1;
}

uint64_t initializeWithTake for TextEditor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (_QWORD *)(a1 + v5);
  v7 = (_QWORD *)(a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v7[1];
    *v6 = *v7;
    v6[1] = v12;
    v13 = *(int *)(v9 + 32);
    v14 = (char *)v6 + v13;
    v15 = (char *)v7 + v13;
    v16 = type metadata accessor for TextSelection(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

uint64_t *assignWithTake for TextEditor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;

  v6 = *((_WORD *)a2 + 4);
  v7 = *((_BYTE *)a2 + 10);
  v8 = *a1;
  *a1 = *a2;
  v9 = *((unsigned __int16 *)a1 + 4);
  *((_WORD *)a1 + 4) = v6;
  *((_BYTE *)a1 + 10) = v7;
  outlined consume of Environment<Color?>.Content(v8, v9);
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  v10 = a2[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  type metadata accessor for Binding<TextSelection?>(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v12, 1, v14);
  v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v20 = *((_QWORD *)v13 + 1);
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = v20;
      v21 = *(int *)(v15 + 32);
      v22 = &v12[v21];
      v23 = &v13[v21];
      v24 = type metadata accessor for TextSelection(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v41 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v22, v23, v42);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        v22[*(int *)(v24 + 20)] = v23[*(int *)(v24 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      return a1;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    v28 = *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64);
    v29 = v12;
    v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_release();
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_release();
  v31 = *(int *)(v15 + 32);
  v32 = &v12[v31];
  v33 = &v13[v31];
  v34 = type metadata accessor for TextSelection(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      v39 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v32, v33, v40);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      v32[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      return a1;
    }
    goto LABEL_17;
  }
  if (v38)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    v28 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
    v29 = v32;
    v30 = v33;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, type metadata accessor for TextSelection.Indices);
    v45 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v32, v33, v46);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
  }
  v32[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEditor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187184D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TextEditor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187184DFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for TextEditor()
{
  unint64_t v0;

  type metadata accessor for Binding<TextSelection?>?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>>, type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, type metadata accessor for ViewInputFlagModifier<ProvidesEditMenuInteraction>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>, ViewInputFlagModifier<ProvidesEditMenuInteraction>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<ProvidesEditMenuInteraction>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesEditMenuInteraction>)
  {
    v2 = lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for ProvidesEditMenuInteraction, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesEditMenuInteraction>);
  }
}

unint64_t lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesEditMenuInteraction, &type metadata for ProvidesEditMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesEditMenuInteraction, &type metadata for ProvidesEditMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesEditMenuInteraction, &type metadata for ProvidesEditMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesEditMenuInteraction, &type metadata for ProvidesEditMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesEditMenuInteraction, &type metadata for ProvidesEditMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>, MEMORY[0x1E0CE4B88]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>, _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle, AnyShapeStyle>, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
    v3[1] = lazy protocol witness table accessor for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedTextEditorStyle, StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
    v2[0] = MEMORY[0x1E0CE65D8];
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<UseLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void *type metadata accessor for UseLegacySafeAreaPropagation()
{
  return &unk_1E1AF8C70;
}

void (*ToggleStyleConfiguration.isOn.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = v1[1];
  v3[3] = *v1;
  v3[4] = v5;
  v6 = *((_BYTE *)v1 + 16);
  *v3 = v4;
  v3[1] = v5;
  *((_BYTE *)v3 + 16) = v6;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = v7;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](v8);
  return ToggleStyleConfiguration.isOn.modify;
}

void ToggleStyleConfiguration.isOn.modify(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)a1;
  **(_BYTE **)a1 = *(_BYTE *)(*(_QWORD *)a1 + 17);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t ToggleStyleConfiguration.isOn.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

_QWORD *key path getter for ToggleStyleConfiguration.isOn : ToggleStyleConfiguration@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  result = MEMORY[0x18D75B9C8](&v3);
  *a1 = v3;
  return result;
}

void key path setter for ToggleStyleConfiguration.isOn : ToggleStyleConfiguration(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = a2[6];
  v3 = a2[7];
  v4 = a2[8];
  v5 = (void *)a2[9];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_release_n();
  swift_release_n();
  outlined consume of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
}

uint64_t ToggleStyleConfiguration.isOn.setter()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t ToggleStyleConfiguration.$isOn.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t ToggleStyleConfiguration.isMixed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t ToggleStyleConfiguration.isMixed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

uint64_t (*ToggleStyleConfiguration.isMixed.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

_BYTE *protocol witness for Projection.get(base:) in conformance ToggleStateBool@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 0;
  return result;
}

BOOL *protocol witness for Projection.set(base:newValue:) in conformance ToggleStateBool(BOOL *result, _BYTE *a2)
{
  *result = (*a2 & 1) == 0;
  return result;
}

_QWORD *ResolvedToggleStyle.body.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int8x16_t __src[17];

  v3 = v1[1];
  v15 = *v1;
  v16 = v3;
  v4 = v1[3];
  v17 = v1[2];
  v18 = v4;
  v5 = v1[5];
  v19 = v1[4];
  v20 = v5;
  v6 = *((_QWORD *)&v16 + 1);
  v21 = v15;
  v22 = v16;
  v23 = *((_QWORD *)&v16 + 1);
  v24 = v17;
  v25 = WORD4(v17);
  v26 = v18;
  v27 = v19;
  v28 = v5;
  v29 = v15;
  v30 = v16;
  v31 = *((_QWORD *)&v16 + 1);
  v32 = v17;
  v33 = WORD4(v17);
  v34 = v18;
  v35 = v19;
  v36 = v5;
  outlined retain of ToggleStyleConfiguration(&v15);
  specialized AccessibilityToggleModifier.body(content:)((uint64_t)&v21, __src);
  outlined release of ToggleStyleConfiguration(&v15);
  v13 = v6;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v14);
  LOBYTE(v6) = v14;
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = v6;
  v8 = (_OWORD *)swift_allocObject();
  v9 = v18;
  v8[3] = v17;
  v8[4] = v9;
  v10 = v20;
  v8[5] = v19;
  v8[6] = v10;
  v11 = v16;
  v8[1] = v15;
  v8[2] = v11;
  memcpy((void *)a1, __src, 0x110uLL);
  *(_BYTE *)(a1 + 272) = 1;
  *(_DWORD *)(a1 + 273) = v13;
  *(_DWORD *)(a1 + 276) = *(_DWORD *)((char *)&v13 + 3);
  *(_QWORD *)(a1 + 280) = partial apply for closure #1 in View.platformItemToggleState(_:);
  *(_QWORD *)(a1 + 288) = v7;
  *(_QWORD *)(a1 + 296) = partial apply for closure #2 in ResolvedToggleStyle.body.getter;
  *(_QWORD *)(a1 + 304) = v8;
  return outlined retain of ToggleStyleConfiguration(&v15);
}

_QWORD *closure #2 in ResolvedToggleStyle.body.getter(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  outlined retain of ToggleStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v3 = v2;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v5, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of ToggleStyleConfiguration(a1);
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedToggleStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  v5 = v1[3];
  v6 = v1[4];
  v7 = *((_BYTE *)v1 + 40);
  v8 = *((_BYTE *)v1 + 41);
  v9 = v1[6];
  v10 = v1[7];
  v11 = v1[8];
  v12 = (void *)v1[9];
  v14 = v1[10];
  v13 = v1[11];
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 41) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return outlined copy of ToggleStyleConfiguration.Effect(v9, v10, v11, v12);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedToggleStyleBody()
{
  lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();
  return static ConditionallyArchivableView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedToggleStyleBody()
{
  lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();
  return static ConditionallyArchivableView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyleBody()
{
  lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ResolvedToggleStyleBody(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v20 = *(_BYTE *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v7 = *(void **)(v1 + 72);
  if (v7)
    v9 = *(_QWORD *)(v1 + 48);
  else
    v9 = 0;
  v11 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 88);
  if (v7)
    v12 = v6;
  else
    v12 = 0;
  v16 = v12;
  v17 = v9;
  if (v7)
    v13 = v8 & 1;
  else
    v13 = 0;
  if (v7)
    v14 = v11;
  else
    v14 = 0;
  if (v7)
    v15 = v10;
  else
    v15 = 0;
  v18 = v15;
  v19 = v14;
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v5, v6, v8, v7);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v17, v16, v13, v7);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v17, v16, v13, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v18;
}

void ResolvedToggleStyleBody.ArchiveBody.body.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double (*v20)@<D0>(char *@<X0>, uint64_t@<X8>);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(unsigned __int8 *)(v1 + 40);
  v6 = *(void **)(v1 + 72);
  if (v6)
  {
    v7 = *(_BYTE *)(v1 + 104);
    v8 = *(_QWORD *)(v1 + 96);
    v23 = *(_QWORD *)(v1 + 88);
    v25 = *(_QWORD *)(v1 + 56);
    v26 = *(_QWORD *)(v1 + 48);
    v27 = *(_QWORD *)(v1 + 80);
    v9 = *(_QWORD *)(v1 + 64) & 1;
    outlined copy of Environment<AppIntentExecutor?>.Content(v26, v25, *(_QWORD *)(v1 + 64) & 1);
    v10 = v6;
    swift_retain();
    v22 = static Alignment.center.getter();
    v24 = v11;
    v21 = static ToggleState.allCases.getter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v28);
    v12 = v28;
    outlined copy of Environment<Bool>.Content(v8, v7);
    v13 = specialized Environment.wrappedValue.getter(v8, v7);
    outlined consume of Environment<Bool>.Content(v8, v7);
    v14 = v9;
    v15 = v25;
    v16 = v26;
    v17 = v27;
    v4 = v22;
    v18 = v23;
    v19 = v13 & 1;
    v3 = v21;
    v5 = v24;
    v20 = closure #1 in ResolvedToggleStyleBody.ArchiveBody.body.getter;
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    outlined copy of ToggleStyleConfiguration.Effect(0, 0, 0, 0);
    swift_release();
    swift_release();
    outlined consume of ToggleStyleConfiguration.Effect(0, 0, 0, 0);
    v20 = 0;
    v12 = 0;
    v16 = 0;
    v15 = 0;
    v14 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v17;
  *(_QWORD *)(a1 + 96) = v18;
  *(_BYTE *)(a1 + 104) = v19;
  *(_BYTE *)(a1 + 105) = v6 != 0;
}

double closure #1 in ResolvedToggleStyleBody.ArchiveBody.body.getter@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v10 = *a1;
  v3 = MEMORY[0x1E0CE12B8];
  static Binding.constant(_:)();
  v4 = v11;
  v5 = v12;
  v6 = v13;
  lazy protocol witness table accessor for type ToggleStateBool and conformance ToggleStateBool();
  swift_retain_n();
  swift_retain_n();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, v3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = v7;
  swift_retain();
  MEMORY[0x18D75B9C8](&v10, v8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  outlined consume of ToggleStyleConfiguration.Effect(0, 0, 0, 0);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedToggleStyleBody.ArchiveBody()
{
  uint64_t v0;
  char v1;
  BOOL v2;
  unsigned __int8 v3;

  type metadata accessor for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>(0, &lazy cache variable for type metadata for StaticSourceWriter<ToggleStyleConfiguration.Label, ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for StaticSourceWriter);
  lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if (((v3 | v2) & 1) != 0)
      return 0;
  }
  return v0;
}

uint64_t protocol witness for ConditionallyArchivableView.archivedBody.getter in conformance ResolvedToggleStyleBody@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[3];
  v6 = v1[4];
  v17 = *((_BYTE *)v1 + 40);
  v18 = *((_BYTE *)v1 + 16);
  v16 = *((_BYTE *)v1 + 41);
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (void *)v1[9];
  v11 = v1[10];
  v12 = v1[11];
  v15 = v11;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v17;
  *(_BYTE *)(a1 + 41) = v16;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = KeyPath;
  *(_BYTE *)(a1 + 104) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return outlined copy of ToggleStyleConfiguration.Effect(v7, v8, v9, v10);
}

uint64_t closure #1 in ArchivableToggleAppIntentModifier.body(content:)(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  outlined retain of ArchivableToggleAppIntentModifier(a1);
  if ((static Update.threadIsUpdating.getter() & 1) != 0)
  {
    if (v2)
    {
      dispatch thunk of AnyLocation.wasRead.setter();
LABEL_6:
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      return outlined release of ArchivableToggleAppIntentModifier(a1);
    }
  }
  else if (v2)
  {
    dispatch thunk of AnyLocation.get()();
    goto LABEL_6;
  }
  static Log.internalError(_:)();
  return outlined release of ArchivableToggleAppIntentModifier(a1);
}

uint64_t closure #2 in ArchivableToggleAppIntentModifier.body(content:)@<X0>(char a1@<W0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t result;
  char v10;
  _OWORD v11[4];
  _BYTE v12[8];
  uint64_t v13;

  v6 = a2[1];
  v11[0] = *a2;
  v11[1] = v6;
  v7 = a2[3];
  v11[2] = a2[2];
  v11[3] = v7;
  v8 = v11[0];
  outlined init with take of AnyLocation<ToggleState>?((uint64_t)v11 + 8, (uint64_t)v12);
  outlined retain of ArchivableToggleAppIntentModifier((uint64_t)a2);
  if ((static Update.threadIsUpdating.getter() & 1) != 0)
  {
    outlined init with take of AnyLocation<ToggleState>?((uint64_t)v12, (uint64_t)&v13);
    if (v13)
      dispatch thunk of AnyLocation.wasRead.setter();
    goto LABEL_6;
  }
  outlined init with take of AnyLocation<ToggleState>?((uint64_t)v12, (uint64_t)&v13);
  if (!v13)
  {
LABEL_6:
    outlined release of ArchivableToggleAppIntentModifier((uint64_t)a2);
    goto LABEL_7;
  }
  dispatch thunk of AnyLocation.get()();
  outlined release of ArchivableToggleAppIntentModifier((uint64_t)a2);
  v8 = v10;
LABEL_7:
  result = swift_getKeyPath();
  *(_BYTE *)a3 = v8;
  *(_BYTE *)(a3 + 8) = a1 & 1;
  *(_QWORD *)(a3 + 16) = result;
  *(_WORD *)(a3 + 24) = 0;
  return result;
}

uint64_t ArchivableToggleAppIntentModifier.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  char v26;

  v2 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableToggleAppIntentModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys, (uint64_t)&unk_1E1B025B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - v7;
  v9 = *(_BYTE *)v2;
  v15 = *(_OWORD *)(v2 + 8);
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(_BYTE *)(v2 + 32);
  v16 = *(_QWORD *)(v2 + 56);
  v25 = *(unsigned __int8 *)(v2 + 64);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v19 = v9;
  v20 = v15;
  v21 = v10;
  v22 = v11;
  v23 = *(_OWORD *)(v2 + 40);
  v24 = v16;
  v26 = 0;
  lazy protocol witness table accessor for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle();
  v12 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, v5);
  v14 = v17;
  v19 = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v8, v5);
}

void ArchivableToggleAppIntentModifier.init(from:)(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _BYTE *v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;

  v27 = a2;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableToggleAppIntentModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys, (uint64_t)&unk_1E1B025B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v20 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10 = v6;
    v36 = 0;
    lazy protocol witness table accessor for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v28;
    v12 = v29;
    v11 = v30;
    v13 = v31;
    v14 = v32;
    v26 = v33;
    v15 = v34;
    v35 = v32;
    v28 = 1;
    swift_retain();
    v23 = v13;
    v24 = v11;
    outlined copy of Environment<AppIntentExecutor?>.Content(v11, v13, v14);
    v22 = (id)v26;
    v25 = v15;
    swift_retain();
    LOBYTE(v15) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
    v16 = v27;
    *v27 = v21;
    v18 = v23;
    v17 = v24;
    *((_QWORD *)v16 + 1) = v12;
    *((_QWORD *)v16 + 2) = v17;
    *((_QWORD *)v16 + 3) = v18;
    v16[32] = v14;
    *(_OWORD *)(v16 + 40) = v26;
    *((_QWORD *)v16 + 7) = v25;
    v16[64] = v15 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v19 = v35;
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
    swift_release();

  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableToggleAppIntentModifier.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C62616E457369;
  else
    return 0x7453656C67676F74;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableToggleAppIntentModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ArchivableToggleAppIntentModifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableToggleAppIntentModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableToggleAppIntentModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableToggleAppIntentModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t KeyPath;
  char v12;
  _OWORD v14[4];
  char v15;

  v3 = *(_OWORD *)(v1 + 48);
  v14[2] = *(_OWORD *)(v1 + 32);
  v14[3] = v3;
  v15 = *(_BYTE *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  v14[1] = v4;
  v5 = swift_allocObject();
  v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(_BYTE *)(v5 + 80) = *(_BYTE *)(v1 + 64);
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  v8 = swift_allocObject();
  v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v8 + 64) = v9;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v1 + 64);
  v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 32) = v10;
  KeyPath = swift_getKeyPath();
  v12 = v15;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = partial apply for closure #1 in ArchivableToggleAppIntentModifier.body(content:);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = partial apply for closure #2 in ArchivableToggleAppIntentModifier.body(content:);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 72) = 2;
  *(_BYTE *)(a1 + 74) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = KeyPath;
  *(_BYTE *)(a1 + 96) = v12;
  outlined retain of ArchivableToggleAppIntentModifier((uint64_t)v14);
  return outlined retain of ArchivableToggleAppIntentModifier((uint64_t)v14);
}

void protocol witness for Decodable.init(from:) in conformance ArchivableToggleAppIntentModifier(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  ArchivableToggleAppIntentModifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableToggleAppIntentModifier(_QWORD *a1)
{
  return ArchivableToggleAppIntentModifier.encode(to:)(a1);
}

unint64_t implicit closure #1 in ArchivableAppIntentToggle.wrappedValue.setter()
{
  return 0xD00000000000005ALL;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance ArchivableAppIntentToggle()
{
  return specialized static ArchivableAppIntentToggle._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t ArchivableAppIntentToggle.Box.update(property:phase:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v7;
  uint64_t *Value;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  char v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;

  v3 = *(_QWORD *)(v1 + 16);
  v22 = v3;
  if (!v3)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StoredLocation<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2A30]);
    type metadata accessor for GraphHost();
    MEMORY[0x18D75C118]();
    StoredLocation.__allocating_init(initialValue:host:signal:)();
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_BYTE *)(a1 + 32);
    v24 = *(_OWORD *)(a1 + 40);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for LocationBox<ArchivableAppIntentToggle.AppIntentLocation>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation, (uint64_t)&unk_1E1AE8798, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE11F8]);
    swift_allocObject();
    swift_retain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
    v7 = (id)v24;
    swift_retain();
    v3 = LocationBox.init(_:)();
    *(_QWORD *)(v1 + 16) = v3;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AppIntentExecutor?, (uint64_t)&type metadata for AppIntentExecutor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (uint64_t *)AGGraphGetValue();
  v21 = v9;
  v10 = *Value;
  v11 = Value[1];
  v25 = a1;
  v12 = *(_QWORD *)(v1 + 24);
  swift_beginAccess();
  v13 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  outlined copy of AppIntentExecutor?(v10);
  v23 = v10;
  outlined copy of AppIntentExecutor?(v10);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
  swift_beginAccess();
  v14 = *(_QWORD *)(v3 + 32);
  v15 = *(_QWORD *)(v3 + 40);
  LOBYTE(v10) = *(_BYTE *)(v3 + 48);
  v16 = *(void **)(v3 + 56);
  swift_retain();
  swift_retain();
  v17 = v16;
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v14, v15, v10);
  LOBYTE(v16) = StoredLocation.update()();
  swift_release();
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(v14, v15, v10);
  swift_release();

  *(_BYTE *)v25 = v26;
  swift_retain();
  swift_release();
  *(_QWORD *)(v25 + 8) = v3;
  if ((v16 & 1) == 0)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
    goto LABEL_7;
  }
  swift_beginAccess();
  v18 = StoredLocationBase.wasRead.getter();
  swift_endAccess();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
  if ((v18 & 1) == 0)
  {
LABEL_7:
    v19 = (v22 == 0) | v21;
    return v19 & 1;
  }
  v19 = 1;
  return v19 & 1;
}

uint64_t protocol witness for DynamicPropertyBox.getState<A>(type:) in conformance ArchivableAppIntentToggle.Box()
{
  return DynamicPropertyBox.getState<A>(type:)();
}

uint64_t ArchivableAppIntentToggle.AppIntentLocation.set(_:transaction:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  char v39;

  v2 = v1;
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *a1;
  v37 = v34;
  StoredLocationBase.set(_:transaction:)();
  v9 = *(_QWORD *)(v1 + 8);
  swift_beginAccess();
  v10 = *(void (**)(uint64_t))(v9 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(v1 + 40);
    swift_retain();
    v10(v11);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
  }
  static Log.archivedToggle.getter();
  v12 = *(void **)(v1 + 40);
  v38 = *(_OWORD *)(v2 + 16);
  v39 = *(_BYTE *)(v2 + 32);
  swift_retain();
  swift_retain();
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v38);
  v13 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v38);
  v14 = v13;
  swift_retain();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    v30 = v16;
    v31 = v8;
    v32 = v5;
    v33 = v4;
    v17 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v36 = v29;
    *(_DWORD *)v17 = 136315394;
    v18 = objc_msgSend(v14, sel_debugDescription);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v38);
    swift_release();
    swift_release();
    swift_release();

    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v38);
    swift_release();
    *(_WORD *)(v17 + 12) = 2080;
    if (v34)
    {
      if (v34 == 1)
      {
        v22 = 0xE300000000000000;
        v23 = 6710895;
      }
      else
      {
        v22 = 0xE500000000000000;
        v23 = 0x646578696DLL;
      }
    }
    else
    {
      v22 = 0xE200000000000000;
      v23 = 28271;
    }
    v26 = v31;
    v25 = v32;
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_186E48000, v15, (os_log_type_t)v30, "Executed LNAction %s when setting value %s.", (uint8_t *)v17, 0x16u);
    v27 = v29;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v27, -1, -1);
    MEMORY[0x18D760108](v17, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v33);
  }
  else
  {
    swift_release();
    swift_release();
    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v38);
    swift_release();
    swift_release();
    swift_release();

    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v38);
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t protocol witness for Location.wasRead.getter in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocationBase.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocationBase.wasRead.setter();
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = StoredLocationBase.wasRead.getter() & 1;
  return protocol witness for Location.wasRead.modify in conformance ArchivableAppIntentToggle.AppIntentLocation;
}

uint64_t protocol witness for Location.wasRead.modify in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocationBase.wasRead.setter();
}

uint64_t protocol witness for Location.get() in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocationBase.get()();
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance ArchivableAppIntentToggle.AppIntentLocation(unsigned __int8 *a1)
{
  return ArchivableAppIntentToggle.AppIntentLocation.set(_:transaction:)(a1);
}

uint64_t protocol witness for Location.update() in conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  return StoredLocation.update()() & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ArchivableAppIntentToggle.AppIntentLocation(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[5] == a2[5];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableAppIntentToggle.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E65746E49707061;
  else
    return 0x65756C6176;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableAppIntentToggle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ArchivableAppIntentToggle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableAppIntentToggle.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableAppIntentToggle.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ArchivableAppIntentToggle.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  char v25;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableAppIntentToggle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys, (uint64_t)&type metadata for ArchivableAppIntentToggle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v13 - v7;
  v9 = *v1;
  v10 = *((_QWORD *)v1 + 2);
  v15 = *((_QWORD *)v1 + 3);
  v16 = v10;
  v24 = v1[32];
  v17 = *(_OWORD *)(v1 + 40);
  v14 = *((_QWORD *)v1 + 7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = v9;
  v25 = 0;
  lazy protocol witness table accessor for type ToggleState and conformance ToggleState();
  v11 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    v19 = v16;
    v20 = v15;
    v21 = v24;
    v22 = v17;
    v23 = v14;
    v25 = 1;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void ArchivableAppIntentToggle.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  id v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  v19 = a2;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableAppIntentToggle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys, (uint64_t)&type metadata for ArchivableAppIntentToggle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10 = v19;
    v25 = 0;
    lazy protocol witness table accessor for type ToggleState and conformance ToggleState();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v20;
    v25 = 1;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v12 = v20;
    v13 = v21;
    v14 = v22;
    v15 = v24;
    v16 = v23;
    v18 = v23;
    *(_BYTE *)v10 = v11;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = v12;
    *(_QWORD *)(v10 + 24) = v13;
    *(_BYTE *)(v10 + 32) = v14;
    *(_OWORD *)(v10 + 40) = v16;
    *(_QWORD *)(v10 + 56) = v15;
    outlined copy of Environment<AppIntentExecutor?>.Content(v12, v13, v14);
    v17 = (id)v18;
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of Environment<AppIntentExecutor?>.Content(v12, v13, v14);
    swift_release();

  }
}

void protocol witness for Decodable.init(from:) in conformance ArchivableAppIntentToggle(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ArchivableAppIntentToggle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableAppIntentToggle(_QWORD *a1)
{
  return ArchivableAppIntentToggle.encode(to:)(a1);
}

uint64_t View.toggleStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ToggleStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for ToggleStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToggleStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for ToggleStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStyleConfiguration.Label, &type metadata for ToggleStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStyleConfiguration.Label, &type metadata for ToggleStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in ToggleStyleConfiguration.Label()
{
  return &protocol witness table for ToggleStyleConfiguration.Label;
}

uint64_t dispatch thunk of ToggleStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t outlined destroy of AppIntentAction(uint64_t a1)
{
  destroy for ArchivableButtonAppIntentModifier(a1);
  return a1;
}

ValueMetadata *type metadata accessor for ToggleStyleConfiguration()
{
  return &type metadata for ToggleStyleConfiguration;
}

ValueMetadata *type metadata accessor for ToggleStyleConfiguration.Label()
{
  return &type metadata for ToggleStyleConfiguration.Label;
}

uint64_t sub_1871875EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ToggleStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ToggleStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t destroy for ToggleStyleConfiguration.Effect(uint64_t result)
{
  void *v1;

  v1 = *(void **)(result + 24);
  if ((unint64_t)v1 >= 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ToggleStyleConfiguration.Effect(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v11;

  v4 = (void *)a2[3];
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {
    v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = *((_BYTE *)a2 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    v8 = a2[4];
    v9 = a2[5];
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    v10 = v4;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for ToggleStyleConfiguration.Effect(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v15 = *(_QWORD *)a2;
      v16 = *((_QWORD *)a2 + 1);
      v17 = *((_BYTE *)a2 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v16, v17);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_BYTE *)(a1 + 16) = v17;
      v18 = (void *)*((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v18;
      v19 = *((_QWORD *)a2 + 4);
      v20 = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 32) = v19;
      *(_QWORD *)(a1 + 40) = v20;
      v21 = v18;
      swift_retain();
      return a1;
    }
LABEL_7:
    v22 = *a2;
    v23 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v23;
    *(_OWORD *)a1 = v22;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));

    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_BYTE *)a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  outlined consume of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
  v11 = (void *)*((_QWORD *)a2 + 3);
  v12 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  v13 = v11;

  v14 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ToggleStyleConfiguration.Effect(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(void **)(a1 + 24);
  if ((unint64_t)v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));

    swift_release();
LABEL_5:
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = v5;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleStyleConfiguration.Effect(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ToggleStyleConfiguration.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

double destructiveInjectEnumTag for ToggleStyleConfiguration.Effect(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToggleStyleConfiguration.Effect()
{
  return &type metadata for ToggleStyleConfiguration.Effect;
}

ValueMetadata *type metadata accessor for ToggleStateBool()
{
  return &type metadata for ToggleStateBool;
}

ValueMetadata *type metadata accessor for ResolvedToggleStyle()
{
  return &type metadata for ResolvedToggleStyle;
}

uint64_t getEnumTagSinglePayload for ToggleStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187187ABC + 4 * byte_187C0FB00[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ToggleStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ToggleStyleModifier<A>()
{
  return &protocol witness table for ToggleStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ToggleStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ToggleStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  __int128 v22;
  uint64_t AssociatedConformanceWitness;
  void (*v24)(char *, uint64_t);
  _QWORD v26[2];
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v26 - v14;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_BYTE *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 40);
  v21 = *(_BYTE *)(a1 + 41);
  v26[0] = *(_QWORD *)a1;
  v26[1] = v16;
  v27 = v17;
  v28 = v18;
  v29 = v19;
  v30 = v20;
  v31 = v21;
  v22 = *(_OWORD *)(a1 + 64);
  v32 = *(_OWORD *)(a1 + 48);
  v33 = v22;
  v34 = *(_OWORD *)(a1 + 80);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 24))(v26, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v24)(v15, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for ToggleStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ToggleStyleModifier<DefaultToggleStyle> and conformance ToggleStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToggleStyleModifier<DefaultToggleStyle> and conformance ToggleStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ToggleStyleModifier<DefaultToggleStyle> and conformance ToggleStyleModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<DefaultToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultToggleStyle and conformance DefaultToggleStyle, (uint64_t)&type metadata for DefaultToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStyleModifier<DefaultToggleStyle> and conformance ToggleStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultToggleStyle and conformance DefaultToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultToggleStyle and conformance DefaultToggleStyle;
  if (!lazy protocol witness table cache variable for type DefaultToggleStyle and conformance DefaultToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultToggleStyle, &type metadata for DefaultToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultToggleStyle and conformance DefaultToggleStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedToggleStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedToggleStyle, &type metadata for ResolvedToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedToggleStyle, &type metadata for ResolvedToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToggleStateBool and conformance ToggleStateBool()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool;
  if (!lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStateBool, &type metadata for ToggleStateBool);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool;
  if (!lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStateBool, &type metadata for ToggleStateBool);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool;
  if (!lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToggleStateBool, &type metadata for ToggleStateBool);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool);
  }
  return result;
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in ResolvedToggleStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ResolvedToggleStyleBody(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedToggleStyleBody, &type metadata for ResolvedToggleStyleBody);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedToggleStyleBody, &type metadata for ResolvedToggleStyleBody);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedToggleStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized AccessibilityToggleModifier.body(content:)@<X0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  int8x16_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int8 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[3];
  _OWORD v41[3];
  int8x16_t v42;
  __int128 v43;
  int8x16_t v44;
  __int128 v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  _BYTE v49[32];
  __int128 v50[3];
  __int128 v51[4];

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 24);
  v36 = *(_BYTE *)(a1 + 40);
  v37 = *(_BYTE *)(a1 + 16);
  v35 = *(_BYTE *)(a1 + 41);
  v33 = *(_QWORD *)(a1 + 48);
  v34 = *(_QWORD *)(a1 + 8);
  v31 = *(_QWORD *)(a1 + 64);
  v32 = *(_QWORD *)(a1 + 56);
  v29 = *(_QWORD *)(a1 + 80);
  v30 = *(void **)(a1 + 72);
  v38 = *(_QWORD *)(a1 + 32);
  v39 = *(_QWORD *)(a1 + 88);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = 12;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  v42.i64[0] = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v7 = v48.i64[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v48.i64[0];
  *(_QWORD *)(v8 + 24) = v7;
  outlined retain of ToggleStyleConfiguration((_QWORD *)a1);
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityTraitSet>, MEMORY[0x1E0CE4FF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  swift_allocObject();
  AccessibilityTraitSet.init(traits:)();
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v8 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v8 + 16, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  v9 = v2[2];
  v10 = (__int128)v2[4];
  v50[0] = (__int128)v2[3];
  v50[1] = v10;
  v11 = v2[4];
  v50[2] = (__int128)v2[5];
  v12 = *v2;
  v13 = v2[2];
  *(int8x16_t *)v49 = v2[1];
  *(int8x16_t *)&v49[16] = v13;
  v14 = *v2;
  v45 = v50[0];
  v46 = v11;
  v47 = v2[5];
  v48 = v14;
  v42 = v12;
  v43 = *(_OWORD *)v49;
  v44 = v9;
  ToggleStyleConfiguration.accessibilityActions.getter();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  v15 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v15);
  swift_bridgeObjectRelease();
  v16 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v16);
  *(_QWORD *)&v51[0] = specialized AccessibilityProperties.subscript.getter(*(_QWORD *)(v8 + 16));
  v17 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v17);
  specialized AccessibilityProperties.subscript.setter(*(uint64_t *)&v51[0]);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v8 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  v42 = *(int8x16_t *)&v49[8];
  LOBYTE(v43) = v49[24];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v51);
  if (LOBYTE(v51[0]))
    v18 = 2 * (LOBYTE(v51[0]) != 1);
  else
    v18 = 1;
  LOBYTE(v51[0]) = v18;
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  AccessibilityValueStorage.init<A>(_:description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)&v42, (uint64_t)v51);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  v19 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v19, v41);
  swift_bridgeObjectRelease();
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v51, (uint64_t)v40);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v40);
  specialized AccessibilityProperties.subscript.getter(*(_QWORD *)(v8 + 16), v40);
  specialized Optional<A>.merge(with:)((uint64_t)v41);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v40);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v41);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v33, v32, v31, v30);
  swift_retain();
  swift_retain();
  outlined destroy of AccessibilityValueStorage?((uint64_t)v51);
  outlined destroy of AccessibilityValueStorage((uint64_t)&v42);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v33, v32, v31, v30);
  swift_release();
  swift_release();
  outlined init with take of ToggleStyleConfiguration.Effect(v50, v51);
  outlined init with take of ToggleStyleConfiguration.Effect(v51, &v42);
  v21.i64[0] = 0;
  v22 = *((_QWORD *)&v43 + 1);
  v23 = v43;
  if (!*((_QWORD *)&v43 + 1))
    v23 = 0;
  a2[8].i64[0] = v23;
  a2[8].i64[1] = v22;
  v20.i64[0] = v22;
  v24 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v20, v21)).i64[0], 0);
  v25 = vandq_s8(v44, v24);
  v26 = vandq_s8(v42, v24);
  a2->i64[0] = v4;
  a2->i64[1] = v34;
  a2[1].i8[0] = v37 & 1;
  a2[1].i64[1] = v5;
  a2[2].i64[0] = v38;
  a2[2].i8[8] = v36;
  a2[2].i8[9] = v35 & 1;
  a2[3].i64[0] = v33;
  a2[3].i64[1] = v32;
  a2[4].i64[0] = v31;
  a2[4].i64[1] = (uint64_t)v30;
  a2[5].i64[0] = v29;
  a2[5].i64[1] = v39;
  a2[6].i64[0] = v8;
  a2[6].i64[1] = v6;
  a2[7] = v26;
  a2[9] = v25;
  a2[10].i64[0] = v4;
  a2[10].i64[1] = v34;
  a2[11].i8[0] = v37 & 1;
  a2[11].i64[1] = v5;
  a2[12].i64[0] = v38;
  a2[12].i8[8] = v36;
  a2[12].i8[9] = v35 & 1;
  a2[13].i64[0] = v33;
  a2[13].i64[1] = v32;
  a2[14].i64[0] = v31;
  a2[14].i64[1] = (uint64_t)v30;
  a2[15].i64[0] = v29;
  a2[15].i64[1] = v39;
  a2[16].i64[0] = v8;
  a2[16].i64[1] = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v33, v32, v31, v30);
  swift_retain();
  swift_retain();
  return outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v51);
}

uint64_t sub_187188808()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.platformItemToggleState(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.platformItemToggleState(_:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_187188820()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));

    swift_release();
  }
  return swift_deallocObject();
}

_QWORD *partial apply for closure #2 in ResolvedToggleStyle.body.getter()
{
  uint64_t v0;

  return closure #2 in ResolvedToggleStyle.body.getter((_QWORD *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5C10], MEMORY[0x1E0CE5C00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5C08], MEMORY[0x1E0CE5C00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5BF8], MEMORY[0x1E0CE5C00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

uint64_t outlined init with copy of AccessibilityValueStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *outlined init with take of ToggleStyleConfiguration.Effect(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t outlined retain of ToggleStyleConfiguration.Effect(uint64_t a1)
{
  outlined copy of ToggleStyleConfiguration.Effect(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24));
  return a1;
}

unint64_t lazy protocol witness table accessor for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle.CodingKeys, &type metadata for ArchivableAppIntentToggle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle.CodingKeys, &type metadata for ArchivableAppIntentToggle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle.CodingKeys, &type metadata for ArchivableAppIntentToggle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle.CodingKeys, &type metadata for ArchivableAppIntentToggle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.CodingKeys and conformance ArchivableAppIntentToggle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToggleState and conformance ToggleState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE12D0], MEMORY[0x1E0CE12B8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE12C0], MEMORY[0x1E0CE12B8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE12C8], MEMORY[0x1E0CE12B8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

uint64_t initializeWithCopy for ArchivableToggleAppIntentModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  id v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v9 = (id)v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableToggleAppIntentModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  v10 = *(void **)(a2 + 40);
  v11 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  v12 = v10;

  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v13;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ArchivableToggleAppIntentModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  v8 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableToggleAppIntentModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableToggleAppIntentModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableToggleAppIntentModifier()
{
  return &type metadata for ArchivableToggleAppIntentModifier;
}

ValueMetadata *type metadata accessor for ArchivableAppIntentToggle.CodingKeys()
{
  return &type metadata for ArchivableAppIntentToggle.CodingKeys;
}

uint64_t destroy for ToggleStyleConfiguration(uint64_t a1)
{
  uint64_t result;
  void *v3;

  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ToggleStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v6 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_BYTE *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 64) = v9;
    v10 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    v12 = v6;
    swift_retain();
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  return a1;
}

uint64_t assignWithCopy for ToggleStyleConfiguration(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = (_OWORD *)(a1 + 48);
  v5 = (_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 48);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(_BYTE *)(a2 + 64);
      outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_BYTE *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      *(_BYTE *)(a1 + 64) = v9;
      outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
      v13 = *(void **)(a2 + 72);
      v14 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v13;
      v15 = v13;

      v16 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v16;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 48);
      v25 = *(_OWORD *)(a2 + 64);
      v24 = *(_OWORD *)(a2 + 80);
      *v4 = *v5;
      *(_OWORD *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 80) = v24;
    }
  }
  else if (v6)
  {
    v17 = *(_QWORD *)(a2 + 48);
    v18 = *(_QWORD *)(a2 + 56);
    v19 = *(_BYTE *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v18;
    *(_BYTE *)(a1 + 64) = v19;
    v20 = *(void **)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v20;
    v21 = *(_QWORD *)(a2 + 80);
    v22 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v21;
    *(_QWORD *)(a1 + 88) = v22;
    v23 = v20;
    swift_retain();
  }
  else
  {
    v26 = *v5;
    v27 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v27;
    *v4 = v26;
  }
  return a1;
}

uint64_t assignWithTake for ToggleStyleConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = *(void **)(a1 + 72);
  if (!v4)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 72);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 48);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    return a1;
  }
  v6 = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(_QWORD *)(a1 + 72) = v5;

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleStyleConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToggleStyleConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedToggleStyleBody()
{
  return &type metadata for ResolvedToggleStyleBody;
}

uint64_t destroy for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1)
{
  void *v2;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));

    swift_release();
  }
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
}

uint64_t initializeWithCopy for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v6 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_BYTE *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 64) = v9;
    v10 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    v12 = v6;
    swift_retain();
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v14, v15);
  *(_QWORD *)(a1 + 96) = v14;
  *(_BYTE *)(a1 + 104) = v15;
  return a1;
}

uint64_t assignWithCopy for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = (_OWORD *)(a1 + 48);
  v5 = (_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 48);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(_BYTE *)(a2 + 64);
      outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_BYTE *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      *(_BYTE *)(a1 + 64) = v9;
      outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
      v13 = *(void **)(a2 + 72);
      v14 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v13;
      v15 = v13;

      v16 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v16;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 48);
      v24 = *(_OWORD *)(a2 + 64);
      v23 = *(_OWORD *)(a2 + 80);
      *v4 = *v5;
      *(_OWORD *)(a1 + 64) = v24;
      *(_OWORD *)(a1 + 80) = v23;
    }
  }
  else if (v6)
  {
    v17 = *(_QWORD *)(a2 + 48);
    v18 = *(_QWORD *)(a2 + 56);
    v19 = *(_BYTE *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v18;
    *(_BYTE *)(a1 + 64) = v19;
    v20 = *(void **)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v20;
    v21 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v21;
    v22 = v20;
    swift_retain();
  }
  else
  {
    v25 = *v5;
    v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v26;
    *v4 = v25;
  }
  v27 = *(_QWORD *)(a2 + 96);
  v28 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v27, v28);
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v27;
  *(_BYTE *)(a1 + 104) = v28;
  outlined consume of Environment<Bool>.Content(v29, v30);
  return a1;
}

uint64_t assignWithTake for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  char v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = *(void **)(a1 + 72);
  if (!v4)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 72);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 48);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_6;
  }
  v6 = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(_QWORD *)(a1 + 72) = v5;

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
LABEL_6:
  v11 = *(_BYTE *)(a2 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedToggleStyleBody.ArchiveBody(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedToggleStyleBody.ArchiveBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for ResolvedToggleStyleBody.ArchiveBody()
{
  return &unk_1E1AE2790;
}

uint64_t destroy for ArchivableToggleAppIntentModifier(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));

  return swift_release();
}

uint64_t initializeWithCopy for ArchivableAppIntentToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  id v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v9 = (id)v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableAppIntentToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  v10 = *(void **)(a2 + 40);
  v11 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  v12 = v10;

  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ArchivableAppIntentToggle(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  v8 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ArchivableAppIntentToggle()
{
  return &type metadata for ArchivableAppIntentToggle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for PlatformItemListTransformModifier<A>);
    v3[1] = &protocol witness table for KeyboardShortcutBindingBehavior<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(255, &lazy cache variable for type metadata for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a4, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, a5);
    v8 = type metadata accessor for ModifiedContent();
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedToggleStyleBody, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedToggleStyleBody, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody, (uint64_t)&type metadata for ResolvedToggleStyleBody, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for AccessibilityToggleModifier.RepresentationModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>);
  }
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(255, &lazy cache variable for type metadata for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>();
    v3[1] = &protocol witness table for AccessibilityLargeContentViewModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedToggleStyleBody, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>)
  {
    type metadata accessor for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody, (uint64_t)&type metadata for ResolvedToggleStyleBody, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for AccessibilityToggleModifier.RepresentationModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityToggleModifier<A>.RepresentationModifier<A1>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>;
  if (!lazy protocol witness table cache variable for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Toggle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Toggle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, (uint64_t)&unk_1E1AE2790, (uint64_t)&type metadata for ArchivesInteractiveControlsEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, (uint64_t)&unk_1E1AE2790, (uint64_t)&type metadata for ArchivesInteractiveControlsEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody();
    v3[1] = &protocol witness table for ArchivesInteractiveControlsEffect;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedToggleStyleBody.ArchiveBody, &unk_1E1AE2790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody);
  }
  return result;
}

uint64_t sub_18718A0D4()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedToggleStyleBody.ArchiveBody()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ArchivableToggleAppIntentModifier(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
  a1[2] = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
  result = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableToggleAppIntentModifier, &type metadata for ArchivableToggleAppIntentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableToggleAppIntentModifier, &type metadata for ArchivableToggleAppIntentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableToggleAppIntentModifier, &type metadata for ArchivableToggleAppIntentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableToggleAppIntentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized ArchivableToggleAppIntentModifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7453656C67676F74 && a2 == 0xEB00000000657461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C62616E457369 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized static ArchivableAppIntentToggle._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  uint64_t v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  AGCreateWeakAttribute();
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for MutableBox<AppIntentExecutor?>();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  lazy protocol witness table accessor for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  return swift_release();
}

uint64_t specialized ArchivableAppIntentToggle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65746E49707061 && a2 == 0xEF6E6F6974634174)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableToggleAppIntentModifier.CodingKeys, &unk_1E1B025B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableToggleAppIntentModifier.CodingKeys, &unk_1E1B025B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableToggleAppIntentModifier.CodingKeys, &unk_1E1B025B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableToggleAppIntentModifier.CodingKeys, &unk_1E1B025B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableToggleAppIntentModifier.CodingKeys and conformance ArchivableToggleAppIntentModifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle, &type metadata for ArchivableAppIntentToggle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle, &type metadata for ArchivableAppIntentToggle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle and conformance ArchivableAppIntentToggle);
  }
  return result;
}

uint64_t partial apply for closure #1 in ArchivableToggleAppIntentModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in ArchivableToggleAppIntentModifier.body(content:)(v0 + 16);
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;

  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ArchivableToggleAppIntentModifier.body(content:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in ArchivableToggleAppIntentModifier.body(content:)(a1, (_OWORD *)(v2 + 16), a2);
}

uint64_t outlined retain of ArchivableToggleAppIntentModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  v6 = v5;
  swift_retain();
  return a1;
}

uint64_t outlined init with take of AnyLocation<ToggleState>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyLocation<ToggleState>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyLocation<ToggleState>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyLocation<ToggleState>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AnyLocation<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0EF8]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyLocation<ToggleState>?);
  }
}

uint64_t outlined release of ArchivableToggleAppIntentModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  swift_release();

  return a1;
}

void type metadata accessor for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *))
{
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  if (!*a2)
  {
    v10[0] = a4;
    v10[1] = &type metadata for ToggleStyleConfiguration.Label;
    v10[2] = a3();
    v10[3] = &protocol witness table for ToggleStyleConfiguration.Label;
    v8 = a5(a1, v10);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t type metadata accessor for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>;
  if (!lazy cache variable for type metadata for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [ToggleState], MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Toggle);
    lazy protocol witness table accessor for type [ToggleState] and conformance [A]();
    lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    lazy protocol witness table accessor for type ToggleState and conformance ToggleState();
    type metadata accessor for TemporalStack();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ToggleState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ToggleState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToggleState] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [ToggleState], MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToggleState] and conformance [A]);
  }
  return result;
}

void type metadata accessor for MutableBox<AppIntentExecutor?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MutableBox<AppIntentExecutor?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AppIntentExecutor?, (uint64_t)&type metadata for AppIntentExecutor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for MutableBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AppIntentExecutor?>);
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle.Box, &unk_1E1AE88B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.Box and conformance ArchivableAppIntentToggle.Box);
  }
  return result;
}

uint64_t initializeWithCopy for ArchivableAppIntentToggle.Box(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableAppIntentToggle.Box(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ArchivableAppIntentToggle.Box(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableAppIntentToggle.Box(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableAppIntentToggle.Box(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for ArchivableAppIntentToggle.Box()
{
  return &unk_1E1AE88B0;
}

uint64_t storeEnumTagSinglePayload for ArchivableAppIntentToggle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18718AEBC + 4 * byte_187C0FB13[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18718AEF0 + 4 * byte_187C0FB0E[v4]))();
}

uint64_t sub_18718AEF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18718AEF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18718AF00);
  return result;
}

uint64_t sub_18718AF0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18718AF14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18718AF18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18718AF20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ArchivableToggleAppIntentModifier.CodingKeys()
{
  return &unk_1E1B025B0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>, _EnvironmentKeyWritingModifier<Bool>>);
  }
}

void type metadata accessor for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _ContentShapeModifier<A>);
    v6 = type metadata accessor for ButtonBehavior(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableToggleAppIntentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier, (uint64_t)&type metadata for ArchivableToggleAppIntentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TemporalStateViewModifier<ToggleState>, MEMORY[0x1E0CE12B8], MEMORY[0x1E0CE12A8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TemporalStateViewModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for TemporalStateViewModifier<A>);
    v3[1] = lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableToggleAppIntentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier, (uint64_t)&type metadata for ArchivableToggleAppIntentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableToggleAppIntentModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>;
  if (!lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>)
  {
    type metadata accessor for ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBehavior<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance ButtonBehavior<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>, (void (*)(uint64_t))type metadata accessor for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<Toggle<ToggleStyleConfiguration.Label>, ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier>, (void (*)(uint64_t))type metadata accessor for TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>);
    v2 = v1;
    v3[0] = &protocol witness table for TemporalStack<A, B>;
    v3[1] = lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TemporalStack<[ToggleState], Toggle<ToggleStyleConfiguration.Label>>, ArchivableToggleAppIntentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in ArchivableAppIntentToggle.Box()
{
  return &protocol witness table for ArchivableAppIntentToggle;
}

unint64_t lazy protocol witness table accessor for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle.AppIntentLocation, &unk_1E1AE8798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation;
  if (!lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAppIntentToggle.AppIntentLocation, &unk_1E1AE8798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAppIntentToggle.AppIntentLocation and conformance ArchivableAppIntentToggle.AppIntentLocation);
  }
  return result;
}

uint64_t destroy for ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));

  return swift_release();
}

uint64_t initializeWithCopy for ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  id v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_retain();
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = (id)v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  v10 = *(void **)(a2 + 40);
  v11 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  v12 = v10;

  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ArchivableAppIntentToggle.AppIntentLocation(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  v8 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  swift_release();
  return a1;
}

void *type metadata accessor for ArchivableAppIntentToggle.AppIntentLocation()
{
  return &unk_1E1AE8798;
}

uint64_t outlined retain of Environment<AppIntentExecutor?>(uint64_t a1)
{
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined release of Environment<AppIntentExecutor?>(uint64_t a1)
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t protocol witness for StepperStyle.makeBody(configuration:) in conformance SegmentedButtonStepperStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v6 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  *(_QWORD *)a2 = *a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v7;
  *(_WORD *)(a2 + 56) = 257;
  *(_BYTE *)(a2 + 58) = 2;
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  outlined copy of AppIntentExecutor?(v4);
  return swift_retain();
}

uint64_t UIKitStepper.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 40);
  v6 = *v2;
  v5 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  v9 = v2[6];
  v16 = v2[4];
  v17 = v2[5];
  objc_msgSend(a1, sel_setValue_, 0.0);
  v10 = -2.0;
  if (!v8)
    v10 = 0.0;
  objc_msgSend(a1, sel_setMinimumValue_, v10);
  v11 = 2.0;
  if (!v5)
    v11 = 0.0;
  objc_msgSend(a1, sel_setMaximumValue_, v11);
  objc_msgSend(a1, sel_setStepValue_, 1.0);
  v12 = (_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration);
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8);
  v14 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 24);
  *v12 = v6;
  v12[1] = v5;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = v16;
  v12[5] = v17;
  v12[6] = v9;
  swift_retain();
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v8);
  swift_retain();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
  return swift_release();
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitStepper(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CF0]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_valueChanged_, 4096);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingBegan_, 1);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingEnded_, 448);
  return v2;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitStepper@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  char *v12;
  id result;
  objc_super v14;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = (objc_class *)type metadata accessor for Coordinator();
  v11 = (char *)objc_allocWithZone(v10);
  v12 = &v11[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration];
  *(_QWORD *)v12 = v3;
  *((_QWORD *)v12 + 1) = v4;
  *((_QWORD *)v12 + 2) = v5;
  *((_QWORD *)v12 + 3) = v6;
  *((_QWORD *)v12 + 4) = v7;
  *((_QWORD *)v12 + 5) = v8;
  *((_QWORD *)v12 + 6) = v9;
  swift_retain();
  outlined copy of AppIntentExecutor?(v4);
  outlined copy of AppIntentExecutor?(v6);
  v14.receiver = v11;
  v14.super_class = v10;
  swift_retain();
  result = objc_msgSendSuper2(&v14, sel_init);
  *a1 = result;
  return result;
}

id Coordinator.valueChanged(_:)(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  v3 = objc_msgSend(a1, sel_value);
  if (v5 > 0.0)
  {
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8);
    if (v6)
    {
      MEMORY[0x1E0C80A78](v3, v4);
      swift_retain();
      static Update.dispatchImmediately<A>(_:)();
      v7 = v6;
LABEL_7:
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
      return objc_msgSend(a1, sel_setValue_, 0.0);
    }
  }
  v8 = objc_msgSend(a1, sel_value);
  if (v10 < 0.0)
  {
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 24);
    if (v11)
    {
      MEMORY[0x1E0C80A78](v8, v9);
      swift_retain();
      static Update.dispatchImmediately<A>(_:)();
      v7 = v11;
      goto LABEL_7;
    }
  }
  return objc_msgSend(a1, sel_setValue_, 0.0);
}

uint64_t partial apply for closure #1 in Coordinator.editingEnded(_:)()
{
  return partial apply for closure #1 in Coordinator.editingEnded(_:)(0);
}

{
  return partial apply for closure #1 in Coordinator.valueChanged(_:)(0);
}

uint64_t partial apply for closure #1 in Coordinator.editingBegan(_:)()
{
  return partial apply for closure #1 in Coordinator.editingEnded(_:)(1);
}

uint64_t partial apply for closure #1 in Coordinator.editingEnded(_:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)(v1 + 16)
                                      + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration
                                      + 40);
  swift_retain();
  v3(a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for SegmentedButtonStepperStyle()
{
  return &type metadata for SegmentedButtonStepperStyle;
}

uint64_t associated type witness table accessor for StepperStyle.Body : View in SegmentedButtonStepperStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for UIKitStepper(uint64_t a1)
{
  swift_release();
  if (*(_QWORD *)(a1 + 8))
    swift_release();
  if (*(_QWORD *)(a1 + 24))
    swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for UIKitStepper(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = a2 + 1;
  v4 = a2[1];
  swift_retain();
  if (v4)
  {
    v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v5;
  }
  v7 = a2[3];
  if (v7)
  {
    v8 = a2[4];
    a1[3] = v7;
    a1[4] = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  }
  v9 = a2[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for UIKitStepper(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      v5 = a2[2];
      a1[1] = v4;
      a1[2] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  v7 = a2[3];
  if (!a1[3])
  {
    if (v7)
    {
      v9 = a2[4];
      a1[3] = v7;
      a1[4] = v9;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[4];
  a1[3] = v7;
  a1[4] = v8;
  swift_retain();
  swift_release();
LABEL_15:
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UIKitStepper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  v7 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v9;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  swift_release();
LABEL_15:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitStepper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitStepper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitStepper()
{
  return &type metadata for UIKitStepper;
}

uint64_t sub_18718C370()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, lazy protocol witness table accessor for type ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>();
    type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
  }
}

void type metadata accessor for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>)
  {
    type metadata accessor for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>(255);
    type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout, (uint64_t)&type metadata for ListLabeledContentPrefersHorizontalLayout);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>);
  }
}

void type metadata accessor for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>)
  {
    type metadata accessor for ModifiedContent<UIKitStepper, _FixedSizeLayout>();
    v4 = type metadata accessor for LabeledContent(a1, (uint64_t)&type metadata for StepperStyleConfiguration.Label, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>);
  }
}

void type metadata accessor for ModifiedContent<UIKitStepper, _FixedSizeLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<UIKitStepper, _FixedSizeLayout>)
  {
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<UIKitStepper, _FixedSizeLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListLabeledContentPrefersHorizontalLayout, &type metadata for ListLabeledContentPrefersHorizontalLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListLabeledContentPrefersHorizontalLayout, &type metadata for ListLabeledContentPrefersHorizontalLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListLabeledContentPrefersHorizontalLayout, &type metadata for ListLabeledContentPrefersHorizontalLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListLabeledContentPrefersHorizontalLayout, &type metadata for ListLabeledContentPrefersHorizontalLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListLabeledContentPrefersHorizontalLayout, &type metadata for ListLabeledContentPrefersHorizontalLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ViewInputFlagModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>, ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>>(255);
    v2 = v1;
    v3[0] = &protocol witness table for StepperStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<StepperStyleConfiguration.Label, ModifiedContent<UIKitStepper, _FixedSizeLayout>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitStepper, _FixedSizeLayout>();
    v2[0] = &protocol witness table for UIKitStepper;
    v2[1] = MEMORY[0x1E0CE35C0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitStepper, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t protocol witness for _ScrollableContentProvider.root(scrollView:) in conformance _ScrollableLayoutView<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return _ScrollableContentProvider.root(scrollView:)(a1, a2, a3, a4, a5);
}

uint64_t _ScrollableContentProvider.root(scrollView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = type metadata accessor for _ScrollView.Main(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v14 - v11, a1, v7, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a5, v12, v7);
}

uint64_t one-time initialization function for indicatorColor()
{
  uint64_t result;

  result = Color.init(_:white:opacity:)();
  indicatorColor = result;
  return result;
}

uint64_t _ScrollViewRoot.body.getter(uint64_t a1)
{
  uint64_t v2;

  static Alignment.center.getter();
  type metadata accessor for _ScrollView.Main(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  lazy protocol witness table accessor for type _ScrollOverlayView and conformance _ScrollOverlayView();
  return View.overlayPreferenceValue<A, B>(_:alignment:_:)();
}

uint64_t closure #1 in _ScrollViewRoot.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;

  result = *(_QWORD *)a1;
  if (result)
  {
    v4 = *(_DWORD *)(a1 + 8);
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v4;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ScrollOverlayView and conformance _ScrollOverlayView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ScrollOverlayView and conformance _ScrollOverlayView;
  if (!lazy protocol witness table cache variable for type _ScrollOverlayView and conformance _ScrollOverlayView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollOverlayView, &unk_1E1ACCC08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScrollOverlayView and conformance _ScrollOverlayView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in _ScrollViewRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for _ScrollView(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ScrollViewRoot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 168 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    v16 = *(_BYTE *)(v11 + 32);
    outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)v11, v13, v14, v15, v16);
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
    *(_QWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 24) = v15;
    *(_BYTE *)(v10 + 32) = v16;
    v17 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    *(_OWORD *)(v10 + 40) = v17;
    *(_QWORD *)(v10 + 72) = *(_QWORD *)(v11 + 72);
    *(_BYTE *)(v10 + 80) = *(_BYTE *)(v11 + 80);
    *(_BYTE *)(v10 + 81) = *(_BYTE *)(v11 + 81);
    v18 = *(_QWORD *)(v11 + 112);
    *(_QWORD *)(v10 + 112) = v18;
    *(_QWORD *)(v10 + 120) = *(_QWORD *)(v11 + 120);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(v10 + 88, v11 + 88);
    *(_BYTE *)(v10 + 128) = *(_BYTE *)(v11 + 128);
    *(_BYTE *)(v10 + 129) = *(_BYTE *)(v11 + 129);
    *(_BYTE *)(v10 + 130) = *(_BYTE *)(v11 + 130);
    *(_BYTE *)(v10 + 131) = *(_BYTE *)(v11 + 131);
    v19 = *(_OWORD *)(v11 + 136);
    *(_OWORD *)(v10 + 152) = *(_OWORD *)(v11 + 152);
    *(_OWORD *)(v10 + 136) = v19;
  }
  return v4;
}

uint64_t outlined copy of _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t destroy for _ScrollViewRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of _ScrollViewConfig.ContentOffset(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_BYTE *)(v4 + 32));
  return __swift_destroy_boxed_opaque_existential_1(v4 + 88);
}

uint64_t outlined consume of _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_BYTE *)(v8 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)v8, v10, v11, v12, v13);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  *(_BYTE *)(v7 + 32) = v13;
  v14 = *(_OWORD *)(v8 + 40);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  *(_OWORD *)(v7 + 40) = v14;
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
  *(_BYTE *)(v7 + 81) = *(_BYTE *)(v8 + 81);
  v15 = *(_QWORD *)(v8 + 112);
  *(_QWORD *)(v7 + 112) = v15;
  *(_QWORD *)(v7 + 120) = *(_QWORD *)(v8 + 120);
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v7 + 88, v8 + 88);
  *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
  *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
  *(_BYTE *)(v7 + 130) = *(_BYTE *)(v8 + 130);
  *(_BYTE *)(v7 + 131) = *(_BYTE *)(v8 + 131);
  v16 = *(_OWORD *)(v8 + 136);
  *(_OWORD *)(v7 + 152) = *(_OWORD *)(v8 + 152);
  *(_OWORD *)(v7 + 136) = v16;
  return a1;
}

uint64_t assignWithCopy for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_BYTE *)(v8 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)v8, v10, v11, v12, v13);
  v14 = *(_QWORD *)v7;
  v15 = *(_QWORD *)(v7 + 8);
  v16 = *(_QWORD *)(v7 + 16);
  v17 = *(_QWORD *)(v7 + 24);
  v18 = *(_BYTE *)(v7 + 32);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  *(_BYTE *)(v7 + 32) = v13;
  outlined consume of _ScrollViewConfig.ContentOffset(v14, v15, v16, v17, v18);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
  *(_BYTE *)(v7 + 81) = *(_BYTE *)(v8 + 81);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v7 + 88), (uint64_t *)(v8 + 88));
  *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
  *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
  *(_BYTE *)(v7 + 130) = *(_BYTE *)(v8 + 130);
  *(_BYTE *)(v7 + 131) = *(_BYTE *)(v8 + 131);
  *(_QWORD *)(v7 + 136) = *(_QWORD *)(v8 + 136);
  *(_QWORD *)(v7 + 144) = *(_QWORD *)(v8 + 144);
  *(_QWORD *)(v7 + 152) = *(_QWORD *)(v8 + 152);
  *(_QWORD *)(v7 + 160) = *(_QWORD *)(v8 + 160);
  return a1;
}

uint64_t initializeWithTake for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  v11 = *(_OWORD *)(v8 + 96);
  v13 = *(_OWORD *)(v8 + 48);
  v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  v15 = *(_OWORD *)(v8 + 128);
  v14 = *(_OWORD *)(v8 + 144);
  v16 = *(_OWORD *)(v8 + 112);
  *(_QWORD *)(v7 + 160) = *(_QWORD *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithTake for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_BYTE *)(v7 + 32);
  v9 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_BYTE *)(v9 + 32);
  v15 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v7;
  *(_OWORD *)(v9 + 16) = v15;
  *(_BYTE *)(v9 + 32) = v8;
  outlined consume of _ScrollViewConfig.ContentOffset(v10, v11, v12, v13, v14);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v7 + 48);
  *(_QWORD *)(v9 + 56) = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v9 + 72) = *(_QWORD *)(v7 + 72);
  *(_BYTE *)(v9 + 80) = *(_BYTE *)(v7 + 80);
  *(_BYTE *)(v9 + 81) = *(_BYTE *)(v7 + 81);
  __swift_destroy_boxed_opaque_existential_1(v9 + 88);
  v16 = *(_OWORD *)(v7 + 88);
  v17 = *(_OWORD *)(v7 + 104);
  *(_QWORD *)(v9 + 120) = *(_QWORD *)(v7 + 120);
  *(_OWORD *)(v9 + 104) = v17;
  *(_OWORD *)(v9 + 88) = v16;
  *(_BYTE *)(v9 + 128) = *(_BYTE *)(v7 + 128);
  *(_BYTE *)(v9 + 129) = *(_BYTE *)(v7 + 129);
  *(_BYTE *)(v9 + 130) = *(_BYTE *)(v7 + 130);
  *(_BYTE *)(v9 + 131) = *(_BYTE *)(v7 + 131);
  *(_QWORD *)(v9 + 136) = *(_QWORD *)(v7 + 136);
  *(_QWORD *)(v9 + 144) = *(_QWORD *)(v7 + 144);
  *(_QWORD *)(v9 + 152) = *(_QWORD *)(v7 + 152);
  *(_QWORD *)(v9 + 160) = *(_QWORD *)(v7 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScrollViewRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x70);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 168) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18718D020 + 4 * byte_187C10370[v10]))();
  }
}

void storeEnumTagSinglePayload for _ScrollViewRoot(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFF58)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFF58)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 168);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18718D198()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18718D23CLL);
}

void sub_18718D1A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18718D1A8);
  JUMPOUT(0x18718D23CLL);
}

void sub_18718D1EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18718D23CLL);
}

void sub_18718D1F4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18718D23CLL);
}

uint64_t sub_18718D1FC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x18718D208);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 112) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x18718D23CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for _ScrollViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollViewRoot);
}

uint64_t sub_18718D260(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];

  type metadata accessor for _ScrollView.Main(255, *a1, a1[1], a4);
  type metadata accessor for _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView>();
  v4 = type metadata accessor for ModifiedContent();
  v6[0] = &protocol witness table for _ScrollView<A>.Main;
  v6[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView> and conformance _OverlayPreferenceModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView>, MEMORY[0x1E0CE60D0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
}

void type metadata accessor for _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView>)
  {
    lazy protocol witness table accessor for type _ScrollOverlayView and conformance _ScrollOverlayView();
    v0 = type metadata accessor for _OverlayPreferenceModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayPreferenceModifier<_ContainedScrollViewKey, _ScrollOverlayView>);
  }
}

void *type metadata accessor for _ScrollOverlayView()
{
  return &unk_1E1ACCC08;
}

uint64_t associated type witness table accessor for View.Body : View in _ScrollOverlayView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _ScrollOverlayView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[176];

  v3 = *(_QWORD *)v1;
  v4 = *(_DWORD *)(v1 + 8);
  v5 = *(_QWORD *)v1 + 168;
  swift_beginAccess();
  outlined init with copy of _ScrollViewConfig(v5, (uint64_t)v29);
  v6 = *(double *)(v3 + 336);
  v7 = *(double *)(v3 + 344);
  CGSize.inset(by:)();
  v9 = v8;
  v11 = v10;
  swift_retain();
  closure #1 in _ScrollOverlayView.body.getter((uint64_t)v29, v3, (uint64_t)&v21, v6, v7, v9, v11);
  v12 = v22;
  v13 = v26;
  v14 = v21;
  v15 = v23;
  v16 = v24;
  v17 = v25;
  v18 = v27;
  v19 = v28;
  LOBYTE(v21) = v22;
  v29[168] = v26;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = v14;
  *(_BYTE *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = v15;
  *(_OWORD *)(a1 + 56) = v16;
  *(_OWORD *)(a1 + 72) = v17;
  *(_BYTE *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v19;
  return outlined destroy of _ScrollViewConfig((uint64_t)v29);
}

uint64_t closure #1 in _ScrollOverlayView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = static HorizontalAlignment.center.getter();
  closure #1 in closure #1 in _ScrollOverlayView.body.getter(a1, a2, (uint64_t)&v25, a4, a6);
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = v28;
  v18 = static HorizontalAlignment.center.getter();
  closure #2 in closure #1 in _ScrollOverlayView.body.getter(a1, a2, (uint64_t)&v25, a5, a7);
  v19 = v25;
  v20 = v26;
  v21 = v27;
  v22 = v28;
  *(_QWORD *)a3 = v24;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = v14;
  *(_QWORD *)(a3 + 32) = v15;
  *(_QWORD *)(a3 + 40) = v16;
  *(_QWORD *)(a3 + 48) = v17;
  *(_QWORD *)(a3 + 56) = v18;
  *(_QWORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 1;
  *(_QWORD *)(a3 + 80) = v19;
  *(_QWORD *)(a3 + 88) = v20;
  *(_QWORD *)(a3 + 96) = v21;
  *(_QWORD *)(a3 + 104) = v22;
  outlined copy of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(v14, v15);
  outlined copy of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(v19, v20);
  outlined consume of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(v19, v20);
  return outlined consume of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(v14, v15);
}

uint64_t closure #1 in closure #1 in _ScrollOverlayView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D2>)
{
  int64x2_t v7;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v7 = 0uLL;
  if (*(_BYTE *)(a1 + 130) != 1)
  {
LABEL_11:
    v14 = 0;
    result = 0;
    goto LABEL_17;
  }
  swift_beginAccess();
  v10 = *(unsigned __int8 *)(a2 + 146);
  if (v10 >> 6)
  {
    if (v10 >> 6 != 1)
    {
      v14 = 0;
      result = 0;
      v7 = 0uLL;
      goto LABEL_17;
    }
    v11 = *(_QWORD *)(a2 + 136);
    if (*(_QWORD *)(v11 + 16) < 2uLL)
    {
      __break(1u);
LABEL_19:
      swift_once();
      goto LABEL_14;
    }
    v12 = fabs(*(double *)(v11 + 48)) > 2.5;
  }
  else
  {
    v12 = ((*(unsigned __int16 *)(a2 + 144) | (*(unsigned __int8 *)(a2 + 146) << 16)) >> 8) & 1;
  }
  if (v12)
    v13 = a5 < a4;
  else
    v13 = 0;
  v7 = 0uLL;
  if (!v13)
    goto LABEL_11;
  if (one-time initialization token for indicatorColor != -1)
    goto LABEL_19;
LABEL_14:
  v16 = indicatorColor;
  v17 = one-time initialization token for visibleIndicatorTransition;
  swift_retain();
  if (v17 != -1)
    swift_once();
  result = swift_retain();
  v7 = vdupq_n_s64(0x100uLL);
  v7.i64[0] = v16;
  v14 = 1;
LABEL_17:
  *(_QWORD *)a3 = v14;
  *(int64x2_t *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

uint64_t closure #2 in closure #1 in _ScrollOverlayView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D1>, double a5@<D3>)
{
  int64x2_t v6;
  unsigned __int16 v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v6 = 0uLL;
  if (*(_BYTE *)(a1 + 131) != 1)
  {
LABEL_11:
    v14 = 0;
    result = 0;
    goto LABEL_17;
  }
  swift_beginAccess();
  v10 = *(unsigned __int8 *)(a2 + 146);
  if (v10 >> 6)
  {
    if (v10 >> 6 != 1)
    {
      v14 = 0;
      result = 0;
      v6 = 0uLL;
      goto LABEL_17;
    }
    v11 = *(_QWORD *)(a2 + 136);
    if (*(_QWORD *)(v11 + 16) < 2uLL)
    {
      __break(1u);
LABEL_19:
      swift_once();
      goto LABEL_14;
    }
    v12 = fabs(*(double *)(v11 + 136)) > 2.5;
  }
  else
  {
    v12 = *(_WORD *)(a2 + 144) & 1;
  }
  if (v12)
    v13 = a5 < a4;
  else
    v13 = 0;
  v6 = 0uLL;
  if (!v13)
    goto LABEL_11;
  if (one-time initialization token for indicatorColor != -1)
    goto LABEL_19;
LABEL_14:
  v16 = indicatorColor;
  v17 = one-time initialization token for visibleIndicatorTransition;
  swift_retain();
  if (v17 != -1)
    swift_once();
  result = swift_retain();
  v6 = vdupq_n_s64(0x100uLL);
  v6.i64[0] = v16;
  v14 = 1;
LABEL_17:
  *(_QWORD *)a3 = v14;
  *(int64x2_t *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ScrollOverlayView()
{
  type metadata accessor for _LayoutRoot<ScrollOverlayLayout>();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>, (uint64_t (*)(uint64_t))type metadata accessor for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _LayoutRoot<ScrollOverlayLayout> and conformance _LayoutRoot<A>, (uint64_t (*)(uint64_t))type metadata accessor for _LayoutRoot<ScrollOverlayLayout>, MEMORY[0x1E0CE14C0]);
  lazy protocol witness table accessor for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>();
  return static _VariadicView.Tree<>._viewListCount(inputs:)();
}

uint64_t outlined init with copy of _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _ScrollViewConfig(a2, a1);
  return a2;
}

uint64_t outlined destroy of _ScrollViewConfig(uint64_t a1)
{
  destroy for _ScrollViewConfig(a1);
  return a1;
}

uint64_t outlined copy of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

double indicatorLayout(x0:x1:contentOffset:contentSize:pageSize:)(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = 0.0;
  if (a4 > 0.0)
  {
    if (a3 / a4 <= 1.0)
      v5 = a3 / a4;
    else
      v5 = 1.0;
    if (a3 / a4 < 0.0)
      v5 = 0.0;
    return (a2 - a1) * v5 + a1;
  }
  return v4;
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ScrollOverlayLayout(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 10.0;
  return result;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ScrollOverlayLayout(double a1, double a2, double a3, double a4)
{
  return specialized ScrollOverlayLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2, a3, a4);
}

uint64_t one-time initialization function for visibleIndicatorTransition()
{
  uint64_t v0;
  uint64_t result;

  static AnyTransition.opacity.getter();
  v0 = AnyTransition.transaction(_:)();
  result = swift_release();
  visibleIndicatorTransition = v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of visibleIndicatorTransition(uint64_t a1, char a2)
{
  if (a2 == 2)
    static Animation.easeInOut(duration:)();
  return Transaction.animation.setter();
}

void type metadata accessor for _LayoutRoot<ScrollOverlayLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _LayoutRoot<ScrollOverlayLayout>)
  {
    lazy protocol witness table accessor for type ScrollOverlayLayout and conformance ScrollOverlayLayout();
    v0 = type metadata accessor for _LayoutRoot();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<ScrollOverlayLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type ScrollOverlayLayout and conformance ScrollOverlayLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout;
  if (!lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollOverlayLayout, &unk_1E1AD0000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout;
  if (!lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollOverlayLayout, &unk_1E1AD0000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollOverlayLayout and conformance ScrollOverlayLayout);
  }
  return result;
}

void type metadata accessor for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>))
  {
    type metadata accessor for VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>));
  }
}

void type metadata accessor for VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>);
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for _ShapeView<Capsule, Color>();
    type metadata accessor for _TraitWritingModifier<TransitionTraitKey>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>);
  }
}

void type metadata accessor for _ShapeView<Capsule, Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<Capsule, Color>)
  {
    lazy protocol witness table accessor for type Capsule and conformance Capsule();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>);
  }
}

void type metadata accessor for _TraitWritingModifier<TransitionTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, Color>, MEMORY[0x1E0CE0E50]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E0CE52E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>, (uint64_t (*)(uint64_t))type metadata accessor for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>);
  }
  return result;
}

void *type metadata accessor for ScrollOverlayLayout()
{
  return &unk_1E1AD0000;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _LayoutRoot<ScrollOverlayLayout> and conformance _LayoutRoot<A>, (uint64_t (*)(uint64_t))type metadata accessor for _LayoutRoot<ScrollOverlayLayout>, MEMORY[0x1E0CE14C0]);
    v3[1] = lazy protocol witness table accessor for type TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)> and conformance TupleView<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>>)
  {
    type metadata accessor for _LayoutRoot<ScrollOverlayLayout>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>, (uint64_t (*)(uint64_t))type metadata accessor for (VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _LayoutRoot<ScrollOverlayLayout> and conformance _LayoutRoot<A>, (uint64_t (*)(uint64_t))type metadata accessor for _LayoutRoot<ScrollOverlayLayout>, MEMORY[0x1E0CE14B8]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<ScrollOverlayLayout>, TupleView<(VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>, VStack<ModifiedContent<_ShapeView<Capsule, Color>, _TraitWritingModifier<TransitionTraitKey>>?>)>>);
  }
}

unint64_t instantiation function for generic protocol witness table for ScrollOverlayLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ScrollOverlayLayout and conformance ScrollOverlayLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized ScrollOverlayLayout.placeSubviews(in:proposal:subviews:cache:)(double a1, double a2, double a3, double a4)
{
  uint64_t *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v23;
  double v24;
  double v26;

  v5 = *v4;
  swift_beginAccess();
  v6 = *(double *)(v5 + 72);
  v23 = *(double *)(v5 + 336);
  v24 = *(double *)(v5 + 64);
  v26 = *(double *)(v5 + 344);
  swift_beginAccess();
  CGSize.inset(by:)();
  v7 = *(double *)(v5 + 304);
  v8 = *(double *)(v5 + 312);
  v10 = *(double *)(v5 + 320);
  v9 = *(double *)(v5 + 328);
  EdgeInsets.init(_all:)();
  v12 = v7 + v11;
  v14 = v8 + v13;
  v16 = v10 + v15;
  v18 = v9 + v17;
  v19 = 0.0;
  if ((*(_BYTE *)(v5 + 392) & (v6 < 0.0)) != 0)
    v19 = v6;
  v20 = v12 - v19;
  indicatorLayout(x0:x1:contentOffset:contentSize:pageSize:)(v14, a3 - v18, v24, v23);
  indicatorLayout(x0:x1:contentOffset:contentSize:pageSize:)(v20, a4 - v16, v6, v26);
  LayoutSubviews.subscript.getter();
  static UnitPoint.topLeading.getter();
  LayoutSubview.place(at:anchor:proposal:)();
  LayoutSubviews.subscript.getter();
  static UnitPoint.topLeading.getter();
  return LayoutSubview.place(at:anchor:proposal:)();
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance _BorderedButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;

  v4 = *v2;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  KeyPath = swift_getKeyPath();
  v10 = swift_getKeyPath();
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v8;
  *(_BYTE *)(a2 + 64) = v4;
  outlined copy of AppIntentExecutor?(v5);
  return outlined copy of AppIntentExecutor?(v7);
}

uint64_t BorderedButtonMenuStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 64);
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  v10 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v8);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v8);
  KeyPath = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = v10;
  *(_BYTE *)(a1 + 19) = 2;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = KeyPath;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v12;
  *(_WORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v13;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = result;
  *(_BYTE *)(a1 + 112) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BorderedButtonMenuStyleBody()
{
  type metadata accessor for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
  type metadata accessor for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>(0);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

SwiftUI::BorderedButtonMenuStyle __swiftcall BorderedButtonMenuStyle.init()()
{
  SwiftUI::BorderedButtonMenuStyle result;

  result.isProminent = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void BorderedButtonMenuStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static MenuStyle<>._servicesButton.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _ServicesButtonMenuStyle.init(tintOpacity:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _ServicesButtonMenuStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in BorderedButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in _ServicesButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for BorderedButtonMenuStyle()
{
  return &type metadata for BorderedButtonMenuStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for _ServicesButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for _ServicesButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for _ServicesButtonMenuStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for _ServicesButtonMenuStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ServicesButtonMenuStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ServicesButtonMenuStyle()
{
  return &type metadata for _ServicesButtonMenuStyle;
}

unint64_t lazy protocol witness table accessor for type BorderedButtonMenuStyleBody and conformance BorderedButtonMenuStyleBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderedButtonMenuStyleBody and conformance BorderedButtonMenuStyleBody;
  if (!lazy protocol witness table cache variable for type BorderedButtonMenuStyleBody and conformance BorderedButtonMenuStyleBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderedButtonMenuStyleBody, &unk_1E1AF2108);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonMenuStyleBody and conformance BorderedButtonMenuStyleBody);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BorderedButtonMenuStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18718E858 + 4 * byte_187C10455[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18718E88C + 4 * byte_187C10450[v4]))();
}

uint64_t sub_18718E88C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18718E894(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18718E89CLL);
  return result;
}

uint64_t sub_18718E8A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18718E8B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18718E8B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18718E8BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _BorderedButtonMenuStyle()
{
  return &type metadata for _BorderedButtonMenuStyle;
}

uint64_t destroy for BorderedButtonMenuStyleBody(uint64_t a1)
{
  uint64_t result;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  result = outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  if (*(_QWORD *)(a1 + 32))
    result = swift_release();
  if (*(_QWORD *)(a1 + 48))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for BorderedButtonMenuStyleBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v10 = *(_QWORD *)(a2 + 48);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for BorderedButtonMenuStyleBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a1 + 40) = v13;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v12)
  {
    v14 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v14;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_8:
  v15 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v15)
    {
      v17 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v15;
      *(_QWORD *)(a1 + 56) = v17;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_15;
  }
  if (!v15)
  {
    swift_release();
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  swift_retain();
  swift_release();
LABEL_15:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for BorderedButtonMenuStyleBody(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v11)
    {
      v12 = a2[5];
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = v12;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v11)
  {
    v13 = a2[5];
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v13;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_8:
  v14 = a2[6];
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v14)
    {
      v16 = a2[7];
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v16;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_15;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_14;
  }
  v15 = a2[7];
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  swift_release();
LABEL_15:
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderedButtonMenuStyleBody(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BorderedButtonMenuStyleBody(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

void *type metadata accessor for BorderedButtonMenuStyleBody()
{
  return &unk_1E1AF2108;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in _BorderedButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in BorderedButtonMenuStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>)
    type metadata accessor for UIKitMenuButton();
  return result;
}

void type metadata accessor for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>)
  {
    v2 = lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone();
    v4 = type metadata accessor for UIKitButtonStyleModifier(a1, (uint64_t)&type metadata for BorderedButtonStyle_Phone, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>);
  }
}

unint64_t lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone;
  if (!lazy protocol witness table cache variable for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderedButtonStyle_Phone, &type metadata for BorderedButtonStyle_Phone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>>();
    v2[0] = &protocol witness table for UIKitMenuButton<A, B>;
    v2[1] = &protocol witness table for UIKitButtonStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>>)
  {
    type metadata accessor for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for UIKitButtonStyleModifier<BorderedButtonStyle_Phone>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, UIKitButtonStyleModifier<BorderedButtonStyle_Phone>>);
  }
}

uint64_t type metadata completion function for UIKitEventBindingBridge()
{
  return swift_initClassMetadata2();
}

uint64_t UIKitEventBindingBridge.__allocating_init(eventBindingManager:)()
{
  swift_allocObject();
  return UIKitEventBindingBridge.init(eventBindingManager:)();
}

void UIKitEventBindingBridge.hostingView<A>(_:didMoveToWindow:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  void *v12;
  objc_super v13;
  _QWORD v14[2];

  if (a2)
  {
    swift_beginAccess();
    swift_weakLoadStrong();
    v3 = type metadata accessor for EventBindingSource(0, (unint64_t *)&lazy cache variable for type metadata for FallbackResponderProvider);
    _UIHostingView.as<A>(_:)(v3, v3, (uint64_t)v14);
    v4 = v14[1];
    v5 = (objc_class *)type metadata accessor for UIKitKeyPressResponder();
    v6 = (char *)objc_allocWithZone(v5);
    swift_weakInit();
    v7 = &v6[OBJC_IVAR____TtC7SwiftUI22UIKitKeyPressResponder_fallbackResponderProvider];
    *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI22UIKitKeyPressResponder_fallbackResponderProvider + 8] = 0;
    swift_unknownObjectWeakInit();
    v8 = OBJC_IVAR____TtC7SwiftUI22UIKitKeyPressResponder_tracker;
    v9 = v6;
    *(_QWORD *)&v6[v8] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_weakAssign();
    *((_QWORD *)v7 + 1) = v4;
    swift_unknownObjectWeakAssign();

    v13.receiver = v9;
    v13.super_class = v5;
    v10 = objc_msgSendSuper2(&v13, sel_init);
    swift_release();
    swift_unknownObjectRelease();
    v11 = *(void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v10;

  }
  else
  {
    v12 = *(void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;

  }
}

uint64_t UIKitEventBindingBridge.source(for:)(_BYTE *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t (*v4)();
  void *v5;
  id v6;
  uint64_t result;

  if (*a1 == 2)
  {
    v2 = *(void **)(v1 + 56);
    v3 = &lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer;
    v4 = type metadata accessor for UIKitHoverGestureRecognizer;
    v5 = &protocol conformance descriptor for UIKitHoverGestureRecognizer;
    goto LABEL_6;
  }
  if (!*a1)
  {
    v2 = *(void **)(v1 + 48);
    if (!v2)
      return (uint64_t)v2;
    v3 = &lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer;
    v4 = type metadata accessor for UIKitGestureRecognizer;
    v5 = &protocol conformance descriptor for UIKitGestureRecognizer;
LABEL_6:
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)v3, (uint64_t (*)(uint64_t))v4, (uint64_t)v5);
    v6 = v2;
    return (uint64_t)v2;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void UIKitEventBindingBridge.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void UIKitEventBindingBridge.__ivar_destroyer()
{
  id *v0;

}

uint64_t ObjC metadata update function for UIKitEventBindingBridge()
{
  return type metadata accessor for UIKitEventBindingBridge();
}

uint64_t type metadata accessor for EventBindingSource(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata completion function for DeferredFetchRequest()
{
  return swift_initClassMetadata2();
}

id DeferredFetchRequest.result.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = v0;
    v4 = (void *)(*(uint64_t (**)(void))(v0 + 24))();
    v5 = *(void **)(v0 + 16);
    *(_QWORD *)(v3 + 16) = v4;
    v2 = v4;

    v1 = 0;
  }
  v6 = v1;
  return v2;
}

_QWORD *DeferredFetchRequest.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = 0;
  result[3] = a1;
  result[4] = a2;
  return result;
}

uint64_t DeferredFetchRequest.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DeferredFetchRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DeferredFetchRequest);
}

uint64_t type metadata completion function for FetchController()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Optional();
  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t FetchController.results.getter()
{
  _QWORD *v0;

  FetchController.fetchIfNeeded()();
  return (*(uint64_t (**)(_QWORD *))((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68)))(v0);
}

void *FetchController.fetchIfNeeded()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *result;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90);
  v2 = *((unsigned __int8 *)v0 + v1);
  if ((_DWORD)v2 != 1)
    return (void *)v2;
  v3 = v0;
  result = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80));
  if (result)
  {
    v13[0] = 0;
    if (objc_msgSend(result, sel_performFetch_, v13))
    {
      v5 = v13[0];
    }
    else
    {
      v6 = v13[0];
      v7 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      static os_log_type_t.fault.getter();
      v8 = (void *)static Log.runtimeIssuesLog.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
      swift_getErrorValue();
      v10 = Error.localizedDescription.getter();
      v12 = v11;
      *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v9 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v9 + 32) = v10;
      *(_QWORD *)(v9 + 40) = v12;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
    }
    *((_BYTE *)v3 + v1) = 0;
    return (void *)v2;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall FetchController.update(in:)(NSManagedObjectContext_optional in)
{
  _QWORD *v1;
  _QWORD *v2;
  Class isa;
  _QWORD *v4;
  uint64_t v5;
  Class v6;
  void *v7;
  objc_class *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *ObjCClassFromMetadata;
  objc_class *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  id v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id aBlock[6];
  _QWORD v56[2];

  v2 = v1;
  isa = in.value.super.isa;
  v56[1] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (in.value.super.isa)
  {
    v5 = *MEMORY[0x1E0DEEDD8] & *v1;
    v6 = in.value.super.isa;
  }
  else
  {
    v7 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80));
    if (!v7)
      goto LABEL_45;
    v6 = (Class)objc_msgSend(v7, sel_managedObjectContext);
    v5 = *v4 & *v1;
  }
  if (!*(_QWORD *)((char *)v1 + *(_QWORD *)(v5 + 112)))
    __break(1u);
  v8 = isa;
  swift_retain();
  v9 = DeferredFetchRequest.result.getter();
  swift_release();
  if (-[objc_class concurrencyType](v6, sel_concurrencyType) != (id)2
    && -[objc_class concurrencyType](v6, sel_concurrencyType)
    || !objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    goto LABEL_47;
  }
  v10 = *(_QWORD *)((*v4 & *v1) + 0x80);
  v11 = *(void **)((char *)v1 + v10);
  if (v11)
  {
    v12 = objc_msgSend(v11, sel_fetchRequest);
    if (!v12)
      goto LABEL_27;
    v13 = v12;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
    v14 = v9;
    v15 = v13;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    LOBYTE(v13) = static NSObject.== infix(_:_:)();

    if ((v13 & 1) == 0)
      goto LABEL_27;
    v16 = *(void **)((char *)v2 + v10);
    if (v16 && (v17 = objc_msgSend(v16, sel_sectionNameKeyPath)) != 0)
    {
      v18 = v17;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

    }
    else
    {
      v19 = 0;
      v21 = 0;
    }
    v23 = swift_retain();
    MEMORY[0x18D755CEC](aBlock, v23);
    swift_release();
    if (aBlock[0])
    {
      v52 = v19;
      v24 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      v26 = v25;
      swift_release();
      if (v21)
      {
        if (v26)
        {
          if (v52 == v24 && v21 == v26)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          if ((v51 & 1) != 0)
            goto LABEL_42;
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      if (v26)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_27:
        v22 = *(_QWORD *)((char *)v2 + v10);
        goto LABEL_28;
      }
    }
    else if (v21)
    {
      goto LABEL_26;
    }
LABEL_42:

    return;
  }
  v22 = 0;
LABEL_28:
  v53 = v9;
  objc_msgSend(v9, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  swift_dynamicCast();
  v27 = v4;
  v28 = swift_retain();
  MEMORY[0x18D755CEC](v56, v28);
  swift_release();
  if (v56[0])
  {
    v29 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    v31 = v30;
    swift_release();
  }
  else
  {
    v29 = 0;
    v31 = 0;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchedResultsController);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v33 = v6;
  v34 = objc_allocWithZone(ObjCClassFromMetadata);
  v35 = @nonobjc NSFetchedResultsController.init(fetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:)(v54, v33, v29, v31, 0, 0);
  v36 = *(void **)((char *)v2 + v10);
  *(_QWORD *)((char *)v2 + v10) = v35;

  v37 = *(void **)((char *)v2 + v10);
  if (v37)
  {
    objc_msgSend(v37, sel_setDelegate_, v2);
    if (v22)
    {
      v38 = *(_QWORD *)((*v27 & *v2) + 0x90);
      if ((*((_BYTE *)v2 + v38) & 1) == 0)
      {
        v41 = (_QWORD *)swift_allocObject();
        v41[2] = v2;
        aBlock[4] = partial apply for closure #1 in FetchController.update(in:);
        aBlock[5] = v41;
        aBlock[0] = (id)MEMORY[0x1E0C809B0];
        aBlock[1] = (id)1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_12;
        v42 = _Block_copy(aBlock);
        v43 = v2;
        swift_release();
        -[objc_class performBlock:](v33, sel_performBlock_, v42);

        _Block_release(v42);
        *((_BYTE *)v2 + v38) = 1;
        return;
      }

      goto LABEL_38;
    }
    v39 = *(void **)((char *)v2 + v10);
    if (v39)
    {
      aBlock[0] = 0;
      if (!objc_msgSend(v39, sel_performFetch_, aBlock))
      {
        v44 = aBlock[0];
        v45 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        static os_log_type_t.fault.getter();
        v46 = (void *)static Log.runtimeIssuesLog.getter();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = xmmword_187BF9830;
        swift_getErrorValue();
        v48 = Error.localizedDescription.getter();
        v50 = v49;
        *(_QWORD *)(v47 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v47 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v47 + 32) = v48;
        *(_QWORD *)(v47 + 40) = v50;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
        return;
      }
      v40 = aBlock[0];

LABEL_38:
      return;
    }
    goto LABEL_46;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t FetchController.refreshResults()()
{
  char *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0;
  v3 = *(_QWORD *)(v2 + 0x60);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v18 - v7;
  v9 = type metadata accessor for Binding();
  v10 = type metadata accessor for Optional();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v18 - v13;
  (*(void (**)(char *, char *, double))(v15 + 16))((char *)&v18 - v13, &v0[*(_QWORD *)(v2 + 136)], v12);
  v16 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *))&v0[*(_QWORD *)((*v1 & *(_QWORD *)v0) + 0x68)])(v0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v8, 0, 1, v3);
    specialized Binding.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v14, v9);
  }
  return result;
}

void FetchController.controllerDidChangeContent(_:)(void *a1)
{
  _QWORD *v1;
  void *v2;
  id v4;
  id v5;

  v2 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80));
  if (v2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v4 = v2;
    v5 = a1;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if ((a1 & 1) != 0)
      FetchController.refreshResults()();
  }
}

void @objc FetchController.controllerDidChangeContent(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  FetchController.controllerDidChangeContent(_:)(v4);

}

void @objc FetchController.init()()
{
  specialized FetchController.init()();
}

uint64_t @objc FetchController.__ivar_destroyer(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  swift_release();
  swift_release();

  v3 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x88);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t type metadata accessor for FetchController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FetchController);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance FetchController<A, B, C>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_getObjectType();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id @nonobjc NSFetchedResultsController.init(fetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  void *v12;
  void *v13;
  id v14;

  v7 = v6;
  if (!a4)
  {
    v12 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v13 = 0;
    goto LABEL_6;
  }
  v12 = (void *)MEMORY[0x18D75CC88](a3, a4);
  swift_bridgeObjectRelease();
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v13 = (void *)MEMORY[0x18D75CC88](a5, a6);
  swift_bridgeObjectRelease();
LABEL_6:
  v14 = objc_msgSend(v7, sel_initWithFetchRequest_managedObjectContext_sectionNameKeyPath_cacheName_, a1, a2, v12, v13);

  return v14;
}

id specialized FetchController.init(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  objc_class *ObjectType;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  objc_super v13;
  uint64_t v14;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x70)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x80)) = 0;
  v8 = (char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x88);
  type metadata accessor for Optional();
  v9 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *((_BYTE *)v3 + *(_QWORD *)((*v7 & *v3) + 0x90)) = 0;
  v10 = (_QWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x68));
  *v10 = a1;
  v10[1] = a2;
  type metadata accessor for KeyPath();
  type metadata accessor for Optional();
  type metadata accessor for MutableBox();
  v14 = 0;
  v11 = v3;
  swift_retain();
  *(_QWORD *)((char *)v11 + *(_QWORD *)((*v7 & *v11) + 0x78)) = MEMORY[0x18D755D28](&v14);

  v13.receiver = v11;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

id specialized FetchController.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return specialized FetchController.init(_:)(a1, a2);
}

void specialized FetchController.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>)
  {
    type metadata accessor for CVarArg();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  }
}

uint64_t sub_1871903D0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FetchController.update(in:)()
{
  uint64_t result;

  result = (uint64_t)FetchController.fetchIfNeeded()();
  if ((result & 1) != 0)
    return FetchController.refreshResults()();
  return result;
}

void Scene.windowShouldClose(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t AnyWindowToolbarStyle.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v7);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10 = v12[1];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for AnyWindowToolbarStyleStorage(0, a2, a3, v9);
    v10 = swift_allocObject();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 96) - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)v10 + 112), a1);
  }
  return v10;
}

uint64_t protocol witness for WindowToolbarStyle.configureWindowToolbar(_:) in conformance AnyWindowToolbarStyle()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

void AnyWindowToolbarStyleStorageBase.configureWindowToolbar(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AnyWindowToolbarStyleStorageBase()
{
  return objc_opt_self();
}

uint64_t AnyWindowToolbarStyleStorage.configureWindowToolbar(_:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 104) + 32))(a1, *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t type metadata accessor for AnyWindowToolbarStyleStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyWindowToolbarStyleStorage);
}

ValueMetadata *type metadata accessor for AnyWindowToolbarStyle()
{
  return &type metadata for AnyWindowToolbarStyle;
}

uint64_t destroy for NavigationSplitCore(uint64_t a1)
{
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();
  result = swift_release();
  if (*(_QWORD *)(a1 + 280))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 256);
  return result;
}

uint64_t initializeWithCopy for NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v5;
  swift_bridgeObjectRetain();
  v9(a1 + 56, a2 + 56, v8);
  v11 = *(void **)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v13;
  v14 = v13;
  v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  v16 = v11;
  swift_bridgeObjectRetain();
  v15(a1 + 112, a2 + 112, v14);
  v17 = *(void **)(a2 + 152);
  v18 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v17;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  v19 = *(_QWORD *)(a2 + 200);
  v20 = *(_QWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 200) = v19;
  *(_QWORD *)(a1 + 208) = v20;
  v21 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  v22 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v22;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v23 = *(_QWORD *)(a2 + 280);
  swift_retain();
  swift_retain();
  if (v23)
  {
    v24 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = v23;
    *(_QWORD *)(a1 + 288) = v24;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v23 - 8))(a1 + 256, a2 + 256, v23);
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v25;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  }
  return a1;
}

uint64_t assignWithCopy for NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  v7 = *(void **)(a2 + 96);
  v8 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
  v10 = *(void **)(a2 + 152);
  v11 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_WORD *)(a1 + 218) = *(_WORD *)(a2 + 218);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  v13 = *(_QWORD *)(a2 + 280);
  if (!*(_QWORD *)(a1 + 280))
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 280) = v13;
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 256, a2 + 256);
      return a1;
    }
LABEL_7:
    v14 = *(_OWORD *)(a2 + 256);
    v15 = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 256) = v14;
    *(_OWORD *)(a1 + 272) = v15;
    return a1;
  }
  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 256);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 256), (uint64_t *)(a2 + 256));
  return a1;
}

uint64_t initializeWithTake for NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 179) = *(_OWORD *)(a2 + 179);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v8 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v8;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  return a1;
}

uint64_t assignWithTake for NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  __int128 v12;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_QWORD *)(a2 + 152);
  v11 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;

  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_release();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_release();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 280))
    __swift_destroy_boxed_opaque_existential_1(a1 + 256);
  v12 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v12;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitCore(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 296))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitCore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 296) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 296) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitCore()
{
  return &type metadata for NavigationSplitCore;
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitCore()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t NavigationSplitCore.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  _BYTE v19[56];
  uint64_t v20;
  _QWORD v21[8];
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[4];
  _QWORD v31[6];
  char v32;
  uint64_t KeyPath;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _BYTE v41[368];
  uint64_t v42;
  char v43;

  v2 = v1;
  outlined init with copy of _VariadicView_Children(v1, (uint64_t)v19);
  outlined init with copy of _VariadicView_Children(v1 + 56, (uint64_t)&v20);
  outlined init with copy of _VariadicView_Children(v1 + 112, (uint64_t)v21);
  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_BYTE *)(v1 + 176);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_BYTE *)(v1 + 192);
  v7 = *(_BYTE *)(v1 + 193);
  v17 = *(_BYTE *)(v1 + 194);
  v8 = *(_QWORD *)(v1 + 200);
  v9 = *(_QWORD *)(v2 + 208);
  v10 = *(_DWORD *)(v2 + 216);
  outlined init with copy of NavigationAuthority(v2 + 224, (uint64_t)v30);
  v11 = *(_QWORD *)(v2 + 248);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + 256, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for UINavigationPresentationAdaptor?);
  v21[7] = v3;
  v22 = v4;
  v23 = v5;
  v24 = v6;
  v25 = v7;
  v26 = v17;
  v27 = v8;
  v28 = v9;
  v29 = v10;
  v30[3] = v11;
  v31[5] = swift_getKeyPath();
  v32 = 0;
  KeyPath = swift_getKeyPath();
  v34 = 0;
  v35 = swift_getKeyPath();
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v8) = static Edge.Set.all.getter();
  outlined init with copy of NavigationSplitRepresentable((uint64_t)v19, (uint64_t)v41);
  v42 = -1;
  v43 = v8;
  outlined destroy of NavigationSplitRepresentable((uint64_t)v19);
  v12 = swift_getKeyPath();
  outlined init with copy of Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>((uint64_t)v41, (uint64_t)v19);
  v40 = v12;
  swift_retain();
  v13 = static Alignment.center.getter();
  v15 = v14;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>);
  a1[49] = closure #1 in View.renderContainerBackground<A>(_:key:);
  a1[50] = 0;
  a1[51] = v13;
  a1[52] = v15;
  outlined destroy of ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>((uint64_t)v19);
  swift_release();
  return outlined destroy of Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>((uint64_t)v41);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitCore()
{
  type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>();
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>();
  lazy protocol witness table accessor for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

void type metadata accessor for UINavigationPresentationAdaptor?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UINavigationPresentationAdaptor?)
  {
    type metadata accessor for UINavigationPresentationAdaptor();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?);
  }
}

unint64_t type metadata accessor for UINavigationPresentationAdaptor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UINavigationPresentationAdaptor;
  if (!lazy cache variable for type metadata for UINavigationPresentationAdaptor)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor);
  }
  return result;
}

uint64_t sub_187191098@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isNavigationSplitViewTransparent.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1871910D4(unsigned __int8 *a1)
{
  return EnvironmentValues.isNavigationSplitViewTransparent.setter(*a1);
}

uint64_t outlined init with copy of NavigationSplitRepresentable(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationSplitRepresentable(a2, a1);
  return a2;
}

uint64_t outlined destroy of NavigationSplitRepresentable(uint64_t a1)
{
  destroy for NavigationSplitRepresentable(a1);
  return a1;
}

uint64_t outlined init with copy of Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?(0, &lazy cache variable for type metadata for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a3, a4, MEMORY[0x1E0CE65E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>)
  {
    type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?(255, &lazy cache variable for type metadata for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.NavigationSplitViewKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.NavigationSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerBackgroundRendererModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>);
  }
}

uint64_t outlined destroy of ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?(0, &lazy cache variable for type metadata for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>)
  {
    type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E0CE7518], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?();
    v0 = type metadata accessor for _BackgroundPreferenceModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?)
  {
    v1 = MEMORY[0x1E0CE7518];
    type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E0CE7518], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, v1, MEMORY[0x1E0CE7508]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v3, &v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>();
    v3[1] = &protocol witness table for ContainerBackgroundRendererModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>)
  {
    type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?(255, &lazy cache variable for type metadata for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, MEMORY[0x1E0CE65E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v8[0] = a4;
    v8[1] = MEMORY[0x1E0CE65D8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>;
  if (!lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>)
  {
    type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6488], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>>)
  {
    type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>();
    type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>>);
  }
}

uint64_t OutlineGroup.$expandedElements.getter()
{
  uint64_t v1;

  type metadata accessor for Set();
  type metadata accessor for StateOrBinding();
  StateOrBinding.projectedValue.getter();
  return v1;
}

void OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(_QWORD *a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;

  v11 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a1 + 8);
  v12 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x18D75D078](v12, v11))
    specialized Set.init(_nonEmptyArrayLiteral:)(v12, v11, a10);
  swift_bridgeObjectRelease();
  type metadata accessor for Set();
  StateOrBinding.init(wrappedValue:)();
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v15;
  type metadata accessor for OutlineGroup();
}

void sub_1871918D0()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_1871918F8(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v3, v9, a1);
  *(_QWORD *)(v2 + v1[20]) = v10;
  v5 = (_QWORD *)(v2 + v1[21]);
  *v5 = v11;
  v5[1] = v13;
  v6 = (_QWORD *)(v2 + v1[22]);
  *v6 = v15;
  v6[1] = v16;
  v7 = (_QWORD *)(v2 + v1[23]);
  *v7 = v17;
  v7[1] = v18;
  v8 = (_QWORD *)(v2 + v1[24]);
  *v8 = v12;
  v8[1] = v14;
  return result;
}

void OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:expandedElements:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  v19 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  v20 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x18D75D078](v20, v19))
    specialized Set.init(_nonEmptyArrayLiteral:)(v20, v19, a19);
  swift_bridgeObjectRelease();
  type metadata accessor for Set();
  StateOrBinding.init(wrappedValue:)();
  type metadata accessor for OutlineGroup();
}

void sub_187191AB8()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_187191AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v5, v13, a1);
  result = outlined consume of StateOrBinding<Set<B>><A, B, C, D, E><A1>(v12, v11, v2, v3);
  *(_QWORD *)(v1 + v4[20]) = v14;
  v7 = (_QWORD *)(v1 + v4[21]);
  *v7 = v17;
  v7[1] = v19;
  v8 = (_QWORD *)(v1 + v4[22]);
  *v8 = v22;
  v8[1] = v23;
  v9 = (_QWORD *)(v1 + v4[23]);
  *v9 = v24;
  v9[1] = v25;
  v10 = (_QWORD *)(v1 + v4[24]);
  *v10 = v15;
  v10[1] = v16;
  *(_QWORD *)v1 = v18;
  *(_QWORD *)(v1 + 8) = v20;
  *(_QWORD *)(v1 + 16) = v21;
  *(_BYTE *)(v1 + 24) = 1;
  return result;
}

uint64_t (*static OutlineGroup.ChildPath.state(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  _QWORD *v14;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v14[7] = a7;
  v14[8] = a1;
  swift_retain();
  return partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter;
}

uint64_t (*static OutlineGroup.ChildPath.binding<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[2];

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a6;
  v16[7] = a7;
  v16[8] = a8;
  v16[9] = a1;
  v17 = type metadata accessor for Binding();
  v19[0] = a7;
  v19[1] = a8;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v17, v19);
  swift_retain();
  return partial apply for closure #1 in static OutlineGroup.ChildPath.binding<A>(_:);
}

uint64_t closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v69 = a4;
  v70 = a8;
  v64 = a6;
  v65 = a7;
  v62 = a3;
  v63 = a5;
  v71 = a9;
  v12 = (uint64_t *)(*a2 + *MEMORY[0x1E0DEC880]);
  v13 = *v12;
  v14 = type metadata accessor for Binding();
  v60 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v60 + 64);
  MEMORY[0x1E0C80A78](v14, v16);
  v61 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v67 = (char *)&v54 - v19;
  v20 = v12[1];
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v54 - v24;
  v26 = *(_QWORD *)(v13 - 8);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v31 = (char *)&v54 - v30;
  v68 = a1;
  MEMORY[0x18D75B9C8](v29);
  v66 = a2;
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v13);
  v32 = *(_QWORD *)(v20 + 16);
  LODWORD(v31) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v25, 1, v32);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
  if ((_DWORD)v31 == 1)
  {
    v33 = type metadata accessor for Binding();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v71, 1, 1, v33);
  }
  else
  {
    v35 = v60;
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
    v59 = a10;
    v58(v67, v68, v14);
    v36 = *(unsigned __int8 *)(v35 + 80);
    v37 = (v36 + 96) & ~v36;
    v38 = (v15 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = v38 + 8;
    v57 = v36 | 7;
    v54 = v38;
    v55 = v37;
    v39 = (_QWORD *)swift_allocObject();
    v39[2] = 0;
    v39[3] = 0;
    v41 = v62;
    v40 = v63;
    v42 = v69;
    v39[4] = v62;
    v39[5] = v42;
    v43 = v64;
    v44 = v65;
    v39[6] = v40;
    v39[7] = v43;
    v39[8] = v32;
    v39[9] = v44;
    v45 = v59;
    v39[10] = v70;
    v39[11] = v45;
    v60 = *(_QWORD *)(v35 + 32);
    ((void (*)(char *, char *, uint64_t))v60)((char *)v39 + v37, v67, v14);
    v46 = v66;
    *(_QWORD *)((char *)v39 + v38) = v66;
    v47 = v61;
    v58(v61, v68, v14);
    v48 = (_QWORD *)swift_allocObject();
    v48[2] = 0;
    v48[3] = 0;
    v49 = v69;
    v48[4] = v41;
    v48[5] = v49;
    v48[6] = v40;
    v48[7] = v43;
    v48[8] = v32;
    v48[9] = v44;
    v50 = (char *)v48 + v55;
    v51 = v59;
    v48[10] = v70;
    v48[11] = v51;
    ((void (*)(char *, char *, uint64_t))v60)(v50, v47, v14);
    *(_QWORD *)((char *)v48 + v54) = v46;
    swift_retain_n();
    v52 = v71;
    Binding.init(get:set:)();
    v53 = type metadata accessor for Binding();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
  }
}

uint64_t closure #1 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v5 = *(_QWORD *)(*a3 + *MEMORY[0x1E0DEC880] + 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v19 - v6;
  v9 = *v8;
  v10 = *(_QWORD *)(*v8 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v19 - v13;
  v15 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v15);
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  v16 = *(_QWORD *)(v5 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v16);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a4, v7, v16);
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = (uint64_t *)(*a5 + *MEMORY[0x1E0DEC880]);
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)&v19 - v8;
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v19 - v13;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, double))(v17 + 16))((char *)&v19 - v13, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  type metadata accessor for Binding();
  MEMORY[0x18D75B9C8]();
  swift_setAtWritableKeyPath();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t static OutlineGroup.ChildPath.closure(_:)(uint64_t a1)
{
  swift_retain();
  return a1;
}

void OutlineGroup<>.init<A>(_:children:content:)()
{
  type metadata accessor for DisclosureGroup();
}

{
  type metadata accessor for DisclosureGroup();
}

{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187192324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 144) = v3;
  *(_QWORD *)(v5 - 136) = v4;
  *(_QWORD *)(v5 - 264) = v3;
  *(_QWORD *)(v5 - 128) = v1;
  *(_QWORD *)(v5 - 120) = v1;
  *(_QWORD *)(v5 - 112) = a1;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = AssociatedConformanceWitness;
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187192378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  v20 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v16 - 248) = v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v9, v14, v17);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v16 - 208) = v10;
  *(_QWORD *)(v16 - 200) = v15;
  *(_QWORD *)(v16 - 192) = v11;
  *(_QWORD *)(v16 - 184) = v14;
  v21 = *(_QWORD *)(v16 - 272);
  *(_QWORD *)(v16 - 176) = v13;
  *(_QWORD *)(v16 - 168) = v21;
  *(_QWORD *)(v16 - 160) = *(_QWORD *)(v16 - 280);
  *(_QWORD *)(v16 - 280) = swift_getKeyPath();
  v22 = swift_checkMetadataState();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v15;
  v23[3] = v11;
  v23[4] = v11;
  v23[5] = v22;
  v23[6] = v13;
  v23[7] = v12;
  v23[8] = *(_QWORD *)(v16 - 240);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v11;
  *(_QWORD *)(v24 + 24) = v21;
  swift_retain();
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v16 - 280), *(_QWORD *)(v16 - 224), (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v24, *(_QWORD *)(v16 - 264), v11, v11, v22, v13, v12);
}

uint64_t sub_1871924C8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 248) + 8))(*(_QWORD *)(v1 - 256), v0);
}

uint64_t sub_187192504()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_187192534()
{
  return 56;
}

__n128 sub_187192540(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void defaultGrouping<A>(isExpanded:parent:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  type metadata accessor for DisclosureGroupConfiguration();
}

void sub_1871925E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v4 + 16))(v8, v6, v3, v12);
  swift_retain();
  swift_retain();
  DisclosureGroupConfiguration.init(isExpanded:label:)(v7, v5, *(unsigned int *)(v11 - 124), v8, v3, v10, v2, v9);
}

void sub_18719265C()
{
  DisclosureGroup<>.init(configuration:)();
}

uint64_t sub_187192698()
{
  return swift_deallocObject();
}

void partial apply for defaultGrouping<A>(isExpanded:parent:)(uint64_t a1, uint64_t a2)
{
  defaultGrouping<A>(isExpanded:parent:)(a1, a2);
}

void sub_187192740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 144) = v1;
  *(_QWORD *)(v5 - 136) = v4;
  *(_QWORD *)(v5 - 128) = v2;
  *(_QWORD *)(v5 - 120) = v2;
  *(_QWORD *)(v5 - 112) = a1;
  *(_QWORD *)(v5 - 104) = v3;
  *(_QWORD *)(v5 - 96) = AssociatedConformanceWitness;
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187192788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  v20 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v16 - 248) = v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v10, v9, v17);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v16 - 208) = v9;
  *(_QWORD *)(v16 - 200) = v15;
  *(_QWORD *)(v16 - 192) = v11;
  *(_QWORD *)(v16 - 184) = v14;
  v21 = *(_QWORD *)(v16 - 264);
  *(_QWORD *)(v16 - 176) = v13;
  *(_QWORD *)(v16 - 168) = v21;
  *(_QWORD *)(v16 - 160) = *(_QWORD *)(v16 - 272);
  *(_QWORD *)(v16 - 272) = swift_getKeyPath();
  v22 = swift_checkMetadataState();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v15;
  v23[3] = v11;
  v23[4] = v11;
  v23[5] = v22;
  v23[6] = v13;
  v23[7] = v12;
  v23[8] = *(_QWORD *)(v16 - 240);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v11;
  *(_QWORD *)(v24 + 24) = v21;
  swift_retain();
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v16 - 272), *(_QWORD *)(v16 - 224), (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v24, v9, v11, v11, v22, v13, v12);
}

uint64_t sub_1871928CC()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 248) + 8))(*(_QWORD *)(v1 - 256), v0);
}

uint64_t sub_187192908()
{
  return swift_deallocObject();
}

void OutlineGroup<>.init<A>(_:children:expandedElements:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;

  v9 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x18D75D078](v9, a8))
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    specialized Set.init(_nonEmptyArrayLiteral:)(v9, a8, AssociatedConformanceWitness);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for DisclosureGroup();
}

void sub_187192A04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  char v13;

  *(_QWORD *)(v9 - 232) = *v3;
  *(_QWORD *)(v9 - 224) = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v9 - 96) = v5;
  type metadata accessor for Set();
  StateOrBinding.init(wrappedValue:)();
  v12 = *(_QWORD *)(v9 - 144);
  v13 = *(_BYTE *)(v9 - 136);
  *(_OWORD *)v2 = *(_OWORD *)(v9 - 160);
  *(_QWORD *)(v2 + 16) = v12;
  *(_BYTE *)(v2 + 24) = v13;
  *(_QWORD *)(v9 - 160) = v1;
  *(_QWORD *)(v9 - 152) = v8;
  *(_QWORD *)(v9 - 144) = v4;
  *(_QWORD *)(v9 - 136) = v4;
  *(_QWORD *)(v9 - 128) = a1;
  *(_QWORD *)(v9 - 120) = v7;
  *(_QWORD *)(v9 - 248) = a1;
  *(_QWORD *)(v9 - 112) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_187192A8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = v6;
  v10 = v3 + *(int *)(a1 + 76);
  v11 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(v8 - 240) = v11;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v10, *(_QWORD *)(v8 - 168), v1);
  *(_QWORD *)(v8 - 160) = v1;
  *(_QWORD *)(v8 - 152) = v7;
  *(_QWORD *)(v8 - 144) = v5;
  *(_QWORD *)(v8 - 136) = v5;
  *(_QWORD *)(v8 - 128) = v2;
  *(_QWORD *)(v8 - 120) = v9;
  *(_QWORD *)(v8 - 112) = v4;
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_187192AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t (**v13)();
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;

  v8 = swift_storeEnumTagMultiPayload();
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = *(_QWORD *)(v7 - 224);
  *(_QWORD *)(v1 + v4[20]) = swift_getKeyPath();
  v11 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = v3;
  v12 = *(_QWORD *)(v7 - 248);
  *((_QWORD *)v11 + 4) = v3;
  *((_QWORD *)v11 + 5) = v12;
  *((_QWORD *)v11 + 6) = v6;
  *((_QWORD *)v11 + 7) = v2;
  *((_QWORD *)v11 + 8) = *(_QWORD *)(v7 - 216);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 240) + 8))(*(_QWORD *)(v7 - 168), v0);
  v13 = (uint64_t (**)())(v1 + v4[21]);
  *v13 = partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter;
  v13[1] = v11;
  v14 = (_QWORD *)(v1 + v4[22]);
  v15 = *(_QWORD *)(v7 - 208);
  v16 = *(_QWORD *)(v7 - 200);
  *v14 = v15;
  v14[1] = v16;
  v17 = (_QWORD *)(v1 + v4[23]);
  *v17 = v15;
  v17[1] = v16;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v3;
  *(_QWORD *)(v18 + 24) = v10;
  v19 = (_QWORD *)(v1 + v4[24]);
  *v19 = defaultGrouping<A>(isExpanded:parent:)partial apply;
  v19[1] = v18;
  v20 = *(_QWORD *)v1;
  v21 = *(_QWORD *)(v1 + 8);
  v22 = *(_QWORD *)(v1 + 16);
  v23 = *(_BYTE *)(v1 + 24);
  swift_retain();
  result = outlined consume of StateOrBinding<Set<B>><A, B, C, D, E><A1>(v20, v21, v22, v23);
  v25 = *(_QWORD *)(v7 - 184);
  *(_QWORD *)v1 = *(_QWORD *)(v7 - 192);
  *(_QWORD *)(v1 + 8) = v25;
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v7 - 176);
  *(_BYTE *)(v1 + 24) = 1;
  return result;
}

void OutlineGroup<>.init<A>(_:id:children:content:)()
{
  type metadata accessor for DisclosureGroup();
}

{
  type metadata accessor for DisclosureGroup();
}

{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187192CCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 136) = v5;
  *(_QWORD *)(v6 - 128) = v3;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 112) = v2;
  *(_QWORD *)(v6 - 104) = a1;
  *(_QWORD *)(v6 - 96) = v1;
  *(_QWORD *)(v6 - 88) = v4;
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187192CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  v20 = *(_QWORD *)(v15 + v10);
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v16 - 200) = v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v19, v13, v20, v17);
  swift_storeEnumTagMultiPayload();
  v22 = swift_checkMetadataState();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v12;
  v23[3] = v11;
  v23[4] = v11;
  v23[5] = v22;
  v24 = *(_QWORD *)(v16 - 208);
  v23[6] = v24;
  v23[7] = v14;
  v23[8] = v9;
  v25 = swift_allocObject();
  v26 = *(_QWORD *)(v16 - 184);
  *(_QWORD *)(v25 + 16) = v11;
  *(_QWORD *)(v25 + 24) = v26;
  swift_retain();
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v16 - 160), *(_QWORD *)(v16 - 152), (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v25, *(_QWORD *)(v16 - 176), v11, v11, v22, v24, v14);
}

uint64_t sub_187192E08()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 200) + 8))(*(_QWORD *)(v1 - 192), v0);
}

void sub_187192ED4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 136) = v1;
  *(_QWORD *)(v6 - 128) = v3;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 112) = v2;
  *(_QWORD *)(v6 - 104) = a1;
  *(_QWORD *)(v6 - 96) = v4;
  *(_QWORD *)(v6 - 88) = v5;
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187192EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  v20 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v16 - 184) = v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v10, v11, v17);
  swift_storeEnumTagMultiPayload();
  v21 = swift_checkMetadataState();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v13;
  v22[3] = v12;
  v22[4] = v12;
  v22[5] = v21;
  v22[6] = v14;
  v22[7] = v15;
  v22[8] = v9;
  v23 = swift_allocObject();
  v24 = *(_QWORD *)(v16 - 176);
  *(_QWORD *)(v23 + 16) = v12;
  *(_QWORD *)(v23 + 24) = v24;
  swift_retain();
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v16 - 160), *(_QWORD *)(v16 - 152), (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v23, v11, v12, v12, v21, v14, v15);
}

uint64_t sub_187192FF8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 184) + 8))(*(_QWORD *)(v1 - 192), v0);
}

void OutlineGroup<>.body.getter()
{
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_1871930B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 - 272) = a1;
  *(_QWORD *)(v16 - 280) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v16 - 264) = (char *)&a9 - v17;
  *(_QWORD *)(v16 - 144) = v11;
  *(_QWORD *)(v16 - 136) = v10;
  *(_QWORD *)(v16 - 128) = v12;
  *(_QWORD *)(v16 - 120) = v13;
  *(_QWORD *)(v16 - 112) = v14;
  *(_QWORD *)(v16 - 104) = v15;
  *(_QWORD *)(v16 - 96) = v9;
  type metadata accessor for OutlinePrimitive();
}

void sub_18719310C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 - 208) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)(v5 - 280) + 16))(v3, v2 + v4[19], *(_QWORD *)(v5 - 272), v8);
  *(_QWORD *)(v5 - 272) = *(_QWORD *)(v2 + v4[21]);
  swift_retain();
  swift_retain();
  *(_QWORD *)(v5 - 280) = OutlineGroup.$expandedElements.getter();
  *(_QWORD *)(v5 - 288) = v9;
  *(_QWORD *)(v5 - 296) = v10;
  *(_QWORD *)(v5 - 304) = *(_QWORD *)(v2 + v4[22]);
  swift_retain();
  swift_retain();
  swift_retain();
  OutlinePrimitive.init(base:id:children:expandedElements:parentContent:leafContent:grouping:)();
}

uint64_t sub_187193284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(v3 - 192);
  *(_QWORD *)(v3 - 168) = *(_QWORD *)(v3 - 200);
  *(_QWORD *)(v3 - 160) = v4;
  *(_QWORD *)(v3 - 152) = *(_QWORD *)(v3 - 184);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlinePrimitive<A, B, C, D, E>, v0, v3 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v2, v0, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 208) + 8);
  v6(v2, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v3 - 176));
  return v6(v1, v0);
}

void protocol witness for View.body.getter in conformance <> OutlineGroup<A, B, C, D, E>()
{
  OutlineGroup<>.body.getter();
}

void OutlineGroup<>.init<A, B>(_:children:content:)()
{
  type metadata accessor for Binding();
  type metadata accessor for DisclosureGroup();
}

{
  type metadata accessor for Binding();
  type metadata accessor for DisclosureGroup();
}

void sub_1871933EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v4;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v1, v6 - 104);
  *(_QWORD *)(v6 - 272) = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 312) = AssociatedConformanceWitness;
  *(_QWORD *)(v6 - 160) = v1;
  *(_QWORD *)(v6 - 152) = v5;
  *(_QWORD *)(v6 - 144) = v3;
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = a1;
  *(_QWORD *)(v6 - 120) = v8;
  *(_QWORD *)(v6 - 112) = AssociatedConformanceWitness;
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_18719345C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v17 = type metadata accessor for Binding();
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v14 - 288) = v18;
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 16))(v16, *(_QWORD *)(v14 - 232), v17);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 - 224) = v13;
  *(_QWORD *)(v14 - 216) = v9;
  *(_QWORD *)(v14 - 208) = v11;
  *(_QWORD *)(v14 - 200) = v12;
  v19 = *(_QWORD *)(v14 - 296);
  v20 = *(_QWORD *)(v14 - 304);
  *(_QWORD *)(v14 - 192) = v19;
  *(_QWORD *)(v14 - 184) = v20;
  v21 = v10;
  v22 = *(_QWORD *)(v14 - 320);
  *(_QWORD *)(v14 - 176) = v10;
  *(_QWORD *)(v14 - 168) = v22;
  *(_QWORD *)(v14 - 320) = swift_getKeyPath();
  v23 = swift_checkMetadataState();
  v24 = *(_QWORD *)(v14 - 312);
  *(_QWORD *)(v14 - 304) = static OutlineGroup.ChildPath.binding<A>(_:)(*(_QWORD *)(v14 - 264), v13, v9, v9, v23, v24, v20, v21);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v9;
  *(_QWORD *)(v25 + 24) = v19;
  swift_retain();
  v26 = swift_checkMetadataState();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v14 - 320), *(_QWORD *)(v14 - 248), (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v25, v26, v9, v9, v23, *(_QWORD *)(v14 - 272), v24);
}

uint64_t sub_1871935E8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 288) + 8))(*(_QWORD *)(v1 - 232), v0);
}

uint64_t key path getter for Binding<A>.id : <A, B, C, D, E><A1, B1>Binding<B1>()
{
  type metadata accessor for Binding();
  return Binding<A>.id.getter();
}

void sub_187193734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v4;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v1, v6 - 104);
  *(_QWORD *)(v6 - 272) = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 160) = v1;
  *(_QWORD *)(v6 - 152) = v5;
  *(_QWORD *)(v6 - 144) = v3;
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = a1;
  *(_QWORD *)(v6 - 120) = v8;
  *(_QWORD *)(v6 - 112) = AssociatedConformanceWitness;
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_1871937A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v17 = swift_checkMetadataState();
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v14 - 280) = v18;
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 16))(v16, *(_QWORD *)(v14 - 232), v17);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 - 224) = v13;
  *(_QWORD *)(v14 - 216) = v11;
  *(_QWORD *)(v14 - 208) = v12;
  *(_QWORD *)(v14 - 200) = v9;
  v19 = *(_QWORD *)(v14 - 288);
  v20 = *(_QWORD *)(v14 - 296);
  *(_QWORD *)(v14 - 192) = v19;
  *(_QWORD *)(v14 - 184) = v20;
  v21 = *(_QWORD *)(v14 - 304);
  v22 = *(_QWORD *)(v14 - 312);
  *(_QWORD *)(v14 - 176) = v21;
  *(_QWORD *)(v14 - 168) = v22;
  *(_QWORD *)(v14 - 312) = swift_getKeyPath();
  v23 = swift_checkMetadataState();
  static OutlineGroup.ChildPath.binding<A>(_:)(*(_QWORD *)(v14 - 264), v13, v11, v11, v23, v10, v20, v21);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v11;
  *(_QWORD *)(v24 + 24) = v19;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v14 - 312), *(_QWORD *)(v14 - 248), (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v24, v17, v11, v11, v23, *(_QWORD *)(v14 - 272), v10);
}

uint64_t sub_187193910()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 280) + 8))(*(_QWORD *)(v1 - 232), v0);
}

void OutlineGroup<>.init<A, B>(_:id:children:content:)()
{
  type metadata accessor for Binding();
  type metadata accessor for DisclosureGroup();
}

{
  type metadata accessor for Binding();
  type metadata accessor for DisclosureGroup();
}

void sub_187193A1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)(v6 - 320) = a1;
  *(_QWORD *)(v6 - 104) = v5;
  *(_QWORD *)(v6 - 96) = v1;
  *(_QWORD *)(v6 - 336) = v5;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v4, v6 - 104);
  *(_QWORD *)(v6 - 288) = v8;
  *(_QWORD *)(v6 - 160) = v4;
  *(_QWORD *)(v6 - 152) = v2;
  *(_QWORD *)(v6 - 144) = v3;
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = a1;
  *(_QWORD *)(v6 - 120) = v8;
  *(_QWORD *)(v6 - 112) = *(_QWORD *)(v6 - 248);
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187193A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  *(_QWORD *)(v17 - 224) = v12;
  *(_QWORD *)(v17 - 216) = v15;
  *(_QWORD *)(v17 - 208) = v10;
  *(_QWORD *)(v17 - 200) = *v9;
  *(_QWORD *)(v17 - 192) = v11;
  *(_QWORD *)(v17 - 184) = v13;
  *(_QWORD *)(v17 - 176) = v16;
  *(_QWORD *)(v17 - 168) = v14;
  swift_getKeyPath();
  v20 = type metadata accessor for Binding();
  type metadata accessor for ReferenceWritableKeyPath();
  *(_QWORD *)(v17 - 328) = _AppendKeyPath.appending<A, B, C>(path:)();
  swift_release();
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v17 - 304) = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 16))(v19, *(_QWORD *)(v17 - 240), v20);
  swift_storeEnumTagMultiPayload();
  v22 = swift_checkMetadataState();
  v23 = *(_QWORD *)(v17 - 248);
  static OutlineGroup.ChildPath.binding<A>(_:)(*(_QWORD *)(v17 - 280), v12, v15, v15, v22, v23, *(_QWORD *)(v17 - 336), v14);
  v24 = swift_allocObject();
  v25 = *(_QWORD *)(v17 - 312);
  *(_QWORD *)(v24 + 16) = v15;
  *(_QWORD *)(v24 + 24) = v25;
  swift_retain();
  v26 = swift_checkMetadataState();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v17 - 328), *(_QWORD *)(v17 - 264), (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v24, v26, v15, v15, v22, *(_QWORD *)(v17 - 288), v23);
}

uint64_t sub_187193C28()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 304) + 8))(*(_QWORD *)(v1 - 240), v0);
}

uint64_t key path getter for Binding.wrappedValue : <A, B, C, D, E><A1, B1>Binding<B1>()
{
  uint64_t v0;

  v0 = type metadata accessor for Binding();
  return MEMORY[0x18D75B9C8](v0);
}

uint64_t key path setter for Binding.wrappedValue : <A, B, C, D, E><A1, B1>Binding<B1>()
{
  type metadata accessor for Binding();
  return specialized Binding.wrappedValue.setter();
}

void sub_187193DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(v7 - 296) = a1;
  *(_QWORD *)(v7 - 104) = v6;
  *(_QWORD *)(v7 - 96) = v5;
  *(_QWORD *)(v7 - 328) = v6;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v3, v7 - 104);
  *(_QWORD *)(v7 - 280) = v9;
  *(_QWORD *)(v7 - 160) = v3;
  *(_QWORD *)(v7 - 152) = v1;
  *(_QWORD *)(v7 - 144) = v4;
  *(_QWORD *)(v7 - 136) = v4;
  *(_QWORD *)(v7 - 128) = a1;
  *(_QWORD *)(v7 - 120) = v9;
  *(_QWORD *)(v7 - 112) = v2;
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187193DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v17 - 320) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  *(_QWORD *)(v17 - 224) = v9;
  *(_QWORD *)(v17 - 216) = v13;
  *(_QWORD *)(v17 - 208) = v10;
  *(_QWORD *)(v17 - 200) = *v14;
  *(_QWORD *)(v17 - 192) = v11;
  *(_QWORD *)(v17 - 184) = v12;
  *(_QWORD *)(v17 - 176) = v16;
  *(_QWORD *)(v17 - 168) = v15;
  swift_getKeyPath();
  type metadata accessor for Binding();
  type metadata accessor for ReferenceWritableKeyPath();
  *(_QWORD *)(v17 - 312) = _AppendKeyPath.appending<A, B, C>(path:)();
  swift_release();
  v20 = swift_checkMetadataState();
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v17 - 304) = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 16))(v19, *(_QWORD *)(v17 - 232), v20);
  swift_storeEnumTagMultiPayload();
  v22 = swift_checkMetadataState();
  static OutlineGroup.ChildPath.binding<A>(_:)(*(_QWORD *)(v17 - 272), v9, v13, v13, v22, v11, *(_QWORD *)(v17 - 328), v15);
  v23 = swift_allocObject();
  v24 = *(_QWORD *)(v17 - 288);
  *(_QWORD *)(v23 + 16) = v13;
  *(_QWORD *)(v23 + 24) = v24;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v17 - 312), *(_QWORD *)(v17 - 256), (uint64_t)defaultGrouping<A>(isExpanded:parent:)partial apply, v23, v20, v13, v13, v22, *(_QWORD *)(v17 - 280), v11);
}

uint64_t sub_187193FA0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 304) + 8))(*(_QWORD *)(v1 - 232), v0);
}

void protocol witness for View.body.getter in conformance OutlineSubgroupChildren()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Bool IsNativeType;
  void (*v20)(char *, unint64_t, uint64_t);
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v5 = a1;
  v47 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v46 = (char *)&v39 - v10;
  v39 = v11;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v39 - v15;
  if (MEMORY[0x18D75D024](v14))
  {
    type metadata accessor for _SetStorage();
    v17 = static _SetStorage.allocate(capacity:)();
  }
  else
  {
    v17 = MEMORY[0x1E0DEE9E8];
  }
  v42 = MEMORY[0x18D75D078](v5, a2);
  if (!v42)
    return v17;
  v18 = 0;
  v45 = v17 + 56;
  v40 = v16;
  v41 = v5;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
      v20(v16, v5+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v18, a2);
      v21 = __OFADD__(v18, 1);
      v22 = v18 + 1;
      if (v21)
        goto LABEL_20;
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v39 != 8)
        goto LABEL_23;
      v48 = result;
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
      v20(v16, (unint64_t)&v48, a2);
      swift_unknownObjectRelease();
      v21 = __OFADD__(v18, 1);
      v22 = v18 + 1;
      if (v21)
      {
LABEL_20:
        __break(1u);
        return v17;
      }
    }
    v23 = v47;
    v43 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v44 = v22;
    v43(v46, v16, a2);
    v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v25 = -1 << *(_BYTE *)(v17 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    v28 = *(_QWORD *)(v45 + 8 * (v26 >> 6));
    v29 = 1 << v26;
    v30 = *(_QWORD *)(v23 + 72);
    if (((1 << v26) & v28) != 0)
    {
      v31 = ~v25;
      do
      {
        v20(v7, *(_QWORD *)(v17 + 48) + v30 * v26, a2);
        v32 = a3;
        v33 = dispatch thunk of static Equatable.== infix(_:_:)();
        v34 = *(void (**)(char *, uint64_t))(v47 + 8);
        v34(v7, a2);
        if ((v33 & 1) != 0)
        {
          v34(v46, a2);
          a3 = v32;
          v16 = v40;
          v5 = v41;
          goto LABEL_7;
        }
        v26 = (v26 + 1) & v31;
        v27 = v26 >> 6;
        v28 = *(_QWORD *)(v45 + 8 * (v26 >> 6));
        v29 = 1 << v26;
        a3 = v32;
      }
      while ((v28 & (1 << v26)) != 0);
      v16 = v40;
      v5 = v41;
    }
    v35 = v46;
    *(_QWORD *)(v45 + 8 * v27) = v29 | v28;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v43)(*(_QWORD *)(v17 + 48) + v30 * v26, v35, a2);
    v37 = *(_QWORD *)(v17 + 16);
    v21 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v21)
      break;
    *(_QWORD *)(v17 + 16) = v38;
LABEL_7:
    v18 = v44;
    if (v44 == v42)
      return v17;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void type metadata accessor for OutlineGroup()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187194378()
{
  return swift_deallocObject();
}

uint64_t sub_187194388()
{
  return swift_deallocObject();
}

uint64_t sub_187194398()
{
  return swift_deallocObject();
}

uint64_t sub_1871943A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_1871943B0()
{
  type metadata accessor for Binding();
  return Binding<A>.id.getter();
}

uint64_t sub_1871943F8()
{
  return 64;
}

__n128 sub_187194404(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_187194418()
{
  return swift_deallocObject();
}

uint64_t sub_187194428()
{
  return 64;
}

__n128 sub_187194434(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_187194448()
{
  return swift_deallocObject();
}

uint64_t sub_187194458()
{
  uint64_t v0;

  v0 = type metadata accessor for Binding();
  return MEMORY[0x18D75B9C8](v0);
}

uint64_t sub_187194490()
{
  type metadata accessor for Binding();
  return specialized Binding.wrappedValue.setter();
}

uint64_t sub_1871944CC()
{
  return 64;
}

__n128 sub_1871944D8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1871944EC()
{
  return swift_deallocObject();
}

uint64_t sub_1871944FC()
{
  return 64;
}

__n128 sub_187194508(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_18719451C()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for View.Body : View in <> OutlineGroup<A, B, C, D, E>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for OutlineSubgroupChildren(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren;
  if (!lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineSubgroupChildren, &type metadata for OutlineSubgroupChildren);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren;
  if (!lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineSubgroupChildren, &type metadata for OutlineSubgroupChildren);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in OutlineSubgroupChildren()
{
  return &protocol witness table for OutlineSubgroupChildren;
}

void type metadata completion function for OutlineGroup()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t initializeBufferWithCopyOfBuffer for OutlineGroup(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v7 + 80));
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64);
  v11 = v9 <= 7 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0;
  if (v11
    && ((((((((((v10 + 8 + ((v9 + 25) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 <= 0x18)
  {
    v12 = AssociatedTypeWitness;
    v13 = *((unsigned __int8 *)a2 + 24);
    if (v13 >= 2)
      v13 = *(_DWORD *)a2 + 2;
    v42 = v10 + 8;
    v14 = ~v9;
    *(_QWORD *)a1 = *a2;
    if (v13 == 1)
    {
      v41 = AssociatedTypeWitness;
      v15 = a2[2];
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = v15;
      swift_retain();
      swift_retain();
      v12 = v41;
      swift_bridgeObjectRetain();
      v16 = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_retain();
      v16 = 0;
    }
    *(_BYTE *)(a1 + 24) = v16;
    v18 = (uint64_t)a2 + v9;
    v19 = (a1 + v9 + 25) & v14;
    v20 = (v18 + 25) & v14;
    v21 = *(unsigned __int8 *)(v20 + v10);
    if (v21 >= 2)
    {
      if (v10 <= 3)
        v22 = v10;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    v23 = v21 == 1;
    if (v21 == 1)
      v24 = v8;
    else
      v24 = v7;
    if (v21 == 1)
      v25 = v5;
    else
      v25 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v19, v20, v25);
    *(_BYTE *)(v19 + v10) = v23;
    v26 = (_QWORD *)((v42 + v19) & 0xFFFFFFFFFFFFF8);
    v27 = (_QWORD *)((v42 + v20) & 0xFFFFFFFFFFFFF8);
    *v26 = *v27;
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    v35 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
    v38 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v17 + ((v9 & 0xF8 ^ 0x1F8) & (v9 + 16));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for OutlineGroup(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v7 + 80);
  v10 = (a1 + v9 + 25) & ~v9;
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v8 + 64);
  v12 = *(unsigned __int8 *)(v10 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  if (v12 == 1)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v14 = v5;
  }
  else
  {
    v14 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v14);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OutlineGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v6 = *(unsigned __int8 *)(a2 + 24);
  if (v6 >= 2)
    v6 = *(_DWORD *)a2 + 2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v7;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v8 = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = 0;
  }
  *(_BYTE *)(a1 + 24) = v8;
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_QWORD *)(v9 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80) | *(unsigned __int8 *)(v11 + 80);
  v14 = v13 + 25;
  v15 = ~v13;
  v16 = (v13 + 25 + a2) & ~v13;
  if (*(_QWORD *)(v12 + 64) <= *(_QWORD *)(v11 + 64))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v12 + 64);
  v18 = *(unsigned __int8 *)(v16 + v17);
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v19 = v17;
    else
      v19 = 4;
    __asm { BR              X16 }
  }
  v20 = (v14 + a1) & v15;
  v21 = v18 == 1;
  if (v18 == 1)
  {
    v11 = *(_QWORD *)(v9 - 8);
    v22 = v9;
  }
  else
  {
    v22 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v14 + a1) & v15, v16, v22);
  *(_BYTE *)(v20 + v17) = v21;
  v23 = (_QWORD *)((v17 + 8 + v20) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)((v17 + 8 + v16) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = (_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OutlineGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 24);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    v7 = *(unsigned __int8 *)(a2 + 24);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    if (v7 == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = 1;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      swift_bridgeObjectRetain();
      swift_retain();
    }
  }
  v8 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_QWORD *)(v8 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80) | *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 25 + a1) & ~v12;
  v14 = (v12 + 25 + a2) & ~v12;
  if (*(_QWORD *)(v11 + 64) <= *(_QWORD *)(v10 + 64))
    v15 = *(_QWORD *)(v10 + 64);
  else
    v15 = *(_QWORD *)(v11 + 64);
  if (v13 != v14)
  {
    v16 = AssociatedTypeWitness;
    v17 = *(unsigned __int8 *)(v13 + v15);
    if (v17 >= 2)
    {
      if (v15 <= 3)
        v18 = v15;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
      v19 = *(_QWORD *)(v8 - 8);
    else
      v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (v17 == 1)
      v20 = v8;
    else
      v20 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v13, v20);
    v21 = *(unsigned __int8 *)(v14 + v15);
    if (v21 >= 2)
    {
      if (v15 <= 3)
        v22 = v15;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    v23 = v21 == 1;
    if (v21 == 1)
      v24 = v11;
    else
      v24 = v10;
    if (v21 == 1)
      v25 = v8;
    else
      v25 = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v13, v14, v25);
    *(_BYTE *)(v13 + v15) = v23;
  }
  v26 = v13 + v15 + 1 + 7;
  v27 = v14 + v15 + 1 + 7;
  v28 = (v27 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
  v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v29 &= 0xFFFFFFFFFFFFFFF8;
  v28 &= 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)v29 = *(_QWORD *)v28;
  *(_QWORD *)(v29 + 8) = v30;
  swift_retain();
  swift_release();
  v31 = (_QWORD *)((v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_release();
  v34 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  swift_retain();
  swift_release();
  v37 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for OutlineGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;

  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v5 >= 2)
    v5 = *(_DWORD *)a2 + 2;
  if (v5 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_QWORD *)(v7 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80) | *(unsigned __int8 *)(v9 + 80);
  v12 = v11 + 25;
  v13 = ~v11;
  v14 = (v11 + 25 + a2) & ~v11;
  if (*(_QWORD *)(v10 + 64) <= *(_QWORD *)(v9 + 64))
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v10 + 64);
  v16 = *(unsigned __int8 *)(v14 + v15);
  if (v16 >= 2)
  {
    if (v15 <= 3)
      v17 = v15;
    else
      v17 = 4;
    __asm { BR              X16 }
  }
  v18 = (v12 + a1) & v13;
  v19 = v16 == 1;
  if (v16 == 1)
  {
    v9 = *(_QWORD *)(v7 - 8);
    v20 = v7;
  }
  else
  {
    v20 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))((v12 + a1) & v13, v14, v20);
  *(_BYTE *)(v18 + v15) = v19;
  v21 = (_QWORD *)((v15 + 8 + v18) & 0xFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v15 + 8 + v14) & 0xFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
  v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
  v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  *(_OWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for OutlineGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  _OWORD *v34;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 24);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    v7 = *(unsigned __int8 *)(a2 + 24);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 24) = v8;
  }
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_QWORD *)(v9 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80) | *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 25 + a1) & ~v13;
  v15 = (v13 + 25 + a2) & ~v13;
  if (*(_QWORD *)(v12 + 64) <= *(_QWORD *)(v11 + 64))
    v16 = *(_QWORD *)(v11 + 64);
  else
    v16 = *(_QWORD *)(v12 + 64);
  if (v14 != v15)
  {
    v17 = AssociatedTypeWitness;
    v18 = *(unsigned __int8 *)(v14 + v16);
    if (v18 >= 2)
    {
      if (v16 <= 3)
        v19 = v16;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 1)
      v20 = *(_QWORD *)(v9 - 8);
    else
      v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (v18 == 1)
      v21 = v9;
    else
      v21 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v14, v21);
    v22 = *(unsigned __int8 *)(v15 + v16);
    if (v22 >= 2)
    {
      if (v16 <= 3)
        v23 = v16;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    v24 = v22 == 1;
    if (v22 == 1)
      v25 = v12;
    else
      v25 = v11;
    if (v22 == 1)
      v26 = v9;
    else
      v26 = v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v14, v15, v26);
    *(_BYTE *)(v14 + v16) = v24;
  }
  v27 = v14 + v16 + 1 + 7;
  v28 = (_QWORD *)((v15 + v16 + 1 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8) = *v28;
  v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v29 &= 0xFFFFFFFFFFFFFFF8;
  v30 = (_OWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  *(_OWORD *)v29 = *v30;
  swift_release();
  v31 = (_OWORD *)((v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFF8);
  *v31 = *v32;
  swift_release();
  v33 = (_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_OWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFF8);
  *v33 = *v34;
  swift_release();
  *(_OWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlineGroup(int *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v8 + 64) > v7)
    v7 = *(_QWORD *)(v8 + 64);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v6 + 80);
  v10 = v7 + 8;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v13 = ((((((((((v10 + ((v9 + 25) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v14 = v13 & 0xFFFFFFF8;
  v15 = a2 - 2147483646;
  if ((v13 & 0xFFFFFFF8) != 0)
    v15 = 2;
  if (v15 >= 0x10000)
    v16 = 4;
  else
    v16 = 2;
  if (v15 < 0x100)
    v17 = 1;
  else
    v17 = v16;
  if (v17 == 4)
  {
    v18 = *(int *)((char *)a1 + v13);
    if (!v18)
      goto LABEL_5;
  }
  else if (v17 == 2)
  {
    v18 = *(unsigned __int16 *)((char *)a1 + v13);
    if (!v18)
      goto LABEL_5;
  }
  else
  {
    v18 = *((unsigned __int8 *)a1 + v13);
    if (!v18)
    {
LABEL_5:
      v11 = *(_QWORD *)((v10 + (((unint64_t)a1 + v9 + 25) & ~v9)) & 0xFFFFFFFFFFFFF8);
      if (v11 >= 0xFFFFFFFF)
        LODWORD(v11) = -1;
      return (v11 + 1);
    }
  }
  v19 = v18 - 1;
  if (v14)
  {
    v19 = 0;
    v20 = *a1;
  }
  else
  {
    v20 = 0;
  }
  return (v20 | v19) ^ 0x80000000;
}

void storeEnumTagSinglePayload for OutlineGroup(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(unsigned __int8 *)(v10 + 80) | *(unsigned __int8 *)(v8 + 80);
  if (a3 < 0)
  {
    v13 = a3 - 2147483646;
    if ((((((((((((_DWORD)v9 + 8 + (((_DWORD)v11 + 25) & ~(_DWORD)v11)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v12 = 1;
    else
      v12 = v14;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X13 }
  }
  else
  {
    v12 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((((((((((((_DWORD)v9 + 8 + (((_DWORD)v11 + 25) & ~(_DWORD)v11)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    bzero(a1, ((((((((((v9 + 8 + ((v11 + 25) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = a2 ^ 0x80000000;
  }
  __asm { BR              X10 }
}

void sub_187195880()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (!v1)
    JUMPOUT(0x18719586CLL);
  JUMPOUT(0x187195850);
}

void sub_18719588C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18719586CLL);
}

void sub_187195894()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18719586CLL);
}

ValueMetadata *type metadata accessor for OutlineSubgroupChildren()
{
  return &type metadata for OutlineSubgroupChildren;
}

void sub_1871958B0()
{
  type metadata accessor for OutlinePrimitive();
}

uint64_t sub_1871958EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(v1 + 56);
  v5 = v2;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlinePrimitive<A, B, C, D, E>, a1, &v4);
}

void type metadata accessor for OutlineGroup.ChildPath()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined consume of StateOrBinding<Set<B>><A, B, C, D, E><A1>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_18719596C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(a1, *(_QWORD **)(v2 + 72), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2, *(_QWORD *)(v2 + 64));
}

uint64_t partial apply for closure #1 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Binding();
  return closure #1 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1+ ((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64)+ ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))+ 7) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t objectdestroy_53Tm()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Binding();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v4 = (v3 + 96) & ~v3;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0 + v4 + *(int *)(v2 + 32), AssociatedTypeWitness);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(type metadata accessor for Binding() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #2 in closure #1 in static OutlineGroup.ChildPath.binding<A>(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_187195C7C()
{
  swift_release();
  return swift_deallocObject();
}

void _CrownHapticsConfiguration.Notch.Strength.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static _CrownHapticsConfiguration.Notch.RestingPosition.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _CrownHapticsConfiguration.Notch.RestingPosition.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _CrownHapticsConfiguration.Notch.RestingPosition.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _CrownHapticsConfiguration.Notch.init(from:to:strength:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _CrownHapticsConfiguration.Notch.init(from:to:restingPosition:strength:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _CrownHapticsConfigurationProvider.notchRadius(forHeight:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type _CrownHapticsConfiguration.Notch.Strength and conformance _CrownHapticsConfiguration.Notch.Strength()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.Strength and conformance _CrownHapticsConfiguration.Notch.Strength;
  if (!lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.Strength and conformance _CrownHapticsConfiguration.Notch.Strength)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CrownHapticsConfiguration.Notch.Strength, &type metadata for _CrownHapticsConfiguration.Notch.Strength);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.Strength and conformance _CrownHapticsConfiguration.Notch.Strength);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _CrownHapticsConfiguration.Notch.RestingPosition and conformance _CrownHapticsConfiguration.Notch.RestingPosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.RestingPosition and conformance _CrownHapticsConfiguration.Notch.RestingPosition;
  if (!lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.RestingPosition and conformance _CrownHapticsConfiguration.Notch.RestingPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CrownHapticsConfiguration.Notch.RestingPosition, &type metadata for _CrownHapticsConfiguration.Notch.RestingPosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CrownHapticsConfiguration.Notch.RestingPosition and conformance _CrownHapticsConfiguration.Notch.RestingPosition);
  }
  return result;
}

uint64_t destroy for _CrownHapticsConfiguration(uint64_t a1)
{
  return outlined consume of _CrownHapticsConfiguration(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for _CrownHapticsConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of _CrownHapticsConfiguration(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _CrownHapticsConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of _CrownHapticsConfiguration(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of _CrownHapticsConfiguration(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for _CrownHapticsConfiguration(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of _CrownHapticsConfiguration(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _CrownHapticsConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _CrownHapticsConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _CrownHapticsConfiguration(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveInjectEnumTag for _CrownHapticsConfiguration(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _CrownHapticsConfiguration()
{
  return &type metadata for _CrownHapticsConfiguration;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _CrownHapticsConfiguration.Notch(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _CrownHapticsConfiguration.Notch(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _CrownHapticsConfiguration.Notch()
{
  return &type metadata for _CrownHapticsConfiguration.Notch;
}

ValueMetadata *type metadata accessor for _CrownHapticsConfiguration.Notch.Strength()
{
  return &type metadata for _CrownHapticsConfiguration.Notch.Strength;
}

uint64_t storeEnumTagSinglePayload for _CrownHapticsConfiguration.Notch.Strength(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187196070 + 4 * byte_187C10B95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1871960A4 + 4 * byte_187C10B90[v4]))();
}

uint64_t sub_1871960A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871960AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1871960B4);
  return result;
}

uint64_t sub_1871960C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1871960C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1871960CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871960D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _CrownHapticsConfiguration.Notch.RestingPosition()
{
  return &type metadata for _CrownHapticsConfiguration.Notch.RestingPosition;
}

uint64_t dispatch thunk of _CrownHapticsConfigurationProvider.makeConfiguration()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void static _CrownHapticsConfiguration.Notch.Strength.== infix(_:_:)()
{
  static _CrownHapticsConfiguration.Notch.RestingPosition.== infix(_:_:)();
}

void _CrownHapticsConfiguration.Notch.Strength.hash(into:)()
{
  _CrownHapticsConfiguration.Notch.RestingPosition.hash(into:)();
}

uint64_t destroy for SectionAccumulator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SectionAccumulator(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  id v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = (_OWORD *)(a1 + 24);
  v5 = a2 + 24;
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 24, v5, v6);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v5 + 32);
  }
  v9 = *(void **)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v11 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SectionAccumulator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 48) = v4;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 24, a2 + 24);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 24);
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 40) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
LABEL_8:
  v7 = *(void **)(a1 + 64);
  v8 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for SectionAccumulator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v5;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for SectionAccumulator()
{
  return &type metadata for SectionAccumulator;
}

uint64_t destroy for SectionAccumulator.Item(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);

  if (*(_QWORD *)(a1 + 64))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 152);
  if (v3 >> 1 != 0xFFFFFFFF)
    return outlined consume of SectionIndexLabel(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), v3);
  return result;
}

uint64_t initializeWithCopy for SectionAccumulator.Item(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  v7 = v5;
  if (v6)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = v8;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 >> 1 == 0xFFFFFFFF)
  {
    v11 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v11;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 136);
    v13 = *(_QWORD *)(a2 + 144);
    v14 = *(_QWORD *)(a2 + 160);
    outlined copy of SectionIndexLabel(v12, v13, v10);
    *(_QWORD *)(a1 + 136) = v12;
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v10;
    *(_QWORD *)(a1 + 160) = v14;
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  return a1;
}

uint64_t assignWithCopy for SectionAccumulator.Item(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(void **)(a1 + 48);
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = v5;

  v7 = (_OWORD *)(a1 + 56);
  v8 = (_OWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    }
    else
    {
      outlined destroy of _ViewList_Section(a1 + 56);
      v10 = *(_OWORD *)(a2 + 65);
      *v7 = *v8;
      *(_OWORD *)(a1 + 65) = v10;
    }
  }
  else if (v9)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *v8;
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    *v7 = v11;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v12 = (_OWORD *)(a1 + 136);
  v13 = (_OWORD *)(a2 + 136);
  v14 = *(_QWORD *)(a2 + 152);
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 152) >> 1 == 0xFFFFFFFFLL)
  {
    if (v15 == 0x1FFFFFFFELL)
    {
      v16 = *(_OWORD *)(a2 + 152);
      *v12 = *v13;
      *(_OWORD *)(a1 + 152) = v16;
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 136);
      v19 = *(_QWORD *)(a2 + 144);
      v20 = *(_QWORD *)(a2 + 160);
      outlined copy of SectionIndexLabel(v18, v19, *(_QWORD *)(a2 + 152));
      *(_QWORD *)(a1 + 136) = v18;
      *(_QWORD *)(a1 + 144) = v19;
      *(_QWORD *)(a1 + 152) = v14;
      *(_QWORD *)(a1 + 160) = v20;
    }
  }
  else if (v15 == 0x1FFFFFFFELL)
  {
    outlined destroy of SectionIndexLabel((uint64_t *)(a1 + 136));
    v17 = *(_OWORD *)(a2 + 152);
    *v12 = *v13;
    *(_OWORD *)(a1 + 152) = v17;
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 136);
    v22 = *(_QWORD *)(a2 + 144);
    v23 = *(_QWORD *)(a2 + 160);
    outlined copy of SectionIndexLabel(v21, v22, *(_QWORD *)(a2 + 152));
    v24 = *(_QWORD *)(a1 + 136);
    v25 = *(_QWORD *)(a1 + 144);
    v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 136) = v21;
    *(_QWORD *)(a1 + 144) = v22;
    *(_QWORD *)(a1 + 152) = v14;
    *(_QWORD *)(a1 + 160) = v23;
    outlined consume of SectionIndexLabel(v24, v25, v26);
  }
  v27 = *(_QWORD *)(a2 + 168);
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v27;
  return a1;
}

uint64_t outlined destroy of _ViewList_Section(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE4160] - 8) + 8))();
  return a1;
}

uint64_t *outlined destroy of SectionIndexLabel(uint64_t *a1)
{
  destroy for SectionIndexLabel(a1);
  return a1;
}

uint64_t assignWithTake for SectionAccumulator.Item(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;

  if (*(_QWORD *)(a1 + 64))
  {
    v6 = *(_QWORD *)(a2 + 64);
    if (v6)
    {
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      goto LABEL_6;
    }
    outlined destroy of _ViewList_Section(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
LABEL_6:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a1 + 152);
  if (v7 >> 1 != 0xFFFFFFFF)
  {
    v8 = *(_QWORD *)(a2 + 152);
    if (v8 >> 1 != 0xFFFFFFFF)
    {
      v10 = *(_QWORD *)(a2 + 160);
      v11 = *(_QWORD *)(a1 + 136);
      v12 = *(_QWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 152) = v8;
      *(_QWORD *)(a1 + 160) = v10;
      outlined consume of SectionIndexLabel(v11, v12, v7);
      goto LABEL_11;
    }
    outlined destroy of SectionIndexLabel((uint64_t *)(a1 + 136));
  }
  v9 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v9;
LABEL_11:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionAccumulator.Item(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 178))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionAccumulator.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 178) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 178) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionAccumulator.Item()
{
  return &type metadata for SectionAccumulator.Item;
}

_BYTE *protocol witness for OptionSet.init(rawValue:) in conformance SectionAccumulator.Item.Features@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.union(_:) in conformance SectionAccumulator.Item.Features@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.intersection(_:) in conformance SectionAccumulator.Item.Features@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SectionAccumulator.Item.Features@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance SectionAccumulator.Item.Features(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance SectionAccumulator.Item.Features@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance SectionAccumulator.Item.Features@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formUnion(_:) in conformance SectionAccumulator.Item.Features(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formIntersection(_:) in conformance SectionAccumulator.Item.Features(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SectionAccumulator.Item.Features(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.subtracting(_:) in conformance SectionAccumulator.Item.Features@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance SectionAccumulator.Item.Features(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance SectionAccumulator.Item.Features(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance SectionAccumulator.Item.Features(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance SectionAccumulator.Item.Features()
{
  _BYTE *v0;

  return *v0 == 0;
}

_BYTE *protocol witness for SetAlgebra.subtract(_:) in conformance SectionAccumulator.Item.Features(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance SectionAccumulator.Item.Features@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance SectionAccumulator.Item.Features@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t SectionAccumulator.Item.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = v1 + 48 * v2;
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v6 = __OFADD__(v4, v5);
  v7 = v4 + v5;
  if (v6)
    goto LABEL_8;
  v8 = *(_QWORD *)(v1 + 72);
  if (v7 < v8)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  result = v7 - v8;
  if (__OFSUB__(v7, v8))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

double static SectionAccumulator.Item.implicitSentinel(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  _QWORD v9[5];
  _BYTE v10[40];
  uint64_t v11;
  __int128 v12[3];

  static Update.ensure<A>(_:)();
  v4 = *(_QWORD *)&v12[0];
  outlined init with copy of TableColumnList(a1, (uint64_t)v12);
  _ViewList_SublistTransform.init()();
  v5 = v11;
  outlined init with copy of TableColumnList(a1, (uint64_t)v10);
  type metadata accessor for _ContiguousArrayStorage<SectionAccumulator.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  outlined init with copy of TableColumnList((uint64_t)v10, (uint64_t)v9);
  _ViewList_SublistTransform.init()();
  SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(v9, &v8, v4, 0, v6 + 32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  *(_BYTE *)a2 = 1;
  outlined init with take of OptionalBinaryInteger(v12, a2 + 8);
  result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = v5;
  *(_QWORD *)(a2 + 96) = v6;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0x1FFFFFFFELL;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_WORD *)(a2 + 176) = 256;
  return result;
}

double SectionAccumulator.formResult(from:listAttribute:)(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  outlined destroy of ViewList?(v3 + 24);
  v6 = outlined init with copy of TableColumnList((uint64_t)a1, v3 + 24);
  MEMORY[0x18D75B908](v6);
  v14 = 0;
  _ViewList_SublistTransform.init()();
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v12 = 2;
  v11[2] = v3;
  (*(void (**)(uint64_t *, uint64_t *, unint64_t, uint64_t *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v8 + 48))(&v14, &v12, a2 | ((HIDWORD(a2) & 1) << 32), &v13, partial apply for closure #1 in SectionAccumulator.formResult(from:listAttribute:), v11, v7, v8);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 16) < *(_QWORD *)(v3 + 80))
    SectionAccumulator.appendImplicitSection()();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 72) + 16))
  {
    if (*(uint64_t *)(v3 + 80) < 1)
    {
      v9 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      type metadata accessor for _ContiguousArrayStorage<SectionAccumulator.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.Item>);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
      static SectionAccumulator.Item.implicitSentinel(_:)((uint64_t)a1, v9 + 32);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 72) = v9;
  }
  static Update.end()();
  outlined destroy of ViewList?(v3 + 24);
  result = 0.0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_QWORD *)(v3 + 56) = 0;
  return result;
}

void SectionAccumulator.apply(start:style:node:transform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[104];

  outlined init with copy of _ViewList_Node(a3, (uint64_t)v3);
  __asm { BR              X10 }
}

uint64_t sub_187196EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  uint64_t (*v15)(uint64_t, uint64_t, unint64_t, _QWORD *, uint64_t (*)(), double);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = *(unsigned int *)(v5 - 144);
  v7 = *(_BYTE *)(v5 - 140);
  outlined init with take of OptionalBinaryInteger((__int128 *)(v5 - 184), v0 + 80);
  v8 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 112);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 80), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
  if (*(_QWORD *)(v0 + 352))
  {
    v10 = specialized Set.contains(_:)(MEMORY[0x1E0CE4818], *(_QWORD *)(v0 + 352));
    swift_bridgeObjectRelease();
    if (!v10)
    {
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104));
      v17 = ViewList.count.getter();
      outlined init with copy of TableColumnList(v0 + 80, v0 + 312);
      *(_QWORD *)(v0 + 272) = *v4;
      v18 = *(_QWORD *)(v1 + 8);
      swift_bridgeObjectRetain();
      *(_BYTE *)(v0 + 352) = v7;
      SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)((_QWORD *)(v0 + 312), (uint64_t *)(v0 + 272), v17, v18, v0 + 352);
      v19 = *(_QWORD *)(v0 + 360);
      *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 352);
      v20 = *(_QWORD *)(v0 + 368);
      v21 = *(_BYTE *)(v0 + 376);
      *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 384);
      v22 = *(char **)v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
      v24 = *((_QWORD *)v22 + 2);
      v23 = *((_QWORD *)v22 + 3);
      if (v24 >= v23 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v22);
      *((_QWORD *)v22 + 2) = v24 + 1;
      v25 = &v22[48 * v24];
      *((_QWORD *)v25 + 4) = *(_QWORD *)(v0 + 56);
      *((_QWORD *)v25 + 5) = v19;
      *((_QWORD *)v25 + 6) = v20;
      v25[56] = v21;
      *((_OWORD *)v25 + 4) = *(_OWORD *)(v0 + 64);
      *(_QWORD *)v1 = v22;
      if (__OFADD__(v18, v17))
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v1 + 8) = v18 + v17;
        v26 = *(_QWORD *)(v1 + 80);
        v27 = __OFADD__(v26, v17);
        v28 = v26 + v17;
        if (!v27)
        {
          *(_QWORD *)(v1 + 80) = v28;
          __swift_destroy_boxed_opaque_existential_1(v0 + 80);
          v16 = 1;
          return v16 & 1;
        }
      }
      __break(1u);
      JUMPOUT(0x1871977C4);
    }
  }
  v11 = *(_QWORD *)(v0 + 112);
  v12 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104));
  *(_QWORD *)(v0 + 352) = v3;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD *, uint64_t (*)(), double))(v11 + 48);
  *(_BYTE *)(v0 + 312) = v7;
  v16 = v15(v2, v0 + 352, v6 | ((unint64_t)v7 << 32), v4, partial apply for closure #1 in SectionAccumulator.formResult(from:listAttribute:), v14);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return v16 & 1;
}

uint64_t SectionAccumulator.appendImplicitSection()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t result;
  __int128 v23[11];
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  _BYTE v45[48];

  outlined init with copy of ViewList?((uint64_t)(v0 + 3), (uint64_t)&v26);
  if (!v27)
  {
    outlined destroy of ViewList?((uint64_t)&v26);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_12;
  }
  outlined init with take of OptionalBinaryInteger(&v26, (uint64_t)v45);
  v1 = v0[2];
  v2 = *v0;
  outlined init with copy of TableColumnList((uint64_t)v45, (uint64_t)v23);
  v3 = (void *)v0[8];
  v4 = v3;
  swift_bridgeObjectRetain();
  _ViewList_SublistTransform.init()();
  v5 = (char *)v0[9];
  v6 = *((_QWORD *)v5 + 2);
  if (HIDWORD(v6))
  {
LABEL_12:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v7 = v25;
  LOBYTE(v26) = 1;
  outlined init with take of OptionalBinaryInteger(v23, (uint64_t)&v26 + 8);
  v28 = v3;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v7;
  v34 = v2;
  v35 = 0;
  v36 = 0;
  v37 = v6;
  v38 = v1;
  v39 = 0;
  v40 = 0;
  v41 = 0x1FFFFFFFELL;
  v42 = 0;
  v43 = 0;
  v44 = 256;
  outlined init with copy of SectionAccumulator.Item((uint64_t)&v26, (uint64_t)v23);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, v5);
  v9 = *((_QWORD *)v5 + 2);
  v8 = *((_QWORD *)v5 + 3);
  if (v9 >= v8 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v5);
  *((_QWORD *)v5 + 2) = v9 + 1;
  v10 = &v5[184 * v9];
  v11 = v23[0];
  v12 = v23[1];
  v13 = v23[3];
  *((_OWORD *)v10 + 4) = v23[2];
  *((_OWORD *)v10 + 5) = v13;
  *((_OWORD *)v10 + 2) = v11;
  *((_OWORD *)v10 + 3) = v12;
  v14 = v23[4];
  v15 = v23[5];
  v16 = v23[7];
  *((_OWORD *)v10 + 8) = v23[6];
  *((_OWORD *)v10 + 9) = v16;
  *((_OWORD *)v10 + 6) = v14;
  *((_OWORD *)v10 + 7) = v15;
  v17 = v23[8];
  v18 = v23[9];
  v19 = v23[10];
  *((_WORD *)v10 + 104) = v24;
  *((_OWORD *)v10 + 11) = v18;
  *((_OWORD *)v10 + 12) = v19;
  *((_OWORD *)v10 + 10) = v17;
  v0[9] = (uint64_t)v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v0;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v21 + 16));
  }
  else
  {
    *v0 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v21 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  outlined destroy of SectionAccumulator.Item((uint64_t)&v26);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  v0[1] = 0;
  return result;
}

uint64_t SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;

  v9 = *a2;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  if (v12)
  {
    v13 = v12;
    if ((_ViewList_SublistTransform.isEmpty.getter() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v14 = 0;
    }
    else
    {
      type metadata accessor for _ViewList_ID._Views<SectionAccumulator.TransformedIDs>();
      v17 = swift_allocObject();
      v14 = 0;
      *(_QWORD *)(v17 + 24) = v13;
      *(_QWORD *)(v17 + 32) = v9;
      *(_BYTE *)(v17 + 16) = 1;
      v13 = v17;
    }
  }
  else
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3 & ~(a3 >> 63), 0, MEMORY[0x1E0DEE9D8]);
    v15 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    MEMORY[0x1E0C80A78](v15, v16);
    ViewList.applyIDs(from:listAttribute:transform:to:)();
    swift_bridgeObjectRelease();
    v13 = (uint64_t)v19;
    v14 = 1;
  }
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = v13;
  *(_BYTE *)(a5 + 24) = v14;
  *(_QWORD *)(a5 + 32) = a3;
  *(_QWORD *)(a5 + 40) = a4;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t closure #1 in SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = a1[1];
  v7 = *a2;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v7;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1, (char *)v7);
    v7 = result;
    *a2 = result;
  }
  v10 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    v7 = result;
    *a2 = result;
  }
  *(_QWORD *)(v7 + 16) = v10 + 1;
  v11 = v7 + 16 * v10;
  *(_QWORD *)(v11 + 32) = v5;
  *(_QWORD *)(v11 + 40) = v6;
  v12 = *a3 - 1;
  if (__OFSUB__(*a3, 1))
  {
    __break(1u);
  }
  else
  {
    *a3 = v12;
    return v12 != 0;
  }
  return result;
}

uint64_t SectionAccumulator.RowIDs.endIndex.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = a1 + 48 * v1;
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  result = v3 + v4;
  if (__OFADD__(v3, v4))
    __break(1u);
  return result;
}

uint64_t SectionAccumulator.RowIDs.subscript.getter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = (_QWORD *)(a2 + 72);
    while (1)
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v6 = __OFADD__(*v3, v5);
      v7 = *v3 + v5;
      if (v6)
        break;
      if (v7 > result)
        goto LABEL_7;
      v3 += 6;
      if (!--v2)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_6:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_7:
  v8 = result - v4;
  if (__OFSUB__(result, v4))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = *(v3 - 5);
  v10 = *(v3 - 4);
  v11 = *(v3 - 3);
  v12 = *((unsigned __int8 *)v3 - 16);
  if (!v12)
  {
    outlined copy of SectionAccumulator.RowIDs.IDs(v9, v10, v11, 0);
    dispatch thunk of _ViewList_ID_Views.subscript.getter();
    _ViewList_ID.canonicalID.getter();
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = 0;
LABEL_15:
    outlined consume of SectionAccumulator.RowIDs.IDs(v13, v14, v15, v16);
    return swift_bridgeObjectRelease();
  }
  if (v12 != 1)
  {
    outlined copy of SectionAccumulator.RowIDs.IDs(v9, v10, v11, 2);
    _ViewList_ID.ElementCollection.subscript.getter();
    _ViewList_ID.canonicalID.getter();
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = 2;
    goto LABEL_15;
  }
  if ((v8 & 0x8000000000000000) == 0)
  {
    if (v8 < *(_QWORD *)(v9 + 16))
      return _ViewList_ID.canonicalID.getter();
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  __int128 v9[2];
  char v10;

  v2 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of TableColumnCollection.Backing(v1, (uint64_t)v9);
    if ((v10 & 1) != 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)&v9[0] + 16);
      result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v9, (uint64_t)v6);
      v4 = v7;
      v5 = v8;
      __swift_project_boxed_opaque_existential_1(v6, v7);
      v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    }
    if ((v2 & 0x8000000000000000) == 0 && v2 < v3)
      return v2;
  }
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = a2 + 48 * v4;
    v7 = *(_QWORD *)(v5 + 16);
    v6 = *(_QWORD *)(v5 + 24);
    v2 = __OFADD__(v6, v7);
    v8 = v6 + v7;
    if (v2)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    v9 = *(_QWORD *)(a2 + 72);
    if (result >= v8)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    v9 = 0;
    if (result >= 0)
      goto LABEL_10;
  }
  if (result < v9)
    goto LABEL_10;
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionAccumulator.RowIDs(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (!v4)
  {
    v9 = 0;
LABEL_6:
    if (v2 < v4 && v2 >= v9)
    {
      *result = v2;
      return result;
    }
    goto LABEL_12;
  }
  v5 = v3 + 48 * v4;
  v7 = *(_QWORD *)(v5 + 16);
  v6 = *(_QWORD *)(v5 + 24);
  v8 = __OFADD__(v6, v7);
  v4 = v6 + v7;
  if (!v8)
  {
    v9 = *(_QWORD *)(v3 + 72);
    goto LABEL_6;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance SectionAccumulator.RowIDs(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;

  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *v2);
}

void protocol witness for Collection.startIndex.getter in conformance SectionAccumulator.RowIDs(_QWORD *a1@<X8>)
{
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
    *a1 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  else
    *a1 = 0;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = SectionAccumulator.RowIDs.endIndex.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance SectionAccumulator.RowIDs(uint64_t a1, uint64_t *a2))()
{
  uint64_t *v2;

  SectionAccumulator.RowIDs.subscript.getter(*a2, *v2);
  return destroy for UpdateViewCache;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  *a2 = specialized Collection<>.subscript.getter(*a1, a1[1], *v2);
  a2[1] = v4;
  a2[2] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Collection.indices.getter in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;

  result = specialized RandomAccessCollection<>.indices.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance SectionAccumulator.RowIDs()
{
  _BOOL8 *v0;

  return specialized Collection.isEmpty.getter(*v0);
}

uint64_t protocol witness for Collection.count.getter in conformance SectionAccumulator.RowIDs()
{
  uint64_t *v0;

  return specialized Collection.count.getter(*v0);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance SectionAccumulator.RowIDs(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance SectionAccumulator.RowIDs(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

uint64_t outlined copy of SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 2 || a4 == 1)
    return swift_bridgeObjectRetain();
  if (!a4)
    return swift_retain();
  return result;
}

uint64_t outlined consume of SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 2 || a4 == 1)
    return swift_bridgeObjectRelease();
  if (!a4)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for SectionAccumulator.RowIDs.Chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for SectionAccumulator.RowIDs.Chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  outlined consume of SectionAccumulator.RowIDs.IDs(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SectionAccumulator.RowIDs.Chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of SectionAccumulator.RowIDs.IDs(v6, v7, v8, v9);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionAccumulator.RowIDs.Chunk(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionAccumulator.RowIDs.Chunk(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionAccumulator.RowIDs.Chunk()
{
  return &type metadata for SectionAccumulator.RowIDs.Chunk;
}

ValueMetadata *type metadata accessor for SectionAccumulator.RowIDs()
{
  return &type metadata for SectionAccumulator.RowIDs;
}

ValueMetadata *type metadata accessor for SectionAccumulator.Item.Features()
{
  return &type metadata for SectionAccumulator.Item.Features;
}

unint64_t lazy protocol witness table accessor for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.Item.Features, &type metadata for SectionAccumulator.Item.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.Item.Features, &type metadata for SectionAccumulator.Item.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.Item.Features, &type metadata for SectionAccumulator.Item.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.Item.Features, &type metadata for SectionAccumulator.Item.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.RowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<SectionAccumulator.RowIDs> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SectionAccumulator.RowIDs>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8], MEMORY[0x1E0DEC908]);
}

uint64_t protocol witness for Collection.index(after:) in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance SectionAccumulator.RowIDs(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *v1;
  v3 = *result;
  v4 = *(_QWORD *)(*v1 + 16);
  if (v4)
  {
    v5 = v2 + 48 * v4;
    v7 = *(_QWORD *)(v5 + 16);
    v6 = *(_QWORD *)(v5 + 24);
    v8 = __OFADD__(v6, v7);
    v4 = v6 + v7;
    if (v8)
      goto LABEL_11;
    v9 = *(_QWORD *)(v2 + 72);
  }
  else
  {
    v9 = 0;
  }
  if (v3 < v4 && v3 >= v9)
  {
    *result = v3 + 1;
    return result;
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance SectionAccumulator.RowIDs(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
    v3 = *(_QWORD *)(v2 + 72);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SectionAccumulator.RowIDs()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance SectionAccumulator.RowIDs(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8C0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.RowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.RowIDs> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<SectionAccumulator.RowIDs>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.RowIDs> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs, (uint64_t)&type metadata for SectionAccumulator.RowIDs, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB890]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for Range<Int>();
    v6 = v5;
    v7 = lazy protocol witness table accessor for type Int and conformance Int();
    v8[0] = MEMORY[0x1E0DEB458];
    v8[1] = v7;
    result = MEMORY[0x18D75FFDC](a2, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB848]);
    v6 = v5;
    v7 = lazy protocol witness table accessor for type Int and conformance Int();
    v8[0] = MEMORY[0x1E0DEB458];
    v8[1] = v7;
    result = MEMORY[0x18D75FFDC](a2, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<SectionAccumulator.RowIDs>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs, (uint64_t)&type metadata for SectionAccumulator.RowIDs, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ViewList?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for ViewList?, (uint64_t (*)(uint64_t))type metadata accessor for ViewList, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SectionAccumulator.TransformedIDs.subscript.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD v4[11];

  dispatch thunk of _ViewList_ID_Views.subscript.getter();
  ViewTraitCollection.init()();
  LOBYTE(v4[0]) = 1;
  _ViewList_Sublist.init(start:count:id:elements:traits:list:)();
  _ViewList_SublistTransform.apply(sublist:)();
  v2 = v4[3];
  *a1 = v4[2];
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return outlined destroy of _ViewList_Sublist((uint64_t)v4);
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance SectionAccumulator.TransformedIDs@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    result = (_QWORD *)dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    if ((v3 & 0x8000000000000000) == 0 && v3 < (uint64_t)result)
    {
      *a2 = v3;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionAccumulator.TransformedIDs(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    result = (uint64_t *)dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    if ((v1 & 0x8000000000000000) == 0 && v1 < (uint64_t)result)
    {
      *v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SectionAccumulator.TransformedIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance SectionAccumulator.TransformedIDs(_QWORD *a1))()
{
  SectionAccumulator.TransformedIDs.subscript.getter(a1);
  return destroy for MakeChildOutputs;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SectionAccumulator.TransformedIDs@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = v2;
  v6 = *a1;
  v5 = a1[1];
  v7 = *v2;
  v8 = v3[1];
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v6 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= v5)
  {
    a2[2] = v7;
    a2[3] = v8;
    *a2 = v6;
    a2[1] = v5;
    swift_retain();
    return swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance SectionAccumulator.TransformedIDs@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance SectionAccumulator.TransformedIDs()
{
  return dispatch thunk of _ViewList_ID_Views.endIndex.getter() == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance SectionAccumulator.TransformedIDs@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    result = (_QWORD *)dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4)
    {
      *a3 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SectionAccumulator.TransformedIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance SectionAccumulator.TransformedIDs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (v2 < 0 || result < v2)
  {
    __break(1u);
  }
  else
  {
    result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    if ((v3 & 0x8000000000000000) == 0 && result >= v3)
      return v3 - v2;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance SectionAccumulator.TransformedIDs@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (v3 < 0 || v3 >= result)
    __break(1u);
  else
    *a2 = v3 + 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance SectionAccumulator.TransformedIDs(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (v2 < 0 || v2 >= result)
    __break(1u);
  else
    *a1 = v2 + 1;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance SectionAccumulator.TransformedIDs@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance SectionAccumulator.TransformedIDs()
{
  uint64_t v0;
  uint64_t result;

  v0 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    if ((v0 & 0x8000000000000000) == 0 && result >= v0)
      return v0;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SectionAccumulator.TransformedIDs()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance SectionAccumulator.TransformedIDs(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t partial apply for closure #1 in static SectionAccumulator.Item.implicitSentinel(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 24));
  result = ViewList.count.getter();
  *a1 = result;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<SectionAccumulator.Item>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _ContiguousArrayStorage();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t partial apply for closure #1 in SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(a1, *(uint64_t **)(v1 + 16), *(uint64_t **)(v1 + 24));
}

void type metadata accessor for _ViewList_ID._Views<SectionAccumulator.TransformedIDs>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewList_ID._Views<SectionAccumulator.TransformedIDs>)
  {
    lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs();
    lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs();
    v0 = type metadata accessor for _ViewList_ID._Views();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<SectionAccumulator.TransformedIDs>);
  }
}

unint64_t lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.TransformedIDs, &type metadata for SectionAccumulator.TransformedIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.TransformedIDs, &type metadata for SectionAccumulator.TransformedIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.TransformedIDs, &type metadata for SectionAccumulator.TransformedIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.TransformedIDs, &type metadata for SectionAccumulator.TransformedIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.TransformedIDs, &type metadata for SectionAccumulator.TransformedIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

uint64_t sub_187199024()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (uint64_t (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in SectionAccumulator.formResult(from:listAttribute:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3;
  uint64_t v5;

  v5 = *a2;
  SectionAccumulator.apply(start:style:node:transform:)(a1, (uint64_t)&v5, a3);
  return v3 & 1;
}

_QWORD *initializeBufferWithCopyOfBuffer for SectionAccumulator.TransformedIDs(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SectionAccumulator.TransformedIDs(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SectionAccumulator.TransformedIDs(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SectionAccumulator.TransformedIDs()
{
  return &type metadata for SectionAccumulator.TransformedIDs;
}

uint64_t destroy for SectionAccumulator.RowIDs.IDs(uint64_t a1)
{
  return outlined consume of SectionAccumulator.RowIDs.IDs(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of SectionAccumulator.RowIDs.IDs(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of SectionAccumulator.RowIDs.IDs(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTag for SectionAccumulator.RowIDs.IDs(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for SectionAccumulator.RowIDs.IDs(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SectionAccumulator.RowIDs.IDs()
{
  return &type metadata for SectionAccumulator.RowIDs.IDs;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SectionAccumulator.TransformedIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.TransformedIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<SectionAccumulator.TransformedIDs> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SectionAccumulator.TransformedIDs>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8], MEMORY[0x1E0DEC908]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SectionAccumulator.TransformedIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.TransformedIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.TransformedIDs> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<SectionAccumulator.TransformedIDs>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.TransformedIDs> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs, (uint64_t)&type metadata for SectionAccumulator.TransformedIDs, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SectionAccumulator.TransformedIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SectionAccumulator.TransformedIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<SectionAccumulator.TransformedIDs>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs, (uint64_t)&type metadata for SectionAccumulator.TransformedIDs, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for VariadicViewForest(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187199668 + 4 * byte_187C11310[v17 - 1]))();
}

void storeEnumTagSinglePayload for VariadicViewForest(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void sub_187199944()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187199930);
}

void sub_187199954()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187199930);
}

void sub_18719995C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187199930);
}

uint64_t type metadata accessor for VariadicViewForest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VariadicViewForest);
}

_UNKNOWN **base witness table accessor for View in VariadicViewForest<A, B>()
{
  return &protocol witness table for VariadicViewForest<A, B>;
}

uint64_t static VariadicViewForest._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void (*v15)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t *), _BYTE *, uint64_t, uint64_t);
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  _BYTE v34[4];
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;

  v8 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = a2[6];
  v13 = *((_DWORD *)a2 + 20);
  v35 = *a2;
  v36 = v9;
  v38 = *(_OWORD *)(a2 + 3);
  v37 = v10;
  v39 = v11;
  v40 = v12;
  v41 = *(_OWORD *)(a2 + 7);
  v42 = a2[9];
  v43 = v13;
  v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(&v25, a3, a5);
  PropertyList.subscript.setter();
  v22 = a3;
  v23 = a4;
  v24 = a5;
  LODWORD(v25) = v8;
  type metadata accessor for VariadicViewForest(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v25 = v35;
  v26 = v36;
  v27 = v37;
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = v8;
  v15 = *(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t *), _BYTE *, uint64_t, uint64_t))(a5 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v34, &v25, partial apply for closure #2 in static VariadicViewForest._makeView(view:inputs:), v17, a3, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in static VariadicViewForest._makeView(view:inputs:)(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *((_DWORD *)a1 + 2);
  v10 = a1[2];
  v11 = a1[5];
  v14 = *a1;
  v15 = v9;
  v16 = v10;
  v17 = *(_OWORD *)(a1 + 3);
  v18 = v11;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _ViewListInputs.init(_:options:)();
  LODWORD(v14) = a2;
  v12 = static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)((int *)&v14, &v19, a3, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v28 = *a1;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v29 = a2[2];
  v30 = v9;
  v12 = a2[5];
  v11 = a2[6];
  v34 = a2[7];
  v35 = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 16);
  v31 = a2[9];
  v32 = *((unsigned __int8 *)a2 + 80);
  v33 = v11;
  static TupleDescriptor.tupleDescription(_:)();
  v13 = v39;
  type metadata accessor for VariadicViewForest(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  type metadata accessor for TupleView();
  v27[1] = v27;
  v14 = a2[3];
  v15 = a2[4];
  v36 = a3;
  v37 = a4;
  v38 = a5;
  LODWORD(v39) = v28;
  v16 = v13;
  v17 = v29;
  _GraphValue.subscript.getter();
  v18 = v30;
  type metadata accessor for _GraphValue();
  LODWORD(v39) = _GraphValue.value.getter();
  v40 = v18;
  v41 = v10;
  v42 = v17;
  v43 = v14;
  v44 = v15;
  v45 = v12;
  v46 = v35;
  v47 = v34;
  v48 = v33;
  v49 = v31;
  v50 = v32;
  v51 = 0;
  v52 = MEMORY[0x1E0DEE9D8];
  v19 = *(_QWORD *)(v16 + 16);
  if (v19)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35 = v16;
    v20 = (uint64_t *)(v16 + 48);
    do
    {
      v21 = *(v20 - 1);
      v22 = *v20;
      v20 += 3;
      v51 = AGTupleElementOffset();
      v23 = type metadata accessor for VariadicViewForest.ListOutputsTreeVisitor(0, a3, a4, a5);
      v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VariadicViewForest<A, B>.ListOutputsTreeVisitor, v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8))(v21, v21, v22, v23, v24);
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    v25 = v52;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v25;
}

uint64_t static VariadicViewForest._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  char v27;
  _BYTE v28[4];
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  char v37;

  v8 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = *((_DWORD *)a2 + 16);
  v13 = a2[9];
  v14 = *((_BYTE *)a2 + 80);
  v29 = *a2;
  v30 = v9;
  v32 = *(_OWORD *)(a2 + 3);
  v31 = v10;
  v33 = v11;
  v34 = *((_OWORD *)a2 + 3);
  v35 = v12;
  v36 = v13;
  v37 = v14;
  v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15(&v19, a3, a5);
  PropertyList.subscript.setter();
  LODWORD(v19) = v8;
  type metadata accessor for VariadicViewForest(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v19 = v29;
  v20 = v30;
  v21 = v31;
  v22 = v32;
  v23 = v33;
  v24 = v34;
  v25 = v35;
  v26 = v36;
  v27 = v37;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  *(_QWORD *)(v16 + 32) = a5;
  *(_DWORD *)(v16 + 40) = v8;
  v17 = *(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v17(v28, &v19, partial apply for closure #2 in static VariadicViewForest._makeViewList(view:inputs:), v16, a3, a5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static VariadicViewForest._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[2] = type metadata accessor for VariadicViewForest(0, a2, a3, a4);
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t closure #2 in static VariadicViewForest._makeViewList(view:inputs:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  int v34;

  v7 = *(_QWORD *)a1;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v19 = *(_BYTE *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v15 = v23 | v12;
  v34 = a2;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v16 = *(_QWORD *)(a1 + 32);
  v26 = *(_QWORD *)(a1 + 24);
  v27 = v16;
  v28 = v10;
  v29 = v11;
  v30 = v15;
  v31 = v13;
  v32 = v14;
  v33 = v19;
  v17 = static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(&v34, &v23, a3, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v17;
}

uint64_t static VariadicViewForest._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void (*v11)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v12)(__int128 *, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD v15[7];
  int v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v21 = *(_QWORD *)a1;
  v7 = v21;
  *((_QWORD *)&v21 + 1) = v8;
  v22 = v9;
  v23 = v10;
  v11 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v11(&v18, a2, a4);
  PropertyList.subscript.setter();
  v18 = v21;
  v19 = v22;
  v20 = v23;
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = v7;
  v15[6] = v8;
  v16 = v9;
  v17 = v10;
  v12 = *(uint64_t (**)(__int128 *, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(a4 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = v12(&v18, partial apply for closure #1 in static VariadicViewForest._viewListCount(inputs:), v15, a2, a4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

uint64_t closure #1 in static VariadicViewForest._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  static TupleDescriptor.tupleDescription(_:)();
  v20 = MEMORY[0x1E0DEE9D8];
  v11 = *(_QWORD *)(v19 + 16);
  if (v11)
  {
    v12 = type metadata accessor for VariadicViewForest.CountsTreeVisitor(0, a6, a7, a8);
    swift_retain();
    swift_bridgeObjectRetain();
    v13 = (uint64_t *)(v19 + 48);
    do
    {
      v14 = *(v13 - 1);
      v15 = *v13;
      v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VariadicViewForest<A, B>.CountsTreeVisitor, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8))(v14, v14, v15, v12, v16);
      v13 += 3;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v17 = v20;
  }
  else
  {
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  swift_release();
  return v17;
}

__n128 VariadicViewForest.ListOutputsTreeVisitor.visit<A>(type:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  __n128 result;
  __int128 v7;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v1 = v0;
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  static View.makeDebuggableViewList(view:inputs:)();
  v2 = *(char **)(v0 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[72 * v4];
  *((_OWORD *)v5 + 2) = v7;
  result = v8;
  v5[96] = v11;
  *((_OWORD *)v5 + 4) = v9;
  *((_OWORD *)v5 + 5) = v10;
  *((__n128 *)v5 + 3) = v8;
  *(_QWORD *)(v1 + 104) = v2;
  return result;
}

uint64_t closure #1 in static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for VariadicViewForest(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 44);
  v10[2] = v5;
  v11 = type metadata accessor for TupleView();
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, v11, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v12;
}

double protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance VariadicViewForest<A, B>.ListOutputsTreeVisitor()
{
  double result;

  *(_QWORD *)&result = VariadicViewForest.ListOutputsTreeVisitor.visit<A>(type:)().n128_u64[0];
  return result;
}

uint64_t VariadicViewForest.CountsTreeVisitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v5 = v4;
  v6 = *((_DWORD *)v4 + 4);
  v7 = *((_QWORD *)v4 + 3);
  v16 = *v4;
  v17 = v6;
  v18 = v7;
  v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a4 + 40))(&v16, a3, a4);
  v10 = v9;
  v11 = *((_QWORD *)v5 + 4);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
    v11 = result;
  }
  v14 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v11);
    v11 = result;
  }
  *(_QWORD *)(v11 + 16) = v14 + 1;
  v15 = v11 + 16 * v14;
  *(_QWORD *)(v15 + 32) = v8;
  *(_BYTE *)(v15 + 40) = v10 & 1;
  *((_QWORD *)v5 + 4) = v11;
  return result;
}

uint64_t protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance VariadicViewForest<A, B>.CountsTreeVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return VariadicViewForest.CountsTreeVisitor.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance VariadicViewForest<A, B>(int *a1, uint64_t *a2, uint64_t *a3)
{
  return static VariadicViewForest._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance VariadicViewForest<A, B>(int *a1, uint64_t *a2, uint64_t *a3)
{
  return static VariadicViewForest._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance VariadicViewForest<A, B>(uint64_t a1, uint64_t *a2)
{
  return static VariadicViewForest._viewListCount(inputs:)(a1, a2[2], a2[3], a2[4]);
}

void protocol witness for View.body.getter in conformance VariadicViewForest<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for VariadicViewForest<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t specialized static VariadicViewForestRoot._viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD *))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;

  v13[0] = a1;
  v13[1] = a2;
  v14 = a3;
  v15 = a4;
  result = a5(v13);
  v6 = *(_QWORD *)(result + 16);
  if (v6)
  {
    v7 = 0;
    v8 = (unsigned __int8 *)(result + 40);
    v9 = 1;
    while (1)
    {
      v10 = *v8;
      if ((v10 & 1) != 0)
      {
        v7 = 0;
      }
      else
      {
        v11 = *((_QWORD *)v8 - 1);
        v12 = __OFADD__(v7, v11);
        v7 += v11;
        if (v12)
        {
          __break(1u);
          return result;
        }
      }
      if (v6 == v9)
        goto LABEL_12;
      ++v9;
      v8 += 16;
      if (v10)
      {
        while (v9 != v6)
          --v6;
        v7 = 0;
LABEL_12:
        swift_bridgeObjectRelease();
        return v7;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static VariadicViewForestRoot._makeView(root:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(__int128 *)@<X2>, _QWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 64);
  v19 = *(_OWORD *)(a1 + 48);
  v20 = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v16 = *(_OWORD *)a1;
  v21 = *(_DWORD *)(a1 + 80);
  v17 = v6;
  v18 = v4;
  v7 = a2(&v16);
  outlined retain of _ViewInputs(a1);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI16_ViewListOutputsVG_14AttributeGraph0I0VyAF0fG0_pGs5NeverOTg503_s7d12UI22Variadicf52ForestRootPAAE05_makeD4List4root6inputs4bodyAA01_dH7h6VAA11_j10ValueVyxG_u25_dH6InputsVSayAIGANctFZ09I23M00P0VyAA0dH0_pGAIXEfU_AF01_fG6InputsVTf1cn_nTf4ng_n(v7, (_OWORD *)a1);
  outlined release of _ViewInputs(a1);
  swift_bridgeObjectRelease();
  static DynamicPropertyCache.fields(of:)();
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 64);
  v19 = *(_OWORD *)(a1 + 48);
  v20 = v9;
  v10 = *(_OWORD *)(a1 + 16);
  v16 = *(_OWORD *)a1;
  v21 = *(_DWORD *)(a1 + 80);
  v17 = v10;
  v18 = v8;
  outlined retain of _ViewInputs(a1);
  specialized static VariadicViewForestRoot.makeBody(root:lists:inputs:fields:)();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NavigationSplitCore and conformance NavigationSplitCore();
  static View.makeDebuggableView(view:inputs:)();
  if ((v13 & 1) == 0)
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a3 = v14;
  a3[1] = v15;
  return result;
}

void specialized static VariadicViewForestRoot.makeBody(root:lists:inputs:fields:)()
{
  id v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    v0 = (id)AGSubgraphGetCurrent();
    if (v0)
    {
      v1 = v0;
      type metadata accessor for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>(0);
      lazy protocol witness table accessor for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>();
      BodyAccessor.makeBody(container:inputs:fields:)();

      return;
    }
    __break(1u);
  }
  _StringGuts.grow(_:)(75);
  v2._object = (void *)0x8000000187BD9540;
  v2._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x6F52747365726F46;
  v3._object = (void *)0xEA0000000000746FLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x6C63206120736920;
  v4._object = (void *)0xEC0000002E737361;
  String.append(_:)(v4);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static VariadicViewForestRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(__int128 *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 48);
  v17 = v5;
  v6 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)a2;
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v6;
  v15 = v4;
  v7 = a3(&v13);
  outlined retain of _ViewListInputs(a2);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI16_ViewListOutputsVG_14AttributeGraph0I0VyAF0fG0_pGs5NeverOTg503_s7d12UI22Variadicf52ForestRootPAAE05_makeD4List4root6inputs4bodyAA01_dH7h6VAA11_j10ValueVyxG_u25_dH6InputsVSayAIGANctFZ09I23M00P0VyAA0dH0_pGAIXEfU_AF01_fG6InputsVTf1cn_nTf4ng_n(v7, (_OWORD *)a2);
  outlined release of _ViewListInputs(a2);
  swift_bridgeObjectRelease();
  static DynamicPropertyCache.fields(of:)();
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 48);
  v17 = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)a2;
  v18 = *(_BYTE *)(a2 + 80);
  v14 = v10;
  v15 = v8;
  outlined retain of _ViewListInputs(a2);
  specialized static VariadicViewForestRoot.makeBody(root:lists:inputs:fields:)();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NavigationSplitCore and conformance NavigationSplitCore();
  static View.makeDebuggableViewList(view:inputs:)();
  if ((v12 & 1) == 0)
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t ForestRootBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char v10;
  uint64_t v11;
  uint64_t i;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;

  v10 = a2;
  v17 = MEMORY[0x1E0DEE9D8];
  LOBYTE(v18) = 0;
  v11 = *(_QWORD *)(a3 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain_n();
    for (i = 0; i != v11; ++i)
    {
      v19 = *(_DWORD *)(a3 + 4 * i + 32);
      closure #1 in ForestRootBodyAccessor.updateBody(of:changed:)((uint64_t)&v17, (uint64_t)&v19, a3, a4);
    }
    a1 = swift_bridgeObjectRelease_n();
    v13 = (char)v18;
    if ((v10 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v13 = 0;
    if ((a2 & 1) != 0)
      goto LABEL_9;
  }
  if ((v13 & 1) == 0)
    return swift_bridgeObjectRelease();
LABEL_9:
  v17 = a3;
  v18 = a4;
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = type metadata accessor for ForestRootBodyAccessor(0, a5, a6, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForestRootBodyAccessor<A>, v16);
  BodyAccessor.setBody(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ForestRootBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t Value;
  char v7;
  char v8;
  id v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  _BYTE v18[40];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[40];

  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  v8 = v7;
  outlined init with copy of TableColumnList(Value, (uint64_t)v23);
  outlined init with copy of TableColumnList((uint64_t)v23, (uint64_t)v18);
  v9 = a4;
  default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
  _VariadicView_Children.init(_:contentSubgraph:transform:)();
  v10 = *(char **)a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
  v12 = *((_QWORD *)v10 + 2);
  v11 = *((_QWORD *)v10 + 3);
  if (v12 >= v11 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v12 + 1;
  v13 = &v10[56 * v12];
  v14 = v19;
  v15 = v20;
  v16 = v21;
  *((_QWORD *)v13 + 10) = v22;
  *((_OWORD *)v13 + 3) = v15;
  *((_OWORD *)v13 + 4) = v16;
  *((_OWORD *)v13 + 2) = v14;
  *(_QWORD *)a1 = v10;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(a1 + 8) | v8) & 1;
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ForestRootBodyAccessor<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ForestRootBodyAccessor.updateBody(of:changed:)(a1, a2, *(_QWORD *)v3, *(void **)(v3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static VariadicViewForestRoot._makeView(root:inputs:body:) in conformance _NavigationSplitReader.ForestRoot@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(__int128 *)@<X2>, _QWORD *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v3 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a1 + 64);
  v7 = *(_DWORD *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return specialized static VariadicViewForestRoot._makeView(root:inputs:body:)((uint64_t)v6, a2, a3);
}

uint64_t protocol witness for static VariadicViewForestRoot._makeViewList(root:inputs:body:) in conformance _NavigationSplitReader.ForestRoot(unsigned int *a1, uint64_t a2, uint64_t (*a3)(__int128 *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static VariadicViewForestRoot._makeViewList(root:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static VariadicViewForestRoot._viewListCount(inputs:body:) in conformance _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t (*a2)(_QWORD *))
{
  return specialized static VariadicViewForestRoot._viewListCount(inputs:body:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI16_ViewListOutputsVG_14AttributeGraph0I0VyAF0fG0_pGs5NeverOTg503_s7d12UI22Variadicf52ForestRootPAAE05_makeD4List4root6inputs4bodyAA01_dH7h6VAA11_j10ValueVyxG_u25_dH6InputsVSayAIGANctFZ09I23M00P0VyAA0dH0_pGAIXEfU_AF01_fG6InputsVTf1cn_nTf4ng_n(uint64_t a1, _OWORD *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v12[4];
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v13;
    v6 = a1 + 32;
    v7 = a2[1];
    v12[0] = *a2;
    v12[1] = v7;
    v12[2] = a2[2];
    do
    {
      outlined retain of _GraphInputs((uint64_t)v12);
      _ViewListInputs.init(_:)();
      v8 = _ViewListOutputs.makeAttribute(inputs:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v13 = v3;
      v10 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
        v3 = v13;
      }
      *(_QWORD *)(v3 + 16) = v10 + 1;
      *(_DWORD *)(v3 + 4 * v10 + 32) = v8;
      v6 += 72;
      --v2;
    }
    while (v2);
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitCore and conformance NavigationSplitCore()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitCore and conformance NavigationSplitCore;
  if (!lazy protocol witness table cache variable for type NavigationSplitCore and conformance NavigationSplitCore)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitCore, &type metadata for NavigationSplitCore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitCore and conformance NavigationSplitCore);
  }
  return result;
}

void type metadata accessor for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>)
  {
    v2 = lazy protocol witness table accessor for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot();
    v4 = type metadata accessor for ForestRootBodyAccessor(a1, (uint64_t)&type metadata for _NavigationSplitReader.ForestRoot, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>);
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.ForestRoot, &type metadata for _NavigationSplitReader.ForestRoot);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot);
  }
  return result;
}

uint64_t type metadata accessor for ForestRootBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ForestRootBodyAccessor);
}

unint64_t lazy protocol witness table accessor for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>)
  {
    type metadata accessor for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForestRootBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static VariadicViewForest._viewListCount(inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static VariadicViewForest._viewListCount(inputs:)(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned int *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t type metadata accessor for VariadicViewForest.CountsTreeVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VariadicViewForest.CountsTreeVisitor);
}

uint64_t partial apply for closure #1 in static VariadicViewForest._makeViewList(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static VariadicViewForest._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t sub_18719B810()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static VariadicViewForest._makeViewList(view:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static VariadicViewForest._makeViewList(view:inputs:)(a1, *(_DWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #1 in static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VariadicViewForest.ListOutputsTreeVisitor);
}

uint64_t partial apply for closure #2 in static VariadicViewForest._makeView(view:inputs:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #2 in static VariadicViewForest._makeView(view:inputs:)(a1, *(_DWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t destroy for VariadicViewForest.ListOutputsTreeVisitor()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v3 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VariadicViewForest.ListOutputsTreeVisitor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VariadicViewForest.ListOutputsTreeVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for VariadicViewForest.CountsTreeVisitor()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VariadicViewForest.CountsTreeVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VariadicViewForest.CountsTreeVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VariadicViewForest.CountsTreeVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for ForestRootBodyAccessor(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  v4 = v3;
  return a1;
}

void destroy for ForestRootBodyAccessor(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *assignWithCopy for ForestRootBodyAccessor(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for ForestRootBodyAccessor(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t partial apply for closure #2 in ForestRootBodyAccessor.updateBody(of:changed:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[3] + 56))(v0[5], v0[2]);
}

void TableCollectionViewCell.updateConfiguration(using:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  id v42;
  _BOOL4 v43;
  id v44;
  objc_class *v45;
  Class isa;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  void (*v58)(uint64_t *, uint64_t, uint64_t);
  uint64_t v59;
  char v60;
  char *v61;
  char *v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  char v67;
  char *v68;
  void *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char v76;
  char *v77;
  char v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t ObjectType;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[3];
  uint64_t v100;
  uint64_t v101;
  objc_super v102;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v4 = type metadata accessor for UICellConfigurationState();
  v96 = *(_QWORD *)(v4 - 8);
  v97 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v88 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v90 = (char *)&v85 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v89 = (char *)&v85 - v12;
  v94 = type metadata accessor for UIBackgroundConfiguration();
  v98 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94, v13);
  v15 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v91 = (char *)&v85 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v95 = (char *)&v85 - v21;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v85 - v29;
  v31 = type metadata accessor for UIListContentConfiguration();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v35 = (char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UIListContentConfiguration?, v36);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v85 - v39;
  v41 = (void *)UICellConfigurationState.traitCollection.getter();
  v42 = objc_msgSend(v41, sel_horizontalSizeClass);
  v92 = v26;
  v87 = v15;
  if (v42 == (id)1)
  {

    v43 = 1;
  }
  else
  {
    v44 = objc_msgSend(v41, sel_userInterfaceIdiom);

    v43 = v44 == 0;
  }
  v45 = (objc_class *)ObjectType;
  ObjectType = a1;
  isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  v102.receiver = v2;
  v102.super_class = v45;
  objc_msgSendSuper2(&v102, sel__bridgedUpdateConfigurationUsingState_, isa);

  v48 = direct field offset for TableCollectionViewCell.isHeader;
  if (*((_BYTE *)v2 + direct field offset for TableCollectionViewCell.isHeader) == 1 && v43)
  {
    static UIListContentConfiguration.prominentInsetGroupedHeader()();
    v49 = v97;
    v100 = v97;
    v101 = MEMORY[0x1E0DC2018];
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v99);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v96 + 16))(boxed_opaque_existential_1, ObjectType, v49);
    UIListContentConfiguration.updated(for:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v40, 0, 1, v31);
    v51 = (uint64_t)v2 + direct field offset for ListCollectionViewCellBase.lastConfiguration;
    swift_beginAccess();
    outlined assign with take of UIListContentConfiguration?((uint64_t)v40, v51);
    v47 = swift_endAccess();
  }
  MEMORY[0x18D75D9FC](v47);
  v52 = v98;
  v53 = v94;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v30, 1, v94))
  {
    v54 = outlined destroy of UIBackgroundConfiguration?((uint64_t)v30);
    goto LABEL_9;
  }
  v69 = (void *)UIBackgroundConfiguration.customView.getter();
  v54 = outlined destroy of UIBackgroundConfiguration?((uint64_t)v30);
  if (!v69
    || (type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0),
        v70 = swift_dynamicCastClass(),
        v69,
        !v70))
  {
LABEL_9:
    if (!v43 && (*((_BYTE *)v2 + v48) & 1) != 0)
    {
      v68 = v92;
      static UIBackgroundConfiguration.clear()();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v68, 0, 1, v53);
      MEMORY[0x18D75DA08](v68);
      return;
    }
    v55 = v91;
    MEMORY[0x18D75DA14](v54);
    v56 = v97;
    v100 = v97;
    v101 = MEMORY[0x1E0DC2018];
    v57 = __swift_allocate_boxed_opaque_existential_1(v99);
    v58 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v96 + 16);
    v59 = ObjectType;
    v58(v57, ObjectType, v56);
    UIBackgroundConfiguration.updated(for:)();
    v86 = *(void (**)(char *, uint64_t))(v52 + 8);
    v86(v55, v53);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
    v60 = UICellConfigurationState.isHighlighted.getter();
    v62 = v89;
    v61 = v90;
    if ((v60 & 1) == 0)
      goto LABEL_23;
    v63 = (void *)UIBackgroundConfiguration.backgroundColor.getter();
    v64 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    v65 = v64;
    if (v63)
    {
      if (!v64)
      {

        goto LABEL_23;
      }
      type metadata accessor for UIColor();
      v66 = v63;
      v67 = static NSObject.== infix(_:_:)();

      v53 = v94;
      if ((v67 & 1) == 0)
      {
LABEL_23:
        v71 = UICellConfigurationState.isSelected.getter();
        v72 = v97;
        v58((uint64_t *)v62, v59, v97);
        if ((v71 & 1) != 0)
          v73 = 1;
        else
          v73 = UICellConfigurationState.isHighlighted.getter();
        v74 = *(void (**)(char *, uint64_t))(v96 + 8);
        v74(v62, v72);
        v58((uint64_t *)v61, v59, v72);
        v75 = v98;
        if ((v73 & 1) != 0)
        {
          v76 = UICellConfigurationState.isFocused.getter();
          v77 = v88;
          v58((uint64_t *)v88, (uint64_t)v61, v72);
          if ((v76 & 1) != 0)
          {
            v78 = UICellConfigurationState.isEditing.getter();
            v74(v77, v72);
            v74(v61, v72);
            v79 = v86;
            if ((v78 & 1) == 0)
              goto LABEL_33;
          }
          else
          {
            v74(v77, v72);
            v74(v61, v72);
            v79 = v86;
          }
          v80 = v87;
          static UIBackgroundConfiguration.listCell()();
          v100 = v72;
          v101 = MEMORY[0x1E0DC2018];
          v81 = __swift_allocate_boxed_opaque_existential_1(v99);
          v58(v81, v59, v72);
          v82 = v91;
          UIBackgroundConfiguration.updated(for:)();
          v79(v80, v53);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
          UIBackgroundConfiguration.backgroundColor.getter();
          v79(v82, v53);
          UIBackgroundConfiguration.backgroundColor.setter();
        }
        else
        {
          v74(v61, v72);
          v79 = v86;
        }
LABEL_33:
        v83 = v92;
        v84 = v95;
        (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v92, v95, v53);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v83, 0, 1, v53);
        MEMORY[0x18D75DA08](v83);
        v79(v84, v53);
        return;
      }
    }
    else if (v64)
    {

      goto LABEL_23;
    }
    UIBackgroundConfiguration.backgroundColor.setter();
    goto LABEL_23;
  }
}

uint64_t @objc TableCollectionViewCell.updateConfiguration(using:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v9;

  v2 = type metadata accessor for UICellConfigurationState();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = a1;
  TableCollectionViewCell.updateConfiguration(using:)((uint64_t)v6);

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void __swiftcall TableCollectionViewCell.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  _BYTE *v3;
  _BYTE *v4;
  Class isa;
  double y;
  double x;
  objc_class *ObjectType;
  id v9;
  id v10;
  BOOL v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  objc_super v17;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  ObjectType = (objc_class *)swift_getObjectType();
  v9 = objc_msgSend(v3, sel_traitCollection);
  if (objc_msgSend(v9, sel_horizontalSizeClass) == (id)1)
    goto LABEL_10;
  v10 = objc_msgSend(v9, sel_userInterfaceIdiom);
  v11 = v4[direct field offset for TableCollectionViewCell.isHeader] != 1 || v10 == 0;
  if (v11
    || *(double *)&v4[direct field offset for TableCollectionViewCell.headerLeadingMargin] <= 0.0
    && objc_msgSend(v9, sel_userInterfaceIdiom) != (id)6)
  {
    goto LABEL_10;
  }
  v12 = objc_msgSend(v4, sel_window);
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v12, x, y);

    MEMORY[0x1E0C80A78](v14, v15);
    static Update.ensure<A>(_:)();
    if ((v16 & 1) != 0)
    {
LABEL_10:
      v17.receiver = v4;
      v17.super_class = ObjectType;
      -[UIView_optional hitTest:withEvent:](&v17, sel_hitTest_withEvent_, isa, x, y);

      return;
    }

  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in TableCollectionViewCell.hitTest(_:with:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (!*(_QWORD *)(result + direct field offset for ListCollectionViewCellBase.host))
    goto LABEL_6;
  swift_retain();
  v3 = ViewGraph.responderNode.getter();
  result = swift_release();
  if (!v3)
    goto LABEL_6;
  type metadata accessor for ViewResponder();
  v4 = swift_dynamicCastClass();
  v5 = v4 != 0;
  if (!v4 || (v6 = ViewResponder.hitTest(globalPoint:radius:options:)(), result = swift_release(), v6))
    result = swift_release();
  else
LABEL_6:
    v5 = 0;
  *a2 = v5;
  return result;
}

id @objc TableCollectionViewCell.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  TableCollectionViewCell.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

uint64_t TableCollectionViewCell.hostingView<A>(_:willUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  specialized ListCollectionViewCellBase.hostingView<A>(_:willUpdate:)(a2);
  v4 = v2 + direct field offset for ListCollectionViewCellBase.lastConfiguration;
  swift_beginAccess();
  v5 = type metadata accessor for UIListContentConfiguration();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
    UIListContentConfiguration.directionalLayoutMargins.getter();
  swift_endAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

id @objc TableCollectionViewCell.init(frame:)(_BYTE *a1, double a2, double a3, double a4, double a5)
{
  objc_class *ObjectType;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  a1[direct field offset for TableCollectionViewCell.isHeader] = 0;
  *(_QWORD *)&a1[direct field offset for TableCollectionViewCell.headerLeadingMargin] = 0;
  v12.receiver = a1;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_initWithFrame_, a2, a3, a4, a5);
}

id @objc TableCollectionViewCell.init(coder:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  objc_class *ObjectType;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  a1[direct field offset for TableCollectionViewCell.isHeader] = 0;
  *(_QWORD *)&a1[direct field offset for TableCollectionViewCell.headerLeadingMargin] = 0;
  v7.receiver = a1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_initWithCoder_, a3);
}

uint64_t ObjC metadata update function for TableCollectionViewCell()
{
  return type metadata accessor for TableCollectionViewCell();
}

uint64_t partial apply for closure #1 in TableCollectionViewCell.hitTest(_:with:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TableCollectionViewCell.hitTest(_:with:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  type metadata accessor for _AnyPreferenceKey<PlatformItemList.Key>();
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  result = PropertyList.subscript.setter();
  if (v1 != 2)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if ((v1 & 1) != 0)
      PropertyList.subscript.getter();
    return PropertyList.subscript.setter();
  }
  return result;
}

{
  int v1;
  uint64_t result;

  v1 = a1;
  type metadata accessor for _AnyPreferenceKey<PlatformItemList.Key>();
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  result = PropertyList.subscript.setter();
  if (v1 != 2)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if ((v1 & 1) != 0)
      PropertyList.subscript.getter();
    return PropertyList.subscript.setter();
  }
  return result;
}

{
  int v1;
  uint64_t result;

  v1 = a1;
  type metadata accessor for _AnyPreferenceKey<PlatformItemList.Key>();
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  result = PropertyList.subscript.setter();
  if (v1 != 2)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if ((v1 & 1) != 0)
      PropertyList.subscript.getter();
    return PropertyList.subscript.setter();
  }
  return result;
}

{
  int v1;
  uint64_t result;

  v1 = a1;
  type metadata accessor for _AnyPreferenceKey<PlatformItemList.Key>();
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  result = PropertyList.subscript.setter();
  if (v1 != 2)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if ((v1 & 1) != 0)
      PropertyList.subscript.getter();
    return PropertyList.subscript.setter();
  }
  return result;
}

void TableColumn.init(comparator:content:label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[32];

  v17[0] = a8;
  v17[6] = a5;
  v17[7] = a4;
  v17[4] = a3;
  v17[3] = a2;
  v17[2] = a1;
  v17[5] = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17[1] = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[20] = v14;
  v17[21] = v15;
  v17[22] = v16;
  v17[23] = a9;
  v17[24] = a10;
  v17[25] = a11;
  v17[26] = a12;
  v17[27] = a13;
  type metadata accessor for TableColumn();
}

uint64_t sub_18719D364(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = v1 + a1[22];
  *(_OWORD *)v11 = xmmword_187BF9840;
  *(_OWORD *)(v11 + 16) = xmmword_187C11500;
  *(_BYTE *)(v11 + 32) = 0;
  v12 = v1 + a1[23];
  *(_QWORD *)(v12 + 112) = 0;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)v12 = 0u;
  *(_QWORD *)(v9 - 288) = v7;
  *(_QWORD *)(v9 - 280) = v2;
  *(_QWORD *)(v9 - 272) = *(_QWORD *)(v9 - 368);
  *(_QWORD *)(v9 - 264) = v4;
  *(_QWORD *)(v9 - 256) = v3;
  *(_QWORD *)(v9 - 248) = v8;
  *(_QWORD *)(v9 - 240) = v6;
  *(_QWORD *)(v9 - 232) = v5;
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v9 - 352);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableColumn.init(comparator:content:label:), v9 - 304, MEMORY[0x1E0DEDCE8], (uint64_t)&type metadata for SwiftUIAnySortComparator, v15, v9 - 208);
  outlined assign with take of SwiftUIAnySortComparator?(v9 - 208, v12);
  v16 = (_QWORD *)(v1 + a1[21]);
  v17 = *(_QWORD *)(v9 - 336);
  *v16 = *(_QWORD *)(v9 - 344);
  v16[1] = v17;
  v18 = swift_retain();
  v19 = *(_QWORD *)(v9 - 360);
  (*(void (**)(uint64_t))(v9 - 312))(v18);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v14, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 328) + 32))(v1, v19, v4);
}

uint64_t closure #1 in TableColumn.init(comparator:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X6>, uint64_t *a4@<X8>)
{
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  return SwiftUIAnySortComparator.init<A>(_:)((uint64_t)v9, a2, a3, a4);
}

void static TableColumn._makeContent(content:inputs:)(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  _OWORD v8[5];
  int v9;

  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = *((_DWORD *)a2 + 20);
  v2 = *a2;
  v3 = a2[1];
  PreferencesOutputs.init()();
  v8[2] = v4;
  v8[3] = v5;
  v8[4] = v6;
  v9 = v7;
  v8[0] = v2;
  v8[1] = v3;
  outlined retain of _ViewInputs((uint64_t)v8);
  PreferenceKeys.remove<A>(_:)();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  type metadata accessor for TableColumn();
}

uint64_t sub_18719D688()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  int v15;
  uint64_t v16;

  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v2 = *(_DWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v6 = *(_DWORD *)(v0 + 352);
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 272);
  *(_DWORD *)(v0 + 168) = v2;
  *(_QWORD *)(v0 + 176) = v3;
  *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 200) = v4;
  *(_QWORD *)(v0 + 208) = v5;
  *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v0 + 344);
  *(_DWORD *)(v0 + 240) = v6;
  static View.makeDebuggableView(view:inputs:)();
  v7 = *(_DWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 256);
  *(_DWORD *)(v0 + 168) = v7;
  v8 = PreferencesOutputs.subscript.getter();
  v9 = swift_bridgeObjectRelease();
  if ((v8 & 0x100000000) != 0)
  {
    v11 = *(_OWORD *)(v1 - 176);
    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v1 - 192);
    *(_OWORD *)(v0 + 176) = v11;
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v1 - 160);
    *(_QWORD *)(v0 + 256) = MEMORY[0x1E0DEE9D8];
    *(_BYTE *)(v0 + 252) = 0;
    v9 = _GraphInputs.intern<A>(_:id:)();
  }
  v12 = *(_QWORD *)(v1 - 144);
  *(_QWORD *)(v0 + 160) = v12;
  v13 = *(_DWORD *)(v1 - 136);
  *(_DWORD *)(v0 + 168) = v13;
  *(_QWORD *)(v0 + 256) = v12;
  *(_DWORD *)(v0 + 264) = v13;
  MEMORY[0x1E0C80A78](v9, v10);
  outlined retain of [Text.Modifier](v0 + 160);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_release();
  v15 = *(_DWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)v16 = *(_QWORD *)(v0 + 368);
  *(_DWORD *)(v16 + 8) = v15;
  return result;
}

void closure #1 in static TableColumn._makeContent(content:inputs:)()
{
  type metadata accessor for TableColumn();
}

uint64_t sub_18719D8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void partial apply for closure #1 in static TableColumn._makeContent(content:inputs:)()
{
  closure #1 in static TableColumn._makeContent(content:inputs:)();
}

void type metadata accessor for TableColumn()
{
  JUMPOUT(0x18D75FF28);
}

void implicit closure #2 in static TableColumn._makeContent(content:inputs:)(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD v19[14];
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v19[2] = a2;
  v19[3] = a1;
  v29 = *MEMORY[0x1E0C80C00];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v19 - v18;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  v26 = a9;
  v27 = a10;
  v28 = a11;
  type metadata accessor for TableColumn.MakeList();
}

void sub_18719DA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 - 288) = a1;
  *(_QWORD *)(v17 - 280) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v17 - 304) = (char *)&a9 - v18;
  *(_DWORD *)(v17 - 260) = *(_DWORD *)(v17 - 340);
  *(_QWORD *)(v17 - 192) = v9;
  *(_QWORD *)(v17 - 184) = v15;
  *(_QWORD *)(v17 - 176) = v13;
  *(_QWORD *)(v17 - 168) = v12;
  *(_QWORD *)(v17 - 336) = v12;
  *(_QWORD *)(v17 - 160) = v11;
  *(_QWORD *)(v17 - 152) = v16;
  *(_QWORD *)(v17 - 328) = v11;
  *(_QWORD *)(v17 - 312) = v16;
  *(_QWORD *)(v17 - 144) = v10;
  *(_QWORD *)(v17 - 136) = v14;
  *(_QWORD *)(v17 - 320) = v10;
  type metadata accessor for TableColumn();
}

void sub_18719DAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v8 - 340) = _GraphValue.value.getter();
  *(_DWORD *)(v8 - 260) = *(_DWORD *)(v8 - 344);
  *(_QWORD *)(v8 - 192) = v0;
  *(_QWORD *)(v8 - 184) = v6;
  *(_QWORD *)(v8 - 176) = v4;
  *(_QWORD *)(v8 - 168) = v3;
  *(_QWORD *)(v8 - 160) = v2;
  *(_QWORD *)(v8 - 152) = v7;
  *(_QWORD *)(v8 - 144) = v1;
  *(_QWORD *)(v8 - 136) = v5;
  type metadata accessor for TableColumn.MakeLabel();
}

void sub_18719DB20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1;
  *(_QWORD *)(v6 - 208) = a1;
  *(_QWORD *)(v6 - 200) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumn<A, B, C, D>.MakeLabel, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<NSAttributedString>, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedString, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6 - 260, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9, v6 - 224, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  v10 = *(_DWORD *)(v6 - 192);
  v11 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v6 - 160) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v6 - 144) = v11;
  *(_OWORD *)(v6 - 128) = *(_OWORD *)(v5 + 64);
  *(_DWORD *)(v6 - 112) = *(_DWORD *)(v5 + 80);
  v12 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v6 - 192) = *(_OWORD *)v5;
  *(_OWORD *)(v6 - 176) = v12;
  swift_getKeyPath();
  outlined retain of _ViewInputs(v5);
  LODWORD(v7) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = type metadata accessor for UUID();
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(*(_QWORD *)(v6 - 296), 1, 1, v13);
  v14 = *(_DWORD **)(v6 - 304);
  *v14 = *(_DWORD *)(v6 - 340);
  v14[1] = v10;
  v14[2] = v7;
  *(_QWORD *)(v6 - 192) = v1;
  *(_QWORD *)(v6 - 184) = v3;
  v15 = *(_QWORD *)(v6 - 336);
  *(_QWORD *)(v6 - 176) = v2;
  *(_QWORD *)(v6 - 168) = v15;
  v16 = *(_QWORD *)(v6 - 312);
  *(_QWORD *)(v6 - 160) = *(_QWORD *)(v6 - 328);
  *(_QWORD *)(v6 - 152) = v16;
  *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 320);
  *(_QWORD *)(v6 - 136) = v4;
  type metadata accessor for TableColumn.MakeList();
}

uint64_t sub_18719DC8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with take of UUID?(v1, v2 + *(int *)(a1 + 92));
  v4 = *(_QWORD *)(v3 - 288);
  *(_QWORD *)(v3 - 240) = v4;
  *(_QWORD *)(v3 - 232) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumn<A, B, C, D>.MakeList, v4);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableColumnList>, (uint64_t (*)(uint64_t))type metadata accessor for TableColumnList, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10, v3 - 256, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 280) + 8))(v2, v4);
  return *(unsigned int *)(v3 - 192);
}

void partial apply for implicit closure #2 in static TableColumn._makeContent(content:inputs:)()
{
  uint64_t v0;

  implicit closure #2 in static TableColumn._makeContent(content:inputs:)(*(_DWORD *)(v0 + 80), *(_DWORD *)(v0 + 84), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

double key path getter for EnvironmentValues.tableColumnConfiguration : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  double result;
  char v3;
  __int128 v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  __int16 v8;

  lazy protocol witness table accessor for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key();
  EnvironmentValues.subscript.getter();
  *(_BYTE *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v4;
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;
  return result;
}

uint64_t static TableColumn._tableColumnCount(inputs:)()
{
  return 1;
}

id TableColumn.MakeLabel.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v8;

  v0 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (id *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  AGGraphGetValue();
  v4 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v4, (uint64_t)v3);
  swift_bridgeObjectRelease();
  v5 = *v3;
  v6 = *v3;
  outlined destroy of PlatformItemList.Item((uint64_t)v3);
  if (!v5)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_init);
  return v6;
}

void TableColumn.MakeList.column.getter()
{
  type metadata accessor for TableColumn();
}

uint64_t sub_18719DF28(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t TableColumn.MakeList.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned __int8 v9;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)(Value + 8);
  v3 = *(_QWORD *)(Value + 16);
  v5 = *(_QWORD *)(Value + 24);
  v6 = *(_QWORD *)(Value + 32);
  v7 = *(_QWORD *)(Value + 48);
  v8 = *(_WORD *)(Value + 56);
  *(_BYTE *)a1 = *(_BYTE *)Value;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v9 = *(_BYTE *)(Value + 40);
  *(_BYTE *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = v8;
  return outlined copy of TableColumnCustomizationID?(v4, v3, v5, v6, v9);
}

id protocol witness for Rule.value.getter in conformance TableColumn<A, B, C, D>.MakeLabel@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = TableColumn.MakeLabel.value.getter();
  *a1 = result;
  return result;
}

void TableColumn.MakeList.updateValue()()
{
  type metadata accessor for TableColumn();
}

void sub_18719E0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v11 - 296) = (char *)&a9 - v12;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&a9 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&a9 - v21;
  v23 = v9 + *(int *)(v10 + 92);
  outlined init with copy of UUID?(v23, (uint64_t)&a9 - v21);
  v24 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24);
  outlined destroy of UUID?((uint64_t)v22);
  if (v26 == 1)
  {
    UUID.init()();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v18, 0, 1, v24);
    outlined assign with take of UUID?((uint64_t)v18, v23);
  }
  TableColumn.MakeList.column.getter();
}

void sub_18719E1F0()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  outlined init with copy of UUID?(v3, v2);
  if (v1(v2, 1, v0) != 1)
  {
    type metadata accessor for NSAttributedString();
    AGGraphGetValue();
    TableColumn.MakeList.configuration.getter(v4 - 224);
    v5 = *(_BYTE *)(v4 - 184);
    v6 = *(_QWORD *)(v4 - 176);
    v7 = *(_WORD *)(v4 - 168);
    *(_BYTE *)(v4 - 288) = *(_BYTE *)(v4 - 224);
    *(_OWORD *)(v4 - 280) = *(_OWORD *)(v4 - 216);
    *(_OWORD *)(v4 - 264) = *(_OWORD *)(v4 - 200);
    *(_BYTE *)(v4 - 248) = v5;
    *(_QWORD *)(v4 - 240) = v6;
    *(_WORD *)(v4 - 232) = v7;
    v8 = *(_QWORD *)(v4 - 312);
    *(_QWORD *)(v4 - 160) = *(_QWORD *)(v4 - 304);
    *(_QWORD *)(v4 - 152) = v8;
    v9 = *(_QWORD *)(v4 - 328);
    *(_QWORD *)(v4 - 144) = *(_QWORD *)(v4 - 320);
    *(_QWORD *)(v4 - 136) = v9;
    v10 = *(_QWORD *)(v4 - 344);
    *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 336);
    *(_QWORD *)(v4 - 120) = v10;
    v11 = *(_QWORD *)(v4 - 360);
    *(_QWORD *)(v4 - 112) = *(_QWORD *)(v4 - 352);
    *(_QWORD *)(v4 - 104) = v11;
    type metadata accessor for TableColumn.UnaryTableColumnList();
  }
  __break(1u);
  JUMPOUT(0x18719E388);
}

void TableColumn.UnaryTableColumnList.init(column:id:label:configuration:)()
{
  type metadata accessor for TableColumn();
}

void sub_18719E424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
  type metadata accessor for TableColumn.UnaryTableColumnList();
}

__n128 sub_18719E458(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char v14;
  uint64_t v15;

  v3 = v1 + a1[21];
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v7, v4);
  *(_QWORD *)(v1 + a1[22]) = v15;
  v5 = v1 + a1[23];
  *(_BYTE *)v5 = v14;
  result = v13;
  *(__n128 *)(v5 + 8) = v13;
  *(_QWORD *)(v5 + 24) = v12;
  *(_QWORD *)(v5 + 32) = v11;
  *(_BYTE *)(v5 + 40) = v10;
  *(_QWORD *)(v5 + 48) = v9;
  *(_WORD *)(v5 + 56) = v8;
  return result;
}

uint64_t TableColumn.UnaryTableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unsigned __int8 v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  __int16 v28;

  v6 = a5;
  v20 = v5 + *(int *)(a3 + 84);
  v19 = *(_QWORD *)(v5 + *(int *)(a3 + 88));
  v9 = v5 + *(int *)(a3 + 92);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v12 = *(_QWORD *)(v9 + 32);
  v14 = *(_QWORD *)(v9 + 48);
  v15 = *(_WORD *)(v9 + 56);
  v16 = *(_BYTE *)(v9 + 40);
  v21[0] = *(_BYTE *)v9;
  v22 = v10;
  v23 = v11;
  v24 = v13;
  v25 = v12;
  v26 = v16;
  v27 = v14;
  v28 = v15;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a5 + 8);
  outlined copy of TableColumnCustomizationID?(v10, v11, v13, v12, v16);
  LOBYTE(v6) = v17(v5, v20, v19, v21, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 72), *(_QWORD *)(a3 + 64), a4, v6);
  outlined consume of TableColumnCustomizationID?(v10, v11, v13, v12, v16);
  return v6 & 1;
}

uint64_t protocol witness for TableColumnList.visitColumns<A>(applying:from:) in conformance TableColumn<A, B, C, D>.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TableColumn.UnaryTableColumnList.visitColumns<A>(applying:from:)(a1, a2, a5, a3, a4);
}

void protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance TableColumn<A, B, C, D>(uint64_t a1, __int128 *a2)
{
  static TableColumn._makeContent(content:inputs:)(a1, a2);
}

void TableColumn<>.init(_:sortUsing:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v26 = a8;
  v27 = a2;
  v31 = a7;
  v32 = a4;
  v28 = a1;
  v29 = a6;
  v33 = a5;
  v34 = a9;
  v30 = a3;
  v17 = type metadata accessor for Optional();
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v25 - v20;
  v22 = *(_QWORD *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))((char *)&v25 - v20, a5, a10, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, a10);
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a8;
  v23[3] = a10;
  v23[4] = a11;
  v23[5] = a12;
  v23[6] = a13;
  v23[7] = a14;
  v23[8] = v29;
  v24 = v32;
  v23[9] = v31;
  v36 = v28;
  v37 = a2;
  v38 = v30;
  v39 = v24;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)v21, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v23, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v35, v26, a10, a11, MEMORY[0x1E0CE6CF8], a12, a13, a14, MEMORY[0x1E0CE6C58]);
}

{
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v33 = a9;
  v34 = a7;
  v31 = a4;
  v32 = a5;
  v30 = a3;
  v27[1] = a1;
  v27[2] = a2;
  v28 = a14;
  v29 = a6;
  v27[0] = a11;
  v18 = type metadata accessor for Optional();
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)v27 - v21;
  v23 = *(_QWORD *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)v27 - v21, a5, a10, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v22, 0, 1, a10);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a8;
  v24[3] = a10;
  v24[4] = a11;
  v24[5] = a12;
  v24[6] = a13;
  v26 = v28;
  v25 = v29;
  v24[7] = v28;
  v24[8] = v25;
  v24[9] = v34;
  v36 = a1;
  v37 = a2;
  v38 = v30 & 1;
  v39 = v31;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)v22, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v24, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v35, a8, a10, v27[0], MEMORY[0x1E0CE6CF8], a12, a13, v26, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_18719E78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 160), v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18719E7D8()
{
  swift_release();
  return swift_deallocObject();
}

void TableColumn<>.init<A>(_:sortUsing:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v29 = a8;
  v30 = a3;
  v31 = a4;
  v32 = a1;
  v33 = a2;
  v34 = a9;
  v17 = type metadata accessor for Optional();
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v27 - v20;
  v22 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))((char *)&v27 - v20, a2, a6, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, a6);
  v23 = (_QWORD *)swift_allocObject();
  v24 = a5;
  v27 = a7;
  v28 = a5;
  v23[2] = a5;
  v23[3] = a6;
  v26 = v29;
  v25 = v30;
  v23[4] = a7;
  v23[5] = v26;
  v23[6] = a10;
  v23[7] = a11;
  v23[8] = a12;
  v23[9] = a13;
  v23[10] = v25;
  v23[11] = v31;
  v36 = v24;
  v37 = a6;
  v38 = a7;
  v39 = v26;
  v40 = a10;
  v41 = a11;
  v42 = a12;
  v43 = a13;
  v44 = v32;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)v21, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:sortUsing:content:), (uint64_t)v23, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A>(_:sortUsing:content:), (uint64_t)v35, v28, a6, v27, MEMORY[0x1E0CE6CF8], a10, a11, a12, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_18719E954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v4 - 192), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

uint64_t closure #1 in TableColumn<>.init<A>(_:sortUsing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a6);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t sub_18719EA7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A>(_:sortUsing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init<A>(_:sortUsing:content:)(a1, v2[10], v2[4], a2, v2[7], v2[8]);
}

uint64_t closure #2 in TableColumn<>.init<A>(_:sortUsing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A>(_:sortUsing:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in TableColumn<>.init<A>(_:sortUsing:content:)(*(_QWORD *)(v1 + 80), a1);
}

uint64_t sub_18719ECFC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v3 - 168), v2);
  outlined consume of Text.Storage(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 208), v0);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in TableColumn<>.init(_:sortUsing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(double);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v18 - v13;
  v15(v12);
  static ViewBuilder.buildExpression<A>(_:)(v9, a3, a5);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a3);
}

uint64_t partial apply for closure #1 in TableColumn<>.init(_:sortUsing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init(_:sortUsing:content:)(a1, v2[8], v2[4], a2, v2[7]);
}

void TableColumn<>.init(_:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v24 = 1;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a10;
  v17[6] = a5;
  v17[7] = a6;
  v20 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v24, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:content:), (uint64_t)v17, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v19, a7, MEMORY[0x1E0DEDCE8], a8, MEMORY[0x1E0CE6CF8], a9, MEMORY[0x1E0CB2698], a10, MEMORY[0x1E0CE6C58]);
}

{
  _QWORD *v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v24 = 1;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a10;
  v17[6] = a5;
  v17[7] = a6;
  v20 = a1;
  v21 = a2;
  v22 = a3 & 1;
  v23 = a4;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v24, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:content:), (uint64_t)v17, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v19, a7, MEMORY[0x1E0DEDCE8], a8, MEMORY[0x1E0CE6CF8], a9, MEMORY[0x1E0CB2698], a10, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_18719EF38()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void TableColumn<>.init<A>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v26 = 1;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  v17[5] = a7;
  v17[6] = a8;
  v17[7] = a9;
  v17[8] = a2;
  v17[9] = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  v24 = a9;
  v25 = a1;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v26, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:content:), (uint64_t)v17, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A>(_:content:), (uint64_t)v18, a4, MEMORY[0x1E0DEDCE8], a5, MEMORY[0x1E0CE6CF8], a7, MEMORY[0x1E0CB2698], a8, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_18719F05C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t closure #1 in TableColumn<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init<A>(_:content:)(a1, v2[8], v2[3], v2[6], a2);
}

uint64_t closure #2 in TableColumn<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A>(_:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in TableColumn<>.init<A>(_:content:)(*(_QWORD *)(v1 + 64), a1);
}

uint64_t sub_18719F32C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  swift_release();
  outlined consume of Text.Storage(v1, v0, v2);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in TableColumn<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t sub_18719F444()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init(_:content:)(a1, v2[6], v2[3], v2[5], a2);
}

void TableColumn<>.init<>(_:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v12 = *a5;
  v20 = 1;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a6;
  *(_QWORD *)(v13 + 24) = a5;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v14 = *(_QWORD *)(v12 + *MEMORY[0x1E0DEE2A8]);
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v20, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:), v13, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v15, v14, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], a6, MEMORY[0x1E0CB2698], MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v12 = *a5;
  v20 = 1;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a6;
  *(_QWORD *)(v13 + 24) = a5;
  v16 = a1;
  v17 = a2;
  v18 = a3 & 1;
  v19 = a4;
  v14 = *(_QWORD *)(v12 + *MEMORY[0x1E0DEE2A8]);
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v20, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:), v13, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v15, v14, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], a6, MEMORY[0x1E0CB2698], MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

uint64_t sub_18719F564()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_18719F59C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TableColumn<>.init<A>(_:value:)(a1);
}

void TableColumn<>.init<A>(_:value:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v10 = *a2;
  v18 = 1;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a2;
  v13 = *(_QWORD *)(v10 + *MEMORY[0x1E0DEE2A8]);
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a1;
  swift_retain();
  TableColumn.init(comparator:content:label:)((uint64_t)&v18, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:), (uint64_t)v11, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A>(_:value:), (uint64_t)v12, v13, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], a4, MEMORY[0x1E0CB2698], MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

uint64_t sub_18719F6B0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t closure #1 in TableColumn<>.init<A>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  swift_getAtKeyPath();
  lazy protocol witness table accessor for type String and conformance String();
  result = Text.init<A>(_:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_18719F744()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TableColumn<>.init<A>(_:value:)(a1);
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ModalLink<>.init<A>(_:presenting:)(*(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_18719F864()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  swift_release();
  outlined consume of Text.Storage(v1, v0, v2);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_BYTE *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  outlined copy of Text.Storage(v2, v3, v4);
  return swift_bridgeObjectRetain();
}

uint64_t TableColumn.width(_:)@<X0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  double v13;
  double v14;
  double v15;

  v5 = v4;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, v5);
  v11 = a4 + *(int *)(a3 + 88);
  if ((*(_BYTE *)(v11 + 32) & 1) != 0)
  {
    v12 = a2 & 1;
    v13 = a1;
    v14 = INFINITY;
    if ((a2 & 1) != 0)
      v13 = 10.0;
    else
      v14 = a1;
  }
  else
  {
    v13 = *(double *)(v11 + 16);
    v14 = *(double *)(v11 + 24);
    v15 = a1;
    if ((a2 & 1) != 0)
    {
      a1 = *(double *)v11;
      v12 = *(_BYTE *)(v11 + 8) & 1;
    }
    else
    {
      v12 = 0;
    }
    if ((a2 & 1) == 0)
    {
      v13 = v15;
      v14 = v15;
    }
  }
  *(double *)v11 = a1;
  *(_QWORD *)(v11 + 8) = v12;
  *(double *)(v11 + 16) = v13;
  *(double *)(v11 + 24) = v14;
  *(_BYTE *)(v11 + 32) = 0;
  return result;
}

uint64_t TableColumn.width(min:ideal:max:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v9 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(a8, v9, a7);
  v19 = a8 + *(int *)(a7 + 88);
  if ((*(_BYTE *)(v19 + 32) & 1) != 0)
  {
    v20 = a4 & 1;
    if ((a4 & 1) != 0)
      v21 = 0x4024000000000000;
    else
      v21 = a3;
    v22 = 0x7FF0000000000000;
    if ((a4 & 1) == 0)
      v22 = a3;
  }
  else
  {
    v21 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    if ((a4 & 1) != 0)
      a3 = *(_QWORD *)v19;
    v20 = a4 & *(_BYTE *)(v19 + 8);
  }
  if ((a2 & 1) == 0)
    v21 = a1;
  if ((a6 & 1) == 0)
    v22 = a5;
  *(_QWORD *)v19 = a3;
  *(_QWORD *)(v19 + 8) = v20 & 1;
  *(_QWORD *)(v19 + 16) = v21;
  *(_QWORD *)(v19 + 24) = v22;
  *(_BYTE *)(v19 + 32) = 0;
  return result;
}

double TableColumn.fixedToHeaderWidth()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  double result;

  v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v3, a1);
  v6 = a2 + *(int *)(a1 + 88);
  result = 0.0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_BYTE *)(v6 + 32) = 1;
  return result;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in TableColumn<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 56);
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in TableColumn<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48);
}

uint64_t instantiation function for generic protocol witness table for TableColumn<A, B, C, D>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumn<A, B, C, D>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TableColumn()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_BYTE *)(v14 + 32);
    v16 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v16;
    *(_BYTE *)(v13 + 32) = v15;
    v17 = ((unint64_t)v10 + 63) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v11 + 63) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)(v18 + 24);
    swift_retain();
    if (v19 < 0xFFFFFFFF)
    {
      v25 = *(_OWORD *)v18;
      v26 = *(_OWORD *)(v18 + 16);
      v27 = *(_OWORD *)(v18 + 48);
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
      *(_OWORD *)(v17 + 48) = v27;
      *(_OWORD *)v17 = v25;
      *(_OWORD *)(v17 + 16) = v26;
      v28 = *(_OWORD *)(v18 + 64);
      v29 = *(_OWORD *)(v18 + 80);
      v30 = *(_OWORD *)(v18 + 96);
      *(_QWORD *)(v17 + 112) = *(_QWORD *)(v18 + 112);
      *(_OWORD *)(v17 + 80) = v29;
      *(_OWORD *)(v17 + 96) = v30;
      *(_OWORD *)(v17 + 64) = v28;
      return v4;
    }
    *(_QWORD *)(v17 + 24) = v19;
    (**(void (***)(unint64_t, unint64_t, unint64_t))(v19 - 8))(v17, v18, v19);
    v20 = *(_QWORD *)(v18 + 56);
    *(_QWORD *)(v17 + 56) = v20;
    *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v17 + 32, v18 + 32);
    v21 = *(_QWORD *)(v18 + 80);
    *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + 80) = v21;
    v22 = *(_QWORD *)(v18 + 96);
    *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
    *(_QWORD *)(v17 + 96) = v22;
    v23 = *(_QWORD *)(v18 + 104);
    v24 = *(_QWORD *)(v18 + 112);
    *(_QWORD *)(v17 + 104) = v23;
    *(_QWORD *)(v17 + 112) = v24;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TableColumn(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 40) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  result = swift_release();
  v6 = (v4 + 63) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(v6);
    __swift_destroy_boxed_opaque_existential_1(v6 + 32);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for TableColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_BYTE *)(v11 + 32);
  v13 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v13;
  *(_BYTE *)(v10 + 32) = v12;
  v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  swift_retain();
  if (v16 < 0xFFFFFFFF)
  {
    v22 = *(_OWORD *)v15;
    v23 = *(_OWORD *)(v15 + 16);
    v24 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 48) = v24;
    *(_OWORD *)v14 = v22;
    *(_OWORD *)(v14 + 16) = v23;
    v25 = *(_OWORD *)(v15 + 64);
    v26 = *(_OWORD *)(v15 + 80);
    v27 = *(_OWORD *)(v15 + 96);
    *(_QWORD *)(v14 + 112) = *(_QWORD *)(v15 + 112);
    *(_OWORD *)(v14 + 80) = v26;
    *(_OWORD *)(v14 + 96) = v27;
    *(_OWORD *)(v14 + 64) = v25;
  }
  else
  {
    *(_QWORD *)(v14 + 24) = v16;
    (**(void (***)(unint64_t, unint64_t, unint64_t))(v16 - 8))(v14, v15, v16);
    v17 = *(_QWORD *)(v15 + 56);
    *(_QWORD *)(v14 + 56) = v17;
    *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(v14 + 32, v15 + 32);
    v18 = *(_QWORD *)(v15 + 80);
    *(_QWORD *)(v14 + 72) = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + 80) = v18;
    v19 = *(_QWORD *)(v15 + 96);
    *(_QWORD *)(v14 + 88) = *(_QWORD *)(v15 + 88);
    *(_QWORD *)(v14 + 96) = v19;
    v20 = *(_QWORD *)(v15 + 104);
    v21 = *(_QWORD *)(v15 + 112);
    *(_QWORD *)(v14 + 104) = v20;
    *(_QWORD *)(v14 + 112) = v21;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for TableColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v11;
  v13 = *(_OWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 32) = *(_BYTE *)(v11 + 32);
  *(_OWORD *)v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  if (*(_QWORD *)(v14 + 24) < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v14 + 24) = v16;
      (**(void (***)(unint64_t, unint64_t))(v16 - 8))(v14, ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8);
      v20 = *(_QWORD *)(v15 + 56);
      *(_QWORD *)(v14 + 56) = v20;
      *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v14 + 32, v15 + 32);
      v21 = *(_QWORD *)(v15 + 80);
      *(_QWORD *)(v14 + 72) = *(_QWORD *)(v15 + 72);
      *(_QWORD *)(v14 + 80) = v21;
      v22 = *(_QWORD *)(v15 + 96);
      *(_QWORD *)(v14 + 88) = *(_QWORD *)(v15 + 88);
      *(_QWORD *)(v14 + 96) = v22;
      v23 = *(_QWORD *)(v15 + 104);
      v24 = *(_QWORD *)(v15 + 112);
      *(_QWORD *)(v14 + 104) = v23;
      *(_QWORD *)(v14 + 112) = v24;
      swift_retain();
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_7:
    v25 = *(_OWORD *)v15;
    v26 = *(_OWORD *)(v15 + 16);
    v27 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 48) = v27;
    *(_OWORD *)v14 = v25;
    *(_OWORD *)(v14 + 16) = v26;
    v28 = *(_OWORD *)(v15 + 64);
    v29 = *(_OWORD *)(v15 + 80);
    v30 = *(_OWORD *)(v15 + 96);
    *(_QWORD *)(v14 + 112) = *(_QWORD *)(v15 + 112);
    *(_OWORD *)(v14 + 80) = v29;
    *(_OWORD *)(v14 + 96) = v30;
    *(_OWORD *)(v14 + 64) = v28;
    return a1;
  }
  if (v16 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v14);
    __swift_destroy_boxed_opaque_existential_1(v14 + 32);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v14, (uint64_t *)v15);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v14 + 32), (uint64_t *)(v15 + 32));
  v17 = *(_QWORD *)(v15 + 80);
  *(_QWORD *)(v14 + 72) = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v14 + 80) = v17;
  swift_retain();
  swift_release();
  v18 = *(_QWORD *)(v15 + 96);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(v15 + 88);
  *(_QWORD *)(v14 + 96) = v18;
  swift_retain();
  swift_release();
  v19 = *(_QWORD *)(v15 + 112);
  *(_QWORD *)(v14 + 104) = *(_QWORD *)(v15 + 104);
  *(_QWORD *)(v14 + 112) = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TableColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v10;
  v11 = *(_OWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  v13 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)(v14 + 80);
  v15 = *(_OWORD *)(v14 + 96);
  v17 = *(_OWORD *)(v14 + 64);
  *(_QWORD *)(v13 + 112) = *(_QWORD *)(v14 + 112);
  *(_OWORD *)(v13 + 80) = v16;
  *(_OWORD *)(v13 + 96) = v15;
  *(_OWORD *)(v13 + 64) = v17;
  v18 = *(_OWORD *)(v14 + 16);
  v19 = *(_OWORD *)(v14 + 32);
  v20 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v18;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v20;
  return a1;
}

uint64_t assignWithTake for TableColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = (unint64_t)v8 + 63;
  *v7 = *v8;
  swift_release();
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v11;
  v13 = *(_OWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 32) = *(_BYTE *)(v11 + 32);
  *(_OWORD *)v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  v15 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v14 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v16 = *(_QWORD *)(v15 + 24);
  __swift_destroy_boxed_opaque_existential_1(v14);
  if (v16 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v14 + 32);
    swift_release();
    swift_release();
    swift_release();
LABEL_5:
    v20 = *(_OWORD *)v15;
    v21 = *(_OWORD *)(v15 + 16);
    v22 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 48) = v22;
    *(_OWORD *)v14 = v20;
    *(_OWORD *)(v14 + 16) = v21;
    v23 = *(_OWORD *)(v15 + 64);
    v24 = *(_OWORD *)(v15 + 80);
    v25 = *(_OWORD *)(v15 + 96);
    *(_QWORD *)(v14 + 112) = *(_QWORD *)(v15 + 112);
    *(_OWORD *)(v14 + 80) = v24;
    *(_OWORD *)(v14 + 96) = v25;
    *(_OWORD *)(v14 + 64) = v23;
    return a1;
  }
  v17 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v17;
  __swift_destroy_boxed_opaque_existential_1(v14 + 32);
  v18 = *(_OWORD *)(v15 + 32);
  v19 = *(_OWORD *)(v15 + 48);
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
  *(_OWORD *)(v14 + 32) = v18;
  *(_OWORD *)(v14 + 48) = v19;
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(v15 + 72);
  swift_release();
  *(_OWORD *)(v14 + 88) = *(_OWORD *)(v15 + 88);
  swift_release();
  *(_OWORD *)(v14 + 104) = *(_OWORD *)(v15 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumn(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1871A0344 + 4 * byte_187C11510[v10]))();
  }
}

void storeEnumTagSinglePayload for TableColumn(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 40) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFF8) == 0xFFFFFF88)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFF8) != 0xFFFFFF88)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1871A04C4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1871A053CLL);
}

void sub_1871A04CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1871A04D4);
  JUMPOUT(0x1871A053CLL);
}

void sub_1871A0514()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871A053CLL);
}

void sub_1871A051C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871A053CLL);
}

uint64_t sub_1871A0524(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1871A053CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1871A0538);
    JUMPOUT(0x1871A0530);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t getEnumTagSinglePayload for TableColumnSizingBehavior(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TableColumnSizingBehavior(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for TableColumnSizingBehavior(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for TableColumnSizingBehavior(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    *(_BYTE *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnSizingBehavior()
{
  return &type metadata for TableColumnSizingBehavior;
}

void type metadata accessor for _AnyPreferenceKey<PlatformItemList.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItemList.Key>)
  {
    v0 = type metadata accessor for _AnyPreferenceKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItemList.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<PlatformItemList.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListTextRepresentable, &type metadata for PlatformItemListTextRepresentable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListImageRepresentable, &type metadata for PlatformItemListImageRepresentable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListNamedImageRepresentable, &type metadata for PlatformItemListNamedImageRepresentable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListSpacerRepresentable, &type metadata for PlatformItemListSpacerRepresentable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.DividerRepresentationKey, &type metadata for _GraphInputs.DividerRepresentationKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.ViewThatFitsRepresentationKey, &type metadata for _GraphInputs.ViewThatFitsRepresentationKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.HiddenRepresentationKey, &type metadata for _GraphInputs.HiddenRepresentationKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.DynamicHiddenRepresentationKey, &type metadata for _GraphInputs.DynamicHiddenRepresentationKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
  }
  return result;
}

uint64_t partial apply for closure #1 in TableColumn.init(comparator:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in TableColumn.init(comparator:content:label:)(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 56), a2);
}

uint64_t outlined assign with take of SwiftUIAnySortComparator?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for SwiftUIAnySortComparator?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for SwiftUIAnySortComparator?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SwiftUIAnySortComparator?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?);
  }
}

void type metadata accessor for TableColumn.MakeList()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableColumn.MakeLabel()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key;
  if (!lazy protocol witness table cache variable for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnConfiguration.Key, &type metadata for TableColumnConfiguration.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key);
  }
  return result;
}

void type metadata completion function for TableColumn.MakeList()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for TableColumn.MakeList(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v5 = *(int *)(a3 + 92);
    v6 = (void *)(a1 + v5);
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UUID();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for TableColumn.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 92);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

uint64_t initializeWithCopy for TableColumn.MakeList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 92);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_DWORD *assignWithCopy for TableColumn.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 92);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t initializeWithTake for TableColumn.MakeList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 92);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for TableColumn.MakeList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 92);
  v5 = (void *)(a1 + v4);
  v6 = (void *)(a2 + v4);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumn.MakeList()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871A1090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 92);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for TableColumn.MakeList()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871A10F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 92);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

ValueMetadata *type metadata accessor for TableColumnSizingBehavior.SizeConstraints()
{
  return &type metadata for TableColumnSizingBehavior.SizeConstraints;
}

void base witness table accessor for _AttributeBody in TableColumn<A, B, C, D>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TableColumn<A, B, C, D>.MakeLabel()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TableColumn.UnaryTableColumnList()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined copy of TableColumnCustomizationID?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    return outlined copy of TableColumnCustomizationID.Base(result, a2, a3, a4, a5 & 1);
  return result;
}

void type metadata completion function for TableColumn.UnaryTableColumnList()
{
  type metadata accessor for TableColumn();
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumn.UnaryTableColumnList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  _QWORD *v41;
  void **v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  id v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + v10 + 120;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 58 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    v17 = v8;
    v18 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v19 = (_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_BYTE *)(v23 + 32);
    v25 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v25;
    *(_BYTE *)(v22 + 32) = v24;
    v26 = ((unint64_t)v19 + 63) & 0xFFFFFFFFFFFFFFF8;
    v27 = ((unint64_t)v20 + 63) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)(v27 + 24);
    swift_retain();
    if (v28 < 0xFFFFFFFF)
    {
      v34 = *(_OWORD *)v27;
      v35 = *(_OWORD *)(v27 + 16);
      v36 = *(_OWORD *)(v27 + 48);
      *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
      *(_OWORD *)(v26 + 48) = v36;
      *(_OWORD *)v26 = v34;
      *(_OWORD *)(v26 + 16) = v35;
      v37 = *(_OWORD *)(v27 + 64);
      v38 = *(_OWORD *)(v27 + 80);
      v39 = *(_OWORD *)(v27 + 96);
      *(_QWORD *)(v26 + 112) = *(_QWORD *)(v27 + 112);
      *(_OWORD *)(v26 + 80) = v38;
      *(_OWORD *)(v26 + 96) = v39;
      *(_OWORD *)(v26 + 64) = v37;
    }
    else
    {
      *(_QWORD *)(v26 + 24) = v28;
      (**(void (***)(unint64_t, unint64_t, unint64_t))(v28 - 8))(v26, v27, v28);
      v29 = *(_QWORD *)(v27 + 56);
      *(_QWORD *)(v26 + 56) = v29;
      *(_QWORD *)(v26 + 64) = *(_QWORD *)(v27 + 64);
      (**(void (***)(uint64_t, uint64_t))(v29 - 8))(v26 + 32, v27 + 32);
      v30 = *(_QWORD *)(v27 + 80);
      *(_QWORD *)(v26 + 72) = *(_QWORD *)(v27 + 72);
      *(_QWORD *)(v26 + 80) = v30;
      v31 = *(_QWORD *)(v27 + 96);
      *(_QWORD *)(v26 + 88) = *(_QWORD *)(v27 + 88);
      *(_QWORD *)(v26 + 96) = v31;
      v32 = *(_QWORD *)(v27 + 104);
      v33 = *(_QWORD *)(v27 + 112);
      *(_QWORD *)(v26 + 104) = v32;
      *(_QWORD *)(v26 + 112) = v33;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    v40 = ((unint64_t)a2 + v11) & v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v18, v40, v17);
    v41 = (_QWORD *)((v12 + (((unint64_t)a1 + v11) & v18)) & 0xFFFFFFFFFFFFF8);
    v42 = (void **)((v12 + v40) & 0xFFFFFFFFFFFFF8);
    v43 = *v42;
    *v41 = *v42;
    v44 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v45 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v44 = *(_BYTE *)v45;
    v46 = *(unsigned __int8 *)(v45 + 40);
    v47 = v43;
    if (v46 == 255)
    {
      v48 = *(_OWORD *)(v45 + 8);
      v49 = *(_OWORD *)(v45 + 24);
      *(_BYTE *)(v44 + 40) = *(_BYTE *)(v45 + 40);
      *(_OWORD *)(v44 + 8) = v48;
      *(_OWORD *)(v44 + 24) = v49;
    }
    else
    {
      v50 = v46 & 1;
      v51 = *(_QWORD *)(v45 + 8);
      v52 = *(_QWORD *)(v45 + 16);
      v53 = *(_QWORD *)(v45 + 24);
      v54 = *(_QWORD *)(v45 + 32);
      outlined copy of TableColumnCustomizationID.Base(v51, v52, v53, v54, v50);
      *(_QWORD *)(v44 + 8) = v51;
      *(_QWORD *)(v44 + 16) = v52;
      *(_QWORD *)(v44 + 24) = v53;
      *(_QWORD *)(v44 + 32) = v54;
      *(_BYTE *)(v44 + 40) = v50;
    }
    *(_QWORD *)(v44 + 48) = *(_QWORD *)(v45 + 48);
    *(_BYTE *)(v44 + 56) = *(_BYTE *)(v45 + 56);
    *(_BYTE *)(v44 + 57) = *(_BYTE *)(v45 + 57);
  }
  return a1;
}

void destroy for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id *v10;
  unint64_t v11;
  int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 40) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + 7;
  swift_release();
  v5 = (((v4 + a1) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(v5);
    __swift_destroy_boxed_opaque_existential_1(v5 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  v6 = ((v4 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (a1 + *(unsigned __int8 *)(v8 + 80) + v6 + 120) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  v10 = (id *)((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);

  v11 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned __int8 *)(v11 + 40);
  if (v12 != 255)
    outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32), v12 & 1);
}

uint64_t initializeWithCopy for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void **v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  id v41;
  __int128 v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_BYTE *)(v11 + 32);
  v13 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v13;
  *(_BYTE *)(v10 + 32) = v12;
  v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  swift_retain();
  if (v16 < 0xFFFFFFFF)
  {
    v22 = *(_OWORD *)v15;
    v23 = *(_OWORD *)(v15 + 16);
    v24 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 48) = v24;
    *(_OWORD *)v14 = v22;
    *(_OWORD *)(v14 + 16) = v23;
    v25 = *(_OWORD *)(v15 + 64);
    v26 = *(_OWORD *)(v15 + 80);
    v27 = *(_OWORD *)(v15 + 96);
    *(_QWORD *)(v14 + 112) = *(_QWORD *)(v15 + 112);
    *(_OWORD *)(v14 + 80) = v26;
    *(_OWORD *)(v14 + 96) = v27;
    *(_OWORD *)(v14 + 64) = v25;
  }
  else
  {
    *(_QWORD *)(v14 + 24) = v16;
    (**(void (***)(unint64_t, unint64_t, unint64_t))(v16 - 8))(v14, v15, v16);
    v17 = *(_QWORD *)(v15 + 56);
    *(_QWORD *)(v14 + 56) = v17;
    *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(v14 + 32, v15 + 32);
    v18 = *(_QWORD *)(v15 + 80);
    *(_QWORD *)(v14 + 72) = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + 80) = v18;
    v19 = *(_QWORD *)(v15 + 96);
    *(_QWORD *)(v14 + 88) = *(_QWORD *)(v15 + 88);
    *(_QWORD *)(v14 + 96) = v19;
    v20 = *(_QWORD *)(v15 + 104);
    v21 = *(_QWORD *)(v15 + 112);
    *(_QWORD *)(v14 + 104) = v20;
    *(_QWORD *)(v14 + 112) = v21;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  v28 = type metadata accessor for UUID();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + v30 + 120;
  v32 = (v31 + a1) & ~v30;
  v33 = (v31 + a2) & ~v30;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))(v32, v33, v28);
  v34 = *(_QWORD *)(v29 + 64) + 7;
  v35 = (_QWORD *)((v34 + v32) & 0xFFFFFFFFFFFFFFF8);
  v36 = (void **)((v34 + v33) & 0xFFFFFFFFFFFFFFF8);
  v37 = *v36;
  *v35 = *v36;
  v38 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  v39 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v38 = *(_BYTE *)v39;
  v40 = *(unsigned __int8 *)(v39 + 40);
  v41 = v37;
  if (v40 == 255)
  {
    v42 = *(_OWORD *)(v39 + 8);
    v43 = *(_OWORD *)(v39 + 24);
    *(_BYTE *)(v38 + 40) = *(_BYTE *)(v39 + 40);
    *(_OWORD *)(v38 + 8) = v42;
    *(_OWORD *)(v38 + 24) = v43;
  }
  else
  {
    v44 = v40 & 1;
    v45 = *(_QWORD *)(v39 + 8);
    v46 = *(_QWORD *)(v39 + 16);
    v47 = *(_QWORD *)(v39 + 24);
    v48 = *(_QWORD *)(v39 + 32);
    outlined copy of TableColumnCustomizationID.Base(v45, v46, v47, v48, v44);
    *(_QWORD *)(v38 + 8) = v45;
    *(_QWORD *)(v38 + 16) = v46;
    *(_QWORD *)(v38 + 24) = v47;
    *(_QWORD *)(v38 + 32) = v48;
    *(_BYTE *)(v38 + 40) = v44;
  }
  *(_QWORD *)(v38 + 48) = *(_QWORD *)(v39 + 48);
  *(_BYTE *)(v38 + 56) = *(_BYTE *)(v39 + 56);
  *(_BYTE *)(v38 + 57) = *(_BYTE *)(v39 + 57);
  return a1;
}

uint64_t assignWithCopy for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void *v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  __int128 *v45;
  __int128 *v46;
  int v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v11;
  v13 = *(_OWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 32) = *(_BYTE *)(v11 + 32);
  *(_OWORD *)v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  v14 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  if (*(_QWORD *)(v14 + 24) < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v14 + 24) = v16;
      (**(void (***)(unint64_t, unint64_t))(v16 - 8))(v14, ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8);
      v20 = *(_QWORD *)(v15 + 56);
      *(_QWORD *)(v14 + 56) = v20;
      *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v14 + 32, v15 + 32);
      v21 = *(_QWORD *)(v15 + 80);
      *(_QWORD *)(v14 + 72) = *(_QWORD *)(v15 + 72);
      *(_QWORD *)(v14 + 80) = v21;
      v22 = *(_QWORD *)(v15 + 96);
      *(_QWORD *)(v14 + 88) = *(_QWORD *)(v15 + 88);
      *(_QWORD *)(v14 + 96) = v22;
      v23 = *(_QWORD *)(v15 + 104);
      v24 = *(_QWORD *)(v15 + 112);
      *(_QWORD *)(v14 + 104) = v23;
      *(_QWORD *)(v14 + 112) = v24;
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v16 >= 0xFFFFFFFF)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v14, (uint64_t *)v15);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v14 + 32), (uint64_t *)(v15 + 32));
      v17 = *(_QWORD *)(v15 + 80);
      *(_QWORD *)(v14 + 72) = *(_QWORD *)(v15 + 72);
      *(_QWORD *)(v14 + 80) = v17;
      swift_retain();
      swift_release();
      v18 = *(_QWORD *)(v15 + 96);
      *(_QWORD *)(v14 + 88) = *(_QWORD *)(v15 + 88);
      *(_QWORD *)(v14 + 96) = v18;
      swift_retain();
      swift_release();
      v19 = *(_QWORD *)(v15 + 112);
      *(_QWORD *)(v14 + 104) = *(_QWORD *)(v15 + 104);
      *(_QWORD *)(v14 + 112) = v19;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(v14);
    __swift_destroy_boxed_opaque_existential_1(v14 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  v25 = *(_OWORD *)v15;
  v26 = *(_OWORD *)(v15 + 16);
  v27 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v14 + 48) = v27;
  *(_OWORD *)v14 = v25;
  *(_OWORD *)(v14 + 16) = v26;
  v28 = *(_OWORD *)(v15 + 64);
  v29 = *(_OWORD *)(v15 + 80);
  v30 = *(_OWORD *)(v15 + 96);
  *(_QWORD *)(v14 + 112) = *(_QWORD *)(v15 + 112);
  *(_OWORD *)(v14 + 80) = v29;
  *(_OWORD *)(v14 + 96) = v30;
  *(_OWORD *)(v14 + 64) = v28;
LABEL_8:
  v31 = type metadata accessor for UUID();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + v33 + 120;
  v35 = (v34 + a1) & ~v33;
  v36 = (v34 + a2) & ~v33;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v32 + 24))(v35, v36, v31);
  v37 = *(_QWORD *)(v32 + 64) + 7;
  v38 = (void **)((v37 + v35) & 0xFFFFFFFFFFFFFFF8);
  v39 = (void **)((v37 + v36) & 0xFFFFFFFFFFFFFFF8);
  v40 = *v39;
  v41 = *v38;
  *v38 = *v39;
  v42 = v40;

  v43 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v44 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v43 = *(_BYTE *)v44;
  v45 = (__int128 *)(v43 + 8);
  v46 = (__int128 *)(v44 + 8);
  v47 = *(unsigned __int8 *)(v44 + 40);
  if (*(unsigned __int8 *)(v43 + 40) == 255)
  {
    if (v47 == 255)
    {
      v50 = *v46;
      v51 = *(_OWORD *)(v44 + 24);
      *(_BYTE *)(v43 + 40) = *(_BYTE *)(v44 + 40);
      *v45 = v50;
      *(_OWORD *)(v43 + 24) = v51;
    }
    else
    {
      v62 = v47 & 1;
      v63 = *(_QWORD *)(v44 + 8);
      v64 = *(_QWORD *)(v44 + 16);
      v65 = *(_QWORD *)(v44 + 24);
      v66 = *(_QWORD *)(v44 + 32);
      outlined copy of TableColumnCustomizationID.Base(v63, v64, v65, v66, v47 & 1);
      *(_QWORD *)(v43 + 8) = v63;
      *(_QWORD *)(v43 + 16) = v64;
      *(_QWORD *)(v43 + 24) = v65;
      *(_QWORD *)(v43 + 32) = v66;
      *(_BYTE *)(v43 + 40) = v62;
    }
  }
  else if (v47 == 255)
  {
    outlined destroy of TableColumnCustomizationID((uint64_t)v45);
    v48 = *(_BYTE *)(v44 + 40);
    v49 = *(_OWORD *)(v44 + 24);
    *v45 = *v46;
    *(_OWORD *)(v43 + 24) = v49;
    *(_BYTE *)(v43 + 40) = v48;
  }
  else
  {
    v52 = v47 & 1;
    v53 = *(_QWORD *)(v44 + 8);
    v54 = *(_QWORD *)(v44 + 16);
    v55 = *(_QWORD *)(v44 + 24);
    v56 = *(_QWORD *)(v44 + 32);
    outlined copy of TableColumnCustomizationID.Base(v53, v54, v55, v56, v47 & 1);
    v57 = *(_QWORD *)(v43 + 8);
    v58 = *(_QWORD *)(v43 + 16);
    v59 = *(_QWORD *)(v43 + 24);
    v60 = *(_QWORD *)(v43 + 32);
    v61 = *(_BYTE *)(v43 + 40);
    *(_QWORD *)(v43 + 8) = v53;
    *(_QWORD *)(v43 + 16) = v54;
    *(_QWORD *)(v43 + 24) = v55;
    *(_QWORD *)(v43 + 32) = v56;
    *(_BYTE *)(v43 + 40) = v52;
    outlined consume of TableColumnCustomizationID.Base(v57, v58, v59, v60, v61);
  }
  *(_QWORD *)(v43 + 48) = *(_QWORD *)(v44 + 48);
  *(_BYTE *)(v43 + 56) = *(_BYTE *)(v44 + 56);
  *(_BYTE *)(v43 + 57) = *(_BYTE *)(v44 + 57);
  return a1;
}

uint64_t outlined destroy of TableColumnCustomizationID(uint64_t a1)
{
  destroy for TableColumnCustomizationID();
  return a1;
}

uint64_t initializeWithTake for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v10;
  v11 = *(_OWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  v13 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)(v14 + 80);
  v15 = *(_OWORD *)(v14 + 96);
  v17 = *(_OWORD *)(v14 + 64);
  *(_QWORD *)(v13 + 112) = *(_QWORD *)(v14 + 112);
  *(_OWORD *)(v13 + 80) = v16;
  *(_OWORD *)(v13 + 96) = v15;
  *(_OWORD *)(v13 + 64) = v17;
  v18 = *(_OWORD *)(v14 + 16);
  v19 = *(_OWORD *)(v14 + 32);
  v20 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v18;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v20;
  v21 = ((v6 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  v22 = type metadata accessor for UUID();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = v21 + v24 + 120;
  v26 = (v25 + a1) & ~v24;
  v27 = (v25 + a2) & ~v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v26, v27, v22);
  v28 = *(_QWORD *)(v23 + 64) + 7;
  v29 = (_QWORD *)((v28 + v26) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)((v28 + v27) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = (_OWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_OWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  v33 = *(_OWORD *)((char *)v32 + 42);
  v35 = v32[1];
  v34 = v32[2];
  *v31 = *v32;
  v31[1] = v35;
  v31[2] = v34;
  *(_OWORD *)((char *)v31 + 42) = v33;
  return a1;
}

uint64_t assignWithTake for TableColumn.UnaryTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 *v38;
  __int128 *v39;
  int v40;
  __int128 v41;
  __int128 v42;
  int v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)v10;
  v12 = *(_OWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  v13 = ((unint64_t)v7 + 63) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v13 + 24) >= 0xFFFFFFFFuLL)
  {
    v15 = *(_QWORD *)(v14 + 24);
    __swift_destroy_boxed_opaque_existential_1(v13);
    if (v15 >= 0xFFFFFFFF)
    {
      v16 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v16;
      __swift_destroy_boxed_opaque_existential_1(v13 + 32);
      v17 = *(_OWORD *)(v14 + 32);
      v18 = *(_OWORD *)(v14 + 48);
      *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
      *(_OWORD *)(v13 + 32) = v17;
      *(_OWORD *)(v13 + 48) = v18;
      *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
      swift_release();
      *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
      swift_release();
      *(_OWORD *)(v13 + 104) = *(_OWORD *)(v14 + 104);
      swift_release();
      goto LABEL_6;
    }
    __swift_destroy_boxed_opaque_existential_1(v13 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  v19 = *(_OWORD *)v14;
  v20 = *(_OWORD *)(v14 + 16);
  v21 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 48) = v21;
  *(_OWORD *)v13 = v19;
  *(_OWORD *)(v13 + 16) = v20;
  v22 = *(_OWORD *)(v14 + 64);
  v23 = *(_OWORD *)(v14 + 80);
  v24 = *(_OWORD *)(v14 + 96);
  *(_QWORD *)(v13 + 112) = *(_QWORD *)(v14 + 112);
  *(_OWORD *)(v13 + 80) = v23;
  *(_OWORD *)(v13 + 96) = v24;
  *(_OWORD *)(v13 + 64) = v22;
LABEL_6:
  v25 = ((v6 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  v26 = type metadata accessor for UUID();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v25 + v28 + 120;
  v30 = (v29 + a1) & ~v28;
  v31 = (v29 + a2) & ~v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 40))(v30, v31, v26);
  v32 = *(_QWORD *)(v27 + 64) + 7;
  v33 = (void **)((v32 + v30) & 0xFFFFFFFFFFFFFFF8);
  v34 = (void **)((v32 + v31) & 0xFFFFFFFFFFFFFFF8);
  v35 = *v33;
  *v33 = *v34;

  v36 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  v38 = (__int128 *)(v36 + 8);
  v39 = (__int128 *)(v37 + 8);
  v40 = *(unsigned __int8 *)(v36 + 40);
  if (v40 == 255)
  {
    v41 = *v39;
    v42 = *(_OWORD *)(v37 + 24);
    *(_BYTE *)(v36 + 40) = *(_BYTE *)(v37 + 40);
    *v38 = v41;
    *(_OWORD *)(v36 + 24) = v42;
  }
  else
  {
    v43 = *(unsigned __int8 *)(v37 + 40);
    if (v43 == 255)
    {
      outlined destroy of TableColumnCustomizationID(v36 + 8);
      v44 = *(_BYTE *)(v37 + 40);
      v45 = *(_OWORD *)(v37 + 24);
      *v38 = *v39;
      *(_OWORD *)(v36 + 24) = v45;
      *(_BYTE *)(v36 + 40) = v44;
    }
    else
    {
      v46 = *(_QWORD *)(v36 + 8);
      v47 = *(_QWORD *)(v36 + 16);
      v48 = *(_QWORD *)(v36 + 24);
      v49 = *(_QWORD *)(v36 + 32);
      v50 = *(_OWORD *)(v37 + 24);
      *(_OWORD *)(v36 + 8) = *(_OWORD *)(v37 + 8);
      *(_OWORD *)(v36 + 24) = v50;
      *(_BYTE *)(v36 + 40) = v43 & 1;
      outlined consume of TableColumnCustomizationID.Base(v46, v47, v48, v49, v40 & 1);
    }
  }
  *(_QWORD *)(v36 + 48) = *(_QWORD *)(v37 + 48);
  *(_BYTE *)(v36 + 56) = *(_BYTE *)(v37 + 56);
  *(_BYTE *)(v36 + 57) = *(_BYTE *)(v37 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumn.UnaryTableColumnList(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t (*v23)(unint64_t, uint64_t, uint64_t);
  unint64_t v24;

  v5 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = v8;
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = v9;
  v14 = *(_QWORD *)(v6 + 64);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + v15 + 120;
  if (v12 < a2)
  {
    v17 = ((((*(_QWORD *)(v10 + 64) + (v16 & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 58;
    if (v17 <= 3)
      v18 = ((a2 - v12 + 0xFFFF) >> (8 * v17)) + 1;
    else
      v18 = 2;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X17 }
  }
  if (v8 < v11)
  {
    v22 = (v16 + a1) & ~v15;
    v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    return v23(v22, v11, v13);
  }
  if (v7 >= 0x7FFFFFFF)
  {
    v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v22 = a1;
    v11 = v7;
    v13 = v5;
    return v23(v22, v11, v13);
  }
  v24 = *(_QWORD *)((a1 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  return (v24 + 1);
}

void storeEnumTagSinglePayload for TableColumn.UnaryTableColumnList(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 40) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 120;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = ((((*(_QWORD *)(v9 + 64) + ((v11 + v12) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 58;
  if (v10 >= a3)
  {
    v16 = 0u;
    if (v10 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v13 <= 3)
      v14 = ((a3 - v10 + 0xFFFF) >> (8 * v13)) + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    if (v10 >= a2)
LABEL_20:
      __asm { BR              X14 }
  }
  v17 = ~v10 + a2;
  bzero(a1, ((((*(_QWORD *)(v9 + 64) + ((v11 + v12) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 58);
  if (v13 > 3)
    *a1 = v17;
  else
    *(_WORD *)a1 = v17;
  __asm { BR              X11 }
}

void sub_1871A23C4(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x1871A248CLL);
}

void sub_1871A23CC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1871A23D4);
  JUMPOUT(0x1871A248CLL);
}

void sub_1871A2428(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x1871A248CLL);
}

void sub_1871A2430(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x1871A248CLL);
}

uint64_t sub_1871A2438(uint64_t a1, size_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  *(_WORD *)((char *)v7 + v9) = 0;
  if (!(_DWORD)v8)
    goto LABEL_7;
  if (v10 >= a3)
  {
    if (v10 >= v8)
      JUMPOUT(0x1871A2444);
    if ((_DWORD)a2)
    {
      bzero(v7, a2);
      *v7 = ~v10 + v8;
    }
LABEL_7:
    JUMPOUT(0x1871A248CLL);
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(v4 + 56))(((unint64_t)v7 + v5) & v6, v8);
}

uint64_t outlined consume of TableColumnCustomizationID?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    return outlined consume of TableColumnCustomizationID.Base(result, a2, a3, a4, a5 & 1);
  return result;
}

void CustomHoverEffect.hoverEffect<A>(_:in:isEnabled:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1871A24E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1871A24EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  uint64_t v4;

  result = EnvironmentValues.textSizing.getter();
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1871A2534()
{
  swift_bridgeObjectRetain();
  return EnvironmentValues.textSizing.setter();
}

uint64_t sub_1871A2574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Text.Sizing>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Sizing>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t static PlaybackButtonStyle<>.pill(dateStyle:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_BYTE *)(result + 16);
  *(_BYTE *)a2 = *(_BYTE *)result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

void PillPlaybackButtonStyle._storage.getter(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *((_QWORD *)v1 + 1);
  v3 = v1[16];
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
}

void protocol witness for PlaybackButtonStyle._storage.getter in conformance PillPlaybackButtonStyle(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *((_QWORD *)v1 + 1);
  v3 = v1[16];
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
}

uint64_t getEnumTagSinglePayload for PillPlaybackButtonStyle(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 16) < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PillPlaybackButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PillPlaybackButtonStyle()
{
  return &type metadata for PillPlaybackButtonStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for PillPlaybackButtonStyleBody(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v8);
    *v4 = v7;
    *((_BYTE *)v4 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)v4 + v9;
    v11 = (char *)(a2 + v9);
    type metadata accessor for ClosedRange<Date>();
    v13 = v12;
    v14 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v12))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for Date();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      v18(v10, v11, v17);
      v18(&v10[*(int *)(v13 + 36)], &v11[*(int *)(v13 + 36)], v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
    v19 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    v20 = v19[5];
    v21 = &v10[v20];
    v22 = &v11[v20];
    v23 = type metadata accessor for Date();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 2, v23))
    {
      v25 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 2, v23);
    }
    v26 = v19[6];
    v27 = &v10[v26];
    v28 = &v11[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    v10[v19[7]] = v11[v19[7]];
    v10[v19[8]] = v11[v19[8]];
    *(_OWORD *)&v10[v19[9]] = *(_OWORD *)&v11[v19[9]];
    v30 = v19[10];
    v31 = &v10[v30];
    v32 = &v11[v30];
    v33 = *(_QWORD *)&v11[v30];
    v34 = *(_QWORD *)&v11[v30 + 8];
    v35 = v32[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
    *(_QWORD *)v31 = v33;
    *((_QWORD *)v31 + 1) = v34;
    v31[16] = v35;
    v36 = *((_QWORD *)v32 + 5);
    v37 = *(_OWORD *)(v32 + 24);
    *(_OWORD *)(v31 + 24) = v37;
    *((_QWORD *)v31 + 5) = v36;
    v38 = *(int *)(a3 + 24);
    v39 = (char *)v4 + v38;
    v40 = a2 + v38;
    v39[16] = *(_BYTE *)(v40 + 16);
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v41 = (id)v37;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ClosedRange<Date>();
  v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v4, v7);
    v8(v4 + *(int *)(v6 + 36), v7);
  }
  v9 = type metadata accessor for PlaybackButton.Configuration(0);
  v10 = v4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 2, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v13 = v4 + *(int *)(v9 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  type metadata accessor for ClosedRange<Date>();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for Date();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v9, v10, v15);
    v16(&v9[*(int *)(v12 + 36)], &v10[*(int *)(v12 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  v17 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v18 = v17[5];
  v19 = &v9[v18];
  v20 = &v10[v18];
  v21 = type metadata accessor for Date();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 2, v21))
  {
    v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 2, v21);
  }
  v24 = v17[6];
  v25 = &v9[v24];
  v26 = &v10[v24];
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v27;
  v9[v17[7]] = v10[v17[7]];
  v9[v17[8]] = v10[v17[8]];
  *(_OWORD *)&v9[v17[9]] = *(_OWORD *)&v10[v17[9]];
  v28 = v17[10];
  v29 = &v9[v28];
  v30 = &v10[v28];
  v31 = *(_QWORD *)&v10[v28];
  v32 = *(_QWORD *)&v10[v28 + 8];
  v33 = v30[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v31, v32, v33);
  *(_QWORD *)v29 = v31;
  *((_QWORD *)v29 + 1) = v32;
  v29[16] = v33;
  v34 = *((_QWORD *)v30 + 5);
  v35 = *(_OWORD *)(v30 + 24);
  *(_OWORD *)(v29 + 24) = v35;
  *((_QWORD *)v29 + 5) = v34;
  v36 = *(int *)(a3 + 24);
  v37 = a1 + v36;
  v38 = a2 + v36;
  *(_BYTE *)(v37 + 16) = *(_BYTE *)(v38 + 16);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  v39 = (id)v35;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v58 = a3;
  v59 = a2;
  v10 = *(int *)(a3 + 20);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  type metadata accessor for ClosedRange<Date>();
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v11, 1, v13);
  v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      v19 = type metadata accessor for Date();
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
      v20(v11, v12, v19);
      v20(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v56 = type metadata accessor for Date();
  v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24);
  v57(v11, v12, v56);
  v57(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v56);
LABEL_7:
  v22 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v23 = v22[5];
  v24 = &v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 2, v26);
  v30 = v28(v25, 2, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v31 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 2, v26);
LABEL_13:
  v32 = v22[6];
  v33 = &v11[v32];
  v34 = &v12[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[v22[7]] = v12[v22[7]];
  v11[v22[8]] = v12[v22[8]];
  v35 = v22[9];
  v36 = &v11[v35];
  v37 = &v12[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
  v38 = v22[10];
  v39 = &v11[v38];
  v40 = &v12[v38];
  v41 = *(_QWORD *)&v12[v38];
  v42 = *(_QWORD *)&v12[v38 + 8];
  v43 = v40[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v41, v42, v43);
  v44 = *(_QWORD *)v39;
  v45 = *((_QWORD *)v39 + 1);
  v46 = v39[16];
  *(_QWORD *)v39 = v41;
  *((_QWORD *)v39 + 1) = v42;
  v39[16] = v43;
  outlined consume of Environment<AppIntentExecutor?>.Content(v44, v45, v46);
  v47 = (void *)*((_QWORD *)v40 + 3);
  v48 = (void *)*((_QWORD *)v39 + 3);
  *((_QWORD *)v39 + 3) = v47;
  v49 = v47;

  v50 = *((_QWORD *)v40 + 5);
  *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
  *((_QWORD *)v39 + 5) = v50;
  swift_retain();
  swift_release();
  v51 = *(int *)(v58 + 24);
  v52 = a1 + v51;
  v53 = v59 + v51;
  *(_BYTE *)v52 = *(_BYTE *)v53;
  v54 = *(_QWORD *)(v53 + 8);
  *(_BYTE *)(v52 + 16) = *(_BYTE *)(v53 + 16);
  *(_QWORD *)(v52 + 8) = v54;
  return a1;
}

uint64_t initializeWithTake for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  type metadata accessor for ClosedRange<Date>();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for Date();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v7, v8, v13);
    v14(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v16 = v15[5];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = type metadata accessor for Date();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 2, v19))
  {
    v21 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
  }
  *(_OWORD *)&v7[v15[6]] = *(_OWORD *)&v8[v15[6]];
  v7[v15[7]] = v8[v15[7]];
  v7[v15[8]] = v8[v15[8]];
  *(_OWORD *)&v7[v15[9]] = *(_OWORD *)&v8[v15[9]];
  v22 = v15[10];
  v23 = &v7[v22];
  v24 = &v8[v22];
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  v26 = *(int *)(a3 + 24);
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  return a1;
}

uint64_t assignWithTake for PillPlaybackButtonStyleBody(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t *v51;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v50 = a3;
  v51 = a2;
  v10 = *(int *)(a3 + 20);
  v11 = (char *)(a1 + v10);
  v12 = (char *)a2 + v10;
  type metadata accessor for ClosedRange<Date>();
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v11, 1, v13);
  v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      v19 = type metadata accessor for Date();
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
      v20(v11, v12, v19);
      v20(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v48 = type metadata accessor for Date();
  v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40);
  v49(v11, v12, v48);
  v49(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v48);
LABEL_7:
  v22 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v23 = v22[5];
  v24 = &v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 2, v26);
  v30 = v28(v25, 2, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v31 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 2, v26);
LABEL_13:
  v32 = v22[6];
  v33 = &v11[v32];
  v34 = &v12[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v11[v22[7]] = v12[v22[7]];
  v11[v22[8]] = v12[v22[8]];
  *(_OWORD *)&v11[v22[9]] = *(_OWORD *)&v12[v22[9]];
  v37 = v22[10];
  v38 = &v11[v37];
  v39 = &v12[v37];
  LOBYTE(v37) = v12[v37 + 16];
  v40 = *(_QWORD *)v38;
  v41 = *((_QWORD *)v38 + 1);
  v42 = v38[16];
  *(_OWORD *)v38 = *(_OWORD *)v39;
  v38[16] = v37;
  outlined consume of Environment<AppIntentExecutor?>.Content(v40, v41, v42);
  v43 = (void *)*((_QWORD *)v38 + 3);
  *((_QWORD *)v38 + 3) = *((_QWORD *)v39 + 3);

  *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
  swift_release();
  v44 = *(int *)(v50 + 24);
  v45 = a1 + v44;
  v46 = (uint64_t)v51 + v44;
  *(_BYTE *)v45 = *(_BYTE *)v46;
  *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
  *(_BYTE *)(v45 + 16) = *(_BYTE *)(v46 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PillPlaybackButtonStyleBody()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871A34F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PlaybackButton.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PillPlaybackButtonStyleBody()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871A3578(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for PlaybackButton.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PillPlaybackButtonStyleBody()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PillPlaybackButtonStyleBody;
  if (!type metadata singleton initialization cache for PillPlaybackButtonStyleBody)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PillPlaybackButtonStyleBody()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in PillPlaybackButtonStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PillPlaybackButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD v80[8];
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v2 = v1;
  v78 = a1;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v77 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v76 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1E0C80A78](v74, v9);
  v73 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedCon(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v75 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _Bl(0);
  v19 = v18;
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Caps(0);
  v24 = v23;
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent(0);
  v72 = v28;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent();
  MEMORY[0x1E0C80A78](v32, v33);
  v79 = (uint64_t)&v71 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v17 = static VerticalAlignment.center.getter();
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 0;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, ();
  closure #1 in PillPlaybackButtonStyleBody.body.getter((uint64_t)&v17[*(int *)(v35 + 44)]);
  EdgeInsets.init(_all:)();
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v43 = v42;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>,);
  v44 = &v22[*(int *)(v19 + 36)];
  *v44 = 8;
  *((_QWORD *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>,);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v22, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _Bl);
  v45 = &v27[*(int *)(v24 + 36)];
  v46 = v83;
  *(_OWORD *)v45 = v82;
  *((_OWORD *)v45 + 1) = v46;
  *((_OWORD *)v45 + 2) = v84;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _Bl);
  PillPlaybackButtonStyleBody.platter.getter((uint64_t)v80);
  v91 = v80[6];
  v92 = v80[7];
  v93 = v81;
  v87 = v80[2];
  v88 = v80[3];
  v89 = v80[4];
  v90 = v80[5];
  v85 = v80[0];
  v86 = v80[1];
  v47 = static Alignment.center.getter();
  v49 = v48;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v27, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Caps);
  v50 = &v31[*(int *)(v72 + 36)];
  v51 = v92;
  *((_OWORD *)v50 + 6) = v91;
  *((_OWORD *)v50 + 7) = v51;
  v52 = v93;
  v53 = v88;
  *((_OWORD *)v50 + 2) = v87;
  *((_OWORD *)v50 + 3) = v53;
  v54 = v90;
  *((_OWORD *)v50 + 4) = v89;
  *((_OWORD *)v50 + 5) = v54;
  v55 = v86;
  *(_OWORD *)v50 = v85;
  *((_OWORD *)v50 + 1) = v55;
  *((_QWORD *)v50 + 16) = v52;
  *((_QWORD *)v50 + 17) = v47;
  *((_QWORD *)v50 + 18) = v49;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Caps);
  v56 = type metadata accessor for PillPlaybackButtonStyleBody();
  v57 = v2 + *(int *)(v56 + 20);
  v58 = v74;
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v79, 0.0, 1, 0.0, 1, *(_QWORD *)(v57 + *(int *)(v74 + 36)), *(_QWORD *)(v57 + *(int *)(v74 + 36) + 8));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent);
  v59 = (unsigned __int8 *)(v2 + *(int *)(v56 + 24));
  v60 = *v59;
  v61 = *((_QWORD *)v59 + 1);
  LOBYTE(v56) = v59[16];
  v62 = v73;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v57, v73, type metadata accessor for PlaybackButton.Configuration);
  v63 = v62 + *(int *)(v58 + 20);
  v64 = v76;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v63, v76, type metadata accessor for PlaybackButton.State);
  v65 = v77;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v62, v77, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v62, type metadata accessor for PlaybackButton.Configuration);
  v66 = v75;
  outlined init with take of TableCellFormula(v64, v75, type metadata accessor for PlaybackButton.State);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for AccessibilityPlaybackButtonModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayou, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedCont, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
  v68 = v66 + *(int *)(v67 + 36);
  *(_QWORD *)v68 = v60;
  *(_QWORD *)(v68 + 8) = v61;
  *(_BYTE *)(v68 + 16) = v56;
  outlined init with take of TableCellFormula(v65, v66 + *(int *)(v67 + 40), (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  v69 = v79;
  specialized AccessibilityPlaybackButtonModifier.body(content:)(v79, v78);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedCon);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v69, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent);
}

uint64_t closure #1 in PillPlaybackButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _OWORD *v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int128 v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t KeyPath;
  unsigned __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int128 *v62;
  unsigned __int128 v63;
  unsigned __int128 v64;
  unsigned __int128 v65;
  unsigned __int128 v66;
  unsigned __int128 v67;
  unsigned __int128 v68;
  unsigned __int128 v69;
  unsigned __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v77[4];
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  _BYTE *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unsigned __int8 v94;
  _BYTE v95[7];
  unsigned __int128 v96;
  unsigned __int128 v97;
  unsigned __int128 v98;
  unsigned __int128 v99;
  unsigned __int128 v100;
  unsigned __int128 v101;
  unsigned __int128 v102;
  unsigned __int128 v103;
  unsigned __int128 v104;
  unsigned __int128 v105;
  uint64_t v106;
  unsigned __int128 v107;
  unsigned __int128 v108;
  unsigned __int128 v109;
  unsigned __int128 v110;
  unsigned __int128 v111;
  unsigned __int128 v112;
  unsigned __int128 v113;
  unsigned __int128 v114;
  unsigned __int128 v115;
  unsigned __int128 v116;
  unsigned __int128 v117;
  unsigned __int128 v118;
  unsigned __int128 v119;
  char v120;
  unsigned __int128 v121;
  __int128 v122;
  unsigned __int128 v123;
  _OWORD v124[2];
  unsigned __int128 v125;
  unsigned __int128 v126;
  unsigned __int128 v127;
  unsigned __int128 v128;
  unsigned __int128 v129;
  uint64_t v130;
  char v131;
  _BYTE v132[7];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;

  v84 = a1;
  type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = &v77[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>(0);
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v77[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>(0);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v77[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>(0);
  v89 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v77[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v19, v20);
  v90 = &v77[-v21];
  PillPlaybackButtonStyleBody.playbackStateImage.getter(&v121);
  v103 = v127;
  v104 = v128;
  v105 = v129;
  v106 = v130;
  v101 = v125;
  v102 = v126;
  v96 = v121;
  v97 = v122;
  v99 = v124[0];
  v100 = v124[1];
  v98 = v123;
  EdgeInsets.init(_all:)();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v94 = 0;
  PillPlaybackButtonStyleBody.resolvedProgressView.getter((uint64_t)v4);
  EdgeInsets.init(_all:)();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v4, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?);
  v38 = &v9[*(int *)(v6 + 36)];
  *v38 = 2;
  *((_QWORD *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?);
  EdgeInsets.init(_all:)();
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v46 = v45;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>);
  v47 = &v14[*(int *)(v11 + 36)];
  *v47 = 8;
  *((_QWORD *)v47 + 1) = v40;
  *((_QWORD *)v47 + 2) = v42;
  *((_QWORD *)v47 + 3) = v44;
  *((_QWORD *)v47 + 4) = v46;
  v47[40] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>);
  v48 = &v18[*(int *)(v89 + 36)];
  v85 = v18;
  v49 = v92;
  *v48 = v91;
  v48[1] = v49;
  v48[2] = v93;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>);
  outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  PillPlaybackButtonStyleBody.label.getter((uint64_t *)&v121);
  v52 = v121;
  v51 = v52 >> 64;
  v50 = v52;
  *(_QWORD *)&v88 = v121;
  v53 = v122;
  v54 = BYTE2(v123);
  LODWORD(v89) = BYTE2(v123);
  v55 = (unsigned __int16)v123;
  v56 = static Font.subheadline.getter();
  KeyPath = swift_getKeyPath();
  v107 = __PAIR128__(v51, v50);
  v108 = v53;
  LOWORD(v109) = v55;
  BYTE2(v109) = v54;
  *((_QWORD *)&v109 + 1) = KeyPath;
  *(_QWORD *)&v110 = v56;
  static Font.Weight.semibold.getter();
  type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(v88, v51, v53, *((uint64_t *)&v53 + 1), v55, v89);
  swift_release();
  swift_release();
  v58 = v121;
  v59 = v122;
  v81 = BYTE2(v123);
  v86 = *(_QWORD *)&v124[0];
  v87 = *((_QWORD *)&v123 + 1);
  v82 = *((_QWORD *)&v124[1] + 1);
  v88 = *(_OWORD *)((char *)v124 + 8);
  v60 = (unsigned __int16)v123;
  v80 = static Color.white.getter();
  v89 = swift_getKeyPath();
  LODWORD(v55) = v94;
  v61 = (uint64_t)v85;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v90, (uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  v115 = v104;
  v116 = v105;
  v111 = v100;
  v112 = v101;
  *(_QWORD *)&v117 = v106;
  v113 = v102;
  v114 = v103;
  v107 = v96;
  v108 = v97;
  v109 = v98;
  v110 = v99;
  BYTE8(v117) = 2;
  *(_DWORD *)((char *)&v117 + 9) = *(_DWORD *)v95;
  HIDWORD(v117) = *(_DWORD *)&v95[3];
  *(_QWORD *)&v118 = v23;
  *((_QWORD *)&v118 + 1) = v25;
  *(_QWORD *)&v119 = v27;
  *((_QWORD *)&v119 + 1) = v29;
  v83 = v55;
  v120 = v55;
  v62 = (unsigned __int128 *)v84;
  *(_BYTE *)(v84 + 208) = v55;
  v63 = v114;
  v62[6] = v113;
  v62[7] = v63;
  v64 = v116;
  v62[8] = v115;
  v62[9] = v64;
  v65 = v110;
  v62[2] = v109;
  v62[3] = v65;
  v66 = v112;
  v62[4] = v111;
  v62[5] = v66;
  v67 = v108;
  *v62 = v107;
  v62[1] = v67;
  v68 = v119;
  v69 = v117;
  v62[11] = v118;
  v62[12] = v68;
  v62[10] = v69;
  v70 = v62;
  type metadata accessor for (TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Mod(0, &lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _A, type metadata accessor for ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Int?>>);
  v72 = v71;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v61, (uint64_t)v70 + *(int *)(v71 + 48), (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  v73 = (char *)v70 + *(int *)(v72 + 64);
  *(_OWORD *)v73 = v58;
  v79 = *((_QWORD *)&v58 + 1);
  *((_OWORD *)v73 + 1) = v59;
  v78 = v60;
  *((_WORD *)v73 + 16) = v60;
  LOBYTE(v70) = v81;
  v73[34] = v81;
  v74 = v86;
  *((_QWORD *)v73 + 5) = v87;
  *((_QWORD *)v73 + 6) = v74;
  *(_OWORD *)(v73 + 56) = v88;
  v75 = v80;
  *((_QWORD *)v73 + 9) = v82;
  *((_QWORD *)v73 + 10) = v75;
  *((_QWORD *)v73 + 11) = v89;
  *((_QWORD *)v73 + 12) = 1;
  v73[104] = 0;
  outlined retain of ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>((uint64_t)&v107);
  outlined copy of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(v58, *((uint64_t *)&v58 + 1), v59, *((uint64_t *)&v59 + 1), v60, (char)v70);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(v58, v79, v59, *((uint64_t *)&v59 + 1), v78, (char)v70);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>);
  v128 = v104;
  v129 = v105;
  v124[1] = v100;
  v125 = v101;
  v130 = v106;
  v126 = v102;
  v127 = v103;
  v121 = v96;
  v122 = v97;
  v123 = v98;
  v124[0] = v99;
  v131 = 2;
  *(_DWORD *)v132 = *(_DWORD *)v95;
  *(_DWORD *)&v132[3] = *(_DWORD *)&v95[3];
  v133 = v23;
  v134 = v25;
  v135 = v27;
  v136 = v29;
  v137 = v83;
  return outlined release of ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>((uint64_t)&v121);
}

double PillPlaybackButtonStyleBody.playbackStateImage.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _OWORD *v52;
  __int128 v53;
  double result;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;

  v58 = a1;
  type metadata accessor for <<opaque return type of Transition.combined<A>(with:)>>.0(0);
  *(_QWORD *)&v62 = v2;
  *(_QWORD *)&v61 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>();
  *(_QWORD *)&v63 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v60 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v59 = (char *)&v55 - v11;
  v12 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v12, v13);
  v65 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v55 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v55 - v21;
  v66 = v1 + *(int *)(type metadata accessor for PillPlaybackButtonStyleBody() + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, (uint64_t)v22, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v22[v12[5]] = 0x4000000000000000;
  *(_QWORD *)&v22[v12[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v22[v12[7]] = 0x3FA999999999999ALL;
  v64 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v23 = v22[v64[7]];
  v24 = (uint64_t *)&v22[v64[6]];
  if (v23 >= 2)
    v25 = 0x69662E6573756170;
  else
    v25 = 0x6C69662E79616C70;
  if (v23 >= 2)
    v26 = 0xEA00000000006C6CLL;
  else
    v26 = 0xE90000000000006CLL;
  if (v24[1])
  {
    v25 = *v24;
    v26 = swift_bridgeObjectRetain();
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  *(_DWORD *)(v27 + 32) = 0;
  *(_BYTE *)(v27 + 36) = 1;
  *(_OWORD *)(v27 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v27 + 56) = v25;
  *(_QWORD *)(v27 + 64) = v26;
  *(_OWORD *)(v27 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v27 + 88) = 0;
  swift_bridgeObjectRetain();
  v57 = static Color.white.getter();
  KeyPath = swift_getKeyPath();
  static UnitPoint.center.getter();
  *(_QWORD *)&v74 = 0x3EE4F8B588E368F1;
  *((_QWORD *)&v74 + 1) = v28;
  *(_QWORD *)&v75 = v29;
  v30 = lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
  v31 = lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
  v32 = MEMORY[0x1E0CE2F20];
  v33 = MEMORY[0x1E0CE3EF8];
  Transition.combined<A>(with:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, (uint64_t)v18, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v18[v12[5]] = 0x4000000000000000;
  *(_QWORD *)&v18[v12[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v18[v12[7]] = 0x3FA999999999999ALL;
  static Animation.spring(response:dampingFraction:blendDuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  *(_QWORD *)&v74 = v32;
  *((_QWORD *)&v74 + 1) = v33;
  *(_QWORD *)&v75 = v30;
  *((_QWORD *)&v75 + 1) = v31;
  swift_getOpaqueTypeConformance2();
  v34 = (uint64_t)v59;
  v35 = v62;
  Transition.animation(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v5, v35);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, v60, (uint64_t (*)(_QWORD))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0> and conformance FilteredTransition<A>, (uint64_t (*)(uint64_t))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>, MEMORY[0x1E0CE4248]);
  v36 = AnyTransition.init<A>(_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v34, (uint64_t (*)(_QWORD))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  v37 = static Font.footnote.getter();
  v38 = swift_getKeyPath();
  v67 = v27;
  v68 = KeyPath;
  v69 = v57;
  v70 = 20;
  v71 = v36;
  v72 = v38;
  v73 = v37;
  static Font.Weight.bold.getter();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v39 = v75;
  v40 = BYTE8(v75);
  v41 = v77;
  v42 = v79;
  v61 = v74;
  v62 = v76;
  v63 = v78;
  v43 = v66;
  v44 = v65;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, v65, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)(v44 + v12[5]) = 0x4000000000000000;
  *(_QWORD *)(v44 + v12[6]) = 0x3FB47AE147AE147BLL;
  *(_QWORD *)(v44 + v12[7]) = 0x3FA999999999999ALL;
  v45 = v64;
  if (*(_BYTE *)(v44 + v64[8]))
    v46 = 0.8;
  else
    v46 = 1.0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  static UnitPoint.center.getter();
  v48 = v47;
  v50 = v49;
  v51 = *(_BYTE *)(v43 + v45[7]);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v52 = v58;
  *v58 = v61;
  *((_QWORD *)v52 + 2) = v39;
  *((_BYTE *)v52 + 24) = v40;
  v52[2] = v62;
  *((_QWORD *)v52 + 6) = v41;
  *(_OWORD *)((char *)v52 + 56) = v63;
  *((_QWORD *)v52 + 9) = v42;
  *((double *)v52 + 10) = v46;
  *((double *)v52 + 11) = v46;
  *((_QWORD *)v52 + 12) = v48;
  *((_QWORD *)v52 + 13) = v50;
  *((_BYTE *)v52 + 112) = v51;
  v53 = v75;
  *(_OWORD *)((char *)v52 + 120) = v74;
  *(_OWORD *)((char *)v52 + 136) = v53;
  result = *(double *)&v76;
  *(_OWORD *)((char *)v52 + 152) = v76;
  return result;
}

uint64_t PillPlaybackButtonStyleBody.resolvedProgressView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_QWORD);
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (**v79)(uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD v121[11];

  v120 = a1;
  v117 = type metadata accessor for Date();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117, v2);
  v107 = (uint64_t)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v104, v4);
  v105 = (uint64_t)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(0);
  v111 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v109 = (uint64_t)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v112 = (uint64_t)&v96 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v113 = (uint64_t)&v96 - v14;
  v103 = type metadata accessor for ProgressViewSchedule(0);
  MEMORY[0x1E0C80A78](v103, v15);
  v106 = (uint64_t)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v108 = (uint64_t)&v96 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v110 = (uint64_t)&v96 - v22;
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  v119 = v23;
  v118 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v114 = (uint64_t *)((char *)&v96 - v25);
  v26 = type metadata accessor for PillPlaybackButtonStyleBody();
  v100 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v102 = (uint64_t)&v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v96 - v31;
  v33 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v96 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v96 - v39;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v96 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v46 = v45;
  v47 = *(_QWORD *)(v45 - 8);
  v48 = *(_QWORD *)(v47 + 64);
  MEMORY[0x1E0C80A78](v45, v49);
  v99 = (uint64_t)&v96 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v50, v51);
  v53 = (char *)&v96 - v52;
  v54 = *(int *)(v26 + 20);
  v115 = v1;
  v55 = v1 + v54;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + v54, (uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  v98 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v44, 1, v46) == 1)
  {
    v56 = (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?;
    v57 = (uint64_t)v44;
LABEL_7:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, v56);
    v64 = 1;
    v65 = v120;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 56))(v65, v64, 1, v119);
  }
  v97 = v53;
  outlined init with take of TableCellFormula((uint64_t)v44, (uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v58 = type metadata accessor for PlaybackButton.Configuration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v55 + *(int *)(v58 + 20), (uint64_t)v40, type metadata accessor for PlaybackButton.State);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56))(v36, 1, 2, v117);
  v59 = specialized static PlaybackButton.State.== infix(_:_:)((uint64_t)v40, (uint64_t)v36);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, type metadata accessor for PlaybackButton.State);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, type metadata accessor for PlaybackButton.State);
  v60 = v115;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v115, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PillPlaybackButtonStyleBody);
  if ((v59 & 1) != 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PillPlaybackButtonStyleBody);
LABEL_6:
    v56 = (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>;
    v57 = (uint64_t)v97;
    goto LABEL_7;
  }
  v61 = *(_QWORD *)v32;
  v62 = v32[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v32, v62);
  v63 = specialized Environment.wrappedValue.getter(v61, v62);
  outlined consume of Environment<Bool>.Content(v61, v62);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PillPlaybackButtonStyleBody);
  if (v63 == 2)
    goto LABEL_6;
  v67 = (uint64_t)v97;
  if (*(_BYTE *)(v55 + *(int *)(v58 + 28)) == 2)
  {
    v68 = v110;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v97, v110, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    *(_BYTE *)(v68 + *(int *)(v103 + 20)) = 0;
    v69 = v108;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v68, v108, type metadata accessor for ProgressViewSchedule);
    v70 = v102;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v60, v102, (uint64_t (*)(_QWORD))type metadata accessor for PillPlaybackButtonStyleBody);
    v71 = v99;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v99, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v72 = (*(unsigned __int8 *)(v100 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    v73 = (v101 + *(unsigned __int8 *)(v98 + 80) + v72) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
    v74 = swift_allocObject();
    outlined init with take of TableCellFormula(v70, v74 + v72, (uint64_t (*)(_QWORD))type metadata accessor for PillPlaybackButtonStyleBody);
    outlined init with take of TableCellFormula(v71, v74 + v73, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v75 = v106;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v69, v106, type metadata accessor for ProgressViewSchedule);
    v76 = swift_allocObject();
    *(_QWORD *)(v76 + 16) = partial apply for closure #1 in PillPlaybackButtonStyleBody.resolvedProgressView.getter;
    *(_QWORD *)(v76 + 24) = v74;
    v77 = v109;
    outlined init with take of TableCellFormula(v75, v109, type metadata accessor for ProgressViewSchedule);
    v78 = swift_allocObject();
    *(_QWORD *)(v78 + 16) = partial apply for specialized closure #1 in TimelineView<>.init(_:content:);
    *(_QWORD *)(v78 + 24) = v76;
    v79 = (uint64_t (**)(uint64_t))(v77 + *(int *)(v111 + 44));
    *v79 = partial apply for specialized closure #1 in TimelineView<>.init(_:content:);
    v79[1] = (uint64_t (*)(uint64_t))v78;
    v80 = v77;
    v81 = v112;
    outlined init with take of TableCellFormula(v80, v112, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v69, type metadata accessor for ProgressViewSchedule);
    v82 = v113;
    outlined init with take of TableCellFormula(v81, v113, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>);
    v90 = v114;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v82, (uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v82, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v68, type metadata accessor for ProgressViewSchedule);
  }
  else
  {
    v83 = v105;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v55, v105, type metadata accessor for PlaybackButton.Configuration);
    v84 = v104;
    *(_QWORD *)(v83 + *(int *)(v104 + 20)) = 0x4000000000000000;
    *(_QWORD *)(v83 + *(int *)(v84 + 24)) = 0x3FB47AE147AE147BLL;
    *(_QWORD *)(v83 + *(int *)(v84 + 28)) = 0x3FA999999999999ALL;
    v85 = v107;
    PlaybackButton.Specs.resolvedPauseDate.getter(v107);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v83, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v86 = static Alignment.leading.getter();
    v88 = v87;
    v89 = closure #1 in PillPlaybackButtonStyleBody.progressView(interval:referenceDate:)(v60, (uint64_t)v121);
    (*(void (**)(uint64_t, uint64_t, double))(v116 + 8))(v85, v117, v89);
    v90 = v114;
    *v114 = v86;
    v90[1] = v88;
    v91 = v121[9];
    *((_OWORD *)v90 + 9) = v121[8];
    *((_OWORD *)v90 + 10) = v91;
    *((_OWORD *)v90 + 11) = v121[10];
    v92 = v121[5];
    *((_OWORD *)v90 + 5) = v121[4];
    *((_OWORD *)v90 + 6) = v92;
    v93 = v121[7];
    *((_OWORD *)v90 + 7) = v121[6];
    *((_OWORD *)v90 + 8) = v93;
    v94 = v121[1];
    *((_OWORD *)v90 + 1) = v121[0];
    *((_OWORD *)v90 + 2) = v94;
    v95 = v121[3];
    *((_OWORD *)v90 + 3) = v121[2];
    *((_OWORD *)v90 + 4) = v95;
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v65 = v120;
  outlined init with take of _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>((uint64_t)v90, v120);
  v64 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 56))(v65, v64, 1, v119);
}

uint64_t PillPlaybackButtonStyleBody.label.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  uint64_t ObjCClassFromMetadata;
  void *v47;
  id v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t result;
  __int16 v53;
  void (*v54)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  _BYTE v72[4];
  int v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;

  v77 = a1;
  v76 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76, v3);
  v74 = &v72[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v72[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v72[-v11];
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v72[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ClosedRange<Date>();
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = &v72[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = type metadata accessor for PillPlaybackButtonStyleBody();
  v24 = *(int *)(v23 + 20);
  v75 = v1;
  v25 = v1 + v24;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + v24, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
  if (v26 == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
    v27 = type metadata accessor for PlaybackButton.Configuration(0);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v25 + *(int *)(v27 + 20), (uint64_t)v8, type metadata accessor for PlaybackButton.State);
    v28 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48))(v8, 2, v76);
    v73 = 1;
    if (v28)
    {
      LocalizedStringKey.init(stringLiteral:)();
    }
    else
    {
      LocalizedStringKey.init(stringLiteral:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for PlaybackButton.State);
    }
    type metadata accessor for SwiftUIClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v47 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48 = objc_msgSend(v47, sel_bundleForClass_, ObjCClassFromMetadata);
    v37 = Text.init(_:tableName:bundle:comment:)();
    v39 = v49;
    v41 = v50;
    v43 = v51;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v53 = 0;
    v26 = v73;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v29 = type metadata accessor for PlaybackButton.Configuration(0);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v25 + *(int *)(v29 + 20), (uint64_t)v12, type metadata accessor for PlaybackButton.State);
    v30 = v76;
    v31 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48))(v12, 2, v76);
    v32 = v2;
    if (v31)
    {
      if (v31 == 1)
      {
        v33 = (char *)(v75 + *(int *)(v23 + 24));
        v34 = *v33;
        v35 = *((_QWORD *)v33 + 1);
        LOBYTE(v33) = v33[16];
        LOBYTE(v78) = v34;
        v79 = v35;
        v80 = (char)v33;
        v78 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)((uint64_t)v22, (uint64_t)&v22[*(int *)(v18 + 36)]);
        v79 = v36;
        lazy protocol witness table accessor for type String and conformance String();
        v37 = Text.init<A>(_:)();
        v39 = v38;
        v41 = v40;
        v43 = v42;
        v44 = 0;
        v45 = 0;
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v74, &v22[*(int *)(v18 + 36)], v30);
        v65 = (char *)(v75 + *(int *)(v23 + 24));
        v66 = *v65;
        v67 = *((_QWORD *)v65 + 1);
        LOBYTE(v65) = v65[16];
        LOBYTE(v78) = v66;
        v79 = v67;
        v80 = (char)v65;
        v37 = Text.init(_:style:)();
        v39 = v68;
        v41 = v69;
        v43 = v70;
        v45 = 0;
        v44 = 1;
      }
    }
    else
    {
      v54 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32);
      v55 = v22;
      v56 = (uint64_t)v74;
      v54(v74, v12, v30);
      v57 = (char *)(v75 + *(int *)(v23 + 24));
      v58 = *v57;
      v59 = *((_QWORD *)v57 + 1);
      LOBYTE(v57) = v57[16];
      LOBYTE(v78) = v58;
      v79 = v59;
      v80 = (char)v57;
      v78 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)(v56, (uint64_t)&v55[*(int *)(v18 + 36)]);
      v79 = v60;
      lazy protocol witness table accessor for type String and conformance String();
      v37 = Text.init<A>(_:)();
      v39 = v61;
      v41 = v62;
      v43 = v63;
      v64 = v56;
      v22 = v55;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v64, v30);
      v44 = 0;
      v45 = 256;
    }
    v53 = v45 | v44;
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  }
  v71 = v77;
  *v77 = v37;
  v71[1] = v39;
  v71[2] = v41 & 1;
  v71[3] = v43;
  *((_WORD *)v71 + 16) = v53;
  *((_BYTE *)v71 + 34) = v26 == 1;
  return result;
}

uint64_t PillPlaybackButtonStyleBody.platter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[4];
  int v27;
  uint64_t v28;

  v3 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v26[-v9];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v26[-v13];
  static Color.white.getter();
  v15 = v1 + *(int *)(type metadata accessor for PillPlaybackButtonStyleBody() + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15, (uint64_t)v14, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v14[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v14[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v14[v3[7]] = 0x3FA999999999999ALL;
  v16 = type metadata accessor for PlaybackButton.Configuration(0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  v28 = Color.opacity(_:)();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15, (uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v10[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v10[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v10[v3[7]] = 0x3FA999999999999ALL;
  v17 = *(int *)(v16 + 32);
  v18 = static Animation.spring(response:dampingFraction:blendDuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  v19 = *(_BYTE *)(v15 + v17);
  if ((*(unsigned __int8 *)(v15 + *(int *)(v16 + 28)) | 2) == 3)
  {
    v27 = *(unsigned __int8 *)(v15 + v17);
    static Color.white.getter();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15, (uint64_t)v6, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v6[v3[5]] = 0x4000000000000000;
    *(_QWORD *)&v6[v3[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v6[v3[7]] = 0x3FA999999999999ALL;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v20 = Color.opacity(_:)();
    swift_release();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15, (uint64_t)v6, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v6[v3[5]] = 0x4000000000000000;
    *(_QWORD *)&v6[v3[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v6[v3[7]] = 0x3FA999999999999ALL;
    static Animation.timingCurve(_:_:_:_:duration:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v21 = 1;
    v22 = Animation.repeatForever(autoreverses:)();
    swift_retain_n();
    swift_release();
    v19 = v27;
    v23 = 0x3FF0000000000000;
    v24 = 1310976;
  }
  else
  {
    v21 = 0;
    v24 = 0;
    v23 = 0;
    v20 = 0;
    v22 = 0;
  }
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = v28;
  *(_WORD *)(a1 + 16) = 256;
  *(_QWORD *)(a1 + 24) = v18;
  *(_BYTE *)(a1 + 32) = v19;
  *(_BYTE *)(a1 + 33) = 20;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 56) = v24;
  *(_QWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 112) = v24;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v22;
  swift_retain();
  swift_retain();
  outlined copy of AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(v21, v20);
  outlined consume of AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(v21, v20);
  swift_release();
  return swift_release();
}

uint64_t Text.DateStyle.timeRemainingString(lowerBound:upperBound:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[8];
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v52 = a1;
  v53 = a2;
  v3 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v49 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for FloatingPointRoundingRule();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v8);
  v44 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v10);
  v39 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for Duration.UnitsFormatStyle();
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v12);
  v42 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Duration.TimeFormatStyle.Pattern();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Duration.TimeFormatStyle();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *v2;
  v25 = *((_QWORD *)v2 + 1);
  v26 = v2[16];
  Date.timeIntervalSinceNow.getter();
  Date.timeIntervalSinceNow.getter();
  LOBYTE(v60) = v24;
  v61 = v25;
  v62 = v26;
  static Text.DateStyle.timer.getter();
  v54[0] = v57;
  v55 = v58;
  v56 = v59;
  if ((MEMORY[0x18D75B020](&v60, v54) & 1) != 0)
  {
    static Duration.seconds(_:)();
    static Duration.TimeFormatStyle.Pattern.minuteSecond.getter();
    static FormatStyle<>.time(pattern:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB2770], MEMORY[0x1E0CB2768]);
    Duration.formatted<A>(_:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }
  else
  {
    if (v26 != 3)
    {
      v60 = v25;
      LOBYTE(v61) = v26;
      Text.DateStyle.UnitsConfiguration.units.getter();
    }
    static Duration.seconds(_:)();
    Set<>.init(_:)();
    v27 = v39;
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    v28 = v38;
    v29 = v37;
    v30 = v40;
    (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, *MEMORY[0x1E0DED508], v40);
    v31 = v44;
    static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
    v32 = v49;
    static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter();
    v33 = v42;
    static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v51);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v48);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v43);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB2840], MEMORY[0x1E0CB2838]);
    v34 = v47;
    Duration.formatted<A>(_:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v34);
  }
  return v60;
}

double closure #1 in PillPlaybackButtonStyleBody.progressView(interval:referenceDate:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  double v49[3];

  v4 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v29 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v29 - v14;
  v16 = a1 + *(int *)(type metadata accessor for PillPlaybackButtonStyleBody() + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, (uint64_t)v15, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v15[v4[5]] = 0x4000000000000000;
  *(_QWORD *)&v15[v4[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v15[v4[7]] = 0x3FA999999999999ALL;
  ClosedRange<>.progress(at:countdown:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  static Color.white.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, (uint64_t)v15, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v15[v4[5]] = 0x4000000000000000;
  *(_QWORD *)&v15[v4[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v15[v4[7]] = 0x3FA999999999999ALL;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  v38 = Color.opacity(_:)();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v37 = v39;
  v33 = v40;
  v36 = v41;
  v32 = v42;
  v35 = v43;
  v34 = v44;
  static Color.white.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, (uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v11[v4[5]] = 0x4000000000000000;
  *(_QWORD *)&v11[v4[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v11[v4[7]] = 0x3FA999999999999ALL;
  v17 = type metadata accessor for PlaybackButton.Configuration(0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  v31 = Color.opacity(_:)();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, (uint64_t)v15, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v15[v4[5]] = 0x4000000000000000;
  *(_QWORD *)&v15[v4[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v15[v4[7]] = 0x3FA999999999999ALL;
  v30 = static Animation.spring(response:dampingFraction:blendDuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  LOBYTE(v15) = *(_BYTE *)(v16 + *(int *)(v17 + 28));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, (uint64_t)v7, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v7[v4[5]] = 0x4000000000000000;
  *(_QWORD *)&v7[v4[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v7[v4[7]] = 0x3FA999999999999ALL;
  v18 = *(int *)(v17 + 32);
  v19 = static Animation.spring(response:dampingFraction:blendDuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  LOBYTE(v7) = *(_BYTE *)(v16 + v18);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v20 = v45;
  v21 = v46;
  v22 = v47;
  v23 = v48;
  v24 = v33;
  v25 = v32;
  *(_BYTE *)a2 = 1;
  v26 = v37;
  *(_QWORD *)(a2 + 8) = v38;
  *(_WORD *)(a2 + 16) = 256;
  *(_QWORD *)(a2 + 24) = v26;
  *(_BYTE *)(a2 + 32) = v24;
  *(_QWORD *)(a2 + 40) = v36;
  *(_BYTE *)(a2 + 48) = v25;
  v27 = v34;
  *(_QWORD *)(a2 + 56) = v35;
  *(_QWORD *)(a2 + 64) = v27;
  *(_BYTE *)(a2 + 72) = 1;
  *(_QWORD *)(a2 + 80) = v31;
  *(_WORD *)(a2 + 88) = 256;
  *(_BYTE *)(a2 + 90) = 20;
  *(_QWORD *)(a2 + 96) = v30;
  *(_BYTE *)(a2 + 104) = (_BYTE)v15;
  *(_QWORD *)(a2 + 112) = v19;
  *(_BYTE *)(a2 + 120) = (_BYTE)v7;
  *(_QWORD *)(a2 + 128) = v20;
  *(_BYTE *)(a2 + 136) = v21;
  *(_QWORD *)(a2 + 144) = v22;
  *(_BYTE *)(a2 + 152) = v23;
  result = v49[0];
  *(_OWORD *)(a2 + 160) = *(_OWORD *)v49;
  return result;
}

uint64_t specialized AccessibilityPlaybackButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v41 = a2;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent(0);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v39 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v39 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v39 = (uint64_t)&v39 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v40 = (uint64_t)&v39 - v21;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v22 = swift_allocObject();
  *(_BYTE *)(v22 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  v45 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v23 = v42;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v23;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent);
  swift_release();
  v25 = (uint64_t *)&v7[*(int *)(v4 + 36)];
  *v25 = v24;
  v25[1] = v22;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v24 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  v26 = *(_QWORD *)&v11[*(int *)(v4 + 36)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v26, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  *(_QWORD *)&v42 = 1;
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v26);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  *(_QWORD *)&v42 = 1024;
  AccessibilityNullableOptionSet<>.init(removing:)();
  v27 = *(_QWORD *)&v15[*(int *)(v4 + 36)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v27);
  swift_endAccess();
  swift_release();
  swift_release();
  v28 = v39;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, v39, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  v29 = specialized AccessibilityPlaybackButtonModifier.resolvedLabel.getter();
  v31 = v30;
  v33 = v32;
  LOBYTE(v22) = v34 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v35 + 32) = v29;
  *(_QWORD *)(v35 + 40) = v31;
  *(_BYTE *)(v35 + 48) = v22;
  *(_QWORD *)(v35 + 56) = v33;
  swift_beginAccess();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v43 = v36;
  v44 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>();
  *(_QWORD *)&v42 = v35;
  BYTE8(v42) = 2;
  outlined copy of Text.Storage(v29, v31, v22);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v42, MEMORY[0x1E0CE5888]);
  swift_endAccess();
  swift_release();
  swift_release();
  v37 = v40;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v29, v31, v22);
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
  specialized AccessibilityPlaybackButtonModifier.resolvedValue.getter(&lazy cache variable for type metadata for AccessibilityPlaybackButtonModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayou, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedCont, &v42);
  specialized ModifiedContent<>.accessibilityValue(_:)((uint64_t)&v42, v41);
  outlined destroy of AccessibilityValueStorage((uint64_t)&v42);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v41 = a2;
  type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo(0);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v39 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v39 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v39 = (uint64_t)&v39 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v40 = (uint64_t)&v39 - v21;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v22 = swift_allocObject();
  *(_BYTE *)(v22 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  v45 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v23 = v42;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v23;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo);
  swift_release();
  v25 = (uint64_t *)&v7[*(int *)(v4 + 36)];
  *v25 = v24;
  v25[1] = v22;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v24 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  v26 = *(_QWORD *)&v11[*(int *)(v4 + 36)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v26, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  *(_QWORD *)&v42 = 1;
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v26);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  *(_QWORD *)&v42 = 1024;
  AccessibilityNullableOptionSet<>.init(removing:)();
  v27 = *(_QWORD *)&v15[*(int *)(v4 + 36)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v27);
  swift_endAccess();
  swift_release();
  swift_release();
  v28 = v39;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, v39, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  v29 = specialized AccessibilityPlaybackButtonModifier.resolvedLabel.getter();
  v31 = v30;
  v33 = v32;
  LOBYTE(v22) = v34 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v35 + 32) = v29;
  *(_QWORD *)(v35 + 40) = v31;
  *(_BYTE *)(v35 + 48) = v22;
  *(_QWORD *)(v35 + 56) = v33;
  swift_beginAccess();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v43 = v36;
  v44 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>();
  *(_QWORD *)&v42 = v35;
  BYTE8(v42) = 2;
  outlined copy of Text.Storage(v29, v31, v22);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v42, MEMORY[0x1E0CE5888]);
  swift_endAccess();
  swift_release();
  swift_release();
  v37 = v40;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v29, v31, v22);
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
  specialized AccessibilityPlaybackButtonModifier.resolvedValue.getter(&lazy cache variable for type metadata for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent, &v42);
  specialized ModifiedContent<>.accessibilityValue(_:)((uint64_t)&v42, v41);
  outlined destroy of AccessibilityValueStorage((uint64_t)&v42);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
}

uint64_t specialized AccessibilityPlaybackButtonModifier.resolvedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t ObjCClassFromMetadata;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v4, v5);
  v6 = type metadata accessor for Date();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 2, v6))
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, type metadata accessor for PlaybackButton.State);
  }
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = objc_msgSend(v8, sel_bundleForClass_, ObjCClassFromMetadata);
  v10 = Text.init(_:tableName:bundle:comment:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

double specialized AccessibilityPlaybackButtonModifier.resolvedValue.getter@<D0>(unint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  int v23;
  __int128 v24;
  _BYTE v25[16];
  _OWORD v26[2];
  __int128 v27;

  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ClosedRange<Date>();
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = &v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Range<AttributedString.Index>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
  v20 = v19;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4 + *(int *)(v19 + 40), (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
    LOBYTE(v26[0]) = 0;
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    AccessibilityValueStorage.init<A>(_:description:)();
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v22 = v4 + *(int *)(v20 + 36);
    v23 = *(unsigned __int8 *)(v22 + 16);
    if (v23 == 4)
    {
      v25[15] = 0;
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      AccessibilityValueStorage.init<A>(_:description:)();
    }
    else if (v23 == 5)
    {
      specialized AccessibilityPlaybackButtonModifier.percentageValue(interval:)((unint64_t)v18, (uint64_t)v26);
    }
    else
    {
      specialized AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:)(*(_BYTE *)v22, *(_QWORD *)(v22 + 8), v23, (uint64_t)v18, (uint64_t)v26);
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v24 = v26[1];
    *a4 = v26[0];
    a4[1] = v24;
    result = *(double *)&v27;
    a4[2] = v27;
  }
  return result;
}

uint64_t specialized AccessibilityPlaybackButtonModifier.percentageValue(interval:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(_QWORD);
  int v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v42 = a1;
  v43 = a2;
  v3 = type metadata accessor for FloatingPointRoundingRule();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v6, v7);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], MEMORY[0x1E0CAFAB8]);
  v9 = v8;
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v38 - v15;
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v38 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v29, v30);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v29, 2, v17);
  if (v31)
  {
    if (v31 == 1)
    {
      LOBYTE(v46) = 0;
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      return AccessibilityValueStorage.init<A>(_:description:)();
    }
    else
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      Text.init(progressInterval:countsDown:)();
      return AccessibilityValueStorage.init(description:)();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v29, v17);
    ClosedRange<>.progress(at:countdown:)();
    v44 = v33;
    static Locale.autoupdatingCurrent.getter();
    v42 = lazy protocol witness table accessor for type Double and conformance Double();
    FloatingPointFormatStyle.Percent.init(locale:)();
    v34 = v39;
    v35 = v40;
    v36 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v39, *MEMORY[0x1E0DED4F0], v41);
    MEMORY[0x18D754774](v34, 0x3FF0000000000000, 0, v9);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
    v37 = *(void (**)(char *, uint64_t))(v38 + 8);
    v37(v12, v9);
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent();
    BinaryFloatingPoint.formatted<A>(_:)();
    v37(v16, v9);
    v44 = v46;
    v45 = v47;
    lazy protocol witness table accessor for type String and conformance String();
    Text.init<A>(_:)();
    AccessibilityValueStorage.init(description:)();
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  }
}

uint64_t specialized AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[3];
  _BYTE v38[8];
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v6 = v5;
  v37[1] = a5;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v6, (uint64_t)v19, v20);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 2, v11);
  if (v21)
  {
    if (v21 == 1)
    {
      LOBYTE(v44) = a1;
      v45 = a2;
      v46 = a3;
      type metadata accessor for ClosedRange<Date>();
      v44 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)(a4, a4 + *(int *)(v22 + 36));
      v45 = v23;
      lazy protocol witness table accessor for type String and conformance String();
      v24 = Text.init<A>(_:)();
    }
    else
    {
      type metadata accessor for ClosedRange<Date>();
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a4 + *(int *)(v34 + 36), v11);
      LOBYTE(v44) = a1;
      v45 = a2;
      v46 = a3;
      v24 = Text.init(_:style:)();
    }
    v29 = v24;
    v31 = v25;
    v33 = v26;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v19, v11);
    LOBYTE(v44) = a1;
    v45 = a2;
    v46 = a3;
    type metadata accessor for ClosedRange<Date>();
    v44 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)((uint64_t)v15, a4 + *(int *)(v27 + 36));
    v45 = v28;
    lazy protocol witness table accessor for type String and conformance String();
    v29 = Text.init<A>(_:)();
    v31 = v30;
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  LOBYTE(v44) = a1;
  v45 = a2;
  v46 = a3;
  outlined copy of Text.Storage(v29, v31, v33 & 1);
  swift_bridgeObjectRetain();
  static Text.DateStyle.timer.getter();
  v38[0] = v41;
  v39 = v42;
  v40 = v43;
  if ((MEMORY[0x18D75B020](&v44, v38) & 1) != 0)
  {
    type metadata accessor for AccessibilityTextModifier();
    v35 = swift_allocObject();
    *(_WORD *)(v35 + 16) = 1800;
    *(_BYTE *)(v35 + 18) = 1;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    Text.modified(with:)();
    outlined consume of Text.Storage(v29, v31, v33 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v29, v31, v33 & 1);
    swift_release();
  }
  else
  {
    outlined consume of Text.Storage(v29, v31, v33 & 1);
  }
  swift_bridgeObjectRelease();
  return AccessibilityValueStorage.init(description:)();
}

void specialized closure #1 in TimelineView<>.init(_:content:)(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, char *)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[12];

  type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  MEMORY[0x1E0C80A78](v6, v8);
  v9 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context(0);
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) == v7)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    a2(v17, v9);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    v11 = v17[9];
    a3[8] = v17[8];
    a3[9] = v11;
    v12 = v17[11];
    a3[10] = v17[10];
    a3[11] = v12;
    v13 = v17[5];
    a3[4] = v17[4];
    a3[5] = v13;
    v14 = v17[7];
    a3[6] = v17[6];
    a3[7] = v14;
    v15 = v17[1];
    *a3 = v17[0];
    a3[1] = v15;
    v16 = v17[3];
    a3[2] = v17[2];
    a3[3] = v16;
  }
  else
  {
    __break(1u);
  }
}

void specialized closure #1 in TimelineView<>.init(_:content:)(uint64_t a1@<X0>, void (*a2)(_QWORD *__return_ptr, char *)@<X1>, void *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[43];

  type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  MEMORY[0x1E0C80A78](v6, v8);
  v9 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context(0);
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) == v7)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    a2(v12, v9);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    memcpy(a3, v12, 0x151uLL);
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized closure #1 in TimelineView<>.init(_:content:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[2];
  void (*v21)(char *);
  _BYTE v22[8];

  v20[1] = a3;
  v21 = a2;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(0);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context(0);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v13, v4);
  LOBYTE(a1) = v13[*(int *)(v10 + 44)];
  outlined init with copy of TimelineInvalidationAction((uint64_t)&v13[*(int *)(v10 + 48)], (uint64_t)v22);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v18, v8, v4);
  v18[*(int *)(v15 + 44)] = a1;
  outlined init with take of TimelineInvalidationAction((uint64_t)v22, (uint64_t)&v18[*(int *)(v15 + 48)]);
  v21(v18);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[2];
  void (*v21)(char *);
  _BYTE v22[8];

  v20[1] = a3;
  v21 = a2;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(0);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context(0);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v13, v4);
  LOBYTE(a1) = v13[*(int *)(v10 + 44)];
  outlined init with copy of TimelineInvalidationAction((uint64_t)&v13[*(int *)(v10 + 48)], (uint64_t)v22);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v18, v8, v4);
  v18[*(int *)(v15 + 44)] = a1;
  outlined init with take of TimelineInvalidationAction((uint64_t)v22, (uint64_t)&v18[*(int *)(v15 + 48)]);
  v21(v18);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context);
}

unint64_t lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE56B0], MEMORY[0x1E0CE56A0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE56A8], MEMORY[0x1E0CE56A0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5698], MEMORY[0x1E0CE56A0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent;
  if (!lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], MEMORY[0x1E0CAFAB8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAFAC8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent);
  }
  return result;
}

uint64_t outlined copy of AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<_ConditionalContent<Text, Text>, Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>();
    v3[1] = MEMORY[0x1E0CE6C58];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<Text, Text>, Text>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>();
    v3[1] = MEMORY[0x1E0CE6C58];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<Text, Text>, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<Text, Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2[0] = MEMORY[0x1E0CE6C58];
    v2[1] = MEMORY[0x1E0CE6C58];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return outlined consume of _ConditionalContent<_ConditionalContent<Text, Text>, Text>.Storage(a1, a2, a3, a4, a5, BYTE1(a5) & 1);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of _ConditionalContent<_ConditionalContent<Text, Text>, Text>.Storage(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return outlined consume of _ConditionalContent<Text, Text>.Storage(a1, a2, a3);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of _ConditionalContent<Text, Text>.Storage(uint64_t a1, uint64_t a2, char a3)
{
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined copy of _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>.Storage(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return outlined copy of _ConditionalContent<_ConditionalContent<Text, Text>, Text>.Storage(a1, a2, a3, a4, a5, BYTE1(a5) & 1);
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t outlined copy of _ConditionalContent<_ConditionalContent<Text, Text>, Text>.Storage(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return outlined copy of _ConditionalContent<Text, Text>.Storage(a1, a2, a3);
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t outlined copy of _ConditionalContent<Text, Text>.Storage(uint64_t a1, uint64_t a2, char a3)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t outlined release of ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined init with take of _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1871A86FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(unint64_t, uint64_t);
  uint64_t v19;

  v1 = type metadata accessor for PillPlaybackButtonStyleBody();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v19 = *(_QWORD *)(v2 + 64);
  type metadata accessor for ClosedRange<Date>();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + v3), *(_BYTE *)(v0 + v3 + 8));
  v8 = v0 + v3 + *(int *)(v1 + 20);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
  {
    v9 = type metadata accessor for Date();
    v10 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8, v9);
    v10(v8 + *(int *)(v5 + 36), v9);
  }
  v11 = type metadata accessor for PlaybackButton.Configuration(0);
  v12 = v8 + *(int *)(v11 + 20);
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 2, v13))
    (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v12, v13);
  v15 = (v3 + v19 + v7) & ~v7;
  swift_bridgeObjectRelease();
  v16 = v8 + *(int *)(v11 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));

  swift_release();
  v17 = *(void (**)(unint64_t, uint64_t))(v14 + 8);
  v17(v0 + v15, v13);
  v17(v0 + v15 + *(int *)(v5 + 36), v13);
  return swift_deallocObject();
}

__n128 partial apply for closure #1 in PillPlaybackButtonStyleBody.resolvedProgressView.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  _OWORD v13[11];

  v3 = *(_QWORD *)(type metadata accessor for PillPlaybackButtonStyleBody() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  type metadata accessor for ClosedRange<Date>();
  v5 = static Alignment.leading.getter();
  v7 = v6;
  closure #1 in PillPlaybackButtonStyleBody.progressView(interval:referenceDate:)(v1 + v4, (uint64_t)v13);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = v13[9];
  *(_OWORD *)(a1 + 144) = v13[8];
  *(_OWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 176) = v13[10];
  v9 = v13[5];
  *(_OWORD *)(a1 + 80) = v13[4];
  *(_OWORD *)(a1 + 96) = v9;
  v10 = v13[7];
  *(_OWORD *)(a1 + 112) = v13[6];
  *(_OWORD *)(a1 + 128) = v10;
  v11 = v13[1];
  *(_OWORD *)(a1 + 16) = v13[0];
  *(_OWORD *)(a1 + 32) = v11;
  result = (__n128)v13[3];
  *(_OWORD *)(a1 + 48) = v13[2];
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t sub_1871A8978()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in TimelineView<>.init(_:content:)(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  specialized closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(_OWORD *__return_ptr, char *))(v2 + 16), a2);
}

uint64_t partial apply for specialized closure #1 in TimelineView<>.init(_:content:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

void type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TimelineView<PeriodicTimelineSchedule, Never>.Context)
  {
    v2 = type metadata accessor for PeriodicTimelineSchedule();
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule and conformance PeriodicTimelineSchedule, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE5C78], MEMORY[0x1E0CE5C70]);
    v4 = type metadata accessor for TimelineView.Context(a1, v2, MEMORY[0x1E0DEDCE8], v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  }
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context(uint64_t a1)
{
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(a1, &lazy cache variable for type metadata for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>.Context, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, type metadata accessor for TimelineView.Context);
}

uint64_t outlined init with take of TimelineInvalidationAction(uint64_t a1, uint64_t a2)
{
  initializeWithTake for TimelineInvalidationAction(a2, a1);
  return a2;
}

void type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for TimelineView<EveryMinuteTimelineSchedule, Never>.Context)
  {
    v2 = lazy protocol witness table accessor for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule();
    v3 = type metadata accessor for TimelineView.Context(a1, MEMORY[0x1E0CE61A0], MEMORY[0x1E0DEDCE8], v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
  }
}

unint64_t lazy protocol witness table accessor for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule;
  if (!lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6190], MEMORY[0x1E0CE61A0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule and conformance EveryMinuteTimelineSchedule);
  }
  return result;
}

void type metadata accessor for <<opaque return type of Transition.combined<A>(with:)>>.0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!lazy cache variable for type metadata for <<opaque return type of Transition.combined<A>(with:)>>.0)
  {
    v2 = lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
    v3 = lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
    v6[0] = MEMORY[0x1E0CE2F20];
    v6[1] = MEMORY[0x1E0CE3EF8];
    v6[2] = v2;
    v6[3] = v3;
    v4 = MEMORY[0x18D75FF88](a1, v6, MEMORY[0x1E0CE0D40], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Transition.combined<A>(with:)>>.0);
  }
}

unint64_t lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition;
  if (!lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2F18], MEMORY[0x1E0CE2F20]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition);
  }
  return result;
}

void type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Transition.combined<A>(with:)>>.0(255);
    lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
    lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for FilteredTransition();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  }
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context(uint64_t a1)
{
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(a1, &lazy cache variable for type metadata for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Context, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, type metadata accessor for TimelineView.Context);
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v8 = type metadata accessor for ProgressViewSchedule(255);
    v9 = a3(255);
    v10 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ProgressViewSchedule and conformance ProgressViewSchedule, type metadata accessor for ProgressViewSchedule, (uint64_t)&protocol conformance descriptor for ProgressViewSchedule);
    v11 = a4(a1, v8, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t View.gaugeIndicatorDotTint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;

  swift_getKeyPath();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:), (uint64_t)v11, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE1D58], v9, (uint64_t)&v12);
  v11[7] = v12;
  View.environment<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.gaugeIndicatorDotTint.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.gaugeIndicatorDotTint : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.gaugeIndicatorDotTint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1871A9000@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.gaugeIndicatorDotTint.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.gaugeIndicatorDotTint : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t sub_1871A9068()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = AnyShapeStyle.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t partial apply for implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:)(a1, a2);
}

uint64_t sub_1871A9148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>)
  {
    type metadata accessor for AnyShapeStyle?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>);
  }
}

void type metadata accessor for AnyShapeStyle?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyShapeStyle?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?);
  }
}

void type metadata accessor for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>);
  }
}

ValueMetadata *type metadata accessor for GaugeIndicatorDotTintEnvironmentKey()
{
  return &type metadata for GaugeIndicatorDotTintEnvironmentKey;
}

void PencilEventsBridge.startObservingPreferredActions()()
{
  uint64_t v0;
  void *ObjCClassFromMetadata;
  void *v2;
  id v3;

  type metadata accessor for UIPencilInteraction();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v2 = (void *)MEMORY[0x18D75CC88](0xD000000000000012, 0x8000000187BD96C0);
  objc_msgSend(ObjCClassFromMetadata, sel_addObserver_forKeyPath_options_context_, v0, v2, 3, v0 + direct field offset for PencilEventsBridge.preferredTapActionContext);

  v3 = (id)MEMORY[0x18D75CC88](0xD000000000000016, 0x8000000187BD96E0);
  objc_msgSend(ObjCClassFromMetadata, sel_addObserver_forKeyPath_options_context_, v0, v3, 3, v0 + direct field offset for PencilEventsBridge.preferredSqueezeActionContext);

}

void PencilEventsBridge.stopObservingPreferredActions()()
{
  uint64_t v0;
  void *ObjCClassFromMetadata;
  void *v2;
  id v3;

  type metadata accessor for UIPencilInteraction();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v2 = (void *)MEMORY[0x18D75CC88](0xD000000000000012, 0x8000000187BD96C0);
  objc_msgSend(ObjCClassFromMetadata, sel_removeObserver_forKeyPath_context_, v0, v2, v0 + direct field offset for PencilEventsBridge.preferredTapActionContext);

  v3 = (id)MEMORY[0x18D75CC88](0xD000000000000016, 0x8000000187BD96E0);
  objc_msgSend(ObjCClassFromMetadata, sel_removeObserver_forKeyPath_context_, v0, v3, v0 + direct field offset for PencilEventsBridge.preferredSqueezeActionContext);

}

void PencilEventsBridge.observeValue(forKeyPath:of:change:context:)(uint64_t a1, void *a2, uint64_t a3, Class isa, _QWORD *a5)
{
  uint64_t *v5;
  objc_class *ObjectType;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  objc_super v26;
  _QWORD v27[3];
  uint64_t v28;

  ObjectType = (objc_class *)swift_getObjectType();
  if (!a5
    || ((uint64_t *)((char *)v5 + direct field offset for PencilEventsBridge.preferredTapActionContext) != a5
      ? (v12 = (uint64_t *)((char *)v5 + direct field offset for PencilEventsBridge.preferredSqueezeActionContext) == a5)
      : (v12 = 1),
        !v12))
  {
    if (a2)
      a2 = (void *)MEMORY[0x18D75CC88](a1, a2);
    outlined init with copy of Any?(a3, (uint64_t)v27);
    v19 = v28;
    if (v28)
    {
      v20 = __swift_project_boxed_opaque_existential_1(v27, v28);
      v21 = *(_QWORD *)(v19 - 8);
      v22 = MEMORY[0x1E0C80A78](v20, v20);
      v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v21 + 16))(v24, v22);
      v25 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      if (!isa)
      {
LABEL_14:
        v26.receiver = v5;
        v26.super_class = ObjectType;
        objc_msgSendSuper2(&v26, sel_observeValueForKeyPath_ofObject_change_context_, a2, v25, isa, a5);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      v25 = 0;
      if (!isa)
        goto LABEL_14;
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_14;
  }
  v13 = *v5;
  v14 = *MEMORY[0x1E0DEEDD8];
  v15 = MEMORY[0x18D760234]((char *)v5 + direct field offset for PencilEventsBridge.host);
  if (v15)
  {
    v17 = (void *)v15;
    LOWORD(v27[0]) = 2;
    v18 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v14 & v13) + 0x50), *(_QWORD *)((v14 & v13) + 0x58), v16);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v18);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
}

uint64_t @objc PencilEventsBridge.observeValue(forKeyPath:of:change:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  objc_class *v15;
  id v16;
  id v17;
  _OWORD v19[2];

  if (a3)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;
    if (a4)
      goto LABEL_3;
LABEL_6:
    memset(v19, 0, sizeof(v19));
    v16 = a5;
    v17 = a1;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  v10 = 0;
  v12 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  swift_unknownObjectRetain();
  v13 = a5;
  v14 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (!a5)
    goto LABEL_7;
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  v15 = (objc_class *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_8:
  PencilEventsBridge.observeValue(forKeyPath:of:change:context:)(v10, v12, (uint64_t)v19, v15, a6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined destroy of Any?((uint64_t)v19);
}

void PencilHoverPose.init(_:in:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1)
  {
    v6 = a1;
    objc_msgSend(v6, sel_location);
    objc_msgSend(a2, sel_convertPoint_toView_, 0);
    v8 = v7;
    v10 = v9;
    objc_msgSend(a2, sel_bounds);
    objc_msgSend(a2, sel_convertRect_toView_, 0);
    objc_msgSend(v6, sel_zOffset);
    v22 = v11;
    objc_msgSend(v6, sel_altitudeAngle);
    v13 = v12;
    objc_msgSend(v6, sel_azimuthAngle);
    v15 = v14;
    objc_msgSend(v6, sel_rollAngle);
    v17 = v16;
    UnitPoint.init(_:in:)();
    v19 = v18;
    v21 = v20;

    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v19;
    *(_QWORD *)(a3 + 24) = v21;
    *(_QWORD *)(a3 + 32) = v22;
  }
  else
  {

    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    v13 = 0;
    v15 = 0;
    v17 = 0;
  }
  *(_QWORD *)(a3 + 40) = v13;
  *(_QWORD *)(a3 + 48) = v15;
  *(_QWORD *)(a3 + 56) = v17;
  *(_BYTE *)(a3 + 64) = a1 == 0;
}

void @objc PencilEventsBridge.pencilInteraction(_:didReceiveTap:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized PencilEventsBridge.pencilInteraction(_:didReceiveTap:)(v7);

}

void @objc PencilEventsBridge.pencilInteraction(_:didReceiveSqueeze:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized PencilEventsBridge.pencilInteraction(_:didReceiveSqueeze:)(v7);

}

uint64_t specialized PencilEventsBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t specialized PencilEventsBridge.updateEnvironment(_:)(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)objc_opt_self();
  objc_msgSend(v2, sel_preferredTapAction);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  objc_msgSend(v2, sel_preferredSqueezeAction);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void specialized PencilEventsBridge.pencilInteraction(_:didReceiveTap:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  CFTimeInterval v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  CFTimeInterval v22;
  char v23;
  uint64_t v24;

  v2 = v1;
  v4 = MEMORY[0x18D760234](v1 + direct field offset for PencilEventsBridge.host);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = objc_msgSend(a1, sel_hoverPose);
    v7 = v5;
    PencilHoverPose.init(_:in:)(v6, v7, (uint64_t)&v16);
    v14 = v17;
    v15 = v16;
    v13 = v18;
    v8 = v19;
    v9 = v20;
    v10 = v21;
    v11 = CACurrentMediaTime();
    v16 = v15;
    v17 = v14;
    v18 = v13;
    v19 = v8;
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = 2;
    v24 = 0;
    v12 = direct field offset for PencilEventsBridge.pencilDoubleTapSerial;
    lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent();
    EventBindingManager.send<A>(_:id:)();

    ++*(_QWORD *)(v2 + v12);
  }
}

void specialized PencilEventsBridge.pencilInteraction(_:didReceiveSqueeze:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  CFTimeInterval v16;
  uint64_t v17;
  id v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  id v22[2];
  _BYTE v23[56];
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  CFTimeInterval v29;
  uint64_t v30;

  v2 = v1;
  v4 = MEMORY[0x18D760234](v1 + direct field offset for PencilEventsBridge.host);
  if (v4)
  {
    v21 = (void *)v4;
    v5 = (unint64_t)objc_msgSend(a1, sel_phase);
    if (v5 >= 4)
    {

      return;
    }
    v6 = 0x3020101u >> (8 * v5);
    objc_msgSend(a1, sel__normalizedForceVelocity);
    v8 = (v7 & 0xFFFFFFFFFFFFFLL) != 0 && (~v7 & 0x7FF0000000000000) == 0;
    v9 = 0;
    if (!v8)
    {
      objc_msgSend(a1, sel__normalizedForceVelocity);
      v9 = v10;
    }
    v11 = objc_msgSend(a1, sel_hoverPose);
    v12 = v21;
    PencilHoverPose.init(_:in:)(v11, v12, (uint64_t)v23);
    v20 = *(_OWORD *)&v23[16];
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v19 = *(_OWORD *)&v23[32];
    v13 = *(_QWORD *)&v23[48];
    v14 = v24;
    v15 = v25;
    v16 = CACurrentMediaTime();
    v23[0] = v6;
    *(_OWORD *)&v23[8] = *(_OWORD *)v22;
    *(_OWORD *)&v23[24] = v20;
    *(_OWORD *)&v23[40] = v19;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    v27 = v9;
    v28 = v8;
    v29 = v16;
    v30 = 0;
    v17 = direct field offset for PencilEventsBridge.pencilSqueezeSerial;
    lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent();
    EventBindingManager.send<A>(_:id:)();
    if (objc_msgSend(a1, sel_phase) == (id)2)
    {

    }
    else
    {
      v18 = objc_msgSend(a1, sel_phase);

      if (v18 != (id)3)
        return;
    }
    ++*(_QWORD *)(v2 + v17);
  }
}

unint64_t lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent;
  if (!lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilSqueezeEvent, &type metadata for PencilSqueezeEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent;
  if (!lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilSqueezeEvent, &type metadata for PencilSqueezeEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent;
  if (!lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilSqueezeEvent, &type metadata for PencilSqueezeEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilDoubleTapEvent, &type metadata for PencilDoubleTapEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilDoubleTapEvent, &type metadata for PencilDoubleTapEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilDoubleTapEvent, &type metadata for PencilDoubleTapEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NSKeyValueChangeKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
  }
  return result;
}

unint64_t type metadata accessor for UIPencilInteraction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIPencilInteraction;
  if (!lazy cache variable for type metadata for UIPencilInteraction)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIPencilInteraction);
  }
  return result;
}

uint64_t View.selectable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SelectableModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for SelectableModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectableModifier);
}

uint64_t sub_1871AA1A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for SelectableModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for SelectableModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectableModifier<A>()
{
  return &protocol witness table for SelectableModifier<A>;
}

uint64_t static SelectableModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _QWORD *v33;
  _QWORD v34[4];
  _QWORD v35[2];
  uint64_t (*v36)(void);
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  __int128 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD v47[3];
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;

  v40 = a6;
  v38 = a5;
  v66 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v11 = *(_QWORD *)a2;
  v41 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v42 = *(_OWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v43 = *(_DWORD *)(a2 + 60);
  v44 = *(_QWORD *)(a2 + 64);
  v45 = *(_QWORD *)(a2 + 72);
  v46 = *(_DWORD *)(a2 + 80);
  v57 = v14;
  v58 = v15;
  v16 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v16 & 1) == 0)
    return a3();
  v35[1] = a4;
  v36 = a3;
  v37 = a7;
  v35[0] = v35;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = v40;
  v34[2] = v38;
  v18 = v38;
  v34[3] = v40;
  LODWORD(v57) = v10;
  type metadata accessor for SelectableModifier(255, v38, v40, v20);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  v39 = _GraphValue.value.getter();
  v57 = v11;
  v58 = v41;
  v59 = v12;
  v60 = v42;
  v61 = v13;
  v62 = v14;
  *(_QWORD *)&v63 = __PAIR64__(v43, v15);
  *((_QWORD *)&v63 + 1) = v44;
  v64 = v45;
  v65 = v46;
  v48 = v11;
  LODWORD(v49) = v41;
  v50 = v12;
  v51 = v42;
  v52 = v13;
  v53 = v14;
  HIDWORD(v42) = v15;
  *(_QWORD *)&v54 = __PAIR64__(v43, v15);
  *((_QWORD *)&v54 + 1) = v44;
  v55 = v45;
  v56 = v46;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v21 = _ViewInputs.environment.getter();
  lazy protocol witness table accessor for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v22 = 0;
  if ((_DWORD)v48 != *MEMORY[0x1E0CFED28])
    v22 = AGCreateWeakAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v23 = swift_release();
  v48 = __PAIR64__(v39, v21);
  v49 = v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = type metadata accessor for SelectableModifier.ChildEnvironment(0, v18, v19, v25);
  v34[-2] = v26;
  v34[-1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectableModifier<A>.ChildEnvironment, v26);
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v48, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v34[-4], v26, MEMORY[0x1E0DEDCE8], v27, MEMORY[0x1E0DEDD18], v28);
  _ViewInputs.environment.setter();
  v48 = v57;
  LODWORD(v49) = v58;
  v50 = v59;
  v51 = v60;
  v52 = v61;
  v53 = v62;
  v54 = v63;
  v55 = v64;
  v56 = v65;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v29 = swift_bridgeObjectRetain();
  ((void (*)(_QWORD *__return_ptr, uint64_t, unint64_t *))v36)(v47, v29, &v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v30 = swift_release();
  v48 = v14;
  LODWORD(v49) = HIDWORD(v42);
  MEMORY[0x1E0C80A78](v30, v31);
  v34[-4] = v18;
  v34[-3] = v19;
  LODWORD(v34[-2]) = v39;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v33 = v37;
  *v37 = v47[0];
  v33[1] = v47[1];
  return result;
}

uint64_t closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for SelectableModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t implicit closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  int v8;
  _BYTE v9[16];
  uint64_t SelectableContent;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  SelectableContent = type metadata accessor for SelectableModifier.MakeSelectableContent(0, a2, a3, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectableModifier<A>.MakeSelectableContent, SelectableContent);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<[Selectable]>, (uint64_t (*)(uint64_t))type metadata accessor for [Selectable], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, SelectableContent, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t SelectableModifier.ChildEnvironment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *WeakValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t *Value;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue)
    return ScrollBehaviorModifier.ChildEnvironment.environment.getter(a5);
  v29 = a5;
  v12 = *WeakValue;
  v13 = WeakValue[1];
  Value = (uint64_t *)AGGraphGetValue();
  v16 = *Value;
  v15 = Value[1];
  v31 = v16;
  v32 = v15;
  swift_retain();
  swift_retain();
  v17 = AGGraphGetValue();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v10, v17, a3);
  v26 = v13;
  v27 = v12;
  v28 = a4;
  LOBYTE(v12) = SelectionContext.canSelect<A>(_:)((uint64_t)v10, v12, v13, a3, a4);
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, a3);
  v30 = v12 & 1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v32)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v20 = AGGraphGetValue();
  v18(v10, v20, a3);
  v21 = SelectionContext.isSelected<A>(_:)((uint64_t)v10, v27, v26, a3, v28);
  v19(v10, a3);
  v30 = v21 & 1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v32)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    result = swift_release();
    v23 = v32;
  }
  else
  {
    result = swift_release();
    v23 = 0;
  }
  v24 = v29;
  *v29 = v31;
  v24[1] = v23;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SelectableModifier<A>.ChildEnvironment@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return SelectableModifier.ChildEnvironment.value.getter(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t SelectableModifier.MakeSelectableContent.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t Value;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Selectable>, (uint64_t (*)(uint64_t))type metadata accessor for Selectable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, a2);
  *(_QWORD *)(v8 + 56) = type metadata accessor for SelectableModifier.SelectableContent(0, a2, a3, v10);
  *(_QWORD *)(v8 + 64) = &protocol witness table for SelectableModifier<A>.SelectableContent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v7, a2);
  return v8;
}

uint64_t protocol witness for Rule.value.getter in conformance SelectableModifier<A>.MakeSelectableContent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v2;
  uint64_t result;

  result = SelectableModifier.MakeSelectableContent.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectableModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static SelectableModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectableModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectableModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SelectableKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t partial apply for closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.SelectionContextKey, &type metadata for _GraphInputs.SelectionContextKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.SelectionContextKey, &type metadata for _GraphInputs.SelectionContextKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey);
  }
  return result;
}

uint64_t type metadata accessor for SelectableModifier.ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectableModifier.ChildEnvironment);
}

uint64_t partial apply for implicit closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #1 in static SelectableModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v4 + 32), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for SelectableModifier.MakeSelectableContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectableModifier.MakeSelectableContent);
}

void type metadata accessor for [Selectable](uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for [Selectable], (uint64_t (*)(uint64_t))type metadata accessor for Selectable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t type metadata accessor for Selectable()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Selectable;
  if (!lazy cache variable for type metadata for Selectable)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Selectable);
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectableKey()
{
  return &type metadata for SelectableKey;
}

void base witness table accessor for _AttributeBody in SelectableModifier<A>.MakeSelectableContent()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in SelectableModifier<A>.ChildEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for SelectableModifier.SelectableContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectableModifier.SelectableContent);
}

uint64_t getEnumTagSinglePayload for SelectableModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871AB11C + 4 * byte_187C11A30[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for SelectableModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for _SceneOutputs()
{
  return &type metadata for _SceneOutputs;
}

void static PathToken.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PathToken.encode(to:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PathToken.init(from:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t *initializeBufferWithCopyOfBuffer for PathToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of PathToken(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t outlined copy of PathToken(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return swift_bridgeObjectRetain();
  else
    return outlined copy of Data._Representation(a1, a2);
}

uint64_t destroy for PathToken(uint64_t a1)
{
  return outlined consume of PathToken(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t outlined consume of PathToken(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return swift_bridgeObjectRelease();
  else
    return outlined consume of Data._Representation(a1, a2);
}

uint64_t *assignWithCopy for PathToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of PathToken(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of PathToken(v5, v6);
  return a1;
}

uint64_t *assignWithTake for PathToken(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of PathToken(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PathToken(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PathToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for PathToken(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t destructiveProjectEnumData for PathToken(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t destructiveInjectEnumTag for PathToken(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for PathToken()
{
  return &type metadata for PathToken;
}

uint64_t DismissStageAction.callAsFunction()()
{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EnvironmentValues.dismissStage.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.dismissStage : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_1871AB7E4()
{
  return EnvironmentValues.dismissStage.setter();
}

ValueMetadata *type metadata accessor for DismissStageAction()
{
  return &type metadata for DismissStageAction;
}

void *type metadata accessor for EnvironmentValues.DismissStageActionKey()
{
  return &unk_1E1AC3898;
}

uint64_t EnvironmentValues.dismissStage.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissStageActionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t getEnumTagSinglePayload for FeedbackRequestContextWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871AB978 + 4 * byte_187C11DB0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for FeedbackRequestContextWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for FeedbackRequestContextWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedbackRequestContextWriter);
}

_UNKNOWN **base witness table accessor for ViewModifier in FeedbackRequestContextWriter<A>()
{
  return &protocol witness table for FeedbackRequestContextWriter<A>;
}

uint64_t View.platformSensoryFeedback<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FeedbackRequestContextWriter(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t FeedbackRequestContext.implementation(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int Attribute;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];

  result = swift_weakLoadStrong();
  if (!result)
    goto LABEL_6;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)result + 80))(&v10, a1, a2);
  if (!v11)
  {
    swift_release();
    result = outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v10);
    goto LABEL_6;
  }
  outlined init with take of OptionalBinaryInteger(&v10, (uint64_t)v12);
  Attribute = AGWeakAttributeGetAttribute();
  v8 = *MEMORY[0x1E0CFED28];
  swift_release();
  if (Attribute == v8)
  {
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
LABEL_6:
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  *(_QWORD *)(a3 + 24) = &type metadata for LocationBasedFeedbackAdaptor;
  *(_QWORD *)(a3 + 32) = &protocol witness table for LocationBasedFeedbackAdaptor;
  v9 = swift_allocObject();
  *(_QWORD *)a3 = v9;
  result = outlined init with take of OptionalBinaryInteger(v12, v9 + 24);
  *(_DWORD *)(v9 + 16) = Attribute;
  return result;
}

uint64_t closure #1 in LocationBasedFeedbackAdaptor.generate()@<X0>(_OWORD *a1@<X8>)
{
  AGGraphClearUpdate();
  *a1 = *(_OWORD *)AGGraphGetValue();
  return AGGraphSetUpdate();
}

uint64_t protocol witness for PlatformSensoryFeedback.setUp() in conformance LocationBasedFeedbackAdaptor()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + 8;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v2);
}

uint64_t protocol witness for PlatformSensoryFeedback.tearDown() in conformance LocationBasedFeedbackAdaptor()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + 8;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 16))(v2);
}

uint64_t protocol witness for PlatformSensoryFeedback.generate() in conformance LocationBasedFeedbackAdaptor()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v1 = static Update.ensure<A>(_:)();
  v2 = MEMORY[0x18D755E9C](v1);
  v4 = v3;
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  __swift_mutable_project_boxed_opaque_existential_1(v0 + 8, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double))(v5 + 16))(v6, v5, v2, v4);
}

uint64_t static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v14[5];
  int v15;
  _BYTE v16[4];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;

  v10 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  v20 = v10;
  v21 = *(_OWORD *)(a2 + 64);
  v22 = *(_DWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)a2;
  v18 = v11;
  type metadata accessor for FeedbackRequestContextWriter(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  v12 = _GraphValue.value.getter();
  closure #2 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(&v17, v12, a5, a6);
  _GraphValue.init(_:)();
  v14[2] = v19;
  v14[3] = v20;
  v14[4] = v21;
  v15 = v22;
  v14[0] = v17;
  v14[1] = v18;
  return (*(uint64_t (**)(_BYTE *, _OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 8) + 24))(v16, v14, a3, a4, a5);
}

uint64_t closure #1 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for FeedbackRequestContextWriter(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a1 + 9);
  if ((v5 & 0x20) != 0)
  {
    v9 = *((_QWORD *)a1 + 5);
    v10 = a1[1];
    v33 = *a1;
    v34 = v10;
    LODWORD(v35) = *((_DWORD *)a1 + 8);
    DWORD1(v35) = v5;
    *((_QWORD *)&v35 + 1) = v9;
    _GraphInputs.interfaceIdiom.getter();
    v33 = v32;
    if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0)
    {
      v11 = a1[3];
      v35 = a1[2];
      v36 = v11;
      v37 = a1[4];
      v38 = *((_DWORD *)a1 + 20);
      v12 = a1[1];
      v33 = *a1;
      v34 = v12;
      v13 = _ViewInputs.position.getter();
      v14 = a1[3];
      v35 = a1[2];
      v36 = v14;
      v37 = a1[4];
      v38 = *((_DWORD *)a1 + 20);
      v15 = a1[1];
      v33 = *a1;
      v34 = v15;
      v16 = _ViewInputs.size.getter();
      v17 = a1[3];
      v35 = a1[2];
      v36 = v17;
      v37 = a1[4];
      v38 = *((_DWORD *)a1 + 20);
      v18 = a1[1];
      v33 = *a1;
      v34 = v18;
      *(_QWORD *)&v33 = __PAIR64__(v16, v13);
      DWORD2(v33) = _ViewInputs.transform.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type FeedbackLocation and conformance FeedbackLocation();
      v19 = Attribute.init<A>(body:value:flags:update:)();
    }
    else
    {
      type metadata accessor for ViewGraph();
      MEMORY[0x18D75C5F8]();
      v19 = ViewGraph.$zeroPoint.getter();
      swift_release();
    }
    v20 = a1[3];
    v35 = a1[2];
    v36 = v20;
    v37 = a1[4];
    v38 = *((_DWORD *)a1 + 20);
    v21 = a1[1];
    v33 = *a1;
    v34 = v21;
    swift_getKeyPath();
    v22 = _ViewInputs.mapEnvironment<A>(_:)();
    v23 = swift_release();
    *(_QWORD *)&v33 = __PAIR64__(v19, a2);
    DWORD2(v33) = v22;
    MEMORY[0x1E0C80A78](v23, v24);
    v29[2] = a3;
    v30 = type metadata accessor for FeedbackRequestContextWriter.ChildModifier(0, a3, a4, v25);
    v31 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FeedbackRequestContextWriter<A>.ChildModifier, v30);
    v26 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v29, v30, MEMORY[0x1E0DEDCE8], v26, MEMORY[0x1E0DEDD18], v27);
    return v32;
  }
  return a2;
}

uint64_t FeedbackRequestContextWriter.ChildModifier.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t Value;
  uint64_t v7;
  uint64_t v9;

  Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, Value, a1);
  v7 = AGCreateWeakAttribute();
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for AnyUIKitSensoryFeedbackCache?, (void (*)(uint64_t))type metadata accessor for AnyUIKitSensoryFeedbackCache);
  AGGraphGetValue();
  v9 = v7;
  swift_weakInit();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a2 + 24))(&v9, a1, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance FeedbackRequestContextWriter<A>.ChildModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FeedbackRequestContextWriter.ChildModifier.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FeedbackRequestContextWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FeedbackRequestContextWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FeedbackRequestContextWriter<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t FeedbackLocation.value.getter()
{
  uint64_t Value;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  _OWORD *v7;
  __int128 v8;
  CGFloat v9;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _OWORD v15[2];
  char v16;
  CGRect v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  CGRect v21;

  Value = AGGraphGetValue();
  v18 = *(_QWORD *)Value;
  v19 = *(_OWORD *)(Value + 8);
  v20 = *(_OWORD *)(Value + 24);
  v15[0] = *(_OWORD *)AGGraphGetValue();
  v1 = swift_retain();
  *(double *)&v2 = MEMORY[0x18D755E9C](v1);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v3, v2));
  v15[0] = *(_OWORD *)AGGraphGetValue();
  v4 = MEMORY[0x18D755E9C]();
  v6 = v5;
  v7 = (_OWORD *)AGGraphGetValue();
  v8 = v7[1];
  v15[0] = *v7;
  v15[1] = v8;
  v17.origin.x = v4;
  v17.origin.y = v6;
  v17.size.width = MEMORY[0x18D75BE3C]();
  v17.size.height = v9;
  hostingViewCoordinateSpace.getter();
  v16 = 1;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v15);
  x = v17.origin.x;
  y = v17.origin.y;
  width = v17.size.width;
  height = v17.size.height;
  CGRectGetWidth(v17);
  v21.origin.x = x;
  v21.origin.y = y;
  v21.size.width = width;
  v21.size.height = height;
  CGRectGetHeight(v21);
  ViewOrigin.init(_:)();
  return swift_release();
}

void protocol witness for static Rule.initialValue.getter in conformance FeedbackLocation(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t protocol witness for Rule.value.getter in conformance FeedbackLocation()
{
  return FeedbackLocation.value.getter();
}

id protocol witness for LocationBasedSensoryFeedback.generate(location:) in conformance NotificationFeedbackImplementation()
{
  uint64_t v0;

  return objc_msgSend(*(id *)v0, sel_notificationOccurred_atLocation_, *(_QWORD *)(v0 + 8));
}

id protocol witness for LocationBasedSensoryFeedback.generate(location:) in conformance SelectionFeedbackImplementation()
{
  id *v0;

  return objc_msgSend(*v0, sel_selectionChangedAtLocation_);
}

id protocol witness for PlatformSensoryFeedback.setUp() in conformance SelectionFeedbackImplementation()
{
  id *v0;

  return objc_msgSend(*v0, sel_prepare);
}

void protocol witness for PlatformSensoryFeedback.generate() in conformance SelectionFeedbackImplementation()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id protocol witness for LocationBasedSensoryFeedback.generate(location:) in conformance CanvasFeedbackImplementation()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char **v5;
  id result;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >> 62 != 2)
    return result;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 == 1 && v1 == 0x8000000000000002)
  {
    v5 = &selRef_alignmentOccurredAtLocation_;
    return objc_msgSend(*(id *)v0, *v5);
  }
  if (v2 == 2 && v1 == 0x8000000000000002)
  {
    v5 = &selRef_pathCompletedAtLocation_;
    return objc_msgSend(*(id *)v0, *v5);
  }
  return result;
}

id protocol witness for LocationBasedSensoryFeedback.generate(location:) in conformance ImpactFeedbackImplementation(double a1, double a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)v2, sel_impactOccurredWithIntensity_atLocation_, *(double *)(v2 + 8), a1, a2);
}

uint64_t partial apply for closure #1 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static FeedbackRequestContextWriter._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_1871AC78C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.feedbackCache.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1871AC7C4()
{
  swift_retain();
  specialized EnvironmentValues.feedbackCache.setter();
  return swift_release();
}

uint64_t type metadata accessor for FeedbackRequestContextWriter.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedbackRequestContextWriter.ChildModifier);
}

unint64_t lazy protocol witness table accessor for type FeedbackLocation and conformance FeedbackLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FeedbackLocation and conformance FeedbackLocation;
  if (!lazy protocol witness table cache variable for type FeedbackLocation and conformance FeedbackLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FeedbackLocation, &unk_1E1ABEEB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeedbackLocation and conformance FeedbackLocation);
  }
  return result;
}

uint64_t outlined destroy of LocationBasedSensoryFeedback?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for LocationBasedSensoryFeedback?, (void (*)(uint64_t))type metadata accessor for LocationBasedSensoryFeedback);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for LocationBasedSensoryFeedback()
{
  unint64_t result;

  result = lazy cache variable for type metadata for LocationBasedSensoryFeedback;
  if (!lazy cache variable for type metadata for LocationBasedSensoryFeedback)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LocationBasedSensoryFeedback);
  }
  return result;
}

uint64_t sub_1871AC8E4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t assignWithCopy for NotificationFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for NotificationFeedbackImplementation(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for NotificationFeedbackImplementation()
{
  return &type metadata for NotificationFeedbackImplementation;
}

ValueMetadata *type metadata accessor for SelectionFeedbackImplementation()
{
  return &type metadata for SelectionFeedbackImplementation;
}

uint64_t initializeBufferWithCopyOfBuffer for CanvasFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for CanvasFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for CanvasFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for CanvasFeedbackImplementation()
{
  return &type metadata for CanvasFeedbackImplementation;
}

_QWORD *initializeBufferWithCopyOfBuffer for ImpactFeedbackImplementation(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for ImpactFeedbackImplementation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ImpactFeedbackImplementation(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ImpactFeedbackImplementation()
{
  return &type metadata for ImpactFeedbackImplementation;
}

uint64_t destroy for LocationBasedFeedbackAdaptor(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
}

uint64_t initializeWithCopy for LocationBasedFeedbackAdaptor(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

uint64_t assignWithCopy for LocationBasedFeedbackAdaptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for LocationBasedFeedbackAdaptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationBasedFeedbackAdaptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationBasedFeedbackAdaptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationBasedFeedbackAdaptor()
{
  return &type metadata for LocationBasedFeedbackAdaptor;
}

void *type metadata accessor for FeedbackLocation()
{
  return &unk_1E1ABEEB8;
}

uint64_t destroy for FeedbackRequestContext()
{
  return swift_weakDestroy();
}

_QWORD *initializeWithCopy for FeedbackRequestContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakCopyInit();
  return a1;
}

_DWORD *assignWithCopy for FeedbackRequestContext(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_weakCopyAssign();
  return a1;
}

_QWORD *initializeWithTake for FeedbackRequestContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

_QWORD *assignWithTake for FeedbackRequestContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for FeedbackRequestContext()
{
  return &type metadata for FeedbackRequestContext;
}

void base witness table accessor for _AttributeBody in FeedbackRequestContextWriter<A>.ChildModifier()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in LocationBasedFeedbackAdaptor.generate()@<X0>(_OWORD *a1@<X8>)
{
  return closure #1 in LocationBasedFeedbackAdaptor.generate()(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StatusBarKey.StatusBar(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

_WORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance StatusBarKey(_WORD *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _WORD *v2;
  __int16 v3;
  uint64_t v4;

  v2 = result;
  v3 = *result;
  if (*result == 2)
  {
    result = a2(&v4);
    v3 = v4;
  }
  *v2 = v3;
  return result;
}

void View.statusBar(hidden:)(char a1)
{
  char v1;

  v1 = a1;
  View.transactionalPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for StatusBarKey, (uint64_t)&v1);
}

void View._statusBar(hidden:)(char a1)
{
  char v1;

  v1 = a1;
  View.transactionalPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for StatusBarKey, (uint64_t)&v1);
}

uint64_t closure #1 in View._statusBar(hidden:)@<X0>(unsigned __int8 *a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3;
  uint64_t result;
  __int16 v5;

  v3 = *a1;
  result = Transaction.animation.getter();
  if (result)
  {
    result = swift_release();
    v5 = 256;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5 | v3;
  return result;
}

uint64_t sub_1871ACF40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for TransactionalPreferenceModifier<Bool, StatusBarKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for TransactionalPreferenceModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t type metadata accessor for TransactionalPreferenceModifier<Bool, StatusBarKey>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TransactionalPreferenceModifier<Bool, StatusBarKey>;
  if (!lazy cache variable for type metadata for TransactionalPreferenceModifier<Bool, StatusBarKey>)
    type metadata accessor for TransactionalPreferenceModifier();
  return result;
}

ValueMetadata *type metadata accessor for StatusBarKey()
{
  return &type metadata for StatusBarKey;
}

uint64_t storeEnumTagSinglePayload for StatusBarKey.StatusBar(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1871AD06C + 4 * byte_187C1214D[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1871AD0A0 + 4 * byte_187C12148[v4]))();
}

uint64_t sub_1871AD0A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1871AD0A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1871AD0B0);
  return result;
}

uint64_t sub_1871AD0BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1871AD0C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1871AD0C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1871AD0D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StaticIf(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t initializeWithTake for StaticIf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for StaticIf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticIf(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871AD360 + 4 * byte_187C121B8[v17 - 1]))();
}

void storeEnumTagSinglePayload for StaticIf(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t base witness table accessor for Gesture in <> StaticIf<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &v4);
}

void View.staticIf<A, B>(_:trueModifier:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5)
{
  closure #1 in View.staticIf<A, B>(_:trueModifier:)(a1, a2, a3, a4, a5);
  type metadata accessor for StaticIf();
}

uint64_t sub_1871AD674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return closure #2 in View.staticIf<A, B>(_:trueModifier:)(v1, v2, v3 + *(int *)(a1 + 52));
}

void StaticIf<>.init(_:then:else:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  double v9;
  uint64_t (*v10)(double);
  uint64_t v11;

  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = v10(v9);
  a4(v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
  type metadata accessor for StaticIf();
}

uint64_t sub_1871AD768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3 + *(int *)(a1 + 52), v4, v1);
}

void StaticIf<>.init<A>(in:then:else:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(a1, a8);
  v9 = type metadata accessor for StyleContextAcceptsPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v9);
  a2();
  type metadata accessor for StaticIf();
}

uint64_t sub_1871AD830()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t static StaticIf<>._viewListCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v9 = *a1;
  v10 = a1[1];
  v11 = *((_DWORD *)a1 + 4);
  v12 = a1[3];
  v19 = HIDWORD(v10);
  _ViewListCountInputs.base.getter();
  v17 = v23;
  v18 = v24;
  v20 = v25;
  v21 = v26;
  v22 = v27;
  v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 8))(&v17, a2, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v23 = v9;
  v24 = v10;
  LODWORD(v25) = v11;
  *(_QWORD *)&v26 = v12;
  if ((v13 & 1) != 0)
    return (*(uint64_t (**)(uint64_t *))(a6 + 40))(&v23);
  else
    return (*(uint64_t (**)(uint64_t *))(a7 + 40))(&v23);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> StaticIf<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static StaticIf<>._viewListCount(inputs:)(a1, a2[2], a2[3], a2[4], a2[5], *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

void protocol witness for View.body.getter in conformance <> StaticIf<A, B, C>(uint64_t a1, uint64_t a2)
{
  protocol witness for View.body.getter in conformance <> StaticIf<A, B, C>(a1, a2, (uint64_t)&protocol conformance descriptor for <> StaticIf<A, B, C>, (void (*)(uint64_t, uint64_t))specialized PrimitiveView.body.getter);
}

void static StaticIf<>._makeGesture(gesture:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v10 = *a1;
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v36 = *((_DWORD *)a2 + 3);
  v13 = a2[2];
  v14 = *((_DWORD *)a2 + 6);
  v15 = *((_DWORD *)a2 + 7);
  v16 = *((_DWORD *)a2 + 8);
  v17 = *((_DWORD *)a2 + 9);
  v18 = a2[5];
  v31 = a2[6];
  v30 = *((_DWORD *)a2 + 14);
  v29 = *((_DWORD *)a2 + 15);
  v28 = *((_DWORD *)a2 + 16);
  v27 = *((_DWORD *)a2 + 17);
  v26 = *((_DWORD *)a2 + 18);
  v25 = *((_DWORD *)a2 + 19);
  v24 = *((_DWORD *)a2 + 20);
  v19 = *(_OWORD *)((char *)a2 + 100);
  v48 = *(_OWORD *)((char *)a2 + 84);
  v49 = v19;
  v50 = *(uint64_t *)((char *)a2 + 116);
  v39 = v11;
  v40 = v11;
  v38 = v12;
  LODWORD(v41) = v12;
  v37 = v13;
  v42 = v13;
  v35 = v14;
  v43 = __PAIR64__(v15, v14);
  v34 = v15;
  v33 = v16;
  v44 = v16;
  v32 = v17;
  v45 = v17;
  v46 = v18;
  v20 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a6 + 8))(&v40, a3, a6);
  if ((v20 & 1) != 0)
  {
    v23 = &v22;
    MEMORY[0x1E0C80A78](v20, v21);
    LODWORD(v47) = v10;
    v40 = a3;
    v41 = a4;
    v42 = a5;
    v43 = a6;
    type metadata accessor for StaticIf();
  }
  v23 = &v22;
  MEMORY[0x1E0C80A78](v20, v21);
  LODWORD(v47) = v10;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v43 = a6;
  type metadata accessor for StaticIf();
}

void sub_1871ADD10()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v2 = *(_OWORD *)(v1 - 144);
  *(_OWORD *)(v1 - 196) = *(_OWORD *)(v1 - 128);
  *(_QWORD *)(v1 - 296) = *(_QWORD *)(v1 - 304);
  *(_DWORD *)(v1 - 288) = *(_DWORD *)(v1 - 308);
  *(_DWORD *)(v1 - 284) = *(_DWORD *)(v1 - 324);
  *(_QWORD *)(v1 - 280) = *(_QWORD *)(v1 - 320);
  *(_DWORD *)(v1 - 272) = *(_DWORD *)(v1 - 328);
  *(_DWORD *)(v1 - 268) = *(_DWORD *)(v1 - 332);
  *(_DWORD *)(v1 - 264) = *(_DWORD *)(v1 - 336);
  *(_DWORD *)(v1 - 260) = *(_DWORD *)(v1 - 340);
  v3 = *(_QWORD *)(v1 - 352);
  *(_QWORD *)(v1 - 256) = v0;
  *(_QWORD *)(v1 - 248) = v3;
  LODWORD(v3) = *(_DWORD *)(v1 - 360);
  *(_DWORD *)(v1 - 240) = *(_DWORD *)(v1 - 356);
  *(_DWORD *)(v1 - 236) = v3;
  LODWORD(v3) = *(_DWORD *)(v1 - 368);
  *(_DWORD *)(v1 - 232) = *(_DWORD *)(v1 - 364);
  *(_DWORD *)(v1 - 228) = v3;
  LODWORD(v3) = *(_DWORD *)(v1 - 376);
  *(_DWORD *)(v1 - 224) = *(_DWORD *)(v1 - 372);
  *(_DWORD *)(v1 - 220) = v3;
  *(_DWORD *)(v1 - 216) = *(_DWORD *)(v1 - 380);
  *(_QWORD *)(v1 - 180) = *(_QWORD *)(v1 - 112);
  *(_OWORD *)(v1 - 212) = v2;
  JUMPOUT(0x1871ADE44);
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance <> StaticIf<A, B, C>(int *a1, uint64_t *a2, uint64_t a3)
{
  static StaticIf<>._makeGesture(gesture:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40));
}

void protocol witness for Gesture.body.getter in conformance <> StaticIf<A, B, C>(uint64_t a1, uint64_t a2)
{
  protocol witness for View.body.getter in conformance <> StaticIf<A, B, C>(a1, a2, (uint64_t)&protocol conformance descriptor for <> StaticIf<A, B, C>, (void (*)(uint64_t, uint64_t))specialized PrimitiveGesture.body.getter);
}

void protocol witness for View.body.getter in conformance <> StaticIf<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  int8x16_t v7;

  v7 = vextq_s8(*(int8x16_t *)(a2 - 16), *(int8x16_t *)(a2 - 16), 8uLL);
  v6 = MEMORY[0x18D75FFDC](a3, a1, &v7);
  a4(a1, v6);
  JUMPOUT(0x1871ADEF8);
}

uint64_t base witness table accessor for ViewModifier in <> StaticIf<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &v4);
}

uint64_t base witness table accessor for View in <> StaticIf<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &v4);
}

void View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  closure #1 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(a1, a2, a3, a4, a7, a8);
  type metadata accessor for StaticIf();
}

uint64_t sub_1871ADFEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  return closure #2 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(v7, v8, v4, v3 + *(int *)(a1 + 52), v5, v1, v2);
}

uint64_t closure #1 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(uint64_t, double);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v20 - v14;
  v17(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a6);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, a3);
}

uint64_t closure #2 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, double);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v21 - v15;
  v18(v17, v14);
  static ViewBuilder.buildExpression<A>(_:)(v11, a3, a7);
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v11, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, a3);
}

uint64_t closure #1 in View.staticIf<A, B>(_:trueModifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v19 - v13;
  v16(v15, v12);
  static ViewBuilder.buildExpression<A>(_:)(v9, a3, a5);
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, a3);
}

uint64_t closure #2 in View.staticIf<A, B>(_:trueModifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v8, v9, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v7, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

void View.staticIf<A, B, C>(context:trueModifier:falseModifier:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for StyleContextAcceptsPredicate();
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v11);
  View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(a1, a2, a3, a4, a5, a6, v12, a8);
}

uint64_t TableRowContent.draggable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD v14[2];

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  v14[0] = partial apply for closure #1 in TableRowContent.draggable<A>(_:);
  v14[1] = v12;
  lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier();
  swift_retain();
  Scene.modifier<A>(_:)((uint64_t)v14, a3, (uint64_t)&type metadata for ItemProviderTableRowModifier);
  return swift_release();
}

uint64_t closure #1 in TableRowContent.draggable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSItemProvider);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  swift_retain();
  return NSItemProvider.init<A>(transferable:)();
}

uint64_t sub_1871AE590()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableRowContent.draggable<A>(_:)()
{
  uint64_t *v0;

  return closure #1 in TableRowContent.draggable<A>(_:)(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

unint64_t lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier;
  if (!lazy protocol witness table cache variable for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemProviderTableRowModifier, &type metadata for ItemProviderTableRowModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier);
  }
  return result;
}

uint64_t TableRowContent.dropDestination<A>(for:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v24[6];

  v13 = MEMORY[0x18D754DF8](a5, a7);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a2;
  v14[7] = a3;
  v15 = TransferableDropAction.init(action:)();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v24[4] = type metadata accessor for TransferableDropAction(0, a5, a7, v20);
  v24[5] = &protocol witness table for TransferableDropAction<A>;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v15;
  v22[3] = v17;
  v22[4] = v19;
  v22[5] = v21;
  v24[0] = v13;
  v24[1] = v22;
  lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier();
  swift_retain();
  Scene.modifier<A>(_:)((uint64_t)v24, a4, (uint64_t)&type metadata for DropOntoTableRowModifier);
  return outlined destroy of DropOntoConfiguration((uint64_t)v24);
}

uint64_t partial apply for closure #1 in TableRowContent.dropDestination<A>(for:action:)()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 48))();
  return 1;
}

uint64_t sub_1871AE754()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier;
  if (!lazy protocol witness table cache variable for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DropOntoTableRowModifier, &type metadata for DropOntoTableRowModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier);
  }
  return result;
}

uint64_t DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  _QWORD v15[3];

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  swift_retain();
  v15[0] = MEMORY[0x18D754DF8](a5, a7);
  v15[1] = partial apply for closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:);
  v15[2] = v13;
  lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier();
  Scene.modifier<A>(_:)((uint64_t)v15, a4, (uint64_t)&type metadata for OnInsertTableRowModifier);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_group_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  _QWORD *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD aBlock[6];
  uint64_t v58;

  v56 = a7;
  v54 = a5;
  v50 = a4;
  v48 = a3;
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS();
  v52 = *(_QWORD *)(v17 - 8);
  v53 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v51 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = dispatch_group_create();
  v58 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  AtomicBox.init(wrappedValue:)();
  v21 = aBlock[0];
  v55 = a2;
  if (!(a2 >> 62))
  {
    v22 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v49 = a1;
    if (v22)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v40 = (void *)static OS_dispatch_queue.main.getter();
    v41 = (_QWORD *)swift_allocObject();
    v41[2] = v54;
    v41[3] = a6;
    v41[4] = v56;
    v41[5] = a8;
    v42 = v50;
    v41[6] = v48;
    v41[7] = v42;
    v41[8] = v49;
    v41[9] = v21;
    aBlock[4] = partial apply for closure #2 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:);
    aBlock[5] = v41;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_13;
    v43 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v44 = v51;
    static DispatchQoS.unspecified.getter();
    v58 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v43);
    swift_release();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v44, v53);
    return swift_release();
  }
  swift_bridgeObjectRetain();
  a2 = v55;
  result = _CocoaArrayWrapper.endIndex.getter();
  v22 = result;
  v49 = a1;
  if (!result)
    goto LABEL_12;
LABEL_3:
  if (v22 >= 1)
  {
    v24 = v21;
    v25 = v22;
    v45 = v16;
    v46 = v13;
    v47 = v12;
    if ((a2 & 0xC000000000000001) != 0)
    {
      v26 = 0;
      v27 = v54;
      v28 = v25;
      v21 = v24;
      do
      {
        MEMORY[0x18D75E3BC](v26++, a2);
        dispatch_group_enter(v20);
        v29 = (_QWORD *)swift_allocObject();
        v29[2] = v27;
        v29[3] = a6;
        v29[4] = v56;
        v29[5] = a8;
        v29[6] = v20;
        v29[7] = v21;
        swift_retain();
        v30 = v20;
        v31 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();
        a2 = v55;
        swift_unknownObjectRelease();

        swift_release();
      }
      while (v28 != v26);
    }
    else
    {
      v32 = 0;
      v33 = v54;
      v34 = v25;
      v21 = v24;
      do
      {
        v35 = *(void **)(a2 + 8 * v32++ + 32);
        v36 = v35;
        dispatch_group_enter(v20);
        v37 = (_QWORD *)swift_allocObject();
        v37[2] = v33;
        v37[3] = a6;
        v37[4] = v56;
        v37[5] = a8;
        v37[6] = v20;
        v37[7] = v21;
        swift_retain();
        v38 = v20;
        v39 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();

        a2 = v55;
        swift_release();
      }
      while (v34 != v32);
    }
    swift_bridgeObjectRelease();
    v13 = v46;
    v12 = v47;
    v16 = v45;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  return closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(a1, a2, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

unint64_t lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier;
  if (!lazy protocol witness table cache variable for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnInsertTableRowModifier, &type metadata for OnInsertTableRowModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier);
  }
  return result;
}

void closure #1 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v22;
  os_log_type_t v23;
  NSObject *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(uint64_t *, _QWORD);
  uint64_t v35[4];
  uint64_t v36;

  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v35[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v35[-1] - v14;
  type metadata accessor for Error();
  v16 = type metadata accessor for Result();
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (void **)((char *)&v35[-1] - v19);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v35[-1] - v19, a1, v16, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = *v20;
    v23 = static os_log_type_t.fault.getter();
    v24 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v24, v23))
    {
      v25 = v22;
      v26 = v22;
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v35[0] = v28;
      *(_DWORD *)v27 = 136315394;
      v29 = _typeName(_:qualified:)();
      v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      swift_getErrorValue();
      v31 = Error.localizedDescription.getter();
      v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_186E48000, v24, v23, "Error loading %s: %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v28, -1, -1);
      MEMORY[0x18D760108](v27, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v9 + 32))(v15, v20, a5);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, a5);
    v36 = a3;
    swift_retain();
    type metadata accessor for Array();
    type metadata accessor for AtomicBox();
    v33 = (void (*)(uint64_t *, _QWORD))AtomicBox.wrappedValue.modify();
    Array.append(_:)();
    v33(v35, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, a5);
  }
  dispatch_group_leave(a2);
}

uint64_t closure #2 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  type metadata accessor for Array();
  type metadata accessor for AtomicBox();
  AtomicBox.wrappedValue.getter();
  a1(a3);
  return swift_bridgeObjectRelease();
}

void DynamicTableRowContent.dropDestination<A>(for:action:isTargeted:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t TableRowContent.itemProvider(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier();
  return Scene.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for ItemProviderTableRowModifier);
}

uint64_t DynamicTableRowContent.onInsert(of:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v6[3];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier();
  return Scene.modifier<A>(_:)((uint64_t)v6, a4, (uint64_t)&type metadata for OnInsertTableRowModifier);
}

uint64_t ItemProviderTableRowModifier.body.getter@<X0>(uint64_t (**a1)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t *@<X8>);

  v3 = *v1;
  v4 = v1[1];
  if (*v1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;
  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1871AF280()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance ItemProviderTableRowModifier@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v1;
  v4 = v1[1];
  if (*v1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?)partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v5;
  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t OnInsertTableRowModifier.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in ItemProviderTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in OnInsertTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance OnInsertTableRowModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_retain();
}

ValueMetadata *type metadata accessor for ItemProviderTableRowModifier()
{
  return &type metadata for ItemProviderTableRowModifier;
}

uint64_t destroy for OnInsertTableRowModifier()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for OnInsertTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for OnInsertTableRowModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnInsertTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OnInsertTableRowModifier()
{
  return &type metadata for OnInsertTableRowModifier;
}

uint64_t sub_1871AF4E4(uint64_t a1)
{
  return get_witness_table_7SwiftUI15TableRowContentRz16CoreTransferable0G0Rd__r__lAA08ModifiedE0VyxAA012ItemProvidercD8ModifierVGAaBHpxAaBHD1__AhA01_cdeK0HPyHCHCTm(a1, (uint64_t)&type metadata for ItemProviderTableRowModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier);
}

uint64_t sub_1871AF4F8(uint64_t a1)
{
  return get_witness_table_7SwiftUI15TableRowContentRz16CoreTransferable0G0Rd__r__lAA08ModifiedE0VyxAA012ItemProvidercD8ModifierVGAaBHpxAaBHD1__AhA01_cdeK0HPyHCHCTm(a1, (uint64_t)&type metadata for DropOntoTableRowModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier);
}

uint64_t get_witness_table_7SwiftUI15TableRowContentRz16CoreTransferable0G0Rd__r__lAA08ModifiedE0VyxAA012ItemProvidercD8ModifierVGAaBHpxAaBHD1__AhA01_cdeK0HPyHCHCTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = a3();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

uint64_t sub_1871AF56C()
{
  return MEMORY[0x1E0CE7C28];
}

_UNKNOWN **sub_1871AF578()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

_UNKNOWN **sub_1871AF584()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

ValueMetadata *type metadata accessor for DropOntoTraitKey()
{
  return &type metadata for DropOntoTraitKey;
}

ValueMetadata *type metadata accessor for DropOntoTableRowModifier()
{
  return &type metadata for DropOntoTableRowModifier;
}

uint64_t DropOntoConfiguration.performDrop(info:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v2 = v1;
  v4 = *v1;
  v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (MEMORY[0x18D760234](v5))
  {
    swift_getObjectType();
    v6 = UIDropSession.itemProviders(for:)(v4);
    swift_unknownObjectRelease();
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9D8];
  }
  v7 = swift_allocObject();
  outlined init with copy of TableColumnList((uint64_t)(v2 + 1), v7 + 16);
  outlined init with copy of DropInfo((uint64_t)a1, (uint64_t)&v15);
  v8 = swift_allocObject();
  v9 = v16;
  *(_OWORD *)(v8 + 16) = v15;
  *(_OWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 48) = v17;
  v10 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 48);
  __swift_mutable_project_boxed_opaque_existential_1(v7 + 16, v10);
  (*(void (**)(uint64_t (*)(_QWORD), uint64_t, uint64_t, uint64_t))(v11 + 16))(destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, v8, v10, v11);
  outlined init with copy of DropInfo((uint64_t)a1, (uint64_t)&v15);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v6;
  v13 = v16;
  *(_OWORD *)(v12 + 32) = v15;
  *(_OWORD *)(v12 + 48) = v13;
  *(_QWORD *)(v12 + 64) = v17;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in DropOntoConfiguration.performDrop(info:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v5 = a1 + 16;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v5, (uint64_t)v10);
  v6 = v11;
  v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v8 = (double *)__swift_project_boxed_opaque_existential_1(a3, a3[3]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v7 + 32))(a2, v6, v7, v8[2], v8[3]);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

BOOL DropConfigurationDelegate.validateDrop(info:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::OpaquePointer v4;
  _QWORD *v5;
  Swift::Bool v6;
  _OWORD v8[3];
  _OWORD v9[3];

  v2 = v1;
  outlined init with copy of DropOntoConfiguration?(v2, (uint64_t)v9);
  if (*(_QWORD *)&v9[0])
  {
    v8[0] = v9[0];
    v8[1] = v9[1];
    v8[2] = v9[2];
    v4._rawValue = *(void **)&v9[0];
    v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (MEMORY[0x18D760234](v5))
    {
      swift_getObjectType();
      v6 = UIDropSession.hasItemsConforming(to:)(v4);
      swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    outlined destroy of DropOntoConfiguration((uint64_t)v8);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL protocol witness for DropDelegate.performDrop(info:) in conformance DropConfigurationDelegate(_QWORD *a1)
{
  uint64_t v1;
  _BOOL8 v3;
  _QWORD v5[6];

  outlined init with copy of DropOntoConfiguration?(v1, (uint64_t)v5);
  if (v5[0])
  {
    DropOntoConfiguration.performDrop(info:)(a1);
    outlined destroy of DropOntoConfiguration((uint64_t)v5);
  }
  else
  {
    outlined destroy of DropOntoConfiguration?((uint64_t)v5);
  }
  outlined init with copy of DropOntoConfiguration?(v1, (uint64_t)v5);
  v3 = v5[0] != 0;
  outlined destroy of DropOntoConfiguration?((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance DropOntoTraitKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of DropOntoConfiguration?((uint64_t)&static DropOntoTraitKey.defaultValue, a1);
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in DropOntoTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance DropOntoTableRowModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DropOntoConfiguration(v1, a1);
}

uint64_t outlined init with copy of DropOntoConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = a2 + 8;
  v4 = a1 + 8;
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(v3, v4, v6);
  return a2;
}

uint64_t outlined init with copy of DropOntoConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for DropOntoConfiguration?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for DropOntoConfiguration?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DropOntoConfiguration?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?);
  }
}

uint64_t sub_1871AFA98()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(*(void (**)(uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

void partial apply for closure #1 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in DynamicTableRowContent.dropDestination<A>(for:action:)(a1, *(NSObject **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t type metadata accessor for Error()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Error;
  if (!lazy cache variable for type metadata for Error)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Error);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in closure #1 in TableRowContent.draggable<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t destroy for DropConfigurationDelegate(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  }
  return result;
}

uint64_t initializeWithCopy for DropConfigurationDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v3 = a2 + 8;
    v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v4;
    v5 = v4;
    v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
    swift_bridgeObjectRetain();
    v6(a1 + 8, v3, v5);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for DropConfigurationDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t *, uint64_t);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), a2 + 1);
    }
    else
    {
      outlined destroy of DropOntoConfiguration(a1);
      v10 = *((_OWORD *)a2 + 1);
      v9 = *((_OWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v9;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = v5;
    v6 = a2 + 1;
    v7 = a2[4];
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = a2[5];
    v8 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v7 - 8);
    swift_bridgeObjectRetain();
    v8(a1 + 8, v6, v7);
  }
  else
  {
    v11 = *(_OWORD *)a2;
    v12 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)a1 = v11;
  }
  return a1;
}

uint64_t outlined destroy of DropOntoConfiguration(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return a1;
}

uint64_t assignWithTake for DropConfigurationDelegate(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (!*(_QWORD *)a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    outlined destroy of DropOntoConfiguration(a1);
LABEL_5:
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DropConfigurationDelegate(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DropConfigurationDelegate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DropConfigurationDelegate()
{
  return &type metadata for DropConfigurationDelegate;
}

uint64_t destroy for DropOntoConfiguration(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for DropOntoTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = a2 + 8;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

_QWORD *assignWithCopy for DropOntoTableRowModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

uint64_t assignWithTake for DropOntoTableRowModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DropOntoTableRowModifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DropOntoTableRowModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DropOntoConfiguration()
{
  return &type metadata for DropOntoConfiguration;
}

_UNKNOWN **sub_1871B0040()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

uint64_t outlined destroy of DropOntoConfiguration?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for DropOntoConfiguration?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1871B0088()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1871B00AC()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DropOntoConfiguration.performDrop(info:)()
{
  uint64_t *v0;

  return closure #2 in DropOntoConfiguration.performDrop(info:)(v0[2], v0[3], v0 + 4);
}

uint64_t View.keyboardType(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.keyboardType.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.keyboardType : EnvironmentValues@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.keyboardType : EnvironmentValues()
{
  return EnvironmentValues.keyboardType.setter();
}

uint64_t sub_1871B044C()
{
  return EnvironmentValues.keyboardType.setter();
}

uint64_t EnvironmentValues.keyboardType.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static KeyboardType.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static KeyboardType.asciiCapable.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static KeyboardType.numbersAndPunctuation.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static KeyboardType.url.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

void static KeyboardType.numberPad.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static KeyboardType.phonePad.getter(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

void static KeyboardType.namePhonePad.getter(_QWORD *a1@<X8>)
{
  *a1 = 6;
}

void static KeyboardType.emailAddress.getter(_QWORD *a1@<X8>)
{
  *a1 = 7;
}

void static KeyboardType.decimalPad.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static KeyboardType.webSearch.getter(_QWORD *a1@<X8>)
{
  *a1 = 10;
}

void static KeyboardType.asciiCapableNumberPad.getter(_QWORD *a1@<X8>)
{
  *a1 = 11;
}

uint64_t (*EnvironmentValues.keyboardType.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.keyboardType.modify;
}

uint64_t EnvironmentValues.keyboardType.modify(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[2];
  a1[1] = *a1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static TextInputDictation.disabled.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
}

uint64_t static TextInputDictation.enabled(forceSpelling:preferOnline:)@<X0>(uint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *a3 = 1;
  a3[1] = result;
  a3[2] = a2;
  return result;
}

BOOL static TextInputDictation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextInputDictation(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextInputDictation.Key(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 2) = 0;
  *(_WORD *)a1 = 2;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TextInputDictation.Key(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

uint64_t EnvironmentValues.textInputDictation.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.textInputDictation.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.textInputDictation(_:)(__int16 *a1)
{
  __int16 v1;
  char v2;
  uint64_t v3;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 2);
  swift_getKeyPath();
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 18) = v2;
  *(_WORD *)(v3 + 16) = v1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.textInputDictation : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int16 v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_BYTE *)(a2 + 2) = v5;
  *(_WORD *)a2 = v4;
  return result;
}

uint64_t sub_1871B0D50()
{
  return EnvironmentValues.textInputDictation.setter();
}

uint64_t sub_1871B0D8C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.textInputDictation(_:)(uint64_t result)
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16);
  if (*(_WORD *)(v1 + 16) != 2)
  {
    *(_WORD *)result = *(_WORD *)(v1 + 16);
    *(_BYTE *)(result + 2) = BYTE2(v2);
  }
  return result;
}

uint64_t View.autocapitalization(_:)(unint64_t a1)
{
  char v1;
  char v3;

  v1 = 4;
  if (a1 < 4)
    v1 = a1;
  v3 = v1;
  return View.textInputAutocapitalization(_:)(&v3);
}

SwiftUI::TextInputAutocapitalization_optional __swiftcall TextInputAutocapitalization.init(_:)(UITextAutocapitalizationType a1)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)a1 < 4)
    v2 = a1;
  *v1 = v2;
  return (SwiftUI::TextInputAutocapitalization_optional)a1;
}

uint64_t View.textInputAutocapitalization(_:)(char *a1)
{
  char v1;

  v1 = *a1;
  swift_getKeyPath();
  *(_BYTE *)(swift_allocObject() + 16) = v1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

void static TextInputAutocapitalization.never.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static TextInputAutocapitalization.words.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static TextInputAutocapitalization.sentences.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static TextInputAutocapitalization.characters.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t EnvironmentValues.textInputAutocapitalization.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.textInputAutocapitalization : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_1871B116C()
{
  return EnvironmentValues.textInputAutocapitalization.setter();
}

uint64_t EnvironmentValues.textInputAutocapitalization.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1871B1294()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.textInputAutocapitalization(_:)(_BYTE *result)
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int8 *)(v1 + 16);
  if (v2 != 4)
    *result = v2;
  return result;
}

void View.textFieldScrollingDisabled(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.submitsOnReturn(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.submitsOnReturn.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t sub_1871B147C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.submitsOnReturn.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1871B14B8()
{
  return EnvironmentValues.submitsOnReturn.setter();
}

ValueMetadata *type metadata accessor for KeyboardType()
{
  return &type metadata for KeyboardType;
}

ValueMetadata *type metadata accessor for TextInputDictation()
{
  return &type metadata for TextInputDictation;
}

ValueMetadata *type metadata accessor for TextInputAutocapitalization()
{
  return &type metadata for TextInputAutocapitalization;
}

uint64_t sub_1871B1510(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardType>, (uint64_t)&type metadata for KeyboardType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8], (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardType>, (uint64_t)&type metadata for KeyboardType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardType> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1871B1594(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyTransformModifier<TextInputDictation?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<TextInputDictation?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TextInputDictation?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for TextInputDictation?, (uint64_t)&type metadata for TextInputDictation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TextInputDictation?>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<TextInputDictation?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputDictation?> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1871B16A4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TextInputAutocapitalization>, (uint64_t)&type metadata for TextInputAutocapitalization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0], (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t), uint64_t (*a5)(void))
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v6 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, a4);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v6;
  v9[1] = a5();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TextInputAutocapitalization>, (uint64_t)&type metadata for TextInputAutocapitalization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TextInputAutocapitalization> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1871B1790(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8], (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t storeEnumTagSinglePayload for TextInputAutocapitalization(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1871B1800 + 4 * byte_187C124A5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1871B1834 + 4 * byte_187C124A0[v4]))();
}

uint64_t sub_1871B1834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871B183C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1871B1844);
  return result;
}

uint64_t sub_1871B1850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1871B1858);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1871B185C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871B1864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextInputAutocapitalization.Behavior()
{
  return &type metadata for TextInputAutocapitalization.Behavior;
}

ValueMetadata *type metadata accessor for KeyboardTypeKey()
{
  return &type metadata for KeyboardTypeKey;
}

unint64_t lazy protocol witness table accessor for type TextInputAutocapitalization.Behavior and conformance TextInputAutocapitalization.Behavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextInputAutocapitalization.Behavior and conformance TextInputAutocapitalization.Behavior;
  if (!lazy protocol witness table cache variable for type TextInputAutocapitalization.Behavior and conformance TextInputAutocapitalization.Behavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextInputAutocapitalization.Behavior, &type metadata for TextInputAutocapitalization.Behavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextInputAutocapitalization.Behavior and conformance TextInputAutocapitalization.Behavior);
  }
  return result;
}

uint64_t EnvironmentValues.submitsOnReturn.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

ValueMetadata *type metadata accessor for SubmitsOnReturnKey()
{
  return &type metadata for SubmitsOnReturnKey;
}

ValueMetadata *type metadata accessor for TextInputAutocapitalizationKey()
{
  return &type metadata for TextInputAutocapitalizationKey;
}

ValueMetadata *type metadata accessor for TextInputDictation.Key()
{
  return &type metadata for TextInputDictation.Key;
}

void NavigationSelectionModifier.body(content:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t ShouldUseNavigationLinkV4Modifier;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _BYTE v11[32];

  ShouldUseNavigationLinkV4Modifier = type metadata accessor for ShouldUseNavigationLinkV4Modifier(0, a4, a3, a4);
  v7 = a3;
  v8 = a2;
  v9 = a2;
  v10 = a3;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldUseNavigationLinkV4Modifier<A>, ShouldUseNavigationLinkV4Modifier);
  StaticIf<>.init(_:then:else:)((uint64_t)&v7, (uint64_t)&unk_1E1AB1BB0, (uint64_t)v11);
}

void sub_1871B1AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for NavigationSelectionModifier(255, v4, a3, a4);
  swift_retain_n();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSelectionModifier<A>, v5);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for StaticIf();
}

uint64_t sub_1871B1B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;

  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v3);
  MEMORY[0x18D75B4AC](&v17, &v13, v3, a1, v5);
  swift_release();
  swift_release();
  v13 = v17;
  v14 = v18;
  v15 = v19;
  v16 = v20;
  v6 = type metadata accessor for ModifiedContent();
  v11 = v2;
  v12 = v1;
  v10[0] = v5;
  v10[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &v11);
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v10);
  static ViewBuilder.buildExpression<A>(_:)(&v13, v6, v7);
  swift_release();
  swift_release();
  v17 = v21;
  v18 = v22;
  v19 = v23;
  v20 = v24;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v17, v6, v9);
  swift_release();
  return swift_release();
}

uint64_t NavigationSelectionModifier.init(isActive:presentedValue:)(char a1)
{
  return a1 & 1;
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationSelectionModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  NavigationSelectionModifier.body(content:)(a1, *(_BYTE *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t static LegacyBaseModifier._makeView(modifier:inputs:body:)()
{
  uint64_t (*v0)(void);
  uint64_t v1;

  v0 = MEMORY[0x1E0CE1470];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LegacyBaseModifier>, (uint64_t)&unk_1E1AC9EA0, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v1 = MEMORY[0x1E0DEAFA0];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v1, (uint64_t (*)(_QWORD, uint64_t))v0);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier();
  return static ViewModifier.makeView(modifier:inputs:body:)();
}

_BYTE *protocol witness for Rule.value.getter in conformance LegacyBaseModifier.Child@<X0>(_BYTE *a1@<X8>)
{
  _BYTE *result;

  result = (_BYTE *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance LegacyBaseModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static BaseModifier._makeView(modifier:inputs:body:)()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<BaseModifier>, (uint64_t)&unk_1E1AB1BB0, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationLinkPresentedValue?>, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, v0);
  _GraphValue.value.getter();
  v1 = MEMORY[0x1E0DEAFA0];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v1, v0);
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationSelectionTag and conformance NavigationSelectionTag();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, v1, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for External<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, v1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<Bool?> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  v2 = AGCreateWeakAttribute();
  LODWORD(v1) = v2;
  v3 = HIDWORD(v2);
  type metadata accessor for BaseModifier.SelectionStateBox();
  v4 = swift_allocObject();
  swift_weakInit();
  *(_BYTE *)(v4 + 32) = 2;
  *(_DWORD *)(v4 + 16) = v1;
  *(_DWORD *)(v4 + 20) = v3;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C118]();
  swift_weakAssign();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type BaseModifier.Child and conformance BaseModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier();
  static ViewModifier.makeView(modifier:inputs:body:)();
  return swift_release();
}

uint64_t closure #2 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return a1 + 7;
}

unsigned __int8 *BaseModifier.Child.value.getter@<X0>(_BYTE *a1@<X8>)
{
  int v2;
  unsigned __int8 *result;
  uint64_t v4;
  Swift::UInt v6;
  Swift::UInt v7;
  uint64_t Strong;
  uint64_t v9;
  char v10;
  _BYTE v11[9];
  _BYTE v12[144];
  _BYTE v13[8];
  uint64_t v14;

  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
  {
    LOBYTE(v2) = 2;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    result = (unsigned __int8 *)AGGraphGetValue();
    v2 = *result;
    if (v2 != 2 && (v2 & 1) != 0)
      goto LABEL_19;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = (unsigned __int8 *)AGGraphGetWeakValue();
  if (result)
  {
    v4 = result[16];
    if (*((_QWORD *)result + 5) != 1 && v4 != 6)
    {
      v6 = *((_QWORD *)result + 1);
      v7 = *((_QWORD *)result + 3);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      result = (unsigned __int8 *)AGGraphGetWeakValue();
      if (result)
      {
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)result, (uint64_t)v13, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
        if (v14 == 1)
        {
          result = (unsigned __int8 *)outlined destroy of AccessibilityTableContext?((uint64_t)v13, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
        }
        else
        {
          Strong = swift_weakLoadStrong();
          result = (unsigned __int8 *)outlined destroy of NavigationAuthority((uint64_t)v13);
          if (Strong)
          {
            swift_beginAccess();
            outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
            outlined retain of NavigationState?((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
            swift_release();
            outlined init with take of Image.Resolved?((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
            result = (unsigned __int8 *)getEnumTag for AccessibilityActionCategory.Category((uint64_t)v12);
            if ((_DWORD)result != 1)
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              if (*(_QWORD *)AGGraphGetValue())
              {
                v9 = swift_retain();
                v10 = NavigationState.isSelected(_:in:)(v9, v6, v4, v7);
                swift_release();
                result = (unsigned __int8 *)outlined retain of NavigationState?((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
                if ((v10 & 1) != 0)
                  LOBYTE(v2) = 1;
              }
              else
              {
                result = (unsigned __int8 *)outlined retain of NavigationState?((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  *a1 = v2;
  return result;
}

unsigned __int8 *protocol witness for Rule.value.getter in conformance BaseModifier.Child@<X0>(_BYTE *a1@<X8>)
{
  return BaseModifier.Child.value.getter(a1);
}

uint64_t BaseModifier.SelectionObserver.updateValue()()
{
  uint64_t v0;
  int Attribute;
  int v2;
  char v3;
  char v4;
  uint64_t *Value;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t WeakValue;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[40];
  _BYTE v33[152];
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  _BYTE v43[8];
  uint64_t v44;
  _BYTE v45[40];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int16 v55;

  Attribute = AGWeakAttributeGetAttribute();
  v2 = *MEMORY[0x1E0CFED28];
  if (Attribute == *MEMORY[0x1E0CFED28])
  {
    v3 = 0;
  }
  else
  {
    AGGraphGetValue();
    v3 = v4 & 1;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (uint64_t *)AGGraphGetValue();
  v7 = v6;
  v8 = *Value;
  if (*(_DWORD *)(v0 + 36) == v2)
  {
    *(_QWORD *)&v48 = 0;
    v46 = 0u;
    v47 = 0u;
    swift_retain();
    v9 = 0;
  }
  else
  {
    v10 = MEMORY[0x1E0DEC198];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v11 = AGGraphGetValue();
    v13 = v12;
    outlined init with copy of SwiftUIAnySortComparator?(v11, (uint64_t)v34, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v10);
    BYTE8(v35) = v13 & 1;
    outlined init with take of Image.Resolved?((uint64_t)v34, (uint64_t)&v46, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v10);
    v9 = BYTE8(v35);
    swift_retain();
  }
  BYTE8(v48) = v9;
  outlined init with take of Image.Resolved?((uint64_t)&v46, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (!WeakValue)
    goto LABEL_12;
  outlined init with copy of SwiftUIAnySortComparator?(WeakValue, (uint64_t)v43, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  if (v44 == 1)
  {
    swift_release();
    outlined destroy of AccessibilityTableContext?((uint64_t)v43, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
    return outlined destroy of AccessibilityTableContext?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  }
  Strong = swift_weakLoadStrong();
  outlined destroy of NavigationAuthority((uint64_t)v43);
  if (!Strong
    || (swift_beginAccess(),
        outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?), swift_release(), outlined init with take of Image.Resolved?((uint64_t)v33, (uint64_t)v34, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v34) == 1))
  {
LABEL_12:
    swift_release();
    return outlined destroy of AccessibilityTableContext?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  }
  v52 = v39;
  v53 = v40;
  v54 = v41;
  v55 = v42;
  v48 = v35;
  v49 = v36;
  v50 = v37;
  v51 = v38;
  v46 = v34[0];
  v47 = v34[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v17 = AGGraphGetWeakValue();
  if (v17
    && (v18 = *(_QWORD *)(v17 + 40), v18 != 1)
    && ((v19 = *(_QWORD *)v17,
         v20 = *(_QWORD *)(v17 + 8),
         v21 = v3 | v7,
         v22 = *(_QWORD *)(v17 + 16),
         v23 = *(_QWORD *)(v17 + 24),
         (v21 & 1) != 0)
     || v9))
  {
    v24 = *(_BYTE *)(v17 + 32) & 1;
    v25 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v45, (uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    v26 = swift_allocObject();
    v27 = v53;
    *(_OWORD *)(v26 + 120) = v52;
    *(_OWORD *)(v26 + 136) = v27;
    *(_OWORD *)(v26 + 152) = v54;
    v28 = v49;
    *(_OWORD *)(v26 + 56) = v48;
    *(_OWORD *)(v26 + 72) = v28;
    v29 = v51;
    *(_OWORD *)(v26 + 88) = v50;
    *(_OWORD *)(v26 + 104) = v29;
    v30 = v47;
    *(_OWORD *)(v26 + 24) = v46;
    *(_QWORD *)(v26 + 16) = v25;
    *(_WORD *)(v26 + 168) = v55;
    *(_OWORD *)(v26 + 40) = v30;
    *(_QWORD *)(v26 + 176) = v19;
    *(_QWORD *)(v26 + 184) = v20;
    *(_QWORD *)(v26 + 192) = v22;
    *(_QWORD *)(v26 + 200) = v23;
    *(_BYTE *)(v26 + 208) = v24;
    *(_QWORD *)(v26 + 216) = v18;
    *(_QWORD *)(v26 + 224) = v8;
    v31 = MEMORY[0x1E0DEC198];
    outlined init with take of Image.Resolved?((uint64_t)v32, v26 + 232, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    swift_retain();
    outlined retain of NavigationState?((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of AccessibilityTableContext?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v31);
    return outlined retain of NavigationState?((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    outlined retain of NavigationState?((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    return swift_release();
  }
}

uint64_t closure #1 in BaseModifier.SelectionStateBox.update(state:listKey:presentedValue:tag:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14[9];
  __int16 v15;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = *(_OWORD *)(a2 + 112);
    v14[6] = *(_OWORD *)(a2 + 96);
    v14[7] = v10;
    v14[8] = *(_OWORD *)(a2 + 128);
    v15 = *(_WORD *)(a2 + 144);
    v11 = *(_OWORD *)(a2 + 48);
    v14[2] = *(_OWORD *)(a2 + 32);
    v14[3] = v11;
    v12 = *(_OWORD *)(a2 + 80);
    v14[4] = *(_OWORD *)(a2 + 64);
    v14[5] = v12;
    v13 = *(_OWORD *)(a2 + 16);
    v14[0] = *(_OWORD *)a2;
    v14[1] = v13;
    BaseModifier.SelectionStateBox.updateSelectionState(state:listKey:presentedValue:tag:)(v14, a3, a4, a5);
    return swift_release();
  }
  return result;
}

uint64_t BaseModifier.SelectionStateBox.updateSelectionState(state:listKey:presentedValue:tag:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t result;
  _OWORD v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  _OWORD v37[2];
  uint64_t v38;

  v5 = v4;
  if (a3)
  {
    v10 = a1[7];
    v33 = a1[6];
    v34 = v10;
    v35 = a1[8];
    v36 = *((_WORD *)a1 + 72);
    v11 = a1[3];
    v29 = a1[2];
    v30 = v11;
    v12 = a1[5];
    v31 = a1[4];
    v32 = v12;
    v13 = a1[1];
    v27 = *a1;
    v28 = v13;
    v14 = swift_retain();
    v15 = NavigationState.isSelected(_:in:)(v14, a2);
    swift_release();
    if ((v15 & 1) != 0)
    {
      v16 = 1;
      v17 = 1;
      goto LABEL_10;
    }
    v17 = 0;
  }
  else
  {
    v17 = 2;
  }
  outlined init with copy of SwiftUIAnySortComparator?(a4, (uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  if (*((_QWORD *)&v28 + 1))
  {
    v37[0] = v27;
    v37[1] = v28;
    v38 = v29;
    v18 = a1[7];
    v33 = a1[6];
    v34 = v18;
    v35 = a1[8];
    v36 = *((_WORD *)a1 + 72);
    v19 = a1[3];
    v29 = a1[2];
    v30 = v19;
    v20 = a1[5];
    v31 = a1[4];
    v32 = v20;
    v21 = a1[1];
    v27 = *a1;
    v28 = v21;
    outlined init with copy of AnyHashable((uint64_t)v37, (uint64_t)v25);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AnyNavigationLinkPresentedValueStorage<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnyNavigationLinkPresentedValueStorage);
    v22 = swift_allocObject();
    v23 = v25[1];
    *(_OWORD *)(v22 + 16) = v25[0];
    *(_OWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 48) = v26;
    v16 = NavigationState.isSelected(_:in:)(v22, a2);
    swift_release();
    outlined destroy of AnyHashable((uint64_t)v37);
    v17 = v16 & 1;
  }
  else
  {
    result = outlined destroy of AccessibilityTableContext?((uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    if (!a3)
    {
      v17 = 2;
      goto LABEL_12;
    }
    v16 = 0;
  }
LABEL_10:
  result = swift_weakLoadStrong();
  if (result)
  {
    static Transaction.current.getter();
    *(_QWORD *)&v27 = *(_QWORD *)(v5 + 16);
    BYTE8(v27) = v16 & 1;
    LOBYTE(v25[0]) = 0;
    lazy protocol witness table accessor for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    swift_release();
    result = swift_release();
  }
LABEL_12:
  *(_BYTE *)(v5 + 32) = v17;
  return result;
}

uint64_t protocol witness for GraphMutation.apply() in conformance BaseModifier.SelectionStateBox.Mutation()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return AGGraphSetValue();
  }
  return result;
}

uint64_t BaseModifier.SelectionStateBox.__deallocating_deinit()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BaseModifier.SelectionStateBox()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NavigationSelectionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationSelectionModifier);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationSelectionModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void *type metadata accessor for LegacyBaseModifier()
{
  return &unk_1E1AC9EA0;
}

uint64_t assignWithTake for BaseModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

void *type metadata accessor for BaseModifier()
{
  return &unk_1E1AB1BB0;
}

void sub_1871B3128(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ShouldUseNavigationLinkV4Modifier;

  v4 = *a1;
  v5 = type metadata accessor for NavigationSelectionModifier(255, *a1, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSelectionModifier<A>, v5);
  type metadata accessor for _ViewModifier_Content();
  ShouldUseNavigationLinkV4Modifier = type metadata accessor for ShouldUseNavigationLinkV4Modifier(255, v4, v6, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldUseNavigationLinkV4Modifier<A>, ShouldUseNavigationLinkV4Modifier);
  type metadata accessor for StaticIf();
}

uint64_t sub_1871B31B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[12];

  v3 = type metadata accessor for ModifiedContent();
  v6[0] = &protocol witness table for BaseModifier;
  v6[1] = &protocol witness table for LegacyBaseModifier;
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v6);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

_UNKNOWN **base witness table accessor for ViewModifier in BaseModifier()
{
  return &protocol witness table for BaseModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in LegacyBaseModifier()
{
  return &protocol witness table for LegacyBaseModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance BaseModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.SeedInputs, &type metadata for NavigationAuthority.SeedInputs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.SeedInputs, &type metadata for NavigationAuthority.SeedInputs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.ViewInputKey, &type metadata for NavigationAuthority.ViewInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.ViewInputKey, &type metadata for NavigationAuthority.ViewInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.ListKeyViewInputKey, &type metadata for NavigationAuthority.ListKeyViewInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.ListKeyViewInputKey, &type metadata for NavigationAuthority.ListKeyViewInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSelectionTag and conformance NavigationSelectionTag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag;
  if (!lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSelectionTag, &unk_1E1ADCA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag;
  if (!lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSelectionTag, &unk_1E1ADCA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance PlatformItemNavigationSelectionStyleModifier@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in PlatformItemNavigationSelectionStyleModifier.body(content:);
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for closure #1 in View.transformPlatformItemSelectionBehavior(_:);
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

unint64_t lazy protocol witness table accessor for type External<Bool?> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<Bool?> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<Bool?> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for External<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<Bool?> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver;
  if (!lazy protocol witness table cache variable for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier.SelectionObserver, &unk_1E1AB1A10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BaseModifier.Child and conformance BaseModifier.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BaseModifier.Child and conformance BaseModifier.Child;
  if (!lazy protocol witness table cache variable for type BaseModifier.Child and conformance BaseModifier.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier.Child, &unk_1E1AB1B20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BaseModifier.Child and conformance BaseModifier.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier;
  if (!lazy protocol witness table cache variable for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemNavigationSelectionStyleModifier, &type metadata for PlatformItemNavigationSelectionStyleModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier);
  }
  return result;
}

uint64_t sub_1871B3580()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1871B35A4()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (v0[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v1 = v0[15];
  if (v1)
  {
    if (v1 == 1)
      goto LABEL_10;
    swift_release();
    swift_release();
  }
  if (v0[17])
    swift_release();
  if (v0[20])
  {
    swift_release();
    swift_release();
  }
LABEL_10:
  swift_release();
  if (v0[32])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 29));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BaseModifier.SelectionStateBox.update(state:listKey:presentedValue:tag:)()
{
  uint64_t v0;

  return closure #1 in BaseModifier.SelectionStateBox.update(state:listKey:presentedValue:tag:)(*(_QWORD *)(v0 + 16), v0 + 24, v0 + 176, *(_QWORD *)(v0 + 224), v0 + 232);
}

unint64_t lazy protocol witness table accessor for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation;
  if (!lazy protocol witness table cache variable for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseModifier.SelectionStateBox.Mutation, &unk_1E1AB1AA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child;
  if (!lazy protocol witness table cache variable for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyBaseModifier.Child, &unk_1E1AC9E78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacyBaseModifier.Child and conformance LegacyBaseModifier.Child);
  }
  return result;
}

void *type metadata accessor for LegacyBaseModifier.Child()
{
  return &unk_1E1AC9E78;
}

void *type metadata accessor for BaseModifier.SelectionStateBox.Mutation()
{
  return &unk_1E1AB1AA0;
}

__n128 __swift_memcpy40_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for BaseModifier.Child(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

{
  if (a2 && *(_BYTE *)(a1 + 52))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BaseModifier.Child(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 52) = v3;
  return result;
}

void *type metadata accessor for BaseModifier.Child()
{
  return &unk_1E1AB1B20;
}

uint64_t storeEnumTagSinglePayload for PlatformItemNavigationSelectionStyleModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1871B37E8 + 4 * byte_187C126E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1871B381C + 4 * byte_187C126E0[v4]))();
}

uint64_t sub_1871B381C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871B3824(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1871B382CLL);
  return result;
}

uint64_t sub_1871B3838(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1871B3840);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1871B3844(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871B384C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemNavigationSelectionStyleModifier()
{
  return &type metadata for PlatformItemNavigationSelectionStyleModifier;
}

uint64_t initializeWithCopy for BaseModifier.SelectionObserver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BaseModifier.SelectionObserver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for BaseModifier.SelectionObserver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void *type metadata accessor for BaseModifier.SelectionObserver()
{
  return &unk_1E1AB1A10;
}

void *type metadata accessor for NavigationSelectionTag()
{
  return &unk_1E1ADCA20;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PlatformItemNavigationSelectionStyleModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1871B39FC()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in PlatformItemNavigationSelectionStyleModifier.body(content:)(_BYTE *result)
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int8 *)(v1 + 16);
  *result = 0;
  if (v2 != 2)
    result[4] = 2 * (v2 & 1);
  return result;
}

uint64_t sub_1871B3A28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.transformPlatformItemSelectionBehavior(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.transformPlatformItemSelectionBehavior(_:)(a1, *(void (**)(__int16 *))(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  }
}

void type metadata accessor for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>)
  {
    lazy protocol witness table accessor for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemNavigationSelectionStyleModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarItemLabelStyle()
{
  return &type metadata for ToolbarItemLabelStyle;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in ToolbarItemLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1871B3C08()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>>, lazy protocol witness table accessor for type ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityRepresentationModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>();
    type metadata accessor for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>(255, &lazy cache variable for type metadata for AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>, (uint64_t)&protocol witness table for LabelStyleConfiguration.Title, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for AccessibilityRepresentationModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, AccessibilityRepresentationModifier<LabelStyleConfiguration.Title>>);
  }
}

void type metadata accessor for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>)
  {
    type metadata accessor for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>(255, &lazy cache variable for type metadata for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for LabeledContent);
    type metadata accessor for _LabeledContentStyleModifier<ToolbarLabeledContentStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>);
  }
}

void type metadata accessor for _LabeledContentStyleModifier<ToolbarLabeledContentStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _LabeledContentStyleModifier<ToolbarLabeledContentStyle>)
  {
    v2 = lazy protocol witness table accessor for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle();
    v4 = type metadata accessor for _LabeledContentStyleModifier(a1, (uint64_t)&type metadata for ToolbarLabeledContentStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _LabeledContentStyleModifier<ToolbarLabeledContentStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarLabeledContentStyle, &type metadata for ToolbarLabeledContentStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarLabeledContentStyle and conformance ToolbarLabeledContentStyle);
  }
  return result;
}

void type metadata accessor for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, ValueMetadata *))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, &type metadata for LabelStyleConfiguration.Title);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, _LabeledContentStyleModifier<ToolbarLabeledContentStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>, (uint64_t)&protocol witness table for _LabeledContentStyleModifier<A>);
}

unint64_t lazy protocol witness table accessor for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>(255, &lazy cache variable for type metadata for LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for LabeledContent);
    v2[0] = &protocol witness table for LabelStyleConfiguration.Title;
    v2[1] = &protocol witness table for LabelStyleConfiguration.Icon;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

uint64_t DragGesture.init(minimumDistance:coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (one-time initialization token for all != -1)
    swift_once();
  *(_BYTE *)(a2 + 49) = static _EventDirections.all;
  *(double *)a2 = a3;
  return outlined init with take of CoordinateSpace(a1, a2 + 8);
}

uint64_t DragGesture.Value.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DragGesture.Value.time.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DragGesture.Value.time.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double DragGesture.Value.location.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for DragGesture.Value(0) + 20));
}

uint64_t DragGesture.Value.location.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v6;

  result = type metadata accessor for DragGesture.Value(0);
  v6 = (double *)(v2 + *(int *)(result + 20));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*DragGesture.Value.location.modify())(_QWORD)
{
  type metadata accessor for DragGesture.Value(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double DragGesture.Value.startLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for DragGesture.Value(0) + 24));
}

uint64_t DragGesture.Value.startLocation.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v6;

  result = type metadata accessor for DragGesture.Value(0);
  v6 = (double *)(v2 + *(int *)(result + 24));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*DragGesture.Value.startLocation.modify())(_QWORD)
{
  type metadata accessor for DragGesture.Value(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double DragGesture.Value.translation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for DragGesture.Value(0);
  return *(double *)(v0 + *(int *)(v1 + 20)) - *(double *)(v0 + *(int *)(v1 + 24));
}

double DragGesture.Value.predictedEndLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for DragGesture.Value(0);
  __asm { FMOV            V2.2D, #0.25 }
  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(*(float64x2_t *)(v0 + *(int *)(v1 + 20)), vmulq_f64(*(float64x2_t *)(v0 + *(int *)(v1 + 28)), _Q2));
  return result;
}

double DragGesture.Value.predictedEndTranslation.getter()
{
  uint64_t v0;
  int *v1;
  double result;

  v1 = (int *)type metadata accessor for DragGesture.Value(0);
  __asm { FMOV            V2.2D, #0.25 }
  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(vsubq_f64(*(float64x2_t *)(v0 + v1[5]), *(float64x2_t *)(v0 + v1[6])), vmulq_f64(*(float64x2_t *)(v0 + v1[7]), _Q2));
  return result;
}

double DragGesture.minimumDistance.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DragGesture.minimumDistance.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DragGesture.minimumDistance.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t DragGesture.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CoordinateSpace(v1 + 8, a1);
}

uint64_t DragGesture.coordinateSpace.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of CoordinateSpace(a1, v1 + 8);
}

uint64_t (*DragGesture.coordinateSpace.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static DragGesture._makeGesture(gesture:inputs:)()
{
  lazy protocol witness table accessor for type DragGesture and conformance DragGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

uint64_t DragGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v6;
  _BYTE v7[48];

  v3 = *v1;
  outlined init with copy of CoordinateSpace((uint64_t)(v1 + 1), (uint64_t)v7);
  v4 = *((_BYTE *)v1 + 49);
  v6 = v3;
  v7[41] = v4;
  outlined init with copy of SpatialDragGesture((uint64_t)&v6, a1);
  *(_QWORD *)(a1 + 56) = 4;
  *(_BYTE *)(a1 + 64) = 0;
  return outlined destroy of SpatialDragGesture((uint64_t)&v6);
}

uint64_t protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance DragGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v6;
  _BYTE v7[48];

  v3 = *v1;
  outlined init with copy of CoordinateSpace((uint64_t)(v1 + 1), (uint64_t)v7);
  v4 = *((_BYTE *)v1 + 49);
  v6 = v3;
  v7[41] = v4;
  outlined init with copy of SpatialDragGesture((uint64_t)&v6, a1);
  *(_QWORD *)(a1 + 56) = 4;
  *(_BYTE *)(a1 + 64) = 0;
  return outlined destroy of SpatialDragGesture((uint64_t)&v6);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance DragGesture()
{
  lazy protocol witness table accessor for type DragGesture and conformance DragGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance DragGesture()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:allowedDirections:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  char v11;
  uint64_t result;
  _QWORD v13[6];

  v11 = *a2;
  if (one-time initialization token for all != -1)
    swift_once();
  *(_BYTE *)(a5 + 49) = static _EventDirections.all;
  *(double *)a5 = a6;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 8))(v13, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  result = outlined init with take of CoordinateSpace((uint64_t)v13, a5 + 8);
  *(_BYTE *)(a5 + 49) = v11;
  return result;
}

uint64_t SpatialDragGesture.body.getter()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  __int128 v3;
  char v5;
  __int128 v6;
  char v7[8];
  __int128 v8;
  uint64_t v9;
  _OWORD v10[3];
  __int16 v11;
  uint64_t (*v12)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v13;

  LOBYTE(v10[0]) = 0;
  type metadata accessor for EventListener<TouchEvent>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EventListener<TouchEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<TouchEvent>, MEMORY[0x1E0CE1EC0]);
  Gesture.eventFilter<A>(forType:_:)();
  outlined init with copy of CoordinateSpace(v0 + 8, (uint64_t)v10);
  v1 = MEMORY[0x1E0CE53B0];
  outlined init with copy of CoordinateSpaceGesture<TouchEvent>((uint64_t)v10, (uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TouchEvent>, (uint64_t)MEMORY[0x1E0CE53B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CoordinateSpaceGesture<TouchEvent>);
  v7[0] = v5;
  v8 = v6;
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TouchEvent>, (uint64_t)v1, (uint64_t (*)(_QWORD))type metadata accessor for CoordinateSpaceGesture<TouchEvent>);
  outlined init with copy of SpatialDragGesture(v0, (uint64_t)v10);
  v2 = swift_allocObject();
  v3 = v10[1];
  *(_OWORD *)(v2 + 16) = v10[0];
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v10[2];
  *(_WORD *)(v2 + 64) = v11;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>);
  v12 = partial apply for closure #2 in SpatialDragGesture.body.getter;
  v13 = v2;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>);
  v7[0] = 2;
  type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>, MEMORY[0x1E0CE2E88]);
  Gesture.dependency(_:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>);
}

BOOL closure #1 in SpatialDragGesture.body.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 1;
}

uint64_t closure #2 in SpatialDragGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int16 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 96);
  v4 = *(_WORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  v6 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v6;
  v7 = *(_OWORD *)(a2 + 80);
  v9[4] = *(_OWORD *)(a2 + 64);
  v9[5] = v7;
  v10 = v3;
  v11 = v4;
  return SpatialDragGesture.phase(state:event:)(a1, (uint64_t)v9, a3);
}

uint64_t SpatialDragGesture.phase(state:event:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  int v33;
  double v34;
  double v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  double v68;
  uint64_t v69;
  uint64_t *v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  _QWORD v110[13];
  char v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v88 - v9;
  v11 = type metadata accessor for DragGesture.Value(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v99 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(unsigned __int8 *)(a2 + 105);
  if ((v16 - 1) < 2)
  {
    v92 = v3;
    v93 = a3;
    v18 = *(uint64_t *)a2;
    v17 = *(_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a2 + 16);
    v20 = *(uint64_t *)(a2 + 24);
    v21 = *(uint64_t *)(a2 + 32);
    v22 = *(_QWORD *)(a2 + 40);
    v24 = *(_QWORD *)(a2 + 48);
    v23 = *(_QWORD *)(a2 + 56);
    v26 = *(_QWORD *)(a2 + 64);
    v25 = *(_QWORD *)(a2 + 72);
    v28 = *(_QWORD *)(a2 + 80);
    v27 = *(_QWORD *)(a2 + 88);
    v29 = v24;
    v30 = *(_QWORD *)(a2 + 96);
    v31 = v22;
    v32 = *(double *)&v21;
    v33 = *(unsigned __int8 *)(a2 + 104);
    v34 = *(double *)&v20;
    v35 = *(double *)&v18;
    v36 = *(char **)(a1 + 16);
    v96 = v13;
    v106 = v19;
    v105 = v17;
    v95 = v14;
    v104 = v18;
    v103 = v26;
    v108 = v25;
    v102 = v28;
    v101 = v27;
    v100 = v30;
    v109 = v33;
    v107 = v20;
    v91 = v24;
    v98 = v21;
    v97 = v23;
    if (v36 == (char *)1)
    {
      v37 = v20;
      v90 = v22;
      v38 = v22;
      v89 = v24;
      v39 = v24;
      v36 = (char *)v19;
      v40 = v17;
      v41 = v18;
      v42 = v28;
      v94 = v10;
      v43 = v27;
      v44 = v30;
      outlined copy of GesturePhase<TouchEvent>(v18, v17, v19, v37, v21, v38, v39, v23, v26, v25, v28, v27, v30, v33, v16);
      v45 = v41;
      v46 = v40;
      v47 = v34;
      v48 = v32;
      v49 = v31;
      v50 = v23;
      v51 = v108;
      v52 = v42;
      v53 = v43;
      v10 = v94;
      v54 = v44;
      v55 = v109;
      v24 = v89;
      v22 = v90;
    }
    else
    {
      v55 = *(_BYTE *)(a1 + 104);
      v53 = *(_QWORD *)(a1 + 88);
      v54 = *(_QWORD *)(a1 + 96);
      v51 = *(_QWORD *)(a1 + 72);
      v52 = *(_QWORD *)(a1 + 80);
      v50 = *(_QWORD *)(a1 + 56);
      v26 = *(_QWORD *)(a1 + 64);
      v49 = *(_QWORD *)(a1 + 40);
      v29 = *(_QWORD *)(a1 + 48);
      v47 = *(double *)(a1 + 24);
      v48 = *(double *)(a1 + 32);
      v46 = *(_BYTE *)(a1 + 8);
      v45 = *(_QWORD *)a1;
    }
    v58 = v16;
    v59 = (uint64_t)v99;
    *(_QWORD *)a1 = v45;
    *(_QWORD *)(a1 + 8) = v46;
    *(_QWORD *)(a1 + 16) = v36;
    *(double *)(a1 + 24) = v47;
    *(double *)(a1 + 32) = v48;
    *(_QWORD *)(a1 + 40) = v49;
    *(_QWORD *)(a1 + 48) = v29;
    *(_QWORD *)(a1 + 56) = v50;
    *(_QWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 72) = v51;
    *(_QWORD *)(a1 + 80) = v52;
    *(_QWORD *)(a1 + 88) = v53;
    *(_QWORD *)(a1 + 96) = v54;
    *(_BYTE *)(a1 + 104) = v55;
    v60 = type metadata accessor for SpatialDragGesture.StateType(0);
    v61 = (__int128 *)(a1 + *(int *)(v60 + 24));
    LODWORD(v94) = v58;
    v87 = v58;
    v62 = v107;
    v63 = v98;
    outlined copy of GesturePhase<TouchEvent>(v104, v105, v106, v107, v98, v22, v24, v97, v103, v108, v102, v101, v100, v109, v87);
    v99 = v36;
    swift_retain();
    specialized VelocitySampler.addSample(_:time:)(v34, v32, v35);
    Date.init(timeIntervalSinceReferenceDate:)();
    v64 = v61[5];
    v117 = v61[4];
    v118 = v64;
    v119 = v61[6];
    v120 = *((_QWORD *)v61 + 14);
    v65 = v61[1];
    v113 = *v61;
    v66 = v61[2];
    v67 = v61[3];
    v114 = v65;
    v115 = v66;
    v116 = v67;
    v68 = specialized VelocitySampler.velocity.getter();
    v69 = v96;
    v70 = (uint64_t *)(v59 + *(int *)(v96 + 20));
    *v70 = v62;
    v70[1] = v63;
    v71 = (double *)(v59 + *(int *)(v69 + 24));
    *v71 = v47;
    v71[1] = v48;
    v72 = v59 + *(int *)(v69 + 28);
    *(double *)v72 = v68;
    *(_QWORD *)(v72 + 8) = v73;
    v74 = a1 + *(int *)(v60 + 20);
    outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v74, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CategoryGesture<DragGesture.Value>);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v10, 1, v69) == 1)
    {
      v75 = v109;
      v76 = v107;
      v77 = v98;
      v78 = (int)v94;
      v79 = v97;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for CategoryGesture<DragGesture.Value>);
      v80 = *(double *)v92;
      if (*(double *)v92 <= 0.0)
      {
        v81 = v77;
        outlined consume of GesturePhase<TouchEvent>(v104, v105, v106, v76, v77, v22, v24, v79, v103, v108, v102, v101, v100, v75, v78);
      }
      else
      {
        CGSize.magnitude.getter();
        v81 = v77;
        if (v80 > v82)
        {
          outlined consume of GesturePhase<TouchEvent>(v104, v105, v106, v76, v77, v22, v24, v79, v103, v108, v102, v101, v100, v75, v78);
LABEL_18:
          swift_release();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, type metadata accessor for DragGesture.Value);
          if (v78 != 2)
            outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v74, v93, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CategoryGesture<DragGesture.Value>);
          type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<DragGesture.Value>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
          return swift_storeEnumTagMultiPayload();
        }
        LOBYTE(v110[0]) = *(_BYTE *)(v92 + 49);
        v86 = CGSize.withinRange(axes:rangeCosine:)((unsigned __int8 *)v110, 0.5);
        outlined consume of GesturePhase<TouchEvent>(v104, v105, v106, v76, v81, v22, v24, v79, v103, v108, v102, v101, v100, v75, v78);
        if ((v86 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      LOBYTE(v78) = (_BYTE)v94;
      v83 = v98;
      v79 = v97;
      outlined consume of GesturePhase<TouchEvent>(v104, v105, v106, v107, v98, v22, v24, v97, v103, v108, v102, v101, v100, v109, (char)v94);
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for CategoryGesture<DragGesture.Value>);
      v81 = v83;
    }
    outlined destroy of UIBackgroundConfiguration?(v74, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for CategoryGesture<DragGesture.Value>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v59, v74, type metadata accessor for DragGesture.Value);
    v84 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v95 + 56))(v74, 0, 1, v96);
    v110[0] = v104;
    v110[1] = v105;
    v110[2] = v106;
    v110[3] = v107;
    v110[4] = v81;
    v110[5] = v22;
    v110[6] = v24;
    v110[7] = v79;
    v110[8] = v103;
    v110[9] = v108;
    v110[10] = v102;
    v110[11] = v101;
    v110[12] = v100;
    v111 = v109;
    v112 = v78;
    MEMORY[0x1E0C80A78](v84, v85);
    type metadata accessor for CoordinateSpaceGesture<TouchEvent>(0, &lazy cache variable for type metadata for GesturePhase<TouchEvent>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE17C0]);
    GesturePhase.withValue<A>(_:)();
    swift_release();
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, type metadata accessor for DragGesture.Value);
  }
  if (*(_BYTE *)(a2 + 105) || !*(_BYTE *)(v3 + 49))
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<DragGesture.Value>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  }
  else
  {
    v56 = type metadata accessor for SpatialDragGesture.StateType(0);
    outlined init with copy of CoordinateSpaceGesture<TouchEvent>(a1 + *(int *)(v56 + 20), a3, (uint64_t)&lazy cache variable for type metadata for DragGesture.Value?, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CategoryGesture<DragGesture.Value>);
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<DragGesture.Value>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance SpatialDragGesture.StateType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_BYTE *)(a2 + 104) = 0;
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for DragGesture.Value(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a2 + *(int *)(a1 + 24);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 24) = 1;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 56) = 1;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 88) = 1;
  *(_QWORD *)(v7 + 96) = 0;
  *(_BYTE *)(v7 + 104) = 1;
  *(_QWORD *)(v7 + 112) = 0x3FE8000000000000;
  return result;
}

BOOL specialized static DragGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  double v6;
  double v7;
  double *v8;
  uint64_t v10;
  double v11;
  double v12;
  double *v13;
  uint64_t v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  _BOOL4 v21;

  if ((static Date.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for DragGesture.Value(0);
  v5 = v4[5];
  v6 = *(double *)(a1 + v5);
  v7 = *(double *)(a1 + v5 + 8);
  v8 = (double *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1])
    return 0;
  v10 = v4[6];
  v11 = *(double *)(a1 + v10);
  v12 = *(double *)(a1 + v10 + 8);
  v13 = (double *)(a2 + v10);
  if (v11 != *v13 || v12 != v13[1])
    return 0;
  v16 = v4[7];
  v17 = *(double *)(a1 + v16);
  v18 = *(double *)(a1 + v16 + 8);
  v19 = (double *)(a2 + v16);
  v20 = v19[1];
  v21 = v17 == *v19;
  return v18 == v20 && v21;
}

unint64_t lazy protocol witness table accessor for type DragGesture and conformance DragGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragGesture and conformance DragGesture;
  if (!lazy protocol witness table cache variable for type DragGesture and conformance DragGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragGesture, &type metadata for DragGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragGesture and conformance DragGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragGesture and conformance DragGesture;
  if (!lazy protocol witness table cache variable for type DragGesture and conformance DragGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragGesture, &type metadata for DragGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragGesture and conformance DragGesture);
  }
  return result;
}

uint64_t outlined init with copy of SpatialDragGesture(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DragGesture(a2, a1, &unk_1E1ACB850);
  return a2;
}

uint64_t outlined destroy of SpatialDragGesture(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return a1;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in DragGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in DragGesture()
{
  return &protocol witness table for DragGesture;
}

uint64_t *initializeBufferWithCopyOfBuffer for DragGesture.Value(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for DragGesture.Value(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for DragGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for DragGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  return a1;
}

uint64_t initializeWithTake for DragGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for DragGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragGesture.Value()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871B5670(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DragGesture.Value()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871B56B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1871B56F8()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture>)
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(255, &lazy cache variable for type metadata for CategoryGesture<DragGesture.Value>, MEMORY[0x1E0CE2C58]);
    lazy protocol witness table accessor for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>();
    lazy protocol witness table accessor for type SpatialDragGesture and conformance SpatialDragGesture();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<DragGesture.Value>, SpatialDragGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>)
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(255, &lazy cache variable for type metadata for CategoryGesture<DragGesture.Value>, MEMORY[0x1E0CE2C58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2C68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<DragGesture.Value> and conformance CategoryGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialDragGesture and conformance SpatialDragGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialDragGesture and conformance SpatialDragGesture;
  if (!lazy protocol witness table cache variable for type SpatialDragGesture and conformance SpatialDragGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialDragGesture, &unk_1E1ACB850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialDragGesture and conformance SpatialDragGesture);
  }
  return result;
}

ValueMetadata *type metadata accessor for DragGesture.Value.Platform()
{
  return &type metadata for DragGesture.Value.Platform;
}

uint64_t assignWithTake for DragGesture(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragGesture(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 50))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DragGesture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 50) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for SpatialDragGesture()
{
  return &unk_1E1ACB850;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SpatialDragGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for EventListener<TouchEvent>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EventListener<TouchEvent>)
  {
    lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
    v0 = type metadata accessor for EventListener();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<TouchEvent>);
  }
}

uint64_t sub_1871B59D4()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SpatialDragGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #2 in SpatialDragGesture.body.getter(a1, a2, a3);
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>)
  {
    v0 = MEMORY[0x1E0CE53B0];
    type metadata accessor for CoordinateSpaceGesture<TouchEvent>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TouchEvent>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE53B0]);
    type metadata accessor for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TouchEvent> and conformance CoordinateSpaceGesture<A>(&lazy protocol witness table cache variable for type CoordinateSpaceGesture<TouchEvent> and conformance CoordinateSpaceGesture<A>, &lazy cache variable for type metadata for CoordinateSpaceGesture<TouchEvent>, (uint64_t (*)(_QWORD, ValueMetadata *))v0, MEMORY[0x1E0CE53C0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>, MEMORY[0x1E0CE2E88]);
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>);
  }
}

void type metadata accessor for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>)
  {
    v0 = MEMORY[0x1E0CE1170];
    type metadata accessor for CoordinateSpaceGesture<TouchEvent>(255, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TouchEvent>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE1170]);
    type metadata accessor for EventListener<TouchEvent>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TouchEvent> and conformance CoordinateSpaceGesture<A>(&lazy protocol witness table cache variable for type EventFilter<TouchEvent> and conformance EventFilter<A>, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TouchEvent>, (uint64_t (*)(_QWORD, ValueMetadata *))v0, MEMORY[0x1E0CE1180]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EventListener<TouchEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<TouchEvent>, MEMORY[0x1E0CE1EC0]);
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>);
  }
}

uint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<TouchEvent> and conformance CoordinateSpaceGesture<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CoordinateSpaceGesture<TouchEvent>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>)
  {
    type metadata accessor for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value> and conformance StateContainerGesture<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, MEMORY[0x1E0CE51E0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>);
  }
}

void type metadata accessor for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>)
  {
    type metadata accessor for SpatialDragGesture.StateType(255);
    type metadata accessor for DragGesture.Value(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SpatialDragGesture.StateType and conformance SpatialDragGesture.StateType, type metadata accessor for SpatialDragGesture.StateType, (uint64_t)&protocol conformance descriptor for SpatialDragGesture.StateType);
    v0 = type metadata accessor for StateContainerGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>);
  }
}

uint64_t type metadata accessor for SpatialDragGesture.StateType(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SpatialDragGesture.StateType);
}

void type metadata accessor for CategoryGesture<DragGesture.Value>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for DragGesture.Value(255);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined copy of GesturePhase<TouchEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15)
{
  if (a15 == 2 || a15 == 1)
    return swift_retain();
  if (!a15)
    return outlined copy of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t outlined init with copy of CoordinateSpaceGesture<TouchEvent>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined consume of GesturePhase<TouchEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15)
{
  if (a15 == 2 || a15 == 1)
    return swift_release();
  if (!a15)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t partial apply for implicit closure #2 in SpatialDragGesture.phase(state:event:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v1 + 16), a1, type metadata accessor for DragGesture.Value);
}

void type metadata accessor for CoordinateSpaceGesture<TouchEvent>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for TouchEvent);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SpatialDragGesture.StateType(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[2];
    if (v7 == 1)
    {
      v8 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 89) = *(_OWORD *)((char *)a2 + 89);
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      v10 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v10;
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      swift_retain();
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = (int *)type metadata accessor for DragGesture.Value(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v18 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v13, v14, v18);
      *(_OWORD *)&v13[v15[5]] = *(_OWORD *)&v14[v15[5]];
      *(_OWORD *)&v13[v15[6]] = *(_OWORD *)&v14[v15[6]];
      *(_OWORD *)&v13[v15[7]] = *(_OWORD *)&v14[v15[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = *(int *)(a3 + 24);
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = *(_OWORD *)(v21 + 80);
    *(_OWORD *)(v20 + 64) = *(_OWORD *)(v21 + 64);
    *(_OWORD *)(v20 + 80) = v22;
    *(_OWORD *)(v20 + 96) = *(_OWORD *)(v21 + 96);
    *(_QWORD *)(v20 + 112) = *(_QWORD *)(v21 + 112);
    v23 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *(_OWORD *)(v20 + 16) = v23;
    v24 = *(_OWORD *)(v21 + 48);
    *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 32);
    *(_OWORD *)(v20 + 48) = v24;
  }
  return a1;
}

uint64_t destroy for SpatialDragGesture.StateType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 16) != 1)
    swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DragGesture.Value(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  }
  return result;
}

uint64_t initializeWithCopy for SpatialDragGesture.StateType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    swift_retain();
  }
  v10 = *(int *)(a3 + 20);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = (int *)type metadata accessor for DragGesture.Value(0);
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v11, v12, v16);
    *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
    *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
    *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = *(int *)(a3 + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 80) = v20;
  *(_OWORD *)(v18 + 96) = *(_OWORD *)(v19 + 96);
  *(_QWORD *)(v18 + 112) = *(_QWORD *)(v19 + 112);
  v21 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v21;
  v22 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 48) = v22;
  return a1;
}

uint64_t assignWithCopy for SpatialDragGesture.StateType(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, int *);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;

  v6 = *((_QWORD *)a2 + 2);
  if (*(_QWORD *)(a1 + 16) == 1)
  {
    if (v6 == 1)
    {
      v7 = *a2;
      v8 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
      v9 = a2[3];
      v10 = a2[4];
      v11 = a2[5];
      *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v9;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of TouchEvent(a1);
    v13 = a2[1];
    v12 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v12;
    v15 = a2[4];
    v14 = a2[5];
    v16 = a2[3];
    *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 48) = v16;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  }
  v17 = *(int *)(a3 + 20);
  v18 = (char *)(a1 + v17);
  v19 = (char *)a2 + v17;
  v20 = (int *)type metadata accessor for DragGesture.Value(0);
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(uint64_t (**)(char *, uint64_t, int *))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      v35 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v18, v19, v35);
      v36 = v20[5];
      v37 = &v18[v36];
      v38 = &v19[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
      v39 = v20[6];
      v40 = &v18[v39];
      v41 = &v19[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
      v42 = v20[7];
      v43 = &v18[v42];
      v44 = &v19[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
      goto LABEL_14;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for DragGesture.Value);
    goto LABEL_13;
  }
  if (v24)
  {
LABEL_13:
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_14;
  }
  v25 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v18, v19, v25);
  *(_OWORD *)&v18[v20[5]] = *(_OWORD *)&v19[v20[5]];
  *(_OWORD *)&v18[v20[6]] = *(_OWORD *)&v19[v20[6]];
  *(_OWORD *)&v18[v20[7]] = *(_OWORD *)&v19[v20[7]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
LABEL_14:
  v27 = *(int *)(a3 + 24);
  v28 = a1 + v27;
  v29 = (__int128 *)((char *)a2 + v27);
  v30 = *v29;
  *(_OWORD *)(v28 + 9) = *(__int128 *)((char *)v29 + 9);
  *(_OWORD *)v28 = v30;
  v31 = v29[2];
  *(_OWORD *)(v28 + 41) = *(__int128 *)((char *)v29 + 41);
  *(_OWORD *)(v28 + 32) = v31;
  v32 = v29[4];
  *(_OWORD *)(v28 + 73) = *(__int128 *)((char *)v29 + 73);
  *(_OWORD *)(v28 + 64) = v32;
  v33 = *((_QWORD *)v29 + 12);
  *(_BYTE *)(v28 + 104) = *((_BYTE *)v29 + 104);
  *(_QWORD *)(v28 + 96) = v33;
  *(_QWORD *)(v28 + 112) = *((_QWORD *)v29 + 14);
  return a1;
}

uint64_t outlined destroy of TouchEvent(uint64_t a1)
{
  destroy for TouchEvent();
  return a1;
}

_OWORD *initializeWithTake for SpatialDragGesture.StateType(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)((char *)a2 + 89);
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a2[3];
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[2] = a2[2];
  a1[3] = v8;
  v12 = (int *)type metadata accessor for DragGesture.Value(0);
  v13 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v10, v11, v15);
    *(_OWORD *)&v10[v12[5]] = *(_OWORD *)&v11[v12[5]];
    *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
    *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_OWORD *)v18 + 5);
  *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
  *((_OWORD *)v17 + 5) = v19;
  *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
  *((_QWORD *)v17 + 14) = *((_QWORD *)v18 + 14);
  v20 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v20;
  v21 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v21;
  return a1;
}

uint64_t assignWithTake for SpatialDragGesture.StateType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 16) == 1)
    goto LABEL_4;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 == 1)
  {
    outlined destroy of TouchEvent(a1);
LABEL_4:
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
LABEL_6:
  v10 = *(int *)(a3 + 20);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = (int *)type metadata accessor for DragGesture.Value(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v24 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v11, v12, v24);
      *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
      *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
      *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
      goto LABEL_12;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for DragGesture.Value);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_11:
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  v18 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v11, v12, v18);
  *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
  *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
  *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_12:
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 9) = *(_OWORD *)(v22 + 9);
  *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
  *(_OWORD *)(v21 + 41) = *(_OWORD *)(v22 + 41);
  *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
  *(_OWORD *)(v21 + 73) = *(_OWORD *)(v22 + 73);
  *(_BYTE *)(v21 + 104) = *(_BYTE *)(v22 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v21 + 112) = *(_QWORD *)(v22 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialDragGesture.StateType()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871B6A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 2147483645)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return ((_DWORD)v4 - 1) & ~(((int)v4 - 1) >> 31);
  }
  else
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SpatialDragGesture.StateType()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871B6B20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483645)
  {
    *(_QWORD *)(result + 16) = (a2 + 1);
  }
  else
  {
    type metadata accessor for CategoryGesture<DragGesture.Value>(0, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for SpatialDragGesture.StateType()
{
  unint64_t v0;

  type metadata accessor for CategoryGesture<DragGesture.Value>(319, &lazy cache variable for type metadata for DragGesture.Value?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1871B6C34()
{
  type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<SpatialDragGesture.StateType, TouchEvent, DragGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TouchEvent>, ModifierGesture<EventFilter<TouchEvent>, EventListener<TouchEvent>>>>, MEMORY[0x1E0CE2E88]);
  return swift_getOpaqueTypeConformance2();
}

Swift::Void __swiftcall ListTableViewHeaderFooter.prepareForReuse()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  objc_class *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  __int128 v11;
  __int16 v12;
  objc_super v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (objc_class *)type metadata accessor for ListTableViewHeaderFooter();
  v13.receiver = v0;
  v13.super_class = v5;
  objc_msgSendSuper2(&v13, sel_prepareForReuse);
  static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v4, (uint64_t *)v14);
  v11 = v14[1];
  v6 = v15;
  v7 = v16;
  v8 = &v0[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration];
  swift_beginAccess();
  *(_WORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_WORD *)v8 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v14[0];
  *(_OWORD *)(v8 + 40) = v11;
  *((_QWORD *)v8 + 7) = v6;
  *((_QWORD *)v8 + 8) = v7;
  swift_release();
  swift_release();
  v9 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host];
  if (v9)
  {
    v12 = 2;
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0);
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>();
    v10 = v9;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
}

void ListTableViewHeaderFooter.updateConfiguration(using:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Class isa;
  objc_class *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  objc_super v19;

  v1 = v0;
  type metadata accessor for UIBackgroundConfiguration?();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v18 - v8;
  isa = UIViewConfigurationState._bridgeToObjectiveC()().super.isa;
  v11 = (objc_class *)type metadata accessor for ListTableViewHeaderFooter();
  v19.receiver = v1;
  v19.super_class = v11;
  objc_msgSendSuper2(&v19, sel__bridgedUpdateConfigurationUsingState_, isa);

  v12 = objc_msgSend(v1, sel_backgroundView);
  if (!v12)
  {
    MEMORY[0x18D75D6B4]();
    v13 = type metadata accessor for UIBackgroundConfiguration();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13))
    {
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v9);
    }
    else
    {
      v16 = (void *)UIBackgroundConfiguration.customView.getter();
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v9);
      if (v16)
      {
        type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
        v17 = swift_dynamicCastClass();

        if (v17)
          return;
      }
    }
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      v15 = &v1[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration];
      swift_beginAccess();
      if ((*v15 & 1) != 0)
        static UIBackgroundConfiguration.listFooter()();
      else
        static UIBackgroundConfiguration.listHeader()();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
      MEMORY[0x18D75D6C0](v5);
    }
  }
}

id ListTableViewHeaderFooter.init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  void *v13;
  objc_class *v14;
  id v15;
  objc_super v17;
  _OWORD v18[3];

  v5 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v2[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = &v2[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration];
  v11 = v2;
  static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v8, (uint64_t *)v18);
  v12 = v18[1];
  *(_OWORD *)(v10 + 24) = v18[0];
  *(_WORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_WORD *)v10 + 8) = 0;
  *(_OWORD *)(v10 + 40) = v12;
  *(_OWORD *)(v10 + 56) = v18[2];
  *(_QWORD *)&v11[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host] = 0;
  *(_DWORD *)&v11[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_outlineRootSeed] = 0;

  if (a2)
  {
    v13 = (void *)MEMORY[0x18D75CC88](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
  }
  v14 = (objc_class *)type metadata accessor for ListTableViewHeaderFooter();
  v17.receiver = v11;
  v17.super_class = v14;
  v15 = objc_msgSendSuper2(&v17, sel_initWithReuseIdentifier_, v13);

  return v15;
}

id ListTableViewHeaderFooter.init(coder:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  objc_class *v11;
  id v12;
  objc_super v14;
  _OWORD v15[3];

  v3 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &v1[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v8 = &v1[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration];
  v9 = v1;
  static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v6, (uint64_t *)v15);
  v10 = v15[1];
  *(_OWORD *)(v8 + 24) = v15[0];
  *(_WORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_WORD *)v8 + 8) = 0;
  *(_OWORD *)(v8 + 40) = v10;
  *(_OWORD *)(v8 + 56) = v15[2];
  *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host] = 0;
  *(_DWORD *)&v9[OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_outlineRootSeed] = 0;

  v11 = (objc_class *)type metadata accessor for ListTableViewHeaderFooter();
  v14.receiver = v9;
  v14.super_class = v11;
  v12 = objc_msgSendSuper2(&v14, sel_initWithCoder_, a1);

  return v12;
}

id ListTableViewHeaderFooter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ListTableViewHeaderFooter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ListTableViewHeaderFooter()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for PlatformListViewBase.BackgroundModifier : ViewModifier in ListTableViewHeaderFooter()
{
  return MEMORY[0x1E0CE1E88];
}

_UNKNOWN **associated type witness table accessor for PlatformListViewBase.BaseContent : ListCellContent in ListTableViewHeaderFooter()
{
  return &protocol witness table for TableViewListHeaderFooterContent;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance ListTableViewHeaderFooter(uint64_t a1, uint64_t a2)
{
  return specialized ListTableViewHeaderFooter.hostingView<A>(_:willUpdate:)(a2);
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePreferences:) in conformance ListTableViewHeaderFooter()
{
  return specialized ListTableViewHeaderFooter.hostingView<A>(_:didChangePreferences:)();
}

void *protocol witness for PlatformListViewBase.host.getter in conformance ListTableViewHeaderFooter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
  v2 = v1;
  return v1;
}

uint64_t specialized ListTableViewHeaderFooter.hostingView<A>(_:didChangePreferences:)()
{
  uint64_t v0;
  uint64_t result;
  int v2;
  BOOL v3;
  int v4;

  result = PreferenceList.subscript.getter();
  if (v4 == -1
    || ((v2 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_outlineRootSeed), v2 != -1)
      ? (v3 = v4 == v2)
      : (v3 = 0),
        !v3))
  {
    *(_DWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_outlineRootSeed) = v4;
  }
  return result;
}

uint64_t specialized ListTableViewHeaderFooter.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, (uint64_t)&type metadata for HeaderFooterConfigurationKey, (uint64_t)&protocol witness table for HeaderFooterConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, (uint64_t)&type metadata for HeaderFooterConfigurationKey, (uint64_t)&protocol witness table for HeaderFooterConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

uint64_t _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v8[0] = a4;
    v8[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for CollectionViewCellModifier(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_BYTE *)(a2 + 24);
    outlined copy of Environment<Bool>.Content(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v10;
    v11 = a3[6];
    v12 = (_QWORD *)(a1 + v11);
    v13 = (_QWORD *)(a2 + v11);
    type metadata accessor for Environment<UIListContentConfiguration?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v14 = type metadata accessor for UIListContentConfiguration();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        type metadata accessor for UIListContentConfiguration?(0);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      *v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v18 = a3[7];
    v19 = (_QWORD *)(a1 + v18);
    v20 = (_QWORD *)(a2 + v18);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v21 = type metadata accessor for UIListContentConfiguration();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        type metadata accessor for UIListContentConfiguration?(0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
    }
    else
    {
      *v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v24 = a3[8];
    v25 = a1 + v24;
    v26 = a2 + v24;
    v27 = *(_QWORD *)v26;
    v28 = *(_QWORD *)(v26 + 8);
    v29 = *(_BYTE *)(v26 + 16);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v26, v28, v29);
    *(_QWORD *)v25 = v27;
    *(_QWORD *)(v25 + 8) = v28;
    *(_BYTE *)(v25 + 16) = v29;
    v30 = a3[10];
    *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
    v31 = a1 + v30;
    v32 = a2 + v30;
    v33 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *(_OWORD *)(v31 + 16) = v33;
    *(_BYTE *)(v31 + 32) = *(_BYTE *)(v32 + 32);
    v34 = a3[12];
    *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
    *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
    v35 = a3[13];
    v36 = a1 + v35;
    v37 = a2 + v35;
    if (*(_QWORD *)v37 == 1)
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
    }
    else
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
      swift_retain();
    }
    v38 = a3[15];
    *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
    *(_QWORD *)(a1 + v38) = *(_QWORD *)(a2 + v38);
    v39 = a3[16];
    v40 = a1 + v39;
    v41 = a2 + v39;
    v42 = *(unsigned __int8 *)(a2 + v39 + 70);
    if (v42 == 2)
    {
      v43 = *(_OWORD *)(v41 + 24);
      *(_OWORD *)(v40 + 24) = v43;
      (**(void (***)(uint64_t, uint64_t))(v43 - 8))(v40, v41);
      *(_QWORD *)(v40 + 40) = *(_QWORD *)(v41 + 40);
      *(_QWORD *)(v40 + 48) = *(_QWORD *)(v41 + 48);
    }
    else if (v42 == 1)
    {
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *(_QWORD *)(v40 + 8) = *(_QWORD *)(v41 + 8);
    }
    else
    {
      v44 = *(_OWORD *)(v41 + 24);
      *(_OWORD *)(v40 + 24) = v44;
      (**(void (***)(uint64_t, uint64_t))(v44 - 8))(v40, v41);
      *(_BYTE *)(v40 + 40) = *(_BYTE *)(v41 + 40);
      *(_QWORD *)(v40 + 48) = *(_QWORD *)(v41 + 48);
      *(_QWORD *)(v40 + 56) = *(_QWORD *)(v41 + 56);
      *(_DWORD *)(v40 + 64) = *(_DWORD *)(v41 + 64);
      *(_WORD *)(v40 + 68) = *(_WORD *)(v41 + 68);
    }
    *(_BYTE *)(v40 + 70) = v42;
    swift_retain();
    *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  }
  return a1;
}

uint64_t outlined destroy of ListItemTint(uint64_t a1)
{
  destroy for ScrollOverlayLayout();
  return a1;
}

uint64_t initializeWithTake for CollectionViewCellModifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  type metadata accessor for Environment<UIListContentConfiguration?>.Content(0);
  v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for UIListContentConfiguration();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11))
    {
      type metadata accessor for UIListContentConfiguration?(0);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v7, v8, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v14 = a3[7];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = type metadata accessor for UIListContentConfiguration();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for UIListContentConfiguration?(0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v20 = a3[8];
  v21 = a3[9];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v24 = a3[10];
  v25 = a3[11];
  v26 = a1 + v24;
  v27 = a2 + v24;
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_BYTE *)(v26 + 32) = *(_BYTE *)(v27 + 32);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  v29 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  v32 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  v33 = a3[16];
  v34 = a3[17];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_QWORD *)(v35 + 63) = *(_QWORD *)(v36 + 63);
  v37 = *(_OWORD *)(v36 + 48);
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_OWORD *)(v35 + 48) = v37;
  v38 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v38;
  *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionViewCellModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871B7EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<UIListContentConfiguration?>, (uint64_t (*)(uint64_t))type metadata accessor for UIListContentConfiguration?, MEMORY[0x1E0CE1160]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 52));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

uint64_t storeEnumTagSinglePayload for CollectionViewCellModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1871B7F9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<UIListContentConfiguration?>, (uint64_t (*)(uint64_t))type metadata accessor for UIListContentConfiguration?, MEMORY[0x1E0CE1160]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 52)) = (a2 + 1);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CollectionViewCellModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X2>, char a3@<W3>, char a4@<W4>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  char v24;

  v9 = *a1;
  v10 = *a2;
  v11 = a2[1];
  *(_QWORD *)a5 = swift_getKeyPath();
  *(_BYTE *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = swift_getKeyPath();
  *(_BYTE *)(a5 + 24) = 0;
  v12 = (int *)type metadata accessor for CollectionViewCellModifier();
  v13 = (uint64_t *)(a5 + v12[6]);
  *v13 = swift_getKeyPath();
  type metadata accessor for Environment<UIListContentConfiguration?>.Content(0);
  swift_storeEnumTagMultiPayload();
  v14 = (uint64_t *)(a5 + v12[7]);
  *v14 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v15 = a5 + v12[8];
  *(_QWORD *)v15 = swift_getKeyPath();
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = 0;
  v16 = a5 + v12[10];
  v17 = a5 + v12[13];
  *(_BYTE *)(a5 + v12[9]) = v9;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  *(_OWORD *)v16 = v22;
  *(_OWORD *)(v16 + 16) = v23;
  *(_BYTE *)(v16 + 32) = v24;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  *(_QWORD *)(a5 + v12[11]) = v22;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  *(_QWORD *)v17 = v22;
  *(_BYTE *)(v17 + 8) = BYTE8(v22);
  if (v9 == 1)
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    result = swift_bridgeObjectRelease();
    v19 = 1;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v19 = 0;
  }
  *(_BYTE *)(a5 + v12[14]) = v19;
  *(double *)(a5 + v12[15]) = a6;
  v20 = a5 + v12[16];
  *(_QWORD *)v20 = v10;
  *(_QWORD *)(v20 + 8) = v11;
  *(_BYTE *)(v20 + 70) = 1;
  *(_BYTE *)(a5 + v12[17]) = a3;
  *(_BYTE *)(a5 + v12[12]) = a4 & 1;
  return result;
}

uint64_t CollectionViewHeaderFooterVisitor.visit(view:traits:)(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  uint64_t *boxed_opaque_existential_1;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD v32[2];
  uint64_t v33;
  __int128 v34;
  int *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unsigned __int8 v39;

  v3 = v2;
  type metadata accessor for ModifiedContent<_ViewList_View, CollectionViewCellModifier>();
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a2;
  v13 = *(unsigned int *)(a1 + 48);
  v12 = *(unsigned int *)(a1 + 52);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *v3;
  v39 = *v3;
  *((_QWORD *)&v37 + 1) = v14;
  v38 = v11;
  v16 = *((double *)v3 + 3);
  *(_QWORD *)&v37 = __PAIR64__(v12, v13);
  v33 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  v37 = v34;
  v17 = *((_QWORD *)v3 + 1);
  CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)(&v39, (uint64_t *)&v37, 0, *(_BYTE *)(v17 + direct field offset for ListCollectionViewCellBase.shouldHugContent), (uint64_t)&v10[*(int *)(v7 + 36)], v16);
  outlined init with copy of _ViewList_View(a1, (uint64_t)v10);
  v18 = *((_QWORD *)v3 + 2);
  if (one-time initialization token for isEnabledInProcessEnv != -1)
    swift_once();
  if (static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv != 1)
  {
    specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)((uint64_t)v10, v18);
    if (v15)
      goto LABEL_5;
LABEL_8:
    *(_QWORD *)&v37 = v11;
    v38 = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v28 = swift_retain();
    specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v28, v18);
    swift_release_n();
    goto LABEL_12;
  }
  v19 = (int *)type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>();
  v35 = v19;
  v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView> and conformance UIHostingConfiguration<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v34);
  v32[1] = v17;
  v21 = v15;
  v22 = v14;
  v23 = v18;
  v24 = v13;
  v25 = v19[14];
  OptionalEdgeInsets.init()();
  v26 = (char *)boxed_opaque_existential_1 + v19[16];
  *(_QWORD *)v26 = 0;
  v26[8] = 1;
  *((_QWORD *)v26 + 2) = 0;
  v26[24] = 1;
  *((_BYTE *)boxed_opaque_existential_1 + v19[17]) = 1;
  *((_BYTE *)boxed_opaque_existential_1 + v19[18]) = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  *((_BYTE *)boxed_opaque_existential_1 + v25) = 0;
  v13 = v24;
  v18 = v23;
  v14 = v22;
  v15 = v21;
  MEMORY[0x18D75D9F0](&v34);
  if (!v21)
    goto LABEL_8;
LABEL_5:
  v38 = v11;
  v37 = xmmword_187BF9840;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v27 = *((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1) != 1)
  {
    v29 = v34;
    if (v15 > 0x3F || (((unint64_t)v34 >> v15) & 1) != 0)
    {
      outlined copy of _ViewList_ID.Canonical?(v34, *((uint64_t *)&v34 + 1));
      specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v27, v18);
      outlined consume of Text.LineStyle?(v29, v27);
      outlined consume of Text.LineStyle?(v29, v27);
      goto LABEL_12;
    }
    outlined consume of Text.LineStyle?(v34, *((uint64_t *)&v34 + 1));
  }
  specialized ListCollectionViewCellBase.backgroundHost.setter(0);
LABEL_12:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  v30 = (uint64_t *)(*((_QWORD *)v3 + 1) + direct field offset for ListCollectionViewCellBase.viewListID);
  *v30 = v13 | (v33 << 32);
  v30[1] = v14;
  swift_bridgeObjectRelease();
  return 0;
}

void *CollectionViewCellModifier.resolvedBody(content:isInSidebar:)@<X0>(char a1@<W1>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *v48;
  uint64_t v49;
  Class isa;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  double v62;
  double v63;
  double v64;
  double v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[216];
  char v80;
  _BYTE v81[321];
  _OWORD v82[2];
  uint64_t v83;
  __int128 v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  _BYTE v89[416];
  uint64_t v90[52];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _BYTE v98[8];
  _QWORD v99[66];
  char v100;
  _BYTE v101[328];
  _QWORD v102[28];
  char v103;
  _QWORD v104[75];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _OWORD v112[13];
  char v113;

  v3 = v2;
  v77 = a2;
  v5 = type metadata accessor for UIListContentConfiguration.ImageProperties();
  v67 = *(_QWORD *)(v5 - 8);
  v68 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v66 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for UIListContentConfiguration();
  v73 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v8);
  v69 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for CollectionViewCellModifier();
  MEMORY[0x1E0C80A78](v41, v10);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v62 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v62 - v23;
  v25 = CollectionViewCellModifier.padding(_:)(a1);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v74 = static VerticalAlignment.firstTextBaseline.getter();
  closure #1 in CollectionViewCellModifier.resolvedBody(content:isInSidebar:)(v2, (uint64_t)v112, v25, v27, v29, v31);
  v75 = v24;
  CollectionViewCellModifier.configuration(_:)(a1, (uint64_t)v24);
  v32 = CollectionViewCellModifier.effectiveListRowInsets(_:)(a1);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v76 = *(int *)(v41 + 60);
  v72 = *(double *)(v2 + v76);
  v78 = v41;
  v39 = v2 + *(int *)(v41 + 52);
  v40 = *(_QWORD *)v39;
  LODWORD(v41) = *(unsigned __int8 *)(v39 + 8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
  v42 = v40;
  v71 = v41;
  if (v40 == 1)
  {
    CollectionViewCellModifier.configuration(_:)(a1 & 1, (uint64_t)v20);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
    v42 = 1;
    v43 = v70;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v16, 1, v70) == 1)
    {
      LOBYTE(v41) = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v69, v16, v43);
      v41 = (uint64_t)v66;
      UIListContentConfiguration.imageProperties.getter();
      v44 = &v12[*(int *)(v78 + 32)];
      v45 = *(_QWORD *)v44;
      v46 = *((_QWORD *)v44 + 1);
      v47 = v44[16];
      outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v44, v46, v47);
      specialized Environment.wrappedValue.getter(v45, v46, v47);
      v63 = v36;
      v64 = v34;
      v62 = v38;
      v65 = v32;
      outlined consume of Environment<CGFloat?>.Content(v45, v46, v47);
      v36 = v63;
      v34 = v64;
      v38 = v62;
      v32 = v65;
      v48 = (void *)Color.Resolved.kitColor.getter();
      objc_opt_self();
      v49 = swift_dynamicCastObjCClassUnconditional();
      isa = UIListContentConfiguration.ImageProperties.resolvedTintColor(for:)((UIColor)v49).super.isa;

      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v41, v68);
      v104[0] = isa;
      type metadata accessor for UIColor();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
      v42 = Color.init<A>(provider:)();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v69, v70);
      LOBYTE(v41) = 1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  }
  *(_OWORD *)&v79[167] = v112[10];
  *(_OWORD *)&v79[183] = v112[11];
  *(_OWORD *)&v79[199] = v112[12];
  *(_OWORD *)&v79[103] = v112[6];
  *(_OWORD *)&v79[119] = v112[7];
  *(_OWORD *)&v79[135] = v112[8];
  *(_OWORD *)&v79[151] = v112[9];
  *(_OWORD *)&v79[39] = v112[2];
  *(_OWORD *)&v79[55] = v112[3];
  *(_OWORD *)&v79[71] = v112[4];
  *(_OWORD *)&v79[87] = v112[5];
  *(_OWORD *)&v79[7] = v112[0];
  v80 = 0;
  v79[215] = v113;
  *(_OWORD *)&v79[23] = v112[1];
  outlined copy of Transaction?(v40);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
  v104[0] = v42;
  LOBYTE(v104[1]) = v41;
  ListContentStyling.init(configuration:insets:minHeight:tint:)((uint64_t)v75, (uint64_t)v104, (uint64_t)v82, v32, v34, v36, v38, v72);
  *(_QWORD *)v81 = v74;
  *(_QWORD *)&v81[8] = 0;
  v81[16] = 0;
  *(_OWORD *)&v81[177] = *(_OWORD *)&v79[160];
  *(_OWORD *)&v81[193] = *(_OWORD *)&v79[176];
  *(_OWORD *)&v81[209] = *(_OWORD *)&v79[192];
  *(_QWORD *)&v81[225] = *(_QWORD *)&v79[208];
  *(_OWORD *)&v81[113] = *(_OWORD *)&v79[96];
  *(_OWORD *)&v81[129] = *(_OWORD *)&v79[112];
  *(_OWORD *)&v81[145] = *(_OWORD *)&v79[128];
  *(_OWORD *)&v81[161] = *(_OWORD *)&v79[144];
  *(_OWORD *)&v81[49] = *(_OWORD *)&v79[32];
  *(_OWORD *)&v81[65] = *(_OWORD *)&v79[48];
  *(_OWORD *)&v81[81] = *(_OWORD *)&v79[64];
  *(_OWORD *)&v81[97] = *(_OWORD *)&v79[80];
  *(_OWORD *)&v81[17] = *(_OWORD *)v79;
  *(_OWORD *)&v81[33] = *(_OWORD *)&v79[16];
  *(_OWORD *)&v81[240] = v82[0];
  *(_OWORD *)&v81[256] = v82[1];
  *(_QWORD *)&v81[272] = v83;
  *(_OWORD *)&v81[280] = v84;
  v81[296] = v85;
  *(_QWORD *)&v81[304] = v86;
  *(_QWORD *)&v81[312] = v87;
  v81[320] = v88;
  v51 = *(_QWORD *)(v3 + 16);
  v52 = *(_BYTE *)(v3 + 24);
  outlined copy of Environment<Bool>.Content(v51, v52);
  v53 = (unsigned __int16)specialized Environment.wrappedValue.getter(v51, v52) >> 8;
  outlined consume of Environment<Bool>.Content(v51, v52);
  outlined init with copy of AccessibilityScrollableContext(v3 + *(int *)(v78 + 64), (uint64_t)v99);
  v98[0] = v53 & 1;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v99, (uint64_t)v104);
  outlined init with copy of AccessibilityScrollableContextModifier((uint64_t)v104, (uint64_t)v102);
  memcpy(v101, v81, 0x141uLL);
  outlined retain of ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>((uint64_t)v81);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)v104);
  v54 = 4;
  if (!v98[0])
    v54 = 0;
  v104[0] = v54;
  AccessibilityNullableOptionSet<>.init(adding:)();
  specialized View.accessibility<A>(_:_:isEnabled:)(v90[0], v90[1], 1, (uint64_t)v104);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v101, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>);
  memcpy(v89, v104, sizeof(v89));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>>);
  outlined release of ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>((uint64_t)v81);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v89, (uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
  v95 = v109;
  v96 = v110;
  v97 = v111;
  v91 = v105;
  v92 = v106;
  v93 = v107;
  v94 = v108;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v89, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v90, (uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>);
  v99[65] = KeyPath;
  v100 = 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>);
  v56 = swift_getKeyPath();
  v57 = *(_QWORD *)(v3 + 16);
  v58 = *(_BYTE *)(v3 + 24);
  outlined copy of Environment<Bool>.Content(v57, v58);
  v59 = (unsigned __int16)specialized Environment.wrappedValue.getter(v57, v58) >> 8;
  outlined consume of Environment<Bool>.Content(v57, v58);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v98, (uint64_t)v101, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>);
  v102[27] = v56;
  v103 = v59 & 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>);
  v60 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v101, (uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>);
  v104[70] = v60;
  *(double *)&v104[71] = v25;
  *(double *)&v104[72] = v27;
  *(double *)&v104[73] = v29;
  *(double *)&v104[74] = v31;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v101, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>);
  return memcpy(v77, v104, 0x258uLL);
}

double CollectionViewCellModifier.padding(_:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v19;

  v2 = v1;
  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - v10;
  v12 = (_BYTE *)(v2 + *(int *)(type metadata accessor for CollectionViewCellModifier() + 40));
  if ((v12[32] & 1) == 0)
    return *(double *)v12;
  CollectionViewCellModifier.configuration(_:)(a1 & 1, (uint64_t)v11);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  v13 = type metadata accessor for UIListContentConfiguration();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
    MEMORY[0x18D75AC90](0xD000000000000055, 0x8000000187BD9900);
    EdgeInsets.init(_all:)();
    v16 = v15;
  }
  else
  {
    UIListContentConfiguration.directionalLayoutMargins.getter();
    v16 = v17;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  return v16;
}

uint64_t closure #1 in CollectionViewCellModifier.resolvedBody(content:isInSidebar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t (*v30)(_QWORD);
  int v31;
  int v32;
  unint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t KeyPath;
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  _BYTE v76[152];
  char v77;
  _OWORD v78[2];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  BOOL v86;
  char v87;
  double v88;
  double v89;
  double v90;
  double v91;
  char v92;
  uint64_t v93;
  char v94;
  unsigned __int8 v95;
  char v96;
  char v97;

  v12 = type metadata accessor for CollectionViewCellModifier();
  MEMORY[0x1E0C80A78](v12, v13);
  v55 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v55 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v55 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v55 - v25;
  v28 = *(int *)(v27 + 48);
  v29 = *(_BYTE *)(a1 + v28);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v55 - v25, v30);
  if ((v29 & 1) != 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
LABEL_3:
    v61 = 0;
    v58 = 1;
    goto LABEL_8;
  }
  v31 = v26[*(int *)(v12 + 68)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
  if (v31 == 2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
  }
  else
  {
    v32 = v22[*(int *)(v12 + 68)];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
    if (v32 != 1)
      goto LABEL_3;
  }
  v58 = 0;
  v61 = 0xBFF0000000000000;
LABEL_8:
  v56 = *(unsigned __int8 *)(a1 + *(int *)(v12 + 36));
  KeyPath = swift_getKeyPath();
  v60 = swift_getKeyPath();
  v59 = static Edge.Set.all.getter();
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v33 = *(_QWORD *)(a1 + 16);
  v34 = *(_BYTE *)(a1 + 24);
  outlined copy of Environment<Bool>.Content(v33, v34);
  v35 = specialized Environment.wrappedValue.getter(v33, v34);
  outlined consume of Environment<Bool>.Content(v33, v34);
  v36 = v97;
  v37 = v96;
  v57 = v95;
  v38 = *(_BYTE *)(a1 + v28);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
  if ((v38 & 1) == 0)
  {
    v39 = v18[*(int *)(v12 + 68)];
    v40 = v55;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v55, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
    if (v39)
    {
      v41 = *(unsigned __int8 *)(v40 + *(int *)(v12 + 68));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v40, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
      if (v41 != 1)
        goto LABEL_12;
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v40, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
    }
    v43 = 0;
    v42 = 0xBFF0000000000000;
    goto LABEL_15;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
LABEL_12:
  v42 = 0;
  v43 = 1;
LABEL_15:
  v44 = v56 == 0;
  v63[0] = xmmword_187C12DE0;
  v63[1] = xmmword_187C12DE0;
  v45 = KeyPath;
  v64 = KeyPath;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  LOBYTE(v68) = v36;
  v46 = v60;
  *((_QWORD *)&v68 + 1) = v60;
  LOBYTE(v69) = v37;
  BYTE1(v69) = v56 == 0;
  v47 = v59;
  BYTE8(v69) = v59;
  *(double *)&v70 = a3;
  *((double *)&v70 + 1) = a4;
  *(double *)&v71 = a5;
  *((double *)&v71 + 1) = a6;
  v48 = v57;
  LOBYTE(v72) = v57;
  v73 = 0;
  v74 = v35 & 1;
  v77 = v58;
  v76[151] = v35 & 1;
  *(_OWORD *)&v76[103] = v70;
  *(_OWORD *)&v76[119] = v71;
  *(_OWORD *)&v76[135] = v72;
  *(_OWORD *)&v76[7] = xmmword_187C12DE0;
  *(_OWORD *)&v76[23] = xmmword_187C12DE0;
  *(_OWORD *)&v76[87] = v69;
  *(_OWORD *)&v76[71] = v68;
  *(_OWORD *)&v76[55] = 0u;
  *(_OWORD *)&v76[39] = (unint64_t)KeyPath;
  v75 = v43;
  v49 = v58;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v61;
  *(_BYTE *)(a2 + 24) = v49;
  v50 = *(_OWORD *)&v76[112];
  *(_OWORD *)(a2 + 121) = *(_OWORD *)&v76[96];
  *(_OWORD *)(a2 + 137) = v50;
  *(_OWORD *)(a2 + 153) = *(_OWORD *)&v76[128];
  *(_QWORD *)(a2 + 169) = *(_QWORD *)&v76[144];
  v51 = *(_OWORD *)&v76[48];
  *(_OWORD *)(a2 + 57) = *(_OWORD *)&v76[32];
  *(_OWORD *)(a2 + 73) = v51;
  v52 = *(_OWORD *)&v76[80];
  *(_OWORD *)(a2 + 89) = *(_OWORD *)&v76[64];
  *(_OWORD *)(a2 + 105) = v52;
  v53 = *(_OWORD *)&v76[16];
  *(_OWORD *)(a2 + 25) = *(_OWORD *)v76;
  *(_OWORD *)(a2 + 41) = v53;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = v42;
  *(_BYTE *)(a2 + 208) = v43;
  v78[0] = xmmword_187C12DE0;
  v78[1] = xmmword_187C12DE0;
  v79 = v45;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = v36;
  v84 = v46;
  v85 = v37;
  v86 = v44;
  v87 = v47;
  v88 = a3;
  v89 = a4;
  v90 = a5;
  v91 = a6;
  v92 = v48;
  v93 = 0;
  v94 = v35 & 1;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>((uint64_t)v63);
  return outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>((uint64_t)v78);
}

uint64_t CollectionViewCellModifier.configuration(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = v2;
  v6 = type metadata accessor for CollectionViewCellModifier();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + *(int *)(v10 + 36)) == 1)
  {
    v11 = *(unsigned __int8 *)(v3 + *(int *)(v6 + 56));
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
    if (v11 == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
    }
    else
    {
      v12 = *(_QWORD *)v9;
      v13 = v9[8];
      outlined copy of Environment<Bool>.Content(*(_QWORD *)v9, v13);
      specialized Environment.wrappedValue.getter(v12, v13, &v16);
      outlined consume of Environment<Bool>.Content(v12, v13);
      LODWORD(v12) = v16;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
      if ((_DWORD)v12 != 1)
        return specialized Environment.wrappedValue.getter(a2);
    }
    if ((a1 & 1) != 0)
      static SemanticFeature.isEnabled.getter();
  }
  return specialized Environment.wrappedValue.getter(a2);
}

double CollectionViewCellModifier.effectiveListRowInsets(_:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v18;

  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v18 - v9;
  v11 = (_BYTE *)(v1 + *(int *)(type metadata accessor for CollectionViewCellModifier() + 40));
  if ((v11[32] & 1) == 0)
    return *(double *)v11;
  CollectionViewCellModifier.configuration(_:)(a1 & 1, (uint64_t)v10);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  v12 = type metadata accessor for UIListContentConfiguration();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
    MEMORY[0x18D75AC90](0xD000000000000055, 0x8000000187BD9900);
    EdgeInsets.init(_all:)();
    v15 = v14;
  }
  else
  {
    UIListContentConfiguration.directionalLayoutMargins.getter();
    v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v12);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  return v15;
}

void *protocol witness for ViewModifier.body(content:) in conformance CollectionViewCellModifier@<X0>(uint64_t a1@<X8>)
{
  CollectionViewCellModifier.resolvedBody(content:isInSidebar:)(1, (void *)a1);
  return CollectionViewCellModifier.resolvedBody(content:isInSidebar:)(0, (void *)(a1 + 600));
}

uint64_t key path setter for EnvironmentValues.listCellState : EnvironmentValues()
{
  return EnvironmentValues.listCellState.setter();
}

uint64_t sub_1871B9870@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.headerProminence.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1871B98B0()
{
  return EnvironmentValues.headerProminence.setter();
}

uint64_t sub_1871B98E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.listCellState.getter();
  *a1 = result & 1;
  a1[1] = BYTE1(result) & 1;
  a1[2] = BYTE2(result) & 1;
  return result;
}

uint64_t sub_1871B9930()
{
  return EnvironmentValues.listCellState.setter();
}

uint64_t sub_1871B997C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.listContentConfiguration : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListContentConfigurationKey>, (uint64_t)&type metadata for ListContentConfigurationKey, (uint64_t)&protocol witness table for ListContentConfigurationKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListContentConfigurationKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_1871B99B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.listContentConfiguration : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(char *))EnvironmentValues.listContentConfiguration.setter);
}

uint64_t sub_1871B99CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.listContentConfiguration : EnvironmentValues(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentListContentConfigurationKey>, (uint64_t)&type metadata for ProminentListContentConfigurationKey, (uint64_t)&protocol witness table for ProminentListContentConfigurationKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentListContentConfigurationKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.listContentConfiguration : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v13;

  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v10, v11);
  return a5(v10);
}

uint64_t sub_1871B9A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.listContentConfiguration : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(char *))EnvironmentValues.prominentListContentConfiguration.setter);
}

uint64_t sub_1871B9A9C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;

  result = EnvironmentValues.resolvedTintColor.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t outlined retain of ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_BYTE *)(a1 + 136);
  v4 = *(_QWORD *)(a1 + 312);
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
  outlined copy of Environment<Bool>.Content(v2, v3);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v4);
  return a1;
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, MEMORY[0x1E0CE73D0]);
}

uint64_t outlined release of ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_BYTE *)(a1 + 136);
  v4 = *(_QWORD *)(a1 + 312);
  outlined consume of Environment<EdgeInsets>.Content(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
  outlined consume of Environment<Bool>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Transaction?(v4);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a4, a5, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v8 = type metadata accessor for ModifiedContent();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1871B9CF0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.effectiveListRowInsets.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_1871B9D2C()
{
  return EnvironmentValues.effectiveListRowInsets.setter();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0]);
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_BYTE *)(a1 + 80);
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  outlined copy of Environment<Bool>.Content(v2, v3);
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_BYTE *)(a1 + 80);
  outlined consume of Environment<EdgeInsets>.Content(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  outlined consume of Environment<Bool>.Content(v2, v3);
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarStyleContext>, MEMORY[0x1E0CE49E8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = MEMORY[0x1E0CE0B90];
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E0CE0B90]);
    v3 = v2;
    v4[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
    v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, v1);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityScrollableContextModifier);
}

id RenderBoxView.init(frame:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  id v9;
  id v10;
  id v11;
  objc_super v13;

  v4[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] = 0;
  v13.receiver = v4;
  v13.super_class = (Class)type metadata accessor for RenderBoxView();
  v9 = objc_msgSendSuper2(&v13, sel_initWithFrame_, a1, a2, a3, a4);
  v10 = objc_msgSend(v9, sel_layer);
  objc_msgSend(v10, sel_setDelegate_, v9);
  v11 = v10;
  objc_msgSend(v11, sel_setOpaque_, objc_msgSend(v9, sel_isOpaque));

  return v9;
}

id RenderBoxView.init(coder:)(void *a1)
{
  _BYTE *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  objc_super v9;

  v1[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] = 0;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for RenderBoxView();
  v3 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    v6 = objc_msgSend(v5, sel_layer);
    objc_msgSend(v6, sel_setDelegate_, v5);
    v7 = v6;
    objc_msgSend(v7, sel_setOpaque_, objc_msgSend(v5, sel_isOpaque));

    a1 = v7;
  }

  return v4;
}

id RenderBoxView.__deallocating_deinit()
{
  void *v0;
  id v1;
  objc_super v3;

  v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_waitUntilAsyncRenderingCompleted);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for RenderBoxView();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for RenderBoxView()
{
  return objc_opt_self();
}

uint64_t RenderBoxLayer.needsSynchronousUpdate.getter()
{
  void *v0;
  _BYTE *v1;
  uint64_t v2;
  objc_super v4;

  v4.receiver = v0;
  v4.super_class = (Class)swift_getObjectType();
  if (!objc_msgSendSuper2(&v4, sel_needsSynchronousUpdate))
    return 0;
  v1 = objc_msgSend(v0, sel_delegate);
  if (!v1)
    return 1;
  if (v1[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] == 1)
    v2 = (uint64_t)objc_msgSend(v0, sel_hasBeenCommitted);
  else
    v2 = 1;
  swift_unknownObjectRelease();
  return v2;
}

uint64_t type metadata accessor for RenderBoxLayer()
{
  return objc_opt_self();
}

void WindowStyle.configureWindow(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.presentedWindowStyle<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t dispatch thunk of WindowStyle.configureWindow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1871BA968(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void Scene.windowStyle<A>(_:)()
{
  View.presentedWindowStyle<A>(_:)();
}

uint64_t static EnvironmentWritingSceneModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[16];
  char v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for EnvironmentWritingSceneModifier(255, a3, a4, a4);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = &v27[-v11];
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentWritingSceneModifier<A>, v6, v10);
  v15 = type metadata accessor for ChildEnvironment(0, v6, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = &v27[-v18];
  LODWORD(v31) = *a1;
  type metadata accessor for _GraphValue();
  v20 = _GraphValue.value.getter();
  v21 = *((_DWORD *)a2 + 2);
  v22 = a2[2];
  v23 = a2[5];
  v31 = *a2;
  v32 = v21;
  v33 = v22;
  v34 = *(_OWORD *)(a2 + 3);
  v35 = v23;
  LODWORD(a1) = _GraphInputs.environment.getter();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v12, 1, 1, v6);
  *(_DWORD *)v19 = v20;
  *((_DWORD *)v19 + 1) = (_DWORD)a1;
  (*(void (**)(char *, _BYTE *, uint64_t))(v8 + 32))(&v19[*(int *)(v15 + 40)], v12, v7);
  v29 = v15;
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ChildEnvironment<A>, v15);
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)v28, v15, MEMORY[0x1E0DEDCE8], v24, MEMORY[0x1E0DEDD18], v25);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return _GraphInputs.environment.setter();
}

uint64_t protocol witness for EnvironmentWritingModifier.value.getter in conformance EnvironmentWritingSceneModifier<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnvironmentWritingSceneModifier<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static EnvironmentWritingSceneModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Scene.environment<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v15 = (char *)&v24 - v14;
  v17 = type metadata accessor for EnvironmentWritingSceneModifier(0, a4, a6, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, a2, AssociatedTypeWitness, v20);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v22, v15, AssociatedTypeWitness);
  Scene.modifier<A>(_:)(v22, a3, v17, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
}

uint64_t type metadata accessor for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentWritingSceneModifier);
}

uint64_t sub_1871BAD20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for EnvironmentWritingSceneModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for EnvironmentWritingSceneModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

uint64_t type metadata completion function for EnvironmentWritingSceneModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentWritingSceneModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for EnvironmentWritingSceneModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for EnvironmentWritingSceneModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentWritingSceneModifier(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for EnvironmentWritingSceneModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChildEnvironment);
}

uint64_t ChildEnvironment.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t OutputValue;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t AssociatedConformanceWitness;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v2 = v1;
  v3 = a1;
  v65 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v59 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v53 = AssociatedTypeWitness;
  v54 = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v7);
  v51 = (char *)&v48 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v57 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v56 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v48 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v48 - v18;
  v21 = *(int *)(v20 + 48);
  Value = AGGraphGetValue();
  v24 = v23;
  v50 = *(_QWORD *)(v4 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  v25(v19, Value, v4);
  v26 = v24 & 1;
  v19[v21] = v24 & 1;
  v27 = (uint64_t *)AGGraphGetValue();
  v28 = v27[1];
  v62 = *v27;
  v63 = v28;
  v64 = v29 & 1;
  v58 = TupleTypeMetadata2;
  if ((v29 & 1) != 0)
  {
    v39 = *(int *)(TupleTypeMetadata2 + 48);
    v25(v15, (uint64_t)v19, v4);
    v15[v39] = v26;
    goto LABEL_6;
  }
  OutputValue = AGGraphGetOutputValue();
  v30 = TupleTypeMetadata2;
  v31 = v3;
  v32 = v2;
  v33 = *(int *)(v30 + 48);
  v25(v15, (uint64_t)v19, v4);
  v15[v33] = v26;
  v2 = v32;
  v3 = v31;
  if (!OutputValue)
  {
LABEL_6:
    v40 = *(void (**)(char *, uint64_t))(v57 + 8);
    swift_retain();
    swift_retain();
    v40(v15, v58);
    v34 = v59;
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  v34 = v59;
  v35 = getter of modifierNeedsUpdate #1 in ChildEnvironment.updateValue()((uint64_t)v15, v2, v4, v59);
  v36 = v58;
  v37 = *(void (**)(char *, uint64_t))(v57 + 8);
  v37(v15, v58);
  if ((v35 & 1) == 0)
  {
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v37)(v19, v36);
  }
LABEL_7:
  v41 = swift_checkMetadataState();
  v42 = v51;
  (*(void (**)(uint64_t, uint64_t))(v34 + 32))(v4, v34);
  specialized EnvironmentValues.subscript.setter(v42, v41, v41, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v54);
  v60 = v62;
  v61 = v63;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  v43 = v2 + *(int *)(v3 + 40);
  v44 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
  v45 = v50;
  v46 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v47 = v56;
  v46(v56, v19, v4);
  v46((char *)v43, v47, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v43, 0, 1, v4);
}

uint64_t getter of modifierNeedsUpdate #1 in ChildEnvironment.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, double);
  int v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  char v33;
  char *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v49 = a2;
  v51 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v46 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v45 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v45 = (char *)&v45 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v20);
  v23 = (char *)&v45 - v22;
  v25 = *(int *)(v24 + 48);
  v26 = (void (*)(char *, uint64_t, uint64_t, double))v7[2];
  v26((char *)&v45 - v22, a1, a3, v21);
  v27 = *(unsigned __int8 *)(a1 + v25);
  v23[v25] = v27;
  v28 = (void (*)(char *, uint64_t))v7[1];
  v28(v23, a3);
  if (v27 == 1)
  {
    v30 = type metadata accessor for ChildEnvironment(0, a3, a4, v29);
    v31 = v49 + *(int *)(v30 + 40);
    v32 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v7[6];
    v33 = 1;
    if (!v32(v31, 1, a3))
    {
      v34 = v46;
      ((void (*)(char *, uint64_t, uint64_t))v26)(v46, v31, a3);
      v35 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
      v35(a3, a4);
      v28(v34, a3);
      v36 = v48;
      v37 = (uint64_t)v45;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v15, AssociatedTypeWitness);
      v38 = v47;
      v39 = ((uint64_t (*)(uint64_t, uint64_t))v35)(a3, a4);
      MEMORY[0x1E0C80A78](v39, v40);
      *(&v45 - 4) = (char *)AssociatedTypeWitness;
      *(&v45 - 3) = v38;
      *((_DWORD *)&v45 - 4) = 3;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v37, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)(&v45 - 6), AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v41);
      v42 = v50;
      v43 = *(void (**)(char *, uint64_t))(v36 + 8);
      v43(v38, AssociatedTypeWitness);
      v43((char *)v37, AssociatedTypeWitness);
      v33 = v42 ^ 1;
    }
  }
  else
  {
    v33 = 0;
  }
  return v33 & 1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ChildEnvironment<A>()
{
  return specialized ChildEnvironment.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ChildEnvironment<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ChildEnvironment<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata completion function for ChildEnvironment()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ChildEnvironment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  void *v15;
  const void *v16;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 8) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v13 = *v14;
    v15 = (void *)(((unint64_t)v13 + v7 + 4) & ~v7);
    v16 = (const void *)(((unint64_t)v14 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for ChildEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_DWORD *initializeWithCopy for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_DWORD *assignWithCopy for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

_DWORD *initializeWithTake for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_DWORD *assignWithTake for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChildEnvironment(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = v7 + ((v8 + 8) & ~v8);
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_7;
    v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (v12)
        goto LABEL_14;
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2)
          goto LABEL_21;
LABEL_7:
        v12 = *(unsigned __int8 *)(a1 + v10);
        if (!*(_BYTE *)(a1 + v10))
          goto LABEL_21;
LABEL_14:
        v14 = (v12 - 1) << v11;
        if (v10 > 3)
          v14 = 0;
        if ((_DWORD)v10)
        {
          if (v10 > 3)
            LODWORD(v10) = 4;
          __asm { BR              X12 }
        }
        return v6 + v14 + 1;
      }
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (*(_WORD *)(a1 + v10))
        goto LABEL_14;
    }
  }
LABEL_21:
  if (v5 < 2)
    return 0;
  v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ChildEnvironment(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_16;
      goto LABEL_23;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_16:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_23:
      __asm { BR              X13 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_16;
  goto LABEL_23;
}

void sub_1871BC3D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1871BC3D8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void base witness table accessor for _AttributeBody in ChildEnvironment<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t specialized ChildEnvironment.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t type metadata accessor for DragDropDefaultPreviewResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DragDropDefaultPreviewResponder;
  if (!type metadata singleton initialization cache for DragDropDefaultPreviewResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for DragDropDefaultPreviewResponder()
{
  return swift_initClassMetadata2();
}

void DragDropDefaultPreviewResponder.contentShapeKind.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

double DragDropDefaultPreviewResponder.previewSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 216);
}

id DragDropDefaultPreviewResponder.liftPreview(host:contentPath:onlyExplicit:)(UIView *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  UIView *v17;
  void *v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  id v26;
  id v27;
  CGFloat v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  double v33;
  double v34;
  double v35;
  id v36;
  _QWORD v39[4];
  unsigned __int8 v40;
  _OWORD v41[2];
  unsigned __int8 v42;
  _OWORD v43[2];
  unsigned __int8 v44;
  _BYTE v45[40];
  _QWORD v46[4];
  unsigned __int8 v47;
  CGRect v48;

  v4 = v3;
  outlined init with take of PlatformItem.PrimaryContent?(a2, (uint64_t)v39, &lazy cache variable for type metadata for Path?);
  v6 = v39[0];
  v7 = v39[1];
  v8 = v39[2];
  v9 = v39[3];
  v10 = v40;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3768]), sel_init);
  v12 = (void *)objc_opt_self();
  v13 = v11;
  v14 = objc_msgSend(v12, sel_clearColor);
  objc_msgSend(v13, sel_setBackgroundColor_, v14);

  objc_msgSend(v13, sel__setPreviewMode_, *(_QWORD *)(v4 + 296));
  outlined init with take of PlatformItem.PrimaryContent?(a2, (uint64_t)v45, &lazy cache variable for type metadata for Path?);
  if (v45[32] != 255)
  {
    v46[0] = v6;
    v46[1] = v7;
    v46[2] = v8;
    v46[3] = v9;
    v47 = v10;
    type metadata accessor for UIBezierPath();
    outlined copy of Path.Storage(v6, v7, v8, v9, v10);
    outlined copy of Path.Storage(v6, v7, v8, v9, v10);
    v15 = UIBezierPath.init(_:)((uint64_t)v46);
    objc_msgSend(v13, sel_setVisiblePath_, v15);

    outlined retain of TableColumnCustomizationID.Base(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
  }
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0
    && (static Update.dispatchImmediately<A>(_:)(), LOBYTE(v43[0]) == 1)
    && (v16 = UIView.findView(forLiftPreviewWithID:kind:onlyExplicit:)(*(unsigned int *)(v4 + 304), 2, a3 & 1)) != 0)
  {
    v18 = v16;
    UIViewSnapshotResponder.previewTargetContainer(host:)(v17, a1);
    v20 = v19;
    outlined init with take of PlatformItem.PrimaryContent?(a2, (uint64_t)v41, &lazy cache variable for type metadata for Path?);
    if (v42 == 255)
    {
      objc_msgSend(v18, sel_bounds);
    }
    else
    {
      v43[0] = v41[0];
      v43[1] = v41[1];
      v44 = v42;
      Path.boundingRect.getter();
    }
    v29 = v21;
    v30 = v22;
    v31 = v23;
    v32 = v24;
    v33 = v21 + CGRectGetWidth(*(CGRect *)&v21) * 0.5;
    v48.origin.x = v29;
    v48.origin.y = v30;
    v48.size.width = v31;
    v48.size.height = v32;
    objc_msgSend(v18, sel_convertPoint_toCoordinateSpace_, v20, v33, v30 + CGRectGetHeight(v48) * 0.5);
    v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B88]), sel_initWithContainer_center_, v20, v34, v35);
    v36 = objc_allocWithZone(MEMORY[0x1E0DC3D88]);
    v25 = v13;
    v27 = objc_msgSend(v36, sel_initWithView_parameters_target_, v18, v25, v26);

  }
  else
  {
    v25 = specialized UIViewSnapshotResponder.platformPreviewTarget<A>(host:preferredContainer:)(a1, 0);
    AGGraphClearUpdate();
    closure #1 in UIViewSnapshotResponder.snapshotView(host:)(v4, a1, v43);
    AGGraphSetUpdate();
    v26 = *(id *)&v43[0];
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_parameters_target_, *(_QWORD *)&v43[0], v13, v25);
  }

  return v27;
}

void DragDropDefaultPreviewResponder.makePreview()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall DragDropDefaultPreviewResponder.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x72756F5367617264;
  v1._object = (void *)0xEA00000000006563;
  String.append(_:)(v1);
}

uint64_t DragDropDefaultPreviewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DragDropDefaultPreviewResponder()
{
  return type metadata accessor for DragDropDefaultPreviewResponder();
}

uint64_t type metadata completion function for CustomPreviewResponder()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void CustomPreviewResponder.preview.didset(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  id v19;
  uint64_t v20;

  v20 = a1;
  v2 = *v1;
  v3 = class metadata base offset for CustomPreviewResponder;
  v4 = (uint64_t *)(*v1 + class metadata base offset for CustomPreviewResponder);
  v5 = *v4;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - v14;
  v16 = *(void **)((char *)v1 + v4[3]);
  if (v16)
  {
    v17 = (char *)v1 + *(_QWORD *)(v3 + v2 + 16);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v17, v6);
    v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (v18((uint64_t)v10, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v10, v5);
      if (v18(v20, 1, v5) != 1)
      {
        v19 = v16;
        specialized _UIHostingView.rootView.setter((uint64_t)v15);

      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v5);
    }
  }
}

uint64_t CustomPreviewResponder.previewHost.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t result;
  uint64_t v20;

  v1 = v0;
  v2 = *v0;
  v3 = class metadata base offset for CustomPreviewResponder;
  v4 = (uint64_t *)(*v0 + class metadata base offset for CustomPreviewResponder);
  v5 = *v4;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - v9;
  v11 = *(void **)((char *)v1 + v4[3]);
  if (v11)
  {
    v12 = *(_QWORD *)((char *)v1 + v4[3]);
    v18 = v11;
    return v12;
  }
  else
  {
    v13 = (char *)v1 + *(_QWORD *)(v3 + v2 + 16);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v10, 1, v5);
    if ((_DWORD)result != 1)
    {
      type metadata accessor for _UIHostingView(0, v5, *(_QWORD *)(class metadata base offset for CustomPreviewResponder + v2 + 8), v14);
      specialized _UIHostingView.__allocating_init(rootView:)((uint64_t)v10, v15, v16, v17);
    }
    __break(1u);
  }
  return result;
}

double CustomPreviewResponder.previewSize.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v1 = *v0;
  v2 = (void *)CustomPreviewResponder.previewHost.getter();
  v4 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + class metadata base offset for CustomPreviewResponder), *(_QWORD *)(v1 + class metadata base offset for CustomPreviewResponder + 8), v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
  *(_QWORD *)&v5 = *(_OWORD *)&ViewRendererHost.idealSize()();

  return v5;
}

UIDragPreviewParameters __swiftcall CustomPreviewResponder.prepareHostForPreview()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3768]), sel_init);
  v2 = (void *)objc_opt_self();
  v3 = v1;
  v4 = objc_msgSend(v2, sel_clearColor);
  objc_msgSend(v3, sel_setBackgroundColor_, v4);

  objc_msgSend(v3, sel__setPreviewMode_, *(_QWORD *)(v0 + 296));
  static Update.ensure<A>(_:)();
  return (UIDragPreviewParameters)v3;
}

uint64_t closure #1 in CustomPreviewResponder.prepareHostForPreview()(uint64_t *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _OWORD v21[2];
  char v22;

  v3 = *a1;
  v4 = (void *)CustomPreviewResponder.previewHost.getter();
  v5 = CustomPreviewResponder.previewSize.getter();
  objc_msgSend(v4, sel_setFrame_, 0.0 - v5 * 0.5, 0.0 - v6 * 0.5, v5);

  v7 = (void *)CustomPreviewResponder.previewHost.getter();
  v15 = 0;
  LOBYTE(v16) = 1;
  v9 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + class metadata base offset for CustomPreviewResponder), *(_QWORD *)(v3 + class metadata base offset for CustomPreviewResponder + 8), v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v9);
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

  v10 = (void *)CustomPreviewResponder.previewHost.getter();
  swift_retain();

  v11 = ViewGraph.responderNode.getter();
  result = swift_release();
  if (v11)
  {
    type metadata accessor for ViewResponder();
    if (!swift_dynamicCastClass())
      return swift_release();
    v18 = 0u;
    v19 = 0u;
    v20 = 6;
    *(_QWORD *)&v21[0] = 2;
    hostingViewCoordinateSpace.getter();
    v17 = 1;
    dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
    outlined destroy of CoordinateSpace((uint64_t)&v15);
    v21[0] = v18;
    v21[1] = v19;
    v22 = v20;
    outlined init with take of Path.Storage((uint64_t)v21, (uint64_t)&v15);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)&v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v13 = Path.isEmpty.getter();
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    if ((v13 & 1) != 0)
    {
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      return swift_release();
    }
    type metadata accessor for UIBezierPath();
    outlined retain of TableColumnCustomizationID.Base((uint64_t)&v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v14 = UIBezierPath.init(_:)((uint64_t)v21);
    objc_msgSend(a2, sel_setVisiblePath_, v14, v15, v16);
    swift_release();

    return outlined retain of TableColumnCustomizationID.Base((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  }
  return result;
}

uint64_t CustomPreviewResponder.makePreview()@<X0>(uint64_t a1@<X8>)
{
  Class isa;
  uint64_t result;

  isa = CustomPreviewResponder.prepareHostForPreview()().super.super.isa;
  result = CustomPreviewResponder.previewHost.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = isa;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t CustomPreviewResponder.init(inputs:space:displayList:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = a1[2];
  v7 = *((_DWORD *)a1 + 20);
  v8 = *a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2
                                                                            + class metadata base offset for CustomPreviewResponder)
                                                                - 8)
                                                    + 56))(v2 + *(_QWORD *)(*(_QWORD *)v2 + class metadata base offset for CustomPreviewResponder + 16), 1, 1);
  *(_QWORD *)(v2 + *(_QWORD *)(class metadata base offset for CustomPreviewResponder + *(_QWORD *)v2 + 24)) = 0;
  *(_BYTE *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_DWORD *)(v2 + 304) = 0;
  *(_BYTE *)(v2 + 308) = 2;
  v11 = v8;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v9 = *(_OWORD *)(a1 + 5);
  v15 = *(_OWORD *)(a1 + 3);
  v16 = v9;
  v17 = *(_OWORD *)(a1 + 7);
  v18 = a1[9];
  v19 = v7;
  return UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v12, &v11);
}

void CustomPreviewResponder.__ivar_destroyer()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + *(_QWORD *)(*v0 + class metadata base offset for CustomPreviewResponder + 16);
  v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

}

_QWORD *CustomPreviewResponder.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  v0 = (_QWORD *)DefaultLayoutViewResponder.deinit();
  v1 = (char *)v0 + *(_QWORD *)(class metadata base offset for CustomPreviewResponder + *v0 + 16);
  v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t CustomPreviewResponder.__deallocating_deinit()
{
  return CustomPreviewResponder.__deallocating_deinit((void (*)(void))CustomPreviewResponder.deinit);
}

uint64_t type metadata accessor for CustomPreviewResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomPreviewResponder);
}

uint64_t type metadata completion function for CustomPreviewDropResponder()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall CustomPreviewDropResponder.prepareForPreview(contentTypes:defaultPreview:)(Swift::OpaquePointer contentTypes, SwiftUI::DefaultDragDropPreview_optional defaultPreview)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  v3 = *(void **)defaultPreview.value.base.super.super.isa;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 16)) = contentTypes._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 24);
  v6 = *(id *)((char *)v2 + v4);
  *(_QWORD *)((char *)v2 + v4) = v3;
  v5 = v3;

}

void CustomPreviewDropResponder.makePreview()(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD *);
  void *v26;
  id v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  Class isa;
  __int128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  char v44;
  _QWORD v45[4];
  char v46;
  _QWORD v47[6];

  v2 = v1;
  v42 = a1;
  v3 = *v1;
  v4 = class metadata base offset for CustomPreviewDropResponder;
  v5 = (uint64_t *)(*v1 + class metadata base offset for CustomPreviewDropResponder);
  v6 = *v5;
  v7 = type metadata accessor for Optional();
  v40 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v41 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v39 = (uint64_t)&v37 - v9;
  v11 = type metadata accessor for DropPreview(255, v6, v5[1], v10);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v37 - v15;
  v17 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v37 - v20;
  v22 = *(_QWORD *)((char *)v2 + v5[2]);
  v23 = 0uLL;
  if (!v22)
  {
    v35 = 0;
    v34 = 0uLL;
LABEL_11:
    v36 = v42;
    goto LABEL_12;
  }
  v24 = v4 + v3;
  v25 = *(void (**)(uint64_t, _QWORD *))((char *)v2 + *(_QWORD *)(v4 + v3 + 32));
  if (v25)
  {
    v38 = v21;
    v47[0] = *(_QWORD *)((char *)v2 + *(_QWORD *)(v24 + 24));
    v26 = (void *)v47[0];
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?((uint64_t)v25);
    v27 = v26;
    v25(v22, v47);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v25);

    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v11) != 1)
    {
      v28 = v38;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v38, v16, v11);
      v29 = *(_QWORD *)(class metadata base offset for CustomPreviewResponder + *v2 + 24);
      v30 = *(void **)((char *)v2 + v29);
      *(_QWORD *)((char *)v2 + v29) = 0;

      v31 = v39;
      DropPreview.view()(v11, v32, v39);
      specialized CustomPreviewResponder.preview.setter(v31);
      (*(void (**)(uint64_t, _QWORD))(v40 + 8))(v31, v41);
      isa = CustomPreviewResponder.prepareHostForPreview()().super.super.isa;
      v45[0] = CustomPreviewResponder.previewHost.getter();
      v45[1] = isa;
      v45[2] = 0;
      v45[3] = 0;
      v46 = 1;
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v45, (uint64_t)v43, &lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v45, (uint64_t)v47, &lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?);
      if (v47[0])
      {
        v41 = *(_OWORD *)&v28[*(int *)(v11 + 40)];
        (*(void (**)(char *, uint64_t))(v17 + 8))(v28, v11);
        v34 = v41;
        v44 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v28, v11);
        v34 = v43[1];
      }
      v23 = v43[0];
      v35 = v44;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v17 + 56))(v16, 1, 1, v11, (__n128)0);
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v35 = 0;
  v34 = 0uLL;
  v36 = v42;
  v23 = 0uLL;
LABEL_12:
  *(_OWORD *)v36 = v23;
  *(_OWORD *)(v36 + 16) = v34;
  *(_BYTE *)(v36 + 32) = v35;
}

uint64_t CustomPreviewDropResponder.init(inputs:space:displayList:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 80);
  v7 = *a2;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 16)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 24)) = 0;
  v8 = (_QWORD *)((char *)v2 + *(_QWORD *)(class metadata base offset for CustomPreviewDropResponder + *v2 + 32));
  *v8 = 0;
  v8[1] = 0;
  v11 = v7;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v9 = *(_OWORD *)(a1 + 40);
  v15 = *(_OWORD *)(a1 + 24);
  v16 = v9;
  v17 = *(_OWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = v6;
  return CustomPreviewResponder.init(inputs:space:displayList:)(&v12, &v11);
}

uint64_t CustomPreviewDropResponder.__ivar_destroyer()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v0 + *(_QWORD *)(class metadata base offset for CustomPreviewDropResponder + *v0 + 32)));
}

_QWORD *CustomPreviewDropResponder.deinit()
{
  _QWORD *v0;

  v0 = CustomPreviewResponder.deinit();
  swift_bridgeObjectRelease();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v0 + *(_QWORD *)(class metadata base offset for CustomPreviewDropResponder + *v0 + 32)));
  return v0;
}

uint64_t CustomPreviewDropResponder.__deallocating_deinit()
{
  return CustomPreviewResponder.__deallocating_deinit((void (*)(void))CustomPreviewDropResponder.deinit);
}

uint64_t CustomPreviewResponder.__deallocating_deinit(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustomPreviewDropResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomPreviewDropResponder);
}

void protocol witness for CustomDropPreviewProvider.prepareForPreview(contentTypes:defaultPreview:) in conformance CustomPreviewDropResponder<A>(Swift::OpaquePointer a1, SwiftUI::DefaultDragDropPreview_optional a2)
{
  CustomPreviewDropResponder.prepareForPreview(contentTypes:defaultPreview:)(a1, a2);
}

uint64_t specialized CustomPreviewResponder.preview.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  _BYTE v11[24];

  v3 = *v1 + class metadata base offset for CustomPreviewResponder;
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v11[-v7];
  v9 = (char *)v1 + *(_QWORD *)(v3 + 16);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v9, v4);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 24))(v9, a1, v4);
  swift_endAccess();
  CustomPreviewResponder.preview.didset((uint64_t)v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t partial apply for closure #1 in CustomPreviewResponder.prepareHostForPreview()()
{
  uint64_t v0;

  return closure #1 in CustomPreviewResponder.prepareHostForPreview()(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t type metadata accessor for UIBezierPath()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIBezierPath;
  if (!lazy cache variable for type metadata for UIBezierPath)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIViewSnapshotResponder.canPortal.getter@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in UIViewSnapshotResponder.canPortal.getter(a1);
}

uint64_t static ViewBuilder.buildBlock<each A>(_:)(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x1E0C80A78](a1, 1);
    v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v23 = 32;
    v24 = a2;
    do
    {
      if (a2 == 1)
        v25 = 0;
      else
        v25 = *(_DWORD *)(TupleTypeMetadata + v23);
      v27 = *v5++;
      v26 = v27;
      v28 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(&v8[v25], v28);
      v23 += 16;
      --v24;
    }
    while (v24);
    return TupleView.init(_:)();
  }
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v21);
  v8 = (char *)&v30 - v22;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)();
}

void protocol witness for PickerContent.body.getter in conformance _OnHoverPickerContent<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OnHoverPickerContent<A>, a1);
  PrimitivePickerContent.body.getter();
}

void PrimitivePickerContent.body.getter()
{
  specialized PickerContent.bodyError()();
}

uint64_t sub_1871BDC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

void protocol witness for PickerContent.body.getter in conformance _DisabledPickerContent<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DisabledPickerContent<A>, a1);
  PrimitivePickerContent.body.getter();
}

uint64_t PickerContent<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = v2;
  v6 = MEMORY[0x1E0C80A78](a1, v3);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v8, v6);
  return NestedDynamicProperties.init(wrappedValue:)((uint64_t)v8, a1, a2);
}

uint64_t _PickerContentBodyAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v27 - v7;
  v28 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v27 - v20;
  PreviewModifierViewModifier.modifier.getter(a1, v22, v23, (uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v3, v4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v3);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, AssociatedTypeWitness);
  v24 = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v17, v14, v24);
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v25(v17, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v14, v31);
  return ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
}

uint64_t PickerBuilder.Content.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return NestedDynamicProperties.init(wrappedValue:)(a1, a2, a3);
}

uint64_t PickerBuilder.Content.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v24 - v17;
  PickerBuilder.Content.content.getter(a1, v19, v20, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v9 + 56))(v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v14, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, AssociatedTypeWitness, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v18, AssociatedTypeWitness);
}

uint64_t PickerBuilder.Content.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for NestedDynamicProperties(0, v6, a2, a3);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, v4, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a4, v11, v6);
}

uint64_t PickerBuilder.ContentWithFooter.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t IsAuxiliaryContentTrait;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t AssociatedConformanceWitness;
  void (*v40)(char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  char v50;
  uint64_t v51[3];
  _QWORD v52[3];

  v45 = a2;
  v43 = a1[4];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E0CE6028], MEMORY[0x1E0CE6018], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v3 = type metadata accessor for ModifiedContent();
  v44 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v41 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v42 = (char *)&v37 - v8;
  v9 = a1[3];
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[6];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v37 = (char *)&v37 - v22;
  PickerBuilder.Content.content.getter((uint64_t)a1, v23, v24, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 56))(v9, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = v37;
  static ViewBuilder.buildExpression<A>(_:)(v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  v26 = v38;
  v40 = *(void (**)(char *, uint64_t))(v38 + 8);
  v40(v19, AssociatedTypeWitness);
  v27 = a1[7];
  v28 = (uint64_t)v41;
  View._untagged()();
  IsAuxiliaryContentTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>();
  v52[0] = v27;
  v52[1] = IsAuxiliaryContentTrait;
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v52);
  v31 = v42;
  static ViewBuilder.buildExpression<A>(_:)(v28, v3, v30);
  v32 = v44;
  v33 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v33(v28, v3);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v19, v25, AssociatedTypeWitness);
  v50 = 1;
  v51[0] = (uint64_t)v19;
  v51[1] = (uint64_t)&v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v28, v31, v3);
  v51[2] = v28;
  v49[0] = AssociatedTypeWitness;
  type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
  v49[1] = v34;
  v49[2] = v3;
  v46 = AssociatedConformanceWitness;
  v47 = lazy protocol witness table accessor for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>();
  v48 = v30;
  static ViewBuilder.buildBlock<each A>(_:)(v51, 3uLL, (uint64_t)v49);
  v33((uint64_t)v31, v3);
  v35 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v25, AssociatedTypeWitness);
  v33(v28, v3);
  return v35(v19, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E0CE6028], MEMORY[0x1E0CE6018], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E0CE6028], MEMORY[0x1E0CE6018], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
    v2 = v1;
    v3[0] = &protocol witness table for Divider;
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void PickerBuilder.ContentWithFooter.init(content:footer:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  NestedDynamicProperties.init(wrappedValue:)(a1, a2, a3);
  type metadata accessor for PickerBuilder.ContentWithFooter();
}

uint64_t sub_1871BE60C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 68), v2, v1);
}

uint64_t _ConditionalContent<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a4;
  v6 = *(_QWORD *)(a1 + 24);
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = a3;
  v32 = swift_getAssociatedTypeWitness();
  v33 = AssociatedTypeWitness;
  v12 = type metadata accessor for _ConditionalContent.Storage();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v29 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for _ConditionalContent.Storage();
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v29 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)&v29 - v24, v31, v21, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = v29;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v8, v25, v6);
    (*(void (**)(uint64_t))(v30 + 56))(v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v25, v10);
    (*(void (**)(uint64_t, uint64_t))(a2 + 56))(v10, a2);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v10);
  }
  swift_storeEnumTagMultiPayload();
  swift_checkMetadataState();
  swift_checkMetadataState();
  return _ConditionalContent.init(__storage:)((uint64_t)v15, v34);
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a4;
  v6 = *(_QWORD *)(a1 + 24);
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = a3;
  v32 = swift_getAssociatedTypeWitness();
  v33 = AssociatedTypeWitness;
  v12 = type metadata accessor for _ConditionalContent.Storage();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v29 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for _ConditionalContent.Storage();
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v29 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)&v29 - v24, v31, v21, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = v29;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v8, v25, v6);
    (*(void (**)(uint64_t))(v30 + 56))(v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v25, v10);
    (*(void (**)(uint64_t, uint64_t))(a2 + 56))(v10, a2);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v10);
  }
  swift_storeEnumTagMultiPayload();
  swift_checkMetadataState();
  swift_checkMetadataState();
  return _ConditionalContent.init(__storage:)((uint64_t)v15, v34);
}

void _ConditionalContent<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a1, v3);
  specialized PickerContent.bodyError()();
}

{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a1, v3);
  specialized TabContent.bodyError()();
}

uint64_t sub_1871BE8E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <> _ConditionalContent<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _ConditionalContent<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), a3);
}

void protocol witness for PickerContent.body.getter in conformance <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2)
{
  _ConditionalContent<>.body.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t Optional<A>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  _QWORD v7[8];

  v7[4] = *(_QWORD *)(a1 + 16);
  v7[5] = a2;
  v7[2] = a2;
  v7[3] = swift_getKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in Optional<A>._identifiedView.getter, (uint64_t)v7, MEMORY[0x1E0DEDCE8], AssociatedTypeWitness, v5, a3);
  return swift_release();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  _QWORD v7[6];

  v7[2] = *(_QWORD *)(a1 + 16);
  v7[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>._identifiedView.getter, (uint64_t)v7, MEMORY[0x1E0DEDCE8], AssociatedTypeWitness, v5, a3);
}

void Optional<A>.body.getter(uint64_t a1, uint64_t a2)
{
  Optional<A>.body.getter(a1, a2, (uint64_t)&protocol conformance descriptor for <A> A?);
}

{
  Optional<A>.body.getter(a1, a2, (uint64_t)&protocol conformance descriptor for <A> A?);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <A> A?@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional<A>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

void protocol witness for PickerContent.body.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  Optional<A>.body.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t ForEach<>.init<A>(_:id:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[1] = a6;
  v16[2] = a8;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  v16[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
}

{
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[1] = a6;
  v16[2] = a8;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  v16[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
}

{
  return ForEach<>.init<A>(_:id:liftedContent:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[1] = a6;
  v16[2] = a8;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  v16[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
}

uint64_t ForEach<>._identifiedView.getter(_QWORD *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  _QWORD *v13;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, _QWORD *, double))(v6 + 16))((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7, a1, v4);
  v9 = a1[3];
  v15[0] = a1[2];
  v8 = v15[0];
  v15[1] = v9;
  v10 = a1[5];
  v15[2] = a1[4];
  v15[3] = v10;
  v16 = a1[6];
  v11 = v16;
  v17 = a2;
  KeyPath = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v9;
  v13[4] = v10;
  v13[5] = v11;
  v13[6] = a2;
  v13[7] = KeyPath;
  swift_getAssociatedTypeWitness();
  return ForEach.init<A>(_:transform:)();
}

{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  _QWORD *v13;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, _QWORD *, double))(v6 + 16))((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7, a1, v4);
  v9 = a1[3];
  v15[0] = a1[2];
  v8 = v15[0];
  v15[1] = v9;
  v10 = a1[5];
  v15[2] = a1[4];
  v15[3] = v10;
  v16 = a1[6];
  v11 = v16;
  v17 = a2;
  KeyPath = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v9;
  v13[4] = v10;
  v13[5] = v11;
  v13[6] = a2;
  v13[7] = KeyPath;
  swift_getAssociatedTypeWitness();
  return ForEach.init<A>(_:transform:)();
}

void ForEach<>.body.getter(uint64_t a1, uint64_t a2)
{
  Optional<A>.body.getter(a1, a2, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
}

{
  Optional<A>.body.getter(a1, a2, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <> ForEach<A, B, C>(_QWORD *a1, uint64_t a2)
{
  return ForEach<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8));
}

void protocol witness for PickerContent.body.getter in conformance <> ForEach<A, B, C>(uint64_t a1, uint64_t a2)
{
  ForEach<>.body.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t ForEach<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[12];

  v22[2] = a2;
  v22[3] = a3;
  v22[1] = a9;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v20, v18);
  v22[4] = a4;
  v22[5] = a5;
  v22[6] = a6;
  v22[7] = a7;
  v22[8] = a8;
  v22[9] = a10;
  v22[10] = a11;
  v22[11] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
}

{
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[12];

  v22[2] = a2;
  v22[3] = a3;
  v22[1] = a9;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v20, v18);
  v22[4] = a4;
  v22[5] = a5;
  v22[6] = a6;
  v22[7] = a7;
  v22[8] = a8;
  v22[9] = a10;
  v22[10] = a11;
  v22[11] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
}

{
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = a2;
  v27 = a3;
  v25[1] = a9;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, a1, v21, v18);
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v32 = a8;
  v33 = a10;
  v34 = a11;
  KeyPath = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach<>.init<A>(_:id:content:)((uint64_t)v20, KeyPath, v26, v27, a4, a6, v23, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
}

uint64_t key path getter for Identifiable.id : <A, B, C><A1>A.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

__n128 ForEach<>.init<A>(_:content:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  _QWORD *v12;
  __n128 result;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  uint64_t v17;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  result = v15;
  *(_OWORD *)a6 = v14;
  *(__n128 *)(a6 + 16) = v15;
  *(_OWORD *)(a6 + 32) = v16;
  *(_QWORD *)(a6 + 48) = v17;
  return result;
}

{
  _QWORD *v12;
  __n128 result;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  uint64_t v17;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  type metadata accessor for Range<Int>();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  result = v15;
  *(_OWORD *)a6 = v14;
  *(__n128 *)(a6 + 16) = v15;
  *(_OWORD *)(a6 + 32) = v16;
  *(_QWORD *)(a6 + 48) = v17;
  return result;
}

{
  _QWORD *v12;
  __n128 result;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  uint64_t v17;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB848]);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
  ForEach.init(_:idGenerator:content:)();
  result = v15;
  *(_OWORD *)a6 = v14;
  *(__n128 *)(a6 + 16) = v15;
  *(_OWORD *)(a6 + 32) = v16;
  *(_QWORD *)(a6 + 48) = v17;
  return result;
}

uint64_t Group<A>.init<A>(content:)(uint64_t a1, uint64_t a2)
{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

uint64_t Group<A>._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 56))(*(_QWORD *)(a1 + 16));
}

{
  return (*(uint64_t (**)(_QWORD))(a2 + 56))(*(_QWORD *)(a1 + 16));
}

void Group<A>.body.getter(uint64_t a1, uint64_t a2)
{
  Optional<A>.body.getter(a1, a2, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
}

{
  Optional<A>.body.getter(a1, a2, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
}

void Optional<A>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  MEMORY[0x18D75FFDC](a3, a1, &v3);
  specialized PickerContent.bodyError()();
}

{
  uint64_t v3;

  v3 = a2;
  MEMORY[0x18D75FFDC](a3, a1, &v3);
  specialized TabContent.bodyError()();
}

uint64_t sub_1871BEFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  return Group<A>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8));
}

void protocol witness for PickerContent.body.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  Group<A>.body.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t Section<>._identifiedView.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  _QWORD v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1[3];
  v11 = a1[2];
  v12 = v7;
  v13 = a1[4];
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v10[2] = v11;
  v10[3] = v13;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a4;
  v10[7] = swift_getKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  mapSection<A, B, C, D>(_:transform:)(v5, (void (*)(uint64_t))partial apply for implicit closure #1 in Section<>._identifiedView.getter, (uint64_t)v10, v11, v7, AssociatedTypeWitness, v13, a5);
  return swift_release();
}

uint64_t mapSection<A, B, C, D>(_:transform:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  void (*v30)(uint64_t);
  uint64_t v31;

  v29[1] = a3;
  v30 = a2;
  v31 = a8;
  v13 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v24, a1, v26, v22);
  v27 = type metadata accessor for Section(0, a4, a5, a7);
  v30(a1 + *(int *)(v27 + 44));
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1 + *(int *)(v27 + 48), a7);
  return Section.init(header:content:footer:)((uint64_t)v24, (uint64_t)v19, (uint64_t)v15, a4, a6, a7, v31);
}

void Section<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[3];

  v4[0] = a2;
  v4[1] = a3;
  v4[2] = a4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a1, v4);
  specialized PickerContent.bodyError()();
}

uint64_t sub_1871BF25C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance <> Section<A, B, C>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Section<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 24), a3);
}

void protocol witness for PickerContent.body.getter in conformance <> Section<A, B, C>(uint64_t a1, uint64_t a2)
{
  Section<>.body.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 24));
}

uint64_t Section<>.init<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(double);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v9(v6);
  return Section.init(header:content:footer:)(v10, (uint64_t)v8, v11, MEMORY[0x1E0CE7C38], a3, MEMORY[0x1E0CE7C38], a4);
}

uint64_t Section<>.init<A>(content:header:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v16(v13);
  a1(v17);
  return Section.init(header:content:footer:)((uint64_t)v15, (uint64_t)v10, v18, a3, a4, MEMORY[0x1E0CE7C38], a5);
}

uint64_t Section<>.init<A, B>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  char v25;
  uint64_t v26;

  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18, v16);
  v24[0] = Text.init<A>(_:)();
  v24[1] = v19;
  v25 = v20 & 1;
  v26 = v21;
  a2(v24[0], v19, v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  return Section.init(header:content:footer:)((uint64_t)v24, (uint64_t)v11, v22, MEMORY[0x1E0CE6CF8], a3, MEMORY[0x1E0CE7C38], a5);
}

uint64_t Section<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = Text.init(_:tableName:bundle:comment:)();
  v16[1] = v10;
  v17 = v11 & 1;
  v18 = v12;
  a3();
  return Section.init(header:content:footer:)((uint64_t)v16, (uint64_t)v9, v13, MEMORY[0x1E0CE6CF8], a4, MEMORY[0x1E0CE7C38], a5);
}

uint64_t _TuplePickerContent._identifiedView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TupleView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t _TuplePickerContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TupleView();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v13);
  TupleView.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a4, v15, v10);
}

uint64_t protocol witness for PickerContent._identifiedView.getter in conformance _TuplePickerContent<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TupleView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

void protocol witness for PickerContent.body.getter in conformance _TuplePickerContent<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TuplePickerContent<A, B>, a1);
  PrimitivePickerContent.body.getter();
}

void protocol witness for PickerContent.body.getter in conformance _KeyboardShortcutPickerContent<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _KeyboardShortcutPickerContent<A>, a1);
  PrimitivePickerContent.body.getter();
}

void specialized PickerContent.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000187BD9B70;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1871BF8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 56))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_1871BF8D4()
{
  return 16;
}

__n128 sub_1871BF8E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for implicit closure #1 in Optional<A>._identifiedView.getter()
{
  return swift_getAtKeyPath();
}

uint64_t sub_1871BF914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 56))(*(_QWORD *)(a3 + a2 - 32));
}

uint64_t sub_1871BF948()
{
  return 48;
}

__n128 sub_1871BF954(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1871BF968()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ForEach<>._identifiedView.getter()
{
  return swift_getAtKeyPath();
}

uint64_t sub_1871BF998()
{
  return 56;
}

__n128 sub_1871BF9A4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1871BF9C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1871BFA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 16) + 56))(*(_QWORD *)(a3 + a2 - 40));
}

uint64_t sub_1871BFA3C()
{
  return 48;
}

__n128 sub_1871BFA48(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in _PickerContentBodyAdaptor<A>()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in PickerBuilder<A>.Content<A1>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in PickerBuilder<A>.ContentWithFooter<A1, B1>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a1, &v4);
}

uint64_t associated type witness table accessor for PickerContent.SelectionValue : Hashable in <> _ConditionalContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <> _ConditionalContent<A, B>(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = swift_getAssociatedConformanceWitness();
  v3[1] = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], a1, v3);
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> A?, a1, &v4);
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <A> A?(uint64_t a1)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], a1, &AssociatedConformanceWitness);
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <> ForEach<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, a1, &v4);
}

uint64_t associated type witness table accessor for PickerContent.SelectionValue : Hashable in <> ForEach<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <> ForEach<A, B, C>(uint64_t a1)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], a1, &AssociatedConformanceWitness);
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a1, &v4);
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <A> Group<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in <> Section<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a3 - 24);
  v5 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v6 = v3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a1, &v5);
}

uint64_t associated type witness table accessor for PickerContent.SelectionValue : Hashable in <> Section<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in <> Section<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _TuplePickerContent<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TuplePickerContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for PickerContent.Body : PickerContent in _TuplePickerContent<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void associated type witness table accessor for PickerContent._IdentifiedView : View in _TuplePickerContent<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t default associated conformance accessor for PickerContent.PickerContent.SelectionValue: Hashable()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

void default associated conformance accessor for PickerContent.PickerContent._IdentifiedView: View()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t dispatch thunk of PickerContent._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PickerContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t getEnumTagSinglePayload for _PickerContentBodyAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871BFFEC + 4 * byte_187C133F0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _PickerContentBodyAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _PickerContentBodyAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PickerContentBodyAdaptor);
}

uint64_t type metadata accessor for PickerBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PickerBuilder);
}

uint64_t initializeWithTake for PickerBuilder.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for PickerBuilder.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 40))();
  return a1;
}

void type metadata accessor for PickerBuilder.Content()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for PickerBuilder.ContentWithFooter()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PickerBuilder.ContentWithFooter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871C03E4 + 4 * byte_187C133FE[v17 - 1]))();
}

void storeEnumTagSinglePayload for PickerBuilder.ContentWithFooter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void sub_1871C06C4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1871C06B0);
}

void sub_1871C06D4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1871C06B0);
}

void sub_1871C06DC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1871C06B0);
}

void type metadata accessor for PickerBuilder.ContentWithFooter()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for _TuplePickerContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PickerBuilder.Content(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t getEnumTagSinglePayload for PickerBuilder.Content(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871C0880 + 4 * byte_187C13410[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PickerBuilder.Content(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _TuplePickerContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TuplePickerContent);
}

uint64_t sub_1871C0A8C()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

void sub_1871C0AF0()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E0CE6028], MEMORY[0x1E0CE6018], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1871C0BAC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  _QWORD v8[3];

  v1 = *a1;
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Section(255, v1, AssociatedTypeWitness, v2);
  v8[0] = v3;
  v8[1] = swift_getAssociatedConformanceWitness();
  v8[2] = v4;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v6, v8);
}

uint64_t closure #1 in View.onTest(_:handler:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = *a1;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
    v6 = result;
  }
  v9 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v6 + 24);
  if (v9 >= v8 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v6);
    v6 = result;
  }
  *(_QWORD *)(v6 + 16) = v9 + 1;
  v10 = v6 + 16 * v9;
  *(_QWORD *)(v10 + 32) = a2;
  *(_QWORD *)(v10 + 40) = a3;
  *a1 = v6;
  return result;
}

uint64_t sub_1871C0D30()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.onTest(_:handler:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in View.onTest(_:handler:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1871C0D5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<SceneBridge.ValidTestCasesPreferenceKey>, (uint64_t)&type metadata for SceneBridge.ValidTestCasesPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.ValidTestCasesPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for OnTestViewModifier;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<SceneBridge.ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<SceneBridge.ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<SceneBridge.ValidTestCasesPreferenceKey>, (uint64_t)&type metadata for SceneBridge.ValidTestCasesPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.ValidTestCasesPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ValidTestCasesPreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t assignWithTake for OnTestViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnTestViewModifier()
{
  return &protocol witness table for OnTestViewModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance OnTestViewModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1871C0F54(uint64_t a1)
{
  _BYTE v2[48];

  outlined init with copy of PPTTestCase?(a1, (uint64_t)v2);
  return EnvironmentValues.testCase.setter((uint64_t)v2);
}

uint64_t outlined init with take of PPTTestCase(__n128 *a1, uint64_t a2)
{
  initializeWithTake for PPTTestCase(a2, a1);
  return a2;
}

uint64_t outlined destroy of PPTTestCase(uint64_t a1)
{
  destroy for PPTTestCase();
  return a1;
}

uint64_t outlined init with copy of PPTTestCase(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PPTTestCase(a2, a1);
  return a2;
}

uint64_t sub_1871C1038()
{
  swift_release();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnTestEffect.updateValue()()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + 32);
}

void *type metadata accessor for OnTestEffect()
{
  return &unk_1E1AB2958;
}

uint64_t AnyDynamicItem.makeView<A>(uniqueId:container:inputs:adaptor:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v9 = *((_DWORD *)a3 + 2);
  v10 = a3[2];
  v11 = *((_DWORD *)a3 + 20);
  v14 = *a3;
  v15 = v9;
  v16 = v10;
  v12 = *(_OWORD *)(a3 + 5);
  v17 = *(_OWORD *)(a3 + 3);
  v18 = v12;
  v19 = *(_OWORD *)(a3 + 7);
  v20 = a3[9];
  v21 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 112))(a1, a2, &v14, a8, a8, a9);
}

uint64_t makeStorage<A, B>(content:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t StorageVisitor1;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v30 = a5;
  v33 = a2;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v11;
  StorageVisitor1 = type metadata accessor for MakeStorageVisitor1(0, v12, v11, v12);
  v29 = *(_QWORD *)(StorageVisitor1 - 8);
  MEMORY[0x1E0C80A78](StorageVisitor1, v14);
  v16 = (char *)&v28 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  v32 = a1;
  v23((char *)&v28 - v24, a1, a3, v21);
  if (!swift_dynamicCast())
  {
    v34 = a3;
    v35 = a4;
    v36 = v30;
    v37 = v31;
    type metadata accessor for IdentifiedItemStorage();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v33, a4);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v10, a4);
  *(_QWORD *)&v16[*(int *)(StorageVisitor1 + 36)] = 0;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeStorageVisitor1<A>, StorageVisitor1);
  result = AnyView.visitContent<A>(_:)();
  v26 = *(_QWORD *)&v16[*(int *)(StorageVisitor1 + 36)];
  if (v26)
  {
    v27 = *(void (**)(char *, uint64_t))(v29 + 8);
    swift_retain();
    v27(v16, StorageVisitor1);
    swift_release();
    return v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AnyDynamicItem.matchesIdentity(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v10[5];
  _QWORD v11[5];

  if (a4 == a1 || ((*(uint64_t (**)(void))(*(_QWORD *)a4 + 104))() & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 80))();
    if (v7 == (*(uint64_t (**)(void))(*(_QWORD *)a1 + 80))())
    {
      v8 = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a4 + 88))(v11);
      (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*(_QWORD *)a1 + 88))(v10, v8);
      v6 = MEMORY[0x18D75E284](v11, v10);
      outlined destroy of AnyHashable((uint64_t)v10);
      outlined destroy of AnyHashable((uint64_t)v11);
    }
    else
    {
      v6 = 0;
    }
  }
  return v6 & 1;
}

uint64_t protocol witness for DynamicContainerItem.needsTransitions.getter in conformance AnyDynamicItem()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))() & 1;
}

double protocol witness for DynamicContainerItem.zIndex.getter in conformance AnyDynamicItem()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t protocol witness for DynamicContainerItem.matchesIdentity(of:) in conformance AnyDynamicItem(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return AnyDynamicItem.matchesIdentity(of:)(*a1, a2, a3, *v3);
}

BOOL protocol witness for DynamicContainerItem.canBeReused(by:) in conformance AnyDynamicItem(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 80))();
  return v3 == (*(uint64_t (**)(void))(*(_QWORD *)v2 + 80))();
}

uint64_t protocol witness for DynamicContainerItem.list.getter in conformance AnyDynamicItem()
{
  unint64_t v0;

  v0 = DynamicContainerItem.list.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

void DynamicStorage.contentType.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void DynamicStorage.identifier.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void DynamicStorage.needsTransitions.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void DynamicStorage.matchesIdentity(of:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void DynamicStorage.makeView<A>(uniqueId:container:inputs:adaptor:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void DynamicStorage.visitContent<A>(_:phase:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for DynamicStorage()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for IdentifiedItemStorage()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t IdentifiedItemStorage.__allocating_init(content:identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  v5 = *(_QWORD *)v4;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 136) - 8) + 32))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 168), a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 144) - 8) + 32))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 176), a2);
  return v4;
}

uint64_t IdentifiedItemStorage.contentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 136);
}

uint64_t IdentifiedItemStorage.identifier.getter()
{
  return _convertToAnyHashable<A>(_:)();
}

uint64_t IdentifiedItemStorage.matchesIdentity(of:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

void IdentifiedItemStorage.makeView<A>(uniqueId:container:inputs:adaptor:)()
{
  type metadata accessor for AnyDynamicChild();
}

uint64_t sub_1871C18F8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  _QWORD v15[6];
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v15[3] = a1;
  v15[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyDynamicChild<A, B>, a1);
  v7 = type metadata accessor for Attribute();
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v13 = *(_OWORD *)(v1 + 56);
  v14 = *(_OWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 72);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v15, a1, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v11);
  swift_release();
  _GraphValue.init(_:)();
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v8;
  v20 = v9;
  v21 = v14;
  v22 = v13;
  v23 = v10;
  v24 = v2;
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t IdentifiedItemStorage.visitContent<A>(_:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(a4 + 8))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 168), *(_QWORD *)(*(_QWORD *)v4 + 136), *(_QWORD *)(*(_QWORD *)v4 + 152), a3);
}

uint64_t IdentifiedItemStorage.__ivar_destroyer()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 168));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 176));
}

uint64_t IdentifiedItemStorage.__deallocating_deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 168));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 176));
  return swift_deallocClassInstance();
}

void type metadata accessor for IdentifiedItemStorage()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for IdentifiedTransitionStorage()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_initClassMetadata2();
        if (!result)
          return 0;
      }
    }
  }
  return result;
}

uint64_t *IdentifiedTransitionStorage.__allocating_init(content:identifier:transition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return IdentifiedTransitionStorage.init(content:identifier:transition:)(a1, a2, a3);
}

uint64_t *IdentifiedTransitionStorage.init(content:identifier:transition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*v3 + 136) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 184), a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 144) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 192), a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 152) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 200), a3);
  return v3;
}

uint64_t IdentifiedTransitionStorage.contentType.getter()
{
  type metadata accessor for ApplyTransitionModifier();
  return type metadata accessor for ModifiedContent();
}

uint64_t IdentifiedTransitionStorage.identifier.getter()
{
  return _convertToAnyHashable<A>(_:)();
}

uint64_t IdentifiedTransitionStorage.matchesIdentity(of:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

void IdentifiedTransitionStorage.makeView<A>(uniqueId:container:inputs:adaptor:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  v4[2] = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  v2 = type metadata accessor for ApplyTransitionModifier();
  v3 = type metadata accessor for ModifiedContent();
  v4[0] = *(_QWORD *)(v1 + 160);
  v4[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5950], v2);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
  type metadata accessor for AnyDynamicChild();
}

uint64_t sub_1871C1E54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  _QWORD v15[5];
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v15[3] = a1;
  v15[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyDynamicChild<A, B>, a1);
  v5 = type metadata accessor for Attribute();
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v11 = *(_OWORD *)(v1 + 56);
  v12 = *(_OWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 72);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v15, a1, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v9);
  swift_release();
  _GraphValue.init(_:)();
  v16 = v3;
  v17 = v13;
  v18 = v2;
  v19 = v6;
  v20 = v7;
  v21 = v12;
  v22 = v11;
  v23 = v8;
  v24 = v14;
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t IdentifiedTransitionStorage.visitContent<A>(_:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v19 = a4;
  v20 = a1;
  v21 = a3;
  v5 = *v4;
  v6 = type metadata accessor for ApplyTransitionModifier();
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v18 - v10;
  v12 = *(_QWORD *)(v5 + 160);
  Transition.apply<A>(content:phase:)();
  v13 = v19;
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8);
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5950], v6);
  v22[0] = v12;
  v22[1] = v15;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v22);
  v14(v11, v7, v16, v21, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t IdentifiedTransitionStorage.__ivar_destroyer()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 184));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 192));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 152) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 200));
}

uint64_t *IdentifiedTransitionStorage.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 184));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 192));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 152) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 200));
  return v0;
}

uint64_t IdentifiedTransitionStorage.__deallocating_deinit()
{
  IdentifiedTransitionStorage.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for IdentifiedTransitionStorage()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t MakeStorageVisitor1.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = makeStorage<A, B>(content:identifier:)(a1, v4, a3, *(_QWORD *)(a2 + 16), a4);
  v7 = *(int *)(a2 + 36);
  result = swift_release();
  *(_QWORD *)(v4 + v7) = v6;
  return result;
}

uint64_t protocol witness for ViewVisitor.visit<A>(_:) in conformance MakeStorageVisitor1<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MakeStorageVisitor1.visit<A>(_:)(a1, a4, a2, a3);
}

uint64_t AnyDynamicChild.info.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_QWORD *)(Value + 32);
  v5 = *(_BYTE *)(Value + 40);
  v6 = *(_DWORD *)(Value + 44);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(Value + 16);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t AnyDynamicChild.updateValue()(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v2 = (_QWORD *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  v24[0] = *(_OWORD *)v1;
  v24[1] = v4;
  v25 = *(_QWORD *)(v1 + 32);
  AnyDynamicChild.info.getter((uint64_t)&v20);
  v5 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v5 + 16))
    return swift_bridgeObjectRelease();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(DWORD1(v24[0]));
  if ((v7 & 1) == 0)
    return swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  AnyDynamicChild.info.getter((uint64_t)&v20);
  v9 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 0xC000000000000001) == 0)
  {
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v10 = *(_QWORD *)(v9 + 8 * v8 + 32);
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_19;
  }
  v10 = MEMORY[0x18D75E3BC](v8, v9);
LABEL_7:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v11 = *(unsigned __int8 *)(v10 + 84);
  result = swift_release();
  if (v11 != 3)
  {
    AnyDynamicChild.info.getter((uint64_t)&v20);
    v9 = v20;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v9 & 0xC000000000000001) == 0)
    {
      if ((v8 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v8 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
        goto LABEL_12;
      }
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
LABEL_19:
    MEMORY[0x18D75E3BC](v8, v9);
LABEL_12:
    swift_bridgeObjectRelease();
    v13 = a1[3];
    v14 = a1[5];
    FocusStoreLocation.id.getter();
    swift_retain();
    swift_release();
    DynamicContainer._ItemInfo.item.getter();
    swift_release();
    v15 = v20;
    v16 = v21;
    v17 = v22;
    v18 = v23;
    swift_retain();
    outlined release of AnyDynamicChild<A, B>((uint64_t)v24);
    v2[1] = v15;
    v2[2] = v16;
    v2[3] = v17;
    v2[4] = v18;
    result = AGGraphGetCurrentAttribute();
    if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    {
      v19 = a1[4];
      v20 = a1[2];
      v21 = v13;
      v22 = v19;
      v23 = v14;
      type metadata accessor for AnyDynamicChild.UpdateVisitor();
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t AnyDynamicChild.UpdateVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1, a1);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  v12 = a3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)partial apply for closure #1 in RuleContext.value.setter, (uint64_t)v11, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a3);
}

uint64_t protocol witness for ViewVisitor.visit<A>(_:) in conformance AnyDynamicChild<A, B>.UpdateVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyDynamicChild.UpdateVisitor.visit<A>(_:)(a1, a4, a2);
}

uint64_t AnyDynamicChild.matchesIdentifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v21[6];
  __int128 v22;
  __int128 v23;
  _BYTE v24[32];
  _QWORD v25[4];

  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v21 - v12;
  outlined init with take of AnyDynamicItem?(v4 + 8, (uint64_t)v24);
  v14 = outlined init with take of AnyDynamicItem?((uint64_t)v24, (uint64_t)v25);
  if (v25[0])
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v25[0] + 88))(v21, v14);
    AnyHashable.base.getter();
    outlined destroy of AnyHashable((uint64_t)v21);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
  v15 = swift_dynamicCast();
  v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v13, v15 ^ 1u, 1, a3);
  MEMORY[0x1E0C80A78](v16, v17);
  v18 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v21[-8] = *(_OWORD *)(a2 + 16);
  v21[-6] = a3;
  *(_OWORD *)&v21[-5] = v18;
  v21[-3] = a4;
  v21[-2] = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnyDynamicChild.matchesIdentifier<A>(_:), (uint64_t)&v21[-10], MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], v19, (uint64_t)v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v21[0] & 1;
}

uint64_t protocol witness for IdentifierProvider.matchesIdentifier<A>(_:) in conformance AnyDynamicChild<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyDynamicChild.matchesIdentifier<A>(_:)(a1, a4, a2, a3) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyDynamicChild<A, B>()
{
  return specialized AnyDynamicChild.description.getter();
}

uint64_t specialized AnyDynamicChild.description.getter()
{
  return _typeName(_:qualified:)();
}

double specialized AnyDynamicItem.init<A, B>(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  makeStorage<A, B>(content:identifier:)(a1, a2, a3, a4, a5);
  return 0.0;
}

uint64_t type metadata accessor for MakeStorageVisitor1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MakeStorageVisitor1);
}

void type metadata accessor for AnyDynamicChild()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t initializeWithCopy for AnyDynamicChild(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyDynamicChild(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for AnyDynamicChild(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyDynamicChild(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyDynamicChild(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for MakeStorageVisitor1()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MakeStorageVisitor1(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1871C2AF4 + 4 * byte_187C138E0[v10]))();
  }
}

void storeEnumTagSinglePayload for MakeStorageVisitor1(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1871C2C74()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1871C2CF8);
}

void sub_1871C2C7C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1871C2C84);
  JUMPOUT(0x1871C2CF8);
}

void sub_1871C2CCC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871C2CF8);
}

void sub_1871C2CD4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871C2CF8);
}

uint64_t sub_1871C2CDC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x1871C2CE8);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x1871C2CF8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t initializeWithCopy for AnyDynamicItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyDynamicItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for AnyDynamicItem(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyDynamicItem(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyDynamicItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyDynamicItem()
{
  return &type metadata for AnyDynamicItem;
}

void base witness table accessor for _AttributeBody in AnyDynamicChild<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined release of AnyDynamicChild<A, B>(uint64_t a1)
{
  swift_release();
  return a1;
}

void type metadata accessor for AnyDynamicChild.UpdateVisitor()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined init with take of AnyDynamicItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for AnyDynamicItem?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AnyDynamicChild.matchesIdentifier<A>(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #1 in RuleContext.value.setter()
{
  return AGGraphSetOutputValue();
}

uint64_t protocol witness for SegmentedControlStyle.body(configuration:) in conformance AnySegmentedControlStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 80))();
  *a1 = result;
  return result;
}

void AnyStyleBox.body(configuration:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AnyStyleBox()
{
  return objc_opt_self();
}

uint64_t StyleBox.body(configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  double v7;

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v7);
  swift_getAssociatedConformanceWitness();
  return AnyView.init<A>(_:)();
}

uint64_t type metadata accessor for StyleBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleBox);
}

ValueMetadata *type metadata accessor for AnySegmentedControlStyle()
{
  return &type metadata for AnySegmentedControlStyle;
}

uint64_t associated type witness table accessor for SegmentedControlStyle.Body : View in AnySegmentedControlStyle()
{
  return MEMORY[0x1E0CE7508];
}

uint64_t FocusedValue.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t *v8;
  char v9;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  KeyPath = (uint64_t *)swift_getKeyPath();
  result = FocusedValue.init(_:)(KeyPath, v4, v5, &v8);
  v7 = v9;
  *(_QWORD *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t sub_1871C3198@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = FocusedValues.subscript.getter(*(_QWORD *)(a2 + a1 - 16), a2, a3, (uint64_t)&v6);
  *a4 = v6;
  return result;
}

uint64_t sub_1871C31F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *a1;
  return specialized FocusedValues.subscript.setter((uint64_t)&v6, v4);
}

uint64_t sub_1871C3230()
{
  return 16;
}

uint64_t sub_1871C323C()
{
  return 1;
}

Swift::Int sub_1871C3244(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(_QWORD *)(a2 + a1 - 16));
}

__n128 sub_1871C3250(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t View.focusedValue<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *KeyPath;
  _QWORD v13[2];

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3);
  v13[1] = a5;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v13[0] = a1;
  View.focusedValue<A>(_:_:)(KeyPath, (uint64_t)v13, a2, a4, a6);
  return swift_release();
}

uint64_t static Observable.focusedValueKey.getter(uint64_t a1)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  return swift_getKeyPath();
}

uint64_t sub_1871C332C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return FocusedValues.subscript.getter(*(_QWORD *)(a2 + a1 - 16), a2, a3, a4);
}

uint64_t sub_1871C3378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized FocusedValues.subscript.setter(a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1871C33A0()
{
  return 16;
}

uint64_t sub_1871C33AC()
{
  return 1;
}

__n128 sub_1871C33B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1871C33C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for Optional();
  v5 = type metadata accessor for FocusedValueModifier(255, v2, v3, v4);
  type metadata accessor for ResponderViewModifier(255, v5, (uint64_t)&protocol witness table for FocusedValueModifier<A>, v6);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = &protocol witness table for ResponderViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9);
}

_QWORD *initializeBufferWithCopyOfBuffer for CubicGradientProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CubicGradientProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CubicGradientProvider(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for CubicGradientProvider()
{
  return &unk_1E1AD6CE8;
}

uint64_t interpolationsEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  float *v5;
  BOOL v6;
  uint64_t result;

  if (!a1)
    return a2 == 0;
  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2)
    return 1;
  v3 = (float *)(a1 + 44);
  v4 = v2 - 1;
  v5 = (float *)(a2 + 44);
LABEL_7:
  if (*(v3 - 3) == *(v5 - 3) && *(v3 - 2) == *(v5 - 2) && *(v3 - 1) == *(v5 - 1))
  {
    v6 = *v3 == *v5;
    result = v6;
    if (v4)
      goto LABEL_6;
  }
  else
  {
    while (1)
    {
      v6 = 0;
      result = 0;
      if (!v4)
        break;
LABEL_6:
      --v4;
      v3 += 4;
      v5 += 4;
      if (v6)
        goto LABEL_7;
    }
  }
  return result;
}

void CubicGradientProvider.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt32 *v10;
  Swift::UInt32 v11;
  Swift::UInt32 v12;
  Swift::UInt32 v13;
  Swift::UInt32 v14;
  Swift::UInt32 v15;
  Swift::UInt32 v16;
  Swift::UInt32 v17;

  v7 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = 0;
    do
    {
      ++v8;
      swift_retain();
      dispatch thunk of AnyColorBox.hash(into:)();
      swift_release();
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
  }
  if (a3)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, a3);
    if (!a4)
      return;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (!a4)
      return;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v9)
  {
    v10 = (Swift::UInt32 *)(a4 + 44);
    do
    {
      v11 = *(v10 - 2);
      v12 = *(v10 - 1);
      v13 = *v10;
      if ((*(v10 - 3) & 0x7FFFFFFF) != 0)
        v14 = *(v10 - 3);
      else
        v14 = 0;
      Hasher._combine(_:)(v14);
      if ((v11 & 0x7FFFFFFF) != 0)
        v15 = v11;
      else
        v15 = 0;
      Hasher._combine(_:)(v15);
      if ((v12 & 0x7FFFFFFF) != 0)
        v16 = v12;
      else
        v16 = 0;
      Hasher._combine(_:)(v16);
      if ((v13 & 0x7FFFFFFF) != 0)
        v17 = v13;
      else
        v17 = 0;
      Hasher._combine(_:)(v17);
      v10 += 4;
      --v9;
    }
    while (v9);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CubicGradientProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  CubicGradientProvider.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CubicGradientProvider(uint64_t a1)
{
  uint64_t *v1;

  CubicGradientProvider.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CubicGradientProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  CubicGradientProvider.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CubicGradientProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    if (v2)
    {
      if (v4 && specialized static Array<A>.== infix(_:_:)(v2, v4))
        return interpolationsEqual(_:_:)(v3, v5);
    }
    else if (!v4)
    {
      return interpolationsEqual(_:_:)(v3, v5);
    }
  }
  return 0;
}

void closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x18D760234](v4);
  if (v5)
  {
    v7 = (void *)v5;
    MEMORY[0x1E0C80A78](v5, v6);
    static Update.dispatchImmediately<A>(_:)();

  }
  else
  {
    a1();
  }
}

id PlatformViewCoordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformViewCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void one-time initialization function for observerActions()
{
  static UIKitUpdateCycle.observerActions = (_UNKNOWN *)MEMORY[0x1E0DEE9D8];
}

id one-time initialization function for defaultUseSetNeedsLayout()
{
  id result;

  result = closure #1 in variable initialization expression of static UIKitUpdateCycle.defaultUseSetNeedsLayout();
  static UIKitUpdateCycle.defaultUseSetNeedsLayout = result & 1;
  return result;
}

id closure #1 in variable initialization expression of static UIKitUpdateCycle.defaultUseSetNeedsLayout()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  _OWORD v6[2];

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)MEMORY[0x18D75CC88](0xD00000000000001BLL, 0x8000000187BD9D10);
  v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v6);
    v3 = (void *)MEMORY[0x18D75CC88](0xD00000000000001BLL, 0x8000000187BD9D10);
    v4 = objc_msgSend(v0, sel_BOOLForKey_, v3);

  }
  else
  {
    memset(v6, 0, sizeof(v6));

    outlined destroy of Any?((uint64_t)v6);
    return 0;
  }
  return v4;
}

uint64_t closure #1 in static UIKitUpdateCycle.addPreCommitObserver(_:)()
{
  void *v0;
  uint64_t result;
  char *v2;
  uint64_t v3;
  char *v4;
  void (*v5)(uint64_t);
  uint64_t v6;

  v0 = (void *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (one-time initialization token for observerActions != -1)
      swift_once();
    result = swift_beginAccess();
    v2 = (char *)static UIKitUpdateCycle.observerActions;
    v3 = *((_QWORD *)static UIKitUpdateCycle.observerActions + 2);
    if (!v3)
      break;
    static UIKitUpdateCycle.observerActions = v0;
    MEMORY[0x18D75B908](result);
    v4 = v2 + 40;
    do
    {
      v5 = (void (*)(uint64_t))*((_QWORD *)v4 - 1);
      v6 = swift_retain();
      v5(v6);
      swift_release();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    static Update.end()();
  }
  return result;
}

uint64_t specialized static UIKitUpdateCycle.addPreCommitObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  uint64_t inserted;
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD v13[6];

  result = _UIUpdateCycleEnabled();
  if ((_DWORD)result)
  {
    if (!static UIKitUpdateCycle.item)
    {
      v13[4] = closure #1 in static UIKitUpdateCycle.addPreCommitObserver(_:);
      v13[5] = 0;
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 1107296256;
      v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Double, @unowned UnsafePointer<_UIUpdateTiming>) -> ();
      v13[3] = &block_descriptor_3;
      v5 = _Block_copy(v13);
      inserted = _UIUpdateSequenceInsertItem();
      _Block_release(v5);
      static UIKitUpdateCycle.item = inserted;
    }
    if (one-time initialization token for observerActions != -1)
      swift_once();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = a2;
    swift_beginAccess();
    v8 = static UIKitUpdateCycle.observerActions;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static UIKitUpdateCycle.observerActions = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      static UIKitUpdateCycle.observerActions = v8;
    }
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
      static UIKitUpdateCycle.observerActions = v8;
    }
    v8[2] = v11 + 1;
    v12 = &v8[2 * v11];
    v12[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v12[5] = v7;
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v15;
  void *v16;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_UIUpdateCycleEnabled())
    return specialized static UIKitUpdateCycle.addPreCommitObserver(_:)(a1, a2);
  type metadata accessor for OS_dispatch_queue();
  v15 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_14;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  type metadata accessor for [DispatchWorkItemFlags]();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18D75D930](0, v13, v8, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1871C3F38()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t SharingPickerSource.isPresented.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BOOL8 v5;
  _OWORD v7[8];
  uint64_t v8[9];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[136];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  outlined init with take of SharingPickerSource(v0, (uint64_t)v14);
  v1 = _s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v14);
  v2 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v14);
  if (v1 == 1)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(_BYTE *)(v2 + 16) & 1;
    *(_QWORD *)&v15 = *(_QWORD *)v2;
    *((_QWORD *)&v15 + 1) = v3;
    LOBYTE(v16) = v4;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](v7);
    return LOBYTE(v7[0]);
  }
  else
  {
    v19 = *(_OWORD *)(v2 + 64);
    v20 = *(_OWORD *)(v2 + 80);
    v21 = *(_OWORD *)(v2 + 96);
    v22 = *(_OWORD *)(v2 + 112);
    v15 = *(_OWORD *)v2;
    v16 = *(_OWORD *)(v2 + 16);
    v17 = *(_OWORD *)(v2 + 32);
    v18 = *(_OWORD *)(v2 + 48);
    v7[4] = v19;
    v7[5] = v20;
    v7[6] = v21;
    v7[7] = v22;
    v7[0] = v15;
    v7[1] = v16;
    v7[2] = v17;
    v7[3] = v18;
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyIdentifiableShareConfiguration?>, &lazy cache variable for type metadata for AnyIdentifiableShareConfiguration?, (uint64_t)&type metadata for AnyIdentifiableShareConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](v8);
    v5 = v9 != 1;
    if (v9 != 1)
      outlined consume of AnyIdentifiableShareConfiguration?(v8[0], v8[1], v8[2], v8[3], v8[4], v8[5], v8[6], v8[7], v8[8], v9, v10, v11, v12, v13, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  }
  return v5;
}

uint64_t *View.sharingPickerModifier(source:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD v8[9];
  _BYTE v9[136];
  _BYTE v10[136];
  _OWORD v11[8];
  __int128 v12;

  outlined init with take of SharingPickerSource((uint64_t)a1, (uint64_t)v9);
  outlined init with take of SharingPickerSource((uint64_t)v9, (uint64_t)v10);
  outlined retain of SharingPickerSource(a1);
  static UnitRect.one.getter();
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type UnitRect and conformance UnitRect();
  v6 = Anchor.Source.init<A>(anchor:)();
  outlined init with take of SharingPickerSource((uint64_t)v10, (uint64_t)v11);
  *((_QWORD *)&v12 + 1) = v6;
  v8[6] = v11[6];
  v8[7] = v11[7];
  v8[8] = v12;
  v8[2] = v11[2];
  v8[3] = v11[3];
  v8[4] = v11[4];
  v8[5] = v11[5];
  v8[0] = v11[0];
  v8[1] = v11[1];
  MEMORY[0x18D75B4AC](v8, a2, &type metadata for SharingActivityPickerModifier, a3);
  return outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>((uint64_t *)v11);
}

void View.sharingPicker<A, B, C, D>(isPresented:link:)()
{
  swift_retain();
  swift_retain();
  specialized AnyIdentifiableShareConfiguration.init<A, B, C, D>(_:)();
}

uint64_t sub_1871C425C()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[17];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v21 = v0;
  v22 = v2;
  v23 = v9;
  *(_OWORD *)((char *)v1 + 24) = v12;
  *(_OWORD *)((char *)v1 + 40) = v13;
  v24 = v14;
  v25 = v15;
  *(_OWORD *)((char *)v1 + 72) = v16;
  *(_OWORD *)((char *)v1 + 88) = v17;
  *(_OWORD *)((char *)v1 + 104) = v18;
  *(_OWORD *)((char *)v1 + 120) = v19;
  v4 = v1[7];
  *(_OWORD *)(v3 - 144) = v1[6];
  *(_OWORD *)(v3 - 128) = v4;
  *(_QWORD *)(v3 - 112) = v26;
  v5 = v1[1];
  *(_OWORD *)(v3 - 240) = *v1;
  *(_OWORD *)(v3 - 224) = v5;
  v6 = v1[3];
  *(_OWORD *)(v3 - 208) = v1[2];
  *(_OWORD *)(v3 - 192) = v6;
  v7 = v1[5];
  *(_OWORD *)(v3 - 176) = v1[4];
  *(_OWORD *)(v3 - 160) = v7;
  _s7SwiftUI19SharingPickerSourceOWOi0_(v3 - 240);
  outlined init with take of SharingPickerSource(v3 - 240, (uint64_t)v20);
  View.sharingPickerModifier(source:)(v20, v11, v10);
  return outlined release of (Binding<Bool>, AnyIdentifiableShareConfiguration)((uint64_t)&v21);
}

void View.sharingPicker<A, B, C>(isPresented:item:subject:message:preview:)()
{
  type metadata accessor for SharePreview();
}

void sub_1871C43C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v15 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&a9 - v16;
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v23 + 16))(v22, v9[3], v10, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 16))(v17, v9[1], a1);
  AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)((uint64_t)v22, v9[8], v9[9], v9[10], v9[11], v9[7], v9[6], v9[5], v9[18], (uint64_t)v17, v10, v11, v9[2], v9[4], v13, v12);
}

uint64_t sub_1871C449C()
{
  uint64_t v0;
  char v1;
  _OWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v10 = *(_BYTE *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v9 - 232) = 0;
  *(_QWORD *)(v9 - 224) = v11;
  *(_QWORD *)(v9 - 216) = *(_QWORD *)(v0 + 152);
  *(_BYTE *)(v9 - 208) = *(_DWORD *)(v0 + 108);
  v12 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)((char *)v2 + 136) = *(_OWORD *)(v0 + 304);
  *(_OWORD *)((char *)v2 + 152) = v12;
  *(_BYTE *)(v9 - 168) = v10;
  v13 = *(_OWORD *)((char *)v2 + 56);
  v2[11] = *(_OWORD *)((char *)v2 + 40);
  v2[12] = v13;
  v14 = *(_OWORD *)((char *)v2 + 88);
  v2[13] = *(_OWORD *)((char *)v2 + 72);
  v2[14] = v14;
  v15 = *(_OWORD *)((char *)v2 + 184);
  v16 = *(_OWORD *)((char *)v2 + 216);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)((char *)v2 + 200);
  *(_OWORD *)(v0 + 272) = v16;
  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v9 - 104);
  v17 = *(_OWORD *)((char *)v2 + 120);
  v18 = *(_OWORD *)((char *)v2 + 152);
  *(_OWORD *)(v0 + 192) = *(_OWORD *)((char *)v2 + 136);
  *(_OWORD *)(v0 + 208) = v18;
  *(_OWORD *)(v0 + 224) = *(_OWORD *)((char *)v2 + 168);
  *(_OWORD *)(v0 + 240) = v15;
  *(_OWORD *)(v0 + 160) = *(_OWORD *)((char *)v2 + 104);
  *(_OWORD *)(v0 + 176) = v17;
  outlined copy of Text?(v6, v5, v4, v3);
  outlined copy of Text?(v7, v8, v1, *(_QWORD *)(v0 + 144));
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v0 + 160, *(_QWORD *)(v0 + 120), &unk_1E1B03AE0, *(_QWORD *)(v0 + 112));
  return outlined release of UnidentifiedSharingPickerModifier(v9 - 232);
}

uint64_t outlined release of UnidentifiedSharingPickerModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 128);
  v9 = *(_BYTE *)(a1 + 64);
  swift_release();
  swift_release();
  outlined consume of AnyShareConfiguration.Storage(v2, v3, v4, v5, v9);
  outlined consume of Text?(v11, v6, v7, v8);
  outlined consume of Text?(v15, v14, v13, v12);
  return a1;
}

uint64_t View.sharingPicker(isPresented:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[8];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v33 = a9;
  *((_QWORD *)&v29 + 1) = a7;
  v30 = a8;
  v28 = a5;
  *(_QWORD *)&v29 = a6;
  v27 = a3;
  v25 = a1;
  v26 = a2;
  v31 = a13;
  v32 = a14;
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, a4, v15, v18);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v21 + 56) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v21 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v20, v15);
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = v25;
  *(_QWORD *)&v37 = v26;
  BYTE8(v37) = v27;
  v38 = v21;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  LOBYTE(v42) = 0;
  *((_QWORD *)&v42 + 1) = v28;
  v43 = v29;
  *(_QWORD *)&v44 = v30;
  *((_QWORD *)&v44 + 1) = a10;
  v45 = a11;
  v46 = a12;
  v34[6] = v44;
  v34[7] = a11;
  v35 = a12;
  v34[2] = (unint64_t)v21;
  v34[3] = 0u;
  v34[4] = v42;
  v34[5] = v29;
  v34[0] = v36;
  v34[1] = v37;
  outlined copy of Text?(v28, v29, SBYTE8(v29), v30);
  outlined copy of Text?(a10, a11, SBYTE8(a11), a12);
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v34, v31, &unk_1E1B03AE0, v32);
  return outlined release of UnidentifiedSharingPickerModifier((uint64_t)&v36);
}

uint64_t sub_1871C4820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier;
  if (!lazy protocol witness table cache variable for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UnidentifiedSharingPickerModifier, &unk_1E1B03AE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier);
  }
  return result;
}

uint64_t sub_1871C48BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t assignWithCopy for PresentSharingPickerAction(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  _OWORD *v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = (_QWORD *)(a1 + 128);
  v5 = (__int128 *)(a1 + 16);
  v7 = (uint64_t *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 128);
  v8 = (__int128 *)(a2 + 16);
  if (*(_QWORD *)(a1 + 128) != 1)
  {
    if (v6 == 1)
    {
      outlined destroy of SharingPickerHostModifier.Model(a1 + 16);
      v15 = *(_OWORD *)(a2 + 64);
      v17 = *v8;
      v16 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v15;
      *v5 = v17;
      *(_OWORD *)(a1 + 32) = v16;
      v18 = *(_OWORD *)(a2 + 128);
      v20 = *(_OWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 96) = v19;
      return a1;
    }
    v26 = *(_QWORD *)(a2 + 88);
    if (*(_QWORD *)(a1 + 88) == 1)
    {
      if (v26 == 1)
      {
        v27 = *v8;
        v28 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v28;
        *v5 = v27;
        v29 = *(_OWORD *)(a2 + 64);
        v30 = *(_OWORD *)(a2 + 80);
        v31 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v31;
        *(_OWORD *)(a1 + 64) = v29;
        *(_OWORD *)(a1 + 80) = v30;
        goto LABEL_39;
      }
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v48 = *(_QWORD *)(a2 + 24);
      v49 = *(_QWORD *)(a2 + 32);
      v50 = *(_QWORD *)(a2 + 40);
      v51 = *(_QWORD *)(a2 + 48);
      v52 = *(_BYTE *)(a2 + 56);
      outlined copy of AnyShareConfiguration.Storage(v48, v49, v50, v51, v52);
      *(_QWORD *)(a1 + 24) = v48;
      *(_QWORD *)(a1 + 32) = v49;
      *(_QWORD *)(a1 + 40) = v50;
      *(_QWORD *)(a1 + 48) = v51;
      *(_BYTE *)(a1 + 56) = v52;
      if (*(_QWORD *)(a2 + 88))
      {
        v53 = *(_QWORD *)(a2 + 64);
        v54 = *(_QWORD *)(a2 + 72);
        v55 = *(_BYTE *)(a2 + 80);
        outlined copy of Text.Storage(v53, v54, v55);
        *(_QWORD *)(a1 + 64) = v53;
        *(_QWORD *)(a1 + 72) = v54;
        *(_BYTE *)(a1 + 80) = v55;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(a2 + 120))
          goto LABEL_27;
      }
      else
      {
        v78 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v78;
        if (!*(_QWORD *)(a2 + 120))
        {
LABEL_27:
          v79 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v79;
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
    if (v26 == 1)
    {
      outlined destroy of AnyIdentifiableShareConfiguration(a1 + 16);
      v44 = *(_OWORD *)(a2 + 32);
      v43 = *(_OWORD *)(a2 + 48);
      *v5 = *v8;
      *(_OWORD *)(a1 + 32) = v44;
      *(_OWORD *)(a1 + 48) = v43;
      v45 = *(_OWORD *)(a2 + 112);
      v47 = *(_OWORD *)(a2 + 64);
      v46 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v45;
      *(_OWORD *)(a1 + 64) = v47;
      *(_OWORD *)(a1 + 80) = v46;
      goto LABEL_39;
    }
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v56 = *(_QWORD *)(a2 + 24);
    v57 = *(_QWORD *)(a2 + 32);
    v58 = *(_QWORD *)(a2 + 40);
    v59 = *(_QWORD *)(a2 + 48);
    v60 = *(_BYTE *)(a2 + 56);
    outlined copy of AnyShareConfiguration.Storage(v56, v57, v58, v59, v60);
    v61 = *(_QWORD *)(a1 + 24);
    v62 = *(_QWORD *)(a1 + 32);
    v63 = *(_QWORD *)(a1 + 40);
    v64 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = v56;
    *(_QWORD *)(a1 + 32) = v57;
    *(_QWORD *)(a1 + 40) = v58;
    *(_QWORD *)(a1 + 48) = v59;
    v65 = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v60;
    outlined consume of AnyShareConfiguration.Storage(v61, v62, v63, v64, v65);
    v66 = (_OWORD *)(a1 + 64);
    v67 = (_OWORD *)(a2 + 64);
    v68 = *(_QWORD *)(a2 + 88);
    if (*(_QWORD *)(a1 + 88))
    {
      if (v68)
      {
        v69 = *(_QWORD *)(a2 + 64);
        v70 = *(_QWORD *)(a2 + 72);
        v71 = *(_BYTE *)(a2 + 80);
        outlined copy of Text.Storage(v69, v70, v71);
        v72 = *(_QWORD *)(a1 + 64);
        v73 = *(_QWORD *)(a1 + 72);
        v74 = *(_BYTE *)(a1 + 80);
        *(_QWORD *)(a1 + 64) = v69;
        *(_QWORD *)(a1 + 72) = v70;
        *(_BYTE *)(a1 + 80) = v71;
        outlined consume of Text.Storage(v72, v73, v74);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 64);
        v83 = *(_OWORD *)(a2 + 80);
        *v66 = *v67;
        *(_OWORD *)(a1 + 80) = v83;
      }
    }
    else if (v68)
    {
      v80 = *(_QWORD *)(a2 + 64);
      v81 = *(_QWORD *)(a2 + 72);
      v82 = *(_BYTE *)(a2 + 80);
      outlined copy of Text.Storage(v80, v81, v82);
      *(_QWORD *)(a1 + 64) = v80;
      *(_QWORD *)(a1 + 72) = v81;
      *(_BYTE *)(a1 + 80) = v82;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
    }
    else
    {
      v84 = *(_OWORD *)(a2 + 80);
      *v66 = *v67;
      *(_OWORD *)(a1 + 80) = v84;
    }
    v85 = (_OWORD *)(a1 + 96);
    v86 = (_OWORD *)(a2 + 96);
    v87 = *(_QWORD *)(a2 + 120);
    if (*(_QWORD *)(a1 + 120))
    {
      if (v87)
      {
        v88 = *(_QWORD *)(a2 + 96);
        v89 = *(_QWORD *)(a2 + 104);
        v90 = *(_BYTE *)(a2 + 112);
        outlined copy of Text.Storage(v88, v89, v90);
        v91 = *(_QWORD *)(a1 + 96);
        v92 = *(_QWORD *)(a1 + 104);
        v93 = *(_BYTE *)(a1 + 112);
        *(_QWORD *)(a1 + 96) = v88;
        *(_QWORD *)(a1 + 104) = v89;
        *(_BYTE *)(a1 + 112) = v90;
        outlined consume of Text.Storage(v91, v92, v93);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 96);
        v97 = *(_OWORD *)(a2 + 112);
        *v85 = *v86;
        *(_OWORD *)(a1 + 112) = v97;
      }
    }
    else
    {
      if (v87)
      {
LABEL_36:
        v94 = *(_QWORD *)(a2 + 96);
        v95 = *(_QWORD *)(a2 + 104);
        v96 = *(_BYTE *)(a2 + 112);
        outlined copy of Text.Storage(v94, v95, v96);
        *(_QWORD *)(a1 + 96) = v94;
        *(_QWORD *)(a1 + 104) = v95;
        *(_BYTE *)(a1 + 112) = v96;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        swift_bridgeObjectRetain();
        goto LABEL_39;
      }
      v98 = *(_OWORD *)(a2 + 112);
      *v85 = *v86;
      *(_OWORD *)(a1 + 112) = v98;
    }
LABEL_39:
    v77 = *v7;
    if (*v4)
    {
      if (v77)
      {
        v99 = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 128) = v77;
        *(_QWORD *)(a1 + 136) = v99;
        swift_retain();
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v77)
    {
      goto LABEL_43;
    }
LABEL_45:
    *(_OWORD *)v4 = *(_OWORD *)v7;
    return a1;
  }
  if (v6 != 1)
  {
    if (*(_QWORD *)(a2 + 88) == 1)
    {
      v21 = *v8;
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v22;
      *v5 = v21;
      v23 = *(_OWORD *)(a2 + 64);
      v24 = *(_OWORD *)(a2 + 80);
      v25 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v25;
      *(_OWORD *)(a1 + 64) = v23;
      *(_OWORD *)(a1 + 80) = v24;
      goto LABEL_24;
    }
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v32 = *(_QWORD *)(a2 + 24);
    v33 = *(_QWORD *)(a2 + 32);
    v34 = *(_QWORD *)(a2 + 40);
    v35 = *(_QWORD *)(a2 + 48);
    v36 = *(_BYTE *)(a2 + 56);
    outlined copy of AnyShareConfiguration.Storage(v32, v33, v34, v35, v36);
    *(_QWORD *)(a1 + 24) = v32;
    *(_QWORD *)(a1 + 32) = v33;
    *(_QWORD *)(a1 + 40) = v34;
    *(_QWORD *)(a1 + 48) = v35;
    *(_BYTE *)(a1 + 56) = v36;
    if (*(_QWORD *)(a2 + 88))
    {
      v37 = *(_QWORD *)(a2 + 64);
      v38 = *(_QWORD *)(a2 + 72);
      v39 = *(_BYTE *)(a2 + 80);
      outlined copy of Text.Storage(v37, v38, v39);
      *(_QWORD *)(a1 + 64) = v37;
      *(_QWORD *)(a1 + 72) = v38;
      *(_BYTE *)(a1 + 80) = v39;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(a2 + 120))
      {
LABEL_13:
        v40 = *(_QWORD *)(a2 + 96);
        v41 = *(_QWORD *)(a2 + 104);
        v42 = *(_BYTE *)(a2 + 112);
        outlined copy of Text.Storage(v40, v41, v42);
        *(_QWORD *)(a1 + 96) = v40;
        *(_QWORD *)(a1 + 104) = v41;
        *(_BYTE *)(a1 + 112) = v42;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      }
    }
    else
    {
      v75 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v75;
      if (*(_QWORD *)(a2 + 120))
        goto LABEL_13;
    }
    v76 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v76;
LABEL_24:
    v77 = *v7;
    if (!*v7)
      goto LABEL_45;
LABEL_43:
    v100 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v77;
    *(_QWORD *)(a1 + 136) = v100;
    swift_retain();
    return a1;
  }
  v9 = *v8;
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *v5 = v9;
  *(_OWORD *)(a1 + 32) = v10;
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  return a1;
}

uint64_t outlined destroy of AnyIdentifiableShareConfiguration(uint64_t a1)
{
  destroy for AnyIdentifiableShareConfiguration(a1);
  return a1;
}

uint64_t outlined destroy of SharingPickerHostModifier.Model(uint64_t a1)
{
  destroy for SharingPickerHostModifier.Model(a1);
  return a1;
}

uint64_t assignWithTake for PresentSharingPickerAction(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = (_QWORD *)(a1 + 128);
  v5 = (_OWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 128);
  v7 = (_OWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 128) == 1)
    goto LABEL_4;
  if (v6 != 1)
  {
    if (*(_QWORD *)(a1 + 88) == 1)
    {
LABEL_9:
      v14 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v14;
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      v15 = *(_OWORD *)(a2 + 32);
      *v5 = *v7;
      *(_OWORD *)(a1 + 32) = v15;
      v16 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v16;
      goto LABEL_10;
    }
    v13 = *(_QWORD *)(a2 + 88);
    if (v13 == 1)
    {
      outlined destroy of AnyIdentifiableShareConfiguration(a1 + 16);
      goto LABEL_9;
    }
    v19 = *(_QWORD *)(a2 + 48);
    v20 = *(_BYTE *)(a2 + 56);
    v21 = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 48);
    v25 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 48) = v19;
    v26 = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v20;
    outlined consume of AnyShareConfiguration.Storage(v21, v22, v23, v24, v26);
    if (*(_QWORD *)(a1 + 88))
    {
      if (v13)
      {
        v27 = *(_BYTE *)(a2 + 80);
        v28 = *(_QWORD *)(a1 + 64);
        v29 = *(_QWORD *)(a1 + 72);
        v30 = *(_BYTE *)(a1 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_BYTE *)(a1 + 80) = v27;
        outlined consume of Text.Storage(v28, v29, v30);
        *(_QWORD *)(a1 + 88) = v13;
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      outlined destroy of Text(a1 + 64);
    }
    v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
LABEL_22:
    if (*(_QWORD *)(a1 + 120))
    {
      v32 = *(_QWORD *)(a2 + 120);
      if (v32)
      {
        v33 = *(_BYTE *)(a2 + 112);
        v34 = *(_QWORD *)(a1 + 96);
        v35 = *(_QWORD *)(a1 + 104);
        v36 = *(_BYTE *)(a1 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_BYTE *)(a1 + 112) = v33;
        outlined consume of Text.Storage(v34, v35, v36);
        *(_QWORD *)(a1 + 120) = v32;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Text(a1 + 96);
    }
    v37 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v37;
LABEL_10:
    if (*v4)
    {
      if (v6)
      {
        v17 = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 128) = v6;
        *(_QWORD *)(a1 + 136) = v17;
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v6)
    {
      v18 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v6;
      *(_QWORD *)(a1 + 136) = v18;
      return a1;
    }
    *(_OWORD *)v4 = *(_OWORD *)(a2 + 128);
    return a1;
  }
  outlined destroy of SharingPickerHostModifier.Model(a1 + 16);
LABEL_4:
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 32);
  *v5 = *v7;
  *(_OWORD *)(a1 + 32) = v10;
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  return a1;
}

void destroy for SharingPickerHostModifier.Model(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 != 1)
  {
    outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    if (v2)
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 104))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
      swift_bridgeObjectRelease();
    }
  }
  if (*(_QWORD *)(a1 + 112))
    swift_release();
}

uint64_t initializeWithCopy for SharingPickerHostModifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 72);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_BYTE *)(a2 + 40);
  outlined copy of AnyShareConfiguration.Storage(v8, v9, v10, v11, v12);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v12;
  if (v4)
  {
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_BYTE *)(a2 + 64);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v14;
    *(_BYTE *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v4;
    swift_bridgeObjectRetain();
    v16 = *(_QWORD *)(a2 + 104);
    if (v16)
    {
LABEL_5:
      v17 = *(_QWORD *)(a2 + 80);
      v18 = *(_QWORD *)(a2 + 88);
      v19 = *(_BYTE *)(a2 + 96);
      outlined copy of Text.Storage(v17, v18, v19);
      *(_QWORD *)(a1 + 80) = v17;
      *(_QWORD *)(a1 + 88) = v18;
      *(_BYTE *)(a1 + 96) = v19;
      *(_QWORD *)(a1 + 104) = v16;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v20;
    v16 = *(_QWORD *)(a2 + 104);
    if (v16)
      goto LABEL_5;
  }
  v21 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v21;
LABEL_8:
  v22 = *(_QWORD *)(a2 + 112);
  if (v22)
  {
    v23 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v22;
    *(_QWORD *)(a1 + 120) = v23;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  return a1;
}

uint64_t assignWithCopy for SharingPickerHostModifier.Model(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = *((_QWORD *)a2 + 9);
  if (*(_QWORD *)(a1 + 72) == 1)
  {
    if (v4 == 1)
    {
      v5 = *a2;
      v6 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v5;
      v7 = a2[3];
      v8 = a2[4];
      v9 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
      goto LABEL_25;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v15 = *((_QWORD *)a2 + 1);
    v16 = *((_QWORD *)a2 + 2);
    v17 = *((_QWORD *)a2 + 3);
    v18 = *((_QWORD *)a2 + 4);
    v19 = *((_BYTE *)a2 + 40);
    outlined copy of AnyShareConfiguration.Storage(v15, v16, v17, v18, v19);
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v16;
    *(_QWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 32) = v18;
    *(_BYTE *)(a1 + 40) = v19;
    if (*((_QWORD *)a2 + 9))
    {
      v20 = *((_QWORD *)a2 + 6);
      v21 = *((_QWORD *)a2 + 7);
      v22 = *((_BYTE *)a2 + 64);
      outlined copy of Text.Storage(v20, v21, v22);
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v21;
      *(_BYTE *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      if (!*((_QWORD *)a2 + 13))
        goto LABEL_13;
    }
    else
    {
      v42 = a2[4];
      *(_OWORD *)(a1 + 48) = a2[3];
      *(_OWORD *)(a1 + 64) = v42;
      if (!*((_QWORD *)a2 + 13))
      {
LABEL_13:
        v43 = a2[6];
        *(_OWORD *)(a1 + 80) = a2[5];
        *(_OWORD *)(a1 + 96) = v43;
        goto LABEL_25;
      }
    }
    goto LABEL_22;
  }
  if (v4 == 1)
  {
    outlined destroy of AnyIdentifiableShareConfiguration(a1);
    v11 = a2[1];
    v10 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v10;
    v12 = a2[6];
    v14 = a2[3];
    v13 = a2[4];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v12;
    *(_OWORD *)(a1 + 48) = v14;
    *(_OWORD *)(a1 + 64) = v13;
    goto LABEL_25;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v23 = *((_QWORD *)a2 + 1);
  v24 = *((_QWORD *)a2 + 2);
  v25 = *((_QWORD *)a2 + 3);
  v26 = *((_QWORD *)a2 + 4);
  v27 = *((_BYTE *)a2 + 40);
  outlined copy of AnyShareConfiguration.Storage(v23, v24, v25, v26, v27);
  v28 = *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *(_QWORD *)(a1 + 24);
  v31 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = v24;
  *(_QWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 32) = v26;
  v32 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v27;
  outlined consume of AnyShareConfiguration.Storage(v28, v29, v30, v31, v32);
  v33 = (_OWORD *)(a1 + 48);
  v34 = a2 + 3;
  v35 = *((_QWORD *)a2 + 9);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v35)
    {
      v36 = *((_QWORD *)a2 + 6);
      v37 = *((_QWORD *)a2 + 7);
      v38 = *((_BYTE *)a2 + 64);
      outlined copy of Text.Storage(v36, v37, v38);
      v39 = *(_QWORD *)(a1 + 48);
      v40 = *(_QWORD *)(a1 + 56);
      v41 = *(_BYTE *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v36;
      *(_QWORD *)(a1 + 56) = v37;
      *(_BYTE *)(a1 + 64) = v38;
      outlined consume of Text.Storage(v39, v40, v41);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 48);
      v47 = a2[4];
      *v33 = *v34;
      *(_OWORD *)(a1 + 64) = v47;
    }
  }
  else if (v35)
  {
    v44 = *((_QWORD *)a2 + 6);
    v45 = *((_QWORD *)a2 + 7);
    v46 = *((_BYTE *)a2 + 64);
    outlined copy of Text.Storage(v44, v45, v46);
    *(_QWORD *)(a1 + 48) = v44;
    *(_QWORD *)(a1 + 56) = v45;
    *(_BYTE *)(a1 + 64) = v46;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    swift_bridgeObjectRetain();
  }
  else
  {
    v48 = a2[4];
    *v33 = *v34;
    *(_OWORD *)(a1 + 64) = v48;
  }
  v49 = (_OWORD *)(a1 + 80);
  v50 = a2 + 5;
  v51 = *((_QWORD *)a2 + 13);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v51)
    {
      v52 = *((_QWORD *)a2 + 10);
      v53 = *((_QWORD *)a2 + 11);
      v54 = *((_BYTE *)a2 + 96);
      outlined copy of Text.Storage(v52, v53, v54);
      v55 = *(_QWORD *)(a1 + 80);
      v56 = *(_QWORD *)(a1 + 88);
      v57 = *(_BYTE *)(a1 + 96);
      *(_QWORD *)(a1 + 80) = v52;
      *(_QWORD *)(a1 + 88) = v53;
      *(_BYTE *)(a1 + 96) = v54;
      outlined consume of Text.Storage(v55, v56, v57);
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 80);
      v61 = a2[6];
      *v49 = *v50;
      *(_OWORD *)(a1 + 96) = v61;
    }
  }
  else
  {
    if (v51)
    {
LABEL_22:
      v58 = *((_QWORD *)a2 + 10);
      v59 = *((_QWORD *)a2 + 11);
      v60 = *((_BYTE *)a2 + 96);
      outlined copy of Text.Storage(v58, v59, v60);
      *(_QWORD *)(a1 + 80) = v58;
      *(_QWORD *)(a1 + 88) = v59;
      *(_BYTE *)(a1 + 96) = v60;
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
      swift_bridgeObjectRetain();
      goto LABEL_25;
    }
    v62 = a2[6];
    *v49 = *v50;
    *(_OWORD *)(a1 + 96) = v62;
  }
LABEL_25:
  v63 = *((_QWORD *)a2 + 14);
  if (!*(_QWORD *)(a1 + 112))
  {
    if (v63)
    {
      v65 = *((_QWORD *)a2 + 15);
      *(_QWORD *)(a1 + 112) = v63;
      *(_QWORD *)(a1 + 120) = v65;
      swift_retain();
      return a1;
    }
LABEL_31:
    *(_OWORD *)(a1 + 112) = a2[7];
    return a1;
  }
  if (!v63)
  {
    swift_release();
    goto LABEL_31;
  }
  v64 = *((_QWORD *)a2 + 15);
  *(_QWORD *)(a1 + 112) = v63;
  *(_QWORD *)(a1 + 120) = v64;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SharingPickerHostModifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;

  if (*(_QWORD *)(a1 + 72) == 1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 72);
  if (v4 == 1)
  {
    outlined destroy of AnyIdentifiableShareConfiguration(a1);
LABEL_4:
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_BYTE *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 32) = v11;
  v18 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v12;
  outlined consume of AnyShareConfiguration.Storage(v13, v14, v15, v16, v18);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v4)
    {
      v19 = *(_BYTE *)(a2 + 64);
      v20 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_BYTE *)(a1 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 64) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(_QWORD *)(a1 + 72) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    outlined destroy of Text(a1 + 48);
  }
  v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v24;
LABEL_18:
  if (*(_QWORD *)(a1 + 104))
  {
    v25 = *(_QWORD *)(a2 + 104);
    if (v25)
    {
      v26 = *(_BYTE *)(a2 + 96);
      v27 = *(_QWORD *)(a1 + 80);
      v28 = *(_QWORD *)(a1 + 88);
      v29 = *(_BYTE *)(a1 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 96) = v26;
      outlined consume of Text.Storage(v27, v28, v29);
      *(_QWORD *)(a1 + 104) = v25;
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    outlined destroy of Text(a1 + 80);
  }
  v30 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v30;
LABEL_5:
  v8 = *(_QWORD *)(a2 + 112);
  if (!*(_QWORD *)(a1 + 112))
  {
    if (v8)
    {
      v10 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v8;
      *(_QWORD *)(a1 + 120) = v10;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = v9;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingPickerHostModifier.Model(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingPickerHostModifier.Model(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
      *(_QWORD *)(result + 112) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingPickerHostModifier.Model()
{
  return &type metadata for SharingPickerHostModifier.Model;
}

uint64_t assignWithCopy for SharingPickerHostModifier(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _OWORD *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  _OWORD *v83;
  _OWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v4 = (_QWORD *)(a1 + 112);
  v6 = (uint64_t *)(a2 + 7);
  v5 = *((_QWORD *)a2 + 14);
  if (*(_QWORD *)(a1 + 112) != 1)
  {
    if (v5 == 1)
    {
      outlined destroy of SharingPickerHostModifier.Model(a1);
      v13 = a2[3];
      v15 = *a2;
      v14 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v13;
      *(_OWORD *)a1 = v15;
      *(_OWORD *)(a1 + 16) = v14;
      v16 = a2[7];
      v18 = a2[4];
      v17 = a2[5];
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_OWORD *)(a1 + 112) = v16;
      *(_OWORD *)(a1 + 64) = v18;
      *(_OWORD *)(a1 + 80) = v17;
      goto LABEL_46;
    }
    v24 = *((_QWORD *)a2 + 9);
    if (*(_QWORD *)(a1 + 72) == 1)
    {
      if (v24 == 1)
      {
        v25 = *a2;
        v26 = a2[2];
        *(_OWORD *)(a1 + 16) = a2[1];
        *(_OWORD *)(a1 + 32) = v26;
        *(_OWORD *)a1 = v25;
        v27 = a2[3];
        v28 = a2[4];
        v29 = a2[6];
        *(_OWORD *)(a1 + 80) = a2[5];
        *(_OWORD *)(a1 + 96) = v29;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v28;
        goto LABEL_39;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v46 = *((_QWORD *)a2 + 1);
      v47 = *((_QWORD *)a2 + 2);
      v48 = *((_QWORD *)a2 + 3);
      v49 = *((_QWORD *)a2 + 4);
      v50 = *((_BYTE *)a2 + 40);
      outlined copy of AnyShareConfiguration.Storage(v46, v47, v48, v49, v50);
      *(_QWORD *)(a1 + 8) = v46;
      *(_QWORD *)(a1 + 16) = v47;
      *(_QWORD *)(a1 + 24) = v48;
      *(_QWORD *)(a1 + 32) = v49;
      *(_BYTE *)(a1 + 40) = v50;
      if (*((_QWORD *)a2 + 9))
      {
        v51 = *((_QWORD *)a2 + 6);
        v52 = *((_QWORD *)a2 + 7);
        v53 = *((_BYTE *)a2 + 64);
        outlined copy of Text.Storage(v51, v52, v53);
        *(_QWORD *)(a1 + 48) = v51;
        *(_QWORD *)(a1 + 56) = v52;
        *(_BYTE *)(a1 + 64) = v53;
        *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
        swift_bridgeObjectRetain();
        if (!*((_QWORD *)a2 + 13))
          goto LABEL_27;
      }
      else
      {
        v76 = a2[4];
        *(_OWORD *)(a1 + 48) = a2[3];
        *(_OWORD *)(a1 + 64) = v76;
        if (!*((_QWORD *)a2 + 13))
        {
LABEL_27:
          v77 = a2[6];
          *(_OWORD *)(a1 + 80) = a2[5];
          *(_OWORD *)(a1 + 96) = v77;
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
    if (v24 == 1)
    {
      outlined destroy of AnyIdentifiableShareConfiguration(a1);
      v42 = a2[1];
      v41 = a2[2];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v42;
      *(_OWORD *)(a1 + 32) = v41;
      v43 = a2[6];
      v45 = a2[3];
      v44 = a2[4];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v43;
      *(_OWORD *)(a1 + 48) = v45;
      *(_OWORD *)(a1 + 64) = v44;
      goto LABEL_39;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v54 = *((_QWORD *)a2 + 1);
    v55 = *((_QWORD *)a2 + 2);
    v56 = *((_QWORD *)a2 + 3);
    v57 = *((_QWORD *)a2 + 4);
    v58 = *((_BYTE *)a2 + 40);
    outlined copy of AnyShareConfiguration.Storage(v54, v55, v56, v57, v58);
    v59 = *(_QWORD *)(a1 + 8);
    v60 = *(_QWORD *)(a1 + 16);
    v61 = *(_QWORD *)(a1 + 24);
    v62 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 8) = v54;
    *(_QWORD *)(a1 + 16) = v55;
    *(_QWORD *)(a1 + 24) = v56;
    *(_QWORD *)(a1 + 32) = v57;
    v63 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v58;
    outlined consume of AnyShareConfiguration.Storage(v59, v60, v61, v62, v63);
    v64 = (_OWORD *)(a1 + 48);
    v65 = a2 + 3;
    v66 = *((_QWORD *)a2 + 9);
    if (*(_QWORD *)(a1 + 72))
    {
      if (v66)
      {
        v67 = *((_QWORD *)a2 + 6);
        v68 = *((_QWORD *)a2 + 7);
        v69 = *((_BYTE *)a2 + 64);
        outlined copy of Text.Storage(v67, v68, v69);
        v70 = *(_QWORD *)(a1 + 48);
        v71 = *(_QWORD *)(a1 + 56);
        v72 = *(_BYTE *)(a1 + 64);
        *(_QWORD *)(a1 + 48) = v67;
        *(_QWORD *)(a1 + 56) = v68;
        *(_BYTE *)(a1 + 64) = v69;
        outlined consume of Text.Storage(v70, v71, v72);
        *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 48);
        v81 = a2[4];
        *v64 = *v65;
        *(_OWORD *)(a1 + 64) = v81;
      }
    }
    else if (v66)
    {
      v78 = *((_QWORD *)a2 + 6);
      v79 = *((_QWORD *)a2 + 7);
      v80 = *((_BYTE *)a2 + 64);
      outlined copy of Text.Storage(v78, v79, v80);
      *(_QWORD *)(a1 + 48) = v78;
      *(_QWORD *)(a1 + 56) = v79;
      *(_BYTE *)(a1 + 64) = v80;
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
    }
    else
    {
      v82 = a2[4];
      *v64 = *v65;
      *(_OWORD *)(a1 + 64) = v82;
    }
    v83 = (_OWORD *)(a1 + 80);
    v84 = a2 + 5;
    v85 = *((_QWORD *)a2 + 13);
    if (*(_QWORD *)(a1 + 104))
    {
      if (v85)
      {
        v86 = *((_QWORD *)a2 + 10);
        v87 = *((_QWORD *)a2 + 11);
        v88 = *((_BYTE *)a2 + 96);
        outlined copy of Text.Storage(v86, v87, v88);
        v89 = *(_QWORD *)(a1 + 80);
        v90 = *(_QWORD *)(a1 + 88);
        v91 = *(_BYTE *)(a1 + 96);
        *(_QWORD *)(a1 + 80) = v86;
        *(_QWORD *)(a1 + 88) = v87;
        *(_BYTE *)(a1 + 96) = v88;
        outlined consume of Text.Storage(v89, v90, v91);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 80);
        v95 = a2[6];
        *v83 = *v84;
        *(_OWORD *)(a1 + 96) = v95;
      }
    }
    else
    {
      if (v85)
      {
LABEL_36:
        v92 = *((_QWORD *)a2 + 10);
        v93 = *((_QWORD *)a2 + 11);
        v94 = *((_BYTE *)a2 + 96);
        outlined copy of Text.Storage(v92, v93, v94);
        *(_QWORD *)(a1 + 80) = v92;
        *(_QWORD *)(a1 + 88) = v93;
        *(_BYTE *)(a1 + 96) = v94;
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        swift_bridgeObjectRetain();
        goto LABEL_39;
      }
      v96 = a2[6];
      *v83 = *v84;
      *(_OWORD *)(a1 + 96) = v96;
    }
LABEL_39:
    v75 = *v6;
    if (*v4)
    {
      if (v75)
      {
        v97 = *((_QWORD *)a2 + 15);
        *(_QWORD *)(a1 + 112) = v75;
        *(_QWORD *)(a1 + 120) = v97;
        swift_retain();
        swift_release();
        goto LABEL_46;
      }
      swift_release();
    }
    else if (v75)
    {
      goto LABEL_43;
    }
LABEL_45:
    *(_OWORD *)v4 = *(_OWORD *)v6;
    goto LABEL_46;
  }
  if (v5 != 1)
  {
    if (*((_QWORD *)a2 + 9) == 1)
    {
      v19 = *a2;
      v20 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v20;
      *(_OWORD *)a1 = v19;
      v21 = a2[3];
      v22 = a2[4];
      v23 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v23;
      *(_OWORD *)(a1 + 48) = v21;
      *(_OWORD *)(a1 + 64) = v22;
      goto LABEL_24;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v30 = *((_QWORD *)a2 + 1);
    v31 = *((_QWORD *)a2 + 2);
    v32 = *((_QWORD *)a2 + 3);
    v33 = *((_QWORD *)a2 + 4);
    v34 = *((_BYTE *)a2 + 40);
    outlined copy of AnyShareConfiguration.Storage(v30, v31, v32, v33, v34);
    *(_QWORD *)(a1 + 8) = v30;
    *(_QWORD *)(a1 + 16) = v31;
    *(_QWORD *)(a1 + 24) = v32;
    *(_QWORD *)(a1 + 32) = v33;
    *(_BYTE *)(a1 + 40) = v34;
    if (*((_QWORD *)a2 + 9))
    {
      v35 = *((_QWORD *)a2 + 6);
      v36 = *((_QWORD *)a2 + 7);
      v37 = *((_BYTE *)a2 + 64);
      outlined copy of Text.Storage(v35, v36, v37);
      *(_QWORD *)(a1 + 48) = v35;
      *(_QWORD *)(a1 + 56) = v36;
      *(_BYTE *)(a1 + 64) = v37;
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      if (*((_QWORD *)a2 + 13))
      {
LABEL_13:
        v38 = *((_QWORD *)a2 + 10);
        v39 = *((_QWORD *)a2 + 11);
        v40 = *((_BYTE *)a2 + 96);
        outlined copy of Text.Storage(v38, v39, v40);
        *(_QWORD *)(a1 + 80) = v38;
        *(_QWORD *)(a1 + 88) = v39;
        *(_BYTE *)(a1 + 96) = v40;
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      }
    }
    else
    {
      v73 = a2[4];
      *(_OWORD *)(a1 + 48) = a2[3];
      *(_OWORD *)(a1 + 64) = v73;
      if (*((_QWORD *)a2 + 13))
        goto LABEL_13;
    }
    v74 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v74;
LABEL_24:
    v75 = *v6;
    if (!*v6)
      goto LABEL_45;
LABEL_43:
    v98 = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 112) = v75;
    *(_QWORD *)(a1 + 120) = v98;
    swift_retain();
    goto LABEL_46;
  }
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
LABEL_46:
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SharingPickerHostModifier(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;

  v4 = (_QWORD *)(a1 + 112);
  if (*(_QWORD *)(a1 + 112) == 1)
    goto LABEL_4;
  v5 = (_OWORD *)(a2 + 112);
  v6 = *(_QWORD *)(a2 + 112);
  if (v6 != 1)
  {
    if (*(_QWORD *)(a1 + 72) == 1)
    {
LABEL_9:
      v13 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v13;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      v15 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v15;
      goto LABEL_10;
    }
    v12 = *(_QWORD *)(a2 + 72);
    if (v12 == 1)
    {
      outlined destroy of AnyIdentifiableShareConfiguration(a1);
      goto LABEL_9;
    }
    v18 = *(_QWORD *)(a2 + 32);
    v19 = *(_BYTE *)(a2 + 40);
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_QWORD *)(a1 + 24);
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    *(_QWORD *)(a1 + 32) = v18;
    v25 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v19;
    outlined consume of AnyShareConfiguration.Storage(v20, v21, v22, v23, v25);
    if (*(_QWORD *)(a1 + 72))
    {
      if (v12)
      {
        v26 = *(_BYTE *)(a2 + 64);
        v27 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 56);
        v29 = *(_BYTE *)(a1 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_BYTE *)(a1 + 64) = v26;
        outlined consume of Text.Storage(v27, v28, v29);
        *(_QWORD *)(a1 + 72) = v12;
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      outlined destroy of Text(a1 + 48);
    }
    v30 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v30;
LABEL_22:
    if (*(_QWORD *)(a1 + 104))
    {
      v31 = *(_QWORD *)(a2 + 104);
      if (v31)
      {
        v32 = *(_BYTE *)(a2 + 96);
        v33 = *(_QWORD *)(a1 + 80);
        v34 = *(_QWORD *)(a1 + 88);
        v35 = *(_BYTE *)(a1 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 96) = v32;
        outlined consume of Text.Storage(v33, v34, v35);
        *(_QWORD *)(a1 + 104) = v31;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Text(a1 + 80);
    }
    v36 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v36;
LABEL_10:
    if (*v4)
    {
      if (v6)
      {
        v16 = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 112) = v6;
        *(_QWORD *)(a1 + 120) = v16;
        swift_release();
        goto LABEL_5;
      }
      swift_release();
    }
    else if (v6)
    {
      v17 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v6;
      *(_QWORD *)(a1 + 120) = v17;
      goto LABEL_5;
    }
    *(_OWORD *)v4 = *v5;
    goto LABEL_5;
  }
  outlined destroy of SharingPickerHostModifier.Model(a1);
LABEL_4:
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
LABEL_5:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingPickerHostModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingPickerHostModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_QWORD *)(result + 128) = a2;
  }
  return result;
}

void destroy for UnidentifiedSharingPickerModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  if (*(_QWORD *)(a1 + 96))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 128))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for UnidentifiedSharingPickerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_BYTE *)(a2 + 64);
  swift_retain();
  swift_retain();
  outlined copy of AnyShareConfiguration.Storage(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  if (!v10)
  {
    v18 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v18;
    v14 = *(_QWORD *)(a2 + 128);
    if (v14)
      goto LABEL_3;
LABEL_5:
    v19 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v19;
    return a1;
  }
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_BYTE *)(a2 + 88);
  outlined copy of Text.Storage(v11, v12, v13);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRetain();
  v14 = *(_QWORD *)(a2 + 128);
  if (!v14)
    goto LABEL_5;
LABEL_3:
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_BYTE *)(a2 + 120);
  outlined copy of Text.Storage(v15, v16, v17);
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  *(_BYTE *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 128) = v14;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnidentifiedSharingPickerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_BYTE *)(a2 + 64);
  outlined copy of AnyShareConfiguration.Storage(v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  v13 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v8;
  outlined consume of AnyShareConfiguration.Storage(v9, v10, v11, v12, v13);
  v14 = (_OWORD *)(a1 + 72);
  v15 = (_OWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v16)
    {
      v17 = *(_QWORD *)(a2 + 72);
      v18 = *(_QWORD *)(a2 + 80);
      v19 = *(_BYTE *)(a2 + 88);
      outlined copy of Text.Storage(v17, v18, v19);
      v20 = *(_QWORD *)(a1 + 72);
      v21 = *(_QWORD *)(a1 + 80);
      v22 = *(_BYTE *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = v17;
      *(_QWORD *)(a1 + 80) = v18;
      *(_BYTE *)(a1 + 88) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 72);
      v26 = *(_OWORD *)(a2 + 88);
      *v14 = *v15;
      *(_OWORD *)(a1 + 88) = v26;
    }
  }
  else if (v16)
  {
    v23 = *(_QWORD *)(a2 + 72);
    v24 = *(_QWORD *)(a2 + 80);
    v25 = *(_BYTE *)(a2 + 88);
    outlined copy of Text.Storage(v23, v24, v25);
    *(_QWORD *)(a1 + 72) = v23;
    *(_QWORD *)(a1 + 80) = v24;
    *(_BYTE *)(a1 + 88) = v25;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 88);
    *v14 = *v15;
    *(_OWORD *)(a1 + 88) = v27;
  }
  v28 = (_OWORD *)(a1 + 104);
  v29 = (_OWORD *)(a2 + 104);
  v30 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v30)
    {
      v31 = *(_QWORD *)(a2 + 104);
      v32 = *(_QWORD *)(a2 + 112);
      v33 = *(_BYTE *)(a2 + 120);
      outlined copy of Text.Storage(v31, v32, v33);
      v34 = *(_QWORD *)(a1 + 104);
      v35 = *(_QWORD *)(a1 + 112);
      v36 = *(_BYTE *)(a1 + 120);
      *(_QWORD *)(a1 + 104) = v31;
      *(_QWORD *)(a1 + 112) = v32;
      *(_BYTE *)(a1 + 120) = v33;
      outlined consume of Text.Storage(v34, v35, v36);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 104);
      v40 = *(_OWORD *)(a2 + 120);
      *v28 = *v29;
      *(_OWORD *)(a1 + 120) = v40;
    }
  }
  else if (v30)
  {
    v37 = *(_QWORD *)(a2 + 104);
    v38 = *(_QWORD *)(a2 + 112);
    v39 = *(_BYTE *)(a2 + 120);
    outlined copy of Text.Storage(v37, v38, v39);
    *(_QWORD *)(a1 + 104) = v37;
    *(_QWORD *)(a1 + 112) = v38;
    *(_BYTE *)(a1 + 120) = v39;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
  }
  else
  {
    v41 = *(_OWORD *)(a2 + 120);
    *v28 = *v29;
    *(_OWORD *)(a1 + 120) = v41;
  }
  return a1;
}

uint64_t assignWithTake for UnidentifiedSharingPickerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  v11 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v5;
  outlined consume of AnyShareConfiguration.Storage(v6, v7, v8, v9, v11);
  if (*(_QWORD *)(a1 + 96))
  {
    v12 = *(_QWORD *)(a2 + 96);
    if (v12)
    {
      v13 = *(_BYTE *)(a2 + 88);
      v14 = *(_QWORD *)(a1 + 72);
      v15 = *(_QWORD *)(a1 + 80);
      v16 = *(_BYTE *)(a1 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 88) = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *(_QWORD *)(a1 + 96) = v12;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 72);
  }
  v17 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v17;
LABEL_6:
  if (!*(_QWORD *)(a1 + 128))
  {
LABEL_10:
    v23 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v23;
    return a1;
  }
  v18 = *(_QWORD *)(a2 + 128);
  if (!v18)
  {
    outlined destroy of Text(a1 + 104);
    goto LABEL_10;
  }
  v19 = *(_BYTE *)(a2 + 120);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(_BYTE *)(a1 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = v19;
  outlined consume of Text.Storage(v20, v21, v22);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnidentifiedSharingPickerModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnidentifiedSharingPickerModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for UnidentifiedSharingPickerModifier()
{
  return &unk_1E1B03AE0;
}

double protocol witness for ViewModifier.body(content:) in conformance UnidentifiedSharingPickerModifier@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[8];
  uint64_t v35;
  _OWORD v36[8];
  __int128 v37;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v17 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 56);
  v20 = *(_QWORD *)(v1 + 80);
  v21 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 96);
  v18 = *(_QWORD *)(v1 + 48);
  v19 = *(_QWORD *)(v1 + 88);
  v24 = *(_QWORD *)(v1 + 104);
  v9 = *(_QWORD *)(v1 + 128);
  v22 = *(_QWORD *)(v1 + 120);
  v23 = *(_QWORD *)(v1 + 112);
  v10 = *(_BYTE *)(v1 + 64);
  swift_retain();
  swift_retain();
  *(_QWORD *)&v25 = v3;
  *((_QWORD *)&v25 + 1) = v4;
  LOBYTE(v26) = v17;
  *((_QWORD *)&v26 + 1) = Namespace.wrappedValue.getter();
  *(_QWORD *)&v27 = v5;
  *((_QWORD *)&v27 + 1) = v6;
  *(_QWORD *)&v28 = v18;
  *((_QWORD *)&v28 + 1) = v7;
  LOBYTE(v29) = v10;
  *((_QWORD *)&v29 + 1) = v21;
  *(_QWORD *)&v30 = v20;
  *((_QWORD *)&v30 + 1) = v19;
  *(_QWORD *)&v31 = v8;
  *((_QWORD *)&v31 + 1) = v24;
  *(_QWORD *)&v32 = v23;
  *((_QWORD *)&v32 + 1) = v22;
  v33 = v9;
  v35 = v9;
  v34[2] = v27;
  v34[3] = v28;
  v34[6] = v31;
  v34[7] = v32;
  v34[4] = v29;
  v34[5] = v30;
  v34[0] = v25;
  v34[1] = v26;
  _s7SwiftUI19SharingPickerSourceOWOi0_((uint64_t)v34);
  outlined copy of AnyShareConfiguration.Storage(v5, v6, v18, v7, v10);
  outlined copy of Text?(v21, v20, v19, v8);
  outlined copy of Text?(v24, v23, v22, v9);
  outlined retain of (Binding<Bool>, AnyIdentifiableShareConfiguration)((uint64_t)&v25);
  static UnitRect.one.getter();
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type UnitRect and conformance UnitRect();
  v11 = Anchor.Source.init<A>(anchor:)();
  outlined release of (Binding<Bool>, AnyIdentifiableShareConfiguration)((uint64_t)&v25);
  outlined init with take of SharingPickerSource((uint64_t)v34, (uint64_t)v36);
  *((_QWORD *)&v37 + 1) = v11;
  v12 = v36[7];
  a1[6] = v36[6];
  a1[7] = v12;
  v13 = v36[3];
  a1[2] = v36[2];
  a1[3] = v13;
  v14 = v36[5];
  a1[4] = v36[4];
  a1[5] = v14;
  v15 = v36[1];
  *a1 = v36[0];
  a1[1] = v15;
  result = *(double *)&v37;
  a1[8] = v37;
  return result;
}

void *SharingPickerHostModifier.body(content:)@<X0>(void *a1@<X8>)
{
  __int128 *v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[9];
  _OWORD v52[8];
  __int128 v53;
  _OWORD v54[9];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _OWORD __src[22];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[72];
  uint64_t v116;

  v2 = v1;
  v3 = v1[5];
  v4 = v1[7];
  v110 = v1[6];
  v111 = v4;
  v5 = v1[3];
  v106 = v1[2];
  v107 = v5;
  v7 = v1[3];
  v6 = v1[4];
  v8 = v6;
  v109 = v1[5];
  v108 = v6;
  v9 = *v1;
  v105 = v1[1];
  v104 = v9;
  v10 = v1[7];
  __src[6] = v110;
  __src[7] = v10;
  __src[2] = v106;
  __src[3] = v7;
  __src[5] = v3;
  __src[4] = v8;
  v112 = *((_QWORD *)v1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<SharingPickerHostModifier.Model?>, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  outlined init with take of Image.Resolved?((uint64_t)&v114, (uint64_t)v115, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  v38 = _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v115);
  v11 = v116;
  lazy protocol witness table accessor for type ToBool and conformance ToBool();
  v40 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v41 = v113;
  swift_retain();
  outlined release of Binding<SharingPickerHostModifier.Model?>((uint64_t)&v113);
  __src[6] = v110;
  __src[7] = v111;
  *(_QWORD *)&__src[8] = v112;
  __src[2] = v106;
  __src[3] = v107;
  __src[5] = v109;
  __src[4] = v108;
  __src[1] = v105;
  __src[0] = v104;
  State.projectedValue.getter();
  outlined init with take of Image.Resolved?((uint64_t)&v89, (uint64_t)&v90, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)&v90) == 1)
  {
    v36 = 0;
    v37 = 0;
    v34 = 0;
    v35 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v32 = 0;
    v33 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v31 = 1;
  }
  else
  {
    v16 = v101;
    v17 = v102;
    v18 = v103;
    v31 = v99;
    v32 = v100;
    v33 = v98;
    v34 = v93;
    v36 = v91;
    v37 = v90;
    v35 = v92;
    v12 = v94;
    v13 = v95;
    v14 = v96;
    v15 = v97;
    outlined consume of AnyIdentifiableShareConfiguration?(v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
  }
  v20 = v38 != 1 && v11 != 1;
  v39 = v20;
  lazy protocol witness table accessor for type ToConfiguration and conformance ToConfiguration();
  v21 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v22 = v88;
  swift_retain();
  outlined release of Binding<SharingPickerHostModifier.Model?>((uint64_t)&v88);
  *(_QWORD *)&v43 = v22;
  *((_QWORD *)&v43 + 1) = v21;
  *(_QWORD *)&v44 = v37;
  *((_QWORD *)&v44 + 1) = v36;
  *(_QWORD *)&v45 = v35;
  *((_QWORD *)&v45 + 1) = v34;
  *(_QWORD *)&v46 = v12;
  *((_QWORD *)&v46 + 1) = v13;
  *(_QWORD *)&v47 = v14;
  *((_QWORD *)&v47 + 1) = v15;
  *(_QWORD *)&v48 = v33;
  *((_QWORD *)&v48 + 1) = v31;
  *(_QWORD *)&v49 = v32;
  *((_QWORD *)&v49 + 1) = v16;
  *(_QWORD *)&v50 = v17;
  *((_QWORD *)&v50 + 1) = v18;
  v51[2] = v45;
  v51[3] = v46;
  v51[6] = v49;
  v51[7] = v50;
  v51[4] = v47;
  v51[5] = v48;
  v51[0] = v43;
  v51[1] = v44;
  _s7SwiftUI19SharingPickerSourceOWOi_((uint64_t)v51);
  outlined retain of Binding<AnyIdentifiableShareConfiguration?>((uint64_t)&v43);
  static UnitRect.one.getter();
  v55 = __src[0];
  v56 = __src[1];
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type UnitRect and conformance UnitRect();
  v23 = Anchor.Source.init<A>(anchor:)();
  outlined init with take of SharingPickerSource((uint64_t)v51, (uint64_t)v52);
  *((_QWORD *)&v53 + 1) = v23;
  v61 = v52[6];
  v62 = v52[7];
  v63 = v53;
  v57 = v52[2];
  v58 = v52[3];
  v59 = v52[4];
  v60 = v52[5];
  v55 = v52[0];
  v56 = v52[1];
  *(_QWORD *)&__src[0] = v41;
  *((_QWORD *)&__src[0] + 1) = v40;
  LOBYTE(__src[1]) = v39;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v77);
  LOBYTE(v68) = v77;
  v24 = swift_allocObject();
  v25 = v2[7];
  *(_OWORD *)(v24 + 112) = v2[6];
  *(_OWORD *)(v24 + 128) = v25;
  *(_QWORD *)(v24 + 144) = *((_QWORD *)v2 + 16);
  v26 = v2[3];
  *(_OWORD *)(v24 + 48) = v2[2];
  *(_OWORD *)(v24 + 64) = v26;
  v27 = v2[5];
  *(_OWORD *)(v24 + 80) = v2[4];
  *(_OWORD *)(v24 + 96) = v27;
  v28 = v2[1];
  *(_OWORD *)(v24 + 16) = *v2;
  *(_OWORD *)(v24 + 32) = v28;
  outlined retain of SharingPickerHostModifier((uint64_t *)v2);
  type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(0, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, &lazy cache variable for type metadata for _ViewModifier_Content<SharingPickerHostModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier, (uint64_t)&type metadata for SharingPickerHostModifier);
  lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  v54[6] = v61;
  v54[7] = v62;
  v54[8] = v63;
  v54[2] = v57;
  v54[3] = v58;
  v54[4] = v59;
  v54[5] = v60;
  v54[0] = v55;
  v54[1] = v56;
  outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>((uint64_t *)v54);
  v65 = __src[10];
  v66 = __src[11];
  v67 = *(_QWORD *)&__src[12];
  v61 = __src[6];
  v62 = __src[7];
  v63 = __src[8];
  v64 = __src[9];
  v57 = __src[2];
  v58 = __src[3];
  v59 = __src[4];
  v60 = __src[5];
  v55 = __src[0];
  v56 = __src[1];
  KeyPath = swift_getKeyPath();
  v75 = v111;
  *(_QWORD *)&v76 = v112;
  v70 = v106;
  v71 = v107;
  v73 = v109;
  v74 = v110;
  v72 = v108;
  v68 = v104;
  v69 = v105;
  outlined retain of SharingPickerHostModifier((uint64_t *)v2);
  State.projectedValue.getter();
  swift_release();
  swift_release();
  outlined release of Binding<AnyIdentifiableShareConfiguration?>((uint64_t)&v43);
  outlined release of SharingPickerHostModifier((uint64_t *)v2);
  v75 = v84;
  v76 = v85;
  v70 = v79;
  v71 = v80;
  v73 = v82;
  v74 = v83;
  v72 = v81;
  v68 = v77;
  v69 = v78;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v68);
  *(_QWORD *)&v77 = KeyPath;
  outlined init with take of Image.Resolved?((uint64_t)&v68, (uint64_t)&v77 + 8, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  __src[10] = v65;
  __src[11] = v66;
  __src[6] = v61;
  __src[7] = v62;
  __src[9] = v64;
  __src[8] = v63;
  __src[2] = v57;
  __src[3] = v58;
  __src[5] = v60;
  __src[4] = v59;
  __src[1] = v56;
  __src[0] = v55;
  *(_OWORD *)((char *)&__src[18] + 8) = v83;
  *(_OWORD *)((char *)&__src[19] + 8) = v84;
  *(_OWORD *)((char *)&__src[20] + 8) = v85;
  *(_OWORD *)((char *)&__src[16] + 8) = v81;
  *(_OWORD *)((char *)&__src[17] + 8) = v82;
  *(_OWORD *)((char *)&__src[14] + 8) = v79;
  *(_OWORD *)((char *)&__src[15] + 8) = v80;
  *(_OWORD *)((char *)&__src[12] + 8) = v77;
  *(_QWORD *)&__src[12] = v67;
  *((_QWORD *)&__src[21] + 1) = v86;
  *(_OWORD *)((char *)&__src[13] + 8) = v78;
  return memcpy(a1, __src, 0x160uLL);
}

uint64_t *closure #1 in SharingPickerHostModifier.body(content:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t *result;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11[16];
  _OWORD v12[8];
  uint64_t v13;
  _BYTE v14[112];
  void (*v15)(uint64_t);
  uint64_t v16;
  _BYTE v17[128];

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v4;
  v13 = *(_QWORD *)(a3 + 128);
  v5 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v5;
  v6 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v6;
  v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<SharingPickerHostModifier.Model?>, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  outlined init with take of Image.Resolved?((uint64_t)v14, (uint64_t)v17, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of Image.Resolved?((uint64_t)v17, (uint64_t)v14, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of Image.Resolved?((uint64_t)v17, (uint64_t)v12, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  result = (uint64_t *)_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v12);
  if ((_DWORD)result != 1)
  {
    v9 = v15;
    if (v15)
    {
      v10 = v16;
      outlined init with take of Image.Resolved?((uint64_t)v14, (uint64_t)v11, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
      swift_retain();
      outlined release of SharingPickerHostModifier.Model?(v11);
      v9(v3);
      return (uint64_t *)outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v9, v10);
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v14, (uint64_t)v11, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
      return outlined release of SharingPickerHostModifier.Model?(v11);
    }
  }
  return result;
}

void *protocol witness for ViewModifier.body(content:) in conformance SharingPickerHostModifier@<X0>(void *a1@<X8>)
{
  return SharingPickerHostModifier.body(content:)(a1);
}

uint64_t protocol witness for Projection.get(base:) in conformance ToBool@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result;
  BOOL v5;
  _BYTE v6[128];
  _BYTE v7[72];
  uint64_t v8;

  outlined init with take of Image.Resolved?(a1, (uint64_t)v6, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of Image.Resolved?((uint64_t)v6, (uint64_t)v7, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  result = _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v7);
  v5 = (_DWORD)result != 1 && v8 != 1;
  *a2 = v5;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ToBool(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v4[16];
  _OWORD v5[8];

  if (*a2 == 1)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    outlined init with take of Image.Resolved?(a1, (uint64_t)v4, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
    outlined release of SharingPickerHostModifier.Model?(v4);
    _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWOi0_(v5);
    return outlined init with take of Image.Resolved?((uint64_t)v5, a1, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  }
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance ToConfiguration@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[128];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  outlined init with take of Image.Resolved?(a1, (uint64_t)v25, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of Image.Resolved?((uint64_t)v25, (uint64_t)&v26, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  result = _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)&v26);
  if ((_DWORD)result == 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
  }
  else
  {
    v23 = v27;
    v24 = v26;
    v7 = v29;
    v8 = v30;
    v9 = v31;
    v10 = v32;
    v11 = v33;
    v21 = v34;
    v22 = v28;
    v18 = v36;
    v14 = v37;
    v15 = v38;
    v19 = v39;
    v20 = v35;
    result = outlined consume of AnyIdentifiableShareConfiguration?(v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    v16 = v19;
    v17 = v20;
    v12 = v21;
    v13 = v18;
    v6 = v22;
    v5 = v23;
    v4 = v24;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v12;
  a2[9] = v17;
  a2[10] = v13;
  a2[11] = v14;
  a2[12] = v15;
  a2[13] = v16;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ToConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[128];
  _BYTE v31[136];

  v27 = a2[1];
  v28 = *a2;
  v25 = a2[3];
  v26 = a2[2];
  v3 = a2[6];
  v23 = a2[5];
  v24 = a2[4];
  v4 = a2[8];
  v29 = a2[7];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = a2[12];
  v9 = a2[13];
  outlined init with take of Image.Resolved?(a1, (uint64_t)v30, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  result = _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v31);
  if ((_DWORD)result != 1)
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_QWORD *)a1;
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 48);
    v13 = *(_OWORD *)(a1 + 80);
    v14 = *(_OWORD *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 96);
    outlined consume of AnyIdentifiableShareConfiguration?(v28, v27, v26, v25, v24, v23, v3, v29, v4, v5, v6, v7, v8, v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    result = outlined consume of AnyIdentifiableShareConfiguration?(v22, v21, v20, v19, v18, v17, v16, v15, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, v11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 32) = v24;
    *(_QWORD *)(a1 + 40) = v23;
    *(_QWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 56) = v29;
    *(_QWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = v9;
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsSharingPickerHost()
{
  lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsSharingPickerHost()
{
  return &protocol witness table for IsSharingPickerHost;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in UnidentifiedSharingPickerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SharingPickerHostModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ToBool and conformance ToBool()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToBool and conformance ToBool;
  if (!lazy protocol witness table cache variable for type ToBool and conformance ToBool)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToBool, &unk_1E1B0B188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToBool and conformance ToBool);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToBool and conformance ToBool;
  if (!lazy protocol witness table cache variable for type ToBool and conformance ToBool)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToBool, &unk_1E1B0B188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToBool and conformance ToBool);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToBool and conformance ToBool;
  if (!lazy protocol witness table cache variable for type ToBool and conformance ToBool)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToBool, &unk_1E1B0B188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToBool and conformance ToBool);
  }
  return result;
}

uint64_t outlined release of Binding<SharingPickerHostModifier.Model?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v12 = *(_OWORD *)(a1 + 96);
  v13 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  swift_release();
  swift_release();
  outlined consume of SharingPickerHostModifier.Model?(v15, v14, v2, v3, v4, v5, v6, v7, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9);
  return a1;
}

uint64_t outlined consume of SharingPickerHostModifier.Model?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a15 != 1)
  {
    outlined consume of AnyIdentifiableShareConfiguration?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    return outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a15, a16);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToConfiguration and conformance ToConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration;
  if (!lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToConfiguration, &unk_1E1ABD760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration;
  if (!lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToConfiguration, &unk_1E1ABD760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration;
  if (!lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToConfiguration, &unk_1E1ABD760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration);
  }
  return result;
}

uint64_t _s7SwiftUI19SharingPickerSourceOWOi_(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0xFFFFFFFFFFFFFF8uLL;
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance PresentSharingPickerKey@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[9];

  _s7SwiftUI26PresentSharingPickerActionVSgWOi0_(v3);
  return outlined init with take of Image.Resolved?((uint64_t)v3, a1, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t outlined retain of Binding<AnyIdentifiableShareConfiguration?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v11 = *(_OWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  swift_retain();
  swift_retain();
  outlined consume of AnyIdentifiableShareConfiguration?(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UnitRect and conformance UnitRect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitRect and conformance UnitRect;
  if (!lazy protocol witness table cache variable for type UnitRect and conformance UnitRect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UnitRect, MEMORY[0x1E0CE7940]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitRect and conformance UnitRect);
  }
  return result;
}

uint64_t outlined init with take of SharingPickerSource(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  v5 = *(_OWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 80) = v5;
  return a2;
}

uint64_t sub_1871C7938()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 128) != 1)
  {
    if (*(_QWORD *)(v0 + 88) != 1)
    {
      outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
      if (*(_QWORD *)(v0 + 88))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v0 + 120))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
        swift_bridgeObjectRelease();
      }
    }
    if (*(_QWORD *)(v0 + 128))
      swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in SharingPickerHostModifier.body(content:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;

  return closure #1 in SharingPickerHostModifier.body(content:)(a1, a2, v2 + 16);
}

uint64_t outlined copy of SharingPickerHostModifier.Model?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a15 != 1)
  {
    outlined consume of AnyIdentifiableShareConfiguration?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    return outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a15, a16);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, &lazy cache variable for type metadata for _ViewModifier_Content<SharingPickerHostModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier, (uint64_t)&type metadata for SharingPickerHostModifier);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<SharingPickerHostModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<SharingPickerHostModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier, (uint64_t)&type metadata for SharingPickerHostModifier);
    v3[1] = &protocol witness table for SharingActivityPickerModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of Binding<AnyIdentifiableShareConfiguration?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v11 = *(_OWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  swift_release();
  swift_release();
  outlined consume of AnyIdentifiableShareConfiguration?(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  return a1;
}

uint64_t *outlined release of SharingPickerHostModifier.Model?(uint64_t *a1)
{
  outlined consume of SharingPickerHostModifier.Model?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t _s7SwiftUI19SharingPickerSourceOWOg(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) >> 63;
}

uint64_t _s7SwiftUI19SharingPickerSourceOWOj0_(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x8000000000000000;
  return result;
}

uint64_t _s7SwiftUI19SharingPickerSourceOWOi0_(uint64_t result)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  return result;
}

uint64_t outlined retain of (Binding<Bool>, AnyIdentifiableShareConfiguration)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 128);
  v9 = *(_BYTE *)(a1 + 64);
  swift_retain();
  swift_retain();
  outlined copy of AnyShareConfiguration.Storage(v2, v3, v4, v5, v9);
  outlined copy of Text?(v11, v6, v7, v8);
  outlined copy of Text?(v15, v14, v13, v12);
  return a1;
}

uint64_t outlined release of (Binding<Bool>, AnyIdentifiableShareConfiguration)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 128);
  v9 = *(_BYTE *)(a1 + 64);
  swift_release();
  swift_release();
  outlined consume of AnyShareConfiguration.Storage(v2, v3, v4, v5, v9);
  outlined consume of Text?(v11, v6, v7, v8);
  outlined consume of Text?(v15, v14, v13, v12);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>, (uint64_t)&type metadata for PresentSharingPickerKey, (uint64_t)&protocol witness table for PresentSharingPickerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t *outlined retain of SharingPickerSource(uint64_t *a1)
{
  outlined copy of SharingPickerSource(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t *outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(uint64_t *a1)
{
  outlined consume of SharingPickerSource(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  swift_release();
  return a1;
}

double _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[6] = 0u;
  a1[7] = xmmword_187BFE310;
  return result;
}

ValueMetadata *type metadata accessor for PresentSharingPickerKey()
{
  return &type metadata for PresentSharingPickerKey;
}

void *type metadata accessor for ToConfiguration()
{
  return &unk_1E1ABD760;
}

void *type metadata accessor for ToBool()
{
  return &unk_1E1B0B188;
}

uint64_t destroy for SharingPickerSource(uint64_t *a1)
{
  return outlined consume of SharingPickerSource(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
}

uint64_t *initializeWithCopy for SharingPickerSource(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  outlined copy of SharingPickerSource(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  return a1;
}

uint64_t assignWithCopy for SharingPickerSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v26 = a2[9];
  v27 = a2[10];
  v28 = a2[11];
  v29 = a2[12];
  v30 = a2[13];
  v31 = a2[14];
  v32 = a2[15];
  v33 = a2[16];
  outlined copy of SharingPickerSource(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32, v33);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v26;
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = v29;
  *(_QWORD *)(a1 + 104) = v30;
  *(_QWORD *)(a1 + 112) = v31;
  *(_QWORD *)(a1 + 120) = v32;
  *(_QWORD *)(a1 + 128) = v33;
  outlined consume of SharingPickerSource(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
  return a1;
}

uint64_t assignWithTake for SharingPickerSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)(a2 + 128);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  v20 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 128) = v3;
  outlined consume of SharingPickerSource(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingPickerSource(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)(a1 + 8) >> 57) >> 6) | (2
                                                          * ((*(_QWORD *)(a1 + 8) >> 57) & 0x38 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SharingPickerSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_QWORD *)(result + 128) = 0;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SharingPickerSource(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>);
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsSharingPickerHost>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost, (uint64_t)&type metadata for IsSharingPickerHost, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, &lazy cache variable for type metadata for _ViewModifier_Content<SharingPickerHostModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier, (uint64_t)&type metadata for SharingPickerHostModifier);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>);
    v3[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier>, &lazy cache variable for type metadata for _ViewModifier_Content<UnidentifiedSharingPickerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier, (uint64_t)&unk_1E1B03AE0);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<UnidentifiedSharingPickerModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<UnidentifiedSharingPickerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier, (uint64_t)&unk_1E1B03AE0);
    v3[1] = &protocol witness table for SharingActivityPickerModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

double _s7SwiftUI26PresentSharingPickerActionVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void type metadata completion function for ReferenceFileDocumentCreationStrategy()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t FileDocumentCreationStrategy.init(contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v37 = a5;
  v38 = a1;
  v39 = a2;
  v40 = a3;
  v9 = type metadata accessor for UUID();
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for FileDocumentCreationStrategy(0, a4, a5, v13);
  v36 = (uint64_t)a6 + v14[9];
  v15 = v36;
  v16 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = (uint64_t *)((char *)a6 + v14[10]);
  *v17 = 0;
  v17[1] = 0;
  v41 = 0;
  v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v41 = 0x3A49557466697753;
  v42 = 0xE800000000000000;
  v18._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._object = (void *)0x8000000187BD9F10;
  v19._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v19);
  v20 = v41;
  v21 = v42;
  UUID.init()();
  v22 = UUID.uuidString.getter();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
  v41 = v20;
  v42 = v21;
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = v42;
  *a6 = v41;
  a6[1] = v26;
  v27 = v38;
  outlined assign with copy of UTType?(v38, v36);
  v28 = v37;
  v29 = (*(uint64_t (**)(uint64_t))(v37 + 16))(a4);
  outlined destroy of TaskPriority?(v27, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *(uint64_t *)((char *)a6 + v14[11]) = v29;
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = a4;
  v30[3] = v28;
  v31 = v40;
  v30[4] = v39;
  v30[5] = v31;
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v17);
  *v17 = (uint64_t)&async function pointer to partial apply for closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:);
  v17[1] = (uint64_t)v30;
  return result;
}

uint64_t closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v7 = type metadata accessor for Optional();
  v5[7] = v7;
  v5[8] = *(_QWORD *)(v7 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v5[11] = *(_QWORD *)(a4 - 8);
  v5[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD);

  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(int **)(v4 + 24);
  *(_QWORD *)(v4 + 104) = **(_QWORD **)(v4 + 16);
  type metadata accessor for FileDocumentBox(0, v5, v6, a4);
  *(_QWORD *)(v4 + 112) = swift_dynamicCastClassUnconditional();
  v10 = (uint64_t (*)(_QWORD))((char *)v7 + *v7);
  swift_unknownObjectRetain();
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 120) = v8;
  *v8 = v4;
  v8[1] = closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:);
  return v10(*(_QWORD *)(v4 + 80));
}

uint64_t closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = (uint64_t *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = (uint64_t *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v4);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6 == 1)
  {
    v1 = (uint64_t *)(v0 + 64);
    v5 = (uint64_t *)(v0 + 56);
    v8 = v3;
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v7, v3, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v9, v7, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v9, 0, 1, v4);
    specialized FileDocumentBox.base.setter(v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v14);
    v8 = *(_QWORD *)(v0 + 96);
  }
  v11 = *v5;
  v12 = *v1;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for DocumentCreationStrategy.preferredContentType.getter in conformance FileDocumentCreationStrategy<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of UTType?(v2 + *(int *)(a1 + 36), a2, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
}

uint64_t protocol witness for DocumentCreationStrategy.newDocumentProvider.getter in conformance FileDocumentCreationStrategy<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 40));
  outlined copy of AppIntentExecutor?(v2);
  return v2;
}

uint64_t protocol witness for DocumentCreationStrategy.allowedContentTypes.getter in conformance FileDocumentCreationStrategy<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReferenceFileDocumentCreationStrategy.__allocating_init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(a1, a2, a3);
  return v6;
}

_QWORD *ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v4 = v3;
  v35 = a2;
  v36 = a3;
  v34 = a1;
  v31 = *v3;
  v5 = v31;
  v6 = type metadata accessor for UUID();
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t)v3 + direct field offset for ReferenceFileDocumentCreationStrategy.preferredContentType;
  v11 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)((char *)v3 + direct field offset for ReferenceFileDocumentCreationStrategy.newDocumentProvider);
  *v12 = 0;
  v12[1] = 0;
  v37 = 0;
  v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v37 = 0x3A49557466697753;
  v38 = 0xE800000000000000;
  v13 = *(_QWORD *)(v5 + 80);
  v14._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x8000000187BD9F10;
  v15._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v15);
  v17 = v37;
  v16 = v38;
  UUID.init()();
  v18 = UUID.uuidString.getter();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
  v37 = v17;
  v38 = v16;
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v38;
  v3[2] = v37;
  v3[3] = v22;
  swift_beginAccess();
  v23 = v34;
  outlined assign with copy of UTType?(v34, v10);
  swift_endAccess();
  v24 = *(_QWORD *)(v31 + 88);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 32))(v13, v24);
  outlined destroy of TaskPriority?(v23, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *(_QWORD *)((char *)v4 + direct field offset for ReferenceFileDocumentCreationStrategy.allowedContentTypes) = v25;
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v13;
  v26[3] = v24;
  v27 = v36;
  v26[4] = v35;
  v26[5] = v27;
  v28 = *v12;
  *v12 = (uint64_t)&async function pointer to partial apply for closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:);
  v12[1] = (uint64_t)v26;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  return v4;
}

uint64_t closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(int **)(v4 + 24);
  *(_QWORD *)(v4 + 56) = **(_QWORD **)(v4 + 16);
  type metadata accessor for ReferenceFileDocumentBox(0, v5, v6, a4);
  *(_QWORD *)(v4 + 64) = swift_dynamicCastClassUnconditional();
  v10 = (uint64_t (*)(void))((char *)v7 + *v7);
  swift_unknownObjectRetain();
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 72) = v8;
  *v8 = v4;
  v8[1] = closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:);
  return v10();
}

uint64_t closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 80))
  {
    swift_unknownObjectRetain();
    specialized ReferenceFileDocumentBox.base.setter();
    swift_unknownObjectRelease_n();
  }
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ReferenceFileDocumentCreationStrategy.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of TaskPriority?(v0 + direct field offset for ReferenceFileDocumentCreationStrategy.preferredContentType, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + direct field offset for ReferenceFileDocumentCreationStrategy.newDocumentProvider));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ReferenceFileDocumentCreationStrategy.__deallocating_deinit()
{
  ReferenceFileDocumentCreationStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReferenceFileDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReferenceFileDocumentCreationStrategy);
}

uint64_t protocol witness for DocumentCreationStrategy.id.getter in conformance ReferenceFileDocumentCreationStrategy<A>()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for DocumentCreationStrategy.preferredContentType.getter in conformance ReferenceFileDocumentCreationStrategy<A>@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + direct field offset for ReferenceFileDocumentCreationStrategy.preferredContentType;
  swift_beginAccess();
  return outlined init with copy of UTType?(v3, a1, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
}

uint64_t protocol witness for DocumentCreationStrategy.newDocumentProvider.getter in conformance ReferenceFileDocumentCreationStrategy<A>()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + direct field offset for ReferenceFileDocumentCreationStrategy.newDocumentProvider);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t protocol witness for DocumentCreationStrategy.allowedContentTypes.getter in conformance ReferenceFileDocumentCreationStrategy<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Identifiable.id.getter in conformance ReferenceFileDocumentCreationStrategy<A>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in static URLDocumentCreationStrategy.defaultDocumentProvider(contentType:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v2[11] = swift_task_alloc();
  v3 = type metadata accessor for UTType();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static URLDocumentCreationStrategy.defaultDocumentProvider(contentType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjCClassFromMetadata;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  char v11;
  NSURL *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  unsigned __int8 v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  __objc2_class *Class;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  Swift::String v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;

  v1 = *(_QWORD *)(v0 + 112);
  v44 = *(_QWORD *)(v0 + 104);
  v45 = *(_QWORD *)(v0 + 96);
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v46._object = (void *)0x8000000187BD9E80;
  v4._countAndFlagsBits = 0x64656C7469746E55;
  v4._object = (void *)0xE800000000000000;
  v5.value._countAndFlagsBits = 0x746E656D75636F44;
  v5.value._object = (void *)0xE900000000000073;
  v6._countAndFlagsBits = 0x64656C7469746E55;
  v6._object = (void *)0xE800000000000000;
  v46._countAndFlagsBits = 0xD00000000000001DLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v46);

  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_defaultManager);
  v9 = objc_msgSend(v8, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:conformingTo:)();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v7, sel_defaultManager);
  static UTType.package.getter();
  v11 = UTType.conforms(to:)();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v1, v45);
  if ((v11 & 1) != 0)
  {
    URL._bridgeToObjectiveC()(v12);
    v14 = v13;
    *(_QWORD *)(v0 + 56) = 0;
    v15 = objc_msgSend(v10, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v13, 1, 0, v0 + 56);

    v16 = *(void **)(v0 + 56);
    v17 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 136);
    v20 = *(_QWORD *)(v0 + 120);
    if (v15)
    {
      v21 = v16;

    }
    else
    {
      v39 = v16;
      v40 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      _StringGuts.grow(_:)(47);
      *(_QWORD *)(v0 + 40) = 0;
      *(_QWORD *)(v0 + 48) = 0xE000000000000000;
      v41._countAndFlagsBits = 0xD00000000000002DLL;
      v41._object = (void *)0x8000000187BD9EC0;
      String.append(_:)(v41);
      *(_QWORD *)(v0 + 64) = v40;
      type metadata accessor for Error();
      _print_unlocked<A, B>(_:_:)();
      MEMORY[0x18D75AC90](*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));

      swift_bridgeObjectRelease();
    }
    v42 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v42(v18, v20);
    v42(v17, v20);
  }
  else
  {
    v22 = URL.path.getter();
    v23 = (void *)MEMORY[0x18D75CC88](v22);
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v10, sel_createFileAtPath_contents_attributes_, v23, 0, 0);

    if ((v24 & 1) == 0)
    {
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      MEMORY[0x18D75AC90](0xD00000000000001FLL, 0x8000000187BD9EA0);
      swift_bridgeObjectRelease();
    }
    v27 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 136);
    v28 = *(_QWORD *)(v0 + 120);
    v29 = **(void ***)(v0 + 72);
    Class = (__objc2_class *)object_getClass(v29);

    v31 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v31(v26, v28);
    v32 = *(_QWORD *)(v0 + 144);
    if (Class == _TtC7SwiftUI14URLDocumentBox && v29)
    {
      v33 = *(_QWORD *)(v0 + 120);
      v34 = *(_QWORD *)(v0 + 128);
      v35 = *(_QWORD *)(v0 + 88);
      v36 = **(void ***)(v0 + 72);
      if (object_getClass(v36) == (Class)_TtC7SwiftUI14URLDocumentBox)
        v37 = v36;
      else
        v37 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v35, v32, v33);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v33);
      v38 = (uint64_t)v37 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
      swift_beginAccess();
      swift_unknownObjectRetain();
      outlined assign with take of URL?(v35, v38);
      swift_endAccess();
      swift_unknownObjectRelease();
    }
    else
    {
      v31(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t URLDocumentCreationStrategy.init(contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  Swift::String v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v45 = a3;
  v46 = a1;
  v47 = a2;
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  v44 = v6;
  v7 = v6;
  MEMORY[0x1E0C80A78](v5, v8);
  v42 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v41 - v13;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URLDocumentCreationStrategy(0);
  v21 = (uint64_t)a4 + *(int *)(v20 + 20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v21, 1, 1, v5);
  v48 = v20;
  v49 = 0;
  v22 = (uint64_t *)((char *)a4 + *(int *)(v20 + 24));
  *v22 = 0;
  v22[1] = 0;
  v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  UUID.init()();
  v23 = UUID.uuidString.getter();
  v25 = v24;
  v26 = v19;
  v27 = v45;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v15);
  v49 = 0xD00000000000001CLL;
  v50 = 0x8000000187BD9EF0;
  v28._countAndFlagsBits = v23;
  v28._object = v25;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = v50;
  *a4 = v49;
  a4[1] = v29;
  v30 = v46;
  outlined assign with copy of UTType?(v46, v21);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v47;
  *(_QWORD *)(v31 + 24) = v27;
  v32 = *v22;
  swift_retain();
  v33 = v30;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v32);
  *v22 = (uint64_t)&async function pointer to partial apply for closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:);
  v22[1] = v31;
  v35 = v43;
  v34 = v44;
  outlined init with copy of UTType?(v30, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v14, 1, v35) == 1)
  {
    v36 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v37 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v38 = v42;
    v37(v42, v14, v35);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v39 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_187BF9830;
    v37((char *)(v36 + v39), v38, v35);
  }
  swift_release();
  result = outlined destroy of TaskPriority?(v33, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  *(unint64_t *)((char *)a4 + *(int *)(v48 + 28)) = v36;
  return result;
}

uint64_t closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v3[10] = v4;
  v3[11] = *(_QWORD *)(v4 - 8);
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:)()
{
  uint64_t v0;
  void **v1;
  void *v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD);

  v1 = *(void ***)(v0 + 40);
  v2 = *v1;
  *(_QWORD *)(v0 + 104) = *v1;
  if (object_getClass(v2) != (Class)_TtC7SwiftUI14URLDocumentBox || v2 == 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(int **)(v0 + 48);
    *(_QWORD *)(v0 + 112) = object_getClass(v2);
    v7 = (uint64_t (*)(_QWORD))((char *)v4 + *v4);
    swift_unknownObjectRetain();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v5;
    *v5 = v0;
    v5[1] = closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:);
    return v7(*(_QWORD *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_unknownObjectRelease();
    outlined destroy of TaskPriority?(v3, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 64);
    if (*(__objc2_class **)(v0 + 112) == _TtC7SwiftUI14URLDocumentBox)
      v6 = *(_QWORD *)(v0 + 104);
    else
      v6 = 0;
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v7(*(_QWORD *)(v0 + 96), v3, v1);
    v7(v5, v4, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v5, 0, 1, v1);
    v8 = v6 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
    swift_beginAccess();
    outlined assign with take of URL?(v5, v8);
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for DocumentCreationStrategy.id.getter in conformance URLDocumentCreationStrategy()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for DocumentCreationStrategy.preferredContentType.getter in conformance URLDocumentCreationStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of UTType?(v2 + *(int *)(a1 + 20), a2, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
}

uint64_t protocol witness for DocumentCreationStrategy.allowedContentTypes.getter in conformance URLDocumentCreationStrategy()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Identifiable.id.getter in conformance URLDocumentCreationStrategy@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ContentTypeDocumentCreationStrategy.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v27 = a1;
  v25 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContentTypeDocumentCreationStrategy(0);
  v8 = *(int *)(v7 + 20);
  v9 = v7;
  v28 = v7;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for UTType();
  v12 = *(_QWORD *)(v11 - 8);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v26(v10, 1, 1, v11);
  v13 = (uint64_t *)((char *)a2 + *(int *)(v9 + 24));
  *v13 = 0;
  v13[1] = 0;
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  UUID.init()();
  v14 = UUID.uuidString.getter();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v25);
  v29 = 0xD00000000000001CLL;
  v30 = 0x8000000187BD9EF0;
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18 = v30;
  *a2 = v29;
  a2[1] = v18;
  v19 = a2;
  v20 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340];
  outlined destroy of TaskPriority?(v10, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  v21 = v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v27, v11);
  v26(v10, 0, 1, v11);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v13);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, v20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  *v13 = 0;
  v13[1] = 0;
  v22 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_187BF9830;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 32))(v23 + v22, v21, v11);
  *(unint64_t *)((char *)v19 + *(int *)(v28 + 28)) = v23;
  return result;
}

uint64_t DefaultDocumentCreationStrategy.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  unint64_t v17;
  uint64_t result;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DefaultDocumentCreationStrategy(0);
  v8 = *(int *)(v7 + 20);
  v9 = v7;
  v20 = v7;
  v10 = (uint64_t)a1 + v8;
  v11 = type metadata accessor for UTType();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v19(v10, 1, 1, v11);
  v12 = (uint64_t *)((char *)a1 + *(int *)(v9 + 24));
  *v12 = 0;
  v12[1] = 0;
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  UUID.init()();
  v13 = UUID.uuidString.getter();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v21 = 0xD00000000000001CLL;
  v22 = 0x8000000187BD9EF0;
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17 = v22;
  *a1 = v21;
  a1[1] = v17;
  outlined destroy of TaskPriority?(v10, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  v19(v10, 1, 1, v11);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v12);
  *v12 = 0;
  v12[1] = 0;
  *(unint64_t *)((char *)a1 + *(int *)(v20 + 28)) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t protocol witness for DocumentCreationStrategy.newDocumentProvider.getter in conformance URLDocumentCreationStrategy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 24));
  outlined copy of AppIntentExecutor?(v2);
  return v2;
}

uint64_t URLDocumentBox.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of TaskPriority?(v0 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for URLDocumentBox()
{
  return type metadata accessor for URLDocumentBox(0);
}

uint64_t type metadata accessor for URLDocumentBox(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for URLDocumentBox);
}

void type metadata completion function for URLDocumentBox()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t outlined destroy of AsyncNewDocumentProvider(uint64_t a1)
{
  destroy for UpdateViewCache();
  return a1;
}

uint64_t getEnumTagSinglePayload for URLDocumentCreationStrategy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for URLDocumentCreationStrategy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for URLDocumentCreationStrategy(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for URLDocumentCreationStrategy);
}

void type metadata completion function for FileDocumentCreationStrategy()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for FileDocumentCreationStrategy(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[9];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UTType();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[10];
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    if (*v18)
    {
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FileDocumentCreationStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (*(_QWORD *)(a1 + *(int *)(a2 + 40)))
    swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FileDocumentCreationStrategy(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[9];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UTType();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[10];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  if (*v16)
  {
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FileDocumentCreationStrategy(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[9];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UTType();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[10];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)((char *)a1 + v15);
  v19 = *(_QWORD *)((char *)a2 + v15);
  if (!v18)
  {
    if (v19)
    {
      v21 = *((_QWORD *)v17 + 1);
      *v16 = v19;
      v16[1] = v21;
      swift_retain();
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_14;
  }
  if (!v19)
  {
    outlined destroy of AsyncNewDocumentProvider((uint64_t)v16);
    goto LABEL_13;
  }
  v20 = *((_QWORD *)v17 + 1);
  *v16 = v19;
  v16[1] = v20;
  swift_retain();
  swift_release();
LABEL_14:
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for FileDocumentCreationStrategy(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[9];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UTType();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *assignWithTake for FileDocumentCreationStrategy(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[9];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UTType();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[10];
  v17 = (uint64_t)a1 + v16;
  v18 = (char *)a2 + v16;
  if (!*(_QWORD *)((char *)a1 + v16))
  {
LABEL_11:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    goto LABEL_12;
  }
  if (!*(_QWORD *)v18)
  {
    outlined destroy of AsyncNewDocumentProvider(v17);
    goto LABEL_11;
  }
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_QWORD *)(v17 + 8) = v19;
  swift_release();
LABEL_12:
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocumentCreationStrategy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871CAFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FileDocumentCreationStrategy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871CB090(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FileDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FileDocumentCreationStrategy);
}

uint64_t *initializeBufferWithCopyOfBuffer for URLDocumentCreationStrategy(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UTType();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    if (*v18)
    {
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

_QWORD *initializeWithCopy for URLDocumentCreationStrategy(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UTType();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  if (*v16)
  {
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for URLDocumentCreationStrategy(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UTType();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)((char *)a1 + v15);
  v19 = *(_QWORD *)((char *)a2 + v15);
  if (!v18)
  {
    if (v19)
    {
      v21 = *((_QWORD *)v17 + 1);
      *v16 = v19;
      v16[1] = v21;
      swift_retain();
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_14;
  }
  if (!v19)
  {
    outlined destroy of AsyncNewDocumentProvider((uint64_t)v16);
    goto LABEL_13;
  }
  v20 = *((_QWORD *)v17 + 1);
  *v16 = v19;
  v16[1] = v20;
  swift_retain();
  swift_release();
LABEL_14:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for URLDocumentCreationStrategy(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UTType();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *assignWithTake for URLDocumentCreationStrategy(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UTType();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (uint64_t)a1 + v16;
  v18 = (char *)a2 + v16;
  if (!*(_QWORD *)((char *)a1 + v16))
  {
LABEL_11:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    goto LABEL_12;
  }
  if (!*(_QWORD *)v18)
  {
    outlined destroy of AsyncNewDocumentProvider(v17);
    goto LABEL_11;
  }
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_QWORD *)(v17 + 8) = v19;
  swift_release();
LABEL_12:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTypeDocumentCreationStrategy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ContentTypeDocumentCreationStrategy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ContentTypeDocumentCreationStrategy(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ContentTypeDocumentCreationStrategy);
}

void type metadata completion function for URLDocumentCreationStrategy()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for URLDocumentCreationStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (*(_QWORD *)(a1 + *(int *)(a2 + 24)))
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for DefaultDocumentCreationStrategy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for DefaultDocumentCreationStrategy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for DefaultDocumentCreationStrategy(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DefaultDocumentCreationStrategy);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in DefaultDocumentCreationStrategy()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t protocol witness for DocumentBaseBox.base.getter in conformance URLDocumentBox@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
  swift_beginAccess();
  return outlined init with copy of UTType?(v3, a1, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
}

uint64_t protocol witness for DocumentBaseBox.base.setter in conformance URLDocumentBox(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
  swift_beginAccess();
  outlined assign with take of URL?(a1, v3);
  return swift_endAccess();
}

uint64_t (*protocol witness for DocumentBaseBox.base.modify in conformance URLDocumentBox())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t instantiation function for generic protocol witness table for URLDocumentCreationStrategy(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy, type metadata accessor for URLDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for URLDocumentCreationStrategy);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ReferenceFileDocumentCreationStrategy<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReferenceFileDocumentCreationStrategy<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FileDocumentCreationStrategy<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentCreationStrategy<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ContentTypeDocumentCreationStrategy(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ContentTypeDocumentCreationStrategy and conformance ContentTypeDocumentCreationStrategy, type metadata accessor for ContentTypeDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for ContentTypeDocumentCreationStrategy);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for DefaultDocumentCreationStrategy(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy, type metadata accessor for DefaultDocumentCreationStrategy, (uint64_t)&protocol conformance descriptor for DefaultDocumentCreationStrategy);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UTType?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined assign with copy of UTType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1871CBDCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:)(a1, v5, v4);
}

uint64_t sub_1871CBE50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  v5 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)(a1, v7, v6, v4, v5);
}

uint64_t GestureState.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, a2, v7);
  GestureState.init(wrappedValue:resetTransaction:)((uint64_t)v9, 0, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t Gesture.updating<A>(_:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v25 = a2;
  v26 = a6;
  v13 = type metadata accessor for GestureState(0, a5, a3, a4);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v25 - v16;
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v22, v7, a4, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  GestureStateGesture.init(base:state:body:)((uint64_t)v22, (uint64_t)v17, v25, a3, a4, a5, v26, a7);
  return swift_retain();
}

uint64_t GestureState.init(wrappedValue:resetTransaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  void (*v11)(char *, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t (**v17)();
  uint64_t v18;

  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  State.init(wrappedValue:)();
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  v11((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a2;
  v11((char *)(v13 + v12), (uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  result = type metadata accessor for GestureState(0, a3, v14, v15);
  v17 = (uint64_t (**)())(a4 + *(int *)(result + 28));
  *v17 = partial apply for closure #1 in GestureState.init(wrappedValue:resetTransaction:);
  v17[1] = (uint64_t (*)())v13;
  return result;
}

uint64_t type metadata accessor for GestureState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureState);
}

uint64_t closure #1 in GestureState.init(wrappedValue:resetTransaction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for Binding();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v6 - v3;
  Binding.transaction(_:)();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t GestureState.init(wrappedValue:reset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  unint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t (**v20)(uint64_t);
  uint64_t v21;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v12);
  State.init(wrappedValue:)();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  v14((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a4);
  v15 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v16 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((_QWORD *)v16 + 2) = a4;
  *((_QWORD *)v16 + 3) = a2;
  *((_QWORD *)v16 + 4) = a3;
  v14((char *)v16 + v15, (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  result = type metadata accessor for GestureState(0, a4, v17, v18);
  v20 = (uint64_t (**)(uint64_t))(a5 + *(int *)(result + 28));
  *v20 = partial apply for closure #1 in GestureState.init(wrappedValue:reset:);
  v20[1] = v16;
  return result;
}

uint64_t closure #1 in GestureState.init(wrappedValue:reset:)(uint64_t a1, void (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Binding();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v18 - v15, a1, v11, v14);
  MEMORY[0x18D75B9C8](v11);
  a2(v10, v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a5);
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
}

uint64_t GestureState.wrappedValue.getter()
{
  type metadata accessor for State();
  return State.wrappedValue.getter();
}

uint64_t GestureState.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t GestureState<A>.init(resetTransaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  return GestureState.init(wrappedValue:resetTransaction:)((uint64_t)v7, a1, a2, a3);
}

uint64_t GestureState<A>.init(reset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  return GestureState.init(wrappedValue:reset:)((uint64_t)v9, a1, a2, a3, a4);
}

uint64_t GestureStateGesture.init(base:state:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a8, a1, a5);
  v15 = type metadata accessor for GestureStateGesture(0, a5, a6, a7);
  v16 = a8 + *(int *)(v15 + 44);
  v19 = type metadata accessor for GestureState(0, a6, v17, v18);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, a2, v19);
  v21 = (_QWORD *)(a8 + *(int *)(v15 + 48));
  *v21 = a3;
  v21[1] = a4;
  return result;
}

uint64_t sub_1871CC6F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GestureState.init(wrappedValue:resetTransaction:)()
{
  return closure #1 in GestureState.init(wrappedValue:resetTransaction:)();
}

uint64_t sub_1871CC778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GestureState.init(wrappedValue:reset:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return closure #1 in GestureState.init(wrappedValue:reset:)(a1, *(void (**)(char *, char *))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3), v2);
}

uint64_t type metadata accessor for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureStateGesture);
}

uint64_t GestureStateGesture.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t GestureStateGesture.base.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*GestureStateGesture.base.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GestureStateGesture.state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v4 + *(int *)(a1 + 44);
  v7 = type metadata accessor for GestureState(0, *(_QWORD *)(a1 + 24), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6, v7);
}

uint64_t GestureStateGesture.state.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v4 + *(int *)(a2 + 44);
  v7 = type metadata accessor for GestureState(0, *(_QWORD *)(a2 + 24), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v6, a1, v7);
}

uint64_t (*GestureStateGesture.state.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for GestureStateGesture.body : <A, B>GestureStateGesture<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v5 = *(_QWORD *)(a3 + a2 - 24);
  v6 = *(_QWORD *)(a3 + a2 - 16);
  v7 = *(_QWORD *)(a3 + a2 - 8);
  v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for GestureStateGesture(0, v5, v6, v7) + 48));
  v10 = *v8;
  v9 = v8[1];
  v11 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = v6;
  *((_QWORD *)v11 + 4) = v7;
  *((_QWORD *)v11 + 5) = v10;
  *((_QWORD *)v11 + 6) = v9;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ());
  a4[1] = v11;
  return swift_retain();
}

uint64_t key path setter for GestureStateGesture.body : <A, B>GestureStateGesture<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t (**v11)();
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v9 = *a1;
  v8 = a1[1];
  v10 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = v6;
  *((_QWORD *)v10 + 4) = v7;
  *((_QWORD *)v10 + 5) = v9;
  *((_QWORD *)v10 + 6) = v8;
  v11 = (uint64_t (**)())(a2 + *(int *)(type metadata accessor for GestureStateGesture(0, v5, v6, v7) + 48));
  swift_retain();
  result = swift_release();
  *v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ());
  v11[1] = v10;
  return result;
}

uint64_t GestureStateGesture.body.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 48));
  swift_retain();
  return v2;
}

uint64_t GestureStateGesture.body.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 48));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*GestureStateGesture.body.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static GestureStateGesture._makeGesture(gesture:inputs:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v16;
  int v17;
  __int16 v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v7 = a2[5];
  v43 = a2[4];
  v44 = v7;
  v45 = a2[6];
  v46 = *((_QWORD *)a2 + 14);
  v8 = a2[1];
  v39 = *a2;
  v40 = v8;
  v9 = a2[3];
  v41 = a2[2];
  v42 = v9;
  v10 = *((_DWORD *)a2 + 30);
  v24 = a3;
  v25 = a4;
  v26 = a5;
  type metadata accessor for GestureStateGesture(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  v11 = _GraphValue.value.getter();
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GestureOutputs();
  v34 = v43;
  v35 = v44;
  v36 = v45;
  v37 = v46;
  v29 = DWORD1(v40);
  v32 = *((_QWORD *)&v41 + 1);
  v33 = v42;
  v38 = v10;
  LODWORD(v27) = v11;
  DWORD1(v27) = _GestureOutputs.phase.getter();
  DWORD2(v27) = _GestureInputs.resetSeed.getter();
  BYTE12(v27) = (v10 & 0x10) != 0;
  *(_WORD *)((char *)&v27 + 13) = v18;
  HIBYTE(v27) = v19;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v21 = type metadata accessor for GesturePhase();
  v22 = type metadata accessor for GestureStatePhase(0, a3, a4, a5);
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureStatePhase<A, B>, v22);
  v12 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v27, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v20, v22, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v30);
  static AGAttributeFlags.transactional.getter();
  static AGAttributeFlags.removable.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  v27 = v16;
  v28 = v17;
  _GestureOutputs.withPhase<A>(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static GestureStateGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for GestureStateGesture(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t GestureStatePhase.gesture.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t Value;

  v3 = type metadata accessor for GestureStateGesture(0, a1[2], a1[3], a1[4]);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, Value, v3);
}

uint64_t GestureStatePhase.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for GesturePhase();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t GestureStatePhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance GestureStateGesture<A, B>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  return static GestureStateGesture._makeGesture(gesture:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

BOOL GestureStatePhase.updateValue()(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  _BOOL8 result;
  __int128 v24;
  char *v25;
  _QWORD v26[15];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v1;
  v38 = *MEMORY[0x1E0C80C00];
  v4 = a1[2];
  v5 = a1[4];
  v32 = a1[3];
  v29 = type metadata accessor for GestureStateGesture(0, v4, v32, v5);
  v27 = *(_QWORD *)(v29 - 8);
  v6 = *(_QWORD *)(v27 + 64);
  MEMORY[0x1E0C80A78](v29, v7);
  v26[14] = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v28 = (char *)v26 - v10;
  v30 = v5;
  v31 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, AssociatedTypeWitness);
  v26[13] = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v15 = type metadata accessor for GesturePhase();
  v34 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v33 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)v26 - v21;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureStatePhase<A, B>, a1, v20);
  result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    v24 = v2[1];
    v35 = *v2;
    v36 = v24;
    v37 = *((_QWORD *)v2 + 4);
    GestureStatePhase.phase.getter((uint64_t)v22);
    v25 = (char *)&loc_1871CD158 + 4 * byte_187C144D0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t closure #2 in GestureStatePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *);
  uint64_t v20;

  v9 = type metadata accessor for Binding();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v20 - v12;
  v14 = swift_projectBox();
  v15 = a1 + *(int *)(type metadata accessor for GestureStateGesture(0, a3, a4, a5) + 44);
  v18 = *(void (**)(char *))(v15 + *(int *)(type metadata accessor for GestureState(0, a4, v16, v17) + 28));
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  v18(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t closure #3 in GestureStatePhase.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = type metadata accessor for Binding();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v8 - v5;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  MEMORY[0x18D75B9C8](v2);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t closure #4 in GestureStatePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = a3;
  v23 = a4;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Binding();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v22 - v16;
  v18 = swift_projectBox();
  v19 = swift_projectBox();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v18, v13);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v19, a6);
  v20 = type metadata accessor for GestureStateGesture(0, a5, a6, a7);
  (*(void (**)(uint64_t, char *, char *))(v22 + *(int *)(v20 + 48)))(v23, v12, v17);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t closure #5 in GestureStatePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Binding();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v16[-v11];
  v13 = swift_projectBox();
  v14 = swift_projectBox();
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, v13, v8);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v14, a4);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a4);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t GestureStatePhase.resetPhase()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    swift_retain();
    static Update.enqueueAction(_:)();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
    result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = 0;
  }
  return result;
}

uint64_t static GestureStatePhase.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AGGraphGetAttributeInfo();
  type metadata accessor for GestureStatePhase(0, a2, a3, a4);
  return GestureStatePhase.resetPhase()();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance GestureStatePhase<A, B>()
{
  return GestureStatePhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance GestureStatePhase<A, B>(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance GestureStatePhase<A, B>(uint64_t a1, uint64_t *a2)
{
  return static GestureStatePhase.willRemove(attribute:)(a1, a2[2], a2[3], a2[4]);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance GestureStatePhase<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for GesturePhase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t partial apply for closure #1 in static GestureStateGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static GestureStateGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for GestureStatePhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureStatePhase);
}

void base witness table accessor for Gesture in GestureStateGesture<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1871CDD38()
{
  return 24;
}

__n128 sub_1871CDD44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for GestureState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for State();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GestureState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    v11 = v7 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    v14 = (_QWORD *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v12;
    v14[1] = v13;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for GestureState(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for GestureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = a1 + v7 + 7;
  v9 = (uint64_t *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  *v12 = v10;
  v12[1] = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GestureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = (_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for GestureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  *(_OWORD *)((a1 + (v6 & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((a2
                                                                                            + (v6 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 8
                                                                                            + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for GestureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  *(_OWORD *)((a1 + (v6 & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((a2
                                                                                              + (v6 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 8
                                                                                              + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureState(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v4 + 64);
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v7 >= a2)
  {
    if (v6 == v7)
    {
      if (v5 < 0x7FFFFFFE)
      {
        v15 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
        if (v15 >= 0xFFFFFFFF)
          LODWORD(v15) = -1;
        if ((v15 + 1) >= 2)
          return v15;
        else
          return 0;
      }
      else
      {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
    }
    else
    {
      v14 = *(_QWORD *)((a1 + v9 + 15) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    if (((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1871CE1E0 + 4 * byte_187C144D4[v12]))();
  }
}

void storeEnumTagSinglePayload for GestureState(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X15 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1871CE3A0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1871CE454);
}

void sub_1871CE3A8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1871CE3B0);
  JUMPOUT(0x1871CE454);
}

void sub_1871CE3FC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871CE454);
}

void sub_1871CE404()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871CE454);
}

uint64_t sub_1871CE40C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a2)
    goto LABEL_7;
  if (v6 != v5)
  {
    if (a2 < 0)
      JUMPOUT(0x1871CE438);
    *(_QWORD *)((v8 + v7 + 15) & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
LABEL_7:
    JUMPOUT(0x1871CE454);
  }
  if (a3 < 0x7FFFFFFE)
    JUMPOUT(0x1871CE418);
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v8);
}

uint64_t type metadata completion function for GestureStateGesture(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = swift_checkMetadataState();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for GestureState(319, *(_QWORD *)(a1 + 24), v3, v4);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GestureStateGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 & 0xF8 | 7;
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (((v11 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v13 = v8 | *(_DWORD *)(v6 + 80);
  if ((v13 & 0x1000F8) != 0 || (v10 & ~v9) + v12 + 16 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
  }
  else
  {
    v16 = ~v9;
    v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v18 = ((unint64_t)v4 + v10) & v16;
    v19 = ((unint64_t)a2 + v10) & v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v18, v19, v5);
    *(_QWORD *)((v11 + v18) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v11 + v19) & 0xFFFFFFFFFFFFF8);
    v20 = (_QWORD *)(v18 + v17);
    v21 = *(_QWORD *)(v19 + v17 + 8);
    *v20 = *(_QWORD *)(v19 + v17);
    v20[1] = v21;
    v22 = (_QWORD *)(v12 + v18);
    v23 = *(_QWORD *)(v12 + v19);
    v24 = *(_QWORD *)(v12 + v19 + 8);
    *v22 = v23;
    v22[1] = v24;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for GestureStateGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  (*(void (**)(uint64_t))(v6 + 8))((v5 + v7) & ~v7);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  v13 &= 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)(v13 + 8 + v11);
  v15 = (_QWORD *)(v13 + 8 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v18 = (_QWORD *)(v17 + v11);
  v19 = (_QWORD *)(v17 + v12);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v13 &= 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)(v13 + 8 + v11);
  v15 = (_QWORD *)(v13 + 8 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  v17 = ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v18 = (_QWORD *)(v17 + v11);
  v19 = (_QWORD *)(v17 + v12);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  v13 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v13 + 8 + v11) = *(_OWORD *)(v13 + 8 + v12);
  *(_OWORD *)(((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 16 + v11) = *(_OWORD *)(((v13 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 16
                                                                          + v12);
  return a1;
}

uint64_t assignWithTake for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v13 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v13 + 8 + v11) = *(_OWORD *)(v13 + 8 + v12);
  swift_release();
  *(_OWORD *)(((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 16 + v11) = *(_OWORD *)(((v13 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 16
                                                                          + v12);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureStateGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v6 + 84);
  if (v9 <= v5)
    v10 = *(_DWORD *)(v4 + 84);
  else
    v10 = v9;
  if (!a2)
    return 0;
  v11 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64) + 7;
  v14 = v13 & 0xFFFFFFFFFFFFFFF8;
  if (v10 < a2)
  {
    if (((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + (v12 & ~v11) + 32) & 0xFFFFFFF8) != 0)
      v15 = 2;
    else
      v15 = a2 - v10 + 1;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    __asm { BR              X19 }
  }
  if (v5 >= v9)
    __asm { BR              X3 }
  v19 = (v12 + a1) & ~v11;
  if (v8 == v9)
  {
    if (v7 >= 0x7FFFFFFE)
      __asm { BR              X3 }
    v21 = *(_QWORD *)((v13 + v19) & 0xFFFFFFFFFFFFF8);
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    if ((v21 + 1) >= 2)
      return v21;
    else
      return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v14 + 8 + v19);
    if (v20 >= 0xFFFFFFFF)
      LODWORD(v20) = -1;
    return (v20 + 1);
  }
}

void storeEnumTagSinglePayload for GestureStateGesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_DWORD **)(*(_QWORD *)(a4 + 24) - 8);
  if (v6[21] <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6[21];
  if (v7 <= *(_DWORD *)(v5 + 84))
    v8 = *(_DWORD *)(v5 + 84);
  else
    v8 = v7;
  if (v8 >= a3)
  {
    v11 = 0u;
    if (a2 <= v8)
      goto LABEL_20;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (v6[20] & 0xF8 | 7)) & ~(v6[20] & 0xF8 | 7))
       + ((((v6[16] + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
       + 16
       + 16 <= 3)
      v9 = a3 - v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v8)
LABEL_20:
      __asm { BR              X6 }
  }
  if (((*(_DWORD *)(v5 + 64) + (v6[20] & 0xF8 | 7)) & ~(v6[20] & 0xF8 | 7))
     + ((((v6[16] + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
     + 16 != -16)
  {
    if (((*(_DWORD *)(v5 + 64) + (v6[20] & 0xF8 | 7)) & ~(v6[20] & 0xF8 | 7))
       + ((((v6[16] + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
       + 16
       + 16 <= 3)
      v12 = 0;
    else
      v12 = ~v8 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + (v6[20] & 0xF8 | 7)) & ~(v6[20] & 0xF8 | 7))+ ((((*((_QWORD *)v6 + 8) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 16+ 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1871CED78()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1871CEE6CLL);
}

void sub_1871CED80(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1871CED88);
  JUMPOUT(0x1871CEE6CLL);
}

void sub_1871CEDE4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871CEE6CLL);
}

void sub_1871CEDEC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871CEE6CLL);
}

uint64_t sub_1871CEDF4(uint64_t a1, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v5;
  size_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)(v10 + v11) = 0;
  if (!a2)
    goto LABEL_7;
  if (v5 < v8)
  {
    v2 = (_DWORD *)((v9 + v10) & a1);
    if (v8 >= a2)
      JUMPOUT(0x1871CEE00);
    if ((_DWORD)v6)
    {
      v3 = ~v8 + a2;
      bzero(v2, v6);
      *v2 = v3;
    }
LABEL_7:
    JUMPOUT(0x1871CEE6CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v7 + 56))(v10);
}

uint64_t initializeWithCopy for GestureStatePhase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t assignWithCopy for GestureStatePhase(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GestureStatePhase(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v7;
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v6;
  swift_release();
  return a1;
}

void base witness table accessor for _AttributeBody in GestureStatePhase<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for StatefulRule in GestureStatePhase<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1871CF048()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[2];
  v2 = v0[3];
  v3 = type metadata accessor for GestureStateGesture(0, v1, v2, v0[4]);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v5 = (char *)v0 + ((v4 + 40) & ~v4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(&v5[*(int *)(v3 + 44)], v2);
  type metadata accessor for State();
  swift_release();
  type metadata accessor for GestureState(0, v2, v6, v7);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in GestureStatePhase.updateValue()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = *(_QWORD *)(type metadata accessor for GestureStateGesture(0, v1, v2, v3) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return closure #2 in GestureStatePhase.updateValue()((uint64_t)v0 + v5, *(_QWORD *)((char *)v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8)), v1, v2, v3);
}

uint64_t partial apply for closure #3 in GestureStatePhase.updateValue()()
{
  uint64_t v0;

  return closure #3 in GestureStatePhase.updateValue()(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1871CF1C4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in GestureStatePhase.updateValue()()
{
  uint64_t *v0;

  return closure #5 in GestureStatePhase.updateValue()(v0[5], v0[6], v0[2], v0[3]);
}

uint64_t sub_1871CF200()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)v0 + 2);
  v1 = *((_QWORD *)v0 + 3);
  v3 = type metadata accessor for GestureStateGesture(0, v2, v1, *((_QWORD *)v0 + 4));
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  swift_release();
  swift_release();
  v10 = &v0[v5];
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v10, v2);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(&v10[*(int *)(v3 + 44)], v1);
  type metadata accessor for State();
  swift_release();
  type metadata accessor for GestureState(0, v1, v11, v12);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(&v0[v9], AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in GestureStatePhase.updateValue()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = *(_QWORD *)(type metadata accessor for GestureStateGesture(0, v1, v2, v3) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return closure #4 in GestureStatePhase.updateValue()(v0[5], v0[6], (uint64_t)v0 + v5, (uint64_t)v0 + ((v5 + v6 + v7) & ~v7), v1, v2, v3);
}

uint64_t sub_1871CF3FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t EnvironmentValues.effectiveForegroundColor.getter()
{
  return EnvironmentValues._effectiveForegroundColor.getter();
}

uint64_t destroy for PhoneUnbridgedNavigationStackCore()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for PhoneUnbridgedNavigationStackCore(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhoneUnbridgedNavigationStackCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  v5 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  return a1;
}

__n128 __swift_memcpy53_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PhoneUnbridgedNavigationStackCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneUnbridgedNavigationStackCore(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 53))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneUnbridgedNavigationStackCore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 53) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 53) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneUnbridgedNavigationStackCore()
{
  return &type metadata for PhoneUnbridgedNavigationStackCore;
}

uint64_t associated type witness table accessor for View.Body : View in PhoneUnbridgedNavigationStackCore()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in PhoneUnbridgedNavigationStackCore.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _NavigationStackStyleConfiguration.Item(a1, a2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PhoneUnbridgedNavigationStackCore()
{
  type metadata accessor for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>();
  type metadata accessor for _AnimationModifier<Int>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, MEMORY[0x1E0CE74D8]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _AnimationModifier<Int> and conformance _AnimationModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnimationModifier<Int>, MEMORY[0x1E0CE45E0]);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

__n128 protocol witness for View.body.getter in conformance PhoneUnbridgedNavigationStackCore@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = static Alignment.center.getter();
  v6 = v5;
  type metadata accessor for [_NavigationStackStyleConfiguration.Item]();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [_NavigationStackStyleConfiguration.Item] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [_NavigationStackStyleConfiguration.Item], MEMORY[0x1E0DEAF48]);
  lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item();
  swift_bridgeObjectRetain();
  ForEach<>.init(_:content:)();
  v7 = static Animation.spring(response:dampingFraction:blendDuration:)();
  v8 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  result = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(__n128 *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  return result;
}

void type metadata accessor for [_NavigationStackStyleConfiguration.Item]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [_NavigationStackStyleConfiguration.Item])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [_NavigationStackStyleConfiguration.Item]);
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationStackStyleConfiguration.Item, &type metadata for _NavigationStackStyleConfiguration.Item);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item);
  }
  return result;
}

uint64_t outlined init with copy of _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _NavigationStackStyleConfiguration.Item(a2, a1);
  return a2;
}

void type metadata accessor for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>)
  {
    type metadata accessor for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>();
    lazy protocol witness table accessor for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>();
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>);
  }
}

void type metadata accessor for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>)
  {
    type metadata accessor for [_NavigationStackStyleConfiguration.Item]();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [_NavigationStackStyleConfiguration.Item] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [_NavigationStackStyleConfiguration.Item], MEMORY[0x1E0DEAF48]);
    lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>);
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationStackStyleConfiguration.Item.ID, &type metadata for _NavigationStackStyleConfiguration.Item.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationStackStyleConfiguration.Item.ID, &type metadata for _NavigationStackStyleConfiguration.Item.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>();
    v2 = &protocol witness table for _NavigationStackStyleConfiguration.Item;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void type metadata accessor for _AnimationModifier<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnimationModifier<Int>)
  {
    v0 = type metadata accessor for _AnimationModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnimationModifier<Int>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, MEMORY[0x1E0CE74D8]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _AnimationModifier<Int> and conformance _AnimationModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnimationModifier<Int>, MEMORY[0x1E0CE45E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>>)
  {
    type metadata accessor for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>();
    type metadata accessor for _AnimationModifier<Int>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>>);
  }
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

void Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)()
{
  type metadata accessor for Slider();
}

uint64_t sub_1871CFD38(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD, uint64_t);
  uint64_t v54;
  uint64_t result;
  void (*v56)(_QWORD, uint64_t);
  uint64_t v57;
  _QWORD v58[4];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v9 = a1[19];
  *(_QWORD *)(v7 - 328) = v9;
  *(_BYTE *)(v1 + v9) = 0;
  v10 = v1 + a1[21];
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  v11 = type metadata accessor for Binding();
  v13 = type metadata accessor for Clamping(0, v6, v4, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Clamping<A>, v13);
  *(_QWORD *)(v7 - 264) = v11;
  Binding.projecting<A>(_:)();
  v14 = *(_QWORD *)(v7 - 112);
  v15 = *(_QWORD *)(v7 - 104);
  *(_QWORD *)v1 = *(_QWORD *)(v7 - 120);
  *(_QWORD *)(v1 + 8) = v14;
  *(_QWORD *)(v1 + 16) = v15;
  v16 = *(_QWORD *)(v7 - 200);
  *(_QWORD *)(v1 + 48) = closure #1 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(*(_QWORD *)(v7 - 216), v16, v3, v6);
  *(_QWORD *)(v7 - 176) = v16;
  *(_QWORD *)(v7 - 168) = v3;
  *(_QWORD *)(v7 - 160) = v6;
  *(_QWORD *)(v7 - 152) = v5;
  *(_QWORD *)(v7 - 352) = v5;
  *(_QWORD *)(v7 - 344) = v2;
  *(_QWORD *)(v7 - 144) = v2;
  *(_QWORD *)(v7 - 136) = v4;
  *(_QWORD *)(v7 - 336) = v4;
  *(_QWORD *)(v7 - 360) = v6;
  v17 = type metadata accessor for Optional();
  v18 = MEMORY[0x1E0DEDCE8];
  v19 = MEMORY[0x1E0DEB070];
  *(_QWORD *)(v7 - 272) = v17;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:), v7 - 192, v18, v19, v20, v7 - 120);
  *(_QWORD *)(v7 - 368) = 0;
  v21 = *(double *)(v7 - 120);
  if (*(_BYTE *)(v7 - 112))
    v21 = 0.1;
  *(double *)(v1 + 40) = v21;
  v22 = *(_QWORD *)(v7 - 248);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(v7 - 240);
  *(_QWORD *)(v1 + 32) = v22;
  v23 = *(_QWORD *)(v3 - 8);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  v24(v1 + a1[17], *(_QWORD *)(v7 - 224), v3);
  v25 = v1 + a1[18];
  v26 = *(_QWORD *)(v7 - 232);
  *(_QWORD *)(v7 - 240) = v3;
  v24(v25, v26, v3);
  *(_BYTE *)(v1 + *(_QWORD *)(v7 - 328)) = *(_DWORD *)(v7 - 288);
  v27 = *(void **)v10;
  v28 = *(void **)(v10 + 8);
  v29 = *(void **)(v10 + 16);
  v30 = *(void **)(v10 + 24);
  swift_retain();
  v31 = v27;
  v32 = *(_QWORD *)(v7 - 200);
  v33 = v29;
  v34 = *(_QWORD *)(v7 - 256);
  outlined consume of AccessibilitySliderValue?(v31, v28, v33, v30);
  *(_OWORD *)v10 = *(_OWORD *)(v7 - 304);
  v35 = *(_QWORD *)(v7 - 320);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 - 312);
  *(_QWORD *)(v10 + 24) = v35;
  v36 = v1 + a1[20];
  v37 = *(_QWORD *)(v32 - 8);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v36, v34, v32);
  if (!*(_QWORD *)(v7 - 280))
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v34, v32);
    v56 = *(void (**)(_QWORD, uint64_t))(v23 + 8);
    v57 = *(_QWORD *)(v7 - 240);
    v56(*(_QWORD *)(v7 - 232), v57);
    v56(*(_QWORD *)(v7 - 224), v57);
    (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v7 - 272) - 8) + 8))(*(_QWORD *)(v7 - 216));
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v7 - 264) - 8) + 8))(*(_QWORD *)(v7 - 208));
    v52 = 0;
    goto LABEL_7;
  }
  v40 = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 288) = v23;
  *(_QWORD *)(v7 - 120) = v40;
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = *(_QWORD *)(v7 - 240);
  v58[2] = v32;
  v58[3] = v41;
  v42 = *(_QWORD *)(v7 - 352);
  v59 = *(_QWORD *)(v7 - 360);
  v60 = v42;
  v43 = *(_QWORD *)(v7 - 336);
  v61 = *(_QWORD *)(v7 - 344);
  v62 = v43;
  type metadata accessor for SliderMark(255, v59, v43, v44);
  v45 = type metadata accessor for Array();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for SliderMark<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderMark);
  v47 = v46;
  v48 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v45);
  v49 = *(_QWORD *)(v7 - 368);
  v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:), (uint64_t)v58, v45, v47, MEMORY[0x1E0DEDCE8], v48, MEMORY[0x1E0DEDD18], v50);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 - 120) = v51;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((_QWORD **)(v7 - 120));
  if (!v49)
  {
    swift_bridgeObjectRelease();
    v52 = specialized _copyCollectionToContiguousArray<A>(_:)(*(_QWORD *)(v7 - 120), (uint64_t (*)(uint64_t *, _QWORD *))closure #4 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:), 0);
    swift_release();
    swift_release();
    (*(void (**)(_QWORD, _QWORD))(v37 + 8))(*(_QWORD *)(v7 - 256), *(_QWORD *)(v7 - 200));
    v53 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 288) + 8);
    v54 = *(_QWORD *)(v7 - 240);
    v53(*(_QWORD *)(v7 - 232), v54);
    v53(*(_QWORD *)(v7 - 224), v54);
    (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v7 - 272) - 8) + 8))(*(_QWORD *)(v7 - 216));
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v7 - 264) - 8) + 8))(*(_QWORD *)(v7 - 208));
LABEL_7:
    *(_QWORD *)(v1 + 56) = v52;
    return result;
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t closure #1 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  double v22;
  double v23[2];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v23 - v9;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v23 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a1, v6, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v10, a4);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v20, a4);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  v22 = round(1.0 / v23[1]);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v20, a4);
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v22 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v22 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)v22 + 1;
  if (__OFADD__((uint64_t)v22, 1))
LABEL_11:
    __break(1u);
  return result;
}

uint64_t closure #2 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  lazy protocol witness table accessor for type Double and conformance Double();
  return BinaryFloatingPoint.init<A>(_:)();
}

uint64_t closure #3 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X6>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for SliderMark(0, a2, a3, a2);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v15 - v11, a1, v10);
  return SliderMark<>.init<A>(_:)((uint64_t)v12, a2, a3, a4);
}

BOOL closure #4 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(double *)(a1 + 32);
  v3 = *(double *)(a2 + 32);
  if (v2 == v3)
  {
    static os_log_type_t.fault.getter();
    v4 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v5 = swift_allocObject();
    v6 = MEMORY[0x1E0DEB070];
    *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
    v7 = MEMORY[0x1E0DEB100];
    *(_QWORD *)(v5 + 56) = v6;
    *(_QWORD *)(v5 + 64) = v7;
    *(double *)(v5 + 32) = v2;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
  }
  return v2 == v3;
}

void Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[13];
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v48 = a8;
  v65 = a7;
  v66 = a6;
  v51 = a5;
  v50 = a4;
  v67 = a3;
  v54 = a2;
  v68 = a1;
  v49 = a9;
  v71 = a18;
  v52 = a17;
  v70 = a16;
  v72 = a15;
  v45[5] = a13;
  v45[6] = a12;
  v47 = a11;
  v45[11] = a10;
  v64 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v45[9] = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v20 + 24);
  v73 = type metadata accessor for ClosedRange();
  v22 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v22, v23);
  v45[7] = (char *)v45 - v24;
  v63 = *(_QWORD *)(a13 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v61 = (char *)v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v59 = (char *)v45 - v30;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62 = type metadata accessor for Binding();
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v31);
  v56 = (char *)v45 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v58 = (char *)v45 - v35;
  v57 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v57, v36);
  v55 = (char *)v45 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v53 = (char *)v45 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  MEMORY[0x1E0C80A78](v43, v44);
  v46 = *(_QWORD *)(v20 + 8);
  v74 = a14;
  v75 = v46;
  v76 = v21;
  v77 = a18;
  v45[4] = v21;
  type metadata accessor for Normalizing();
}

void sub_1871D08C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, _QWORD);
  uint64_t v24;

  *(_QWORD *)(v15 - 512) = *(_QWORD *)(a1 - 8);
  v16 = MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 16);
  v20 = v9;
  v21 = v9;
  v22 = *(_QWORD *)(v15 - 432);
  v19(v20, v22, v12, v16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v10, v22 + *(int *)(*(_QWORD *)(v15 - 280) + 36), v12);
  *(_QWORD *)(v15 - 488) = v13;
  v23 = *(void (**)(uint64_t, _QWORD, _QWORD))(v13 + 16);
  *(_QWORD *)(v15 - 584) = v23;
  v24 = *(_QWORD *)(v15 - 440);
  v23(v24, *(_QWORD *)(v15 - 328), *(_QWORD *)(v15 - 408));
  *(_QWORD *)(v15 - 592) = v21;
  Normalizing.init(min:max:stride:)(v21, v10, v24, v12, *(_QWORD *)(v15 - 504), v14, *(_QWORD *)(v15 - 296), (uint64_t)v18);
}

void sub_1871D09A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_QWORD *)(v15 - 600) = v13;
  v16 = type metadata accessor for Binding();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Normalizing<A>, v14);
  v17 = *(_QWORD *)(v15 - 400);
  *(_QWORD *)(v15 - 504) = v14;
  Binding.projecting<A>(_:)();
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v15 - 384) + 16))(*(_QWORD *)(v15 - 416), v17, *(_QWORD *)(v15 - 368));
  v18 = *(_QWORD *)(v15 - 560);
  v19 = *(_QWORD *)(v15 - 568);
  *(_QWORD *)(v15 - 256) = v18;
  *(_QWORD *)(v15 - 248) = v19;
  v20 = *(_QWORD *)(v15 - 288);
  *(_QWORD *)(v15 - 240) = v13;
  *(_QWORD *)(v15 - 232) = v20;
  v21 = *(_QWORD *)(v15 - 448);
  *(_QWORD *)(v15 - 224) = *(_QWORD *)(v15 - 304);
  *(_QWORD *)(v15 - 216) = v21;
  *(_QWORD *)(v15 - 208) = v9;
  *(_QWORD *)(v15 - 200) = v11;
  *(_QWORD *)(v15 - 528) = v11;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:), v15 - 272, MEMORY[0x1E0DEDCE8], *(_QWORD *)(v15 - 312), v22, *(_QWORD *)(v15 - 424));
  *(_QWORD *)(v15 - 608) = 0;
  v23 = *(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v15 - 360) + 16);
  v24 = v19;
  v23(*(_QWORD *)(v15 - 392), *(_QWORD *)(v15 - 336), v19);
  v23(*(_QWORD *)(v15 - 376), *(_QWORD *)(v15 - 344), v19);
  *(_QWORD *)(v15 - 544) = v16;
  MEMORY[0x18D75B9C8](v16);
  v25 = *(_QWORD *)(v15 - 280);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_QWORD *)(v15 - 552);
  v28 = *(_QWORD *)(v15 - 432);
  (*(void (**)(uint64_t))(v26 + 16))(v27);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v25);
  v29 = v10;
  v30 = *(_QWORD *)(v15 - 600);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 - 584))(*(_QWORD *)(v15 - 440), v12, v29);
  v31 = *(_QWORD *)(v15 - 520);
  v32 = *(_QWORD *)(v15 - 536);
  AccessibilityBoundedNumber.init<A>(for:in:by:)();
  v33 = *(_OWORD *)(v15 - 112);
  *(_OWORD *)(v15 - 176) = *(_OWORD *)(v15 - 128);
  *(_OWORD *)(v15 - 160) = v33;
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 352) + 16))(v32, v31, v18);
  v36 = *(_QWORD *)(v15 - 496);
  if (v36)
  {
    *(_QWORD *)(v15 - 440) = &a9;
    *(_QWORD *)(v15 - 184) = v36;
    MEMORY[0x1E0C80A78](v34, v35);
    v49 = v18;
    v50 = v24;
    v37 = v24;
    v38 = *(_QWORD *)(v15 - 288);
    v51 = v30;
    v52 = v38;
    v39 = *(_QWORD *)(v15 - 448);
    v53 = *(_QWORD *)(v15 - 304);
    v54 = v39;
    v55 = *(_QWORD *)(v15 - 296);
    v56 = v28;
    type metadata accessor for SliderMark(255, v30, v39, v40);
    v41 = type metadata accessor for Array();
    v43 = (char *)type metadata accessor for SliderMark(0, *(_QWORD *)(v15 - 312), v55, v42);
    v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v41);
    v46 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:), (uint64_t)&v48, v41, v43, MEMORY[0x1E0DEDCE8], v44, MEMORY[0x1E0DEDD18], v45);
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = 0;
    v37 = v24;
  }
  v56 = *(_QWORD *)(v15 - 296);
  v55 = *(_QWORD *)(v15 - 304);
  v54 = *(_QWORD *)(v15 - 288);
  v47 = *(_QWORD *)(v15 - 312);
  v52 = v37;
  v53 = v47;
  v50 = v46;
  v51 = v18;
  v49 = v32;
  Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)();
}

uint64_t sub_1871D0D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 352) + 8))(v3, v4);
  v6 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 360) + 8);
  v6(*(_QWORD *)(v5 - 344), v1);
  v6(*(_QWORD *)(v5 - 336), v1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 488) + 8))(*(_QWORD *)(v5 - 328), *(_QWORD *)(v5 - 408));
  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v5 - 544) - 8) + 8))(*(_QWORD *)(v5 - 320));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 384) + 8))(*(_QWORD *)(v5 - 400), *(_QWORD *)(v5 - 368));
  (*(void (**)(uint64_t, _QWORD))(v0 + 8))(v2, *(_QWORD *)(v5 - 280));
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 512) + 8))(*(_QWORD *)(v5 - 528), *(_QWORD *)(v5 - 504));
}

void Normalizing.init(min:max:stride:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  _QWORD v31[8];
  uint64_t v32;
  char *v33;
  uint64_t AssociatedTypeWitness;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v38 = a7;
  v41 = a5;
  v42 = a3;
  v43 = a2;
  v44 = a1;
  swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v36 = *(_QWORD *)(v32 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v33 = (char *)v31 - v12;
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v31[6] = *(_QWORD *)(v13 - 8);
  v31[7] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v31[5] = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v31[4] = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v35 = (char *)v31 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v39 = (char *)v31 - v26;
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v37 = (char *)v31 - v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a4 - 8) + 16))(a8, v44, a4, v29);
  v45 = a4;
  v46 = v41;
  v40 = a6;
  v47 = a6;
  v48 = v38;
  type metadata accessor for Normalizing();
}

uint64_t sub_1871D1080(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  void (*v46)(_QWORD, uint64_t);
  uint64_t v47;

  v12 = v7 + a1[13];
  v13 = *(_QWORD *)(v10 - 136);
  *(_QWORD *)(v10 - 176) = v5;
  v6(v12, v13, v5);
  v14 = a1[14];
  *(_QWORD *)(v10 - 192) = v7;
  v15 = v7 + v14;
  v16 = *(_QWORD *)(v10 - 144);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v17(v15, v16, v9);
  v17(v2, v16, v9);
  *(_QWORD *)(v10 - 152) = v8;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v2, 1, v1) == 1)
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v18(v2, v9);
    v19 = *(_QWORD *)(v10 - 176);
    v21 = *(_QWORD *)(v10 - 136);
    v20 = *(_QWORD *)(v10 - 128);
    dispatch thunk of Strideable.distance(to:)();
    v18(v16, v9);
    v22 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v22(v21, v19);
    v22(v20, v19);
    v23 = *(_QWORD *)(v10 - 192);
    v24 = *(_QWORD *)(v10 - 152);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 32))(v23 + a1[16], *(_QWORD *)(v10 - 168), v1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v23 + a1[15], 1, 1, v1);
  }
  else
  {
    *(_QWORD *)(v10 - 296) = v4;
    *(_QWORD *)(v10 - 288) = v3;
    *(_QWORD *)(v10 - 280) = v9;
    v26 = *(_QWORD *)(v10 - 152);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
    v28 = *(_QWORD *)(v10 - 200);
    *(_QWORD *)(v10 - 304) = v27;
    v27(v28, v2, v1);
    v29 = *(_QWORD *)(v10 - 272);
    dispatch thunk of Strideable.distance(to:)();
    v30 = *(_QWORD *)(v10 - 168);
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v31 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    *(_QWORD *)(v10 - 184) = v31;
    v31(v29, v1);
    v32 = *(_QWORD *)(v10 - 256);
    v33 = *(_QWORD *)(v10 - 248);
    v34 = *(_QWORD *)(v10 - 264);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v34, *MEMORY[0x1E0DED508], v33);
    v35 = a1;
    v36 = *(_QWORD *)(v10 - 216);
    dispatch thunk of FloatingPoint.rounded(_:)();
    v37 = v34;
    v38 = *(_QWORD *)(v10 - 176);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v37, v33);
    v39 = *(void (**)(uint64_t, uint64_t))(v10 - 184);
    v39(v30, v1);
    v40 = v35;
    v41 = *(_QWORD *)(v10 - 192);
    dispatch thunk of static Numeric.* infix(_:_:)();
    v42 = *(_QWORD *)(v10 - 208);
    v43 = *(_QWORD *)(v10 - 224);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v45 = *(_QWORD *)(v10 - 232);
    MEMORY[0x18D75ECC8](&unk_187C14760, 256, v43, AssociatedConformanceWitness);
    MEMORY[0x18D75EAB8](v45, v1, v42);
    swift_getAssociatedConformanceWitness();
    LOBYTE(v43) = dispatch thunk of static Comparable.> infix(_:_:)();
    v39(v30, v1);
    if ((v43 & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v10 - 288) + 8))(*(_QWORD *)(v10 - 144), *(_QWORD *)(v10 - 280));
      v46 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v10 - 296) + 8);
      v46(*(_QWORD *)(v10 - 136), v38);
      v46(*(_QWORD *)(v10 - 128), v38);
      v39(*(_QWORD *)(v10 - 200), v1);
      v47 = v41 + v40[15];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 - 304))(v47, v36, v1);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 152) + 56))(v47, 0, 1, v1);
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

void closure #1 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Normalizing();
}

uint64_t sub_1871D14C0()
{
  return dispatch thunk of static FloatingPoint./ infix(_:_:)();
}

double Slider.init<>(_:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = *((_BYTE *)a1 + 64);
  outlined consume of AccessibilitySliderValue?((void *)a1[9], (void *)a1[10], (void *)a1[11], (void *)a1[12]);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_WORD *)(a2 + 64) = 1;
  *(_BYTE *)(a2 + 66) = v10;
  result = 0.0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  return result;
}

void Slider.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[30];

  type metadata accessor for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>();
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(a1 + 32);
  type metadata accessor for AccessibilityLabelModifier.ChildModifier(255, v2, v8, v4);
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label();
  v11[0] = v8;
  v11[1] = &protocol witness table for CaptureViewRespondersModifier;
  v7 = MEMORY[0x1E0CE2E70];
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v11);
  v10[1] = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  v9[0] = MEMORY[0x18D75FFDC](v7, v5, v10);
  v9[1] = &protocol witness table for IgnoreViewRespondersModifier;
  MEMORY[0x18D75FFDC](v7, v6, v9);
  type metadata accessor for StaticSourceWriter();
}

void sub_1871D16E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v13 = type metadata accessor for ModifiedContent();
  v9[18] = *(_QWORD *)(v13 - 8);
  v9[5] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = *(_QWORD *)(v10 + 24);
  v9[28] = v16;
  v9[29] = (char *)&a9 - v15;
  v17 = type metadata accessor for ModifiedContent();
  v18 = *(_QWORD *)(v10 + 40);
  v9[27] = v18;
  type metadata accessor for AccessibilityLabelModifier.ChildModifier(255, v16, v18, v19);
  v20 = type metadata accessor for ModifiedContent();
  v21 = type metadata accessor for ModifiedContent();
  v22 = lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel();
  v9[8] = v22;
  v9[88] = v18;
  v9[89] = &protocol witness table for CaptureViewRespondersModifier;
  v9[86] = MEMORY[0x18D75FFDC](v12, v17, v9 + 88);
  v9[87] = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  v9[84] = MEMORY[0x18D75FFDC](v12, v20, v9 + 86);
  v9[85] = v11;
  v23 = MEMORY[0x18D75FFDC](v12, v21, v9 + 84);
  v9[69] = &type metadata for SliderStyleConfiguration.MinimumValueLabel;
  v9[70] = v21;
  v9[3] = v23;
  v9[4] = v21;
  v9[71] = v22;
  v9[72] = v23;
  type metadata accessor for StaticSourceWriter();
}

void sub_1871D1818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v12 = type metadata accessor for ModifiedContent();
  v9[17] = *(_QWORD *)(v12 - 8);
  v9[7] = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v9[26] = (char *)&a9 - v14;
  v15 = lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel();
  v9[9] = v15;
  v9[69] = &type metadata for SliderStyleConfiguration.MaximumValueLabel;
  v9[70] = v11;
  v9[71] = v15;
  v9[72] = v10;
  type metadata accessor for StaticSourceWriter();
}

void sub_1871D188C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(v12 - 8);
  v9[15] = v12;
  v9[16] = v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v9[6] = (uint64_t)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v9[12] = (uint64_t)&a9 - v18;
  v19 = (uint64_t *)v9[35];
  v20 = *v19;
  v21 = v19[1];
  v22 = v19[2];
  v24 = v19[3];
  v23 = v19[4];
  v25 = v19[5];
  v26 = *((unsigned __int8 *)v19 + *(int *)(v10 + 76));
  *((_DWORD *)v9 + 41) = v26;
  v27 = v19[6];
  v28 = v19[7];
  v29 = (uint64_t *)((char *)v19 + *(int *)(v10 + 84));
  v30 = *v29;
  v31 = v29[1];
  v32 = v29[2];
  v33 = v29[3];
  v34 = *v29 == 0;
  if (*v29)
    v35 = v29[1];
  else
    v35 = 0;
  if (*v29)
    v36 = v29[2];
  else
    v36 = 0;
  v9[37] = v31;
  v9[38] = v32;
  v9[23] = v36;
  v9[24] = v35;
  if (v34)
    v37 = 0;
  else
    v37 = v33;
  v9[33] = v33;
  v9[25] = v37;
  v9[96] = v20;
  v9[97] = v21;
  v9[98] = v22;
  v9[99] = v24;
  v9[100] = v23;
  v9[101] = v25;
  v9[102] = v27;
  v38 = v27;
  v9[103] = v28;
  *((_BYTE *)v9 + 832) = v26;
  v9[105] = v30;
  v9[22] = v30;
  v9[106] = v31;
  v9[107] = v32;
  v9[108] = v33;
  v39 = swift_allocObject();
  v9[21] = v39;
  *(_QWORD *)(v39 + 16) = v20;
  *(_QWORD *)(v39 + 24) = v21;
  v9[39] = v20;
  v9[34] = v21;
  *(_QWORD *)(v39 + 32) = v22;
  *v9 = v24;
  v9[1] = v38;
  *(_QWORD *)(v39 + 40) = v24;
  *(_QWORD *)(v39 + 48) = v23;
  v40 = v23;
  v9[36] = v23;
  *(_QWORD *)(v39 + 56) = v25;
  *(_QWORD *)(v39 + 64) = v38;
  *(_QWORD *)(v39 + 72) = v28;
  v41 = v38;
  LODWORD(v38) = *((_DWORD *)v9 + 41);
  *(_BYTE *)(v39 + 80) = v38;
  *(_QWORD *)(v39 + 88) = v30;
  *(_QWORD *)(v39 + 96) = v31;
  v42 = v9[38];
  v43 = (void *)v9[33];
  *(_QWORD *)(v39 + 104) = v42;
  *(_QWORD *)(v39 + 112) = v43;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v20;
  *(_QWORD *)(v44 + 24) = v21;
  *(_QWORD *)(v44 + 32) = v22;
  *(_QWORD *)(v44 + 40) = v24;
  *(_QWORD *)(v44 + 48) = v40;
  *(_QWORD *)(v44 + 56) = v25;
  *(_QWORD *)(v44 + 64) = v41;
  *(_QWORD *)(v44 + 72) = v28;
  *(_BYTE *)(v44 + 80) = v38;
  v45 = (void *)v9[22];
  v46 = v9[37];
  *(_QWORD *)(v44 + 88) = v45;
  *(_QWORD *)(v44 + 96) = v46;
  *(_QWORD *)(v44 + 104) = v42;
  *(_QWORD *)(v44 + 112) = v43;
  v47 = v43;
  v48 = v44;
  v9[2] = v44;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = v45;
  *(_QWORD *)(v49 + 24) = v46;
  v50 = v46;
  *(_QWORD *)(v49 + 32) = v42;
  *(_QWORD *)(v49 + 40) = v47;
  v51 = v9[34];
  *(_QWORD *)(v49 + 48) = v9[39];
  *(_QWORD *)(v49 + 56) = v51;
  *(_QWORD *)(v49 + 64) = v22;
  v52 = *v9;
  v53 = v9[1];
  v54 = v9[36];
  *(_QWORD *)(v49 + 72) = *v9;
  *(_QWORD *)(v49 + 80) = v54;
  *(_QWORD *)(v49 + 88) = v25;
  *(_QWORD *)(v49 + 96) = v53;
  *(_QWORD *)(v49 + 104) = v28;
  *(_BYTE *)(v49 + 112) = *((_DWORD *)v9 + 41);
  *(_QWORD *)(v49 + 120) = v45;
  *(_QWORD *)(v49 + 128) = v50;
  *(_QWORD *)(v49 + 136) = v42;
  *(_QWORD *)(v49 + 144) = v47;
  v55 = v9[24];
  *(_QWORD *)(v11 - 216) = v45;
  *(_QWORD *)(v11 - 208) = v55;
  v56 = v9[25];
  *(_QWORD *)(v11 - 200) = v9[23];
  *(_QWORD *)(v11 - 192) = v56;
  *(_BYTE *)(v11 - 184) = 1;
  v57 = v9[21];
  *(_QWORD *)(v11 - 176) = partial apply for closure #2 in AccessibilitySliderModifier.init(_:value:);
  *(_QWORD *)(v11 - 168) = v57;
  *(_QWORD *)(v11 - 160) = partial apply for closure #3 in AccessibilitySliderModifier.init(_:value:);
  *(_QWORD *)(v11 - 152) = v48;
  *(_QWORD *)(v11 - 144) = partial apply for closure #4 in AccessibilitySliderModifier.init(_:value:);
  *(_QWORD *)(v11 - 136) = v49;
  *(_QWORD *)(v11 - 128) = v52;
  *(_QWORD *)(v11 - 120) = v54;
  swift_retain();
  swift_retain();
  v9[32] = v28;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v59 = (void *)v9[37];
  v58 = (void *)v9[38];
  outlined copy of AccessibilitySliderValue?(v45, v59, v58, v47);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v45, v59, v58, v47);
  outlined copy of AccessibilitySliderValue?(v45, v59, v58, v47);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v45, v59, v58, v47);
  outlined copy of AccessibilitySliderValue?(v45, v59, v58, v47);
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v45, v59, v58, v47);
  outlined copy of AccessibilitySliderValue?(v45, v59, v58, v47);
  swift_retain();
  swift_bridgeObjectRetain();
  v60 = (void *)v9[23];
  v61 = (void *)v9[24];
  v62 = (void *)v9[25];
  outlined copy of AccessibilitySliderValue?(v45, v61, v60, v62);
  outlined copy of AppIntentExecutor?((uint64_t)partial apply for closure #2 in AccessibilitySliderModifier.init(_:value:));
  outlined copy of AppIntentExecutor?((uint64_t)partial apply for closure #3 in AccessibilitySliderModifier.init(_:value:));
  swift_retain();
  swift_retain();
  specialized AccessibilityAdjustableModifier.body(content:)((uint64_t)(v9 + 69));
  outlined consume of AccessibilitySliderValue?(v45, v61, v60, v62);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for closure #2 in AccessibilitySliderModifier.init(_:value:));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for closure #3 in AccessibilitySliderModifier.init(_:value:));
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v45, v61, v60, v62);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for closure #2 in AccessibilitySliderModifier.init(_:value:));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for closure #3 in AccessibilitySliderModifier.init(_:value:));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release_n();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v45, (void *)v9[37], (void *)v9[38], (void *)v9[33]);
  v63 = v9[70];
  v64 = v9[71];
  v65 = v9[74];
  v66 = *((_BYTE *)v9 + 616);
  v67 = v9[82];
  v68 = v9[83];
  v69 = *((_OWORD *)v9 + 36);
  v70 = *(_OWORD *)(v9 + 75);
  v71 = *((_OWORD *)v9 + 39);
  v72 = *((_OWORD *)v9 + 40);
  v9[69] = v9[69];
  v9[70] = v63;
  *((_OWORD *)v9 + 36) = v69;
  v9[71] = v64;
  v9[74] = v65;
  *(_OWORD *)(v9 + 75) = v70;
  *((_BYTE *)v9 + 616) = v66;
  *((_OWORD *)v9 + 39) = v71;
  *((_OWORD *)v9 + 40) = v72;
  v9[82] = v67;
  v9[83] = v68;
  v73 = v9[28];
  v9[58] = v9[31];
  v9[59] = v73;
  v74 = v9[27];
  v9[60] = v9[30];
  v9[61] = v74;
  v9[62] = v9[35];
  v9[25] = lazy protocol witness table accessor for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SliderStyleConfiguration.Label, (uint64_t)partial apply for closure #1 in Slider.body.getter);
}

void sub_1871D1E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = (void *)v9[78];
  v12 = (void *)v9[79];
  v13 = (void *)v9[80];
  v14 = (void *)v9[81];
  v9[24] = v9[83];
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v11, v12, v13, v14);
  swift_release();
  swift_release();
  v9[24] = &a9;
  v15 = v9[30];
  v16 = v9[27];
  v17 = v9[28];
  v9[50] = v9[31];
  v9[51] = v17;
  v9[52] = v15;
  v9[53] = v16;
  v9[54] = v10;
  v9[67] = v9[25];
  v9[68] = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9[5], v9 + 67);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (uint64_t)partial apply for closure #2 in Slider.body.getter);
}

void sub_1871D1F04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v0[18] + 8))(v1, v6);
  v0[42] = v4;
  v0[43] = v7;
  v0[44] = v5;
  v0[45] = v3;
  v0[46] = v0[35];
  v0[65] = v2;
  v0[66] = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC]();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (uint64_t)partial apply for closure #3 in Slider.body.getter);
}

uint64_t sub_1871D1FA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(*(void **)(v0 + 176), *(void **)(v0 + 296), *(void **)(v0 + 304), *(void **)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 8))(v1, v4);
  *(_QWORD *)(v0 + 504) = v2;
  *(_QWORD *)(v0 + 512) = v6;
  v7 = v3;
  v8 = *(_QWORD *)(v0 + 120);
  v9 = MEMORY[0x18D75FFDC](v7, v8, v0 + 504);
  v10 = *(_QWORD *)(v0 + 96);
  static ViewBuilder.buildExpression<A>(_:)(v5, v8, v9);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 128) + 8);
  v11(v5, v8);
  static ViewBuilder.buildBlock<A>(_:)(v10, v8, *(_QWORD *)(v0 + 152));
  return v11(v10, v8);
}

void type metadata accessor for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>)
  {
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleConfiguration.Label, &type metadata for SliderStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleConfiguration.Label, &type metadata for SliderStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleConfiguration.MinimumValueLabel, &type metadata for SliderStyleConfiguration.MinimumValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleConfiguration.MinimumValueLabel, &type metadata for SliderStyleConfiguration.MinimumValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleConfiguration.MaximumValueLabel, &type metadata for SliderStyleConfiguration.MaximumValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleConfiguration.MaximumValueLabel, &type metadata for SliderStyleConfiguration.MaximumValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel);
  }
  return result;
}

void closure #1 in Slider.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLabelModifier.ChildModifier(255, a2, a4, v6);
  type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  type metadata accessor for Slider();
}

uint64_t sub_1871D228C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);

  *(_QWORD *)(v9 - 184) = v7 + *(int *)(a1 + 80);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v2);
  v11 = type metadata accessor for AccessibilityLabelModifier(0, v2, v8, v10);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabelModifier<A>, v11);
  *(_QWORD *)(v9 - 128) = v8;
  *(_QWORD *)(v9 - 120) = &protocol witness table for CaptureViewRespondersModifier;
  v13 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v9 - 144) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v9 - 128);
  *(_QWORD *)(v9 - 136) = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  *(_QWORD *)(v9 - 160) = MEMORY[0x18D75FFDC](v13, v6, v9 - 144);
  *(_QWORD *)(v9 - 152) = &protocol witness table for IgnoreViewRespondersModifier;
  v14 = MEMORY[0x18D75FFDC](v13, v3, v9 - 160);
  View.accessibilityConfiguration<A>(_:)(v14, v2, v11, v8, v12);
  static ViewBuilder.buildExpression<A>(_:)(v5, v3, v14);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 176) + 8);
  v15(v5, v3);
  static ViewBuilder.buildBlock<A>(_:)(v4, v3, *(_QWORD *)(v9 - 168));
  return v15(v4, v3);
}

void closure #2 in Slider.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLabelModifier.ChildModifier(255, a3, a5, v7);
  type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  type metadata accessor for Slider();
}

uint64_t sub_1871D24A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);

  *(_QWORD *)(v9 - 184) = v7 + *(int *)(a1 + 68);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v2);
  v11 = type metadata accessor for AccessibilityLabelModifier(0, v2, v8, v10);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabelModifier<A>, v11);
  *(_QWORD *)(v9 - 128) = v8;
  *(_QWORD *)(v9 - 120) = &protocol witness table for CaptureViewRespondersModifier;
  v13 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v9 - 144) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v9 - 128);
  *(_QWORD *)(v9 - 136) = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  *(_QWORD *)(v9 - 160) = MEMORY[0x18D75FFDC](v13, v6, v9 - 144);
  *(_QWORD *)(v9 - 152) = &protocol witness table for IgnoreViewRespondersModifier;
  v14 = MEMORY[0x18D75FFDC](v13, v3, v9 - 160);
  View.accessibilityConfiguration<A>(_:)(v14, v2, v11, v8, v12);
  static ViewBuilder.buildExpression<A>(_:)(v5, v3, v14);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 176) + 8);
  v15(v5, v3);
  static ViewBuilder.buildBlock<A>(_:)(v4, v3, *(_QWORD *)(v9 - 168));
  return v15(v4, v3);
}

void closure #3 in Slider.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLabelModifier.ChildModifier(255, a3, a5, v7);
  type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  type metadata accessor for Slider();
}

uint64_t sub_1871D26B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);

  *(_QWORD *)(v9 - 184) = v7 + *(int *)(a1 + 72);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v2);
  v11 = type metadata accessor for AccessibilityLabelModifier(0, v2, v8, v10);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabelModifier<A>, v11);
  *(_QWORD *)(v9 - 128) = v8;
  *(_QWORD *)(v9 - 120) = &protocol witness table for CaptureViewRespondersModifier;
  v13 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v9 - 144) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v9 - 128);
  *(_QWORD *)(v9 - 136) = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  *(_QWORD *)(v9 - 160) = MEMORY[0x18D75FFDC](v13, v6, v9 - 144);
  *(_QWORD *)(v9 - 152) = &protocol witness table for IgnoreViewRespondersModifier;
  v14 = MEMORY[0x18D75FFDC](v13, v3, v9 - 160);
  View.accessibilityConfiguration<A>(_:)(v14, v2, v11, v8, v12);
  static ViewBuilder.buildExpression<A>(_:)(v5, v3, v14);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 176) + 8);
  v15(v5, v3);
  static ViewBuilder.buildBlock<A>(_:)(v4, v3, *(_QWORD *)(v9 - 168));
  return v15(v4, v3);
}

void Slider.init<A>(value:in:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v62 = a8;
  v63 = a7;
  v56 = a5;
  v57 = a6;
  v65 = a3;
  v66 = a4;
  v67 = a2;
  v68 = a1;
  v64 = a9;
  v48 = a12;
  v60 = a14;
  v61 = a13;
  v54 = a15;
  v58 = a16;
  v59 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v55 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(a11 - 8);
  v17 = v47;
  MEMORY[0x1E0C80A78](v18, v19);
  v53 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v52 = (char *)&v46 - v23;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v46 - v27;
  v46 = (uint64_t)&v46 - v27;
  v29 = type metadata accessor for ClosedRange();
  v30 = *(_QWORD *)(v29 - 8);
  v49 = v29;
  v50 = v30;
  v31 = v30;
  MEMORY[0x1E0C80A78](v29, v32);
  v34 = (char *)&v46 - v33;
  v35 = type metadata accessor for Binding();
  v36 = *(_QWORD *)(v35 - 8);
  v51 = v35;
  v38 = MEMORY[0x1E0C80A78](v35, v37);
  v40 = (char *)&v46 - v39;
  (*(void (**)(char *, uint64_t, double))(v36 + 16))((char *)&v46 - v39, v68, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v67, v29);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v28, 1, 1, AssociatedTypeWitness);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v42 = (uint64_t)v52;
  v41(v52, v56, a11);
  v43 = (uint64_t)v53;
  v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v41)(v53, v57, a11);
  v45 = (uint64_t)v55;
  v63(v44);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v40, (uint64_t)v34, v46, v65, v66, v42, v43, 1, v64, v45, 0, v59, a11, v48, v61, v60, v54, v58);
}

uint64_t sub_1871D2A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 264) + 8);
  v5(v2, v1);
  v5(v0, v1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 240) + 8))(*(_QWORD *)(v4 - 104), *(_QWORD *)(v4 - 248));
  return (*(uint64_t (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v4 - 96), *(_QWORD *)(v4 - 232));
}

void Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v78 = a8;
  v72 = a6;
  v73 = a7;
  v80 = a4;
  v81 = a5;
  v58 = a3;
  v65 = a1;
  v79 = a9;
  v76 = a15;
  v77 = a14;
  v69 = a16;
  v61 = a2;
  v62 = a12;
  v71 = a10;
  v74 = a11;
  v75 = a17;
  MEMORY[0x1E0C80A78](a1, a2);
  v70 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = *(_QWORD *)(v21 - 8);
  v22 = v55;
  MEMORY[0x1E0C80A78](v23, v24);
  v68 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v67 = (char *)&v55 - v28;
  v59 = a13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v55 - v32;
  v34 = type metadata accessor for ClosedRange();
  v35 = *(_QWORD *)(v34 - 8);
  v60 = v34;
  v36 = v35;
  v63 = v35;
  MEMORY[0x1E0C80A78](v34, v37);
  v39 = (char *)&v55 - v38;
  v56 = (uint64_t)&v55 - v38;
  v40 = type metadata accessor for Binding();
  v41 = *(_QWORD *)(v40 - 8);
  v64 = v40;
  v66 = v41;
  v43 = MEMORY[0x1E0C80A78](v40, v42);
  v45 = (char *)&v55 - v44;
  (*(void (**)(char *, uint64_t, double))(v46 + 16))((char *)&v55 - v44, a1, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v39, a2, v34);
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
  v57 = AssociatedTypeWitness;
  v48(v33, a3, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v33, 0, 1, AssociatedTypeWitness);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v50 = (uint64_t)v67;
  v51 = v62;
  v49(v67, v72, v62);
  v52 = (uint64_t)v68;
  v53 = ((uint64_t (*)(char *, uint64_t, uint64_t))v49)(v68, v73, v51);
  v54 = (uint64_t)v70;
  v78(v53);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v45, v56, (uint64_t)v33, v80, v81, v50, v52, 1, v79, v54, 0, v74, v51, v59, v77, v76, v69, v75);
}

uint64_t sub_1871D2DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 304) + 8);
  v5(v1, v0);
  v5(v2, v0);
  (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v4 - 280), *(_QWORD *)(v4 - 288));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 240) + 8))(*(_QWORD *)(v4 - 256), *(_QWORD *)(v4 - 264));
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 216) + 8))(*(_QWORD *)(v4 - 224), *(_QWORD *)(v4 - 232));
}

void Slider<>.init<A>(value:in:onEditingChanged:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v40 = a5;
  v41 = a7;
  v44 = a3;
  v45 = a4;
  v35[1] = a1;
  v43 = a8;
  v38 = a11;
  v39 = a6;
  v42 = a9;
  v37 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v36 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[0] = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v35 - v18;
  v20 = type metadata accessor for ClosedRange();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)v35 - v23;
  v25 = type metadata accessor for Binding();
  v26 = *(_QWORD *)(v25 - 8);
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v30 = (char *)v35 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)v35 - v29, a1, v25, v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, a2, v20);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v19, 1, 1, AssociatedTypeWitness);
  v32 = (uint64_t)v36;
  v40(v31);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v30, (uint64_t)v24, (uint64_t)v19, v44, v45, v33, v34, 0, v43, v32, 0, v41, MEMORY[0x1E0CE7C38], v35[0], v42, MEMORY[0x1E0CE7C28], v37, v38);
}

uint64_t sub_1871D308C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v5 - 168), v3);
}

void Slider<>.init<A>(value:in:step:onEditingChanged:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a6;
  v46 = a8;
  v49 = a4;
  v50 = a5;
  v37[1] = a2;
  v39 = a1;
  v48 = a9;
  v47 = a11;
  v43 = a13;
  v44 = a7;
  v41 = a3;
  v42 = a12;
  MEMORY[0x1E0C80A78](a1, a2);
  v40 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v37 - v19;
  v21 = type metadata accessor for ClosedRange();
  v22 = *(_QWORD *)(v21 - 8);
  v37[0] = v21;
  v37[2] = v22;
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)v37 - v24;
  v26 = type metadata accessor for Binding();
  v27 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v31 = (char *)v37 - v30;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))((char *)v37 - v30, a1, v26, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, a2, v21);
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v20, v41, AssociatedTypeWitness);
  v33 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v20, 0, 1, AssociatedTypeWitness);
  v34 = (uint64_t)v40;
  v45(v33);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v31, (uint64_t)v25, (uint64_t)v20, v49, v50, v35, v36, 0, v48, v34, 0, v46, MEMORY[0x1E0CE7C38], v38, v47, MEMORY[0x1E0CE7C28], v42, v43);
}

uint64_t sub_1871D32F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 192) + 8))(*(_QWORD *)(v5 - 200), *(_QWORD *)(v5 - 208));
  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v5 - 176), v0);
}

void Slider<>.init<A>(value:in:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[112];

  v29 = a6;
  v30 = a7;
  v31 = a3;
  v32 = a4;
  v33 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v28 - v12;
  v28 = a5;
  v14 = type metadata accessor for ClosedRange();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v28 - v17;
  v19 = type metadata accessor for Binding();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v28 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v28 - v23, v33, v19, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v13, 1, 1, AssociatedTypeWitness);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v24, (uint64_t)v18, (uint64_t)v13, v31, v32, v25, v26, 0, (uint64_t)v34, v27, 0, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C38], v28, MEMORY[0x1E0CE7C28], MEMORY[0x1E0CE7C28], v29, v30);
}

double sub_1871D34F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v5);
  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v6 - 200), v2);
  v7 = *(_QWORD *)(v6 - 184);
  result = *(double *)(v6 - 176);
  v9 = *(_QWORD *)(v6 - 152);
  v10 = *(_BYTE *)(v6 - 128);
  v11 = *(_OWORD *)(v6 - 168);
  v12 = *(_OWORD *)(v6 - 144);
  v13 = *(_OWORD *)(v6 - 120);
  v14 = *(_OWORD *)(v6 - 104);
  *(_QWORD *)v0 = *(_QWORD *)(v6 - 192);
  *(_QWORD *)(v0 + 8) = v7;
  *(double *)(v0 + 16) = result;
  *(_OWORD *)(v0 + 24) = v11;
  *(_QWORD *)(v0 + 40) = v9;
  *(_OWORD *)(v0 + 48) = v12;
  *(_BYTE *)(v0 + 64) = v10;
  *(_OWORD *)(v0 + 72) = v13;
  *(_OWORD *)(v0 + 88) = v14;
  return result;
}

void Slider<>.init<A>(value:in:step:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[112];

  v35 = a7;
  v36 = a8;
  v37 = a4;
  v38 = a5;
  v33 = a2;
  v34 = a3;
  v32 = a1;
  v31 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v30 - v12;
  v14 = type metadata accessor for ClosedRange();
  v15 = *(_QWORD *)(v14 - 8);
  v30[0] = v14;
  v16 = v15;
  v30[1] = v15;
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)v30 - v18;
  v20 = type metadata accessor for Binding();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)v30 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)v30 - v24, a1, v20, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v33, v14);
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v13, v34, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v13, 0, 1, AssociatedTypeWitness);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v25, (uint64_t)v19, (uint64_t)v13, v37, v38, v27, v28, 0, (uint64_t)v39, v29, 0, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C38], v31, MEMORY[0x1E0CE7C28], MEMORY[0x1E0CE7C28], v35, v36);
}

double sub_1871D374C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 264) + 8))(v1, *(_QWORD *)(v7 - 272));
  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v7 - 248), v5);
  v8 = *(_QWORD *)(v7 - 184);
  result = *(double *)(v7 - 176);
  v10 = *(_QWORD *)(v7 - 152);
  v11 = *(_BYTE *)(v7 - 128);
  v12 = *(_OWORD *)(v7 - 168);
  v13 = *(_OWORD *)(v7 - 144);
  v14 = *(_OWORD *)(v7 - 120);
  v15 = *(_OWORD *)(v7 - 104);
  *(_QWORD *)v0 = *(_QWORD *)(v7 - 192);
  *(_QWORD *)(v0 + 8) = v8;
  *(double *)(v0 + 16) = result;
  *(_OWORD *)(v0 + 24) = v12;
  *(_QWORD *)(v0 + 40) = v10;
  *(_OWORD *)(v0 + 48) = v13;
  *(_BYTE *)(v0 + 64) = v11;
  *(_OWORD *)(v0 + 72) = v14;
  *(_OWORD *)(v0 + 88) = v15;
  return result;
}

void protocol witness for Projection.get(base:) in conformance Clamping<A>(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = specialized Clamping.get(base:)(a1);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance Clamping<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Clamping.set(base:newValue:)(a1, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Normalizing.get(base:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v2);
  v4 = (char *)&v6 - v3;
  dispatch thunk of Strideable.distance(to:)();
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
}

uint64_t Normalizing.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, double);
  void (*v45)(char *, uint64_t, uint64_t);
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD v61[2];
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = v3;
  v70 = a2;
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v65 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v64 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v74 = *(_QWORD *)(a3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v61 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v62 = (char *)v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v63 = (char *)v61 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v69 = (char *)v61 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v71 = (char *)v61 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v67 = (char *)v61 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v68 = (char *)v61 - v39;
  v42 = MEMORY[0x1E0C80A78](v40, v41);
  v72 = (char *)v61 - v43;
  v73 = v10;
  v44 = *(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v10 - 8) + 8);
  v75 = a1;
  v44(a1, v10, v42);
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v45(v20, v4 + *(int *)(a3 + 56), v12);
  v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v46(v20, 1, AssociatedTypeWitness) == 1)
  {
    v16 = v20;
  }
  else
  {
    v47 = v20;
    v48 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v48(v68, v47, AssociatedTypeWitness);
    v49 = *(int *)(a3 + 60);
    v61[1] = v4;
    v45(v16, v4 + v49, v12);
    if (v46(v16, 1, AssociatedTypeWitness) != 1)
    {
      v48(v67, v16, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v62, v70, AssociatedTypeWitness);
      v53 = v63;
      dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
      v70 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
      v54 = v69;
      dispatch thunk of static Numeric.* infix(_:_:)();
      v52 = *(void (**)(char *, uint64_t))(v21 + 8);
      v52(v53, AssociatedTypeWitness);
      v55 = v64;
      v56 = v65;
      v57 = v66;
      (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, *MEMORY[0x1E0DED4F0], v66);
      v58 = v71;
      dispatch thunk of FloatingPoint.rounded(_:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
      v52(v54, AssociatedTypeWitness);
      v51 = v72;
      v59 = v68;
      dispatch thunk of static Numeric.* infix(_:_:)();
      v52(v58, AssociatedTypeWitness);
      v52(v67, AssociatedTypeWitness);
      v52(v59, AssociatedTypeWitness);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v68, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v69, v70, AssociatedTypeWitness);
  v50 = v71;
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  swift_getAssociatedConformanceWitness();
  v51 = v72;
  dispatch thunk of static Numeric.* infix(_:_:)();
  v52 = *(void (**)(char *, uint64_t))(v21 + 8);
  v52(v50, AssociatedTypeWitness);
LABEL_7:
  dispatch thunk of Strideable.advanced(by:)();
  return ((uint64_t (*)(char *, uint64_t))v52)(v51, AssociatedTypeWitness);
}

uint64_t Normalizing.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  Optional<A>.hash(into:)();
  Optional<A>.hash(into:)();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static Normalizing.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[17];
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35[15] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, AssociatedTypeWitness);
  v35[7] = (char *)v35 - v10;
  v35[14] = v11;
  v12 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v35[11] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v13);
  v35[8] = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v35[16] = (char *)v35 - v17;
  v35[13] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v35[6] = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v35[10] = (char *)v35 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v35[9] = (char *)v35 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v35[12] = (char *)v35 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  MEMORY[0x1E0C80A78](v32, v33);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v38 = a3;
    v39 = a4;
    v40 = a5;
    v41 = v36;
    type metadata accessor for Normalizing();
  }
  return 0;
}

Swift::Int Normalizing.hashValue.getter()
{
  Hasher.init(_seed:)();
  Normalizing.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Normalizing<A>()
{
  Hasher.init(_seed:)();
  Normalizing.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Normalizing<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static Normalizing.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

double specialized AccessibilityAdjustableModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  Swift::UInt32 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28[3];
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = *(void **)v1;
  v5 = *(void **)(v1 + 8);
  v7 = *(void **)(v1 + 16);
  v6 = *(void **)(v1 + 24);
  v8 = *(_BYTE *)(v1 + 32) & 1;
  v9 = swift_allocObject();
  v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v9 + 96) = v10;
  *(_QWORD *)(v9 + 112) = *(_QWORD *)(v1 + 96);
  v11 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v9 + 32) = v11;
  v12 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v9 + 64) = v12;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
  v14 = AccessibilityActionHandlerSeed++;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>(0);
  *(_QWORD *)(v13 + 56) = v15;
  *(_QWORD *)(v13 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v16 = swift_allocObject();
  *(_QWORD *)(v13 + 32) = v16;
  *(_BYTE *)(v16 + 16) = v8;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 2;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 96) = partial apply for specialized closure #1 in AccessibilityAdjustableModifier.body(content:);
  *(_QWORD *)(v16 + 104) = v9;
  *(_DWORD *)(v16 + 112) = v14;
  *(_BYTE *)(v13 + 72) = 0;
  swift_retain();
  outlined retain of AccessibilityAdjustableModifier<ResolvedSliderStyle, AccessibilitySliderValue>(v2);
  specialized View.accessibility<A>(_:_:isEnabled:)(v13, 1, (uint64_t)v28);
  swift_release();
  swift_bridgeObjectRelease();
  if (v4)
  {
    v17 = v6;
    v18 = v4;
    v19 = v5;
    v20 = v7;
    specialized closure #2 in AccessibilityAdjustableModifier.body(content:)(v18, v5, v7, v6, v28, v2);
    outlined consume of AccessibilitySliderValue?(v4, v5, v7, v6);
  }
  v21 = v28[1];
  v22 = v28[2];
  v23 = v30;
  v24 = v32;
  v25 = v35;
  v26 = v36;
  *(_QWORD *)a1 = v28[0];
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v22;
  *(_OWORD *)(a1 + 24) = v29;
  *(_QWORD *)(a1 + 40) = v23;
  *(_OWORD *)(a1 + 48) = v31;
  *(_BYTE *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 72) = v33;
  result = *(double *)&v34;
  *(_OWORD *)(a1 + 88) = v34;
  *(_QWORD *)(a1 + 104) = v25;
  *(_QWORD *)(a1 + 112) = v26;
  return result;
}

uint64_t specialized closure #2 in AccessibilityAdjustableModifier.body(content:)(void *a1, void *a2, void *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;
  void *v39;
  void *v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[3];
  _OWORD v53[3];
  uint64_t v54[6];
  _BYTE v55[56];
  uint64_t v56;

  v8 = a5[1];
  v56 = *a5;
  v9 = a5[2];
  v10 = a5[4];
  v11 = a5[5];
  v44 = a5[6];
  v45 = a5[3];
  v50 = a5[7];
  v51 = v8;
  v43 = *((_BYTE *)a5 + 64);
  v12 = (void *)a5[9];
  v13 = (void *)a5[10];
  v46 = v12;
  v15 = (void *)a5[11];
  v14 = (void *)a5[12];
  v16 = a5[13];
  v49 = a5[14];
  v54[0] = (uint64_t)a1;
  v54[1] = (uint64_t)a2;
  v54[2] = (uint64_t)a3;
  v54[3] = (uint64_t)a4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v17 = v10;
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v12, v13, v15, v14);
  lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  swift_retain();
  swift_retain();
  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  AccessibilityValueStorage.init<A>(_:description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v55, (uint64_t)v54);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  v22 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v22, v53);
  swift_bridgeObjectRelease();
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v54, (uint64_t)v52);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v52);
  v23 = v16;
  specialized AccessibilityProperties.subscript.getter(*(_QWORD *)(v16 + 16), v52);
  specialized Optional<A>.merge(with:)((uint64_t)v53);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v52);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v53);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  v47 = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v12, v13, v15, v14);
  swift_retain();
  swift_retain();
  outlined destroy of AccessibilityValueStorage?((uint64_t)v54);
  outlined destroy of AccessibilityValueStorage((uint64_t)v55);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v12, v13, v15, v14);
  swift_release();
  swift_release();
  v24 = swift_allocObject();
  v25 = *(_OWORD *)(a6 + 80);
  *(_OWORD *)(v24 + 80) = *(_OWORD *)(a6 + 64);
  *(_OWORD *)(v24 + 96) = v25;
  *(_QWORD *)(v24 + 112) = *(_QWORD *)(a6 + 96);
  v26 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)a6;
  *(_OWORD *)(v24 + 32) = v26;
  v27 = *(_OWORD *)(a6 + 48);
  *(_OWORD *)(v24 + 48) = *(_OWORD *)(a6 + 32);
  *(_OWORD *)(v24 + 64) = v27;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for specialized closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:);
  *(_QWORD *)(v28 + 24) = v24;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_187BF9830;
  LODWORD(v16) = AccessibilityActionHandlerSeed++;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilitySetValueAction>>(0);
  *(_QWORD *)(v29 + 56) = v30;
  *(_QWORD *)(v29 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v31 = swift_allocObject();
  *(_QWORD *)(v29 + 32) = v31;
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 2;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_OWORD *)(v31 + 64) = 0u;
  *(_QWORD *)(v31 + 80) = 0;
  *(_QWORD *)(v31 + 88) = partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:);
  *(_QWORD *)(v31 + 96) = v28;
  *(_DWORD *)(v31 + 104) = v16;
  *(_BYTE *)(v29 + 72) = 0;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  outlined retain of AccessibilityAdjustableModifier<ResolvedSliderStyle, AccessibilitySliderValue>(a6);
  swift_retain();
  swift_retain();
  v32 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v32);
  swift_bridgeObjectRelease();
  v33 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v33);
  v54[0] = specialized AccessibilityProperties.subscript.getter(*(_QWORD *)(v23 + 16));
  v34 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v34);
  specialized AccessibilityProperties.subscript.setter(v54[0]);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v46, v13, v15, v14);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v46, v13, v15, v14);
  swift_release();
  swift_release();
  v39 = (void *)a5[10];
  v41 = (void *)a5[9];
  v37 = (void *)a5[11];
  v36 = (void *)a5[12];
  *a5 = v56;
  a5[1] = v51;
  a5[2] = v9;
  a5[3] = v45;
  a5[4] = v47;
  a5[5] = v11;
  a5[6] = v44;
  a5[7] = v50;
  *((_BYTE *)a5 + 64) = v43;
  a5[9] = (uint64_t)v46;
  a5[10] = (uint64_t)v13;
  a5[11] = (uint64_t)v15;
  a5[12] = (uint64_t)v14;
  a5[13] = v23;
  a5[14] = v49;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v41, v39, v37, v36);
  swift_release();
  return swift_release();
}

_QWORD *partial apply for closure #2 in AccessibilitySliderModifier.init(_:value:)()
{
  uint64_t v0;

  return closure #2 in AccessibilitySliderModifier.init(_:value:)((_QWORD *)(v0 + 16));
}

_QWORD *partial apply for closure #3 in AccessibilitySliderModifier.init(_:value:)()
{
  uint64_t v0;

  return closure #3 in AccessibilitySliderModifier.init(_:value:)((_QWORD *)(v0 + 16));
}

uint64_t sub_1871D4E00()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {

  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(void **)(v0 + 120);
  if (v2)
  {

  }
  return swift_deallocObject();
}

void partial apply for closure #4 in AccessibilitySliderModifier.init(_:value:)(double *a1)
{
  uint64_t v1;

  closure #4 in AccessibilitySliderModifier.init(_:value:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), (_QWORD *)(v1 + 48));
}

id outlined copy of AccessibilitySliderValue?(id result, void *a2, void *a3, void *a4)
{
  void *v5;
  id v6;
  id v7;
  id v8;

  if (result)
  {
    v5 = result;
    v6 = a4;
    v7 = v5;
    v8 = a2;
    return a3;
  }
  return result;
}

void outlined consume of AccessibilitySliderValue?(void *a1, void *a2, void *a3, void *a4)
{
  if (a1)
  {

  }
}

uint64_t partial apply for closure #1 in Slider.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Slider.body.getter);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle;
  if (!lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedSliderStyle, &type metadata for ResolvedSliderStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle;
  if (!lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedSliderStyle, &type metadata for ResolvedSliderStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle);
  }
  return result;
}

uint64_t partial apply for closure #2 in Slider.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in Slider.body.getter);
}

uint64_t partial apply for closure #3 in Slider.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in Slider.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in Slider<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Slider()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Slider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  __int128 v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8 + v7;
  v10 = *(_QWORD *)(v4 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 + 1;
  v13 = *(_QWORD *)(v10 + 64) + 7;
  v14 = (*(_DWORD *)(v10 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v15 = *a2;
  *a1 = *a2;
  if ((v11 | v7) > 7
    || v14 != 0
    || ((v13 + ((v11 + 1 + v8 + ((v8 + v7 + ((v7 + 64) & ~v7)) & ~v7)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v18 = v15 + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16));
    swift_retain();
  }
  else
  {
    v19 = ~v7;
    v20 = a2[2];
    a1[1] = a2[1];
    a1[2] = v20;
    v21 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8);
    *v24 = *v25;
    v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
    v27 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)v27;
    v27 += 15;
    *v26 = v28;
    v53 = ~v11;
    v54 = a1;
    v29 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v29 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
    v30 = ((unint64_t)v29 + v7 + 8) & ~v7;
    v31 = ((v27 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7;
    v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    v51 = v4;
    v52 = v13;
    v50 = v12;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v32(v30, v31, v5);
    v33 = (v9 + v30) & v19;
    v34 = (v9 + v31) & v19;
    v32(v33, v34, v5);
    v35 = v34 + v8;
    *(_BYTE *)(v33 + v8) = *(_BYTE *)(v34 + v8);
    v36 = (v50 + v33 + v8) & v53;
    v37 = (v50 + v35) & v53;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v36, v37, v51);
    v38 = (v52 + v36) & 0xFFFFFFFFFFFFFFF8;
    v39 = (v52 + v37) & 0xFFFFFFFFFFFFFFF8;
    v40 = *(void **)v39;
    if (*(_QWORD *)v39 < 0xFFFFFFFFuLL)
    {
      v48 = *(_OWORD *)(v39 + 16);
      *(_OWORD *)v38 = *(_OWORD *)v39;
      *(_OWORD *)(v38 + 16) = v48;
    }
    else
    {
      *(_QWORD *)v38 = v40;
      v41 = *(void **)(v39 + 8);
      *(_QWORD *)(v38 + 8) = v41;
      v42 = *(void **)(v39 + 16);
      *(_QWORD *)(v38 + 16) = v42;
      v43 = *(void **)(v39 + 24);
      *(_QWORD *)(v38 + 24) = v43;
      v44 = v40;
      v45 = v41;
      v46 = v42;
      v47 = v43;
    }
    return v54;
  }
  return (uint64_t *)v18;
}

void destroy for Slider(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id *v14;

  swift_release();
  swift_release();
  swift_release();
  v4 = (((((((a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v7 + 8) & ~v7;
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v8, v5);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = (v10 + v7 + v8) & ~v7;
  v9(v11, v5);
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v13 = (v10 + *(unsigned __int8 *)(v12 + 80) + v11 + 1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  v14 = (id *)((*(_QWORD *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)*v14 >= 0xFFFFFFFF)
  {

  }
}

_QWORD *initializeWithCopy for Slider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  __int128 v39;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  v7 = v6[1];
  *v5 = *v6;
  v5[1] = v7;
  v8 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((unint64_t)v12 + v16 + 8) & ~v16;
  v18 = ((unint64_t)v13 + v16 + 8) & ~v16;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v19(v17, v18, v14);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = (v20 + v16 + v17) & ~v16;
  v22 = (v20 + v16 + v18) & ~v16;
  v19(v21, v22, v14);
  v23 = v22 + v20;
  *(_BYTE *)(v21 + v20) = *(_BYTE *)(v22 + v20);
  v24 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 1 + v21 + v20) & ~v25;
  v27 = (v25 + 1 + v23) & ~v25;
  (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v26, v27);
  v28 = *(_QWORD *)(v24 + 64) + 7;
  v29 = (v28 + v26) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v28 + v27) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(void **)v30;
  if (*(_QWORD *)v30 < 0xFFFFFFFFuLL)
  {
    v39 = *(_OWORD *)(v30 + 16);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *(_OWORD *)(v29 + 16) = v39;
  }
  else
  {
    *(_QWORD *)v29 = v31;
    v32 = *(void **)(v30 + 8);
    *(_QWORD *)(v29 + 8) = v32;
    v33 = *(void **)(v30 + 16);
    *(_QWORD *)(v29 + 16) = v33;
    v34 = *(void **)(v30 + 24);
    *(_QWORD *)(v29 + 24) = v34;
    v35 = v31;
    v36 = v32;
    v37 = v33;
    v38 = v34;
  }
  return a1;
}

_QWORD *assignWithCopy for Slider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  __int128 v51;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  v6 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  v8 = v7[1];
  *v6 = *v7;
  v6[1] = v8;
  swift_retain();
  swift_release();
  v9 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = ((unint64_t)v13 + v17 + 8) & ~v17;
  v19 = ((unint64_t)v14 + v17 + 8) & ~v17;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v20(v18, v19, v15);
  v21 = *(_QWORD *)(v16 + 64);
  v22 = (v21 + v17 + v18) & ~v17;
  v23 = (v21 + v17 + v19) & ~v17;
  v20(v22, v23, v15);
  v24 = (_BYTE *)(v22 + v21);
  *v24 = *(_BYTE *)(v23 + v21);
  v25 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (unint64_t)&v24[v26 + 1] & ~v26;
  v28 = (v26 + 1 + v23 + v21) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 24))(v27, v28);
  v29 = *(_QWORD *)(v25 + 64) + 7;
  v30 = (v29 + v27) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v29 + v28) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(void **)v30;
  v33 = *(void **)v31;
  if (*(_QWORD *)v30 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v33 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v30 = v33;
      v44 = *(void **)(v31 + 8);
      *(_QWORD *)(v30 + 8) = v44;
      v45 = *(void **)(v31 + 16);
      *(_QWORD *)(v30 + 16) = v45;
      v46 = *(void **)(v31 + 24);
      *(_QWORD *)(v30 + 24) = v46;
      v47 = v33;
      v48 = v44;
      v49 = v45;
      v50 = v46;
      return a1;
    }
LABEL_7:
    v51 = *(_OWORD *)(v31 + 16);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *(_OWORD *)(v30 + 16) = v51;
    return a1;
  }
  if ((unint64_t)v33 < 0xFFFFFFFF)
  {

    goto LABEL_7;
  }
  *(_QWORD *)v30 = v33;
  v34 = v33;

  v35 = *(void **)(v30 + 8);
  v36 = *(void **)(v31 + 8);
  *(_QWORD *)(v30 + 8) = v36;
  v37 = v36;

  v38 = *(void **)(v30 + 16);
  v39 = *(void **)(v31 + 16);
  *(_QWORD *)(v30 + 16) = v39;
  v40 = v39;

  v41 = *(void **)(v30 + 24);
  v42 = *(void **)(v31 + 24);
  *(_QWORD *)(v30 + 24) = v42;
  v43 = v42;

  return a1;
}

uint64_t initializeWithTake for Slider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (_OWORD *)((a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)((a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((unint64_t)v11 + v15 + 8) & ~v15;
  v17 = ((unint64_t)v12 + v15 + 8) & ~v15;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  v18(v16, v17, v13);
  v19 = *(_QWORD *)(v14 + 64);
  v20 = (v19 + v15 + v16) & ~v15;
  v21 = (v19 + v15 + v17) & ~v15;
  v18(v20, v21, v13);
  v22 = (_BYTE *)(v20 + v19);
  *v22 = *(_BYTE *)(v21 + v19);
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = (unint64_t)&v22[v24 + 1] & ~v24;
  v26 = (v24 + 1 + v21 + v19) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v25, v26);
  v27 = *(_QWORD *)(v23 + 64) + 7;
  v28 = (_OWORD *)((v27 + v25) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_OWORD *)((v27 + v26) & 0xFFFFFFFFFFFFFFF8);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  return a1;
}

_QWORD *assignWithTake for Slider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  __int128 v35;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  v6 = (_OWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v7 = ((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFF8;
  v8 = *(_OWORD *)v7;
  v7 += 23;
  *v6 = v8;
  swift_release();
  v9 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFF8);
  *v9 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((v7 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((unint64_t)v12 + v16 + 8) & ~v16;
  v18 = ((unint64_t)v13 + v16 + 8) & ~v16;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  v19(v17, v18, v14);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = (v20 + v16 + v17) & ~v16;
  v22 = (v20 + v16 + v18) & ~v16;
  v19(v21, v22, v14);
  v23 = (_BYTE *)(v21 + v20);
  *v23 = *(_BYTE *)(v22 + v20);
  v24 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (unint64_t)&v23[v25 + 1] & ~v25;
  v27 = (v25 + 1 + v22 + v20) & ~v25;
  (*(void (**)(uint64_t, uint64_t))(v24 + 40))(v26, v27);
  v28 = *(_QWORD *)(v24 + 64) + 7;
  v29 = (v28 + v26) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v28 + v27) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(void **)v29;
  if (*(_QWORD *)v29 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)v30 < 0xFFFFFFFFuLL)
  {

LABEL_5:
    v35 = *(_OWORD *)(v30 + 16);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *(_OWORD *)(v29 + 16) = v35;
    return a1;
  }
  *(_QWORD *)v29 = *(_QWORD *)v30;

  v32 = *(void **)(v29 + 8);
  *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);

  v33 = *(void **)(v29 + 16);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);

  v34 = *(void **)(v29 + 24);
  *(_QWORD *)(v29 + 24) = *(_QWORD *)(v30 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for Slider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = v9 + v8;
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = v9 + v11 + 1;
  if (v7 < a2)
  {
    if (((((*(_QWORD *)(v5 + 64) + ((v12 + ((v10 + ((v8 + 64) & ~v8)) & ~v8)) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v7 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X7 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    if (v4 == v7)
      __asm { BR              X3 }
    __asm { BR              X3 }
  }
  v17 = *(_QWORD *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Slider(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = *(unsigned __int8 *)(v5 + 80);
  if (v8 >= a3)
  {
    v12 = 0u;
    if (a2 <= v8)
      goto LABEL_20;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64)
           + *(unsigned __int8 *)(v6 + 80)
           + 1
           + ((*(_DWORD *)(v5 + 64) + (_DWORD)v9 + (((_DWORD)v9 + 64) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~*(unsigned __int8 *)(v6 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v10 = a3 - v8 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v8)
LABEL_20:
      __asm { BR              X6 }
  }
  if (((*(_DWORD *)(v6 + 64)
       + ((*(_DWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + 1
         + ((*(_DWORD *)(v5 + 64) + (_DWORD)v9 + (((_DWORD)v9 + 64) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~*(unsigned __int8 *)(v6 + 80))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v13 = ~v8 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64)+ ((*(_QWORD *)(v5 + 64)+ *(unsigned __int8 *)(v6 + 80)+ 1+ ((*(_QWORD *)(v5 + 64) + v9 + ((v9 + 64) & ~v9)) & ~v9)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_1871D5EDC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1871D5F68);
}

void sub_1871D5EE4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1871D5EECLL);
  JUMPOUT(0x1871D5F68);
}

void sub_1871D5F00()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871D5F68);
}

void sub_1871D5F08()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871D5F68);
}

void sub_1871D5F10(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (v2 < 0)
      JUMPOUT(0x1871D5F1CLL);
    if (a2 < 0)
      JUMPOUT(0x1871D5F5CLL);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x1871D5F68);
}

void type metadata accessor for Slider()
{
  JUMPOUT(0x18D75FF28);
}

void sub_1871D5FB8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[3];

  v1 = *a1;
  v2 = a1[2];
  type metadata accessor for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLabelModifier.ChildModifier(255, v1, v2, v4);
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label();
  v10[0] = v2;
  v10[1] = &protocol witness table for CaptureViewRespondersModifier;
  v7 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v10);
  v9[1] = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  v8[0] = MEMORY[0x18D75FFDC](v7, v5, v9);
  v8[1] = &protocol witness table for IgnoreViewRespondersModifier;
  MEMORY[0x18D75FFDC](v7, v6, v8);
  type metadata accessor for StaticSourceWriter();
}

void sub_1871D60C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_UNKNOWN **a21,ValueMetadata *a22,uint64_t a23,unint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  type metadata accessor for ModifiedContent();
  v28 = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLabelModifier.ChildModifier(255, v27, v26, v29);
  v30 = type metadata accessor for ModifiedContent();
  v31 = type metadata accessor for ModifiedContent();
  v32 = lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel();
  a20 = v26;
  a21 = &protocol witness table for CaptureViewRespondersModifier;
  a18 = MEMORY[0x18D75FFDC](v25, v28, &a20);
  a16 = MEMORY[0x18D75FFDC](v25, v30, &a18);
  v33 = MEMORY[0x18D75FFDC](v25, v31, &a16);
  a22 = &type metadata for SliderStyleConfiguration.MinimumValueLabel;
  a23 = v31;
  a24 = v32;
  a25 = v33;
  type metadata accessor for StaticSourceWriter();
}

void sub_1871D6194()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1871D61C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[31];

  v3 = type metadata accessor for ModifiedContent();
  v7[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  v7[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v6[0] = MEMORY[0x18D75FFDC](v0, v1, v7);
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v5[0] = MEMORY[0x18D75FFDC](v0, v2, v6);
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v0, v3, v5);
}

void type metadata accessor for Normalizing()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)()
{
  closure #1 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)();
}

uint64_t partial apply for closure #2 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v2[4];
  v5 = v2[7];
  v6 = v2[8];
  v7 = v2[9];
  v8 = type metadata accessor for SliderMark(0, v4, v5, a1);
  return SliderMark.normalized<>(in:)(v7, v8, v6, a2);
}

uint64_t type metadata accessor for Clamping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Clamping);
}

uint64_t partial apply for closure #2 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(uint64_t a1)
{
  return closure #2 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(a1);
}

uint64_t partial apply for closure #3 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #3 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 56), a2);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  char *v27;
  double *v28;
  double *v29;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v29 = __src;
  v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[5 * v11] <= __dst)
        memmove(__dst, a2, 40 * v11);
      v18 = &v4[5 * v11];
      v27 = (char *)v18;
      v29 = v6;
      if (v7 < v6 && v10 >= 40)
      {
        v19 = a3 - 40;
        do
        {
          v20 = (double *)(v19 + 40);
          if (*(v18 - 1) >= *(v6 - 1))
          {
            v27 = (char *)(v18 - 5);
            if (v20 < v18 || v19 >= (unint64_t)v18 || v20 != v18)
            {
              v24 = *(_OWORD *)(v18 - 5);
              v25 = *(_OWORD *)(v18 - 3);
              *(double *)(v19 + 32) = *(v18 - 1);
              *(_OWORD *)v19 = v24;
              *(_OWORD *)(v19 + 16) = v25;
            }
            v21 = v6;
            v18 -= 5;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 5;
            if (v20 != v6 || v19 >= (unint64_t)v6)
            {
              v22 = *(_OWORD *)v21;
              v23 = *(_OWORD *)(v6 - 3);
              *(double *)(v19 + 32) = *(v6 - 1);
              *(_OWORD *)v19 = v22;
              *(_OWORD *)(v19 + 16) = v23;
            }
            v29 = v6 - 5;
            if (v21 <= v7)
              break;
          }
          v19 -= 40;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, (const void **)&v28, &v27);
      return 1;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[5 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = &v4[5 * v9];
    v27 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      v13 = v4;
      while (1)
      {
        if (v6[4] >= v13[4])
        {
          v4 = v13 + 5;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 5;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 5;
          }
        }
        else
        {
          v14 = v6 + 5;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_OWORD *)v15;
        v17 = *((_OWORD *)v15 + 1);
        v7[4] = v15[4];
        *(_OWORD *)v7 = v16;
        *((_OWORD *)v7 + 1) = v17;
LABEL_18:
        v7 += 5;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v28 = v4;
        v29 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t result;
  char *v23;
  double *v24;
  double *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[2 * v13];
      v23 = (char *)v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (double *)(a3 - 16);
        do
        {
          v20 = v19 + 2;
          if (*(v18 - 1) <= *(v6 - 1))
          {
            v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 2;
            if (v21 <= v7)
              break;
          }
          else
          {
            v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 2;
            if (v6 <= v7)
              break;
          }
          v19 -= 2;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (v6[1] <= v15[1])
        {
          v17 = v6 + 2;
          v16 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        else
        {
          v4 = v15 + 2;
          v16 = v15;
          v17 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 2;
          }
        }
        *(_OWORD *)v7 = *(_OWORD *)v16;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[2 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (double *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 2;
          v20 = *(v18 - 2);
          v18 -= 2;
          if (*(v16 - 2) <= v20)
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          else
          {
            v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 2;
            if (v6 <= v7)
              goto LABEL_42;
          }
          v17 -= 2;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 <= *v4)
        {
          v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        else
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v23 = v4;
          v15 = v6;
        }
        v7 += 2;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[2 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (double *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 2;
          v20 = *(v18 - 2);
          v18 -= 2;
          if (*(v16 - 2) >= v20)
          {
            v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 2;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 2;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 2;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  double v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t result;
  char *v59;
  double *v60;
  double *v61;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 63;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 6;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 63;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 6;
  v60 = __dst;
  v61 = __src;
  if (v10 >= v13)
  {
    if (v11 < -63)
      goto LABEL_67;
    v34 = v13 << 6;
    if (__dst != a2 || (double *)((char *)a2 + v34) <= __dst)
      memmove(__dst, a2, v13 << 6);
    v35 = (double *)((char *)v4 + v34);
    v59 = (char *)v4 + v34;
    v61 = v6;
    if (v7 >= v6 || (unint64_t)(v11 - 64) > 0xFFFFFFFFFFFFFF80)
    {
LABEL_66:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v61, (const void **)&v60, &v59);
      return 1;
    }
    v36 = (double *)(a3 - 64);
    v37 = v6;
    while (1)
    {
      v38 = v36 + 8;
      v39 = *(v35 - 7);
      v41 = *((_QWORD *)v37 - 8);
      v37 -= 8;
      v40 = v41;
      v42 = v37[1];
      if (v39 == v42)
      {
        v43 = *(v35 - 4);
        v44 = v37[4];
        v45 = v43 < v44;
        if (v43 == v44
          && (v46 = *(v35 - 3), v47 = v37[5], v45 = v46 < v47, v46 == v47)
          && (v48 = *(v35 - 2), v49 = v37[6], v45 = v48 < v49, v48 == v49))
        {
          v50 = *((char *)v35 - 8);
          v51 = *((char *)v37 + 56);
          if (v50 == v51)
          {
            if (*((_QWORD *)v35 - 8) >= v40)
              goto LABEL_56;
          }
          else if (v50 >= v51)
          {
LABEL_56:
            v59 = (char *)(v35 - 8);
            if (v38 < v35 || v36 >= v35 || v38 != v35)
            {
              v55 = *((_OWORD *)v35 - 4);
              v56 = *((_OWORD *)v35 - 3);
              v57 = *((_OWORD *)v35 - 1);
              *((_OWORD *)v36 + 2) = *((_OWORD *)v35 - 2);
              *((_OWORD *)v36 + 3) = v57;
              *(_OWORD *)v36 = v55;
              *((_OWORD *)v36 + 1) = v56;
            }
            v37 = v6;
            v35 -= 8;
            if (v6 <= v7)
              goto LABEL_66;
            goto LABEL_61;
          }
        }
        else if (!v45)
        {
          goto LABEL_56;
        }
      }
      else if (v42 >= v39)
      {
        goto LABEL_56;
      }
      if (v38 != v6 || v36 >= v6)
      {
        v52 = *(_OWORD *)v37;
        v53 = *((_OWORD *)v37 + 1);
        v54 = *((_OWORD *)v37 + 3);
        *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
        *((_OWORD *)v36 + 3) = v54;
        *(_OWORD *)v36 = v52;
        *((_OWORD *)v36 + 1) = v53;
      }
      v61 = v37;
      if (v37 <= v7)
        goto LABEL_66;
LABEL_61:
      v36 -= 8;
      v6 = v37;
      if (v35 <= v4)
        goto LABEL_66;
    }
  }
  if (v8 >= -63)
  {
    v14 = v10 << 6;
    if (__dst != __src || (double *)((char *)__src + v14) <= __dst)
      memmove(__dst, __src, v14);
    v15 = (double *)((char *)v4 + v14);
    v59 = (char *)v4 + v14;
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 64) <= 0xFFFFFFFFFFFFFF80)
    {
      while (1)
      {
        v16 = v6[1];
        v17 = v4[1];
        if (v16 == v17)
        {
          v18 = v6[4];
          v19 = v4[4];
          v20 = v18 < v19;
          if (v18 == v19
            && (v21 = v6[5], v22 = v4[5], v20 = v21 < v22, v21 == v22)
            && (v23 = v6[6], v24 = v4[6], v20 = v23 < v24, v23 == v24))
          {
            v25 = *((char *)v6 + 56);
            v26 = *((char *)v4 + 56);
            if (v25 == v26)
            {
              if (*(_QWORD *)v6 < *(_QWORD *)v4)
                goto LABEL_21;
            }
            else if (v25 < v26)
            {
LABEL_21:
              v27 = v6 + 8;
              if (v7 < v6 || v7 >= v27 || v7 != v6)
              {
                v28 = *(_OWORD *)v6;
                v29 = *((_OWORD *)v6 + 1);
                v30 = *((_OWORD *)v6 + 3);
                *((_OWORD *)v7 + 2) = *((_OWORD *)v6 + 2);
                *((_OWORD *)v7 + 3) = v30;
                *(_OWORD *)v7 = v28;
                *((_OWORD *)v7 + 1) = v29;
              }
              goto LABEL_29;
            }
          }
          else if (v20)
          {
            goto LABEL_21;
          }
        }
        else if (v17 < v16)
        {
          goto LABEL_21;
        }
        if (v7 != v4)
        {
          v31 = *(_OWORD *)v4;
          v32 = *((_OWORD *)v4 + 1);
          v33 = *((_OWORD *)v4 + 3);
          *((_OWORD *)v7 + 2) = *((_OWORD *)v4 + 2);
          *((_OWORD *)v7 + 3) = v33;
          *(_OWORD *)v7 = v31;
          *((_OWORD *)v7 + 1) = v32;
        }
        v4 += 8;
        v60 = v4;
        v27 = v6;
LABEL_29:
        v7 += 8;
        if (v4 < v15)
        {
          v6 = v27;
          if ((unint64_t)v27 < a3)
            continue;
        }
        v61 = v7;
        goto LABEL_66;
      }
    }
    goto LABEL_66;
  }
LABEL_67:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in AccessibilityAdjustableModifier.body(content:)@<X0>(char *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;
  void (*v5)(uint64_t);
  void (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  v4 = *a1;
  v5 = (void (*)(uint64_t))a2[5];
  v6 = (void (*)(uint64_t))a2[7];
  v7 = (uint64_t (*)(uint64_t))a2[11];
  v8 = v7(1);
  if ((v4 & 1) != 0)
  {
    v5 = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v5)
LABEL_5:
    v5(v8);
LABEL_6:
  *a3 = 2;
  return v7(0);
}

uint64_t partial apply for specialized closure #1 in AccessibilityAdjustableModifier.body(content:)@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return specialized closure #1 in AccessibilityAdjustableModifier.body(content:)(a1, (_QWORD *)(v2 + 16), a2);
}

void type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityAdjustableAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction, (uint64_t)&type metadata for AccessibilityAdjustableAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityAdjustableAction> and conformance AccessibilityActionStorage<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilityAdjustableAction> and conformance AccessibilityActionStorage<A>, &lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityAdjustableAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction, (uint64_t)&type metadata for AccessibilityAdjustableAction);
    v6 = type metadata accessor for AnyAccessibilityAction.ConcreteBase(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>);
  }
}

uint64_t sub_1871D6E94()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 80))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined retain of AccessibilityAdjustableModifier<ResolvedSliderStyle, AccessibilitySliderValue>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  outlined copy of AccessibilitySliderValue?(*(id *)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24));
  outlined copy of AppIntentExecutor?(v2);
  outlined copy of AppIntentExecutor?(v3);
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5BF0], MEMORY[0x1E0CE5BE0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5BE8], MEMORY[0x1E0CE5BE0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5BD0], MEMORY[0x1E0CE5BE0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

uint64_t objectdestroy_9Tm_1()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {

  }
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  if (*(_QWORD *)(v0 + 72))
    swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t *);
  void (*v4)(uint64_t);
  uint64_t v6;

  v2 = *a1;
  v3 = *(void (**)(uint64_t *))(v1 + 88);
  v4 = *(void (**)(uint64_t))(v1 + 104);
  v4(1);
  v6 = v2;
  v3(&v6);
  return ((uint64_t (*)(_QWORD))v4)(0);
}

uint64_t sub_1871D7120()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t *);
  uint64_t result;
  uint64_t v6;

  v4 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v6 = *a1;
  result = v4(&v6);
  *a2 = 2;
  return result;
}

void type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilitySetValueAction>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilitySetValueAction>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilitySetValueAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction, (uint64_t)&type metadata for AccessibilitySetValueAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityAdjustableAction> and conformance AccessibilityActionStorage<A>(&lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilitySetValueAction> and conformance AccessibilityActionStorage<A>, &lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilitySetValueAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction, (uint64_t)&type metadata for AccessibilitySetValueAction);
    v6 = type metadata accessor for AnyAccessibilityAction.ConcreteBase(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilitySetValueAction>>);
  }
}

uint64_t lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityAdjustableAction> and conformance AccessibilityActionStorage<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityActionStorage<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1871D727C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 72))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata completion function for Normalizing()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = v3;
    v0 = type metadata accessor for Optional();
    if (v5 <= 0x3F)
    {
      if (v4 > 0x3F)
      {
        return AssociatedTypeWitness;
      }
      else
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Normalizing(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v22;
  void *v23;
  const void *v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);
  void *v26;
  const void *v27;
  void (*v28)(void *, const void *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  size_t __n;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v7 + v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v7 + v12;
  v14 = *(_QWORD *)(v11 + 64);
  if (*(_DWORD *)(v11 + 84))
    v15 = *(_QWORD *)(v11 + 64);
  else
    v15 = v14 + 1;
  v16 = v15 + v12;
  if ((v12 | (unint64_t)v8) > 7
    || ((*(_DWORD *)(v11 + 80) | v8) & 0x100000) != 0
    || ((v15 + v12 + ((v15 + v12 + ((v13 + (v9 & ~(unint64_t)v8)) & ~v12)) & ~v12)) & ~v12)
     + v14 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v12 | v8) + 16) & ~(v12 | v8)));
    swift_retain();
  }
  else
  {
    __n = v15;
    v20 = ~(unint64_t)v8;
    v30 = ~v12;
    v31 = AssociatedTypeWitness;
    v21 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v21(a1, a2, v5);
    v22 = ((unint64_t)a2 + v9) & v20;
    v21((uint64_t *)(((unint64_t)a1 + v9) & v20), (uint64_t *)v22, v5);
    v23 = (void *)(((((unint64_t)a1 + v9) & v20) + v13) & v30);
    v24 = (const void *)((v22 + v13) & v30);
    v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v25(v24, 1, v31))
    {
      memcpy(v23, v24, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v23, v24, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v23, 0, 1, v31);
    }
    v26 = (void *)(((unint64_t)v23 + v16) & v30);
    v27 = (const void *)(((unint64_t)v24 + v16) & v30);
    if (v25(v27, 1, v31))
    {
      memcpy(v26, v27, __n);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)v26 + v16) & v30, ((unint64_t)v27 + v16) & v30, v31);
    }
    else
    {
      v28 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
      v28(v26, v27, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v26, 0, 1, v31);
      v28((void *)(((unint64_t)v26 + v16) & v30), (const void *)(((unint64_t)v27 + v16) & v30), v31);
    }
  }
  return a1;
}

uint64_t destroy for Normalizing(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(a1, v3);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = (v6 + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v5(v7, v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v6 + v10;
  v12 = ~v10;
  v13 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v13(v11 & ~v10, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11 & ~v10, AssociatedTypeWitness);
  if (*(_DWORD *)(v9 + 84))
    v14 = *(_QWORD *)(v9 + 64);
  else
    v14 = *(_QWORD *)(v9 + 64) + 1;
  v15 = ((v11 | v10) + v14) & v12;
  v16 = v13(v15, 1, AssociatedTypeWitness);
  v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  if (!v16)
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v17(v15, AssociatedTypeWitness);
    v17 = v19;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v17)((v14 + v10 + v15) & v12, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Normalizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int v20;
  size_t v21;
  size_t v22;
  size_t v23;
  void *v24;
  size_t v25;
  void (*v26)(void *, size_t, uint64_t);
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  uint64_t v29;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v29 = a1;
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v8 + v14;
  v16 = v8 + v14 + v10;
  v17 = ~v14;
  v18 = v15 + v11;
  v19 = (const void *)((v15 + v11) & ~v14);
  v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v28(v19, 1, AssociatedTypeWitness))
  {
    v20 = *(_DWORD *)(v13 + 84);
    v21 = *(_QWORD *)(v13 + 64);
    if (v20)
      v22 = *(_QWORD *)(v13 + 64);
    else
      v22 = v21 + 1;
    memcpy((void *)(v16 & ~v14), v19, v22);
  }
  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(v13 + 16))(v16 & ~v14, v19, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16 & ~v14, 0, 1, AssociatedTypeWitness);
    v20 = *(_DWORD *)(v13 + 84);
    v21 = *(_QWORD *)(v13 + 64);
  }
  if (v20)
    v23 = v21;
  else
    v23 = v21 + 1;
  v24 = (void *)(((v16 | v14) + v23) & v17);
  v25 = ((v18 | v14) + v23) & v17;
  if (v28((const void *)v25, 1, AssociatedTypeWitness))
  {
    memcpy(v24, (const void *)(((v18 | v14) + v23) & v17), v23);
    (*(void (**)(unint64_t, size_t, uint64_t))(v13 + 16))(((unint64_t)v24 + v23 + v14) & v17, (v23 + v14 + v25) & v17, AssociatedTypeWitness);
  }
  else
  {
    v26 = *(void (**)(void *, size_t, uint64_t))(v13 + 16);
    v26(v24, ((v18 | v14) + v23) & v17, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v24, 0, 1, AssociatedTypeWitness);
    v26((void *)(((unint64_t)v24 + v23 + v14) & v17), (v23 + v14 + v25) & v17, AssociatedTypeWitness);
  }
  return v29;
}

uint64_t assignWithCopy for Normalizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  size_t v21;
  size_t v22;
  const void *v23;
  int v24;
  int v25;
  uint64_t v27;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v27 = a1;
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v8 + v14;
  v16 = v8 + v14 + v10;
  v17 = ~v14;
  v18 = v15 + v11;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v19(v16 & ~v14, 1, AssociatedTypeWitness);
  v20 = v19(v18 & ~v14, 1, AssociatedTypeWitness);
  if ((_DWORD)v10)
  {
    if (!v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16 & ~v14, v18 & ~v14, AssociatedTypeWitness);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16 & ~v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v16 & ~v14, v18 & ~v14, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16 & ~v14, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v13 + 84))
    v21 = *(_QWORD *)(v13 + 64);
  else
    v21 = *(_QWORD *)(v13 + 64) + 1;
  memcpy((void *)(v16 & ~v14), (const void *)(v18 & ~v14), v21);
LABEL_10:
  if (*(_DWORD *)(v13 + 84))
    v22 = *(_QWORD *)(v13 + 64);
  else
    v22 = *(_QWORD *)(v13 + 64) + 1;
  v23 = (const void *)(((v18 | v14) + v22) & v17);
  v24 = v19(((v16 | v14) + v22) & v17, 1, AssociatedTypeWitness);
  v25 = v19((uint64_t)v23, 1, AssociatedTypeWitness);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(size_t, const void *, uint64_t))(v13 + 24))(((v16 | v14) + v22) & v17, v23, AssociatedTypeWitness);
      goto LABEL_19;
    }
    (*(void (**)(size_t, uint64_t))(v13 + 8))(((v16 | v14) + v22) & v17, AssociatedTypeWitness);
    goto LABEL_18;
  }
  if (v25)
  {
LABEL_18:
    memcpy((void *)(((v16 | v14) + v22) & v17), v23, v22);
    goto LABEL_19;
  }
  (*(void (**)(size_t, const void *, uint64_t))(v13 + 16))(((v16 | v14) + v22) & v17, v23, AssociatedTypeWitness);
  (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(((v16 | v14) + v22) & v17, 0, 1, AssociatedTypeWitness);
LABEL_19:
  (*(void (**)(size_t, unint64_t, uint64_t))(v13 + 24))((v22 + v14 + (((v16 | v14) + v22) & v17)) & v17, ((unint64_t)v23 + v22 + v14) & v17, AssociatedTypeWitness);
  return v27;
}

uint64_t initializeWithTake for Normalizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int v20;
  size_t v21;
  size_t v22;
  size_t v23;
  void *v24;
  size_t v25;
  void (*v26)(void *, size_t, uint64_t);
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  uint64_t v29;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v29 = a1;
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v8 + v14;
  v16 = v8 + v14 + v10;
  v17 = ~v14;
  v18 = v15 + v11;
  v19 = (const void *)((v15 + v11) & ~v14);
  v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v28(v19, 1, AssociatedTypeWitness))
  {
    v20 = *(_DWORD *)(v13 + 84);
    v21 = *(_QWORD *)(v13 + 64);
    if (v20)
      v22 = *(_QWORD *)(v13 + 64);
    else
      v22 = v21 + 1;
    memcpy((void *)(v16 & ~v14), v19, v22);
  }
  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(v13 + 32))(v16 & ~v14, v19, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16 & ~v14, 0, 1, AssociatedTypeWitness);
    v20 = *(_DWORD *)(v13 + 84);
    v21 = *(_QWORD *)(v13 + 64);
  }
  if (v20)
    v23 = v21;
  else
    v23 = v21 + 1;
  v24 = (void *)(((v16 | v14) + v23) & v17);
  v25 = ((v18 | v14) + v23) & v17;
  if (v28((const void *)v25, 1, AssociatedTypeWitness))
  {
    memcpy(v24, (const void *)(((v18 | v14) + v23) & v17), v23);
    (*(void (**)(unint64_t, size_t, uint64_t))(v13 + 32))(((unint64_t)v24 + v23 + v14) & v17, (v23 + v14 + v25) & v17, AssociatedTypeWitness);
  }
  else
  {
    v26 = *(void (**)(void *, size_t, uint64_t))(v13 + 32);
    v26(v24, ((v18 | v14) + v23) & v17, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v24, 0, 1, AssociatedTypeWitness);
    v26((void *)(((unint64_t)v24 + v23 + v14) & v17), (v23 + v14 + v25) & v17, AssociatedTypeWitness);
  }
  return v29;
}

uint64_t assignWithTake for Normalizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  size_t v21;
  size_t v22;
  const void *v23;
  int v24;
  int v25;
  uint64_t v27;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v27 = a1;
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v8 + v14;
  v16 = v8 + v14 + v10;
  v17 = ~v14;
  v18 = v15 + v11;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v19(v16 & ~v14, 1, AssociatedTypeWitness);
  v20 = v19(v18 & ~v14, 1, AssociatedTypeWitness);
  if ((_DWORD)v10)
  {
    if (!v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v16 & ~v14, v18 & ~v14, AssociatedTypeWitness);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16 & ~v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v16 & ~v14, v18 & ~v14, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16 & ~v14, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v13 + 84))
    v21 = *(_QWORD *)(v13 + 64);
  else
    v21 = *(_QWORD *)(v13 + 64) + 1;
  memcpy((void *)(v16 & ~v14), (const void *)(v18 & ~v14), v21);
LABEL_10:
  if (*(_DWORD *)(v13 + 84))
    v22 = *(_QWORD *)(v13 + 64);
  else
    v22 = *(_QWORD *)(v13 + 64) + 1;
  v23 = (const void *)(((v18 | v14) + v22) & v17);
  v24 = v19(((v16 | v14) + v22) & v17, 1, AssociatedTypeWitness);
  v25 = v19((uint64_t)v23, 1, AssociatedTypeWitness);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(size_t, const void *, uint64_t))(v13 + 40))(((v16 | v14) + v22) & v17, v23, AssociatedTypeWitness);
      goto LABEL_19;
    }
    (*(void (**)(size_t, uint64_t))(v13 + 8))(((v16 | v14) + v22) & v17, AssociatedTypeWitness);
    goto LABEL_18;
  }
  if (v25)
  {
LABEL_18:
    memcpy((void *)(((v16 | v14) + v22) & v17), v23, v22);
    goto LABEL_19;
  }
  (*(void (**)(size_t, const void *, uint64_t))(v13 + 32))(((v16 | v14) + v22) & v17, v23, AssociatedTypeWitness);
  (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(((v16 | v14) + v22) & v17, 0, 1, AssociatedTypeWitness);
LABEL_19:
  (*(void (**)(size_t, unint64_t, uint64_t))(v13 + 40))((v22 + v14 + (((v16 | v14) + v22) & v17)) & v17, ((unint64_t)v23 + v22 + v14) & v17, AssociatedTypeWitness);
  return v27;
}

uint64_t getEnumTagSinglePayload for Normalizing(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = v11;
  if (v10 > v12)
    v12 = *(_DWORD *)(v9 + 84);
  v13 = *(_QWORD *)(v9 + 64);
  if ((_DWORD)v10)
    v14 = *(_QWORD *)(v9 + 64);
  else
    v14 = v13 + 1;
  if (!a2)
    return 0;
  v15 = AssociatedTypeWitness;
  v16 = *(_QWORD *)(v6 + 64);
  v17 = *(unsigned __int8 *)(v6 + 80);
  v18 = v16 + v17;
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = v14 + v19;
  if (a2 <= v12)
    goto LABEL_31;
  v21 = ((v20 + ((v20 + ((v16 + v19 + (v18 & ~v17)) & ~v19)) & ~v19)) & ~v19) + v13;
  v22 = 8 * v21;
  if (v21 <= 3)
  {
    v24 = ((a2 - v12 + ~(-1 << v22)) >> v22) + 1;
    if (HIWORD(v24))
    {
      v23 = *(_DWORD *)(a1 + v21);
      if (!v23)
        goto LABEL_31;
      goto LABEL_22;
    }
    if (v24 > 0xFF)
    {
      v23 = *(unsigned __int16 *)(a1 + v21);
      if (!*(_WORD *)(a1 + v21))
        goto LABEL_31;
      goto LABEL_22;
    }
    if (v24 < 2)
    {
LABEL_31:
      if (v12)
      {
        if ((_DWORD)v7 == v12)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        v27 = (((v18 + a1) & ~v17) + v16 + v19) & ~v19;
        if (v11 != v12)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v20 + ((v20 + v27) & ~v19)) & ~v19, v10, v15);
        v28 = (*(uint64_t (**)(uint64_t))(v9 + 48))(v27);
        if (v28 >= 2)
          return v28 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v23 = *(unsigned __int8 *)(a1 + v21);
  if (!*(_BYTE *)(a1 + v21))
    goto LABEL_31;
LABEL_22:
  v25 = (v23 - 1) << v22;
  if (v21 > 3)
    v25 = 0;
  if ((_DWORD)v21)
  {
    if (v21 <= 3)
      v26 = v21;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  return v12 + v25 + 1;
}

void storeEnumTagSinglePayload for Normalizing(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0u;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  if (v11 > v13)
    v13 = *(_DWORD *)(v10 + 84);
  v15 = *(_QWORD *)(v10 + 64);
  if (v11)
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = v15 + 1;
  v14 = *(unsigned __int8 *)(v10 + 80);
  v17 = ((v16
        + v14
        + ((v16
          + v14
          + ((*(_QWORD *)(v7 + 64)
            + v14
            + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~v14)) & ~v14)) & ~v14)
      + v15;
  if (a3 > v13)
  {
    if (v17 > 3)
    {
      v9 = 1u;
      if (v13 >= a2)
LABEL_27:
        __asm { BR              X1 }
LABEL_20:
      v19 = ~v13 + a2;
      if (v17 < 4)
      {
        if ((_DWORD)v17)
        {
          v20 = v19 & ~(-1 << (8 * v17));
          bzero(a1, v17);
          if ((_DWORD)v17 == 3)
          {
            *(_WORD *)a1 = v20;
            a1[2] = BYTE2(v20);
          }
          else if ((_DWORD)v17 == 2)
          {
            *(_WORD *)a1 = v20;
          }
          else
          {
            *a1 = v20;
          }
        }
      }
      else
      {
        bzero(a1, v17);
        *(_DWORD *)a1 = v19;
      }
      __asm { BR              X10 }
    }
    v18 = ((a3 - v13 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v18))
    {
      v9 = 4u;
      if (v13 >= a2)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v18 >= 0x100)
      v9 = 2;
    else
      v9 = v18 > 1;
  }
  if (v13 >= a2)
    goto LABEL_27;
  goto LABEL_20;
}

void sub_1871D8454()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1871D845C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void base witness table accessor for Equatable in Normalizing<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in Clamping<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in Clamping<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in Normalizing<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

double specialized Clamping.get(base:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  double v6;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  result = v6;
  if (v6 < 0.0)
    result = 0.0;
  if (result > 1.0)
    return 1.0;
  return result;
}

uint64_t specialized Clamping.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, double);
  uint64_t AssociatedConformanceWitness;
  char *v29;
  _QWORD v31[2];
  char *v32;
  uint64_t v33;

  v31[1] = a1;
  v33 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 16) + 8) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v32 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v31 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v31 - v19;
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)v31 - v24;
  v27 = *(void (**)(uint64_t, uint64_t, double))(v26 + 8);
  v27(a1, a2, v23);
  dispatch thunk of BinaryFloatingPoint.init(_:)();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x18D75EAB8](v12, a2, v5);
  v29 = v32;
  MEMORY[0x18D75ECC8](&unk_187C14768, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x18D75EAB8](v29, a2, v5);
  Comparable.clamp(min:max:)();
  ((void (*)(char *, uint64_t))v27)(v16, a2);
  ((void (*)(char *, uint64_t))v27)(v20, a2);
  return ((uint64_t (*)(char *, uint64_t))v27)(v25, a2);
}

uint64_t type metadata completion function for PointerBridge()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall PointerBridge.invalidateHoverState()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + direct field offset for PointerBridge.interaction);
  if (v1)
    objc_msgSend(v1, sel_invalidate);
}

void PointerBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  char v14;
  int v15;

  v2 = v1;
  v13 = *a1;
  PreferenceList.subscript.getter();
  if (v15 == -1
    || ((v3 = *(_DWORD *)(v1 + direct field offset for PointerBridge.hasHoverEffectSeed), v3 != -1)
      ? (v4 = v15 == v3)
      : (v4 = 0),
        !v4))
  {
    v5 = direct field offset for PointerBridge.interaction;
    v6 = *(_QWORD *)(v1 + direct field offset for PointerBridge.interaction);
    if (v6)
    {
      if ((v14 & 1) == 0)
      {
        v7 = (void *)MEMORY[0x18D760234](v2 + direct field offset for PointerBridge.host);
        if (v7)
        {
          v8 = v7;
          objc_msgSend(v7, sel_removeInteraction_, v6, v13);

          v9 = 0;
LABEL_13:
          v12 = *(void **)(v2 + v5);
          *(_QWORD *)(v2 + v5) = v9;

          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_17;
      }
    }
    else if (v14)
    {
      v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B18]), sel_initWithDelegate_, v2, v13);
      v10 = (void *)MEMORY[0x18D760234](v2 + direct field offset for PointerBridge.host);
      if (v10)
      {
        v11 = v10;
        objc_msgSend(v10, sel_addInteraction_, v9);

        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_14:
    *(_DWORD *)(v2 + direct field offset for PointerBridge.hasHoverEffectSeed) = v15;
  }
}

id PointerBridge.init()()
{
  char *v0;
  objc_class *ObjectType;
  id v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for PointerBridge.interaction] = 0;
  *(_DWORD *)&v0[direct field offset for PointerBridge.hasHoverEffectSeed] = 0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  objc_msgSend(v2, sel_userInterfaceIdiom);

  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id @objc PointerBridge.init()()
{
  return PointerBridge.init()();
}

uint64_t PointerBridge.hoverEffectResponder(for:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  v5 = (char *)v1 + direct field offset for PointerBridge.host;
  result = MEMORY[0x18D760234]((char *)v1 + direct field offset for PointerBridge.host);
  if (result)
  {
    v7 = (void *)result;
    objc_msgSend(a1, sel_location);
    objc_msgSend(v7, sel_convertPoint_toView_, 0);

    result = MEMORY[0x18D760234](v5);
    if (result)
    {
      v9 = (void *)result;
      v10 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v4 & v3) + 0x50), *(_QWORD *)((v4 & v3) + 0x58), v8);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v10);
      v11 = ViewRendererHost.responderNode.getter();

      if (v11)
      {
        type metadata accessor for ViewResponder();
        if (swift_dynamicCastClass())
        {
          v12 = ViewResponder.hitTest(globalPoint:radius:options:)();
          swift_release();
          if (v12)
          {
            type metadata accessor for HoverEffectResponder();
            ResponderNode.firstAncestor<A>(ofType:)();
            v11 = 0;
            swift_release();
            return v11;
          }
        }
        else
        {
          swift_release();
        }
        return 0;
      }
      return v11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id @objc PointerBridge.pointerInteraction(_:regionFor:defaultRegion:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = a1;
  v12 = (void *)specialized PointerBridge.pointerInteraction(_:regionFor:defaultRegion:)(v9);

  return v12;
}

UIView *@objc PointerBridge.pointerInteraction(_:styleFor:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  UIView *v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = specialized PointerBridge.pointerInteraction(_:styleFor:)();

  return v9;
}

void @objc PointerBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

}

uint64_t type metadata accessor for PointerBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PointerBridge);
}

BOOL PointerIdentifier.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  _BYTE v5[24];
  uint64_t v6;

  outlined init with copy of Any?(a1, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for PointerIdentifier();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = *(_QWORD *)&v4[OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base];

      if (v2)
        return *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base) == v2;
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t PointerIdentifier.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x8000000187BDA070;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t PointerIdentifier.pointerStyle(host:)(UIView *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat *v17;
  uint64_t v18;
  CGFloat *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(CGFloat *, uint64_t, uint64_t, uint64_t);
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  int v41;
  char *v42;
  uint64_t v43;
  unsigned int *v44;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  double v53;
  double v54;
  double v55;
  char v56;
  double v57;
  double v58;
  double v59;
  double v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  CGFloat x;
  CGFloat height;
  uint64_t v68;
  uint64_t v69;
  CGFloat *v70;
  CGFloat v71;
  id v72;
  void (*v73)(CGFloat *, _QWORD, uint64_t, uint64_t);
  _QWORD *v74;
  int v75;
  UIView_optional *v76;
  uint64_t v77;
  CGFloat width;
  CGFloat y;
  char *v80;
  int v81;
  UIView *v82;
  CGFloat *v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  double v93[4];
  unsigned __int8 v94;
  _OWORD v95[2];
  unsigned __int8 v96;
  _OWORD v97[2];
  unsigned __int8 v98;
  __C::CGRect v99;
  __C::CGRect v100;

  v2 = v1;
  v4 = (_QWORD *)type metadata accessor for UIPointerEffect();
  v5 = *(v4 - 1);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (void (**)(CGFloat *, _QWORD, uint64_t, uint64_t))((char *)&v73 - v11);
  type metadata accessor for UIPointerShape?();
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v19 = (CGFloat *)((char *)&v73 - v18);
  v20 = 0;
  v21 = OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base;
  if (*(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base)
                + 288) == 3)
    return v20;
  v81 = *(unsigned __int8 *)(*(_QWORD *)(v2
                                       + OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base)
                           + 288);
  v83 = v17;
  v80 = v8;
  swift_retain();
  UIViewSnapshotResponder.contentPath.getter((uint64_t)v93);
  y = v93[0];
  width = v93[1];
  v77 = *(_QWORD *)&v93[2];
  v76 = *(UIView_optional **)&v93[3];
  v75 = v94;
  swift_release();
  v84 = v2;
  v22 = specialized UIView.firstDescendantWhere(_:)(a1, *(unsigned int *)(*(_QWORD *)(v2 + v21) + 292), 4);
  v23 = v22;
  v82 = a1;
  if (v22)
  {
    v24 = objc_msgSend(v22, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v25 >> 62)
      goto LABEL_37;
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v26)
    {
      v74 = v12;
      v73 = (void (*)(CGFloat *, _QWORD, uint64_t, uint64_t))v5;
      v85 = v4;
      v12 = (_QWORD *)(v25 & 0xC000000000000001);
      v5 = 4;
      while (1)
      {
        v27 = v12 ? (id)MEMORY[0x18D75E3BC](v5 - 4, v25) : *(id *)(v25 + 8 * v5);
        v28 = v27;
        v4 = (_QWORD *)(v5 - 3);
        if (__OFADD__(v5 - 4, 1))
          break;
        v29 = UIView.findLiftPreview(kind:)(4);

        if (v29)
        {

          v23 = v29;
LABEL_14:
          v4 = v85;
          v5 = (uint64_t)v73;
          v12 = v74;
          goto LABEL_15;
        }
        ++v5;
        if (v4 == (_QWORD *)v26)
          goto LABEL_14;
      }
      __break(1u);
LABEL_37:
      swift_bridgeObjectRetain();
      v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_15:
    swift_bridgeObjectRelease();
    a1 = v82;
  }
  swift_retain();
  v30 = objc_msgSend(v23, sel_superview);
  v85 = specialized UIViewSnapshotResponder.platformPreviewTarget<A>(host:preferredContainer:)(a1, v30);
  swift_release();

  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B78]), sel_init);
  v32 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
  objc_msgSend(v31, sel_setBackgroundColor_, v32);

  v33 = type metadata accessor for UIPointerShape();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(void (**)(CGFloat *, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v35(v19, 1, 1, v33);
  outlined init with take of Path?((uint64_t)v93, (uint64_t)v95);
  if (v96 != 255)
  {
    v73 = v35;
    v97[0] = v95[0];
    v97[1] = v95[1];
    v98 = v96;
    outlined copy of Path.Storage(*(uint64_t *)&y, *(uint64_t *)&width, v77, (uint64_t)v76, v75);
    if ((Path.isEmpty.getter() & 1) == 0)
    {
      v74 = v12;
      Path.roundedRect()();
      v46 = v92;
      if (v92 == 2)
        goto LABEL_33;
      v47 = v91;
      v48 = v90;
      v49 = v89;
      v50 = v88;
      v51 = v87;
      v52 = v86;
      if ((v92 & 1) == 0)
      {
        v92 = 0;
        FixedRoundedRect.rect.getter();
        v54 = v53;
        v86 = v52;
        v87 = v51;
        v88 = v50;
        v89 = v49;
        v90 = v48;
        v91 = v47;
        v92 = 0;
        FixedRoundedRect.rect.getter();
        if (v54 != v55)
          goto LABEL_33;
      }
      v56 = v46 & 1;
      v86 = v52;
      v87 = v51;
      v88 = v50;
      v89 = v49;
      v90 = v48;
      v91 = v47;
      v92 = v56;
      FixedRoundedRect.cornerSize.getter();
      v58 = v57;
      v86 = v52;
      v87 = v51;
      v88 = v50;
      v89 = v49;
      v90 = v48;
      v91 = v47;
      v92 = v56;
      FixedRoundedRect.cornerSize.getter();
      if (v58 == v59)
      {
        v77 = *(_QWORD *)(v84 + v21);
        v86 = v52;
        v87 = v51;
        v88 = v50;
        v89 = v49;
        v90 = v48;
        v91 = v47;
        v92 = v56;
        swift_retain();
        FixedRoundedRect.rect.getter();
        v61 = v60;
        y = v62;
        width = v63;
        v65 = v64;
        v76 = (UIView_optional *)objc_msgSend(v23, sel_superview);
        v99.origin.x = v61;
        v99.origin.y = y;
        v99.size.width = width;
        v99.size.height = v65;
        v100 = UIViewSnapshotResponder.convertRectToTargetSpace(_:host:preferredContainer:)(v99, v82, v76);
        x = v100.origin.x;
        y = v100.origin.y;
        width = v100.size.width;
        height = v100.size.height;
        swift_release();

        v86 = v52;
        v87 = v51;
        v88 = v50;
        v89 = v49;
        v90 = v48;
        v91 = v47;
        v92 = v56;
        FixedRoundedRect.cornerSize.getter();
        v69 = v68;
        outlined release of Path?((uint64_t)v93);
        outlined destroy of UIPointerShape?((uint64_t)v19);
        v70 = v83;
        v71 = y;
        *v83 = x;
        v70[1] = v71;
        v70[2] = width;
        v70[3] = height;
        *((_QWORD *)v70 + 4) = v69;
        (*(void (**)(CGFloat *, _QWORD, uint64_t))(v34 + 104))(v70, *MEMORY[0x1E0DC1B88], v33);
        v73(v70, 0, 1, v33);
        outlined init with take of UIPointerShape?((uint64_t)v70, (uint64_t)v19);
      }
      else
      {
LABEL_33:
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
        v72 = UIBezierPath.init(_:)((uint64_t)v97);
        outlined destroy of UIPointerShape?((uint64_t)v19);
        *(_QWORD *)v19 = v72;
        (*(void (**)(CGFloat *, _QWORD, uint64_t))(v34 + 104))(v19, *MEMORY[0x1E0DC1B98], v33);
        v73(v19, 0, 1, v33);
      }
      v12 = v74;
      v36 = v23;
      if (v23)
        goto LABEL_21;
      goto LABEL_20;
    }
    outlined release of Path?((uint64_t)v93);
  }
  v36 = v23;
  if (!v23)
  {
LABEL_20:
    v37 = *(_QWORD *)(v84 + v21);
    swift_retain();
    AGGraphClearUpdate();
    closure #1 in UIViewSnapshotResponder.snapshotView(host:)(v37, v82, &v86);
    AGGraphSetUpdate();
    swift_release();
    v36 = v86;
  }
LABEL_21:
  v38 = objc_allocWithZone(MEMORY[0x1E0DC3D90]);
  v39 = v23;
  v40 = objc_msgSend(v38, sel_initWithView_parameters_target_, v36, v31, v85);

  v41 = v81;
  if (v81)
  {
    v42 = v80;
    v43 = (uint64_t)v83;
    *v12 = v40;
    if (v41 == 1)
      v44 = (unsigned int *)MEMORY[0x1E0DC1E70];
    else
      v44 = (unsigned int *)MEMORY[0x1E0DC1E30];
  }
  else
  {
    *v12 = v40;
    v44 = (unsigned int *)MEMORY[0x1E0DC1E68];
    v42 = v80;
    v43 = (uint64_t)v83;
  }
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v12, *v44, v4);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerStyle);
  (*(void (**)(char *, _QWORD *, _QWORD *))(v5 + 16))(v42, v12, v4);
  outlined init with copy of UIPointerShape?((uint64_t)v19, v43);
  v20 = UIPointerStyle.init(effect:shape:)();

  outlined release of Path?((uint64_t)v93);
  (*(void (**)(_QWORD *, _QWORD *))(v5 + 8))(v12, v4);
  outlined destroy of UIPointerShape?((uint64_t)v19);
  return v20;
}

id PointerIdentifier.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PointerIdentifier();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PointerIdentifier()
{
  return objc_opt_self();
}

void type metadata accessor for UIPointerShape?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIPointerShape?)
  {
    type metadata accessor for UIPointerShape();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIPointerShape?);
  }
}

uint64_t outlined init with take of Path?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for Path?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UIPointerShape?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIPointerShape?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of Path?(uint64_t a1)
{
  outlined consume of Path?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t outlined destroy of UIPointerShape?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for UIPointerShape?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of UIPointerShape?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIPointerShape?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized PointerBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t specialized PointerBridge.pointerInteraction(_:regionFor:defaultRegion:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  objc_super v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  id v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[48];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];
  _OWORD v29[2];
  unsigned __int8 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;

  MEMORY[0x18D75B908]();
  v2 = PointerBridge.hoverEffectResponder(for:)(a1);
  if (v2)
  {
    v3 = v2;
    swift_retain();
    UIViewSnapshotResponder.contentPath.getter((uint64_t)v28);
    swift_release();
    outlined init with take of Path?((uint64_t)v28, (uint64_t)v29);
    if (v30 == 255)
    {
      v9 = *(_QWORD *)(v3 + 216);
      v11 = *(_QWORD *)(v3 + 224);
      v5 = 0;
      v7 = 0;
    }
    else
    {
      v31 = v29[0];
      v32 = v29[1];
      v33 = v30;
      Path.boundingRect.getter();
      v5 = v4;
      v7 = v6;
      v9 = v8;
      v11 = v10;
      outlined release of Path?((uint64_t)v28);
    }
    v24 = v5;
    v25 = v7;
    v26 = v9;
    v27 = v11;
    hostingViewCoordinateSpace.getter();
    v23[40] = 1;
    swift_retain();
    AGGraphClearUpdate();
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
    static Update.dispatchImmediately<A>(_:)();
    AGGraphSetUpdate();
    if (v17 == (void *)1)
    {
      ViewTransform.init()();
    }
    else
    {
      v20 = v17;
      v21 = v18;
      v22 = v19;
    }
    ViewTransform.appendPosition(_:)(*(CGPoint *)(v3 + 232));
    swift_release();
    CGRect.convert(to:transform:)();
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)v23);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerRegion);
    v13 = (objc_class *)type metadata accessor for PointerIdentifier();
    v14 = (char *)objc_allocWithZone(v13);
    *(_QWORD *)&v14[OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base] = v3;
    v16.receiver = v14;
    v16.super_class = v13;
    swift_retain();
    v20 = objc_msgSendSuper2(&v16, sel_init);
    lazy protocol witness table accessor for type PointerIdentifier and conformance NSObject();
    AnyHashable.init<A>(_:)();
    v12 = UIPointerRegion.init(rect:identifier:)();
    swift_release();
    static Update.end()();
  }
  else
  {
    static Update.end()();
    return 0;
  }
  return v12;
}

UIView *specialized PointerBridge.pointerInteraction(_:styleFor:)()
{
  uint64_t v0;
  NSObject v1;
  UIView *result;
  UIView *v3;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;

  UIPointerRegion.identifier.getter();
  if (!v6)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?);
    return 0;
  }
  v1.isa = AnyHashable._bridgeToObjectiveC()().isa;
  outlined destroy of AnyHashable((uint64_t)v5);
  type metadata accessor for PointerIdentifier();
  if (!swift_dynamicCastClass())
  {

    return 0;
  }
  result = (UIView *)MEMORY[0x18D760234](v0 + direct field offset for PointerBridge.host);
  if (result)
  {
    v3 = result;
    v4 = PointerIdentifier.pointerStyle(host:)(result);

    return (UIView *)v4;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in UIViewSnapshotResponder.transform.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in UIViewSnapshotResponder.transform.getter(a1);
}

unint64_t lazy protocol witness table accessor for type PointerIdentifier and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PointerIdentifier and conformance NSObject;
  if (!lazy protocol witness table cache variable for type PointerIdentifier and conformance NSObject)
  {
    v1 = type metadata accessor for PointerIdentifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PointerIdentifier and conformance NSObject);
  }
  return result;
}

void specialized static NSLayoutManager.with<A>(_:drawingScale:size:layoutProperties:_:)(void *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v12;
  int v13;
  Class isa;
  Class v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v12 = *(_QWORD *)a2;
  v13 = *(unsigned __int8 *)(a2 + 8);
  if ((v13 & 1) != 0 || v12 != 1)
    isa = NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakByWordWrapping).super.isa;
  else
    isa = a1;
  v15 = isa;
  v16 = (void *)NSAttributedString.scaled(by:)();

  v17 = objc_msgSend(objc_allocWithZone((Class)SwiftUITextStorage), sel_initWithAttributedString_, v16);
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1280]), sel_init);
  objc_msgSend(v18, sel_setUsesFontLeading_, 0);
  objc_msgSend(v18, sel_setAllowsOriginalFontMetricsOverride_, 1);
  objc_msgSend(v17, sel_addLayoutManager_, v18);
  objc_msgSend(v17, sel__setForceWordWrapping_, 1);
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C0]), sel_initWithSize_, a6, a7);
  objc_msgSend(v19, sel_setLineFragmentPadding_, 0.0);
  if (v12 <= 1)
    v20 = 1;
  else
    v20 = v12;
  if (v13)
    v21 = 0;
  else
    v21 = v20;
  v22 = *(unsigned __int8 *)(a2 + 25);
  objc_msgSend(v19, sel_setMaximumNumberOfLines_, v21);
  objc_msgSend(v19, sel_setLineBreakMode_, v22 + 3);
  objc_msgSend(v18, sel_addTextContainer_, v19);
  closure #1 in SwiftUIGlue2.linkURL(_:)(v18, (uint64_t)v19, a3, a4, a5);

  outlined release of ContextMenuResponderFilter((uint64_t)a3);
}

uint64_t _SymmetricallyScaledText.source.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Text.Storage(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _SymmetricallyScaledText.source.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 16) = a3 & 1;
  *(_QWORD *)(v4 + 24) = a4;
  return result;
}

uint64_t (*_SymmetricallyScaledText.source.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _SymmetricallyScaledText.reference.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of Text.Storage(v1, *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _SymmetricallyScaledText.reference.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_BYTE *)(v4 + 48));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  *(_BYTE *)(v4 + 48) = a3 & 1;
  *(_QWORD *)(v4 + 56) = a4;
  return result;
}

uint64_t (*_SymmetricallyScaledText.reference.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _SymmetricallyScaledText.init(source:reference:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3 & 1;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = a7 & 1;
  *(_QWORD *)(a9 + 56) = a8;
  return result;
}

uint64_t static _SymmetricallyScaledText._makeView(view:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;

  v2 = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 32);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v20 = *(_DWORD *)(a2 + 56);
  v21 = *a1;
  v18 = *(_DWORD *)(a2 + 64);
  v19 = *(_DWORD *)(a2 + 60);
  v16 = *(_DWORD *)(a2 + 72);
  v17 = *(_DWORD *)(a2 + 68);
  v14 = *(_DWORD *)(a2 + 80);
  v15 = *(_DWORD *)(a2 + 76);
  v11 = _ViewInputs.textAccessibilityProvider.getter();
  v22 = v21;
  v23 = v2;
  v24 = v3;
  v25 = v4;
  v26 = v5;
  v27 = v6;
  v28 = v7;
  v29 = v8;
  v30 = v9;
  v31 = v10;
  v32 = v20;
  v33 = v19;
  v34 = v18;
  v35 = v17;
  v36 = v16;
  v37 = v15;
  v38 = v14;
  return static _SymmetricallyScaledText.makeView<A>(_:view:inputs:)(v11, (uint64_t)&v22, &v23, v11, v12);
}

uint64_t static _SymmetricallyScaledText.makeView<A>(_:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _QWORD v28[4];
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  uint64_t v45;

  v5 = *a3;
  v24 = *((_DWORD *)a3 + 6);
  v25 = *((_DWORD *)a3 + 2);
  v22 = *((_DWORD *)a3 + 8);
  v23 = *((_DWORD *)a3 + 7);
  v11 = a3[5];
  v12 = a3[2];
  v17 = a3[6];
  v6 = *((_DWORD *)a3 + 15);
  v20 = *((_DWORD *)a3 + 14);
  v21 = *((_DWORD *)a3 + 9);
  v18 = *((_DWORD *)a3 + 18);
  v19 = *((_DWORD *)a3 + 16);
  v16 = *((_DWORD *)a3 + 19);
  v26 = *((_DWORD *)a3 + 17);
  v27 = *((_DWORD *)a3 + 20);
  type metadata accessor for _GraphValue<_SymmetricallyScaledText>();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.environment.getter();
  v13 = _ViewInputs.time.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for PropertyList.Tracker();
  PropertyList.Tracker.__allocating_init()();
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for ModifiedContent();
  v30 = v13;
  v42 = 0u;
  v43 = 0u;
  v44 = v5;
  v45 = 0;
  swift_retain();
  outlined copy of Text?(0, 0, 0, 0);
  outlined copy of Text?(0, 0, 0, 0);
  v9 = type metadata accessor for SymmetricTextChildQuery(0, a4, a5, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymmetricTextChildQuery<A>, v9);
  _GraphValue.init<A>(_:)();
  v28[3] = v5;
  v29 = v25;
  v31 = v12;
  v32 = v24;
  v33 = v23;
  v34 = v22;
  v35 = v21;
  v36 = v11;
  v37 = v17;
  v38 = v20;
  v39 = v6;
  v40 = v19;
  v41 = v26;
  *(_QWORD *)&v42 = __PAIR64__(v16, v18);
  DWORD2(v42) = v27;
  v28[0] = swift_getAssociatedConformanceWitness();
  v28[1] = &protocol witness table for SymmetricallyScaledTextLayout;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v28);
  static View.makeDebuggableView(view:inputs:)();
  swift_release();
  outlined consume of Text?(0, 0, 0, 0);
  return outlined consume of Text?(0, 0, 0, 0);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _SymmetricallyScaledText(int *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;

  v2 = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 32);
  v8 = *(_DWORD *)(a2 + 36);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v20 = *(_DWORD *)(a2 + 56);
  v21 = *a1;
  v18 = *(_DWORD *)(a2 + 64);
  v19 = *(_DWORD *)(a2 + 60);
  v16 = *(_DWORD *)(a2 + 72);
  v17 = *(_DWORD *)(a2 + 68);
  v14 = *(_DWORD *)(a2 + 80);
  v15 = *(_DWORD *)(a2 + 76);
  v11 = _ViewInputs.textAccessibilityProvider.getter();
  v22 = v21;
  v23 = v2;
  v24 = v3;
  v25 = v4;
  v26 = v5;
  v27 = v6;
  v28 = v7;
  v29 = v8;
  v30 = v9;
  v31 = v10;
  v32 = v20;
  v33 = v19;
  v34 = v18;
  v35 = v17;
  v36 = v16;
  v37 = v15;
  v38 = v14;
  return static _SymmetricallyScaledText.makeView<A>(_:view:inputs:)(v11, (uint64_t)&v22, &v23, v11, v12);
}

void protocol witness for View.body.getter in conformance _SymmetricallyScaledText()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **base witness table accessor for View in _SymmetricallyScaledText()
{
  return &protocol witness table for _SymmetricallyScaledText;
}

uint64_t destroy for _SymmetricallyScaledText(uint64_t a1)
{
  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _SymmetricallyScaledText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _SymmetricallyScaledText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 48);
  outlined copy of Text.Storage(v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v12;
  outlined consume of Text.Storage(v13, v14, v15);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _SymmetricallyScaledText(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymmetricallyScaledText(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymmetricallyScaledText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymmetricallyScaledText()
{
  return &type metadata for _SymmetricallyScaledText;
}

uint64_t SymmetricTextChildQuery.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t Value;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t AssociatedConformanceWitness;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  double v85;
  uint64_t v86;
  double v87;
  _QWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  id v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  char v133;
  char v134;
  uint64_t v135;
  char v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;

  v2 = v1;
  v143 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v105 = a1;
  v100 = v3;
  v99 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v101 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, AssociatedTypeWitness);
  v98 = (char *)&v91 - v6;
  v102 = v7;
  v114 = type metadata accessor for ModifiedContent();
  v104 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114, v8);
  v103 = (char *)&v91 - v9;
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v10, v11);
  v96 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v97 = (char *)&v91 - v15;
  v120 = type metadata accessor for Date();
  v121 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120, v16);
  v123 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = *(_DWORD *)(v1 + 12);
  v109 = *(_QWORD *)(v1 + 16);
  v116 = *(_QWORD *)(v1 + 24);
  v92 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)&v113 = *(_QWORD *)(v1 + 40);
  v112 = *(id *)(v1 + 48);
  v111 = *(_QWORD *)(v1 + 56);
  v119 = *(_QWORD *)(v1 + 64);
  v108 = *(_QWORD *)(v1 + 72);
  v115 = *(_QWORD *)(v1 + 80);
  v107 = *(_QWORD *)(v1 + 88);
  v117 = *(id *)(v1 + 96);
  v110 = *(unsigned __int8 *)(v1 + 104);
  v18 = *(double *)(v1 + 112);
  Value = AGGraphGetValue();
  v95 = v20;
  v22 = *(_QWORD *)Value;
  v21 = *(_QWORD *)(Value + 8);
  v122 = *(unsigned __int8 *)(Value + 16);
  v23 = *(_QWORD *)(Value + 24);
  v24 = AGGraphGetValue();
  v93 = v25;
  v27 = *(_QWORD *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  v28 = *(unsigned __int8 *)(v24 + 16);
  v29 = *(_QWORD *)(v24 + 24);
  v30 = (uint64_t *)AGGraphGetValue();
  v91 = v31;
  v33 = *v30;
  v32 = v30[1];
  v127 = v29;
  v129 = v27;
  v125 = v33;
  v130 = v23;
  v128 = v21;
  v124 = v22;
  v106 = v32;
  v126 = v26;
  if ((v110 & 1) != 0)
  {
    v42 = v21;
    v37 = v122;
    outlined copy of Text.Storage(v22, v42, v122);
    swift_bridgeObjectRetain();
    v43 = v26;
    v35 = v28;
    outlined copy of Text.Storage(v27, v43, v28);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v110 = 0;
    v40 = v124;
    v39 = v123;
LABEL_15:
    if (!v116)
    {
      v41 = v119;
      goto LABEL_29;
    }
    v41 = v119;
    if ((v95 & 1) == 0)
      goto LABEL_19;
    if (!v119)
      goto LABEL_29;
LABEL_18:
    v44 = v128;
    outlined copy of Text.Storage(v40, v128, v37);
    swift_bridgeObjectRetain();
    v45 = v113;
    v46 = (uint64_t)v112;
    v47 = v111;
    outlined copy of Text?(v113, (uint64_t)v112, v111, v119);
    LOBYTE(v137) = v47 & 1;
    LODWORD(v116) = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v40, v44, v37);
    swift_bridgeObjectRelease();
    v48 = v45;
    v39 = v123;
    v49 = v47;
    v41 = v119;
    outlined consume of Text?(v48, v46, v49, v119);
    if ((v116 & 1) == 0)
      goto LABEL_29;
LABEL_19:
    if ((v93 & 1) == 0)
      goto LABEL_22;
    goto LABEL_20;
  }
  v34 = v26;
  v35 = v28;
  v36 = v21;
  v37 = v122;
  if (!v116)
  {
    outlined copy of Text.Storage(v22, v36, v122);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v129, v34, v28);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v39 = v123;
    goto LABEL_11;
  }
  outlined copy of Text.Storage(v22, v36, v122);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v129, v34, v28);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v38 = ResolvedStyledText.isDynamic.getter();
  v39 = v123;
  if ((v38 & 1) == 0)
  {
LABEL_11:
    if (v92)
      v110 = ResolvedStyledText.isDynamic.getter();
    else
      v110 = 0;
    v40 = v22;
    goto LABEL_15;
  }
  if ((v95 & 1) != 0)
  {
    v110 = 1;
    v40 = v22;
    v41 = v119;
    if (!v119)
      goto LABEL_29;
    goto LABEL_18;
  }
  v40 = v22;
  if ((v93 & 1) == 0)
  {
    v41 = v119;
    if ((v91 & 1) == 0)
    {
      if (!AGGraphGetOutputValue())
        goto LABEL_42;
LABEL_26:
      if (*(double *)AGGraphGetValue() >= v18)
      {
LABEL_42:
        v110 = 1;
        goto LABEL_29;
      }
LABEL_27:
      swift_release();
      swift_release();
      outlined consume of Text.Storage(v129, v126, v35);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v40, v128, v37);
      return swift_bridgeObjectRelease();
    }
    v110 = 1;
LABEL_23:
    swift_retain();
    v55 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
    if ((v55 & 1) != 0)
      goto LABEL_29;
    goto LABEL_24;
  }
  v110 = 1;
  v41 = v119;
LABEL_20:
  if (!v117)
    goto LABEL_29;
  v50 = v129;
  outlined copy of Text.Storage(v129, v126, v35);
  swift_bridgeObjectRetain();
  v51 = v108;
  v52 = v107;
  outlined copy of Text?(v108, v115, v107, (uint64_t)v117);
  LOBYTE(v137) = v52 & 1;
  v53 = v126;
  LODWORD(v119) = static Text.== infix(_:_:)();
  outlined consume of Text.Storage(v50, v53, v35);
  swift_bridgeObjectRelease();
  v54 = v52;
  v39 = v123;
  outlined consume of Text?(v51, v115, v54, (uint64_t)v117);
  if ((v119 & 1) == 0)
    goto LABEL_29;
LABEL_22:
  if ((v91 & 1) != 0)
    goto LABEL_23;
LABEL_24:
  if (AGGraphGetOutputValue())
  {
    if ((v110 & 1) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_29:
  PropertyList.Tracker.reset()();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v57 = v128;
  outlined copy of Text.Storage(v40, v128, v37);
  v58 = v130;
  swift_bridgeObjectRetain();
  outlined consume of Text?(v113, (uint64_t)v112, v111, v41);
  *(_QWORD *)(v2 + 40) = v40;
  *(_QWORD *)(v2 + 48) = v57;
  *(_QWORD *)(v2 + 56) = v37;
  *(_QWORD *)(v2 + 64) = v58;
  v59 = v129;
  v60 = v126;
  outlined copy of Text.Storage(v129, v126, v35);
  v61 = v127;
  swift_bridgeObjectRetain();
  outlined consume of Text?(v108, v115, v107, (uint64_t)v117);
  *(_QWORD *)(v2 + 72) = v59;
  *(_QWORD *)(v2 + 80) = v60;
  v118 = v35;
  *(_QWORD *)(v2 + 88) = v35;
  *(_QWORD *)(v2 + 96) = v61;
  v137 = v142;
  v62 = (uint64_t)v97;
  EnvironmentValues.stringResolutionDate.getter();
  v63 = v121;
  v64 = v120;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v62, 1, v120) == 1)
  {
    *(_QWORD *)&v137 = *(_QWORD *)AGGraphGetValue();
    static Date.now.getter();
    outlined destroy of Date?(v62);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v39, v62, v64);
  }
  v65 = v96;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v96, v39, v64);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v65, 0, 1, v64);
  EnvironmentValues.stringResolutionDate.setter();
  v66 = v142;
  v137 = v142;
  v141 = 0uLL;
  swift_retain();
  swift_retain();
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  v67 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  swift_release();
  swift_release();
  v137 = v66;
  v141 = 0uLL;
  swift_retain();
  swift_retain();
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  v117 = (id)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  swift_release();
  swift_release();
  v119 = type metadata accessor for ResolvedStyledText();
  v141 = v66;
  LODWORD(v115) = *(unsigned __int8 *)(v2 + 104);
  LODWORD(v116) = *(unsigned __int8 *)(v2 + 105);
  v133 = v115;
  v134 = v116;
  swift_retain();
  swift_retain();
  Text.isCollapsible()();
  v136 = 2;
  default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  v132 = 0;
  v139 = 0;
  v137 = 0u;
  v138 = 0u;
  v113 = xmmword_187BF9FB0;
  v140 = xmmword_187BF9FB0;
  default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  v131 = v135;
  default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  v112 = v67;
  v68 = v2;
  v69 = static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v141 = v66;
  v133 = v115;
  v134 = v116;
  swift_retain();
  swift_retain();
  Text.isCollapsible()();
  v136 = 2;
  default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  v132 = 0;
  v139 = 0;
  v137 = 0u;
  v138 = 0u;
  v140 = v113;
  default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  v131 = v135;
  default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  LOBYTE(v89) = 0;
  v88[0] = default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  v88[1] = &v136;
  v70 = static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
  swift_release();
  swift_release();
  v71 = v122;
  swift_bridgeObjectRelease();
  v72 = v130;
  swift_bridgeObjectRelease();
  v73 = v124;
  v74 = v128;
  swift_bridgeObjectRelease();
  swift_retain();
  swift_release();
  *(_QWORD *)(v68 + 24) = v69;
  swift_retain();
  swift_release();
  v116 = v68;
  *(_QWORD *)(v68 + 32) = v70;
  outlined copy of Text.Storage(v73, v74, v71);
  swift_bridgeObjectRetain();
  swift_retain();
  *(_QWORD *)&v137 = v69;
  *((_QWORD *)&v137 + 1) = v73;
  *(_QWORD *)&v138 = v74;
  BYTE8(v138) = v71;
  v139 = v72;
  *(_QWORD *)&v140 = 0;
  BYTE8(v140) = 0;
  type metadata accessor for AccessibilityStyledTextContentView();
  v75 = v98;
  AccessibilityStyledTextContentView.body.getter();
  swift_release();
  outlined consume of Text.Storage(v73, v74, v71);
  swift_bridgeObjectRelease();
  v119 = v69;
  *(_QWORD *)&v137 = v69;
  *((_QWORD *)&v137 + 1) = v70;
  v76 = v102;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v78 = (uint64_t)v103;
  MEMORY[0x18D75B4AC](&v137, v76, &unk_1E1AFAE88, AssociatedConformanceWitness);
  v79 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v75, v76);
  v81 = MEMORY[0x1E0C80A78](v79, v80);
  v89 = v105;
  v90 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymmetricTextChildQuery<A>, v81);
  v82 = v114;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v78, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v88, v114, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v83);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v78, v82);
  if ((v110 & 1) != 0)
  {
    *(_QWORD *)&v141 = *(_QWORD *)AGGraphGetValue();
    v84 = v123;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)();
    v85 = *(double *)&v137;
    v135 = *(_QWORD *)AGGraphGetValue();
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)();
    if (*(double *)&v141 < v85)
      v85 = *(double *)&v141;
    type metadata accessor for ViewGraph();
    v86 = MEMORY[0x18D75C5F8]();
    swift_beginAccess();
    v87 = *(double *)(v86 + 376);
    if (v85 < v87)
      v87 = v85;
    *(double *)(v86 + 376) = v87;
    swift_release();
    swift_release();
    swift_release();

    outlined consume of Text.Storage(v129, v126, v118);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v73, v74, v71);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v84, v120);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v123, v120);
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    outlined consume of Text.Storage(v129, v126, v118);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v73, v74, v71);
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance SymmetricTextChildQuery<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SymmetricTextChildQuery<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymmetricTextChildQuery<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t SymmetricallyScaledTextLayout.sizeThatFits(in:context:child:)()
{
  double v0;
  double v1;
  double v2;

  _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)__PAIR128__(0x7FF0000000000000, 0x7FF0000000000000));
  dispatch thunk of ResolvedStyledText.drawingScale(size:)();
  v1 = v0;
  dispatch thunk of ResolvedStyledText.drawingScale(size:)();
  if (v1 <= v2)
    return dispatch thunk of ResolvedStyledText.size(in:)();
  swift_retain();
  ResolvedStyledText.scaleFactorOverride.setter();
  dispatch thunk of ResolvedStyledText.size(in:)();
  return swift_release();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance SymmetricallyScaledTextLayout()
{
  return dispatch thunk of ResolvedStyledText.spacing()();
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance SymmetricallyScaledTextLayout()
{
  PlacementContext.size.getter();
  static UnitPoint.topLeading.getter();
  return _Placement.init(proposedSize:anchoring:at:)();
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance SymmetricallyScaledTextLayout()
{
  return SymmetricallyScaledTextLayout.sizeThatFits(in:context:child:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SymmetricallyScaledTextLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v23 = *a1;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v12 = *(_OWORD *)(a2 + 5);
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v12;
  v20 = *(_OWORD *)(a2 + 7);
  v21 = a2[9];
  v22 = v11;
  v13 = lazy protocol witness table accessor for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 80))(&v23, &v15, a3, a4, a5, v13);
}

void protocol witness for ViewModifier.body(content:) in conformance SymmetricallyScaledTextLayout()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double _sSo15NSLayoutManagerC7SwiftUIE4with_12drawingScale4size16layoutProperties_xSo18NSAttributedStringC_12CoreGraphics7CGFloatVSo6CGSizeVAC010TextLayoutJ0VxAB_So15NSTextContainerCtXEtlFZSo6CGRectVSg_TBm503_s7c28UI17AccessibilityNodeC17withr15ManageryxSgSo18kl8C_AESo08a8G0C_So15st4CSo6U25VtXEtlFAeI_AKtXEfU_AM_TG5AbrTxSgRi_zRi0_zlyATIsgggyr_ATTf1nnnnc_n0vcwxy27C14resolvedBounds2in3forSo6u7VSgSo18kl22C_So8_NSRangeVtFAISo15ab6C_So15sT9CAHtXEfU_So8_NSRangeVTf1nnnncn_nTf4nnnnxn_n@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>)
{
  uint64_t v17;
  int v18;
  Class isa;
  Class v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double result;

  v17 = *(_QWORD *)a2;
  v18 = *(unsigned __int8 *)(a2 + 8);
  if ((v18 & 1) != 0 || v17 != 1)
    isa = NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakByWordWrapping).super.isa;
  else
    isa = a1;
  v20 = isa;
  v21 = (void *)NSAttributedString.scaled(by:)();

  v22 = objc_msgSend(objc_allocWithZone((Class)SwiftUITextStorage), sel_initWithAttributedString_, v21);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1280]), sel_init);
  objc_msgSend(v23, sel_setUsesFontLeading_, 0);
  objc_msgSend(v23, sel_setAllowsOriginalFontMetricsOverride_, 1);
  objc_msgSend(v22, sel_addLayoutManager_, v23);
  objc_msgSend(v22, sel__setForceWordWrapping_, 1);
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C0]), sel_initWithSize_, a6, a7);
  objc_msgSend(v24, sel_setLineFragmentPadding_, 0.0);
  if (v17 <= 1)
    v25 = 1;
  else
    v25 = v17;
  if (v18)
    v26 = 0;
  else
    v26 = v25;
  v27 = *(unsigned __int8 *)(a2 + 25);
  objc_msgSend(v24, sel_setMaximumNumberOfLines_, v26);
  objc_msgSend(v24, sel_setLineBreakMode_, v27 + 3);
  objc_msgSend(v23, sel_addTextContainer_, v24);
  v28 = objc_msgSend(v23, sel_glyphRangeForCharacterRange_actualCharacterRange_, a3, a4, 0);
  objc_msgSend(v23, sel_boundingRectForGlyphRange_inTextContainer_, v28, v29, v24);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;

  result = v33 + a9;
  *(double *)a5 = v31 + a8;
  *(double *)(a5 + 8) = v33 + a9;
  *(_QWORD *)(a5 + 16) = v35;
  *(_QWORD *)(a5 + 24) = v37;
  *(_BYTE *)(a5 + 32) = 0;
  return result;
}

void type metadata accessor for _GraphValue<_SymmetricallyScaledText>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<_SymmetricallyScaledText>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_SymmetricallyScaledText>);
  }
}

uint64_t type metadata accessor for SymmetricTextChildQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SymmetricTextChildQuery);
}

uint64_t destroy for SymmetricTextChildQuery(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_release();
  if (*(_QWORD *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 96))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SymmetricTextChildQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  if (!v5)
  {
    v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    v9 = *(_QWORD *)(a2 + 96);
    if (v9)
      goto LABEL_3;
LABEL_5:
    v14 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v14;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_BYTE *)(a2 + 56);
  outlined copy of Text.Storage(v6, v7, v8);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  v9 = *(_QWORD *)(a2 + 96);
  if (!v9)
    goto LABEL_5;
LABEL_3:
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_BYTE *)(a2 + 88);
  outlined copy of Text.Storage(v10, v11, v12);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRetain();
LABEL_6:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for SymmetricTextChildQuery(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(_QWORD *)(a2 + 48);
      v9 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_BYTE *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      v16 = *(_OWORD *)(a2 + 56);
      *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_BYTE *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 56);
    *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  v18 = (_OWORD *)(a1 + 72);
  v19 = (_OWORD *)(a2 + 72);
  v20 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v20)
    {
      v21 = *(_QWORD *)(a2 + 72);
      v22 = *(_QWORD *)(a2 + 80);
      v23 = *(_BYTE *)(a2 + 88);
      outlined copy of Text.Storage(v21, v22, v23);
      v24 = *(_QWORD *)(a1 + 72);
      v25 = *(_QWORD *)(a1 + 80);
      v26 = *(_BYTE *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = v21;
      *(_QWORD *)(a1 + 80) = v22;
      *(_BYTE *)(a1 + 88) = v23;
      outlined consume of Text.Storage(v24, v25, v26);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 72);
      v30 = *(_OWORD *)(a2 + 88);
      *v18 = *v19;
      *(_OWORD *)(a1 + 88) = v30;
    }
  }
  else if (v20)
  {
    v27 = *(_QWORD *)(a2 + 72);
    v28 = *(_QWORD *)(a2 + 80);
    v29 = *(_BYTE *)(a2 + 88);
    outlined copy of Text.Storage(v27, v28, v29);
    *(_QWORD *)(a1 + 72) = v27;
    *(_QWORD *)(a1 + 80) = v28;
    *(_BYTE *)(a1 + 88) = v29;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 88);
    *v18 = *v19;
    *(_OWORD *)(a1 + 88) = v31;
  }
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for SymmetricTextChildQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  if (*(_QWORD *)(a1 + 64))
  {
    v4 = *(_QWORD *)(a2 + 64);
    if (v4)
    {
      v5 = *(_BYTE *)(a2 + 56);
      v6 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(_QWORD *)(a1 + 64) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v9;
LABEL_6:
  if (!*(_QWORD *)(a1 + 96))
  {
LABEL_10:
    v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v15;
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(a2 + 96);
  if (!v10)
  {
    outlined destroy of Text(a1 + 72);
    goto LABEL_10;
  }
  v11 = *(_BYTE *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v11;
  outlined consume of Text.Storage(v12, v13, v14);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
LABEL_11:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymmetricTextChildQuery(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SymmetricTextChildQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *assignWithCopy for SymmetricallyScaledTextLayout(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *type metadata accessor for SymmetricallyScaledTextLayout()
{
  return &unk_1E1AFAE88;
}

_UNKNOWN **base witness table accessor for ViewModifier in SymmetricallyScaledTextLayout()
{
  return &protocol witness table for SymmetricallyScaledTextLayout;
}

unint64_t lazy protocol witness table accessor for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout;
  if (!lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymmetricallyScaledTextLayout, &unk_1E1AFAE88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout;
  if (!lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymmetricallyScaledTextLayout, &unk_1E1AFAE88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout;
  if (!lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymmetricallyScaledTextLayout, &unk_1E1AFAE88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout;
  if (!lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymmetricallyScaledTextLayout, &unk_1E1AFAE88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout);
  }
  return result;
}

void base witness table accessor for _AttributeBody in SymmetricTextChildQuery<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void View.exportableToServices<A>(payload:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.exportableToServices<A>(payload:onEdit:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.importableFromServices<A>(for:action:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.exportsItemProviders(_:onExport:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.exportsItemProviders(_:onExport:onEdit:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1871DCAE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for ResponderViewModifier<FocusedValueModifier<ServiceItemHandler?>>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ResponderViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for ResponderViewModifier<FocusedValueModifier<ServiceItemHandler?>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ResponderViewModifier<FocusedValueModifier<ServiceItemHandler?>>)
  {
    type metadata accessor for FocusedValueModifier<ServiceItemHandler?>(255);
    v4 = type metadata accessor for ResponderViewModifier(a1, v2, (uint64_t)&protocol witness table for FocusedValueModifier<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ResponderViewModifier<FocusedValueModifier<ServiceItemHandler?>>);
  }
}

void type metadata accessor for FocusedValueModifier<ServiceItemHandler?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for FocusedValueModifier<ServiceItemHandler?>)
  {
    type metadata accessor for ServiceItemHandler?();
    v5 = type metadata accessor for FocusedValueModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for FocusedValueModifier<ServiceItemHandler?>);
  }
}

void type metadata accessor for ServiceItemHandler?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ServiceItemHandler?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ServiceItemHandler?);
  }
}

uint64_t sub_1871DCC44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for ResponderViewModifier<FocusedValueModifier<ServiceItemHandler?>>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ResponderViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t destroy for ServiceItemHandler(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 8))
    result = swift_release();
  if (*(_QWORD *)(a1 + 24))
    return swift_release();
  return result;
}

_QWORD *initializeWithCopy for ServiceItemHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v5 = a2 + 1;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  if (v4)
  {
    v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v5;
  }
  v7 = a2[3];
  if (v7)
  {
    v8 = a2[4];
    a1[3] = v7;
    a1[4] = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  }
  return a1;
}

_QWORD *assignWithCopy for ServiceItemHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      v5 = a2[2];
      a1[1] = v4;
      a1[2] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  v7 = a2[3];
  if (!a1[3])
  {
    if (v7)
    {
      v9 = a2[4];
      a1[3] = v7;
      a1[4] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[4];
  a1[3] = v7;
  a1[4] = v8;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for ServiceItemHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      v5 = a2[2];
      a1[1] = v4;
      a1[2] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  v7 = a2[3];
  if (!a1[3])
  {
    if (v7)
    {
      v9 = a2[4];
      a1[3] = v7;
      a1[4] = v9;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[4];
  a1[3] = v7;
  a1[4] = v8;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ServiceItemHandler()
{
  return &type metadata for ServiceItemHandler;
}

void View.exportableToServices<A>(_:)()
{
  View.exportableToServices<A>(payload:)();
}

void View.importsItemProviders(_:onImport:)()
{
  View.exportsItemProviders(_:onExport:)();
}

void View.exportableToServices<A>(_:onEdit:)()
{
  View.exportableToServices<A>(payload:onEdit:)();
}

unsigned __int16 specialized static Array<A>.== infix(_:_:)@<H0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>)
{
  uint64_t v2;
  unsigned __int16 result;
  float32x4_t *v4;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;

  v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0])
  {
    if (v2)
    {
      if (a1 != a2)
      {
        result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(a1[2], a2[2])), 0xFuLL)));
        if ((result & 1) != 0)
        {
          v4 = a1 + 3;
          v5 = a2 + 3;
          v6 = v2 - 1;
          do
          {
            if (!v6)
              break;
            v7 = *v4++;
            v8 = v7;
            v9 = *v5++;
            result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v8, v9)), 0xFuLL)));
            --v6;
          }
          while ((result & 1) != 0);
        }
      }
    }
  }
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  _BOOL8 result;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 32;
  v4 = a2 + 32;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 != *(_QWORD *)(v6 + 16))
    return 0;
  v8 = 1;
  do
  {
    if (v7 && v5 != v6)
    {
      v9 = (_QWORD *)(v5 + 40);
      v10 = (uint64_t *)(v6 + 40);
      do
      {
        v11 = *v10;
        if (*v9)
        {
          if (!v11)
            return 0;
          v12 = *(v9 - 1) == *(v10 - 1) && *v9 == v11;
          if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return 0;
        }
        else if (v11)
        {
          return 0;
        }
        v9 += 2;
        v10 += 2;
        --v7;
      }
      while (v7);
    }
    result = v8 == v2;
    if (v8 == v2)
      break;
    v14 = 8 * v8++;
    v5 = *(_QWORD *)(v3 + v14);
    v6 = *(_QWORD *)(v4 + v14);
    v7 = *(_QWORD *)(v5 + 16);
  }
  while (v7 == *(_QWORD *)(v6 + 16));
  return result;
}

{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (int *)(a1 + 36);
  v6 = (int *)(a2 + 36);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a1 + 32);
  v4 = (uint64_t *)(a2 + 32);
  v5 = v2 - 1;
  do
  {
    v7 = *v3++;
    v6 = v7;
    v9 = *v4++;
    v8 = v9;
    v11 = v5-- != 0;
    result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  result = CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32));
  if (result)
  {
    if (v2 == 1)
      return 1;
    v6 = v2 - 2;
    v7 = a2 + 88;
    v8 = a1 + 88;
    do
    {
      result = CGRectEqualToRect(*(CGRect *)(v8 - 24), *(CGRect *)(v7 - 24));
      v10 = v6-- != 0;
      if (!result)
        break;
      v7 += 32;
      v8 += 32;
    }
    while (v10);
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  char v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;

  v5 = (void *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_35:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 == v23)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v7 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_35;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v8 = a1;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v24 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_41:
    result = MEMORY[0x18D75E3BC](0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v5 = (void *)result;
  v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_43:
    v13 = (id)MEMORY[0x18D75E3BC](0, a2);
LABEL_21:
    v14 = v13;
    type metadata accessor for AccessibilityNode();
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v21 = i - 4;
        if (v24)
        {
          v22 = (id)MEMORY[0x18D75E3BC](i - 4, a1);
          if (v2)
            goto LABEL_23;
        }
        else
        {
          if (v21 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          v22 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_23:
            v18 = (id)MEMORY[0x18D75E3BC](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v21 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_39;
        v18 = *(id *)(a2 + 8 * i);
LABEL_24:
        v19 = v18;
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

unint64_t specialized static Array<A>.== infix(_:_:)(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = result;
  v5 = result >> 62;
  if (!(result >> 62))
  {
    v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v6 == v22)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  v7 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_34;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = v4 & 0xFFFFFFFFFFFFFF8;
  v9 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v8 = v4;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    result = MEMORY[0x18D75E3BC](0, v4);
    v12 = result;
    v13 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
      goto LABEL_18;
LABEL_41:
    v14 = MEMORY[0x18D75E3BC](0, a2);
LABEL_20:
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 160))(v14);
    swift_release();
    swift_release();
    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v20 = i - 4;
        if (v2)
        {
          v21 = MEMORY[0x18D75E3BC](i - 4, v4);
          if (v13)
            goto LABEL_22;
        }
        else
        {
          if (v20 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          v21 = *(_QWORD *)(v4 + 8 * i);
          swift_retain();
          if (v13)
          {
LABEL_22:
            v18 = MEMORY[0x18D75E3BC](i - 4, a2);
            goto LABEL_23;
          }
        }
        if (v20 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v18 = *(_QWORD *)(a2 + 8 * i);
        swift_retain();
LABEL_23:
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 160))(v18);
        swift_release();
        swift_release();
        if ((v19 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_40;
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  v12 = *(_QWORD *)(v4 + 32);
  result = swift_retain();
  v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_41;
LABEL_18:
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(_QWORD *)(a2 + 32);
    swift_retain();
    goto LABEL_20;
  }
LABEL_43:
  __break(1u);
  return result;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v30)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v6 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v5 != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v5)
    goto LABEL_37;
  v7 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0)
    v7 = v3;
  if (!v4)
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = v2 & 0xFFFFFFFFFFFFFF8;
  v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v31 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v3 + 32); ; result = (id)MEMORY[0x18D75E3BC](0, v3))
  {
    v12 = result;
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v13 = (id)MEMORY[0x18D75E3BC](0, v2);
LABEL_21:
    v14 = v13;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISearchToken);
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0)
      goto LABEL_48;
    v16 = v5 - 1;
    if (v5 == 1)
      return (id)(v5 & 1);
    if (((v2 | v3) & 0xC000000000000001) != 0)
    {
      v17 = 0;
      v18 = v5 - 2;
      while (v16 != v17)
      {
        v5 = v17 + 1;
        if (v31)
          v19 = (id)MEMORY[0x18D75E3BC](v17 + 1, v3);
        else
          v19 = *(id *)(v3 + 40 + 8 * v17);
        v20 = v19;
        if ((v2 & 0xC000000000000001) != 0)
        {
          v21 = (id)MEMORY[0x18D75E3BC](v17 + 1, v2);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v8 + 16))
            goto LABEL_53;
          v21 = *(id *)(v2 + 40 + 8 * v17);
        }
        v22 = v21;
        v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v18 != v17++)
          continue;
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v24 <= 1)
        v24 = 1;
      v25 = v24 - 1;
      v26 = (void **)(v3 + 40);
      v8 = v2 + 40;
      while (v16)
      {
        if (!v25)
          goto LABEL_52;
        v28 = *v26++;
        v27 = v28;
        v29 = *(void **)v8;
        v8 += 8;
        v2 = v27;
        v3 = v29;
        v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16)
            continue;
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

unint64_t TableColumnCustomization.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t TableColumnCustomization.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD v8[4];
  char v9;

  v3 = *v2;
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = 0;
  v8[3] = 0;
  v9 = 0;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
  v5 = 0;
  if ((v6 & 1) != 0)
    v5 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + 16 * v4 + 9);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t key path getter for TableColumnCustomization.subscript(visibility:) : <A>TableColumnCustomization<A>A@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = TableColumnCustomization.subscript.getter(v3, v4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t key path setter for TableColumnCustomization.subscript(visibility:) : <A>TableColumnCustomization<A>A(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  v4 = *a3;
  v5 = a3[1];
  v6 = *a1;
  type metadata accessor for TableColumnCustomization(0, *(uint64_t *)((char *)a3 + a4 - 16), *(uint64_t *)((char *)a3 + a4 - 8), a4);
  swift_bridgeObjectRetain();
  specialized TableColumnCustomization.subscript.setter(v6, v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t TableColumnCustomization.subscript.setter(__int16 a1, uint64_t a2, uint64_t a3)
{
  specialized TableColumnCustomization.subscript.setter(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

void (*TableColumnCustomization.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  *((_BYTE *)v9 + 32) = TableColumnCustomization.subscript.getter(a2, a3);
  return TableColumnCustomization.subscript.modify;
}

void TableColumnCustomization.subscript.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v1 = *a1;
  v3 = **a1;
  v2 = (*a1)[1];
  v4 = *((unsigned __int8 *)*a1 + 32);
  swift_bridgeObjectRetain();
  specialized TableColumnCustomization.subscript.setter(v4, v3, v2);
  swift_bridgeObjectRelease();
  free(v1);
}

Swift::Void __swiftcall TableColumnCustomization.resetOrder()()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 8) = 0;
}

uint64_t static TableColumnCustomization.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    if (v2)
    {
      if (v3 && (specialized static Array<A>.== infix(_:_:)(v2, v3) & 1) != 0)
        return 1;
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  char v23;
  int v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v31[4];
  char v32;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v4 << 6);
LABEL_26:
    v16 = *(_QWORD *)(v3 + 48) + 40 * v12;
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 24);
    v20 = *(_BYTE *)(v16 + 32);
    v21 = *(_QWORD *)(v3 + 56) + 16 * v12;
    v22 = *(double *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    v24 = *(unsigned __int8 *)(v21 + 9);
    v31[0] = *(_QWORD *)v16;
    v31[1] = v17;
    v31[2] = v18;
    v31[3] = v19;
    v32 = v20;
    outlined copy of TableColumnCustomizationID.Base(v31[0], v17, v18, v19, v20);
    v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v31);
    v27 = v26;
    result = outlined release of TableColumnCustomizationID((uint64_t)v31);
    if ((v27 & 1) == 0)
      return 0;
    v28 = *(_QWORD *)(a2 + 56) + 16 * v25;
    v29 = *(unsigned __int8 *)(v28 + 9);
    if ((*(_BYTE *)(v28 + 8) & 1) != 0)
    {
      if (v29 == v24)
        v10 = v23;
      else
        v10 = 0;
      if ((v10 & 1) == 0)
        return 0;
    }
    else
    {
      if ((v23 & 1) != 0)
        return 0;
      if (*(double *)v28 != v22 || v29 != v24)
        return 0;
    }
  }
  v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v13 >= v9)
    return 1;
  v14 = *(_QWORD *)(v5 + 8 * v13);
  ++v4;
  if (v14)
    goto LABEL_25;
  v4 = v13 + 1;
  if (v13 + 1 >= v9)
    return 1;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
    goto LABEL_25;
  v4 = v13 + 2;
  if (v13 + 2 >= v9)
    return 1;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_25:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_26;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return 1;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_25;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_25;
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  int64_t v22;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v21 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v22 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v4 << 6);
      goto LABEL_22;
    }
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v10 >= v22)
      return 1;
    v11 = *(_QWORD *)(v21 + 8 * v10);
    ++v4;
    if (!v11)
    {
      v4 = v10 + 1;
      if (v10 + 1 >= v22)
        return 1;
      v11 = *(_QWORD *)(v21 + 8 * v4);
      if (!v11)
      {
        v4 = v10 + 2;
        if (v10 + 2 >= v22)
          return 1;
        v11 = *(_QWORD *)(v21 + 8 * v4);
        if (!v11)
          break;
      }
    }
LABEL_21:
    v7 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v4 << 6);
LABEL_22:
    v13 = *(_QWORD *)(v3 + 48) + 24 * v9;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_BYTE *)(v13 + 16);
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v9);
    outlined copy of TabCustomizationID.Base();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15, v16);
    v20 = v19;
    result = outlined consume of TabCustomizationID.Base();
    if ((v20 & 1) == 0 || *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v18) != v17)
      return 0;
  }
  v12 = v10 + 3;
  if (v12 >= v22)
    return 1;
  v11 = *(_QWORD *)(v21 + 8 * v12);
  if (v11)
  {
    v4 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v4 >= v22)
      return 1;
    v11 = *(_QWORD *)(v21 + 8 * v4);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v26 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v27 = (unint64_t)(v5 + 63) >> 6;
  while (v7)
  {
    v8 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v9 = v8 | (v4 << 6);
LABEL_23:
    v13 = *(_QWORD *)(v3 + 48) + 24 * v9;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_BYTE *)(v13 + 16);
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v9);
    outlined copy of TabCustomizationID.Base();
    swift_bridgeObjectRetain();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15, v16);
    v20 = v19;
    outlined consume of TabCustomizationID.Base();
    if ((v20 & 1) == 0)
      goto LABEL_40;
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v18);
    v22 = *(_QWORD *)(v21 + 16);
    if (v22 != *(_QWORD *)(v17 + 16))
      goto LABEL_40;
    if (v22)
      v23 = v21 == v17;
    else
      v23 = 1;
    if (!v23)
    {
      v24 = 0;
      while (1)
      {
        if ((*(_BYTE *)(v21 + v24 + 48) & 1) != 0)
        {
          if ((*(_BYTE *)(v17 + v24 + 48) & 1) == 0)
            break;
        }
        else if ((*(_BYTE *)(v17 + v24 + 48) & 1) != 0)
        {
          break;
        }
        v25 = *(_QWORD *)(v21 + v24 + 32) == *(_QWORD *)(v17 + v24 + 32)
           && *(_QWORD *)(v21 + v24 + 40) == *(_QWORD *)(v17 + v24 + 40);
        if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          break;
        v24 += 24;
        if (!--v22)
          goto LABEL_6;
      }
LABEL_40:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_6:
    result = swift_bridgeObjectRelease();
  }
  v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  if (v10 >= v27)
    return 1;
  v11 = *(_QWORD *)(v26 + 8 * v10);
  ++v4;
  if (v11)
    goto LABEL_22;
  v4 = v10 + 1;
  if (v10 + 1 >= v27)
    return 1;
  v11 = *(_QWORD *)(v26 + 8 * v4);
  if (v11)
    goto LABEL_22;
  v4 = v10 + 2;
  if (v10 + 2 >= v27)
    return 1;
  v11 = *(_QWORD *)(v26 + 8 * v4);
  if (v11)
  {
LABEL_22:
    v7 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v4 << 6);
    goto LABEL_23;
  }
  v12 = v10 + 3;
  if (v12 >= v27)
    return 1;
  v11 = *(_QWORD *)(v26 + 8 * v12);
  if (v11)
  {
    v4 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v4 >= v27)
      return 1;
    v11 = *(_QWORD *)(v26 + 8 * v4);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_44:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  char v26;
  int64_t v27;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v27)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v27)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v27)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  __int16 v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  int64_t v38;
  double v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  __int16 v46;
  uint64_t v47;
  char v48;
  _BYTE v49[40];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[4];
  _BYTE v57[48];
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  __int16 v65;
  uint64_t v66;
  char v67;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v37 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v38 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v4 << 6);
LABEL_8:
      outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v3 + 48) + 40 * v9, (uint64_t)&v50);
      v10 = *(_QWORD *)(v3 + 56) + 80 * v9;
      v11 = *(_BYTE *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(_BYTE *)(v10 + 24);
      v15 = *(_QWORD *)(v10 + 32);
      v16 = *(_BYTE *)(v10 + 40);
      v17 = *(_QWORD *)(v10 + 48);
      v18 = *(_BYTE *)(v10 + 56);
      v19 = *(_WORD *)(v10 + 57);
      v20 = *(_QWORD *)(v10 + 64);
      LOBYTE(v10) = *(_BYTE *)(v10 + 72);
      BYTE8(v52) = v11;
      v53 = v12;
      *(_QWORD *)&v54 = v13;
      BYTE8(v54) = v14;
      *(_QWORD *)&v55 = v15;
      BYTE8(v55) = v16;
      v56[0] = v17;
      LOBYTE(v56[1]) = v18;
      *(_WORD *)((char *)&v56[1] + 1) = v19;
      v56[2] = v20;
      LOBYTE(v56[3]) = v10;
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_30;
    }
    v21 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v21 < v38)
    {
      v22 = *(_QWORD *)(v37 + 8 * v21);
      if (v22)
        goto LABEL_12;
      v23 = v4 + 2;
      ++v4;
      if (v21 + 1 < v38)
      {
        v22 = *(_QWORD *)(v37 + 8 * v23);
        if (v22)
          goto LABEL_15;
        v4 = v21 + 1;
        if (v21 + 2 < v38)
        {
          v22 = *(_QWORD *)(v37 + 8 * (v21 + 2));
          if (v22)
          {
            v21 += 2;
            goto LABEL_12;
          }
          v4 = v21 + 2;
          if (v21 + 3 < v38)
          {
            v22 = *(_QWORD *)(v37 + 8 * (v21 + 3));
            if (v22)
            {
              v21 += 3;
              goto LABEL_12;
            }
            v23 = v21 + 4;
            v4 = v21 + 3;
            if (v21 + 4 < v38)
              break;
          }
        }
      }
    }
LABEL_29:
    v7 = 0;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    v53 = 1;
    v54 = 0u;
    v55 = 0u;
    memset(v56, 0, 25);
LABEL_30:
    outlined init with take of (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?((uint64_t)&v50, (uint64_t)v57);
    if (v58 == 1)
      return 1;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v57, (uint64_t)v49);
    LOBYTE(v50) = v57[40];
    *((_QWORD *)&v50 + 1) = v58;
    *(_QWORD *)&v51 = v59;
    BYTE8(v51) = v60;
    *(_QWORD *)&v52 = v61;
    BYTE8(v52) = v62;
    v53 = v63;
    LOBYTE(v54) = v64;
    *(_WORD *)((char *)&v54 + 1) = v65;
    *((_QWORD *)&v54 + 1) = v66;
    LOBYTE(v55) = v67;
    v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v49, (void (*)(_BYTE *))ToolbarPlacement.Role.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    v26 = v25;
    outlined destroy of ToolbarPlacement.Role((uint64_t)v49);
    if ((v26 & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_release();
      return 0;
    }
    v27 = *(_QWORD *)(a2 + 56) + 80 * v24;
    v28 = *(_BYTE *)(v27 + 24);
    v29 = *(_QWORD *)(v27 + 32);
    v30 = *(_BYTE *)(v27 + 40);
    v31 = *(_QWORD *)(v27 + 48);
    v32 = *(_BYTE *)(v27 + 56);
    v33 = *(_WORD *)(v27 + 57);
    v34 = *(_QWORD *)(v27 + 64);
    v35 = *(_BYTE *)(v27 + 72);
    LOBYTE(v39) = *(_BYTE *)v27;
    v40 = *(_OWORD *)(v27 + 8);
    v41 = v28;
    v42 = v29;
    v43 = v30;
    v44 = v31;
    v45 = v32;
    v46 = v33;
    v47 = v34;
    v48 = v35;
    v36 = specialized static ToolbarAppearanceConfiguration.== infix(_:_:)(&v39, (double *)&v50);
    swift_release();
    swift_release();
    result = swift_release();
    if ((v36 & 1) == 0)
      return 0;
  }
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
LABEL_15:
    v21 = v23;
LABEL_12:
    v7 = (v22 - 1) & v22;
    v9 = __clz(__rbit64(v22)) + (v21 << 6);
    v4 = v21;
    goto LABEL_8;
  }
  while (1)
  {
    v21 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v21 >= v38)
    {
      v4 = v38 - 1;
      goto LABEL_29;
    }
    v22 = *(_QWORD *)(v37 + 8 * v21);
    ++v23;
    if (v22)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v28 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v29 = (unint64_t)(v4 + 63) >> 6;
  v30 = result;
  while (v6)
  {
    v31 = (v6 - 1) & v6;
    v32 = v3;
    v7 = __clz(__rbit64(v6)) | (v3 << 6);
LABEL_24:
    v12 = *(_QWORD *)(result + 48) + 24 * v7;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_BYTE *)(v12 + 16);
    v16 = *(_QWORD *)(result + 56) + 32 * v7;
    v18 = *(_QWORD *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(unsigned __int8 *)(v16 + 24);
    outlined copy of SceneID(*(_QWORD *)v12, v14, v15);
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14, v15);
    v23 = v22;
    outlined consume of SceneID(v13, v14, v15);
    if ((v23 & 1) == 0
      || ((v24 = *(_QWORD *)(a2 + 56) + 32 * v21,
           v25 = *(_QWORD *)(v24 + 16),
           v26 = *(unsigned __int8 *)(v24 + 24),
           *(_QWORD *)v24 == v18)
        ? (v27 = *(_QWORD *)(v24 + 8) == v17)
        : (v27 = 0),
          !v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v25 != v19))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    swift_bridgeObjectRelease();
    result = v30;
    v6 = v31;
    v3 = v32;
    if (v26 != v20)
      return 0;
  }
  v8 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v8 >= v29)
    return 1;
  v9 = *(_QWORD *)(v28 + 8 * v8);
  v10 = v3 + 1;
  if (v9)
    goto LABEL_23;
  v10 = v3 + 2;
  if (v3 + 2 >= v29)
    return 1;
  v9 = *(_QWORD *)(v28 + 8 * v10);
  if (v9)
    goto LABEL_23;
  v10 = v3 + 3;
  if (v3 + 3 >= v29)
    return 1;
  v9 = *(_QWORD *)(v28 + 8 * v10);
  if (v9)
    goto LABEL_23;
  v10 = v3 + 4;
  if (v3 + 4 >= v29)
    return 1;
  v9 = *(_QWORD *)(v28 + 8 * v10);
  if (v9)
  {
LABEL_23:
    v31 = (v9 - 1) & v9;
    v32 = v10;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    goto LABEL_24;
  }
  v11 = v3 + 5;
  if (v3 + 5 >= v29)
    return 1;
  v9 = *(_QWORD *)(v28 + 8 * v11);
  if (v9)
  {
    v10 = v3 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v29)
      return 1;
    v9 = *(_QWORD *)(v28 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];
  char v32;
  __int128 v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  _QWORD v38[2];
  char v39;
  __int128 v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    v16 = *(_QWORD *)(a1 + 56) + 80 * v11;
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(_BYTE *)(v16 + 16);
    v19 = *(_BYTE *)(v16 + 40);
    v20 = *(_QWORD *)(v16 + 64);
    v21 = *(_BYTE *)(v16 + 72);
    v38[0] = *(_QWORD *)v16;
    v38[1] = v17;
    v39 = v18;
    v40 = *(_OWORD *)(v16 + 24);
    v41 = v19;
    v42 = *(_OWORD *)(v16 + 48);
    v43 = v20;
    v44 = v21;
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    if ((v23 & 1) != 0)
    {
      v24 = *(_QWORD *)(a2 + 56) + 80 * v22;
      v25 = *(_QWORD *)(v24 + 8);
      v26 = *(_BYTE *)(v24 + 16);
      v27 = *(_BYTE *)(v24 + 40);
      v28 = *(_QWORD *)(v24 + 64);
      v29 = *(_BYTE *)(v24 + 72);
      v31[0] = *(_QWORD *)v24;
      v31[1] = v25;
      v32 = v26;
      v33 = *(_OWORD *)(v24 + 24);
      v34 = v27;
      v35 = *(_OWORD *)(v24 + 48);
      v36 = v28;
      v37 = v29;
      specialized static SpatialEventCollection.Event.== infix(_:_:)((uint64_t)v31, (uint64_t)v38);
      if ((v30 & 1) != 0)
        continue;
    }
    return;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  double v15;
  char v16;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * result) != v15)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 12 * v11), *(_BYTE *)(*(_QWORD *)(v3 + 48) + 12 * v11 + 8));
    if ((v16 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result) != v15)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  char v16;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v11);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + result) != v15)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  char v16;
  int v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_24:
    v15 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v11);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 24 * v11), *(_BYTE *)(*(_QWORD *)(v3 + 48) + 24 * v11 + 8), *(_QWORD *)(*(_QWORD *)(v3 + 48) + 24 * v11 + 16));
    if ((v16 & 1) != 0)
    {
      v17 = *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * result);
      if (v17 != -1 && v15 != -1 && v17 == v15)
        continue;
    }
    return 0;
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v12 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_23;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_23;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_23;
  v4 = v12 + 3;
  if (v12 + 3 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_24;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_33:
  __break(1u);
  return result;
}

BOOL static TableColumnCustomization.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TableColumnCustomization.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t TableColumnCustomization.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D756C6F43726570 && a2 == 0xEE0065746174536ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x724F6E6D756C6F63 && a2 == 0xEB00000000726564)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int TableColumnCustomization.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t TableColumnCustomization.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x724F6E6D756C6F63;
  else
    return 0x6D756C6F43726570;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomization<A>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static TableColumnCustomization.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomization<A>.CodingKeys()
{
  char *v0;

  return TableColumnCustomization.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TableColumnCustomization<A>.CodingKeys(uint64_t a1)
{
  char *v1;

  TableColumnCustomization.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomization<A>.CodingKeys()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  TableColumnCustomization.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomization<A>.CodingKeys()
{
  char *v0;

  return TableColumnCustomization.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomization<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TableColumnCustomization.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TableColumnCustomization<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance AccessibilityLargeContentViewHitTestingTransform();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomization<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomization<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t TableColumnCustomization.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v6 = type metadata accessor for TableColumnCustomization.CodingKeys(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.CodingKeys, v6);
  v7 = type metadata accessor for KeyedEncodingContainer();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v19 - v10;
  v12 = *v4;
  v20 = v4[1];
  v13 = a1[3];
  v14 = a1;
  v16 = v15;
  __swift_project_boxed_opaque_existential_1(v14, v13);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v23 = v12;
  v22 = 0;
  type metadata accessor for [TableColumnCustomizationID : TableColumnCustomizationEntry]();
  lazy protocol witness table accessor for type [TableColumnCustomizationID : TableColumnCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TableColumnCustomizationID : TableColumnCustomizationEntry] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry, MEMORY[0x1E0DEA0B8]);
  v17 = v21;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v17)
  {
    v23 = v20;
    v22 = 1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [TableColumnCustomizationID], (uint64_t)&type metadata for TableColumnCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [TableColumnCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TableColumnCustomizationID] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v16);
}

uint64_t TableColumnCustomization.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v19 = a5;
  v7 = type metadata accessor for TableColumnCustomization.CodingKeys(255, a2, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.CodingKeys, v7);
  v20 = type metadata accessor for KeyedDecodingContainer();
  v8 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v9);
  v11 = (char *)&v18 - v10;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v5)
  {
    v12 = v8;
    v13 = v19;
    type metadata accessor for [TableColumnCustomizationID : TableColumnCustomizationEntry]();
    v21 = 0;
    lazy protocol witness table accessor for type [TableColumnCustomizationID : TableColumnCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TableColumnCustomizationID : TableColumnCustomizationEntry] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry, MEMORY[0x1E0DEA0D8]);
    v14 = v20;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v15 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [TableColumnCustomizationID], (uint64_t)&type metadata for TableColumnCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v21 = 1;
    lazy protocol witness table accessor for type [TableColumnCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TableColumnCustomizationID] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v14);
    v17 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v13 = v15;
    v13[1] = v17;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomization<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return TableColumnCustomization.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomization<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TableColumnCustomization.encode(to:)(a1, a2, a3, a4);
}

uint64_t TableColumnCustomizationEntry.Visibility.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  char v35;

  v32 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.Visibility.HiddenCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys, (uint64_t)&unk_1E1AFB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v28 = (char *)&v25 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.Visibility.VisibleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys, (uint64_t)&unk_1E1AFB0C0, v3);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v25 = (char *)&v25 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys, (uint64_t)&unk_1E1AFB0E0, v3);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v25 - v14;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.Visibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys, (uint64_t)&unk_1E1AFB010, v3);
  v17 = v16;
  v31 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v25 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v32)
  {
    if (v32 == 1)
    {
      v34 = 1;
      lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys();
      v21 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v23 = v26;
      v22 = v27;
    }
    else
    {
      v35 = 2;
      lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys();
      v21 = v28;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v23 = v29;
      v22 = v30;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
  }
  else
  {
    v33 = 0;
    lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v20, v17);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationEntry.Visibility.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C6269736976;
  if (*v0 != 1)
    v1 = 0x6E6564646968;
  if (*v0)
    return v1;
  else
    return 0x6974616D6F747561;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationEntry.Visibility.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TableColumnCustomizationEntry.Visibility.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.Visibility.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.Visibility.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys();
  return CodingKey.debugDescription.getter();
}

char *protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationEntry.Visibility@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = specialized TableColumnCustomizationEntry.Visibility.init(from:)(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationEntry.Visibility(_QWORD *a1)
{
  unsigned __int8 *v1;

  return TableColumnCustomizationEntry.Visibility.encode(to:)(a1, *v1);
}

void TableColumnCustomizationEntry.hash(into:)(uint64_t a1, Swift::UInt64 a2, unsigned __int16 a3)
{
  unsigned int v3;
  Swift::UInt64 v5;

  v3 = a3;
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v5 = a2;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
  }
  Hasher._combine(_:)(v3 >> 8);
}

uint64_t TableColumnCustomizationEntry.encode(to:)(_QWORD *a1, uint64_t a2, __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  char v16;
  char v17;
  char v18;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys, (uint64_t)&unk_1E1AFAF80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14[2] = a2;
  v15 = a3 & 1;
  v18 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  v12 = v14[1];
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v12)
  {
    v17 = HIBYTE(a3);
    v16 = 1;
    lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

Swift::Int TableColumnCustomizationEntry.hashValue.getter(Swift::UInt64 a1, unsigned __int16 a2)
{
  char v2;
  unsigned int v4;
  Swift::UInt64 v5;

  v2 = a2;
  v4 = a2;
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v5 = a1;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
  }
  Hasher._combine(_:)(v4 >> 8);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationEntry.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x696C696269736976;
  else
    return 0x57746E6572727563;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationEntry.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TableColumnCustomizationEntry.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationEntry@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int16 v5;

  result = specialized TableColumnCustomizationEntry.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(_BYTE *)(a2 + 9) = HIBYTE(v5);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationEntry(_QWORD *a1)
{
  uint64_t v1;

  return TableColumnCustomizationEntry.encode(to:)(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 9) << 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomizationEntry()
{
  uint64_t v0;

  return TableColumnCustomizationEntry.hashValue.getter(*(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8) | (unsigned __int16)(*(unsigned __int8 *)(v0 + 9) << 8));
}

void protocol witness for Hashable.hash(into:) in conformance TableColumnCustomizationEntry(uint64_t a1)
{
  uint64_t v1;

  TableColumnCustomizationEntry.hash(into:)(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8) | (*(unsigned __int8 *)(v1 + 9) << 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomizationEntry()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt v3;
  Swift::UInt64 v4;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = v1;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomizationEntry(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9);
}

uint64_t TableColumnCustomizationEntry.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(25);
  v0._countAndFlagsBits = 0x203A6874646977;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x696269736976202CLL;
  v2._object = (void *)0xEE00203A7974696CLL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t TableColumnCustomizationID.TransientHint.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[4];
  char v15;
  char v16;

  v14[2] = a5;
  v14[1] = a4;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.TransientHint.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys, (uint64_t)&unk_1E1AF0480, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = 0;
  v12 = v14[3];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v12)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t TableColumnCustomizationID.Base.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  char v28;
  __int128 v29;
  __int128 v30;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.Base.TransientCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys, (uint64_t)&unk_1E1AF06B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v19 - v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.Base.ExplicitCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys, (uint64_t)&unk_1E1AF0620, v2);
  v8 = v7;
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v19 - v10;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.Base.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys, (uint64_t)&unk_1E1AF0590, v2);
  v13 = v12;
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v19 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of TableColumnCustomizationID.Base(v23, (uint64_t)v27);
  if ((v28 & 1) != 0)
  {
    v29 = v27[0];
    v30 = v27[1];
    LOBYTE(v25) = 1;
    lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v25 = v29;
    v26 = v30;
    lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint();
    v17 = v22;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v17);
  }
  else
  {
    LOBYTE(v25) = 0;
    lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v16, v13);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry()
{
  return TableColumnCustomizationEntry.description.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationID.TransientHint.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 25705;
  else
    return 1701667182;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationID.TransientHint.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TableColumnCustomizationID.TransientHint.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.TransientHint.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.TransientHint.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationID.TransientHint@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = specialized TableColumnCustomizationID.TransientHint.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationID.TransientHint(_QWORD *a1)
{
  uint64_t *v1;

  return TableColumnCustomizationID.TransientHint.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomizationID.TransientHint()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TableColumnCustomizationID.TransientHint()
{
  String.hash(into:)();
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomizationID.TransientHint()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomizationID.TransientHint(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationID.Base.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6569736E617274;
  else
    return 0x746963696C707865;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationID.Base.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TableColumnCustomizationID.Base.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.Base.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.Base.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.Base.ExplicitCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.Base.ExplicitCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.Base.TransientCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.Base.TransientCodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationID.Base@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v5[5];

  result = specialized TableColumnCustomizationID.Base.init(from:)(a1, v5);
  if (!v2)
    return outlined init with take of TableColumnCustomizationID.Base((uint64_t)v5, a2);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationID.Base(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v4[40];

  outlined init with take of TableColumnCustomizationID.Base(v1, (uint64_t)v4);
  return TableColumnCustomizationID.Base.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomizationID.Base()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v1 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TableColumnCustomizationID.Base()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomizationID.Base()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v1 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomizationID.Base(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];
  _BYTE v5[40];

  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v4);
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)v5);
  return specialized static TableColumnCustomizationID.Base.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t TableColumnCustomizationID.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[40];
  _BYTE v12[40];

  v2 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys, (uint64_t)&unk_1E1AF03F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of TableColumnCustomizationID.Base(v2, (uint64_t)v12);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v12, (uint64_t)v11);
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
}

Swift::Int TableColumnCustomizationID.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  outlined release of TableColumnCustomizationID(v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationID.CodingKeys()
{
  return 1702060386;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationID.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.CodingKeys()
{
  lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationID@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  specialized TableColumnCustomizationID.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationID(_QWORD *a1)
{
  return TableColumnCustomizationID.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomizationID()
{
  return TableColumnCustomizationID.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TableColumnCustomizationID()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  return outlined consume of TableColumnCustomizationID.Base(v1, v2, v3, v4, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomizationID()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  outlined consume of TableColumnCustomizationID.Base(v1, v2, v3, v4, v5);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomizationID(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return specialized static TableColumnCustomizationID.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

uint64_t TableColumnCustomizationID.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v4;
  _BYTE v5[40];
  Swift::String v6[2];
  char v7;
  Swift::String v8;
  Swift::String v9;

  outlined init with take of TableColumnCustomizationID.Base(v0, (uint64_t)v5);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v5, (uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    v8 = v6[0];
    v9 = v6[1];
    v1._countAndFlagsBits = 0x6569736E6172745BLL;
    v1._object = (void *)0xEC000000203A746ELL;
    String.append(_:)(v1);
    _print_unlocked<A, B>(_:_:)();
    v2._countAndFlagsBits = 93;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    return 0;
  }
  else
  {
    v8._countAndFlagsBits = 0x6963696C7078655BLL;
    v8._object = (void *)0xEB00000000203A74;
    String.append(_:)(v6[0]);
    v4._countAndFlagsBits = 93;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return v8._countAndFlagsBits;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID()
{
  return TableColumnCustomizationID.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyTableColumnCustomization(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    if (v2)
    {
      if (v3 && (specialized static Array<A>.== infix(_:_:)(v2, v3) & 1) != 0)
        return 1;
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t protocol witness for Projection.get(base:) in conformance TableColumnCustomization<A>.ToAnyCustomization@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = specialized TableColumnCustomization.ToAnyCustomization.get(base:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance TableColumnCustomization<A>.ToAnyCustomization(_QWORD *a1, uint64_t *a2)
{
  return specialized TableColumnCustomization.ToAnyCustomization.set(base:newValue:)(a1, *a2, a2[1]);
}

__n128 SceneStorage.init<A>(wrappedValue:_:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;
  _QWORD v21[2];
  _QWORD v22[2];
  __n128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v11 = a1[1];
  v21[0] = *a1;
  v21[1] = v11;
  v12 = type metadata accessor for TableColumnCustomization(0, a4, a5, a4);
  v14 = type metadata accessor for TableColumnCustomizationTransform(0, a4, a5, v13);
  SceneStorage.init<A>(key:transform:defaultValue:)(a2, a3, v15, (uint64_t)v21, v12, v14, (uint64_t)&protocol witness table for TableColumnCustomizationTransform<A>, (char *)v22);
  v16 = v22[1];
  v17 = v24;
  v18 = v26;
  result = v23;
  v20 = v25;
  *(_QWORD *)a6 = v22[0];
  *(_QWORD *)(a6 + 8) = v16;
  *(__n128 *)(a6 + 16) = result;
  *(_QWORD *)(a6 + 32) = v17;
  *(_OWORD *)(a6 + 40) = v20;
  *(_QWORD *)(a6 + 56) = v18;
  return result;
}

char *AppStorage.init<A>(wrappedValue:_:store:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[2];

  v11 = *a1;
  v12 = a1[1];
  v13 = type metadata accessor for TableColumnCustomizationTransform(0, a5, a6, a4);
  v18[0] = v11;
  v18[1] = v12;
  v15 = type metadata accessor for TableColumnCustomization(0, a5, a6, v14);
  v16 = specialized AppStorage.init(key:transform:store:defaultValue:)(a2, a3, v13, (uint64_t)&protocol witness table for TableColumnCustomizationTransform<A>, a4, (uint64_t)v18, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t TableColumnCustomizationTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[40];
  __int128 v19;
  __int128 v20;

  *a4 = 1;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18), (v12 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v18);
  if (*((_QWORD *)&v20 + 1))
  {
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      v15 = type metadata accessor for TableColumnCustomization(0, a5, a6, v14);
      *(_QWORD *)(a7 + 24) = v15;
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>, v15);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data._Representation(a2, a3);
      return swift_release();
    }
  }
  else
  {
    result = outlined destroy of AccessibilityTableContext?((uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  }
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  return result;
}

void static TableColumnCustomizationTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v11 = objc_msgSend(a1, sel_dataForKey_, v10);

  if (v11)
  {
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    v16 = type metadata accessor for TableColumnCustomization(0, a4, a5, v15);
    *(_QWORD *)(a6 + 24) = v16;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>, v16);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v12, v14);
    swift_release();
  }
  else
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
}

void static TableColumnCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Class isa;
  void *v20;
  _QWORD v21[4];
  _QWORD v22[4];

  v11 = MEMORY[0x1E0DEE9B8] + 8;
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  if (v22[3])
  {
    v13 = type metadata accessor for TableColumnCustomization(0, a5, a6, v12);
    if ((swift_dynamicCast() & 1) != 0)
    {
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      v22[0] = v21[2];
      v22[1] = v21[3];
      v14 = type metadata accessor for Optional();
      v21[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>, v13);
      MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE988], v14, v21);
      v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      v18 = v17;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      outlined copy of Data._Representation(v16, v18);
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v16, v18);
      v20 = (void *)MEMORY[0x18D75CC88](a3, a4);
      objc_msgSend(a2, sel_setObject_forKey_, isa, v20);
      swift_unknownObjectRelease();

      outlined consume of Data?(v16, v18);
      return;
    }
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for Any?, v11);
  }
  v15 = (void *)MEMORY[0x18D75CC88](a3, a4);
  objc_msgSend(a2, sel_removeObjectForKey_, v15);

}

uint64_t protocol witness for SceneStorageValueTransform.readValue(from:key:read:) in conformance TableColumnCustomizationTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return TableColumnCustomizationTransform.readValue(from:key:read:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for SceneStorageValueTransform.writeValue(_:to:key:) in conformance TableColumnCustomizationTransform<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized TableColumnCustomizationTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

void protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance TableColumnCustomizationTransform<A>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  static TableColumnCustomizationTransform.readValue(from:key:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

void protocol witness for static UserDefaultsValueTransform.writeValue(_:to:key:) in conformance TableColumnCustomizationTransform<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  static TableColumnCustomizationTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt v2;
  Swift::Int v3;

  Hasher.init(_seed:)();
  if ((a1 - 2) >= 3u)
  {
    Hasher._combine(_:)(0);
    v2 = a1 & 1;
  }
  else
  {
    v2 = (a1 - 2) + 1;
  }
  Hasher._combine(_:)(v2);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, char a3)
{
  char v6;
  Swift::Int v7;

  v6 = a3 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  String.hash(into:)();
  v7 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6, v7);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))SensoryFeedback.FeedbackType.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA2A0], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned __int8 a2)
{
  Swift::UInt v4;
  Swift::Int v5;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if ((a2 - 2) >= 3u)
  {
    Hasher._combine(_:)(0);
    v4 = a2 & 1;
  }
  else
  {
    v4 = (a2 - 2) + 1;
  }
  Hasher._combine(_:)(v4);
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned __int8 a2, Swift::UInt a3)
{
  Swift::Int v6;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v8;

  Hasher.init(_seed:)();
  NavigationLinkSelectionIdentifier.hash(into:)();
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, a4, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v15;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UUID?, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a1);
  Hasher._combine(_:)(a1[1]);
  v12 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  outlined init with copy of UUID?((uint64_t)a1 + *(int *)(v12 + 24), (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v13 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v13);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  Swift::Int v3;

  v2 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v2);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1, Swift::UInt a2)
{
  int v4;
  Swift::Int v5;

  v4 = a1;
  Hasher.init(_seed:)();
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  Hasher._combine(_:)(a2);
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  char v2;
  Swift::Int v3;

  v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, v3);
}

{
  char v1;
  Swift::Int v2;

  v1 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, char a2)
{
  uint64_t v3;
  Swift::Int v4;

  v3 = a2 & 1;
  Hasher.init(_seed:)();
  AccessibilityAttachmentToken.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  Swift::Int v6;

  v4 = HIDWORD(a1);
  v5 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void **a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  SystemSegmentItem.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(_QWORD *a1)
{
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  Swift::Int v5;

  Hasher.init(_seed:)();
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[5];
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _BYTE v10[72];

  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, Swift::UInt a3, unsigned __int8 a4)
{
  Swift::Int v8;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, a4, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt8 a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  int v7;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + result);
      switch(v7)
      {
        case 2:
          if (a1 == 2)
            return result;
          break;
        case 3:
          if (a1 == 3)
            return result;
          break;
        case 4:
          if (a1 == 4)
            return result;
          break;
        default:
          if (a1 - 2 >= 3 && ((v7 ^ a1) & 1) == 0)
            return result;
          break;
      }
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v13;
  char v14;
  char v15;
  double *v17;
  double v18;
  double v19;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    v8 = a1 & 0xC000000000000000;
    v9 = a2 != 2 || a1 != 0x8000000000000002;
    v10 = a2 != 2 || a1 != 0x8000000000000001;
    v11 = a2 != 2 || a1 != 0x8000000000000000;
    v13 = v8 != 0x8000000000000000 || v9;
    v14 = v8 != 0x8000000000000000 || v10;
    v15 = v8 != 0x8000000000000000 || v11;
    do
    {
      v17 = (double *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v18 = *v17;
      v19 = v17[1];
      if (*(_QWORD *)&v18 >> 62)
      {
        if (*(_QWORD *)&v18 >> 62 != 1)
        {
          if ((__int128)__PAIR128__(1, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(*(unint64_t *)&v19, *(unint64_t *)&v18))
            __asm { BR              X27 }
          if ((__int128)__PAIR128__(2, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(*(unint64_t *)&v19, *(unint64_t *)&v18))
            __asm { BR              X27 }
          if (*(_QWORD *)&v19 == 2 && *(_QWORD *)&v18 == 0x8000000000000000)
          {
            if ((v15 & 1) == 0)
              return result;
          }
          else if (*(_QWORD *)&v19 == 2 && *(_QWORD *)&v18 == 0x8000000000000001)
          {
            if ((v14 & 1) == 0)
              return result;
          }
          else if ((v13 & 1) == 0)
          {
            return result;
          }
          goto LABEL_24;
        }
        if (v8 != 0x4000000000000000)
          goto LABEL_24;
      }
      else if (a1 >> 62)
      {
        goto LABEL_24;
      }
      if (LOBYTE(v18) == a1 && v19 == *(double *)&a2)
        return result;
LABEL_24:
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = *(_QWORD *)(v3 + 48) + 16 * result;
      if (*(_QWORD *)v8 == a1)
      {
        v9 = *(unsigned __int8 *)(v8 + 8);
        switch(v9)
        {
          case 2:
            if (a2 == 2)
              return result;
            break;
          case 3:
            if (a2 == 3)
              return result;
            break;
          case 4:
            if (a2 == 4)
              return result;
            break;
          default:
            if (a2 - 2 >= 3 && ((v9 ^ a2) & 1) == 0)
              return result;
            break;
        }
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = *(_QWORD *)(v3 + 48) + 16 * result;
      v9 = *(_QWORD *)v8;
      v10 = *(unsigned __int8 *)(v8 + 8);
      if (v9)
      {
        if (a1)
        {
          if (v9 == a1 && v10 == a2)
            return result;
        }
      }
      else if (!a1 && v10 == a2)
      {
        return result;
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v6 = -1 << *(_BYTE *)(v4 + 32);
  result = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v8 = ~v6;
    do
    {
      v9 = *(_QWORD *)(v4 + 48) + 24 * result;
      v10 = *(_QWORD *)v9;
      v11 = *(unsigned __int8 *)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      if (v10 == a1 && v11 == a2 && v12 == a3)
        break;
      result = (result + 1) & v8;
    }
    while (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  char v16;
  unint64_t v18;
  _DWORD v22[2];
  uint64_t v23;
  _QWORD v24[2];

  v6 = -1 << *(_BYTE *)(v5 + 32);
  v7 = a5 & ~v6;
  if (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v9 = ~v6;
    v18 = HIDWORD(a2);
    do
    {
      v10 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 32 * v7);
      v11 = v10[1];
      v13 = v10[2];
      v12 = v10[3];
      if (*v10)
      {
        if (!a1)
          goto LABEL_6;
        v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v10 + 176);
        swift_retain();
        outlined copy of _ViewList_ID.Canonical?(v11, v13);
        swift_retain();
        swift_retain();
        LOBYTE(v14) = v14(a1);
        swift_release();
        swift_release();
        if ((v14 & 1) == 0)
          goto LABEL_5;
        if (v13 == 1)
        {
LABEL_11:
          v15 = a3;
          if (a3 != 1)
            goto LABEL_4;
          swift_release();
          outlined consume of Text.LineStyle?(v11, 1);
          if (v12 == a4)
            return v7;
          goto LABEL_6;
        }
      }
      else
      {
        if (a1)
          goto LABEL_6;
        outlined copy of _ViewList_ID.Canonical?(v10[1], v10[2]);
        if (v13 == 1)
          goto LABEL_11;
      }
      v24[0] = v11;
      v24[1] = v13;
      v15 = a3;
      if (a3 == 1)
      {
        swift_retain();
LABEL_4:
        outlined copy of _ViewList_ID.Canonical?(a2, v15);
        outlined consume of Text.LineStyle?(v11, v13);
        outlined consume of Text.LineStyle?(a2, v15);
LABEL_5:
        swift_release();
        outlined consume of Text.LineStyle?(v11, v13);
        goto LABEL_6;
      }
      v22[0] = a2;
      v22[1] = v18;
      v23 = a3;
      swift_retain_n();
      v16 = MEMORY[0x18D756E68](v24, v22);
      swift_release();
      outlined consume of Text.LineStyle?(v11, v13);
      swift_release();
      outlined consume of Text.LineStyle?(v11, v13);
      if ((v16 & 1) != 0 && v12 == a4)
        return v7;
LABEL_6:
      v7 = (v7 + 1) & v9;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = type metadata accessor for UUID();
  v6 = (void (*)(uint64_t))MEMORY[0x1E0CB0998];
  v7 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  v56 = v7;
  MEMORY[0x1E0C80A78](v5, v8);
  v46 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UUID?, UUID?)();
  v54 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UUID?, v6);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v49 = (uint64_t)&v45 - v20;
  v53 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  MEMORY[0x1E0C80A78](v53, v21);
  v24 = (_DWORD *)((char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = v2 + 64;
  v26 = -1 << *(_BYTE *)(v2 + 32);
  v27 = a2 & ~v26;
  if (((*(_QWORD *)(v2 + 64 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
    return v27;
  v48 = v17;
  v28 = ~v26;
  v29 = *(_QWORD *)(v22 + 72);
  v30 = v49;
  v51 = ~v26;
  v52 = v2;
  v50 = v2 + 64;
  while (1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v2 + 48) + v29 * v27, (uint64_t)v24, type metadata accessor for DisplayList.HostedViewState.Key);
    if (*v24 != *a1 || v24[1] != a1[1])
      goto LABEL_5;
    v32 = *(int *)(v53 + 24);
    v33 = (uint64_t)v24 + v32;
    outlined init with copy of UUID?((uint64_t)a1 + v32, v30);
    v34 = (uint64_t)&v13[*(int *)(v54 + 48)];
    outlined init with copy of UUID?(v33, (uint64_t)v13);
    outlined init with copy of UUID?(v30, v34);
    v35 = v55;
    v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
    if (v36(v13, 1, v55) == 1)
      break;
    v37 = (uint64_t)v48;
    outlined init with copy of UUID?((uint64_t)v13, (uint64_t)v48);
    if (v36((char *)v34, 1, v35) == 1)
    {
      v38 = v49;
      outlined destroy of UUID?(v49);
      v39 = v37;
      v30 = v38;
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v39, v35);
      v28 = v51;
      v2 = v52;
      goto LABEL_4;
    }
    v40 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v46, v34, v35);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
    v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    v41 = *(void (**)(char *, uint64_t))(v56 + 8);
    v41(v40, v35);
    v42 = v49;
    outlined destroy of UUID?(v49);
    v43 = v37;
    v30 = v42;
    v41((char *)v43, v35);
    outlined destroy of UUID?((uint64_t)v13);
    v28 = v51;
    v2 = v52;
    v25 = v50;
    if ((v47 & 1) != 0)
      goto LABEL_15;
LABEL_5:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, type metadata accessor for DisplayList.HostedViewState.Key);
    v27 = (v27 + 1) & v28;
    if (((*(_QWORD *)(v25 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
      return v27;
  }
  outlined destroy of UUID?(v30);
  v31 = v36((char *)v34, 1, v35);
  v28 = v51;
  v2 = v52;
  if (v31 != 1)
  {
LABEL_4:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for (UUID?, UUID?));
    v25 = v50;
    goto LABEL_5;
  }
  outlined destroy of UUID?((uint64_t)v13);
LABEL_15:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, type metadata accessor for DisplayList.HostedViewState.Key);
  return v27;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v9 = *v8;
      v10 = *((_QWORD *)v8 + 1);
      if (v9 == 3)
      {
        if (a1 == 3 && v10 == a2)
          return result;
      }
      else if (a1 != 3 && v9 == a1 && v10 == a2)
      {
        return result;
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a2 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for NSObject(0, a3);
    v7 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      v9 = ~v5;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
        v11 = static NSObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  v5 = type metadata accessor for SystemSegmentItem();
  MEMORY[0x1E0C80A78](v5, v6);
  v9 = (id *)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = -1 << *(_BYTE *)(v2 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v2 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v7 + 72);
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v2 + 48) + v13 * v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      v14 = specialized static SystemSegmentItem.== infix(_:_:)(v9, a1);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      if ((v14 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
    return v4;
  v5 = ~v3;
  v16 = a1[3];
  v17 = a1[2];
  v14 = a1[4];
  v15 = a1[5];
  while (1)
  {
    v6 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 48 * v4);
    v7 = v6[2];
    v8 = v6[3];
    v9 = v6[4];
    v10 = v6[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0 && v7 == v17 && v8 == v16)
    {
      if (!v10)
      {
        swift_bridgeObjectRelease();
        if (!v15)
          goto LABEL_22;
        goto LABEL_15;
      }
      if (v15)
        break;
    }
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    v4 = (v4 + 1) & v5;
    if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      return v4;
  }
  if (v9 != v14 || v10 != v15)
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
      return v4;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v12 = a4;
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v16 = v14 + 32 * v8;
      v17 = *(_QWORD *)(v16 + 16);
      v18 = *(unsigned __int8 *)(v16 + 24);
      v19 = *(_QWORD *)v16 == a1 && *(_QWORD *)(v16 + 8) == a2;
      if ((v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v17 == a3 && v18 == v12)
        break;
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v25 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v24 = ~v3;
    v5 = *(_QWORD *)(v2 + 48);
    v6 = *a1;
    v7 = a1[1];
    v8 = a1[2];
    v9 = *((unsigned __int8 *)a1 + 24);
    v10 = a1[7];
    v22 = a1[6];
    v23 = v10;
    do
    {
      v11 = v5 + (v4 << 6);
      v12 = *(_QWORD *)(v11 + 16);
      v13 = *(unsigned __int8 *)(v11 + 24);
      v15 = *(_QWORD *)(v11 + 48);
      v14 = *(_QWORD *)(v11 + 56);
      v16 = *(_QWORD *)v11 == v6 && *(_QWORD *)(v11 + 8) == v7;
      if (v16 || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), v10 = v23, (v17 & 1) != 0))
      {
        if (v12 == v8 && v13 == v9)
        {
          if (v14)
          {
            if (v10)
            {
              if (v15 == v22 && v14 == v10)
                return v4;
              v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v10 = v23;
              if ((v20 & 1) != 0)
                return v4;
            }
          }
          else if (!v10)
          {
            return v4;
          }
        }
      }
      v4 = (v4 + 1) & v24;
    }
    while (((*(_QWORD *)(v25 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t, __n128);
  char v19;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  unint64_t *v23;
  uint64_t v24;

  v23 = a4;
  v24 = a5;
  v6 = v5;
  v21 = a1;
  v22 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11.n128_f64[0] = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v21 - v12;
  v14 = -1 << *(_BYTE *)(v6 + 32);
  v15 = a2 & ~v14;
  if (((*(_QWORD *)(v6 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v9 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
    do
    {
      v18(v13, *(_QWORD *)(v6 + 48) + v17 * v15, v8, v11);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v23, v22, v24);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      if ((v19 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  return v15;
}

uint64_t specialized static TableColumnCustomizationID.Base.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[4];
  char v19;

  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v18);
  v3 = v18[0];
  v4 = v18[1];
  if ((v19 & 1) != 0)
  {
    v5 = v18[2];
    v6 = v18[3];
    outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)&v13);
    if (v17 == 1)
    {
      v7 = v15;
      v8 = v16;
      v9 = v3 == v13 && v4 == v14;
      if ((v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v5 == v7 && v6 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
LABEL_19:
        v10 = 1;
        return v10 & 1;
      }
    }
    goto LABEL_13;
  }
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)&v13);
  if ((v17 & 1) != 0)
  {
LABEL_13:
    v10 = 0;
    return v10 & 1;
  }
  if (v3 == v13 && v4 == v14)
    goto LABEL_19;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  return v10 & 1;
}

BOOL specialized static TableColumnCustomizationID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[40];
  _BYTE v11[40];
  _QWORD v12[4];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v11);
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)v10);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v11, (uint64_t)v12);
  v3 = v12[0];
  v4 = v12[1];
  if ((v13 & 1) != 0)
  {
    v5 = v12[2];
    v6 = v12[3];
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)v10, (uint64_t)&v14);
    if ((v18 & 1) == 0)
      return 0;
    v7 = v16;
    v8 = v17;
    if ((v3 != v14 || v4 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return 0;
    if (v5 == v7 && v6 == v8)
      return 1;
  }
  else
  {
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)v10, (uint64_t)&v14);
    if ((v18 & 1) != 0)
      return 0;
    if (v3 == v14 && v4 == v15)
      return 1;
  }
  return (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
}

uint64_t specialized TableColumnCustomization.ToAnyCustomization.get(base:)(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t specialized TableColumnCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];

  outlined init with copy of Any(a1, (uint64_t)v18);
  v11 = type metadata accessor for TableColumnCustomization(0, a5, a6, v10);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v18[0] = v16;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>, v11);
    v13 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v15 = v14;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v16 = a3;
    *((_QWORD *)&v16 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (v15 >> 60 == 15)
    {
      v16 = 0u;
      v17 = 0u;
    }
    else
    {
      *((_QWORD *)&v17 + 1) = MEMORY[0x1E0CB0338];
      *(_QWORD *)&v16 = v13;
      *((_QWORD *)&v16 + 1) = v15;
    }
    return specialized Dictionary.subscript.setter((uint64_t)&v16, (uint64_t)v18);
  }
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  Swift::Int v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

uint64_t specialized TableColumnCustomization.subscript.setter(__int16 a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD v16[5];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = v3;
  if ((_BYTE)a1)
  {
    v6 = *v3;
    v17 = a2;
    v18 = a3;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v17), (v8 & 1) != 0))
    {
      v9 = *(_QWORD *)(v6 + 56) + 16 * v7;
      v10 = *(_QWORD *)v9;
      v11 = *(unsigned __int8 *)(v9 + 8);
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16[0] = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v11 | (a1 << 8), (uint64_t)&v17, isUniquelyReferenced_nonNull_native);
    *v4 = v16[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    v17 = a2;
    v18 = a3;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v15 = specialized Dictionary.subscript.modify(v16, (uint64_t)&v17);
    if (*(unsigned __int8 *)(v14 + 9) << 8 != 768)
      *(_BYTE *)(v14 + 9) = 0;
    return ((uint64_t (*)(_QWORD *, _QWORD))v15)(v16, 0);
  }
}

uint64_t type metadata accessor for TableColumnCustomization.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableColumnCustomization.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry, &type metadata for TableColumnCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry, &type metadata for TableColumnCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry, &type metadata for TableColumnCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TableColumnCustomizationID] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [TableColumnCustomizationID], (uint64_t)&type metadata for TableColumnCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TableColumnCustomization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableColumnCustomization);
}

uint64_t type metadata accessor for TableColumnCustomizationTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableColumnCustomizationTransform);
}

uint64_t specialized TableColumnCustomizationEntry.Visibility.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6974616D6F747561 && a2 == 0xE900000000000063;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C6269736976 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6564646968 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

char *specialized TableColumnCustomizationEntry.Visibility.init(from:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.Visibility.HiddenCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys, (uint64_t)&unk_1E1AFB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v38 = (char *)&v30 - v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.Visibility.VisibleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys, (uint64_t)&unk_1E1AFB0C0, v2);
  v36 = v6;
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v37 = (char *)&v30 - v8;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys, (uint64_t)&unk_1E1AFB0E0, v2);
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v30 - v11;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.Visibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys, (uint64_t)&unk_1E1AFB010, v2);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v30 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys();
  v19 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v19)
  {
    v21 = v37;
    v20 = v38;
    v39 = v15;
    v22 = v18;
    v23 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v23 + 16) == 1)
    {
      v18 = (char *)*(unsigned __int8 *)(v23 + 32);
      if (*(_BYTE *)(v23 + 32))
      {
        if ((_DWORD)v18 == 1)
        {
          v41 = 1;
          lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v24 = v39;
          (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v36);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v14);
        }
        else
        {
          v42 = 2;
          lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v29 = v39;
          (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v35);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v14);
        }
      }
      else
      {
        v40 = 0;
        lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v14);
      }
    }
    else
    {
      v25 = type metadata accessor for DecodingError();
      swift_allocError();
      v27 = v26;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v27 = &type metadata for TableColumnCustomizationEntry.Visibility;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC450], v25);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v14);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v18;
}

uint64_t specialized TableColumnCustomizationEntry.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x57746E6572727563 && a2 == 0xEC00000068746469;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized TableColumnCustomizationEntry.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys, (uint64_t)&unk_1E1AFAF80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v13 = 0;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9 = v11;
    v12 = 1;
    lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

uint64_t specialized TableColumnCustomizationID.TransientHint.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized TableColumnCustomizationID.TransientHint.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.TransientHint.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys, (uint64_t)&unk_1E1AF0480, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v13 = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v12 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t specialized TableColumnCustomizationID.Base.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746963696C707865 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6569736E617274 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized TableColumnCustomizationID.Base.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v38 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.Base.TransientCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys, (uint64_t)&unk_1E1AF06B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  v42 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v43 = (char *)&v38 - v7;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.Base.ExplicitCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys, (uint64_t)&unk_1E1AF0620, v3);
  v9 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v40 = v9;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v38 - v11;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.Base.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys, (uint64_t)&unk_1E1AF0590, v3);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v38 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys();
  v19 = (uint64_t)v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = v43;
  v48 = a1;
  v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v21 + 16) != 1)
  {
    v24 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v14;
    v27 = v26;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v27 = &type metadata for TableColumnCustomizationID.Base;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, *MEMORY[0x1E0DEC450], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v25);
    a1 = v48;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v22 = *(_BYTE *)(v21 + 32);
  if ((v22 & 1) != 0)
  {
    LODWORD(v40) = *(unsigned __int8 *)(v21 + 32);
    LOBYTE(v44) = 1;
    lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint();
    v23 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v31 = v44;
    v32 = v45;
    v33 = v46;
    v34 = v47;
    v22 = v40;
  }
  else
  {
    LOBYTE(v44) = 0;
    lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v28 = v39;
    v29 = KeyedDecodingContainer.decode(_:forKey:)();
    v32 = v35;
    v36 = *(void (**)(char *, uint64_t))(v40 + 8);
    v43 = (char *)v29;
    v36(v12, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v33 = 0;
    v34 = 0;
    v31 = v43;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  v37 = v38;
  *v38 = v31;
  v37[1] = v32;
  v37[2] = v33;
  v37[3] = v34;
  *((_BYTE *)v37 + 32) = v22;
  return result;
}

uint64_t specialized TableColumnCustomizationID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  _QWORD v15[7];
  char v16;
  uint64_t v17;

  v17 = a2;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys, (uint64_t)&unk_1E1AF03F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v10 = v17;
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  *(_OWORD *)v15 = *(_OWORD *)&v15[3];
  v11 = v15[5];
  v12 = v15[6];
  v13 = v16;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_OWORD *)v10 = *(_OWORD *)v15;
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = v12;
  *(_BYTE *)(v10 + 32) = v13;
  return result;
}

uint64_t specialized TableColumnCustomization.ToAnyCustomization.set(base:newValue:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  a1[1] = a3;
  return result;
}

uint64_t sub_1871E89EC()
{
  return 16;
}

__n128 sub_1871E89F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *assignWithCopy for TableColumnCustomization(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyTableColumnCustomization()
{
  return &type metadata for AnyTableColumnCustomization;
}

uint64_t getEnumTagSinglePayload for TableColumnCustomizationEntry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnCustomizationEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationEntry()
{
  return &type metadata for TableColumnCustomizationEntry;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationID()
{
  return &type metadata for TableColumnCustomizationID;
}

uint64_t type metadata accessor for TableColumnCustomization.ToAnyCustomization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableColumnCustomization.ToAnyCustomization);
}

void base witness table accessor for Equatable in TableColumnCustomization<A>.ToAnyCustomization()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in TableColumnCustomization<A>.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for CustomDebugStringConvertible in TableColumnCustomization<A>.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for CustomStringConvertible in TableColumnCustomization<A>.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in TableColumnCustomization<A>.ToAnyCustomization()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined release of TableColumnCustomizationID(uint64_t a1)
{
  outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.CodingKeys, &unk_1E1AF03F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.CodingKeys, &unk_1E1AF03F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.CodingKeys, &unk_1E1AF03F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.CodingKeys, &unk_1E1AF03F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base, &type metadata for TableColumnCustomizationID.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base, &type metadata for TableColumnCustomizationID.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base, &type metadata for TableColumnCustomizationID.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.CodingKeys, &unk_1E1AFAF80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.CodingKeys, &unk_1E1AFAF80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.CodingKeys, &unk_1E1AFAF80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.CodingKeys, &unk_1E1AFAF80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility, &type metadata for TableColumnCustomizationEntry.Visibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility, &type metadata for TableColumnCustomizationEntry.Visibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility, &type metadata for TableColumnCustomizationEntry.Visibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x18D760108);
  return result;
}

void type metadata accessor for (UUID?, UUID?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UUID?, UUID?))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(255, &lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UUID?, UUID?));
  }
}

uint64_t outlined init with copy of ToolbarStorage.Entry.ID(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToolbarStorage.Entry.ID(a2, a1);
  return a2;
}

uint64_t outlined destroy of ToolbarStorage.Entry.ID(uint64_t a1)
{
  destroy for ToolbarStorage.Entry.ID(a1);
  return a1;
}

void type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
  }
}

uint64_t destroy for TableColumnCustomizationID.TransientHint()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TableColumnCustomizationID.TransientHint(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TableColumnCustomizationID.TransientHint(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TableColumnCustomizationID.TransientHint(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationID.TransientHint()
{
  return &type metadata for TableColumnCustomizationID.TransientHint;
}

void *type metadata accessor for TableColumnCustomizationEntry.CodingKeys()
{
  return &unk_1E1AFAF80;
}

void *type metadata accessor for TableColumnCustomizationID.CodingKeys()
{
  return &unk_1E1AF03F0;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationEntry.Visibility()
{
  return &type metadata for TableColumnCustomizationEntry.Visibility;
}

uint64_t destroy for TableColumnCustomizationID(uint64_t a1)
{
  return outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for TableColumnCustomizationID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for TableColumnCustomizationID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of TableColumnCustomizationID.Base(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for TableColumnCustomizationID(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of TableColumnCustomizationID.Base(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCustomizationID(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnCustomizationID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TableColumnCustomizationID.Base(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for TableColumnCustomizationID.Base(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationID.Base()
{
  return &type metadata for TableColumnCustomizationID.Base;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.TransientHint, &type metadata for TableColumnCustomizationID.TransientHint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.TransientHint, &type metadata for TableColumnCustomizationID.TransientHint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.TransientHint, &type metadata for TableColumnCustomizationID.TransientHint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.TransientCodingKeys, &unk_1E1AF06B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.TransientCodingKeys, &unk_1E1AF06B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.TransientCodingKeys, &unk_1E1AF06B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.TransientCodingKeys, &unk_1E1AF06B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.ExplicitCodingKeys, &unk_1E1AF0620);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.ExplicitCodingKeys, &unk_1E1AF0620);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.ExplicitCodingKeys, &unk_1E1AF0620);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.ExplicitCodingKeys, &unk_1E1AF0620);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.CodingKeys, &unk_1E1AF0590);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.CodingKeys, &unk_1E1AF0590);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.CodingKeys, &unk_1E1AF0590);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.Base.CodingKeys, &unk_1E1AF0590);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.HiddenCodingKeys, &unk_1E1AFB0A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.HiddenCodingKeys, &unk_1E1AFB0A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.HiddenCodingKeys, &unk_1E1AFB0A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.VisibleCodingKeys, &unk_1E1AFB0C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.VisibleCodingKeys, &unk_1E1AFB0C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.VisibleCodingKeys, &unk_1E1AFB0C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys, &unk_1E1AFB0E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys, &unk_1E1AFB0E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys, &unk_1E1AFB0E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.CodingKeys, &unk_1E1AFB010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.CodingKeys, &unk_1E1AFB010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.CodingKeys, &unk_1E1AFB010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationEntry.Visibility.CodingKeys, &unk_1E1AFB010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.TransientHint.CodingKeys, &unk_1E1AF0480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.TransientHint.CodingKeys, &unk_1E1AF0480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.TransientHint.CodingKeys, &unk_1E1AF0480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID.TransientHint.CodingKeys, &unk_1E1AF0480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys);
  }
  return result;
}

void *type metadata accessor for TableColumnCustomizationID.TransientHint.CodingKeys()
{
  return &unk_1E1AF0480;
}

uint64_t storeEnumTagSinglePayload for TableColumnCustomizationEntry.Visibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1871E984C + 4 * byte_187C14D2E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1871E9880 + 4 * byte_187C14D29[v4]))();
}

uint64_t sub_1871E9880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871E9888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1871E9890);
  return result;
}

uint64_t sub_1871E989C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1871E98A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1871E98A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871E98B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TableColumnCustomizationEntry.Visibility.CodingKeys()
{
  return &unk_1E1AFB010;
}

void *type metadata accessor for TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  return &unk_1E1AFB0E0;
}

void *type metadata accessor for TableColumnCustomizationEntry.Visibility.VisibleCodingKeys()
{
  return &unk_1E1AFB0C0;
}

void *type metadata accessor for TableColumnCustomizationEntry.Visibility.HiddenCodingKeys()
{
  return &unk_1E1AFB0A0;
}

uint64_t storeEnumTagSinglePayload for TableColumnCustomization.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1871E9948 + 4 * byte_187C14D38[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1871E997C + 4 * byte_187C14D33[v4]))();
}

uint64_t sub_1871E997C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871E9984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1871E998CLL);
  return result;
}

uint64_t sub_1871E9998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1871E99A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1871E99A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871E99AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TableColumnCustomizationID.Base.CodingKeys()
{
  return &unk_1E1AF0590;
}

void *type metadata accessor for TableColumnCustomizationID.Base.ExplicitCodingKeys()
{
  return &unk_1E1AF0620;
}

uint64_t storeEnumTagSinglePayload for TableColumnCustomizationID.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1871E9A18 + 4 * byte_187C14D3D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1871E9A38 + 4 * byte_187C14D42[v4]))();
}

_BYTE *sub_1871E9A18(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1871E9A38(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1871E9A40(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1871E9A48(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1871E9A50(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1871E9A58(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for TableColumnCustomizationID.Base.TransientCodingKeys()
{
  return &unk_1E1AF06B0;
}

uint64_t outlined init with take of (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?, (void (*)(uint64_t))type metadata accessor for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration));
  }
}

uint64_t assignWithCopy for OutsetByRowInsetsIfNecessary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<EdgeInsets>.Content(v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = v8;
  outlined consume of Environment<EdgeInsets>.Content(v9, v10, v11, v12, v13);
  v14 = *(_QWORD *)(a2 + 72);
  LOBYTE(v5) = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v14, v5);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = v5;
  outlined consume of Environment<Bool>.Content(v15, v16);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for OutsetByRowInsetsIfNecessary(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  char v14;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_BYTE *)(a1 + 64);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 64) = v5;
  outlined consume of Environment<EdgeInsets>.Content(v6, v7, v8, v9, v10);
  v12 = *(_BYTE *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for OutsetByRowInsetsIfNecessary(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 82))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OutsetByRowInsetsIfNecessary(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 82) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OutsetByRowInsetsIfNecessary()
{
  return &type metadata for OutsetByRowInsetsIfNecessary;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OutsetByRowInsetsIfNecessary()
{
  return swift_getOpaqueTypeConformance2();
}

double OutsetByRowInsetsIfNecessary.body(content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  double v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;
  double v25;
  _OWORD v26[2];
  char v27;
  _BYTE v28[40];

  v3 = *(_BYTE *)(v1 + 81);
  v4 = *(_QWORD *)(v1 + 72);
  v5 = *(_BYTE *)(v1 + 80);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v25 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  v6 = *(double *)v1;
  v7 = *(double *)(v1 + 8);
  v9 = *(double *)(v1 + 16);
  v8 = *(double *)(v1 + 24);
  v10 = *(_OWORD *)(v1 + 48);
  v26[0] = *(_OWORD *)(v1 + 32);
  v26[1] = v10;
  v27 = *(_BYTE *)(v1 + 64);
  outlined init with take of Environment<EdgeInsets>.Content((uint64_t)v26, (uint64_t)v28);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<EdgeInsets>.Content);
  v11 = specialized Environment.wrappedValue.getter();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<EdgeInsets>.Content);
  EdgeInsets.vertical.getter();
  v19 = v25 - v18;
  if (v6 >= v11)
    v20 = v11;
  else
    v20 = v6;
  if (v7 >= v13)
    v21 = v13;
  else
    v21 = v7;
  if (v9 >= v15)
    v22 = v15;
  else
    v22 = v9;
  if (v8 >= v17)
    v23 = v17;
  else
    v23 = v8;
  *(_BYTE *)a1 = v3;
  *(double *)(a1 + 8) = v19;
  *(double *)(a1 + 16) = v11 - v20;
  result = v17 - v23;
  *(double *)(a1 + 24) = v13 - v21;
  *(double *)(a1 + 32) = v15 - v22;
  *(double *)(a1 + 40) = v17 - v23;
  return result;
}

uint64_t OutsetByRowInsetsIfNecessary.OutsetLayout.spacing(in:child:)()
{
  if ((LayoutProxy.requiresSpacingProjection.getter() & 1) != 0)
    return LayoutProxy.spacing()();
  LayoutProxy.spacing()();
  static AbsoluteEdge.Set.vertical.getter();
  return Spacing.reset(_:)();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  return OutsetByRowInsetsIfNecessary.OutsetLayout.spacing(in:child:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OutsetByRowInsetsIfNecessary.OutsetLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v23 = *a1;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v12 = *(_OWORD *)(a2 + 5);
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v12;
  v20 = *(_OWORD *)(a2 + 7);
  v21 = a2[9];
  v22 = v11;
  v13 = lazy protocol witness table accessor for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 80))(&v23, &v15, a3, a4, a5, v13);
}

void protocol witness for ViewModifier.body(content:) in conformance OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined init with take of Environment<EdgeInsets>.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Environment<EdgeInsets>.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Environment<EdgeInsets>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<EdgeInsets>.Content)
  {
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<EdgeInsets>.Content);
  }
}

uint64_t getEnumTagSinglePayload for OutsetByRowInsetsIfNecessary.OutsetLayout(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[48])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OutsetByRowInsetsIfNecessary.OutsetLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  return &type metadata for OutsetByRowInsetsIfNecessary.OutsetLayout;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for OutsetByRowInsetsIfNecessary.OutsetLayout;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OutsetByRowInsetsIfNecessary>, OutsetByRowInsetsIfNecessary.OutsetLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>)
  {
    lazy protocol witness table accessor for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<OutsetByRowInsetsIfNecessary>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OutsetByRowInsetsIfNecessary> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  return &protocol witness table for OutsetByRowInsetsIfNecessary.OutsetLayout;
}

uint64_t type metadata accessor for FocusEventProxyResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FocusEventProxyResponder;
  if (!type metadata singleton initialization cache for FocusEventProxyResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for FocusEventProxyResponder()
{
  return swift_initClassMetadata2();
}

uint64_t FocusEventProxyResponder.__allocating_init(inputs:)()
{
  swift_allocObject();
  return DefaultLayoutViewResponder.init(inputs:)();
}

void protocol witness for ViewModifier.body(content:) in conformance FocusEventProxyModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t FocusEventProxyResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v4 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t FocusEventProxyResponder.__allocating_init(inputs:viewSubgraph:)()
{
  swift_allocObject();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t FocusEventProxyResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for FocusEventProxyResponder()
{
  return type metadata accessor for FocusEventProxyResponder();
}

ValueMetadata *type metadata accessor for FocusEventProxyModifier()
{
  return &type metadata for FocusEventProxyModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in FocusEventProxyModifier()
{
  return &protocol witness table for FocusEventProxyModifier;
}

unint64_t lazy protocol witness table accessor for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter;
  if (!lazy protocol witness table cache variable for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusEventProxyResponderFilter, &unk_1E1AFCE58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter);
  }
  return result;
}

void *type metadata accessor for FocusEventProxyResponderFilter()
{
  return &unk_1E1AFCE58;
}

ValueMetadata *type metadata accessor for DefaultWindowToolbarStyle()
{
  return &type metadata for DefaultWindowToolbarStyle;
}

uint64_t static ViewBuilder.buildEither<A, B>(first:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for _ConditionalContent.Storage();
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))((char *)&v9 - v7, a1, a2, v6);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t static ViewBuilder.buildEither<A, B>(second:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v10;

  v5 = type metadata accessor for _ConditionalContent.Storage();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 16))((char *)&v10 - v8, a1, a3, v7);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

void CustomProgressView.init(interval:countdown:label:currentValueLabel:)()
{
  type metadata accessor for CustomProgressView();
}

uint64_t sub_1871EAEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = v7 + *(int *)(a1 + 52);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v9, 1, 1, v4);
  v10 = v7 + *(int *)(a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v10, 1, 1, v2);
  type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
  v12 = *(int *)(v11 + 48);
  outlined init with take of TableCellFormula(v6, v7, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  *(_BYTE *)(v7 + v12) = v5;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  v13 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v9, v3, v13);
  v14 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v10, v1, v14);
}

void ProgressView.body.getter()
{
  type metadata accessor for CustomProgressView();
}

void sub_1871EB010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v6 - 144) = v2;
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 120) = v5;
  type metadata accessor for ProgressView.Base();
}

uint64_t sub_1871EB08C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  _BYTE v27[96];

  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v27[-v10];
  v12 = type metadata accessor for _ConditionalContent();
  *(_QWORD *)(v7 - 176) = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = &v27[-v15];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, double))(v9 + 16))(v11, *(_QWORD *)(v7 - 184), a1, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = *(void **)v11;
    v18 = *((_QWORD *)v11 + 1);
    v19 = *((_QWORD *)v11 + 2);
    v20 = *((_QWORD *)v11 + 3);
    v21 = *((_QWORD *)v11 + 4);
    v22 = *((_QWORD *)v11 + 5);
    v23 = *((_QWORD *)v11 + 6);
    v24 = *((_QWORD *)v11 + 7);
    *(_QWORD *)(v7 - 184) = v23;
    *(_QWORD *)(v7 - 144) = v17;
    *(_QWORD *)(v7 - 136) = v18;
    *(_QWORD *)(v7 - 128) = v19;
    *(_QWORD *)(v7 - 120) = v20;
    *(_QWORD *)(v7 - 112) = v21;
    *(_QWORD *)(v7 - 104) = v22;
    *(_QWORD *)(v7 - 96) = v23;
    *(_QWORD *)(v7 - 88) = v24;
    static ViewBuilder.buildEither<A, B>(second:)(v7 - 144, v3, (uint64_t)&type metadata for FoundationProgressView);

    outlined consume of NSProgress.UIState?(v18, v19, v20, v21);
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v2 + 32))(v6, v11, v3);
    static ViewBuilder.buildExpression<A>(_:)(v6, v3, &protocol witness table for CustomProgressView<A, B>);
    static ViewBuilder.buildBlock<A>(_:)(v5, v3, v4);
    static ViewBuilder.buildEither<A, B>(first:)(v4, v3);
    v25 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v25(v4, v3);
    v25(v5, v3);
    v25(v6, v3);
  }
  *(_QWORD *)(v7 - 160) = &protocol witness table for CustomProgressView<A, B>;
  *(_QWORD *)(v7 - 152) = &protocol witness table for FoundationProgressView;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v12, v7 - 160);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v12, *(_QWORD *)(v7 - 168));
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v7 - 176) + 8))(v16, v12);
}

void type metadata accessor for CustomProgressView()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for ProgressView.Base()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined consume of NSProgress.UIState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ProgressViewValue.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ProgressViewValue.DateRelativeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys, (uint64_t)&unk_1E1AC6378, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v36 = v3;
  v31 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v40 = (char *)&v31 - v5;
  type metadata accessor for ClosedRange<Date>();
  v35 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v34 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ProgressViewValue.AbsoluteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys, (uint64_t)&unk_1E1AC62E8, v2);
  v33 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v32 = (char *)&v31 - v12;
  v13 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ProgressViewValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys, (uint64_t)&unk_1E1AC6258, v2);
  v18 = v17;
  v38 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v31 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v39, (uint64_t)v16, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = v31;
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v23 = (uint64_t)v16;
    v24 = v34;
    outlined init with take of TableCellFormula(v23, v34, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v46 = 1;
    lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v45 = 0;
    lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E0CB0890], MEMORY[0x1E0DEA4C8]);
    v25 = v36;
    v26 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v26)
    {
      v44 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v40, v25);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    v43 = 0;
    lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys();
    v27 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v42 = 0;
    v28 = v33;
    v29 = v37;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v29)
    {
      v41 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v21, v18);
}

uint64_t ProgressViewValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;

  v52 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys, (uint64_t)&unk_1E1AC6378, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v56 = v4;
  v54 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v58 = (char *)&v50 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ProgressViewValue.AbsoluteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys, (uint64_t)&unk_1E1AC62E8, v3);
  v55 = v7;
  v53 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v57 = (char *)&v50 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ProgressViewValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys, (uint64_t)&unk_1E1AC6258, v3);
  v59 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v50 - v12;
  v14 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (uint64_t *)((char *)&v50 - v20);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v50 - v24;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys();
  v26 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
    goto LABEL_7;
  v50 = v21;
  v51 = v17;
  v61 = a1;
  v27 = v60;
  v28 = KeyedDecodingContainer.allKeys.getter();
  v29 = (char *)v28;
  if (*(_QWORD *)(v28 + 16) != 1)
  {
    v32 = type metadata accessor for DecodingError();
    swift_allocError();
    v34 = v33;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v34 = v14;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC450], v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v27);
    a1 = v61;
LABEL_7:
    v36 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if ((*(_BYTE *)(v28 + 32) & 1) != 0)
  {
    v67 = 1;
    lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys();
    v30 = v58;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v57 = v29;
    type metadata accessor for ClosedRange<Date>();
    v66 = 0;
    lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E0CB08C0], MEMORY[0x1E0DEA4F0]);
    v31 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v65 = 1;
    v40 = KeyedDecodingContainer.decode(_:forKey:)();
    v41 = v59;
    LODWORD(v55) = v40;
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v53 = *(int *)(v47 + 48);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v27);
    v48 = (uint64_t)v51;
    v51[v53] = v55 & 1;
  }
  else
  {
    v64 = 0;
    lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys();
    v35 = v57;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v63 = 0;
    v38 = v55;
    v39 = v35;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v58) = v43;
    v62 = 1;
    v44 = KeyedDecodingContainer.decode(_:forKey:)();
    v45 = v38;
    v46 = v59;
    v49 = *(void (**)(char *, uint64_t))(v53 + 8);
    LODWORD(v56) = v44;
    v49(v39, v45);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v27);
    v48 = (uint64_t)v50;
    *v50 = v42;
    *(_BYTE *)(v48 + 8) = v58 & 1;
    *(_BYTE *)(v48 + 9) = v56 & 1;
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of TableCellFormula(v48, (uint64_t)v25, type metadata accessor for ProgressViewValue);
  outlined init with take of TableCellFormula((uint64_t)v25, v52, type metadata accessor for ProgressViewValue);
  v36 = (uint64_t)v61;
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ProgressViewValue.AbsoluteCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProgressViewValue.AbsoluteCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ProgressViewValue.AbsoluteCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProgressViewValue.AbsoluteCodingKeys()
{
  lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProgressViewValue.AbsoluteCodingKeys()
{
  lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ProgressViewValue.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x616C655265746164;
  else
    return 0x6574756C6F736261;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProgressViewValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ProgressViewValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProgressViewValue.CodingKeys()
{
  lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProgressViewValue.CodingKeys()
{
  lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ProgressViewValue.DateRelativeCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x776F64746E756F63;
  else
    return 0x6C61767265746E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProgressViewValue.DateRelativeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ProgressViewValue.DateRelativeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProgressViewValue.DateRelativeCodingKeys()
{
  lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProgressViewValue.DateRelativeCodingKeys()
{
  lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProgressViewValue@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ProgressViewValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProgressViewValue(_QWORD *a1)
{
  return ProgressViewValue.encode(to:)(a1);
}

uint64_t ResolvedProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v24 - v10;
  v12 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v11, type metadata accessor for ProgressViewValue);
  v16 = type metadata accessor for ResolvedProgressView(0);
  v17 = *(_BYTE *)(v2 + *(int *)(v16 + 20));
  v18 = *(_BYTE *)(v2 + *(int *)(v16 + 24));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v19 = 0;
    v20 = 0;
    v21 = 1;
  }
  else
  {
    v20 = *(_QWORD *)v7;
    v21 = v7[8];
    v19 = v7[9];
  }
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v15, type metadata accessor for ProgressViewValue);
  v22 = &v15[v12[5]];
  *(_QWORD *)v22 = v20;
  v22[8] = v21;
  v15[v12[6]] = v19;
  v15[v12[7]] = v17 ^ 1;
  v15[v12[8]] = v18 ^ 1;
  return outlined init with take of TableCellFormula((uint64_t)v15, a1, type metadata accessor for ProgressViewStyleConfiguration);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedProgressView(uint64_t a1)
{
  return specialized static StyleableView._viewListCount(inputs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void CustomProgressView.init(fractionCompleted:alwaysIndeterminate:label:currentValueLabel:)()
{
  type metadata accessor for CustomProgressView();
}

uint64_t sub_1871EC120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = v8 + *(int *)(a1 + 52);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v10, 1, 1, v4);
  v11 = v8 + *(int *)(a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v11, 1, 1, v2);
  *(_QWORD *)v8 = v7;
  *(_BYTE *)(v8 + 8) = v6 & 1;
  *(_BYTE *)(v8 + 9) = v5;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  v12 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v3, v12);
  v13 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v1, v13);
}

void static CustomProgressView._makeView(view:inputs:)()
{
  type metadata accessor for CustomProgressView();
}

void sub_1871EC288()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int OffsetAttribute2;
  int v5;
  int v6;
  unint64_t v7;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ProgressViewValue(0) - 8) + 64))
    closure #1 in static CustomProgressView._makeView(view:inputs:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v3 - 288) = v2;
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 64))
    closure #2 in static CustomProgressView._makeView(view:inputs:)();
  v5 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v3 - 288) = v2;
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 64))
    closure #3 in static CustomProgressView._makeView(view:inputs:)();
  v6 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v3 - 192) = OffsetAttribute2;
  *(_DWORD *)(v3 - 188) = v5;
  *(_DWORD *)(v3 - 184) = v6;
  type metadata accessor for ResolvedProgressView(255);
  v7 = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  *(_QWORD *)(v3 - 288) = &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
  *(_QWORD *)(v3 - 280) = v1;
  *(_QWORD *)(v3 - 272) = v7;
  *(_QWORD *)(v3 - 264) = v0;
  type metadata accessor for OptionalSourceWriter();
}

void sub_1871EC400()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;

  type metadata accessor for ModifiedContent();
  *(_DWORD *)(v3 - 332) = v2;
  v4 = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  *(_QWORD *)(v3 - 288) = &type metadata for ProgressViewStyleConfiguration.Label;
  *(_QWORD *)(v3 - 280) = v1;
  *(_QWORD *)(v3 - 272) = v4;
  *(_QWORD *)(v3 - 264) = v0;
  type metadata accessor for OptionalSourceWriter();
}

void sub_1871EC454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ModifiedContent();
  *(_QWORD *)(v4 - 288) = v3;
  *(_QWORD *)(v4 - 280) = v2;
  *(_QWORD *)(v4 - 272) = v1;
  *(_QWORD *)(v4 - 264) = v0;
  type metadata accessor for CustomProgressView.Child();
}

double sub_1871EC498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomProgressView<A, B>.Child, a1);
  _GraphValue.init<A>(_:)();
  v3 = *(_OWORD *)(v2 - 128);
  *(_OWORD *)(v2 - 256) = *(_OWORD *)(v2 - 144);
  *(_OWORD *)(v2 - 240) = v3;
  *(_OWORD *)(v2 - 224) = *(_OWORD *)(v2 - 112);
  *(_DWORD *)(v2 - 208) = *(_DWORD *)(v2 - 96);
  v4 = *(_OWORD *)(v2 - 160);
  *(_OWORD *)(v2 - 288) = *(_OWORD *)(v2 - 176);
  *(_OWORD *)(v2 - 272) = v4;
  *(_QWORD *)(v2 - 304) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressView and conformance ResolvedProgressView, type metadata accessor for ResolvedProgressView, (uint64_t)&protocol conformance descriptor for ResolvedProgressView);
  *(_QWORD *)(v2 - 296) = &protocol witness table for OptionalSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2 - 304);
  static ModifiedContent<>._makeView(view:inputs:)();
  v5 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 288) = v5;
  v6 = *(_DWORD *)(v2 - 120);
  *(_DWORD *)(v2 - 280) = v6;
  *(_QWORD *)(v2 - 320) = v5;
  *(_DWORD *)(v2 - 312) = v6;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_BYTE *)(v2 - 320) = 1;
    v7 = PreferencesOutputs.subscript.setter();
    *(_QWORD *)(v2 - 320) = *(_QWORD *)(v2 - 288);
    *(_DWORD *)(v2 - 312) = *(_DWORD *)(v2 - 280);
    MEMORY[0x1E0C80A78](v7, v8);
    outlined retain of [Text.Modifier](v2 - 288);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
  }
  v9 = *(_QWORD *)(v2 - 328);
  *(_QWORD *)v9 = *(_QWORD *)(v2 - 192);
  result = *(double *)(v2 - 184);
  *(double *)(v9 + 8) = result;
  return result;
}

void closure #1 in static CustomProgressView._makeView(view:inputs:)()
{
  type metadata accessor for CustomProgressView();
}

uint64_t sub_1871EC6DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v6[2] = a1;
  v2 = type metadata accessor for ProgressViewValue(0);
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v2, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[4];
}

void closure #2 in static CustomProgressView._makeView(view:inputs:)()
{
  type metadata accessor for CustomProgressView();
}

uint64_t sub_1871EC77C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 52);
  v6[2] = a1;
  v7 = type metadata accessor for Optional();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void closure #3 in static CustomProgressView._makeView(view:inputs:)()
{
  type metadata accessor for CustomProgressView();
}

uint64_t sub_1871EC82C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 56);
  v6[2] = a1;
  v7 = type metadata accessor for Optional();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void implicit closure #1 in static CustomProgressView._makeView(view:inputs:)(unsigned int a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  unsigned int v31;
  unsigned int v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[56];
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[56];
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v13 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)v46 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v46[16] = v13;
  *(_OWORD *)&v46[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v46[48] = *(_DWORD *)(a3 + 80);
  v14 = *(_OWORD *)(a3 + 16);
  v44 = *(_OWORD *)a3;
  v45 = v14;
  v15 = type metadata accessor for Optional();
  v48 = a7;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v15, &v48);
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a2, (uint64_t *)&v44, (uint64_t)&v49);
  *(_QWORD *)&v44 = v49;
  DWORD2(v44) = DWORD2(v49);
  *(_QWORD *)&v45 = v50;
  DWORD2(v45) = DWORD2(v50);
  *(_QWORD *)v46 = *(_QWORD *)v51;
  *(_OWORD *)&v46[8] = *(_OWORD *)&v51[8];
  *(_OWORD *)&v46[24] = *(_OWORD *)&v51[24];
  *(_OWORD *)&v46[40] = *(_OWORD *)&v51[40];
  v47 = v52;
  v41 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage(0, v15, v16, v17);
  v42 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyWidgetAuxiliaryMetadataTextImage<A>, v41);
  outlined retain of _ViewInputs(a3);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<WidgetAuxiliaryTextImagePreference?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryTextImagePreference?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  v19 = v18;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v44, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)v40, v41, MEMORY[0x1E0DEDCE8], v18, MEMORY[0x1E0DEDD18], v20);
  v21 = (void *)v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v22 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)v46 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v46[16] = v22;
  *(_OWORD *)&v46[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v46[48] = *(_DWORD *)(a3 + 80);
  v23 = *(_OWORD *)(a3 + 16);
  v44 = *(_OWORD *)a3;
  v45 = v23;
  v24 = type metadata accessor for Optional();
  v43 = a8;
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v24, &v43);
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a4, (uint64_t *)&v44, (uint64_t)&v49);
  *(_QWORD *)&v44 = v49;
  DWORD2(v44) = DWORD2(v49);
  *(_QWORD *)&v45 = v50;
  DWORD2(v45) = DWORD2(v50);
  *(_QWORD *)v46 = *(_QWORD *)v51;
  *(_OWORD *)&v46[8] = *(_OWORD *)&v51[8];
  *(_OWORD *)&v46[24] = *(_OWORD *)&v51[24];
  *(_OWORD *)&v46[40] = *(_OWORD *)&v51[40];
  v47 = v52;
  v38 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage(0, v24, v25, v26);
  v39 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyWidgetAuxiliaryMetadataTextImage<A>, v38);
  outlined retain of _ViewInputs(a3);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v44, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)v37, v38, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v27);
  v28 = (void *)v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v29 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)v51 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v51[16] = v29;
  *(_OWORD *)&v51[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v51[48] = *(_DWORD *)(a3 + 80);
  v30 = *(_OWORD *)(a3 + 16);
  v49 = *(_OWORD *)a3;
  v50 = v30;
  v31 = _ViewInputs.environment.getter();
  *(_QWORD *)&v44 = __PAIR64__(v36, a1);
  *((_QWORD *)&v44 + 1) = __PAIR64__(v31, v36);
  *(_QWORD *)&v49 = a5;
  *((_QWORD *)&v49 + 1) = a6;
  *(_QWORD *)&v50 = a7;
  *((_QWORD *)&v50 + 1) = a8;
  type metadata accessor for CustomProgressView.WidgetMetadataWriter();
}

uint64_t sub_1871ECC10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];
  uint64_t v9;

  v8[2] = a1;
  v8[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomProgressView<A, B>.WidgetMetadataWriter, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<WidgetAuxiliaryViewMetadata?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)v8, a1, v1, v5, v2, v6);
  return *(unsigned int *)(v3 - 208);
}

void CustomProgressView.Child.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ResolvedProgressView(0);
  MEMORY[0x1E0C80A78](v0, v1);
  lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  type metadata accessor for OptionalSourceWriter();
}

void sub_1871ECD74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  uint64_t v11;

  v8 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v7 - 288) = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  type metadata accessor for ProgressViewValue(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, v0, type metadata accessor for ProgressViewValue);
  *(_BYTE *)(v0 + *(int *)(v1 + 20)) = 0;
  *(_BYTE *)(v0 + *(int *)(v1 + 24)) = 0;
  *(_QWORD *)(v7 - 192) = v4;
  *(_QWORD *)(v7 - 184) = v6;
  *(_QWORD *)(v7 - 176) = v2;
  *(_QWORD *)(v7 - 168) = v3;
  v11 = *(_QWORD *)(v7 - 304);
  *(_DWORD *)(v7 - 160) = v5;
  *(_DWORD *)(v7 - 156) = v11;
  *(_DWORD *)(v7 - 152) = *(_DWORD *)(v7 - 292);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressView and conformance ResolvedProgressView, type metadata accessor for ResolvedProgressView, (uint64_t)&protocol conformance descriptor for ResolvedProgressView);
  View.optionalViewAlias<A, B>(_:_:)();
}

void sub_1871ECE6C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, type metadata accessor for ResolvedProgressView);
  *(_QWORD *)(v8 - 256) = *(_QWORD *)(v8 - 328);
  *(_QWORD *)(v8 - 248) = v6;
  *(_QWORD *)(v8 - 240) = *(_QWORD *)(v8 - 320);
  *(_QWORD *)(v8 - 232) = v3;
  *(_DWORD *)(v8 - 224) = v5;
  *(_DWORD *)(v8 - 220) = v4;
  *(_DWORD *)(v8 - 216) = v2;
  *(_QWORD *)(v8 - 136) = v0;
  *(_QWORD *)(v8 - 128) = &protocol witness table for OptionalSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v8 - 136);
  lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  View.optionalViewAlias<A, B>(_:_:)();
}

uint64_t sub_1871ECF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v1, v0);
}

void protocol witness for static Rule.initialValue.getter in conformance CustomProgressView<A, B>.Child()
{
  type metadata accessor for ResolvedProgressView(255);
  lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  type metadata accessor for OptionalSourceWriter();
}

void sub_1871ECF90()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_1871ECFCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void protocol witness for Rule.value.getter in conformance CustomProgressView<A, B>.Child()
{
  CustomProgressView.Child.value.getter();
}

uint64_t CustomProgressView.WidgetMetadataWriter.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t Value;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t, int *);
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t, char *);
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  id *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  char *v94;
  uint64_t v95;
  id *v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;

  v95 = a1;
  v92 = a2;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Progress?, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v91 = (uint64_t)&v83 - v5;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v90 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v94 = (char *)&v83 - v11;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], v2);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v83 - v14;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v2);
  MEMORY[0x1E0C80A78](v16, v17);
  v87 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v83 - v21;
  v23 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v86 = *((_QWORD *)v23 - 1);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v89 = (id *)((char *)&v83 - v29);
  MEMORY[0x1E0C80A78](v30, v31);
  v96 = (id *)((char *)&v83 - v32);
  v33 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v83 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1E0C80A78](v37, v38);
  v88 = (uint64_t)&v83 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v83 - v42;
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v36, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v46 = v36[*(int *)(v45 + 48)];
    type metadata accessor for (ClosedRange<Date>, Bool)();
    v48 = &v43[*(int *)(v47 + 48)];
    outlined init with take of TableCellFormula((uint64_t)v36, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    v49 = v36[8];
    v46 = v36[9];
    *(_QWORD *)v43 = *(_QWORD *)v36;
    v43[8] = v49;
    v48 = v43 + 9;
  }
  *v48 = v46;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for WidgetAuxiliaryTextImagePreference?();
  v50 = (uint64_t *)AGGraphGetValue();
  v51 = *v50;
  if (*v50)
  {
    if (v51 != 1)
    {
      outlined copy of WidgetAuxiliaryTextImagePreference?(*v50);
      v52 = swift_bridgeObjectRetain();
      outlined consume of WidgetAuxiliaryTextImagePreference?(v52);
      PlatformItemList.mergedContentItem.getter(v51, (uint64_t)v22);
      swift_bridgeObjectRelease();
      v53 = type metadata accessor for PlatformItemList.Item();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v22, 0, 1, v53);
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
  }
  v54 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v22, 1, 1, v54);
LABEL_9:
  v55 = type metadata accessor for URL();
  v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56);
  v56(v15, 1, 1, v55);
  v93 = xmmword_187BF9840;
  v99 = xmmword_187BF9840;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v57 = *(void (**)(char *, uint64_t, uint64_t, int *))(v86 + 56);
  v58 = (uint64_t)v94;
  v57(v94, 1, 1, v23);
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v22, (uint64_t)v15, (uint64_t *)&v99, v58, v96);
  v59 = (uint64_t *)AGGraphGetValue();
  v60 = *v59;
  if (!*v59)
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
    v61 = (uint64_t)v87;
    goto LABEL_13;
  }
  v61 = (uint64_t)v87;
  if (v60 == 1)
  {
LABEL_13:
    v64 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v61, 1, 1, v64);
    goto LABEL_14;
  }
  outlined copy of WidgetAuxiliaryTextImagePreference?(*v59);
  v62 = swift_bridgeObjectRetain();
  outlined consume of WidgetAuxiliaryTextImagePreference?(v62);
  PlatformItemList.mergedContentItem.getter(v60, v61);
  swift_bridgeObjectRelease();
  v63 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v61, 0, 1, v63);
LABEL_14:
  v84 = (void (*)(char *, uint64_t, uint64_t, char *))v56;
  v56(v15, 1, 1, v55);
  v99 = v93;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v65 = (uint64_t)v94;
  v57(v94, 1, 1, v23);
  v87 = (char *)v55;
  v66 = v89;
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)(v61, (uint64_t)v15, (uint64_t *)&v99, v65, v89);
  v85 = v43;
  v67 = v88;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v43, v88, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v96, v65, type metadata accessor for WidgetAuxiliaryViewMetadata);
  v57((char *)v65, 0, 1, v23);
  v68 = v90;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v66, v90, type metadata accessor for WidgetAuxiliaryViewMetadata);
  v57((char *)v68, 0, 1, v23);
  v69 = (uint64_t *)AGGraphGetValue();
  v70 = *v69;
  v71 = v69[1];
  swift_retain();
  swift_retain();
  *(_QWORD *)&v99 = v70;
  *((_QWORD *)&v99 + 1) = v71;
  static WidgetAuxiliaryViewMetadata.tint(from:)((uint64_t)&v97);
  swift_release();
  swift_release();
  *(_QWORD *)&v99 = v97;
  BYTE8(v99) = v98;
  v72 = v91;
  WidgetAuxiliaryViewMetadata.Progress.init(kind:label:currentValueLabel:tint:)(v67, v65, v68, (uint64_t *)&v99, v91);
  v73 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56);
  v74(v72, 0, 1, v73);
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v75 = &v26[v23[6]];
  v76 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 1, 1, v76);
  *(_QWORD *)&v26[v23[7]] = 0;
  v77 = (uint64_t)&v26[v23[8]];
  v74(v77, 1, 1, v73);
  v78 = &v26[v23[9]];
  v78[48] = 0;
  *((_OWORD *)v78 + 1) = 0u;
  *((_OWORD *)v78 + 2) = 0u;
  *(_OWORD *)v78 = 0u;
  v84(&v26[v23[10]], 1, 1, v87);
  v79 = (__int128 *)&v26[v23[11]];
  *v79 = v93;
  v79[1] = 0u;
  v79[2] = 0u;
  v79[3] = 0u;
  outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(v72, v77);
  v80 = (uint64_t)v26;
  v81 = v92;
  outlined init with take of TableCellFormula(v80, v92, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v66, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v96, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v85, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, int *))v57)(v81, 0, 1, v23);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance CustomProgressView<A, B>.WidgetMetadataWriter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance CustomProgressView<A, B>.WidgetMetadataWriter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return CustomProgressView.WidgetMetadataWriter.value.getter(*(_QWORD *)(v1 + 8), a1);
}

void protocol witness for static View._makeView(view:inputs:) in conformance CustomProgressView<A, B>()
{
  static CustomProgressView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CustomProgressView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomProgressView<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CustomProgressView<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomProgressView<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance CustomProgressView<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomProgressView<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

void ProgressView<>.init(label:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for ProgressView.Base();
}

void sub_1871ED9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 16))(v4, v2, v3, v7);
  *(_BYTE *)(v6 - 112) = 1;
  CustomProgressView.init(fractionCompleted:alwaysIndeterminate:label:currentValueLabel:)();
}

uint64_t sub_1871EDA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v1);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v6 - 120), v4, v3);
}

uint64_t ProgressView<>.init<>()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = MEMORY[0x1E0CE7C38];
  v3 = MEMORY[0x1E0CE7C28];
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for CustomProgressView<EmptyView, EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
  v5 = *(int *)(v4 + 52);
  v6 = *(int *)(v4 + 56);
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(a1 + v5) = 1;
  *(_BYTE *)(a1 + v6) = 1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for ProgressView<EmptyView, EmptyView>.Base, v2, v3, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for ProgressViewValue(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ProgressViewValue);
}

void ProgressView<>.init(label:)(void (*a1)(double), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = type metadata accessor for Optional();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v10 - v8;
  a1(v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v9, 0, 1, a3);
  ProgressView<>.init(label:)();
}

uint64_t ProgressView<>.init<>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v2 = Text.init(_:tableName:bundle:comment:)();
  v4 = v3;
  v6 = v5;
  v8 = v7 & 1;
  v9 = MEMORY[0x1E0CE6CF8];
  v10 = MEMORY[0x1E0CE6C58];
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for CustomProgressView<Text, EmptyView>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
  v12 = *(int *)(v11 + 56);
  v13 = (uint64_t *)(a1 + *(int *)(v11 + 52));
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  *v13 = v2;
  v13[1] = v4;
  v13[2] = v8;
  v13[3] = v6;
  *(_BYTE *)(a1 + v12) = 1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for ProgressView<Text, EmptyView>.Base, v9, v10, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
  return swift_storeEnumTagMultiPayload();
}

void type metadata accessor for CustomProgressView<EmptyView, EmptyView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = a3;
    v8[1] = MEMORY[0x1E0CE7C38];
    v8[2] = a4;
    v8[3] = MEMORY[0x1E0CE7C28];
    v6 = a5(0, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t ProgressView<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v7);
  v9 = Text.init<A>(_:)();
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for CustomProgressView<Text, EmptyView>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
  v17 = *(int *)(v16 + 56);
  v18 = (uint64_t *)(a3 + *(int *)(v16 + 52));
  *(_QWORD *)a3 = 0;
  *(_WORD *)(a3 + 8) = 257;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  *v18 = v9;
  v18[1] = v11;
  v18[2] = v15;
  v18[3] = v13;
  *(_BYTE *)(a3 + v17) = 1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for ProgressView<Text, EmptyView>.Base, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

void ProgressView.init<A>(value:total:label:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[9];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v18[1] = a8;
  v24 = a7;
  v20 = a3;
  v21 = a4;
  v18[5] = a2;
  v22 = a9;
  v18[7] = a11;
  v18[8] = a1;
  v19 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v14);
  v18[6] = (char *)v18 - v15;
  v16 = type metadata accessor for Optional();
  v18[4] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v25 = a5;
  v26 = a6;
  v18[2] = a5;
  v18[3] = a6;
  v27 = a8;
  v28 = a10;
  type metadata accessor for ProgressView.Base();
}

void sub_1871EDF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v11 - 160) = a1;
  *(_QWORD *)(v11 - 152) = v12;
  MEMORY[0x1E0C80A78](a1, a2);
  getter of fractionCompleted #1 in ProgressView.init<A>(value:total:label:currentValueLabel:)(v2, v4, v5, v9, *(_QWORD *)(v11 - 128), v3, v8, *(_QWORD *)(v11 - 200));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v7, *(_QWORD *)(v11 - 176), v6);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v11 - 136) + 16))(*(_QWORD *)(v11 - 208), *(_QWORD *)(v11 - 168), *(_QWORD *)(v11 - 184));
  CustomProgressView.init(fractionCompleted:alwaysIndeterminate:label:currentValueLabel:)();
}

uint64_t sub_1871EE058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 136) + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8))(v0, v3);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v5 - 128) - 8) + 8))(*(_QWORD *)(v5 - 216), *(_QWORD *)(v5 - 128));
  v6 = type metadata accessor for Optional();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(*(_QWORD *)(v5 - 192), v6);
  v7 = *(_QWORD *)(v5 - 160);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 152) + 32))(*(_QWORD *)(v5 - 144), v1, v7);
}

uint64_t getter of fractionCompleted #1 in ProgressView.init<A>(value:total:label:currentValueLabel:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedConformanceWitness;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  void *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char v64;
  char *v65;
  char *v66;
  char v67;
  char *v68;
  char *v69;
  char *v70;
  char v71;
  char *v72;
  char v73;
  char *v75;
  double v76;
  double v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t AssociatedTypeWitness;
  char *v92;
  double v93;

  v92 = a2;
  v83 = a8;
  v85 = *(_QWORD *)(a8 + 16);
  v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 16) + 8) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v90 = (char *)&v78 - v11;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v78 - v15;
  v17 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v82 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v84 = (char *)&v78 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v78 - v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v78 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v88 = (char *)&v78 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v89 = (char *)&v78 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v78 - v40;
  v44 = MEMORY[0x1E0C80A78](v42, v43);
  v46 = (char *)&v78 - v45;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a1, v12, v44);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return 0;
  }
  v80 = v31;
  v81 = v27;
  v47 = v17;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v46, v16, a5);
  v48 = v86;
  v49 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v51 = v90;
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, v49, AssociatedConformanceWitness);
  MEMORY[0x18D75EAB8](v51, a5, v48);
  v52 = *(_QWORD *)(*(_QWORD *)(v85 + 24) + 8);
  LOBYTE(v49) = dispatch thunk of static Comparable.< infix(_:_:)();
  v53 = *(void (**)(char *, uint64_t))(v47 + 8);
  v79 = v41;
  v53(v41, a5);
  v54 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v87 = v46;
  v54(v89, v46, a5);
  v54(v88, v92, a5);
  v78 = v52;
  v55 = (char *)AssociatedConformanceWitness;
  if ((v49 & 1) != 0)
  {
    v53(v88, a5);
    v53(v89, a5);
    v56 = v48;
  }
  else
  {
    v58 = v88;
    v57 = v89;
    v59 = dispatch thunk of static Comparable.> infix(_:_:)();
    v53(v58, a5);
    v53(v57, a5);
    v56 = v48;
    if ((v59 & 1) == 0)
      goto LABEL_7;
  }
  static os_log_type_t.fault.getter();
  v60 = (void *)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();

LABEL_7:
  v61 = v90;
  v62 = AssociatedTypeWitness;
  v89 = v55;
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, AssociatedTypeWitness, v55);
  v63 = v79;
  MEMORY[0x18D75EAB8](v61, a5, v56);
  v64 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v53(v63, a5);
  v65 = v80;
  v66 = v92;
  v54(v80, v92, a5);
  if ((v64 & 1) == 0)
  {
    v53(v65, a5);
    v68 = v81;
    v54(v81, v87, a5);
    v70 = v84;
    v54(v84, v66, a5);
    goto LABEL_13;
  }
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, v62, v89);
  MEMORY[0x18D75EAB8](v61, a5, v86);
  v67 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v53(v63, a5);
  v53(v65, a5);
  v68 = v81;
  v54(v81, v87, a5);
  v69 = v63;
  v70 = v84;
  v54(v84, v66, a5);
  if ((v67 & 1) == 0)
  {
LABEL_13:
    v53(v70, a5);
    v53(v68, a5);
    goto LABEL_14;
  }
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, v62, v89);
  MEMORY[0x18D75EAB8](v61, a5, v86);
  v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  v53(v69, a5);
  v72 = v82;
  v54(v82, v70, a5);
  if ((v71 & 1) != 0)
  {
    MEMORY[0x18D75ECC8](&unk_187C14760, 256, v62, v89);
    MEMORY[0x18D75EAB8](v61, a5, v86);
    v73 = dispatch thunk of static Equatable.== infix(_:_:)();
    v53(v69, a5);
    v53(v72, a5);
    v53(v70, a5);
    v53(v81, a5);
    if ((v73 & 1) == 0)
      goto LABEL_17;
LABEL_14:
    v53(v87, a5);
    return 0;
  }
  v53(v72, a5);
  v53(v70, a5);
  v53(v81, a5);
LABEL_17:
  v75 = v87;
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  v76 = v93;
  if (v93 < 0.0)
    v76 = 0.0;
  if (v76 <= 1.0)
    v77 = v76;
  else
    v77 = 1.0;
  v53(v75, a5);
  return *(_QWORD *)&v77;
}

