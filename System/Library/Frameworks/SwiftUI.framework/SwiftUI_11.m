void partial apply for closure #1 in SidebarAdaptableTabViewStyle.Body.value.getter()
{
  closure #1 in SidebarAdaptableTabViewStyle.Body.value.getter();
}

uint64_t key path getter for EnvironmentValues.horizontalSizeClass : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.horizontalSizeClass.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.horizontalSizeClass : EnvironmentValues()
{
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t specialized closure #1 in static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t (*a5)(uint64_t *, double)@<X4>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;

  v34 = a1;
  v15 = type metadata accessor for TabViewCustomization();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a2;
  v36 = a3;
  v37 = a4 & 1;
  v20 = a5(&v35, v17);
  v22 = v21;
  v24 = v23 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a7, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
  if ((a6 & 1) != 0)
    goto LABEL_7;
  v25 = *(_QWORD *)&v19[*(int *)(v15 + 20)];
  if (!*(_QWORD *)(v25 + 16))
    goto LABEL_7;
  outlined copy of TabCustomizationID.Base();
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22, 0);
  if ((v27 & 1) == 0)
  {
    outlined consume of TabCustomizationID.Base();
    goto LABEL_7;
  }
  v28 = *(unsigned __int8 *)(*(_QWORD *)(v25 + 56) + v26);
  outlined consume of TabCustomizationID.Base();
  if (v28 < 2)
  {
LABEL_7:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    result = outlined copy of TabCustomizationID.Base();
    v30 = v34;
    goto LABEL_8;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
  result = outlined consume of TabCustomizationID.Base();
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v20 = 0;
  v22 = 0;
  v24 = 0;
  v33 = 255;
LABEL_8:
  *(_QWORD *)a8 = v30;
  *(_QWORD *)(a8 + 8) = v31;
  *(_QWORD *)(a8 + 16) = v32;
  *(_QWORD *)(a8 + 24) = v33;
  *(_QWORD *)(a8 + 32) = v20;
  *(_QWORD *)(a8 + 40) = v22;
  *(_BYTE *)(a8 + 48) = v24;
  return result;
}

uint64_t key path getter for EnvironmentValues.tabContentMode : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_1873937CC()
{
  return EnvironmentValues.tabContentMode.setter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t _s7SwiftUI7BindingVyxGACySiSgGIgno_AdFs5NeverOIegnrzr_SHRzlTRTA_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  result = (*(uint64_t (**)(void))(v1 + 32))();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6 & 1;
  return result;
}

uint64_t type metadata accessor for AdaptableTabView.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AdaptableTabView.BodyContent);
}

uint64_t sub_1873938C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.horizontalSizeClass.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187393900()
{
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t key path getter for EnvironmentValues.tabViewCustomization : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>, (uint64_t)&type metadata for TabViewCustomization.Key, (uint64_t)&protocol witness table for TabViewCustomization.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>, (uint64_t)&type metadata for TabViewCustomization.Key, (uint64_t)&protocol witness table for TabViewCustomization.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.tabViewCustomization : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, v6);
  return EnvironmentValues.tabViewCustomization.setter((uint64_t)v5);
}

void type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>, (uint64_t)&type metadata for TabViewCustomization.Key, (uint64_t)&protocol witness table for TabViewCustomization.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in ChildIndexProjection.get(base:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in ChildIndexProjection.get(base:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E0CE5600], a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of (offset: Int, element: _VariadicView_Children.Element)?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?(0, &lazy cache variable for type metadata for (offset: Int, element: _VariadicView_Children.Element)?, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: _VariadicView_Children.Element));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of EnumeratedSequence<_VariadicView_Children>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E0CE5600], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC58]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (offset: Int, element: _VariadicView_Children.Element)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: _VariadicView_Children.Element));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187393D00()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void type metadata completion function for AdaptableTabView.BodyContent()
{
  unint64_t v0;

  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for AdaptableTabView.BodyContent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v43)(char *, char *, uint64_t);
  char *v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<TabViewCustomization>(0);
      v8 = v7;
      v9 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
      {
        type metadata accessor for Binding<TabViewCustomization>?(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        v13 = *(int *)(v8 + 32);
        v44 = (char *)a1 + v13;
        v14 = (char *)a2 + v13;
        v15 = type metadata accessor for UUID();
        v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
        swift_retain();
        swift_retain();
        v43(v44, v14, v15);
        v16 = type metadata accessor for TabViewCustomization();
        *(_QWORD *)&v44[*(int *)(v16 + 20)] = *(_QWORD *)&v14[*(int *)(v16 + 20)];
        *(_QWORD *)&v44[*(int *)(v16 + 24)] = *(_QWORD *)&v14[*(int *)(v16 + 24)];
        v17 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17(a1, 0, 1, v8);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v18 = a3[9];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    v22 = v20[8];
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v20, v22);
    *(_QWORD *)v19 = v21;
    v19[8] = v22;
    v23 = a3[10];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_OWORD *)((char *)a2 + v23 + 24);
    *(_OWORD *)((char *)a1 + v23 + 24) = v26;
    (**(void (***)(char *, char *))(v26 - 8))((char *)a1 + v23, (char *)a2 + v23);
    v27 = (void *)*((_QWORD *)v25 + 5);
    v28 = *((_QWORD *)v25 + 6);
    *((_QWORD *)v24 + 5) = v27;
    *((_QWORD *)v24 + 6) = v28;
    v29 = a3[11];
    v30 = a3[12];
    v31 = (uint64_t *)((char *)a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v31[2] = v32[2];
    v34 = (char *)a1 + v30;
    v35 = (char *)a2 + v30;
    *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
    v36 = (uint64_t)a1 + v30 + 8;
    v37 = *(uint64_t *)((char *)a2 + v30 + 16);
    v38 = v27;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v37)
    {
      *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
      *((_QWORD *)v34 + 2) = v37;
      v34[24] = v35[24];
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v36 = *(_OWORD *)(v35 + 8);
      *(_BYTE *)(v36 + 16) = v35[24];
    }
    v39 = *((_QWORD *)v35 + 4);
    if (v39 == 1)
    {
      *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
      *((_QWORD *)v34 + 6) = *((_QWORD *)v35 + 6);
    }
    else
    {
      v40 = *((_QWORD *)v35 + 5);
      v41 = *((_QWORD *)v35 + 6);
      *((_QWORD *)v34 + 4) = v39;
      *((_QWORD *)v34 + 5) = v40;
      *((_QWORD *)v34 + 6) = v41;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    *((_WORD *)v34 + 28) = *((_WORD *)v35 + 28);
  }
  return a1;
}

uint64_t destroy for AdaptableTabView.BodyContent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<TabViewCustomization>(0);
    v5 = v4;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
    {
      swift_release();
      swift_release();
      v6 = a1 + *(int *)(v5 + 32);
      v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      type metadata accessor for TabViewCustomization();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  v8 = a1 + a2[10];
  __swift_destroy_boxed_opaque_existential_1(v8);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v9 = a1 + a2[12];
  if (*(_QWORD *)(v9 + 16))
  {
    swift_release();
    swift_release();
  }
  result = *(_QWORD *)(v9 + 32);
  if (result != 1)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for AdaptableTabView.BodyContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(char *, char *, uint64_t);
  char *v42;

  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<TabViewCustomization>(0);
    v7 = v6;
    v8 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
    {
      type metadata accessor for Binding<TabViewCustomization>?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = *(int *)(v7 + 32);
      v42 = (char *)a1 + v11;
      v12 = (char *)a2 + v11;
      v13 = type metadata accessor for UUID();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_retain();
      swift_retain();
      v41(v42, v12, v13);
      v14 = type metadata accessor for TabViewCustomization();
      *(_QWORD *)&v42[*(int *)(v14 + 20)] = *(_QWORD *)&v12[*(int *)(v14 + 20)];
      *(_QWORD *)&v42[*(int *)(v14 + 24)] = *(_QWORD *)&v12[*(int *)(v14 + 24)];
      v15 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15(a1, 0, 1, v7);
    }
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v16 = a3[9];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = v18[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, v20);
  *(_QWORD *)v17 = v19;
  v17[8] = v20;
  v21 = a3[10];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_OWORD *)((char *)a2 + v21 + 24);
  *(_OWORD *)((char *)a1 + v21 + 24) = v24;
  (**(void (***)(char *, char *))(v24 - 8))((char *)a1 + v21, (char *)a2 + v21);
  v25 = (void *)*((_QWORD *)v23 + 5);
  v26 = *((_QWORD *)v23 + 6);
  *((_QWORD *)v22 + 5) = v25;
  *((_QWORD *)v22 + 6) = v26;
  v27 = a3[11];
  v28 = a3[12];
  v29 = (_QWORD *)((char *)a1 + v27);
  v30 = (_QWORD *)((char *)a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v29[2] = v30[2];
  v32 = (char *)a1 + v28;
  v33 = (char *)a2 + v28;
  *((_BYTE *)a1 + v28) = *((_BYTE *)a2 + v28);
  v34 = (uint64_t)a1 + v28 + 8;
  v35 = *(_QWORD *)((char *)a2 + v28 + 16);
  v36 = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v35)
  {
    *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
    *((_QWORD *)v32 + 2) = v35;
    v32[24] = v33[24];
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v34 = *(_OWORD *)(v33 + 8);
    *(_BYTE *)(v34 + 16) = v33[24];
  }
  v37 = *((_QWORD *)v33 + 4);
  if (v37 == 1)
  {
    *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
    *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
  }
  else
  {
    v38 = *((_QWORD *)v33 + 5);
    v39 = *((_QWORD *)v33 + 6);
    *((_QWORD *)v32 + 4) = v37;
    *((_QWORD *)v32 + 5) = v38;
    *((_QWORD *)v32 + 6) = v39;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  *((_WORD *)v32 + 28) = *((_WORD *)v33 + 28);
  return a1;
}

_QWORD *assignWithCopy for AdaptableTabView.BodyContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 *v40;
  uint64_t v41;
  __int128 *v42;
  __int128 v43;
  uint64_t v44;
  void (*v46)(char *, char *, uint64_t);
  char *v47;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content);
    type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<TabViewCustomization>(0);
      v7 = v6;
      v8 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
      {
        type metadata accessor for Binding<TabViewCustomization>?(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v10 = *(int *)(v7 + 32);
        v47 = (char *)a1 + v10;
        v11 = (char *)a2 + v10;
        v12 = type metadata accessor for UUID();
        v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
        swift_retain();
        swift_retain();
        v46(v47, v11, v12);
        v13 = type metadata accessor for TabViewCustomization();
        *(_QWORD *)&v47[*(int *)(v13 + 20)] = *(_QWORD *)&v11[*(int *)(v13 + 20)];
        *(_QWORD *)&v47[*(int *)(v13 + 24)] = *(_QWORD *)&v11[*(int *)(v13 + 24)];
        v14 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v14(a1, 0, 1, v7);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v15 = a3[9];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = v17[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v17, v19);
  v20 = *(_QWORD *)v16;
  v21 = v16[8];
  *(_QWORD *)v16 = v18;
  v16[8] = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  v22 = a3[10];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  __swift_assign_boxed_opaque_existential_1((_QWORD *)((char *)a1 + v22), (_QWORD *)((char *)a2 + v22));
  v25 = (void *)*((_QWORD *)v24 + 5);
  v26 = (void *)*((_QWORD *)v23 + 5);
  *((_QWORD *)v23 + 5) = v25;
  v27 = v25;

  *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = a3[11];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);
  swift_retain();
  swift_release();
  *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
  swift_retain();
  swift_release();
  *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
  v31 = a3[12];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
  v34 = (uint64_t)a1 + v31 + 8;
  v35 = v33 + 8;
  v36 = *(_QWORD *)((char *)a1 + v31 + 16);
  v37 = *((_QWORD *)v33 + 2);
  if (v36)
  {
    if (v37)
    {
      *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
      swift_retain();
      swift_release();
      *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
      swift_retain();
      swift_release();
      v32[24] = v33[24];
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?(v34, &lazy cache variable for type metadata for Binding<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v38 = v33[24];
      *(_OWORD *)v34 = *v35;
      *(_BYTE *)(v34 + 16) = v38;
    }
  }
  else if (v37)
  {
    *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
    *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
    v32[24] = v33[24];
    swift_retain();
    swift_retain();
  }
  else
  {
    v39 = *v35;
    *(_BYTE *)(v34 + 16) = v33[24];
    *(_OWORD *)v34 = v39;
  }
  v40 = (__int128 *)(v32 + 32);
  v42 = (__int128 *)(v33 + 32);
  v41 = *((_QWORD *)v33 + 4);
  if (*((_QWORD *)v32 + 4) == 1)
  {
    if (v41 == 1)
    {
      v43 = *v42;
      *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
      *v40 = v43;
    }
    else
    {
      *((_QWORD *)v32 + 4) = v41;
      *((_QWORD *)v32 + 5) = *((_QWORD *)v33 + 5);
      *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
    }
  }
  else if (v41 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration((uint64_t)(v32 + 32));
    v44 = *((_QWORD *)v33 + 6);
    *v40 = *v42;
    *((_QWORD *)v32 + 6) = v44;
  }
  else
  {
    *((_QWORD *)v32 + 4) = v41;
    swift_retain();
    swift_release();
    *((_QWORD *)v32 + 5) = *((_QWORD *)v33 + 5);
    swift_retain();
    swift_release();
    *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
    swift_retain();
    swift_release();
  }
  v32[56] = v33[56];
  v32[57] = v33[57];
  return a1;
}

uint64_t outlined destroy of TabSidebarAccessoryViewConfiguration(uint64_t a1)
{
  destroy for CellConfiguration.Values();
  return a1;
}

_QWORD *initializeWithTake for AdaptableTabView.BodyContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _OWORD *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<TabViewCustomization>(0);
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v8))
    {
      type metadata accessor for Binding<TabViewCustomization>?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = *(int *)(v9 + 32);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      v17 = type metadata accessor for TabViewCustomization();
      *(_QWORD *)&v14[*(int *)(v17 + 20)] = *(_QWORD *)&v15[*(int *)(v17 + 20)];
      *(_QWORD *)&v14[*(int *)(v17 + 24)] = *(_QWORD *)&v15[*(int *)(v17 + 24)];
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v18 = a3[9];
  v19 = a3[10];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = (char *)a1 + v19;
  v23 = (char *)a2 + v19;
  *((_QWORD *)v22 + 6) = *((_QWORD *)v23 + 6);
  v24 = *((_OWORD *)v23 + 2);
  v25 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
  *((_OWORD *)v22 + 2) = v24;
  *(_OWORD *)v22 = v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = (char *)a1 + v26;
  v29 = (char *)a2 + v26;
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
  v30 = (_OWORD *)((char *)a1 + v27);
  v31 = (__int128 *)((char *)a2 + v27);
  v32 = *v31;
  v33 = v31[1];
  v34 = v31[2];
  *(_OWORD *)((char *)v30 + 42) = *(__int128 *)((char *)v31 + 42);
  v30[1] = v33;
  v30[2] = v34;
  *v30 = v32;
  return a1;
}

_QWORD *assignWithTake for AdaptableTabView.BodyContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content);
    type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<TabViewCustomization>(0);
      v9 = v8;
      v10 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v8))
      {
        type metadata accessor for Binding<TabViewCustomization>?(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        v13 = *(int *)(v9 + 32);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
        v17 = type metadata accessor for TabViewCustomization();
        *(_QWORD *)&v14[*(int *)(v17 + 20)] = *(_QWORD *)&v15[*(int *)(v17 + 20)];
        *(_QWORD *)&v14[*(int *)(v17 + 24)] = *(_QWORD *)&v15[*(int *)(v17 + 24)];
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v18 = a3[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  LOBYTE(v20) = v20[8];
  v22 = *(_QWORD *)v19;
  v23 = v19[8];
  *(_QWORD *)v19 = v21;
  v19[8] = (char)v20;
  outlined consume of Environment<Bool>.Content(v22, v23);
  v24 = a3[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + v24);
  v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  v28 = *((_QWORD *)v26 + 5);
  v29 = (void *)*((_QWORD *)v25 + 5);
  *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
  *((_QWORD *)v25 + 5) = v28;

  *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
  swift_bridgeObjectRelease();
  v30 = a3[11];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  *(_QWORD *)((char *)a1 + v30) = *(_QWORD *)((char *)a2 + v30);
  swift_release();
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_release();
  *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
  v33 = a3[12];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = (uint64_t)a2 + v33 + 8;
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  v37 = (uint64_t)a1 + v33 + 8;
  if (*(_QWORD *)((char *)a1 + v33 + 16))
  {
    if (*((_QWORD *)v35 + 2))
    {
      *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
      swift_release();
      *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
      swift_release();
      v34[24] = v35[24];
      goto LABEL_13;
    }
    outlined destroy of AccessibilityScrollableContext?(v37, &lazy cache variable for type metadata for Binding<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  }
  *(_OWORD *)v37 = *(_OWORD *)v36;
  *(_BYTE *)(v37 + 16) = *(_BYTE *)(v36 + 16);
LABEL_13:
  v38 = *((_QWORD *)v35 + 4);
  if (*((_QWORD *)v34 + 4) != 1)
  {
    if (v38 != 1)
    {
      *((_QWORD *)v34 + 4) = v38;
      swift_release();
      *((_QWORD *)v34 + 5) = *((_QWORD *)v35 + 5);
      swift_release();
      *((_QWORD *)v34 + 6) = *((_QWORD *)v35 + 6);
      swift_release();
      goto LABEL_18;
    }
    outlined destroy of TabSidebarAccessoryViewConfiguration((uint64_t)(v34 + 32));
  }
  *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
  *((_QWORD *)v34 + 6) = *((_QWORD *)v35 + 6);
LABEL_18:
  *((_WORD *)v34 + 28) = *((_WORD *)v35 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdaptableTabView.BodyContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187394DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E0CE1160]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AdaptableTabView.BodyContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_187394E4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E0CE1160]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 40) + 24) = (a2 - 1);
}

void sub_187394EE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AdaptableTabView.BodyContent(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in AdaptableTabView<A>.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PhoneInterfaceIdiom>, MEMORY[0x1E0CE4848], MEMORY[0x1E0CE4838], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, (void (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView);
}

uint64_t type metadata accessor for UIKitAdaptableTabView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UIKitAdaptableTabView;
  if (!type metadata singleton initialization cache for UIKitAdaptableTabView)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PhoneInterfaceIdiom>, MEMORY[0x1E0CE4848], MEMORY[0x1E0CE4838], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  BOOL v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a4[2];
  if (a3)
  {
    v8 = (_QWORD *)(a3 + 16);
    swift_retain();
    v9 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, a2, (uint64_t)(a4 + 4), v7, v8);
    swift_release();
  }
  else
  {
    if (!v7)
      return 0;
    v10 = a4[4] == a1 && a4[5] == a2;
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 0;
    if (v7 == 1)
      return 0;
    if (a4[6] == a1 && a4[7] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    if (v7 == 2)
      return 0;
    if (a4[8] == a1 && a4[9] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 2;
    if (v7 == 3)
      return 0;
    if (a4[10] == a1 && a4[11] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return 3;
    }
    else
    {
      v12 = a4 + 13;
      v13 = 3;
      v14 = 4;
      while (1)
      {
        if (v7 == v14)
          return 0;
        ++v13;
        if (*(v12 - 1) == a1 && *v12 == a2)
          break;
        v9 = v14++;
        v12 += 2;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return v9;
      }
      return v13;
    }
  }
  return v9;
}

uint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v8 = v2[1];
  v6 = v2 + 1;
  v7 = v8;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v8;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
    v7 = *v6;
  }
  v11 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
    v7 = *v6;
  }
  *(_QWORD *)(v7 + 16) = v11 + 1;
  v12 = v7 + 16 * v11;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  v3[1] = v7;
  v13 = *(_QWORD *)(v7 + 16);
  v14 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (MEMORY[0x18D754F24](*(_QWORD *)(v14 + 16) & 0x3FLL) >= v13)
    {
      result = swift_isUniquelyReferenced_native();
      v15 = *v3;
      if (!(_DWORD)result)
      {
        if (!v15)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        v15 = _HashTable.copy()();
        result = swift_release();
        *v3 = v15;
      }
      if (v15)
        return _HashTable.UnsafeHandle.subscript.setter();
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v13 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()();
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v1 = *v0;
  v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess();
    v3 = *(_QWORD *)(v1 + 24) & 0x3FLL;
    v4 = *(_QWORD *)(v2 + 16);
    if (v3)
      goto LABEL_7;
  }
  else
  {
    v3 = 0;
    v4 = *(_QWORD *)(v2 + 16);
  }
  if (v4 < 0x10)
  {
    v5 = 0;
    goto LABEL_11;
  }
LABEL_7:
  v6 = MEMORY[0x18D754F48](v4);
  if (v3 <= v6)
    v7 = v6;
  else
    v7 = v3;
  v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v2, v7, 0, v3);
LABEL_11:
  result = swift_release();
  *v0 = v5;
  return result;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = MEMORY[0x18D754F48](*(_QWORD *)(a1 + 16));
  v9 = 0;
  if ((a3 & 1) != 0)
    v10 = 0;
  else
    v10 = a2;
  if (v10 <= v8)
    v10 = v8;
  if (v10 <= a4)
    v11 = a4;
  else
    v11 = v10;
  if (v11 >= 5)
  {
    v9 = MEMORY[0x18D754F54]();
    specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (_QWORD *)(v9 + 16));
  }
  return v9;
}

Swift::Int specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(Swift::Int result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    while (1)
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      if (__OFSUB__(1 << *a2, 1))
        break;
      v5 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      swift_bridgeObjectRelease();
      if (v5)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2)
        return result;
    }
    __break(1u);
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  if (__OFSUB__(1 << *a5, 1))
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    v10 = _HashTable.BucketIterator.currentValue.getter();
    v11 = v10;
    if ((v12 & 1) == 0)
    {
      v13 = (_QWORD *)(a3 + 16 * v10);
      if (*v13 != a1 || v13[1] != a2)
      {
        do
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          _HashTable.BucketIterator.advance()();
          v14 = _HashTable.BucketIterator.currentValue.getter();
          v11 = v14;
          if ((v15 & 1) != 0)
            break;
          v16 = (_QWORD *)(a3 + 16 * v14);
        }
        while (*v16 != a1 || v16[1] != a2);
      }
    }
    return v11;
  }
  return result;
}

uint64_t specialized OrderedSet._reserveCapacity(_:persistent:)(uint64_t result, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int64_t v5;
  Swift::Int *v6;
  Swift::Int v7;
  Swift::Int v8;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (result < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v3 = v2;
  v5 = result;
  v8 = v2[1];
  v6 = v2 + 1;
  v7 = v8;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v6 = v8;
  if ((_DWORD)isUniquelyReferenced_nonNull_native && (unint64_t)v5 <= *(_QWORD *)(v7 + 24) >> 1)
  {
    v10 = *v3;
    if (*v3)
      goto LABEL_5;
  }
  else
  {
    if (*(_QWORD *)(v7 + 16) <= v5)
      v15 = v5;
    else
      v15 = *(_QWORD *)(v7 + 16);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 0);
    v7 = *v6;
    v10 = *v3;
    if (*v3)
    {
LABEL_5:
      swift_beginAccess();
      v11 = *(_QWORD *)(v10 + 16) & 0x3FLL;
      v12 = MEMORY[0x18D754F48](v5);
      v13 = v12;
      if ((a2 & 1) != 0)
      {
        v14 = v12;
        if (v11 >= v12)
          goto LABEL_20;
      }
      else
      {
        swift_beginAccess();
        v14 = *(_QWORD *)(v10 + 24) & 0x3FLL;
        if (v11 >= v13)
          goto LABEL_20;
      }
LABEL_16:
      if (v14 <= v13)
        v17 = v13;
      else
        v17 = v14;
      goto LABEL_30;
    }
  }
  v16 = MEMORY[0x18D754F48](v5);
  v13 = v16;
  v11 = 0;
  if ((a2 & 1) != 0)
    v14 = v16;
  else
    v14 = 0;
  if (v16 > 0)
    goto LABEL_16;
LABEL_20:
  if (v14 <= v13)
    v18 = v13;
  else
    v18 = v14;
  result = MEMORY[0x18D754F48](*(_QWORD *)(v7 + 16));
  if (result <= v18)
    v19 = v18;
  else
    v19 = result;
  if (v19 < v11)
  {
    if (v14 <= v19)
      v17 = v19;
    else
      v17 = v14;
LABEL_30:
    v20 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v7, v17, 0, v14);
    result = swift_release();
    *v3 = v20;
    return result;
  }
  if (!v10 || (result = swift_isUniquelyReferenced_native(), (_DWORD)result))
  {
    v21 = *v3;
    if (*v3)
      goto LABEL_35;
LABEL_39:
    if (!v14)
      return result;
    __break(1u);
    goto LABEL_41;
  }
  result = *v3;
  if (!*v3)
  {
LABEL_42:
    __break(1u);
    return result;
  }
  v21 = _HashTable.copy()();
  result = swift_release();
  *v3 = v21;
  if (!v21)
    goto LABEL_39;
LABEL_35:
  result = swift_beginAccess();
  if ((*(_QWORD *)(v21 + 24) & 0x3FLL) != v14)
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(v21 + 24) & 0xFFFFFFFFFFFFFFC0 | v14 & 0x3F;
  return result;
}

unint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(v2[1] + 16);
  v5 = *v2;
  if (!*v2)
  {
    if (v4)
      return specialized ContiguousArray.remove(at:)(a1);
    goto LABEL_15;
  }
  swift_beginAccess();
  if ((*(_QWORD *)(v5 + 16) & 0x3FLL) == (*(_QWORD *)(v5 + 24) & 0x3FLL))
  {
    if (!v4)
      goto LABEL_15;
  }
  else if (v4 <= static _HashTable.minimumCapacity(forScale:)())
  {
LABEL_15:
    v10 = specialized ContiguousArray.remove(at:)(a1);
    specialized OrderedSet._regenerateHashTable()();
    return v10;
  }
  result = swift_isUniquelyReferenced_native();
  v8 = *v2;
  if (!(_DWORD)result)
  {
    if (!v8)
      goto LABEL_20;
    v8 = _HashTable.copy()();
    result = swift_release();
    *v2 = v8;
  }
  if (v8)
  {
    swift_retain();
    result = specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a2, (_QWORD *)(v8 + 16), v8 + 32, (uint64_t)v2);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      v9 = v2[1];
      swift_retain();
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, a1 + 1, v9, (_QWORD *)(v8 + 16));
      swift_release();
      swift_release();
      return specialized ContiguousArray.remove(at:)(a1);
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = v5 - 1 - a1;
    if (v7 >= 0)
    {
      v8 = v3 + 8 * a1;
      v9 = *(_QWORD *)(v8 + 32);
      memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * v7);
      *(_QWORD *)(v3 + 16) = v6;
      specialized ContiguousArray._endMutation()();
      return v9;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
  v4 = *((_QWORD *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[16 * a1];
      v8 = *((_QWORD *)v7 + 4);
      memmove(v7 + 32, v7 + 48, 16 * v6);
      *((_QWORD *)v3 + 2) = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = a1;
  v15 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  _HashTable.BucketIterator.advance()();
  if (!v15)
    return _HashTable.UnsafeHandle.subscript.setter();
  v7 = a1;
  v8 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
  while (1)
  {
    result = _HashTable.BucketIterator.currentValue.getter();
    if ((v10 & 1) != 0)
      break;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      break;
    }
    if (result >= *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16))
      goto LABEL_16;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v11 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v12 = 1 << *a2;
    if (__OFSUB__(v12, 1))
      goto LABEL_17;
    v13 = (v12 - 1) & v11;
    if (v6 >= v8)
    {
      if (v13 < v8)
        goto LABEL_3;
LABEL_12:
      if (v6 < v13)
        goto LABEL_3;
      goto LABEL_13;
    }
    if (v13 < v8)
      goto LABEL_12;
LABEL_13:
    _HashTable.BucketIterator.currentValue.getter();
    _HashTable.UnsafeHandle.subscript.setter();
    v6 = v7;
LABEL_3:
    _HashTable.BucketIterator.advance()();
    v7 = a1;
  }
  __break(1u);
  return result;
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v5 >= 1)
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = v8 - v5;
    if ((uint64_t)v8 < v5)
      ++v9;
    if (a1 < v9 >> 1)
    {
      if (MEMORY[0x18D754F24](*a4 & 0x3FLL) / 3 > a1)
      {
        if (a1 < 0)
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        if (v8 < a1)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        if (a1)
        {
          swift_retain();
          v10 = 0;
          while (1)
          {
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            Hasher._finalize()();
            if (__OFSUB__(1 << *a4, 1))
              break;
            if (_HashTable.UnsafeHandle._startIterator(bucket:)())
            {
              while (1)
              {
                v11 = _HashTable.BucketIterator.currentValue.getter();
                if ((v12 & 1) == 0 && v11 == v10)
                  break;
                _HashTable.BucketIterator.advance()();
              }
            }
            if (__OFADD__(v10, v5))
              goto LABEL_56;
            ++v10;
            _HashTable.BucketIterator.currentValue.setter();
            swift_bridgeObjectRelease();
            if (v10 == a1)
            {
              swift_release();
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        goto LABEL_20;
      }
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      v18 = _HashTable.BucketIterator.currentValue.getter();
      if ((v19 & 1) != 0 || v18 >= a1)
      {
LABEL_32:
        _HashTable.BucketIterator.advance()();
LABEL_20:
        v13 = a4[1];
        if (__OFSUB__(v13 >> 6, v5))
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        v14 = 1 << *a4;
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v15)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v17 = (v16 & (((v13 >> 6) - v5) >> 63)) + (v13 >> 6) - v5;
        if (v17 < v16)
          v16 = 0;
        a4[1] = a4[1] & 0x3FLL | ((v17 - v16) << 6);
        return;
      }
      if (!__OFADD__(v18, v5))
      {
        _HashTable.BucketIterator.currentValue.setter();
        goto LABEL_32;
      }
      __break(1u);
LABEL_38:
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      v20 = _HashTable.BucketIterator.currentValue.getter();
      if ((v21 & 1) == 0 && v20 >= v4)
      {
        if (__OFSUB__(v20, v5))
        {
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        _HashTable.BucketIterator.currentValue.setter();
      }
      _HashTable.BucketIterator.advance()();
      return;
    }
    v4 = a2;
    if (__OFSUB__(v8, a2))
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if ((uint64_t)(v8 - a2) >= MEMORY[0x18D754F24](*a4 & 0x3FLL) / 3)
      goto LABEL_38;
    if ((uint64_t)v8 < v4)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v4 < 0)
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v8 != v4)
    {
      if (v8 <= v4)
      {
LABEL_68:
        __break(1u);
        return;
      }
      swift_retain();
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Hasher._finalize()();
        if (__OFSUB__(1 << *a4, 1))
          goto LABEL_58;
        if (_HashTable.UnsafeHandle._startIterator(bucket:)())
        {
          while (1)
          {
            v22 = _HashTable.BucketIterator.currentValue.getter();
            if ((v23 & 1) == 0 && v22 == v4)
              break;
            _HashTable.BucketIterator.advance()();
          }
        }
        if (__OFSUB__(v4, v5))
          goto LABEL_59;
        ++v4;
        _HashTable.BucketIterator.currentValue.setter();
        swift_bridgeObjectRelease();
        if (v4 == v8)
        {
          swift_release();
          return;
        }
      }
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t result;
  uint64_t v70;
  uint64_t v71;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;

  v5 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 56;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 56;
  v94 = __src;
  v93 = __dst;
  if (v9 < v11)
  {
    if (v8 >= -55)
    {
      v12 = 56 * v9;
      if (__dst != __src || &__src[v12] <= __dst)
        memmove(__dst, __src, v12);
      v13 = &v5[v12];
      v92 = &v5[v12];
      if ((unint64_t)v6 >= a3 || v8 < 56)
        goto LABEL_116;
      v74 = &v5[v12];
LABEL_9:
      v78 = v7;
      v88 = *((_QWORD *)v6 + 5);
      v90 = *((_QWORD *)v6 + 4);
      v14 = v6[48];
      v16 = *((_QWORD *)v5 + 4);
      v15 = *((_QWORD *)v5 + 5);
      v17 = v5[48];
      if (v14 == 1)
      {
        if ((v17 & 1) == 0)
          goto LABEL_47;
      }
      else if ((v17 & 1) != 0)
      {
        goto LABEL_51;
      }
      v84 = *(_QWORD *)v5;
      v86 = *(_QWORD *)v6;
      v82 = v6;
      v76 = v5;
      v18 = *(_QWORD *)(a5 + 16);
      if (!v18)
      {
LABEL_41:
        v13 = v74;
        v5 = v76;
        v6 = v82;
        if (v86 < v84)
          goto LABEL_47;
LABEL_51:
        v29 = v78;
        if (v78 != v5)
        {
          v34 = *(_OWORD *)v5;
          v35 = *((_OWORD *)v5 + 1);
          v36 = *((_OWORD *)v5 + 2);
          *((_QWORD *)v78 + 6) = *((_QWORD *)v5 + 6);
          *((_OWORD *)v78 + 1) = v35;
          *((_OWORD *)v78 + 2) = v36;
          *(_OWORD *)v78 = v34;
        }
        v5 += 56;
        v93 = v5;
        v28 = v6;
LABEL_55:
        v30 = a3;
        goto LABEL_56;
      }
      v19 = 0;
      v20 = (_BYTE *)(a5 + 48);
      while (1)
      {
        v21 = *((_QWORD *)v20 - 2);
        v22 = *((_QWORD *)v20 - 1);
        if ((*v20 & 1) != 0)
        {
          if ((v14 & 1) != 0)
          {
            v23 = v21 == v90 && v22 == v88;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_37;
          }
          if (v17)
            goto LABEL_32;
        }
        else
        {
          if ((v14 & 1) == 0)
          {
            v24 = v21 == v90 && v22 == v88;
            if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_37:
              if (v19 >= v18)
                goto LABEL_118;
              v26 = *((_QWORD *)v20 - 2);
              v27 = *((_QWORD *)v20 - 1);
              if ((*v20 & 1) != 0)
              {
                v13 = v74;
                v5 = v76;
                v6 = v82;
                if ((v14 & 1) == 0)
                  goto LABEL_51;
              }
              else
              {
                v13 = v74;
                v5 = v76;
                v6 = v82;
                if ((v14 & 1) != 0)
                  goto LABEL_51;
              }
              if ((v26 != v90 || v27 != v88) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_51;
LABEL_47:
              v28 = v6 + 56;
              v29 = v78;
              if (v78 < v6 || v78 >= v28)
              {
                v37 = *(_OWORD *)v6;
                v38 = *((_OWORD *)v6 + 1);
                v39 = *((_OWORD *)v6 + 2);
                *((_QWORD *)v78 + 6) = *((_QWORD *)v6 + 6);
                *((_OWORD *)v78 + 1) = v38;
                *((_OWORD *)v78 + 2) = v39;
                *(_OWORD *)v78 = v37;
                goto LABEL_55;
              }
              v30 = a3;
              if (v78 != v6)
              {
                v31 = *(_OWORD *)v6;
                v32 = *((_OWORD *)v6 + 1);
                v33 = *((_OWORD *)v6 + 2);
                *((_QWORD *)v78 + 6) = *((_QWORD *)v6 + 6);
                *((_OWORD *)v78 + 1) = v32;
                *((_OWORD *)v78 + 2) = v33;
                *(_OWORD *)v78 = v31;
              }
LABEL_56:
              v7 = v29 + 56;
              if (v5 >= v13 || (v6 = v28, (unint64_t)v28 >= v30))
              {
                v94 = v7;
                goto LABEL_116;
              }
              goto LABEL_9;
            }
          }
          if ((v17 & 1) == 0)
          {
LABEL_32:
            v25 = v21 == v16 && v22 == v15;
            if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_37;
          }
        }
        ++v19;
        v20 += 24;
        if (v18 == v19)
          goto LABEL_41;
      }
    }
LABEL_119:
    swift_bridgeObjectRelease();
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 < -55)
    goto LABEL_119;
  v40 = 56 * v11;
  if (__dst != a2 || &a2[v40] <= __dst)
    memmove(__dst, a2, 56 * v11);
  v41 = &v5[v40];
  v92 = &v5[v40];
  v94 = v6;
  v42 = (char *)a3;
  if (v7 >= v6 || v10 < 56)
    goto LABEL_116;
  v43 = v6;
  v77 = v5;
  v79 = v7;
  while (2)
  {
    v83 = v6;
    v47 = (unint64_t)(v42 - 56);
    v48 = v41 - 56;
    v89 = *((_QWORD *)v41 - 2);
    v91 = *((_QWORD *)v41 - 3);
    v49 = *(v41 - 8);
    v51 = *((_QWORD *)v43 - 7);
    v43 -= 56;
    v50 = v51;
    v85 = *((_QWORD *)v43 + 5);
    v87 = *((_QWORD *)v43 + 4);
    v52 = v43[48];
    if (v49 == 1)
    {
      if ((v52 & 1) == 0)
        goto LABEL_107;
    }
    else if ((v52 & 1) != 0)
    {
      break;
    }
    v70 = v50;
    v71 = *((_QWORD *)v41 - 7);
    v73 = (unint64_t)(v42 - 56);
    v75 = v41;
    v81 = v42;
    v53 = *(_QWORD *)(a5 + 16);
    if (!v53)
    {
LABEL_101:
      v5 = v77;
      v7 = v79;
      v42 = v81;
      v47 = v73;
      v41 = v75;
      if (v71 >= v70)
        break;
      goto LABEL_107;
    }
    v54 = 0;
    v55 = (_BYTE *)(a5 + 48);
    while (1)
    {
      v56 = *((_QWORD *)v55 - 2);
      v57 = *((_QWORD *)v55 - 1);
      if ((*v55 & 1) == 0)
        break;
      if ((v49 & 1) != 0)
      {
        v58 = v56 == v91 && v57 == v89;
        if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_97;
      }
      if (v52)
        goto LABEL_92;
LABEL_75:
      ++v54;
      v55 += 24;
      if (v53 == v54)
        goto LABEL_101;
    }
    if ((v49 & 1) != 0
      || (v56 == v91 ? (v59 = v57 == v89) : (v59 = 0), !v59 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      if ((v52 & 1) != 0)
        goto LABEL_75;
LABEL_92:
      v60 = v56 == v87 && v57 == v85;
      if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_97;
      goto LABEL_75;
    }
LABEL_97:
    if (v54 >= v53)
    {
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    v61 = *((_QWORD *)v55 - 2);
    v62 = *((_QWORD *)v55 - 1);
    if ((*v55 & 1) != 0)
    {
      v5 = v77;
      v7 = v79;
      v42 = v81;
      v47 = v73;
      v41 = v75;
      if ((v49 & 1) == 0)
        break;
LABEL_104:
      if (v61 == v91 && v62 == v89 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_107:
        if (v42 != v83 || v47 >= (unint64_t)v83)
        {
          v63 = *(_OWORD *)v43;
          v64 = *((_OWORD *)v43 + 1);
          v65 = *((_OWORD *)v43 + 2);
          *(_QWORD *)(v47 + 48) = *((_QWORD *)v43 + 6);
          *(_OWORD *)(v47 + 16) = v64;
          *(_OWORD *)(v47 + 32) = v65;
          *(_OWORD *)v47 = v63;
        }
        v94 = v43;
        if (v43 <= v7)
          goto LABEL_116;
LABEL_68:
        v6 = v43;
        v42 = (char *)v47;
        if (v41 <= v5)
          goto LABEL_116;
        continue;
      }
    }
    else
    {
      v5 = v77;
      v7 = v79;
      v42 = v81;
      v47 = v73;
      v41 = v75;
      if ((v49 & 1) == 0)
        goto LABEL_104;
    }
    break;
  }
  v92 = v48;
  if (v42 < v41 || v47 >= (unint64_t)v41)
  {
    v44 = *(_OWORD *)v48;
    v45 = *((_OWORD *)v48 + 1);
    v46 = *((_OWORD *)v48 + 2);
    *(_QWORD *)(v47 + 48) = *((_QWORD *)v48 + 6);
    *(_OWORD *)(v47 + 16) = v45;
    *(_OWORD *)(v47 + 32) = v46;
    *(_OWORD *)v47 = v44;
    v43 = v83;
  }
  else
  {
    v43 = v83;
    if (v42 != v41)
    {
      v66 = *(_OWORD *)v48;
      v67 = *((_OWORD *)v48 + 1);
      v68 = *((_OWORD *)v48 + 2);
      *(_QWORD *)(v47 + 48) = *((_QWORD *)v48 + 6);
      *(_OWORD *)(v47 + 16) = v67;
      *(_OWORD *)(v47 + 32) = v68;
      *(_OWORD *)v47 = v66;
    }
  }
  v41 = v48;
  if (v43 > v7)
    goto LABEL_68;
LABEL_116:
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v94, (const void **)&v93, &v92);
  return 1;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;
  uint64_t v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v30 = result;
  if (a3 == a2)
    return result;
  v5 = *a4;
  v27 = (_BYTE *)(a5 + 48);
  v28 = *a4;
  while (1)
  {
    v26 = a3;
    v6 = a3;
LABEL_6:
    v7 = (uint64_t *)(v5 + 56 * v6);
    v37 = v7[4];
    v36 = v7[5];
    v8 = *((unsigned __int8 *)v7 + 48);
    v9 = v7 - 7;
    v34 = *(v7 - 2);
    v35 = *(v7 - 3);
    v10 = *((unsigned __int8 *)v7 - 8);
    if (v8 == 1)
    {
      if ((v10 & 1) == 0)
        break;
    }
    else if ((v10 & 1) != 0)
    {
      goto LABEL_4;
    }
    v31 = *(v7 - 7);
    v32 = *v7;
    v33 = v6;
    v11 = *(_QWORD *)(a5 + 16);
    if (!v11)
    {
LABEL_38:
      v5 = v28;
      v6 = v33;
      if (v32 < v31)
        break;
      goto LABEL_4;
    }
    v12 = 0;
    v13 = v27;
    while (1)
    {
      v14 = *((_QWORD *)v13 - 2);
      v15 = *((_QWORD *)v13 - 1);
      if ((*v13 & 1) == 0)
        break;
      if ((v8 & 1) != 0)
      {
        if (v14 == v37 && v15 == v36)
          goto LABEL_34;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          goto LABEL_34;
      }
      if (v10)
        goto LABEL_29;
LABEL_12:
      ++v12;
      v13 += 24;
      if (v11 == v12)
        goto LABEL_38;
    }
    if ((v8 & 1) != 0
      || (v14 == v37 ? (v17 = v15 == v36) : (v17 = 0),
          !v17 && (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0)))
    {
      if ((v10 & 1) != 0)
        goto LABEL_12;
LABEL_29:
      if (v14 == v35 && v15 == v34)
        goto LABEL_34;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_34;
      goto LABEL_12;
    }
LABEL_34:
    if (v12 >= v11)
    {
      __break(1u);
      goto LABEL_48;
    }
    result = *((_QWORD *)v13 - 2);
    if ((*v13 & 1) != 0)
    {
      v5 = v28;
      v6 = v33;
      if ((v8 & 1) == 0)
        goto LABEL_4;
    }
    else
    {
      v5 = v28;
      v6 = v33;
      if ((v8 & 1) != 0)
        goto LABEL_4;
    }
    if (result == v37 && *((_QWORD *)v13 - 1) == v36)
      break;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      break;
LABEL_4:
    a3 = v26 + 1;
    if (v26 + 1 == a2)
      return result;
  }
  if (v5)
  {
    --v6;
    v19 = v7[2];
    v20 = *((_BYTE *)v7 + 24);
    v21 = *((_BYTE *)v7 + 48);
    v22 = *(_OWORD *)v7;
    v23 = *((_OWORD *)v7 + 2);
    v24 = *(_OWORD *)(v7 - 5);
    *(_OWORD *)v7 = *(_OWORD *)v9;
    *((_OWORD *)v7 + 1) = v24;
    *((_OWORD *)v7 + 2) = *(_OWORD *)(v7 - 3);
    v7[6] = *(v7 - 1);
    *(_OWORD *)v9 = v22;
    *(v7 - 5) = v19;
    *((_BYTE *)v7 - 32) = v20;
    *(_OWORD *)(v7 - 3) = v23;
    *((_BYTE *)v7 - 8) = v21;
    if (v6 == v30)
      goto LABEL_4;
    goto LABEL_6;
  }
LABEL_48:
  __break(1u);
  return result;
}

{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  char v62;
  char v63;
  __int128 v64;
  char v65;
  char v66;

  v56 = result;
  if (a3 != a2)
  {
    v59 = *a4;
    v6 = (unint64_t *)(*a4 + 8 * a3 - 8);
LABEL_5:
    v7 = *(_QWORD *)(v59 + 8 * a3);
    v8 = v56;
    v57 = v6;
    v58 = a3;
    while ((v7 & 0x8000000000000000) == 0)
    {
      v9 = *(_QWORD *)(a5 + 360);
      v10 = *(_QWORD *)(v9 + 16);
      if (v7 >= v10)
        goto LABEL_41;
      v11 = *v6;
      if (*v6 >= v10)
        goto LABEL_42;
      v12 = v7 << 8;
      v13 = v9 + 32 + (v7 << 8);
      v14 = v11 << 8;
      v15 = *(double *)(v9 + 32 + (v11 << 8));
      if (v15 < *(double *)v13)
        goto LABEL_53;
      if (*(double *)v13 >= v15)
      {
        v60 = v11 << 8;
        if ((*(_BYTE *)(v13 + 16) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v17 = v16;
          v18 = *(_QWORD *)(a5 + 104);
          v19 = *(_BYTE *)(a5 + 112);
          v20 = *(_BYTE *)(a5 + 113);
          LODWORD(v61) = *(_DWORD *)(a5 + 96);
          *((_QWORD *)&v61 + 1) = v18;
          v62 = v19;
          v63 = v20;
          LayoutSubviews.subscript.getter();
          v61 = v64;
          v62 = v65;
          v66 = v17 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          v22 = v21;
          v9 = *(_QWORD *)(a5 + 360);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a5 + 360) = v9;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            v9 = result;
          }
          v14 = v11 << 8;
          if (v7 >= *(_QWORD *)(v9 + 16))
            goto LABEL_46;
          v23 = v9 + v12;
          *(_QWORD *)(v23 + 40) = v22;
          *(_BYTE *)(v23 + 48) = 0;
          *(_QWORD *)(a5 + 360) = v9;
          v10 = *(_QWORD *)(v9 + 16);
        }
        if (v7 >= v10)
          goto LABEL_43;
        if ((*(_BYTE *)(v9 + v12 + 64) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v25 = v24;
          v26 = *(_QWORD *)(a5 + 104);
          v27 = *(_BYTE *)(a5 + 112);
          v28 = *(_BYTE *)(a5 + 113);
          LODWORD(v61) = *(_DWORD *)(a5 + 96);
          *((_QWORD *)&v61 + 1) = v26;
          v62 = v27;
          v63 = v28;
          LayoutSubviews.subscript.getter();
          v61 = v64;
          v62 = v65;
          v66 = v25 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          v30 = v29;
          v31 = *(_QWORD *)(a5 + 360);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a5 + 360) = v31;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v31);
            v31 = result;
          }
          v14 = v11 << 8;
          if (v7 >= *(_QWORD *)(v31 + 16))
            goto LABEL_47;
          v32 = v31 + v12;
          *(_QWORD *)(v32 + 56) = v30;
          *(_BYTE *)(v32 + 64) = 0;
          *(_QWORD *)(a5 + 360) = v31;
        }
        result = _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        v33 = *(_QWORD *)(a5 + 360);
        v34 = *(_QWORD *)(v33 + 16);
        if (v11 >= v34)
          goto LABEL_44;
        v35 = v61;
        if ((*(_BYTE *)(v33 + v14 + 48) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v37 = v36;
          v38 = *(_QWORD *)(a5 + 104);
          v39 = *(_BYTE *)(a5 + 112);
          v40 = *(_BYTE *)(a5 + 113);
          LODWORD(v61) = *(_DWORD *)(a5 + 96);
          *((_QWORD *)&v61 + 1) = v38;
          v62 = v39;
          v63 = v40;
          LayoutSubviews.subscript.getter();
          v61 = v64;
          v62 = v65;
          v66 = v37 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          v42 = v41;
          v33 = *(_QWORD *)(a5 + 360);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a5 + 360) = v33;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
            v33 = result;
          }
          v14 = v11 << 8;
          if (v11 >= *(_QWORD *)(v33 + 16))
            goto LABEL_48;
          v43 = v33 + v60;
          *(_QWORD *)(v43 + 40) = v42;
          *(_BYTE *)(v43 + 48) = 0;
          *(_QWORD *)(a5 + 360) = v33;
          v34 = *(_QWORD *)(v33 + 16);
        }
        if (v11 >= v34)
          goto LABEL_45;
        if ((*(_BYTE *)(v33 + v14 + 64) & 1) != 0)
        {
          ProposedViewSize.init(_:in:by:)();
          v45 = v44;
          v46 = *(_QWORD *)(a5 + 104);
          v47 = *(_BYTE *)(a5 + 112);
          v48 = *(_BYTE *)(a5 + 113);
          LODWORD(v61) = *(_DWORD *)(a5 + 96);
          *((_QWORD *)&v61 + 1) = v46;
          v62 = v47;
          v63 = v48;
          LayoutSubviews.subscript.getter();
          v61 = v64;
          v62 = v65;
          v66 = v45 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          v50 = v49;
          v51 = *(_QWORD *)(a5 + 360);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a5 + 360) = v51;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v51);
            v51 = result;
          }
          if (v11 >= *(_QWORD *)(v51 + 16))
            goto LABEL_49;
          v52 = v51 + v60;
          *(_QWORD *)(v52 + 56) = v50;
          *(_BYTE *)(v52 + 64) = 0;
          *(_QWORD *)(a5 + 360) = v51;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        v53 = v61;
        v61 = v35;
        v64 = v53;
        result = MEMORY[0x18D7574C8](&v61, &v64);
        a3 = v58;
        if ((result & 1) != 0
          || (v61 = v35, v64 = v53, result = MEMORY[0x18D7574C8](&v64, &v61, v58), a3 = v58, (result & 1) == 0)
          && v7 < v11)
        {
LABEL_53:
          if (!v59)
            goto LABEL_50;
          v54 = *v6;
          v7 = v6[1];
          *v6 = v7;
          v6[1] = v54;
          --v6;
          if (a3 != ++v8)
            continue;
        }
      }
      ++a3;
      v6 = v57 + 1;
      if (a3 == a2)
        return result;
      goto LABEL_5;
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  Swift::Int v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  Swift::Int v68;
  Swift::Int v69;
  uint64_t v70;
  int v71;
  _OWORD *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  char v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t result;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  Swift::Int v153;
  Swift::Int v154;
  char *v155;
  char *v156;
  Swift::Int v157;
  char *__dst;
  Swift::Int v159;
  Swift::Int v160;
  Swift::Int v161;
  uint64_t v162;
  _BYTE *v163;
  Swift::Int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL4 v168;
  uint64_t v169;
  uint64_t v170;
  Swift::Int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  Swift::Int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;

  v5 = a1[1];
  swift_bridgeObjectRetain_n();
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_271;
    if (!v5)
      return swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
    if (!v2)
      return swift_bridgeObjectRelease_n();
LABEL_232:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  v153 = v6;
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_280;
  v166 = a2;
  v157 = v5;
  v162 = v2;
  v151 = a1;
  if (v5 < 2)
  {
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v152 = MEMORY[0x1E0DEE9D8];
    if (v5 != 1)
    {
      v12 = (char *)MEMORY[0x1E0DEE9D8];
      v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_235:
      v156 = v12;
      if (v14 >= 2)
      {
        v144 = *v151;
        do
        {
          v145 = v14 - 2;
          if (v14 < 2)
            goto LABEL_265;
          if (!v144)
            goto LABEL_279;
          v146 = *(_QWORD *)&v156[16 * v145 + 32];
          v147 = *(_QWORD *)&v156[16 * v14 + 24];
          v148 = (char *)(v144 + 56 * *(_QWORD *)&v156[16 * v14 + 16]);
          swift_bridgeObjectRetain();
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v144 + 56 * v146), v148, v144 + 56 * v147, __dst, v166);
          if (v162)
            goto LABEL_231;
          swift_bridgeObjectRelease();
          if (v147 < v146)
            goto LABEL_266;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v156 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v156);
          if (v145 >= *((_QWORD *)v156 + 2))
            goto LABEL_267;
          v149 = &v156[16 * v145 + 32];
          *(_QWORD *)v149 = v146;
          *((_QWORD *)v149 + 1) = v147;
          v150 = *((_QWORD *)v156 + 2);
          if (v14 > v150)
            goto LABEL_268;
          memmove(&v156[16 * v14 + 16], &v156[16 * v14 + 32], 16 * (v150 - v14));
          *((_QWORD *)v156 + 2) = v150 - 1;
          v14 = v150 - 1;
        }
        while (v150 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v152 + 16) = 0;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v7 >> 1;
    type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID)();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v9 + 16) = v8;
    v152 = v9;
    __dst = (char *)(v9 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v163 = (_BYTE *)(a2 + 48);
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v13 = v157;
  v165 = *a1;
  while (1)
  {
    v155 = v12;
    v15 = v10 + 1;
    v164 = v10;
    if (v10 + 1 >= v13)
      goto LABEL_117;
    v159 = v10 + 1;
    v16 = v11 + 56 * v15;
    v17 = *(_QWORD *)v16;
    v181 = *(_QWORD *)(v16 + 32);
    v178 = *(_QWORD *)(v16 + 40);
    v18 = *(unsigned __int8 *)(v16 + 48);
    v19 = v11 + 56 * v10;
    v20 = *(_QWORD *)(v19 + 32);
    v21 = *(_QWORD *)(v19 + 40);
    v22 = *(unsigned __int8 *)(v19 + 48);
    if (v18 == 1)
    {
      if ((v22 & 1) == 0)
      {
        v23 = 1;
        a2 = v166;
        v13 = v157;
        goto LABEL_55;
      }
    }
    else if (*(_BYTE *)(v19 + 48))
    {
      v24 = v10 + 2;
      v13 = v157;
      if (v10 + 2 < v157)
        goto LABEL_22;
      v15 = v10 + 2;
      a2 = v166;
LABEL_117:
      if (v15 < v13)
        goto LABEL_131;
      goto LABEL_183;
    }
    v172 = *(_QWORD *)v19;
    v175 = v17;
    v25 = *(_QWORD *)(v166 + 16);
    if (!v25)
    {
LABEL_54:
      v23 = v175 < v172;
      v11 = v165;
      a2 = v166;
      v13 = v157;
      v10 = v164;
LABEL_55:
      v24 = v10 + 2;
      if (v10 + 2 >= v13)
        goto LABEL_108;
      goto LABEL_56;
    }
    v26 = 0;
    v27 = v163;
    while (1)
    {
      v28 = *((_QWORD *)v27 - 2);
      v29 = *((_QWORD *)v27 - 1);
      if ((*v27 & 1) == 0)
        break;
      if ((v18 & 1) != 0)
      {
        v30 = v28 == v181 && v29 == v178;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_47;
      }
      if (v22)
        goto LABEL_42;
LABEL_25:
      ++v26;
      v27 += 24;
      if (v25 == v26)
        goto LABEL_54;
    }
    if ((v18 & 1) != 0
      || (v28 == v181 ? (v31 = v29 == v178) : (v31 = 0), !v31
                                                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      if ((v22 & 1) != 0)
        goto LABEL_25;
LABEL_42:
      v32 = v28 == v20 && v29 == v21;
      if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_47;
      goto LABEL_25;
    }
LABEL_47:
    if (v26 >= v25)
      goto LABEL_275;
    v33 = *((_QWORD *)v27 - 2);
    v34 = *((_QWORD *)v27 - 1);
    v11 = v165;
    a2 = v166;
    v10 = v164;
    if ((*v27 & 1) == 0)
    {
      if ((v18 & 1) != 0)
      {
        v23 = 0;
        v13 = v157;
      }
      else
      {
        if (v33 != v181 || v34 != v178)
          goto LABEL_126;
        v23 = 1;
        v13 = v157;
      }
      goto LABEL_55;
    }
    if ((v18 & 1) == 0)
    {
      v24 = v164 + 2;
      v13 = v157;
      if (v164 + 2 >= v157)
        goto LABEL_130;
LABEL_22:
      v23 = 0;
      goto LABEL_56;
    }
    if (v33 == v181 && v34 == v178)
    {
      v24 = v164 + 2;
      v13 = v157;
      if (v164 + 2 >= v157)
        goto LABEL_109;
      goto LABEL_128;
    }
LABEL_126:
    v24 = v164 + 2;
    v13 = v157;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v164 + 2 >= v157)
        goto LABEL_130;
      goto LABEL_22;
    }
    if (v164 + 2 >= v157)
      goto LABEL_109;
LABEL_128:
    v23 = 1;
LABEL_56:
    v35 = v24;
    v36 = v159;
    v168 = v23;
    while (2)
    {
      v24 = v35;
      v37 = v11 + 56 * v35;
      v38 = *(_QWORD *)v37;
      v182 = *(_QWORD *)(v37 + 32);
      v179 = *(_QWORD *)(v37 + 40);
      v39 = *(unsigned __int8 *)(v37 + 48);
      v40 = v11 + 56 * v36;
      v41 = *(_QWORD *)(v40 + 32);
      v42 = *(_QWORD *)(v40 + 40);
      v43 = *(unsigned __int8 *)(v40 + 48);
      if (v39 == 1)
      {
        if ((v43 & 1) == 0)
        {
          a2 = v166;
          v13 = v157;
          if (v23)
            goto LABEL_58;
          goto LABEL_130;
        }
      }
      else if (*(_BYTE *)(v40 + 48))
      {
        a2 = v166;
        v13 = v157;
        if (!v23)
          goto LABEL_58;
        goto LABEL_109;
      }
      v170 = *(_QWORD *)v40;
      v173 = v38;
      v176 = v24;
      v44 = *(_QWORD *)(v166 + 16);
      if (!v44)
      {
LABEL_57:
        v23 = v168;
        v11 = v165;
        a2 = v166;
        v13 = v157;
        v10 = v164;
        v24 = v176;
        if (((v168 ^ (v173 < v170)) & 1) == 0)
          goto LABEL_58;
LABEL_108:
        v15 = v24;
        if (v23)
        {
LABEL_109:
          if (v24 >= v10)
          {
            if (v10 < v24)
            {
              v54 = 56 * v24;
              v55 = v24;
              v56 = v10;
              v57 = 56 * v10;
              while (1)
              {
                if (v56 != --v55)
                {
                  if (!v11)
                    goto LABEL_278;
                  v58 = v11 + v57;
                  v59 = *(_QWORD *)(v11 + v57 + 16);
                  v60 = v11 + v54;
                  v61 = *(_BYTE *)(v11 + v57 + 24);
                  v62 = *(_BYTE *)(v11 + v57 + 48);
                  v63 = *(_OWORD *)(v11 + v57);
                  v64 = *(_OWORD *)(v11 + v57 + 32);
                  v65 = *(_OWORD *)(v11 + v54 - 40);
                  v66 = *(_OWORD *)(v11 + v54 - 24);
                  v67 = *(_OWORD *)(v11 + v54 - 56);
                  *(_QWORD *)(v58 + 48) = *(_QWORD *)(v11 + v54 - 8);
                  *(_OWORD *)(v58 + 16) = v65;
                  *(_OWORD *)(v58 + 32) = v66;
                  *(_OWORD *)v58 = v67;
                  *(_OWORD *)(v60 - 56) = v63;
                  *(_QWORD *)(v60 - 40) = v59;
                  *(_BYTE *)(v60 - 32) = v61;
                  *(_OWORD *)(v60 - 24) = v64;
                  *(_BYTE *)(v60 - 8) = v62;
                }
                ++v56;
                v54 -= 56;
                v57 += 56;
                if (v56 >= v55)
                  goto LABEL_130;
              }
            }
            goto LABEL_130;
          }
          goto LABEL_274;
        }
        goto LABEL_117;
      }
      v45 = 0;
      v46 = v163;
      while (1)
      {
        v47 = *((_QWORD *)v46 - 2);
        v48 = *((_QWORD *)v46 - 1);
        if ((*v46 & 1) == 0)
          break;
        if ((v39 & 1) != 0)
        {
          v49 = v47 == v182 && v48 == v179;
          if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_90;
        }
        if (v43)
          goto LABEL_85;
LABEL_68:
        ++v45;
        v46 += 24;
        if (v44 == v45)
          goto LABEL_57;
      }
      if ((v39 & 1) != 0
        || (v47 == v182 ? (v50 = v48 == v179) : (v50 = 0),
            !v50 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
      {
        if ((v43 & 1) != 0)
          goto LABEL_68;
LABEL_85:
        v51 = v47 == v41 && v48 == v42;
        if (v51 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_90;
        goto LABEL_68;
      }
LABEL_90:
      if (v45 >= v44)
        goto LABEL_269;
      v52 = *((_QWORD *)v46 - 2);
      v53 = *((_QWORD *)v46 - 1);
      v11 = v165;
      if ((*v46 & 1) != 0)
      {
        a2 = v166;
        v10 = v164;
        v24 = v176;
        if ((v39 & 1) == 0)
          goto LABEL_97;
        if (v52 == v182 && v53 == v179)
        {
          v13 = v157;
          goto LABEL_105;
        }
LABEL_104:
        v13 = v157;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_98;
LABEL_105:
        v23 = v168;
        if (!v168)
          goto LABEL_130;
LABEL_58:
        v35 = v24 + 1;
        v36 = v24;
        if (v24 + 1 >= v13)
        {
          ++v24;
          goto LABEL_108;
        }
        continue;
      }
      break;
    }
    a2 = v166;
    v10 = v164;
    v24 = v176;
    if (v39)
    {
LABEL_97:
      v13 = v157;
LABEL_98:
      v23 = v168;
      if (!v168)
        goto LABEL_58;
      goto LABEL_109;
    }
    if (v52 != v182 || v53 != v179)
      goto LABEL_104;
    v13 = v157;
    v23 = v168;
    if (v168)
      goto LABEL_58;
LABEL_130:
    v15 = v24;
    if (v24 >= v13)
      goto LABEL_183;
LABEL_131:
    if (__OFSUB__(v15, v10))
      goto LABEL_270;
    if (v15 - v10 < v153)
      break;
LABEL_183:
    if (v15 < v10)
      goto LABEL_264;
    v161 = v15;
    v12 = v155;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v155 + 2) + 1, 1, v155);
    v91 = *((_QWORD *)v12 + 2);
    v90 = *((_QWORD *)v12 + 3);
    v14 = v91 + 1;
    if (v91 >= v90 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v14;
    v92 = &v12[16 * v91 + 32];
    *(_QWORD *)v92 = v10;
    *((_QWORD *)v92 + 1) = v161;
    if (v91)
    {
      v93 = v12 + 32;
      while (1)
      {
        v94 = v14 - 1;
        if (v14 >= 4)
        {
          v99 = &v93[16 * v14];
          v100 = *((_QWORD *)v99 - 8);
          v101 = *((_QWORD *)v99 - 7);
          v105 = __OFSUB__(v101, v100);
          v102 = v101 - v100;
          if (v105)
            goto LABEL_253;
          v104 = *((_QWORD *)v99 - 6);
          v103 = *((_QWORD *)v99 - 5);
          v105 = __OFSUB__(v103, v104);
          v97 = v103 - v104;
          v98 = v105;
          if (v105)
            goto LABEL_254;
          v106 = v14 - 2;
          v107 = &v93[16 * v14 - 32];
          v109 = *(_QWORD *)v107;
          v108 = *((_QWORD *)v107 + 1);
          v105 = __OFSUB__(v108, v109);
          v110 = v108 - v109;
          if (v105)
            goto LABEL_256;
          v105 = __OFADD__(v97, v110);
          v111 = v97 + v110;
          if (v105)
            goto LABEL_259;
          if (v111 >= v102)
          {
            v129 = &v93[16 * v94];
            v131 = *(_QWORD *)v129;
            v130 = *((_QWORD *)v129 + 1);
            v105 = __OFSUB__(v130, v131);
            v132 = v130 - v131;
            if (v105)
              goto LABEL_263;
            v122 = v97 < v132;
            goto LABEL_221;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v123 = *((_QWORD *)v12 + 4);
            v124 = *((_QWORD *)v12 + 5);
            v105 = __OFSUB__(v124, v123);
            v116 = v124 - v123;
            v117 = v105;
            goto LABEL_215;
          }
          v96 = *((_QWORD *)v12 + 4);
          v95 = *((_QWORD *)v12 + 5);
          v105 = __OFSUB__(v95, v96);
          v97 = v95 - v96;
          v98 = v105;
        }
        if ((v98 & 1) != 0)
          goto LABEL_255;
        v106 = v14 - 2;
        v112 = &v93[16 * v14 - 32];
        v114 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        v115 = __OFSUB__(v113, v114);
        v116 = v113 - v114;
        v117 = v115;
        if (v115)
          goto LABEL_258;
        v118 = &v93[16 * v94];
        v120 = *(_QWORD *)v118;
        v119 = *((_QWORD *)v118 + 1);
        v105 = __OFSUB__(v119, v120);
        v121 = v119 - v120;
        if (v105)
          goto LABEL_261;
        if (__OFADD__(v116, v121))
          goto LABEL_262;
        if (v116 + v121 >= v97)
        {
          v122 = v97 < v121;
LABEL_221:
          if (v122)
            v94 = v106;
          goto LABEL_223;
        }
LABEL_215:
        if ((v117 & 1) != 0)
          goto LABEL_257;
        v125 = &v93[16 * v94];
        v127 = *(_QWORD *)v125;
        v126 = *((_QWORD *)v125 + 1);
        v105 = __OFSUB__(v126, v127);
        v128 = v126 - v127;
        if (v105)
          goto LABEL_260;
        if (v128 < v116)
          goto LABEL_15;
LABEL_223:
        v133 = v94 - 1;
        if (v94 - 1 >= v14)
          goto LABEL_249;
        if (!v11)
          goto LABEL_277;
        v134 = &v93[16 * v133];
        v135 = *(_QWORD *)v134;
        v136 = v94;
        v137 = &v93[16 * v94];
        v138 = *((_QWORD *)v137 + 1);
        v139 = (char *)(v11 + 56 * *(_QWORD *)v134);
        v140 = v11;
        v141 = (char *)(v11 + 56 * *(_QWORD *)v137);
        v184 = v140 + 56 * v138;
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v139, v141, v184, __dst, v166);
        if (v162)
        {
LABEL_231:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v152 + 16) = 0;
          goto LABEL_232;
        }
        swift_bridgeObjectRelease();
        if (v138 < v135)
          goto LABEL_250;
        if (v136 > *((_QWORD *)v12 + 2))
          goto LABEL_251;
        *(_QWORD *)v134 = v135;
        v93 = v12 + 32;
        *(_QWORD *)&v12[16 * v133 + 40] = v138;
        v142 = *((_QWORD *)v12 + 2);
        if (v136 >= v142)
          goto LABEL_252;
        v14 = v142 - 1;
        memmove(v137, v137 + 16, 16 * (v142 - 1 - v136));
        *((_QWORD *)v12 + 2) = v142 - 1;
        v122 = v142 > 2;
        v11 = v165;
        if (!v122)
          goto LABEL_15;
      }
    }
    v14 = 1;
LABEL_15:
    v13 = v157;
    v10 = v161;
    a2 = v166;
    if (v161 >= v157)
      goto LABEL_235;
  }
  v68 = v10 + v153;
  if (__OFADD__(v10, v153))
    goto LABEL_272;
  if (v68 >= v13)
    v68 = v13;
  if (v68 >= v10)
  {
    v154 = v68;
    if (v15 == v68)
      goto LABEL_183;
LABEL_140:
    v160 = v15;
    v69 = v15;
    while (1)
    {
      v70 = v11 + 56 * v69;
      v183 = *(_QWORD *)(v70 + 32);
      v71 = *(unsigned __int8 *)(v70 + 48);
      v72 = (_OWORD *)(v70 - 56);
      v177 = *(_QWORD *)(v70 - 24);
      v180 = *(_QWORD *)(v70 + 40);
      v174 = *(_QWORD *)(v70 - 16);
      v73 = *(unsigned __int8 *)(v70 - 8);
      if (v71 == 1)
      {
        if ((v73 & 1) == 0)
          goto LABEL_179;
      }
      else if ((v73 & 1) != 0)
      {
        goto LABEL_139;
      }
      v169 = *(_QWORD *)v70;
      v171 = v69;
      v74 = *(_QWORD *)(a2 + 16);
      v167 = *(_QWORD *)(v70 - 56);
      if (!v74)
      {
LABEL_173:
        v69 = v171;
        a2 = v166;
        v10 = v164;
        v11 = v165;
        if (v169 < v167)
          goto LABEL_179;
LABEL_139:
        v15 = v160 + 1;
        if (v160 + 1 == v154)
        {
          v15 = v154;
          goto LABEL_183;
        }
        goto LABEL_140;
      }
      v75 = 0;
      v76 = v163;
      while (1)
      {
        v77 = *((_QWORD *)v76 - 2);
        v78 = *((_QWORD *)v76 - 1);
        if ((*v76 & 1) == 0)
          break;
        if ((v71 & 1) != 0)
        {
          v79 = v77 == v183 && v78 == v180;
          if (v79 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_169;
        }
        if (v73)
          goto LABEL_164;
LABEL_147:
        ++v75;
        v76 += 24;
        if (v74 == v75)
          goto LABEL_173;
      }
      if ((v71 & 1) != 0)
        break;
      v80 = v77 == v183 && v78 == v180;
      if (!v80 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
LABEL_169:
      if (v75 >= v74)
      {
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
LABEL_257:
        __break(1u);
LABEL_258:
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
        goto LABEL_273;
      }
      v82 = *((_QWORD *)v76 - 2);
      v83 = *((_QWORD *)v76 - 1);
      if ((*v76 & 1) != 0)
      {
        v11 = v165;
        a2 = v166;
        v10 = v164;
        v69 = v171;
        if ((v71 & 1) == 0)
          goto LABEL_139;
      }
      else
      {
        v11 = v165;
        a2 = v166;
        v10 = v164;
        v69 = v171;
        if ((v71 & 1) != 0)
          goto LABEL_139;
      }
      if ((v82 != v183 || v83 != v180) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_139;
LABEL_179:
      if (!v11)
        goto LABEL_276;
      --v69;
      v84 = *(_QWORD *)(v70 + 16);
      v85 = *(_BYTE *)(v70 + 24);
      v86 = *(_BYTE *)(v70 + 48);
      v87 = *(_OWORD *)v70;
      v88 = *(_OWORD *)(v70 + 32);
      v89 = *(_OWORD *)(v70 - 40);
      *(_OWORD *)v70 = *v72;
      *(_OWORD *)(v70 + 16) = v89;
      *(_OWORD *)(v70 + 32) = *(_OWORD *)(v70 - 24);
      *(_QWORD *)(v70 + 48) = *(_QWORD *)(v70 - 8);
      *v72 = v87;
      *(_QWORD *)(v70 - 40) = v84;
      *(_BYTE *)(v70 - 32) = v85;
      *(_OWORD *)(v70 - 24) = v88;
      *(_BYTE *)(v70 - 8) = v86;
      if (v69 == v10)
        goto LABEL_139;
    }
    if ((v73 & 1) != 0)
      goto LABEL_147;
LABEL_164:
    v81 = v77 == v177 && v78 == v174;
    if (v81 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_169;
    goto LABEL_147;
  }
LABEL_273:
  __break(1u);
LABEL_274:
  __break(1u);
LABEL_275:
  __break(1u);
LABEL_276:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_277:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_278:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_279:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_280:
  swift_bridgeObjectRelease_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char *v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  int v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  Swift::Int v51;
  double v52;
  char v53;
  uint64_t v54;
  double *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  Swift::Int v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  Swift::Int v131;
  uint64_t v132;
  double *v133;
  uint64_t v134;

  v5 = swift_allocObject();
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(_BYTE *)(v5 + 80) = *(_BYTE *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  v134 = a2;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 32) = v7;
  v8 = a1[1];
  v9 = _minimumMergeRunLength(_:)(v8);
  if (v9 >= v8)
  {
    if (v8 < 0)
      goto LABEL_153;
    if (v8)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v8, 1, a1, v134);
    return swift_release();
  }
  if (v8 >= 0)
    v10 = v8;
  else
    v10 = v8 + 1;
  if (v8 < -1)
    goto LABEL_161;
  v130 = v9;
  v127 = a1;
  if (v8 < 2)
  {
    v14 = (char *)MEMORY[0x1E0DEE9D8];
    v133 = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    v129 = MEMORY[0x1E0DEE9D8];
    if (v8 != 1)
    {
      v17 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_120:
      if (v17 >= 2)
      {
        v118 = *v127;
        do
        {
          v119 = v17 - 2;
          if (v17 < 2)
            goto LABEL_148;
          if (!v118)
            goto LABEL_160;
          v120 = v14;
          v121 = v14 + 32;
          v122 = *(_QWORD *)&v14[16 * v119 + 32];
          v123 = *(_QWORD *)&v14[16 * v17 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v118 + 40 * v122), (double *)(v118 + 40 * *(_QWORD *)&v121[16 * v17 - 16]), v118 + 40 * v123, v133, v134);
          if (v2)
            break;
          if (v123 < v122)
            goto LABEL_149;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v120 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v120);
          if (v119 >= *((_QWORD *)v120 + 2))
            goto LABEL_150;
          v124 = &v120[16 * v119 + 32];
          *(_QWORD *)v124 = v122;
          *((_QWORD *)v124 + 1) = v123;
          v125 = *((_QWORD *)v120 + 2);
          if (v17 > v125)
            goto LABEL_151;
          memmove(&v120[16 * v17 + 16], &v120[16 * v17 + 32], 16 * (v125 - v17));
          v14 = v120;
          *((_QWORD *)v120 + 2) = v125 - 1;
          v17 = v125 - 1;
        }
        while (v125 > 2);
      }
LABEL_131:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v129 + 16) = 0;
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v11 = v10 >> 1;
    v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v12 + 16) = v11;
    v129 = v12;
    v133 = (double *)(v12 + 32);
  }
  v15 = 0;
  v16 = *a1;
  v128 = *a1 + 112;
  v126 = *a1 - 16;
  v14 = (char *)MEMORY[0x1E0DEE9D8];
  v131 = v8;
  v132 = *a1;
LABEL_16:
  v18 = v15++;
  if (v15 >= v8)
    goto LABEL_48;
  v19 = (double *)(v16 + 40 * v15);
  v21 = v19[1];
  v20 = v19[2];
  v22 = v19[3];
  v23 = v19[4];
  v24 = (double *)(v16 + 40 * v18);
  v25 = *(double *)(v134 + 56);
  v26 = vabdd_f64((v22 + v23) * 0.5, v25);
  v27 = vabdd_f64((v24[3] + v24[4]) * 0.5, v25);
  if ((*(_BYTE *)(v134 + 64) & 1) != 0)
  {
    v28 = v24[1];
    v29 = v21 < v28;
    if (v21 != v28)
      goto LABEL_23;
  }
  else
  {
    v30 = v24[2];
    if (v20 != v30)
    {
      v29 = v30 < v20;
      goto LABEL_23;
    }
  }
  v29 = v26 < v27;
LABEL_23:
  v31 = v29;
  v15 = v18 + 2;
  if (v18 + 2 < v8)
  {
    v32 = (double *)(v128 + 40 * v18);
    while (1)
    {
      v33 = *(v32 - 3);
      v34 = *(v32 - 2);
      v35 = v22 + v23;
      v22 = *(v32 - 1);
      v23 = *v32;
      v36 = vabdd_f64((v22 + *v32) * 0.5, v25);
      v37 = vabdd_f64(v35 * 0.5, v25);
      if ((*(_BYTE *)(v134 + 64) & 1) != 0)
      {
        v38 = v33 < v21;
        if (v33 != v21)
          goto LABEL_34;
      }
      else if (v34 != v20)
      {
        v38 = v20 < v34;
        goto LABEL_34;
      }
      v38 = v36 < v37;
LABEL_34:
      v39 = v38;
      if (v31 != v39)
        break;
      ++v15;
      v32 += 5;
      v20 = v34;
      v21 = v33;
      if (v8 == v15)
      {
        v15 = v8;
        break;
      }
    }
  }
  if (v31)
  {
    if (v15 < v18)
      goto LABEL_154;
    if (v18 < v15)
    {
      v40 = 40 * v15;
      v41 = 40 * v18;
      v42 = v15;
      v43 = v18;
      do
      {
        if (v43 != --v42)
        {
          if (!v16)
            goto LABEL_159;
          v44 = v16 + v41;
          v45 = *(_QWORD *)(v16 + v41);
          v46 = v16 + v40;
          v47 = *(_OWORD *)(v16 + v41 + 8);
          v48 = *(_OWORD *)(v16 + v41 + 24);
          v49 = *(_QWORD *)(v16 + v40 - 8);
          v50 = *(_OWORD *)(v16 + v40 - 24);
          *(_OWORD *)v44 = *(_OWORD *)(v16 + v40 - 40);
          *(_OWORD *)(v44 + 16) = v50;
          *(_QWORD *)(v44 + 32) = v49;
          *(_QWORD *)(v46 - 40) = v45;
          *(_OWORD *)(v46 - 32) = v47;
          *(_OWORD *)(v46 - 16) = v48;
        }
        ++v43;
        v40 -= 40;
        v41 += 40;
      }
      while (v43 < v42);
    }
  }
LABEL_48:
  if (v15 >= v8)
    goto LABEL_71;
  if (__OFSUB__(v15, v18))
    goto LABEL_152;
  if (v15 - v18 >= v130)
    goto LABEL_71;
  v51 = v18 + v130;
  if (__OFADD__(v18, v130))
    goto LABEL_155;
  if (v51 >= v8)
    v51 = v8;
  if (v51 >= v18)
  {
    if (v15 == v51)
      goto LABEL_71;
    v52 = *(double *)(v134 + 56);
    v53 = *(_BYTE *)(v134 + 64);
    v54 = v126 + 40 * v15;
LABEL_58:
    v55 = (double *)(v16 + 40 * v15);
    v56 = v55[1];
    v57 = v55[2];
    v58 = v55[3];
    v59 = v55[4];
    v60 = vabdd_f64((v58 + v59) * 0.5, v52);
    v61 = v54;
    v62 = v18;
    while (1)
    {
      v63 = vabdd_f64((*(double *)v61 + *(double *)(v61 + 8)) * 0.5, v52);
      if ((v53 & 1) == 0)
        break;
      v64 = *(double *)(v61 - 16);
      if (v56 == v64)
        goto LABEL_64;
      if (v56 >= v64)
        goto LABEL_57;
LABEL_67:
      if (!v16)
        goto LABEL_157;
      v66 = *(_QWORD *)(v61 + 16);
      v67 = *(_OWORD *)(v61 - 8);
      *(_OWORD *)(v61 + 16) = *(_OWORD *)(v61 - 24);
      *(_OWORD *)(v61 + 32) = v67;
      *(_QWORD *)(v61 + 48) = *(_QWORD *)(v61 + 8);
      *(_QWORD *)(v61 - 24) = v66;
      *(double *)(v61 - 16) = v56;
      *(double *)(v61 - 8) = v57;
      *(double *)v61 = v58;
      *(double *)(v61 + 8) = v59;
      v61 -= 40;
      if (v15 == ++v62)
      {
LABEL_57:
        ++v15;
        v54 += 40;
        if (v15 != v51)
          goto LABEL_58;
        v15 = v51;
LABEL_71:
        if (v15 < v18)
          goto LABEL_147;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
        v69 = *((_QWORD *)v14 + 2);
        v68 = *((_QWORD *)v14 + 3);
        v17 = v69 + 1;
        v16 = v132;
        if (v69 >= v68 >> 1)
        {
          v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v14);
          v16 = v132;
          v14 = v117;
        }
        *((_QWORD *)v14 + 2) = v17;
        v70 = v14 + 32;
        v71 = &v14[16 * v69 + 32];
        *(_QWORD *)v71 = v18;
        *((_QWORD *)v71 + 1) = v15;
        if (v69)
        {
          while (2)
          {
            v72 = v17 - 1;
            if (v17 >= 4)
            {
              v77 = &v70[16 * v17];
              v78 = *((_QWORD *)v77 - 8);
              v79 = *((_QWORD *)v77 - 7);
              v83 = __OFSUB__(v79, v78);
              v80 = v79 - v78;
              if (v83)
                goto LABEL_136;
              v82 = *((_QWORD *)v77 - 6);
              v81 = *((_QWORD *)v77 - 5);
              v83 = __OFSUB__(v81, v82);
              v75 = v81 - v82;
              v76 = v83;
              if (v83)
                goto LABEL_137;
              v84 = v17 - 2;
              v85 = &v70[16 * v17 - 32];
              v87 = *(_QWORD *)v85;
              v86 = *((_QWORD *)v85 + 1);
              v83 = __OFSUB__(v86, v87);
              v88 = v86 - v87;
              if (v83)
                goto LABEL_139;
              v83 = __OFADD__(v75, v88);
              v89 = v75 + v88;
              if (v83)
                goto LABEL_142;
              if (v89 >= v80)
              {
                v107 = &v70[16 * v72];
                v109 = *(_QWORD *)v107;
                v108 = *((_QWORD *)v107 + 1);
                v83 = __OFSUB__(v108, v109);
                v110 = v108 - v109;
                if (v83)
                  goto LABEL_146;
                v100 = v75 < v110;
              }
              else
              {
LABEL_90:
                if ((v76 & 1) != 0)
                  goto LABEL_138;
                v84 = v17 - 2;
                v90 = &v70[16 * v17 - 32];
                v92 = *(_QWORD *)v90;
                v91 = *((_QWORD *)v90 + 1);
                v93 = __OFSUB__(v91, v92);
                v94 = v91 - v92;
                v95 = v93;
                if (v93)
                  goto LABEL_141;
                v96 = &v70[16 * v72];
                v98 = *(_QWORD *)v96;
                v97 = *((_QWORD *)v96 + 1);
                v83 = __OFSUB__(v97, v98);
                v99 = v97 - v98;
                if (v83)
                  goto LABEL_144;
                if (__OFADD__(v94, v99))
                  goto LABEL_145;
                if (v94 + v99 < v75)
                  goto LABEL_102;
                v100 = v75 < v99;
              }
              if (v100)
                v72 = v84;
            }
            else
            {
              if (v17 == 3)
              {
                v74 = *((_QWORD *)v14 + 4);
                v73 = *((_QWORD *)v14 + 5);
                v83 = __OFSUB__(v73, v74);
                v75 = v73 - v74;
                v76 = v83;
                goto LABEL_90;
              }
              v101 = *((_QWORD *)v14 + 4);
              v102 = *((_QWORD *)v14 + 5);
              v83 = __OFSUB__(v102, v101);
              v94 = v102 - v101;
              v95 = v83;
LABEL_102:
              if ((v95 & 1) != 0)
                goto LABEL_140;
              v103 = &v70[16 * v72];
              v105 = *(_QWORD *)v103;
              v104 = *((_QWORD *)v103 + 1);
              v83 = __OFSUB__(v104, v105);
              v106 = v104 - v105;
              if (v83)
                goto LABEL_143;
              if (v106 < v94)
                goto LABEL_15;
            }
            v111 = v72 - 1;
            if (v72 - 1 >= v17)
            {
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
              goto LABEL_156;
            }
            if (!v16)
              goto LABEL_158;
            v112 = &v70[16 * v111];
            v113 = *(_QWORD *)v112;
            v114 = &v70[16 * v72];
            v115 = *((_QWORD *)v114 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v16 + 40 * *(_QWORD *)v112), (double *)(v16 + 40 * *(_QWORD *)v114), v16 + 40 * v115, v133, v134);
            if (v2)
              goto LABEL_131;
            if (v115 < v113)
              goto LABEL_133;
            if (v72 > *((_QWORD *)v14 + 2))
              goto LABEL_134;
            *(_QWORD *)v112 = v113;
            *(_QWORD *)&v70[16 * v111 + 8] = v115;
            v116 = *((_QWORD *)v14 + 2);
            if (v72 >= v116)
              goto LABEL_135;
            v17 = v116 - 1;
            memmove(&v70[16 * v72], v114 + 16, 16 * (v116 - 1 - v72));
            *((_QWORD *)v14 + 2) = v116 - 1;
            v16 = v132;
            if (v116 <= 2)
              goto LABEL_15;
            continue;
          }
        }
        v17 = 1;
LABEL_15:
        v8 = v131;
        if (v15 >= v131)
          goto LABEL_120;
        goto LABEL_16;
      }
    }
    v65 = *(double *)(v61 - 8);
    if (v57 != v65)
    {
      if (v65 >= v57)
        goto LABEL_57;
      goto LABEL_67;
    }
LABEL_64:
    if (v60 >= v63)
      goto LABEL_57;
    goto LABEL_67;
  }
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  swift_release();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:));
}

{
  return specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:));
}

uint64_t specialized MutableCollection<>.sort(by:)(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  void (*v18)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = a3;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v5 = 0;
  v6 = (_BYTE *)(swift_bridgeObjectRetain() + 48);
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = a2;
  do
  {
    v9 = *v6;
    v10 = *((_QWORD *)v6 - 1);
    v21[0] = *((_QWORD *)v6 - 2);
    v21[1] = v10;
    v22 = v9;
    outlined copy of TabCustomizationID.Base();
    a2(&v23, v5, v21);
    outlined consume of TabCustomizationID.Base();
    v11 = v25;
    if (v25 != 255)
    {
      v12 = v3;
      v13 = v24;
      v19 = v23;
      v20 = v26;
      v14 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v16 = v7[2];
      v15 = v7[3];
      if (v16 >= v15 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v7);
      v7[2] = v16 + 1;
      v8 = &v7[7 * v16];
      *((_OWORD *)v8 + 2) = v19;
      v8[6] = v13;
      *((_BYTE *)v8 + 56) = v11 & 1;
      *((_OWORD *)v8 + 4) = v20;
      *((_BYTE *)v8 + 80) = v14 & 1;
      a2 = v18;
      v3 = v12;
    }
    ++v5;
    v6 += 24;
  }
  while (v3 != v5);
  swift_bridgeObjectRelease();
  return v7;
}

id specialized static AdaptiveTabViewStrategy.host(for:child:searchAdjustment:)(uint64_t a1, uint64_t a2, char a3)
{
  objc_class *v4;
  objc_class *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _BYTE v11[112];
  _QWORD v12[13];
  __int16 v13;
  _BYTE v14[112];

  outlined init with copy of TabItem(a2, (uint64_t)v14);
  v14[104] = 0;
  v14[105] = a3;
  outlined init with copy of TabItem.RootView((uint64_t)v14, (uint64_t)v12);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v5 = v4;
  v6 = objc_allocWithZone(v4);
  v7 = specialized UIHostingController.init(rootView:)((uint64_t)v12);
  v12[0] = v7;
  v13 = 1;
  outlined init with copy of TabItem.RootView((uint64_t)v12, (uint64_t)v11);
  v8 = objc_allocWithZone(v5);
  v7;
  v9 = specialized UIHostingController.init(rootView:)((uint64_t)v11);
  outlined destroy of TabItem.RootView((uint64_t)v12);
  outlined destroy of TabItem.RootView((uint64_t)v14);
  return v9;
}

id specialized UIHostingController.updateCustomizationProperties(on:using:customization:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  _BOOL8 v6;
  int v7;
  int v8;
  id result;
  unsigned __int8 v10;

  v5 = (id)TabItem.tabPlacement(customization:)(a3);
  if (v5 != objc_msgSend(a1, sel__tabBarPlacement))
    objc_msgSend(a1, sel__setTabBarPlacement_, v5);
  v6 = TabItem.visibleInSidebar(customization:)(a3);
  if (v6 != objc_msgSend(a1, sel__isVisible))
    objc_msgSend(a1, sel__setVisible_, v6);
  TabItem.resolvedSidebarCustomizationBehavior.getter((char *)&v10);
  v7 = v10;
  v8 = v10 == 0;
  result = objc_msgSend(a1, sel__allowsHiding);
  if (v8 != (_DWORD)result)
    return objc_msgSend(a1, sel__setAllowsHiding_, v7 == 0);
  return result;
}

id specialized UIHostingController.createBridgedTab(using:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  _QWORD v59[6];
  _QWORD v60[3];
  unsigned __int8 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int16 v66;
  char v67;
  uint64_t v68;
  __int16 v69;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v56 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v56 - v12;
  v14 = *(_QWORD *)(a1 + 88);
  v60[0] = v14;
  if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) != 0)
  {
    static Log.tabView.getter();
    v15 = type metadata accessor for Logger();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    }
    else
    {
      outlined init with copy of TabItem(a1, (uint64_t)v60);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v64 = v58;
        *(_DWORD *)v23 = 136315138;
        v57 = v23 + 4;
        v24 = TabItem.platformIdentifier.getter();
        v59[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TabItem((uint64_t)v60);
        _os_log_impl(&dword_186E48000, v21, v22, "Creating UITabAction id %s", v23, 0xCu);
        v26 = v58;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v26, -1, -1);
        MEMORY[0x18D760108](v23, -1, -1);

      }
      else
      {

        outlined destroy of TabItem((uint64_t)v60);
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    }
    v64 = *(_QWORD *)(a1 + 88);
    v35 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v35 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v63, (uint64_t)&v64, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
    outlined destroy of PlatformItem((uint64_t)v60);
    v36 = TabItem.platformIdentifier.getter();
    v38 = v37;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v64, (uint64_t)v60, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
    v39 = swift_allocObject();
    outlined init with take of Image.Resolved?((uint64_t)v60, v39 + 16, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = partial apply for closure #1 in UIHostingController.createBridgedTab(using:);
    *(_QWORD *)(v40 + 24) = v39;
    v41 = objc_allocWithZone(MEMORY[0x1E0DC4438]);
    swift_retain();
    v42 = (void *)MEMORY[0x18D75CC88](v36, v38);
    v43 = (void *)MEMORY[0x18D75CC88](0, 0xE000000000000000);
    v59[4] = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
    v59[5] = v40;
    v59[0] = MEMORY[0x1E0C809B0];
    v59[1] = 1107296256;
    v59[2] = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
    v59[3] = &block_descriptor_24;
    v44 = _Block_copy(v59);
    v45 = objc_msgSend(v41, sel_initWithIdentifier_title_image_handler_, v42, v43, 0, v44);

    _Block_release(v44);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v64, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return v45;
  }
  v59[0] = v14;
  v17 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v17 != -1)
    swift_once();
  LOWORD(v64) = static TabOptions.TraitKey.defaultValue;
  v65 = *(_OWORD *)&qword_1EDF00118;
  v66 = word_1EDF00128;
  v67 = byte_1EDF0012A;
  v68 = qword_1EDF00130;
  v69 = word_1EDF00138;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  v18 = v62;
  outlined consume of TabCustomizationID?(v60[1], v60[2], v61);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    static Log.tabView.getter();
    v19 = type metadata accessor for Logger();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1, v19) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    }
    else
    {
      outlined init with copy of TabItem(a1, (uint64_t)v60);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v64 = v58;
        *(_DWORD *)v31 = 136315138;
        v57 = v31 + 4;
        v32 = TabItem.platformIdentifier.getter();
        v59[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TabItem((uint64_t)v60);
        _os_log_impl(&dword_186E48000, v29, v30, "Creating UITabElement id %s", v31, 0xCu);
        v34 = v58;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v34, -1, -1);
        MEMORY[0x18D760108](v31, -1, -1);

      }
      else
      {

        outlined destroy of TabItem((uint64_t)v60);
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v19);
    }
    v50 = TabItem.platformIdentifier.getter();
    v52 = v51;
    v53 = objc_allocWithZone(MEMORY[0x1E0DC4448]);
    v54 = (void *)MEMORY[0x18D75CC88](v50, v52);
    v55 = (void *)MEMORY[0x18D75CC88](0, 0xE000000000000000);
    v45 = objc_msgSend(v53, sel_initWithIdentifier_title_image_, v54, v55, 0);
    swift_bridgeObjectRelease();

    return v45;
  }
  static Log.tabView.getter();
  v27 = type metadata accessor for Logger();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v9, 1, v27) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      MEMORY[0x18D760108](v48, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v27);
  }
  return objc_msgSend((id)objc_opt_self(), sel__searchElement);
}

id specialized UIHostingController.createBridgedTab<A>(using:coordinator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  _QWORD v25[2];
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[33];
  _OWORD v32[17];
  _BYTE v33[264];
  char v34;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TabEntry(a1, (uint64_t)v33);
  if ((v34 & 1) != 0)
  {
    memcpy(v32, v33, 0x108uLL);
    static Log.tabView.getter();
    v8 = type metadata accessor for Logger();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    }
    else
    {
      outlined init with copy of TabItemGroup((uint64_t)v32, (uint64_t)v31);
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc();
        v14 = swift_slowAlloc();
        v27 = v14;
        v28 = a2;
        v26 = v13;
        *(_DWORD *)v13 = 136315138;
        v30 = v14;
        v16 = v31[3];
        v15 = v31[4];
        v25[1] = v13 + 4;
        outlined copy of TabCustomizationID.Base();
        v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v30);
        a2 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of TabCustomizationID.Base();
        outlined destroy of TabItemGroup((uint64_t)v31);
        v17 = v26;
        _os_log_impl(&dword_186E48000, v11, v12, "Creating UITabGroup id %s", v26, 0xCu);
        v18 = v27;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v18, -1, -1);
        MEMORY[0x18D760108](v17, -1, -1);

      }
      else
      {

        outlined destroy of TabItemGroup((uint64_t)v31);
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    v19 = *((_QWORD *)&v32[1] + 1);
    v20 = *(_QWORD *)&v32[2];
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITabElementGroup);
    v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    outlined copy of TabCustomizationID.Base();
    v22 = (void *)MEMORY[0x18D75CC88](v19, v20);
    v23 = (void *)MEMORY[0x18D75CC88](0, 0xE000000000000000);
    v10 = objc_msgSend(v21, sel_initWithIdentifier_title_image_, v22, v23, 0);

    outlined consume of TabCustomizationID.Base();
    objc_msgSend(v10, sel__setDelegate_, a2);
    outlined destroy of TabItemGroup((uint64_t)v32);
  }
  else
  {
    v32[4] = *(_OWORD *)&v33[64];
    v32[5] = *(_OWORD *)&v33[80];
    *(_QWORD *)&v32[6] = *(_QWORD *)&v33[96];
    v32[0] = *(_OWORD *)v33;
    v32[1] = *(_OWORD *)&v33[16];
    v32[2] = *(_OWORD *)&v33[32];
    v32[3] = *(_OWORD *)&v33[48];
    v10 = specialized UIHostingController.createBridgedTab(using:)((uint64_t)v32);
    outlined destroy of TabItem((uint64_t)v32);
  }
  return v10;
}

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **i;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t result;
  char v10;

  v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
    specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E0DEE9D8]);
  v3 = *(_QWORD *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  for (i = (void **)(a1 + 48); ; i += 3)
  {
    v6 = (uint64_t)*(i - 2);
    v5 = (uint64_t)*(i - 1);
    v7 = *i;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized OrderedSet._find(_:)(v6, v5, 0, v2);
    if ((v10 & 1) == 0)
      break;
    specialized OrderedSet._appendNew(_:in:)(v6, v5);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized TabViewCoordinator_Phone.didUseChild(_:childID:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  id v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = (uint64_t *)(v4 + direct field offset for TabViewCoordinator_Phone.groupHostCache);
  swift_beginAccess();
  v10 = *v9;
  if (!*(_QWORD *)(*v9 + 16))
    return swift_endAccess();
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  v13 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 32 * v11);
  v14 = *v13;
  v15 = v13[1];
  v16 = (_QWORD *)v13[2];
  v17 = v13[3];
  v27 = v15;
  v28 = v17;
  swift_endAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  result = specialized OrderedSet._find(_:)(a1, a2, v15, v16);
  if ((v19 & 1) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(_QWORD *)(v17 + 16))
    {
      v20 = *(id *)(v17 + 8 * result + 32);
      swift_bridgeObjectRelease();
      v21 = specialized OrderedSet._find(_:)(a1, a2, v15, v16);
      if ((v23 & 1) == 0)
      {
        v24 = v21;
        specialized OrderedSet._removeExistingMember(at:in:)(v21, v22);
        swift_bridgeObjectRelease();

      }
      swift_bridgeObjectRetain();
      specialized OrderedDictionary.subscript.setter(v20, a1, a2);
      v15 = v27;
      v17 = v28;
      goto LABEL_12;
    }
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26 = *v9;
  *v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, v15, (uint64_t)v16, v17, a3, a4, isUniquelyReferenced_nonNull_native);
  *v9 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized static AdaptiveTabViewStrategy.setRootView(on:element:searchAdjustment:selectionInfo:environment:transaction:coordinator:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)(void);
  uint64_t (*v22)(void);
  id v23;
  uint64_t result;
  __int128 v25[6];
  uint64_t v26;
  _BYTE __dst[264];
  _BYTE __src[264];
  unsigned __int8 v29;
  _OWORD v30[6];
  uint64_t v31;

  v8 = *(_QWORD *)(a8 + direct field offset for TabViewCoordinator_Phone.tabCache);
  if (v8)
  {
    v16 = *a6;
    v17 = a6[1];
    outlined init with copy of TabEntry(a2, (uint64_t)__src);
    if ((v29 & 1) != 0)
    {
      memcpy(__dst, __src, sizeof(__dst));
      *(_QWORD *)&v25[0] = v16;
      *((_QWORD *)&v25[0] + 1) = v17;
      swift_bridgeObjectRetain();
      static AdaptiveTabViewStrategy.visibleTab(in:selectedID:tabCache:environment:)((uint64_t)__dst, a4, a5, v8, v25, (uint64_t)v30);
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)__dst);
    }
    else
    {
      v30[4] = *(_OWORD *)&__src[64];
      v30[5] = *(_OWORD *)&__src[80];
      v31 = *(_QWORD *)&__src[96];
      v30[0] = *(_OWORD *)__src;
      v30[1] = *(_OWORD *)&__src[16];
      v30[2] = *(_OWORD *)&__src[32];
      v30[3] = *(_OWORD *)&__src[48];
    }
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v30, (uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
    if (*(_QWORD *)&__src[24])
    {
      v25[4] = *(_OWORD *)&__src[64];
      v25[5] = *(_OWORD *)&__src[80];
      v26 = *(_QWORD *)&__src[96];
      v25[0] = *(_OWORD *)__src;
      v25[1] = *(_OWORD *)&__src[16];
      v25[2] = *(_OWORD *)&__src[32];
      v25[3] = *(_OWORD *)&__src[48];
      outlined init with copy of TabItem((uint64_t)v25, (uint64_t)__dst);
      __dst[104] = 0;
      __dst[105] = a3;
      outlined init with copy of TabEntry(a2, (uint64_t)__src);
      v18 = v29;
      outlined destroy of TabEntry((uint64_t)__src);
      if (v18 == 1)
      {
        v19 = TabItem.platformIdentifier.getter();
        specialized UIHostingController<>.setChildRootViewCreatingHostIfNeeded<A>(_:childID:transaction:coordinator:)((uint64_t)__dst, v19, v20, a7, a8);
        swift_bridgeObjectRelease();
      }
      else
      {
        v23 = *(id *)(a1 + direct field offset for UIHostingController.host);
        specialized _UIHostingView.setRootView(_:transaction:)((uint64_t)__dst);

      }
      specialized UIHostingController<>.updateTabEnvironment<A>(environment:coordinator:)();
      outlined destroy of TabItem.RootView((uint64_t)__dst);
      outlined destroy of TabItem((uint64_t)v25);
      v22 = MEMORY[0x1E0DEB940];
    }
    else
    {
      v21 = MEMORY[0x1E0DEB940];
      outlined destroy of AccessibilityScrollableContext?((uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v22 = v21;
    }
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v22);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id specialized TabViewCoordinator_Phone.init(selected:sidebarConfiguration:customization:tabs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  objc_class *ObjectType;
  objc_super v32;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v6[direct field offset for TabViewCoordinator_Phone.tabCache] = 0;
  *(_QWORD *)&v6[direct field offset for TabViewCoordinator_Phone.selectionCache] = 0;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for TabViewCoordinator_Phone.viewControllers] = MEMORY[0x1E0DEE9D8];
  v11 = direct field offset for TabViewCoordinator_Phone.groupHostCache;
  v12 = v6;
  *(_QWORD *)&v6[v11] = specialized Dictionary.init(dictionaryLiteral:)(v10);
  *(_QWORD *)&v12[direct field offset for TabViewCoordinator_Phone.currentTabIdentifiers] = v10;
  swift_unknownObjectWeakInit();
  v13 = (uint64_t)&v12[direct field offset for TabViewCoordinator_Phone.sidebarConfiguration];
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 1;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_WORD *)(v13 + 56) = 0;
  v12[direct field offset for TabViewCoordinator_Phone.isUIKitSidebarVisible] = 0;
  v14 = &v12[direct field offset for TabViewCoordinator_Phone.customization];
  v27 = (uint64_t)&v12[direct field offset for TabViewCoordinator_Phone.customization];
  type metadata accessor for Binding<TabViewCustomization>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v12[direct field offset for TabViewCoordinator_Phone.nextPopoverSeed] = 1;
  v16 = &v12[direct field offset for TabViewCoordinator_Phone.searchState];
  type metadata accessor for Binding<SearchFieldState>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = &v12[direct field offset for TabViewCoordinator_Phone.searchIndex];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  *(_QWORD *)&v12[direct field offset for TabViewCoordinator_Phone.currentTabDropTarget] = 0;
  v19 = &v12[direct field offset for TabViewCoordinator_Phone.selected];
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  *((_QWORD *)v19 + 2) = a3;
  v20 = *(_QWORD *)v13;
  v21 = *(_QWORD *)(v13 + 8);
  v22 = *(_QWORD *)(v13 + 24);
  v23 = *(_QWORD *)(v13 + 32);
  v26 = *(_QWORD *)(v13 + 16);
  outlined init with take of Image.Resolved?(a4, v13, &lazy cache variable for type metadata for TabSidebarConfiguration?, (uint64_t)&type metadata for TabSidebarConfiguration);
  swift_retain();
  swift_retain();
  outlined consume of TabSidebarConfiguration?(v20, v21, v26, v22, v23);
  swift_beginAccess();
  outlined assign with copy of Binding<TabViewCustomization>?(a5, v27);
  swift_endAccess();
  *(_QWORD *)&v12[direct field offset for TabViewCoordinator_Phone.tabs] = a6;

  v32.receiver = v12;
  v32.super_class = ObjectType;
  v24 = objc_msgSendSuper2(&v32, sel_init);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  return v24;
}

uint64_t specialized static AdaptiveTabViewStrategy.operationToAcceptDropItems(from:onto:tabCache:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  uint64_t v7;

  static AdaptiveTabViewStrategy.getElement(for:tabCache:)(a1, a2, (uint64_t)v6);
  if (v7)
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    outlined destroy of TabItem((uint64_t)v6);
    if (v3)
    {
      outlined consume of IdentifiedDropConfiguration?(v3, v4, v5);
      return 2;
    }
  }
  else
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  return 0;
}

void specialized static AdaptiveTabViewStrategy.updatedSelection(didSelect:element:selectionCache:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v20[2];
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    v10 = a1;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v24 = a2;
      v13 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v26 = v22;
      *(_DWORD *)v13 = 136315138;
      v20[1] = v13 + 4;
      v21 = v13;
      v14 = objc_msgSend(v10, sel_title);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = a1;
      v17 = v16;

      a2 = v24;
      v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a1 = v23;
      swift_bridgeObjectRelease();
      v18 = v21;
      _os_log_impl(&dword_186E48000, v11, v12, "group: didSelect element: %s", v21, 0xCu);
      v19 = v22;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v19, -1, -1);
      MEMORY[0x18D760108](v18, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  static AdaptiveTabViewStrategy.getIndex(selectedElement:selectionCache:)(a1, a2);
}

uint64_t specialized static AdaptiveTabViewStrategy.updatedOrder(within:newOrder:customization:tabCache:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char *v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  uint64_t v54;
  uint8_t *v55;
  os_log_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[33];
  unsigned __int8 v69;
  uint64_t v70[36];

  v66 = a3;
  v67 = a4;
  v63 = a1;
  v62 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1E0C80A78](v62, v5);
  v64 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v12 = v11;
  v65 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  v20 = type metadata accessor for Logger();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    v61 = v21;
    swift_bridgeObjectRetain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    v60 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v58 = swift_slowAlloc();
      v70[0] = v58;
      v59 = v12;
      v57 = v24;
      *(_DWORD *)v24 = 136315138;
      v55 = v24 + 4;
      v25 = swift_bridgeObjectRetain();
      v26 = MEMORY[0x18D75CF7C](v25, MEMORY[0x1E0DEA968]);
      v56 = v22;
      v27 = v26;
      v29 = v28;
      swift_bridgeObjectRelease();
      v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v70);
      v12 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v30 = v56;
      v31 = v57;
      _os_log_impl(&dword_186E48000, v56, (os_log_type_t)v60, "group: didCustomizeDisplayOrder %s", v57, 0xCu);
      v32 = v58;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v32, -1, -1);
      MEMORY[0x18D760108](v31, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    (*(void (**)(char *, uint64_t))(v61 + 8))(v19, v20);
  }
  v33 = v65;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v10, 1, v12) == 1)
  {
    v34 = type metadata accessor for Binding<TabViewCustomization>?;
LABEL_21:
    v52 = (uint64_t)v10;
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, (uint64_t (*)(_QWORD))v34);
  }
  outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
  if (v67)
  {
    v35 = a2;
    v10 = v15;
    v36 = objc_msgSend(v63, sel__identifier);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v38;

    if (*(_QWORD *)(v67 + 16) && (v40 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v39), (v41 & 1) != 0))
    {
      outlined init with copy of TabEntry(*(_QWORD *)(v67 + 56) + 272 * v40, (uint64_t)v68);
    }
    else
    {
      memset(v68, 0, sizeof(v68));
      v69 = -1;
    }
    swift_bridgeObjectRelease();
    if (v69 == 255)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
      return outlined destroy of AccessibilityScrollableContext?((uint64_t)v68, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    }
    outlined init with take of TabEntry(v68, v70);
    v42 = v67;
    swift_bridgeObjectRetain();
    v43 = specialized Sequence.compactMap<A>(_:)(v35, v42);
    swift_bridgeObjectRelease();
    v44 = TabEntry.resolvedCustomizationID.getter();
    v46 = v45;
    v48 = v47 & 1;
    MEMORY[0x18D75B9C8](v12);
    if (*((_QWORD *)v43 + 2))
    {
      v49 = *(int *)(v62 + 24);
      v50 = v64;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v68[0] = *(_QWORD *)&v50[v49];
      *(_QWORD *)&v50[v49] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v43, v44, v46, v48, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)&v50[v49] = v68[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      specialized Dictionary._Variant.removeValue(forKey:)(v44, v46, v48);
    }
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID.Base();
    v54 = (uint64_t)v64;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
    outlined destroy of TabEntry((uint64_t)v70);
    v34 = type metadata accessor for Binding<TabViewCustomization>;
    goto LABEL_21;
  }
  v34 = type metadata accessor for Binding<TabViewCustomization>;
  v52 = (uint64_t)v15;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, (uint64_t (*)(_QWORD))v34);
}

uint64_t specialized static AdaptiveTabViewStrategy.updatedVisibility(for:customization:tabCache:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t result;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint8_t *v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  __int128 v79;
  __int16 v80;
  char v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  _OWORD v88[17];
  _BYTE v89[264];
  unsigned __int8 v90;
  _QWORD v91[41];

  v71 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1E0C80A78](v71, v6);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v73 = v13;
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v76 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  v21 = type metadata accessor for Logger();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  v72 = a3;
  if (v23 == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    v24 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_8:
    result = *(_QWORD *)(a1 + 16);
    if (result < 1)
      return result;
    goto LABEL_9;
  }
  v75 = a1;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v77 = a2;
    v29 = v28;
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_186E48000, v26, v27, "visibilityDidChange:forTabs:", v28, 2u);
    v30 = v29;
    a2 = v77;
    MEMORY[0x18D760108](v30, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  a3 = v72;
  a1 = v75;
  v24 = v75 & 0xC000000000000001;
  if ((v75 & 0xC000000000000001) == 0)
    goto LABEL_8;
LABEL_3:
  result = __CocoaSet.count.getter();
  if (result < 1)
    return result;
LABEL_9:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v73) == 1)
  {
    v31 = type metadata accessor for Binding<TabViewCustomization>?;
    v32 = (uint64_t)v12;
  }
  else
  {
    v33 = v76;
    outlined init with take of TableCellFormula((uint64_t)v12, v76, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
    if (a3)
    {
      if (v24)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
        lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type _UITab and conformance NSObject, &lazy cache variable for type metadata for _UITab);
        result = Set.Iterator.init(_cocoa:)();
        a1 = v91[34];
        v69 = v91[35];
        v34 = v91[36];
        v35 = v91[37];
        v36 = v91[38];
      }
      else
      {
        v37 = -1 << *(_BYTE *)(a1 + 32);
        v38 = *(_QWORD *)(a1 + 56);
        v69 = a1 + 56;
        v39 = ~v37;
        v40 = -v37;
        if (v40 < 64)
          v41 = ~(-1 << v40);
        else
          v41 = -1;
        v36 = v41 & v38;
        result = swift_bridgeObjectRetain();
        v34 = v39;
        v35 = 0;
      }
      v65 = v34;
      v67 = a1 & 0x7FFFFFFFFFFFFFFFLL;
      v68 = (unint64_t)(v34 + 64) >> 6;
      v70 = &v90;
      v66 = MEMORY[0x1E0DEE9B0] + 8;
      v75 = a1;
      if ((a1 & 0x8000000000000000) == 0)
        goto LABEL_25;
LABEL_22:
      v42 = __CocoaSet.Iterator.next()();
      if (v42)
      {
        *(_QWORD *)v89 = v42;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v43 = (id)v91[0];
        swift_unknownObjectRelease();
        v44 = v35;
        v45 = v36;
        while (v43)
        {
          v77 = v45;
          v50 = objc_msgSend(v43, sel__identifier, v65, v66, v67);
          v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v53 = v52;

          if (*(_QWORD *)(a3 + 16) && (v54 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v53), (v55 & 1) != 0))
          {
            outlined init with copy of TabEntry(*(_QWORD *)(a3 + 56) + 272 * v54, (uint64_t)v89);
          }
          else
          {
            memset(v89, 0, sizeof(v89));
            v90 = -1;
          }
          swift_bridgeObjectRelease();
          if (v90 == 255)
          {

            result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v89, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            v35 = v44;
            v36 = v77;
            a1 = v75;
            if (v75 < 0)
              goto LABEL_22;
          }
          else
          {
            outlined init with take of TabEntry(v89, v91);
            if (objc_msgSend(v43, sel__isVisible))
              v56 = 1;
            else
              v56 = 2;
            v74 = v56;
            outlined init with copy of TabEntry((uint64_t)v91, (uint64_t)v89);
            if ((*v70 & 1) != 0)
            {
              memcpy(v88, v89, 0x108uLL);
              v58 = *((_QWORD *)&v88[1] + 1);
              v57 = *(_QWORD *)&v88[2];
              v59 = BYTE8(v88[2]);
              outlined copy of TabCustomizationID.Base();
              outlined destroy of TabItemGroup((uint64_t)v88);
            }
            else
            {
              v88[4] = *(_OWORD *)&v89[64];
              v88[5] = *(_OWORD *)&v89[80];
              *(_QWORD *)&v88[6] = *(_QWORD *)&v89[96];
              v88[0] = *(_OWORD *)v89;
              v88[1] = *(_OWORD *)&v89[16];
              v88[2] = *(_OWORD *)&v89[32];
              v88[3] = *(_OWORD *)&v89[48];
              if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0)
                goto LABEL_57;
              v84 = *((_QWORD *)&v88[5] + 1);
              v60 = one-time initialization token for defaultValue;
              swift_bridgeObjectRetain();
              if (v60 != -1)
                swift_once();
              v78 = static TabOptions.TraitKey.defaultValue;
              v79 = *(_OWORD *)&qword_1EDF00118;
              v80 = word_1EDF00128;
              v81 = byte_1EDF0012A;
              v82 = qword_1EDF00130;
              v83 = word_1EDF00138;
              ViewTraitCollection.value<A>(for:defaultValue:)();
              swift_bridgeObjectRelease();
              v58 = v85;
              v57 = v86;
              v61 = v87;
              outlined copy of TabCustomizationID?(v85, v86, v87);
              outlined consume of TabCustomizationID?(v58, v57, v61);
              swift_bridgeObjectRelease();
              if (v61 == 255)
              {
LABEL_57:
                v58 = TabItem.platformIdentifier.getter();
                v57 = v62;
                v59 = 1;
              }
              else
              {
                v59 = v61 & 1;
              }
              outlined destroy of TabItem((uint64_t)v88);
            }
            MEMORY[0x18D75B9C8](v73);
            v63 = *(int *)(v71 + 20);
            if (*(_QWORD *)(*(_QWORD *)&v8[v63] + 16))
              specialized __RawDictionaryStorage.find<A>(_:)(v58, v57, v59);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v89 = *(_QWORD *)&v8[v63];
            *(_QWORD *)&v8[v63] = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v74, v58, v57, v59, isUniquelyReferenced_nonNull_native);
            *(_QWORD *)&v8[v63] = *(_QWORD *)v89;
            swift_bridgeObjectRelease();
            outlined consume of TabCustomizationID.Base();
            dispatch thunk of AnyLocation.set(_:transaction:)();
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);

            result = outlined destroy of TabEntry((uint64_t)v91);
            v35 = v44;
            v36 = v77;
            a3 = v72;
            a1 = v75;
            if (v75 < 0)
              goto LABEL_22;
          }
LABEL_25:
          if (v36)
          {
            v45 = (v36 - 1) & v36;
            v46 = __clz(__rbit64(v36)) | (v35 << 6);
            v44 = v35;
          }
          else
          {
            v47 = v35 + 1;
            if (__OFADD__(v35, 1))
            {
              __break(1u);
              return result;
            }
            if (v47 >= v68)
              break;
            v48 = *(_QWORD *)(v69 + 8 * v47);
            v44 = v35 + 1;
            if (!v48)
            {
              v44 = v35 + 2;
              if (v35 + 2 >= v68)
                break;
              v48 = *(_QWORD *)(v69 + 8 * v44);
              if (!v48)
              {
                v44 = v35 + 3;
                if (v35 + 3 >= v68)
                  break;
                v48 = *(_QWORD *)(v69 + 8 * v44);
                if (!v48)
                {
                  v44 = v35 + 4;
                  if (v35 + 4 >= v68)
                    break;
                  v48 = *(_QWORD *)(v69 + 8 * v44);
                  if (!v48)
                  {
                    v49 = v35 + 5;
                    while (v68 != v49)
                    {
                      v48 = *(_QWORD *)(v69 + 8 * v49++);
                      if (v48)
                      {
                        v44 = v49 - 1;
                        a1 = v75;
                        goto LABEL_40;
                      }
                    }
                    break;
                  }
                }
              }
            }
LABEL_40:
            v45 = (v48 - 1) & v48;
            v46 = __clz(__rbit64(v48)) + (v44 << 6);
          }
          v43 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v46);
        }
      }
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      v31 = type metadata accessor for Binding<TabViewCustomization>;
      v32 = v76;
    }
    else
    {
      v31 = type metadata accessor for Binding<TabViewCustomization>;
      v32 = v33;
    }
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v32, (uint64_t (*)(_QWORD))v31);
}

uint64_t specialized static TabViewCoordinatorStrategy.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:coordinator:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  void *v76;
  id v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  BOOL v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE v129[264];
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _BYTE v133[264];
  uint64_t v134;
  _OWORD v135[17];
  char v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[272];
  unint64_t v140;

  v122 = a6;
  v123 = a2;
  v98 = a5;
  v124 = a3;
  v125 = a4;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v119 = (uint64_t *)((char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (uint64_t)&v95 - v13;
  specialized TabViewCoordinator_Phone.updateSearchIndex<A>(tabs:)(a1);
  v15 = (unint64_t *)(a6 + direct field offset for TabViewCoordinator_Phone.viewControllers);
  swift_beginAccess();
  v96 = v15;
  v16 = *v15;
  if (v16 >> 62)
    goto LABEL_142;
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  v126 = a1;
  if (v17)
  {
    while (1)
    {
      v18 = *(_QWORD *)(a1 + 16);
      v19 = MEMORY[0x1E0DEE9D8];
      v101 = (char *)v18;
      if (v18)
      {
        v137 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
        v20 = a1 + 32;
        a1 = MEMORY[0x1E0DEA978];
        do
        {
          outlined init with copy of TabEntry(v20, (uint64_t)&v138);
          outlined init with copy of TabEntry((uint64_t)&v138, (uint64_t)v135);
          if ((BYTE8(v135[16]) & 1) != 0)
          {
            memcpy(v133, v135, sizeof(v133));
            v130 = *(_OWORD *)&v133[24];
            outlined copy of TabCustomizationID.Base();
            AnyHashable.init<A>(_:)();
            outlined destroy of TabItemGroup((uint64_t)v133);
          }
          else
          {
            *(_OWORD *)&v133[64] = v135[4];
            *(_OWORD *)&v133[80] = v135[5];
            *(_QWORD *)&v133[96] = *(_QWORD *)&v135[6];
            *(_OWORD *)v133 = v135[0];
            *(_OWORD *)&v133[16] = v135[1];
            *(_OWORD *)&v133[32] = v135[2];
            *(_OWORD *)&v133[48] = v135[3];
            _ViewList_View.viewID.getter();
            outlined destroy of TabItem((uint64_t)v133);
          }
          v135[0] = *(_OWORD *)v129;
          v135[1] = *(_OWORD *)&v129[16];
          *(_QWORD *)&v135[2] = *(_QWORD *)&v129[32];
          outlined destroy of TabEntry((uint64_t)&v138);
          v21 = v137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
            v21 = v137;
          }
          v23 = *(_QWORD *)(v21 + 16);
          v22 = *(_QWORD *)(v21 + 24);
          if (v23 >= v22 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1);
            v21 = v137;
          }
          *(_QWORD *)(v21 + 16) = v23 + 1;
          v24 = v21 + 40 * v23;
          v25 = v135[0];
          v26 = v135[1];
          *(_QWORD *)(v24 + 64) = *(_QWORD *)&v135[2];
          *(_OWORD *)(v24 + 32) = v25;
          *(_OWORD *)(v24 + 48) = v26;
          v20 += 272;
          --v18;
        }
        while (v18);
        v27 = v21;
        v19 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v27 = MEMORY[0x1E0DEE9D8];
      }
      v28 = v122;
      v14 = *(_QWORD *)(v122 + direct field offset for TabViewCoordinator_Phone.currentTabIdentifiers);
      v138 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized CollectionChanges.formChanges<A, B>(from:to:)(v14, v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v138;
      v30 = *v96;
      swift_bridgeObjectRetain();
      result = specialized Array.init(repeating:count:)(0, (uint64_t)v101, (unint64_t *)&lazy cache variable for type metadata for UIViewController?, (unint64_t *)&lazy cache variable for type metadata for UIViewController, 0x1E0DC3F20);
      *(_QWORD *)&v135[0] = result;
      v110 = *(_QWORD *)(v29 + 16);
      if (!v110)
        break;
      v32 = 0;
      v121 = v28 + direct field offset for TabViewCoordinator_Phone.searchState;
      v118 = v28 + direct field offset for TabViewCoordinator_Phone.searchIndex;
      v108 = v27;
      v109 = v29 + 32;
      if ((v30 & 0x8000000000000000) != 0)
        v33 = v30;
      else
        v33 = v30 & 0xFFFFFFFFFFFFFF8;
      v106 = v33;
      v107 = v29;
      v117 = (void *)(v30 & 0xC000000000000001);
      v115 = v30 & 0xFFFFFFFFFFFFFF8;
      v97 = (v30 & 0xFFFFFFFFFFFFFF8) + 32;
      v99 = v126 + 32;
      v95 = v30 + 32;
      while (v32 < *(_QWORD *)(v29 + 16))
      {
        v36 = v109 + 40 * v32;
        v27 = *(_QWORD *)v36;
        v14 = *(_QWORD *)(v36 + 8);
        v37 = *(unsigned __int8 *)(v36 + 32);
        v116 = v32;
        if (v37)
        {
          if (v37 == 1)
          {
            if (v27 != v14)
            {
              if (v14 < v27)
                goto LABEL_138;
              if (v27 >= v14)
                goto LABEL_139;
              swift_beginAccess();
              v38 = v101;
              if (v27 > (unint64_t)v101)
                v38 = (char *)v27;
              v120 = v38;
              a1 = v99 + 272 * v27;
              while (1)
              {
                v39 = v14;
                v14 = v28;
                v40 = (uint64_t)v119;
                outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v121, (uint64_t)v119, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
                type metadata accessor for Binding<SearchFieldState>(0);
                v42 = 1;
                v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v40, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
                if (v43 != 1)
                {
                  if ((*(_BYTE *)(v118 + 8) & 1) != 0)
                  {
                    v42 = 2;
                  }
                  else if (v27 == *(_QWORD *)v118)
                  {
                    v42 = 2;
                  }
                  else
                  {
                    v42 = 1;
                  }
                }
                if (v120 == (char *)v27)
                  break;
                v44 = specialized static AdaptiveTabViewStrategy.host<A>(tab:tabs:searchAdjustment:selected:environment:coordinator:)(a1, v126, v42, v123, v124, v125, v14);
                v45 = *(_QWORD *)&v135[0];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  specialized _ArrayBuffer._consumeAndCreateNew()();
                v14 = v39;
                if ((unint64_t)v27 >= *(_QWORD *)(v45 + 16))
                  goto LABEL_119;
                v46 = v45 + 8 * v27;
                v47 = *(void **)(v46 + 32);
                *(_QWORD *)(v46 + 32) = v44;

                result = specialized Array._endMutation()();
                a1 += 272;
                ++v27;
                v28 = v122;
                if (v39 == v27)
                  goto LABEL_22;
              }
              __break(1u);
LABEL_119:
              __break(1u);
              goto LABEL_120;
            }
          }
          else
          {
            v50 = *(_QWORD *)(v36 + 16);
            v120 = *(char **)(v36 + 24);
            v51 = v30 >> 62;
            if (v30 >> 62)
            {
              swift_bridgeObjectRetain();
              v71 = _CocoaArrayWrapper.endIndex.getter();
              result = swift_bridgeObjectRelease();
              if (v71 < v27)
              {
LABEL_105:
                __break(1u);
LABEL_106:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v72 = *(_QWORD *)&v135[0];
                goto LABEL_108;
              }
            }
            else if (*(_QWORD *)(v115 + 16) < v27)
            {
              goto LABEL_105;
            }
            if (v27 < 0)
              goto LABEL_127;
            if (v51)
            {
              swift_bridgeObjectRetain();
              v52 = _CocoaArrayWrapper.endIndex.getter();
              result = swift_bridgeObjectRelease();
            }
            else
            {
              v52 = *(_QWORD *)(v115 + 16);
            }
            if (v52 < v14)
              goto LABEL_130;
            if (v14 < 0)
              goto LABEL_131;
            if (v117)
            {
              if (v14 < (unint64_t)v27)
                goto LABEL_137;
              if (v27 != v14)
              {
                if (v27 >= (unint64_t)v14)
                  goto LABEL_169;
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
                v57 = v27;
                do
                {
                  a1 = v57 + 1;
                  _ArrayBuffer._typeCheckSlowPath(_:)(v57);
                  v57 = a1;
                }
                while (v14 != a1);
              }
            }
            if (v51)
            {
              swift_bridgeObjectRetain();
              v58 = _CocoaArrayWrapper.subscript.getter();
              v104 = v59;
              v105 = v58;
              v102 = v61;
              v103 = v60;
              result = swift_bridgeObjectRelease();
            }
            else
            {
              v104 = (2 * v14) | 1;
              result = swift_bridgeObjectRetain();
              v105 = v115;
              v102 = v27;
              v103 = v97;
            }
            v62 = (uint64_t)v120;
            if (v27 != v14)
            {
              if (v14 < v27)
                goto LABEL_140;
              if (v27 >= v14)
                goto LABEL_141;
              v114 = &v120[-v50];
              if (v120 != (char *)v50)
              {
                if ((uint64_t)v120 < v50)
                  goto LABEL_170;
                v64 = 0;
                v112 = ~v27 + v14;
                v113 = 8 * v50 + 32;
                v111 = v27 + 1;
                v100 = v95 + 8 * v27;
                while (1)
                {
                  a1 = v50 + v64;
                  if (v50 + v64 >= v62)
                    break;
                  v65 = v27 + v64;
                  if (v117)
                  {
                    v66 = (id)MEMORY[0x18D75E3BC](v65, v30);
                  }
                  else
                  {
                    if (v65 >= *(_QWORD *)(v115 + 16))
                      goto LABEL_125;
                    v66 = *(id *)(v100 + 8 * v64);
                  }
                  v67 = v66;
                  v68 = *(_QWORD *)&v135[0];
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    specialized _ArrayBuffer._consumeAndCreateNew()();
                  if (v50 < 0)
                    goto LABEL_122;
                  if (a1 >= *(_QWORD *)(v68 + 16))
                    goto LABEL_121;
                  v69 = *(void **)(v68 + v113 + 8 * v64);
                  *(_QWORD *)(v68 + v113 + 8 * v64) = v67;

                  specialized Array._endMutation()();
                  v62 = (uint64_t)v120;
                  if (v112 == v64)
                    goto LABEL_82;
                  if (v111 + v64 < v27 || v111 + v64 >= v14)
                    goto LABEL_123;
                  if (v114 == (char *)++v64)
                    goto LABEL_82;
                }
LABEL_120:
                __break(1u);
LABEL_121:
                __break(1u);
LABEL_122:
                __break(1u);
LABEL_123:
                __break(1u);
                break;
              }
            }
            if (v50 < 0)
              goto LABEL_133;
LABEL_82:
            if ((uint64_t)v101 < v50 || (uint64_t)v101 < v62)
              goto LABEL_134;
            if (v62 < 0)
              goto LABEL_135;
            v63 = (2 * v62) | 1;
            v14 = v126;
            swift_bridgeObjectRetain();
            specialized static AdaptiveTabViewStrategy.updateHosts<A, B>(_:tabs:selected:environment:transaction:coordinator:)(v105, v103, v102, v104, v14, v99, v50, v63, v123, v124, v125, v98, v28);
            swift_unknownObjectRelease();
            result = swift_bridgeObjectRelease();
          }
        }
        else
        {
          v48 = v30 >> 62;
          if (v30 >> 62)
          {
            swift_bridgeObjectRetain();
            v70 = _CocoaArrayWrapper.endIndex.getter();
            result = swift_bridgeObjectRelease();
            if (v70 < v27)
              goto LABEL_132;
          }
          else if (*(_QWORD *)(v115 + 16) < v27)
          {
            goto LABEL_132;
          }
          if (v27 < 0)
            goto LABEL_126;
          if (v48)
          {
            swift_bridgeObjectRetain();
            v49 = _CocoaArrayWrapper.endIndex.getter();
            result = swift_bridgeObjectRelease();
          }
          else
          {
            v49 = *(_QWORD *)(v115 + 16);
          }
          if (v49 < v14)
            goto LABEL_128;
          if (v14 < 0)
            goto LABEL_129;
          if (v117)
          {
            if (v14 < (unint64_t)v27)
              goto LABEL_136;
            if (v27 != v14)
            {
              if (v27 >= (unint64_t)v14)
                goto LABEL_168;
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
              v53 = v27;
              do
              {
                a1 = v53 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v53);
                v53 = a1;
              }
              while (v14 != a1);
            }
          }
          if (v48)
          {
            swift_bridgeObjectRetain();
            v34 = _CocoaArrayWrapper.subscript.getter();
            v35 = v54;
            v27 = v55;
            v14 = v56;
            swift_bridgeObjectRelease();
          }
          else
          {
            v14 = (2 * v14) | 1;
            swift_bridgeObjectRetain();
            v34 = v115;
            v35 = v97;
          }
          specialized static AdaptiveTabViewStrategy.removeHosts<A>(_:coordinator:)(v34, v35, v27, v14, v28);
          result = swift_unknownObjectRelease();
        }
LABEL_22:
        v32 = v116 + 1;
        v29 = v107;
        v27 = v108;
        if (v116 + 1 == v110)
          goto LABEL_106;
      }
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      swift_bridgeObjectRetain();
      v79 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v126 = a1;
      if (!v79)
        goto LABEL_143;
    }
    v72 = result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_108:
    *(_QWORD *)v133 = MEMORY[0x1E0DEE9D8];
    v73 = *(_QWORD *)(v72 + 16);
    if (v73)
    {
      v74 = v27;
      swift_bridgeObjectRetain_n();
      for (i = 0; i != v73; ++i)
      {
        v76 = *(void **)(v72 + 8 * i + 32);
        if (v76)
        {
          v77 = v76;
          MEMORY[0x18D75CF58]();
          if (*(_QWORD *)((*(_QWORD *)v133 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v133 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v78 = *(_QWORD *)v133;
      v27 = v74;
    }
    else
    {
      swift_bridgeObjectRetain();
      v78 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_166:
    *v96 = v78;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + direct field offset for TabViewCoordinator_Phone.currentTabIdentifiers) = v27;
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_143:
    v80 = (char *)MEMORY[0x1E0DEE9D8];
    v140 = MEMORY[0x1E0DEE9D8];
    v81 = *(_QWORD *)(a1 + 16);
    v82 = v122 + direct field offset for TabViewCoordinator_Phone.searchState;
    v116 = v122 + direct field offset for TabViewCoordinator_Phone.searchIndex;
    swift_bridgeObjectRetain();
    v121 = v82;
    result = swift_beginAccess();
    v83 = 0;
    v117 = (char *)v135 + 8;
    v118 = a1 + 32;
    v119 = &v134;
    v120 = v139;
    v84 = v81 == 0;
    if (v81)
      goto LABEL_145;
LABEL_144:
    v85 = v80;
    memset(v135, 0, sizeof(v135));
    v83 = v81;
    v136 = -1;
    while (1)
    {
      outlined init with take of Binding<SearchFieldState>((uint64_t)v135, (uint64_t)&v138, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry), (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?);
      if (v139[264] == 255)
      {
        swift_bridgeObjectRelease();
        v78 = v140;
        v28 = v122;
        v27 = (uint64_t)v85;
        goto LABEL_166;
      }
      v86 = v138;
      outlined init with take of TabEntry(v120, v135);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v121, v14, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
      type metadata accessor for Binding<SearchFieldState>(0);
      v88 = 1;
      v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48))(v14, 1, v87);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v14, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
      if (v89 != 1)
      {
        if ((*(_BYTE *)(v116 + 8) & 1) != 0)
        {
          v88 = 2;
        }
        else if (*(_QWORD *)v116 == v86)
        {
          v88 = 2;
        }
        else
        {
          v88 = 1;
        }
      }
      specialized static AdaptiveTabViewStrategy.host<A>(tab:tabs:searchAdjustment:selected:environment:coordinator:)((uint64_t)v135, v126, v88, v123, v124, v125, v122);
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined init with copy of TabEntry((uint64_t)v135, (uint64_t)v133);
      if ((*(_BYTE *)v119 & 1) != 0)
      {
        memcpy(v129, v133, sizeof(v129));
        v127 = *(_QWORD *)&v129[24];
        v128 = *(_QWORD *)&v129[32];
        outlined copy of TabCustomizationID.Base();
        AnyHashable.init<A>(_:)();
        outlined destroy of TabItemGroup((uint64_t)v129);
      }
      else
      {
        *(_OWORD *)&v129[64] = *(_OWORD *)&v133[64];
        *(_OWORD *)&v129[80] = *(_OWORD *)&v133[80];
        *(_QWORD *)&v129[96] = *(_QWORD *)&v133[96];
        *(_OWORD *)v129 = *(_OWORD *)v133;
        *(_OWORD *)&v129[16] = *(_OWORD *)&v133[16];
        *(_OWORD *)&v129[32] = *(_OWORD *)&v133[32];
        *(_OWORD *)&v129[48] = *(_OWORD *)&v133[48];
        _ViewList_View.viewID.getter();
        outlined destroy of TabItem((uint64_t)v129);
      }
      v80 = v85;
      *(_OWORD *)v133 = v130;
      *(_OWORD *)&v133[16] = v131;
      *(_QWORD *)&v133[32] = v132;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v85 + 2) + 1, 1, v85);
      v91 = *((_QWORD *)v80 + 2);
      v90 = *((_QWORD *)v80 + 3);
      if (v91 >= v90 >> 1)
        v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, v80);
      *((_QWORD *)v80 + 2) = v91 + 1;
      v92 = &v80[40 * v91];
      v93 = *(_OWORD *)v133;
      v94 = *(_OWORD *)&v133[16];
      *((_QWORD *)v92 + 8) = *(_QWORD *)&v133[32];
      *((_OWORD *)v92 + 2) = v93;
      *((_OWORD *)v92 + 3) = v94;
      result = outlined destroy of TabEntry((uint64_t)v135);
      v84 = v83 >= v81;
      if (v83 == v81)
        goto LABEL_144;
LABEL_145:
      if (v84)
        break;
      v85 = v80;
      outlined init with copy of TabEntry(v118 + 272 * v83, (uint64_t)&v133[8]);
      *(_QWORD *)&v135[0] = v83;
      outlined init with take of TabEntry(&v133[8], v117);
      ++v83;
    }
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitAdaptableTabView(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  void (*v28)(char *, char *, uint64_t);
  char *v29;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v9 = a2[5];
    swift_retain();
    swift_retain();
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v9;
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    }
    v10 = a2[7];
    if (v10 == 1)
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_QWORD *)(a1 + 72) = a2[9];
    }
    else
    {
      v11 = a2[8];
      v12 = a2[9];
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v11;
      *(_QWORD *)(a1 + 72) = v12;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    v13 = a3[6];
    v14 = (_QWORD *)(a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    type metadata accessor for Binding<TabViewCustomization>(0);
    v17 = v16;
    v18 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v16))
    {
      type metadata accessor for Binding<TabViewCustomization>?(0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = v15[1];
      *v14 = *v15;
      v14[1] = v20;
      v21 = *(int *)(v17 + 32);
      v29 = (char *)v14 + v21;
      v22 = (char *)v15 + v21;
      v23 = type metadata accessor for UUID();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      swift_retain();
      swift_retain();
      v28(v29, v22, v23);
      v24 = type metadata accessor for TabViewCustomization();
      *(_QWORD *)&v29[*(int *)(v24 + 20)] = *(_QWORD *)&v22[*(int *)(v24 + 20)];
      *(_QWORD *)&v29[*(int *)(v24 + 24)] = *(_QWORD *)&v22[*(int *)(v24 + 24)];
      v25 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25(v14, 0, 1, v17);
    }
    v26 = a3[8];
    *(_QWORD *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(_QWORD *)(a1 + v26) = *(uint64_t *)((char *)a2 + v26);
    *(_QWORD *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UIKitAdaptableTabView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 40))
  {
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 56) != 1)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_release();
    swift_release();
    v7 = v4 + *(int *)(v6 + 32);
    v8 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    type metadata accessor for TabViewCustomization();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  void (*v27)(char *, char *, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  }
  v8 = *(_QWORD *)(a2 + 56);
  if (v8 == 1)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v13[1];
    *v12 = *v13;
    v12[1] = v18;
    v19 = *(int *)(v15 + 32);
    v20 = (char *)v12 + v19;
    v21 = (char *)v13 + v19;
    v22 = type metadata accessor for UUID();
    v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    swift_retain();
    swift_retain();
    v27(v20, v21, v22);
    v23 = type metadata accessor for TabViewCustomization();
    *(_QWORD *)&v20[*(int *)(v23 + 20)] = *(_QWORD *)&v21[*(int *)(v23 + 20)];
    *(_QWORD *)&v20[*(int *)(v23 + 24)] = *(_QWORD *)&v21[*(int *)(v23 + 24)];
    v24 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v12, 0, 1, v15);
  }
  v25 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  int *v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = (_OWORD *)(a1 + 32);
  v7 = (_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?(a1 + 32, &lazy cache variable for type metadata for Binding<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v9 = *(_BYTE *)(a2 + 48);
      *v6 = *v7;
      *(_BYTE *)(a1 + 48) = v9;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    v10 = *v7;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *v6 = v10;
  }
  v11 = (__int128 *)(a1 + 56);
  v13 = (__int128 *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) == 1)
  {
    if (v12 == 1)
    {
      v14 = *v13;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *v11 = v14;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_retain();
      swift_retain();
      swift_retain();
    }
  }
  else if (v12 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration(a1 + 56);
    v15 = *(_QWORD *)(a2 + 72);
    *v11 = *v13;
    *(_QWORD *)(a1 + 72) = v15;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v12;
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_retain();
    swift_release();
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  v16 = a3[6];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v17, 1, v19);
  v24 = v22(v18, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      *v17 = *v18;
      swift_retain();
      swift_release();
      v17[1] = v18[1];
      swift_retain();
      swift_release();
      v33 = *(int *)(v20 + 32);
      v34 = (char *)v17 + v33;
      v35 = (char *)v18 + v33;
      v36 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v34, v35, v36);
      v37 = type metadata accessor for TabViewCustomization();
      *(_QWORD *)&v34[*(int *)(v37 + 20)] = *(_QWORD *)&v35[*(int *)(v37 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v34[*(int *)(v37 + 24)] = *(_QWORD *)&v35[*(int *)(v37 + 24)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_21;
  }
  *v17 = *v18;
  v17[1] = v18[1];
  v25 = *(int *)(v20 + 32);
  v39 = a3;
  v26 = (char *)v17 + v25;
  v27 = (char *)v18 + v25;
  v28 = type metadata accessor for UUID();
  v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  swift_retain();
  swift_retain();
  v38(v26, v27, v28);
  v29 = type metadata accessor for TabViewCustomization();
  *(_QWORD *)&v26[*(int *)(v29 + 20)] = *(_QWORD *)&v27[*(int *)(v29 + 20)];
  *(_QWORD *)&v26[*(int *)(v29 + 24)] = *(_QWORD *)&v27[*(int *)(v29 + 24)];
  a3 = v39;
  v30 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30(v17, 0, 1, v20);
LABEL_21:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = a3[6];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *(_OWORD *)(a1 + 66) = *(_OWORD *)(a2 + 66);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = *(int *)(v10 + 32);
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    v17 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    v18 = type metadata accessor for TabViewCustomization();
    *(_QWORD *)&v15[*(int *)(v18 + 20)] = *(_QWORD *)&v16[*(int *)(v18 + 20)];
    *(_QWORD *)&v15[*(int *)(v18 + 24)] = *(_QWORD *)&v16[*(int *)(v18 + 24)];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  v19 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_release();
      *(_QWORD *)(a1 + 40) = v6;
      swift_release();
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      goto LABEL_6;
    }
    outlined destroy of AccessibilityScrollableContext?(a1 + 32, &lazy cache variable for type metadata for Binding<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
LABEL_6:
  v7 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    goto LABEL_11;
  }
  if (v7 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration(a1 + 56);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 56) = v7;
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
LABEL_11:
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v9, 1, v11);
  v16 = v14(v10, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      *v9 = *v10;
      swift_release();
      v9[1] = v10[1];
      swift_release();
      v25 = *(int *)(v12 + 32);
      v26 = (char *)v9 + v25;
      v27 = (char *)v10 + v25;
      v28 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
      v29 = type metadata accessor for TabViewCustomization();
      *(_QWORD *)&v26[*(int *)(v29 + 20)] = *(_QWORD *)&v27[*(int *)(v29 + 20)];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v26[*(int *)(v29 + 24)] = *(_QWORD *)&v27[*(int *)(v29 + 24)];
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
    goto LABEL_16;
  }
  if (v16)
  {
LABEL_16:
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_17;
  }
  v17 = v10[1];
  *v9 = *v10;
  v9[1] = v17;
  v18 = *(int *)(v12 + 32);
  v19 = (char *)v9 + v18;
  v20 = (char *)v10 + v18;
  v21 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  v22 = type metadata accessor for TabViewCustomization();
  *(_QWORD *)&v19[*(int *)(v22 + 20)] = *(_QWORD *)&v20[*(int *)(v22 + 20)];
  *(_QWORD *)&v19[*(int *)(v22 + 24)] = *(_QWORD *)&v20[*(int *)(v22 + 24)];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
LABEL_17:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitAdaptableTabView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18739C364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for UIKitAdaptableTabView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18739C3EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for UIKitAdaptableTabView()
{
  unint64_t v0;

  type metadata accessor for Binding<TabViewCustomization>?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    v2[1] = v2[0];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE65D8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>(255);
    v2 = v1;
    v3[0] = &protocol witness table for UIKitAdaptableTabView;
    v3[1] = lazy protocol witness table accessor for type TabViewCommonModifier and conformance TabViewCommonModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined assign with copy of Binding<TabViewCustomization>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined assign with take of Binding<SearchFieldState>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<SearchFieldState>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (offset: Int, element: (UIViewController, TabEntry))()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: (UIViewController, TabEntry)))
  {
    type metadata accessor for (UIViewController, TabEntry)();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: (UIViewController, TabEntry)));
  }
}

void type metadata accessor for (UIViewController, TabEntry)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UIViewController, TabEntry))
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIViewController, TabEntry));
  }
}

uint64_t outlined init with copy of TabItemGroup(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TabItemGroup(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>;
  if (!lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CAF4C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF4D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>);
  }
  return result;
}

uint64_t sub_18739C8B0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_18739C8DC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 64) >= 2uLL)
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIHostingController.createBridgedTab(using:)()
{
  uint64_t v0;

  return closure #1 in UIHostingController.createBridgedTab(using:)(v0 + 16);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.TabBarPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.TabBarPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey>, (uint64_t)&type metadata for EnvironmentValues.IsTabBarShowingSectionsKey, (uint64_t)&protocol witness table for EnvironmentValues.IsTabBarShowingSectionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [_UITab] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [_UITab] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_UITab] and conformance [A])
  {
    type metadata accessor for FallbackDelegateBox<NSObject>(255, &lazy cache variable for type metadata for [_UITab], &lazy cache variable for type metadata for _UITab, 0x1E0DC4430, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_UITab] and conformance [A]);
  }
  return result;
}

void type metadata accessor for TabViewCustomization?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TabViewCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t outlined consume of TabItemGroup.HostCache?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for implicit closure #13 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)()
{
  uint64_t v0;

  return implicit closure #13 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(v0 + 16);
}

uint64_t partial apply for implicit closure #14 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)()
{
  uint64_t v0;

  return implicit closure #14 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_18739CAB8()
{
  return swift_deallocObject();
}

_BYTE **partial apply for closure #1 in OSLogArguments.append(_:)(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_18739CAD0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_18739CAE8()
{
  return swift_deallocObject();
}

uint64_t sub_18739CAF8()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for (_:_:_:)()
{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeMutablePointer<UInt8>, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB910]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for UnsafeMutablePointer<NSObject?>?, (uint64_t (*)(uint64_t))type metadata accessor for UnsafeMutablePointer<NSObject?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for UnsafeMutablePointer<Any>?();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

void type metadata accessor for UnsafeMutablePointer<NSObject?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UnsafeMutablePointer<NSObject?>)
  {
    type metadata accessor for FallbackDelegateBox<NSObject>(255, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for UnsafeMutablePointer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnsafeMutablePointer<NSObject?>);
  }
}

void type metadata accessor for UnsafeMutablePointer<Any>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UnsafeMutablePointer<Any>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeMutablePointer<Any>, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB910]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnsafeMutablePointer<Any>?);
  }
}

uint64_t outlined copy of TabItemGroup.HostCache?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_18739CCD4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)()
{
  uint64_t v0;

  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)(v0 + 16));
}

uint64_t objectdestroy_37Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID.Base();
  if (*(_QWORD *)(v0 + 88))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 192))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 168);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)()
{
  uint64_t v0;

  return implicit closure #9 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(v0 + 16);
}

uint64_t sub_18739CD98()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 280) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_release();
    swift_bridgeObjectRelease();

    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID.Base();
  if (*(_QWORD *)(v0 + 88))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 192))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 168);
    swift_release();
    swift_bridgeObjectRelease();

LABEL_7:
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)()
{
  uint64_t v0;

  return implicit closure #10 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(v0 + 16);
}

uint64_t sub_18739CE74()
{
  return swift_deallocObject();
}

uint64_t sub_18739CE84()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t partial apply for specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_18739CEA4()
{
  return swift_deallocObject();
}

uint64_t sub_18739CEB4()
{
  return swift_deallocObject();
}

uint64_t sub_18739CEC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18739CEE8()
{
  return swift_deallocObject();
}

uint64_t sub_18739CEF8()
{
  return swift_deallocObject();
}

uint64_t sub_18739CF08()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18739CF2C()
{
  return swift_deallocObject();
}

uint64_t sub_18739CF3C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BYTE v6[56];

  specialized closure #1 in static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(uint64_t (**)(uint64_t *, double))(v3 + 16), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), (uint64_t)v6);
  return outlined init with take of Binding<SearchFieldState>((uint64_t)v6, a3, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TabCustomizationID, id: TabCustomizationID)?, (uint64_t)type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

void type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)(255, a3);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_18739D064()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #3 in UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)()
{
  uint64_t v0;

  closure #3 in UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(char **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void partial apply for closure #1 in static AdaptiveTabViewStrategy.removeHosts<A>(_:coordinator:)(id *a1)
{
  closure #1 in static AdaptiveTabViewStrategy.removeHosts<A>(_:coordinator:)(a1);
}

ValueMetadata *type metadata accessor for AdaptiveTabViewStrategy()
{
  return &type metadata for AdaptiveTabViewStrategy;
}

uint64_t sub_18739D0E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32))
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IdentifiedDropConfiguration.drop(_:onto:)()
{
  uint64_t *v0;

  return closure #1 in IdentifiedDropConfiguration.drop(_:onto:)((uint64_t)(v0 + 2), v0[8], v0[9], v0[10]);
}

uint64_t outlined consume of IdentifiedDropConfiguration?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t LimitedAvailabilityScene.storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*LimitedAvailabilityScene.storage.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t LimitedAvailabilityScene.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for LimitedAvailabilitySceneStorage(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 96) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 112), a1);
  return v5;
}

uint64_t type metadata accessor for LimitedAvailabilitySceneStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilitySceneStorage);
}

void LimitedAvailabilityScene.body.getter()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static LimitedAvailabilityScene._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X8>)
{
  id v1;
  void *v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  PreferencesOutputs.init()();
  PreferencesInputs.makeIndirectOutputs()();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityScene>, (uint64_t)&type metadata for LimitedAvailabilityScene, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  v1 = (id)AGSubgraphGetCurrent();
  if (!v1)
    __break(1u);
  v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  result = PreferencesOutputs.setIndirectDependency(_:)();
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

void LimitedAvailabilityScene.IndirectOutputs.updateValue()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  if (!*(_QWORD *)(v0 + 96))
  {
    v1 = (id)AGSubgraphGetGraph();
    v2 = (void *)AGSubgraphCreate();

    *(_QWORD *)(v0 + 96) = v2;
    v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityScene.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityScene.IndirectOutputs.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  v6 = *(_DWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v18 = *(_OWORD *)(v2 + 48);
  v19 = *(_OWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = *(_BYTE *)(v2 + 80);
  v11 = *(_BYTE *)(v2 + 81);
  v12 = *(_QWORD *)(v2 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(_QWORD *)(v13 + 64) = v8;
  *(_QWORD *)(v13 + 72) = v9;
  *(_BYTE *)(v13 + 80) = v10;
  *(_BYTE *)(v13 + 81) = v11;
  *(_QWORD *)(v13 + 88) = v12;
  swift_retain();
  v14 = *(_QWORD *)(a1 + 80);
  LODWORD(v8) = *(_DWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  v26 = v20;
  v27 = v22;
  v28 = v13;
  v29 = v4;
  v30 = v5;
  v31 = v21;
  v32 = v3;
  v33 = v23;
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v34, &v24, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v26 = v14;
  v27 = v8;
  v24 = v34;
  v25 = v35;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for Scene.body.getter in conformance LimitedAvailabilityScene()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void LimitedAvailabilitySceneStorageBase.makeScene(scene:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilitySceneStorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LimitedAvailabilitySceneStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilitySceneStorage.makeScene(scene:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[4];

  v4 = *v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v9 = *(_QWORD *)(*v2 + 96);
  LODWORD(v17) = *a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityScene>, (uint64_t)&type metadata for LimitedAvailabilityScene, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v16 = *(_OWORD *)(a2 + 5);
  v10 = a2[3];
  v11 = a2[4];
  _GraphValue.value.getter();
  v12 = *(_QWORD *)(v4 + 104);
  v14 = type metadata accessor for LimitedAvailabilitySceneStorage.Child(0, v9, v12, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilitySceneStorage<A>.Child, v14);
  _GraphValue.init<A>(_:)();
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v10;
  v21 = v11;
  v22 = v16;
  v23 = v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(v12 + 32))(v24, &v17, v9, v12);
}

uint64_t LimitedAvailabilitySceneStorage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilitySceneStorage(0, a1, a2, v6);
  v7 = swift_dynamicCastClassUnconditional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v7 + *(_QWORD *)(*(_QWORD *)v7 + 112), a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilitySceneStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilitySceneStorage.Child.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityScene.IndirectOutputs, &unk_1E1AE5238);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs);
  }
  return result;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityScene()
{
  return &type metadata for LimitedAvailabilityScene;
}

uint64_t type metadata accessor for LimitedAvailabilitySceneStorageBase()
{
  return objc_opt_self();
}

uint64_t method lookup function for LimitedAvailabilitySceneStorageBase()
{
  return swift_lookUpClassMethod();
}

void *type metadata accessor for LimitedAvailabilityScene.IndirectOutputs()
{
  return &unk_1E1AE5238;
}

uint64_t type metadata accessor for LimitedAvailabilitySceneStorage.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilitySceneStorage.Child);
}

void base witness table accessor for _AttributeBody in LimitedAvailabilitySceneStorage<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t static ReferenceFileDocument.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void DocumentGroup<>.init(newDocument:editor:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _typeName(_:qualified:)();
  DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, a2, a3, a4, a5, a6, a9, a7, a8);
}

{
  _typeName(_:qualified:)();
  DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, a2, a3, a4, a5, a6, a9, a7, a8);
}

void DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  _QWORD *v17;

  *(_BYTE *)a7 = 0;
  *(_QWORD *)(a7 + 8) = type metadata accessor for ReferenceFileDocumentBox(0, a5, a8, a4);
  *(_QWORD *)(a7 + 16) = &protocol witness table for ReferenceFileDocumentBox<A>;
  *(_QWORD *)(a7 + 48) = type metadata accessor for DocumentGroupConfiguration.NewReferenceFileDocument(0, a5, a8, v16);
  *(_QWORD *)(a7 + 56) = &protocol witness table for DocumentGroupConfiguration.NewReferenceFileDocument<A>;
  *(_QWORD *)(a7 + 24) = a1;
  *(_QWORD *)(a7 + 32) = a2;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a9;
  v17[4] = a3;
  v17[5] = a4;
  type metadata accessor for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer();
}

{
  uint64_t v16;
  _QWORD *v17;

  *(_BYTE *)a7 = 0;
  *(_QWORD *)(a7 + 8) = type metadata accessor for FileDocumentBox(0, a5, a8, a4);
  *(_QWORD *)(a7 + 16) = &protocol witness table for FileDocumentBox<A>;
  *(_QWORD *)(a7 + 48) = type metadata accessor for DocumentGroupConfiguration.NewFileDocument(0, a5, a8, v16);
  *(_QWORD *)(a7 + 56) = &protocol witness table for DocumentGroupConfiguration.NewFileDocument<A>;
  *(_QWORD *)(a7 + 24) = a1;
  *(_QWORD *)(a7 + 32) = a2;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a9;
  v17[4] = a3;
  v17[5] = a4;
  type metadata accessor for DocumentGroupConfiguration.EditorFileDocumentContainer();
}

void sub_18739DCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v22 = type metadata accessor for ModifiedContent();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReferenceFileDocumentBox<A>, v20);
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>, a1);
  v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  a19 = v23;
  a20 = v24;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, &a19);
  ObservableDocumentBoxInputView.init(modelType:content:)(v20, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:));
  swift_retain();
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
}

uint64_t sub_18739DD7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1[8] = AnyView.init<A>(_:)();
  v1[9] = v5;
  v1[10] = v6;
  v1[11] = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v0, v2);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v0, v2);
  swift_release();
  result = swift_release();
  v1[12] = v3;
  return result;
}

void DocumentGroup<>.init(viewing:viewer:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14;

  v14 = _typeName(_:qualified:)();
  DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:)(a1, a2, v14, a3, a4, a5, a7, a6);
}

{
  uint64_t v14;

  v14 = _typeName(_:qualified:)();
  DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:)(a1, a2, v14, a3, a4, a5, a7, a6);
}

void DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  _QWORD *v12;

  *(_BYTE *)a7 = 1;
  *(_QWORD *)(a7 + 8) = type metadata accessor for ReferenceFileDocumentBox(0, a4, a6, a3);
  *(_QWORD *)(a7 + 16) = &protocol witness table for ReferenceFileDocumentBox<A>;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_QWORD *)(a7 + 56) = 0;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a5;
  v12[3] = a8;
  v12[4] = a1;
  v12[5] = a2;
  type metadata accessor for DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer();
}

{
  _QWORD *v12;

  *(_BYTE *)a7 = 1;
  *(_QWORD *)(a7 + 8) = type metadata accessor for FileDocumentBox(0, a4, a6, a3);
  *(_QWORD *)(a7 + 16) = &protocol witness table for FileDocumentBox<A>;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_QWORD *)(a7 + 56) = 0;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a5;
  v12[3] = a8;
  v12[4] = a1;
  v12[5] = a2;
  type metadata accessor for DocumentGroupConfiguration.ViewerFileDocumentContainer();
}

void sub_18739DF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v22 = type metadata accessor for ModifiedContent();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReferenceFileDocumentBox<A>, v20);
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer<A, B>, a1);
  v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  a19 = v23;
  a20 = v24;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, &a19);
  ObservableDocumentBoxInputView.init(modelType:content:)(v20, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:));
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
}

uint64_t sub_18739E010()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v0[8] = AnyView.init<A>(_:)();
  v0[9] = v5;
  v0[10] = v6;
  v0[11] = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  result = swift_release();
  v0[12] = v3;
  return result;
}

uint64_t ReferenceFileDocumentConfiguration.document.getter()
{
  specialized ReferenceFileDocumentConfiguration.document.getter();
  return swift_unknownObjectRetain();
}

uint64_t key path getter for ReferenceFileDocumentConfiguration.document : <A>ReferenceFileDocumentConfiguration<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  type metadata accessor for ReferenceFileDocumentConfiguration(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  *a4 = specialized ReferenceFileDocumentConfiguration.document.getter();
  return swift_unknownObjectRetain();
}

uint64_t key path setter for ReferenceFileDocumentConfiguration.document : <A>ReferenceFileDocumentConfiguration<A>()
{
  uint64_t v0;

  v0 = swift_unknownObjectRetain();
  return ReferenceFileDocumentConfiguration.document.setter(v0);
}

uint64_t ReferenceFileDocumentConfiguration.document.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ReferenceFileDocumentConfiguration.document.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ReferenceFileDocumentConfiguration.$document.getter()
{
  return ObservedObject.projectedValue.getter();
}

uint64_t ReferenceFileDocumentConfiguration.fileURL.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of URL?(v2 + *(int *)(a1 + 36), a2);
}

uint64_t ReferenceFileDocumentConfiguration.fileURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined assign with take of URL?(a1, v2 + *(int *)(a2 + 36));
}

uint64_t (*ReferenceFileDocumentConfiguration.fileURL.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ReferenceFileDocumentConfiguration.isEditable.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t ReferenceFileDocumentConfiguration.isEditable.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*ReferenceFileDocumentConfiguration.isEditable.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ReferenceFileDocumentConfiguration.init(document:fileURL:isEditable:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  *a5 = ObservedObject.init(wrappedValue:)();
  a5[1] = v10;
  v12 = type metadata accessor for ReferenceFileDocumentConfiguration(0, a3, a4, v11);
  result = outlined init with take of URL?(a1, (uint64_t)a5 + *(int *)(v12 + 36));
  *((_BYTE *)a5 + *(int *)(v12 + 40)) = a2;
  return result;
}

uint64_t static ReferenceFileDocumentBox.documentBaseClass.getter()
{
  return type metadata accessor for FileWrapperPlatformDocument();
}

uint64_t ReferenceFileDocumentBox.base.didset()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = ReferenceFileDocumentBox.base.getter();
  v2 = result;
  if (result)
    result = swift_unknownObjectRelease();
  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120)) = v2 != 0;
  return result;
}

uint64_t ReferenceFileDocumentBox.base.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t (*ReferenceFileDocumentBox.base.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = ReferenceFileDocumentBox.base.getter();
  return ReferenceFileDocumentBox.base.modify;
}

uint64_t ReferenceFileDocumentBox.base.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    specialized ReferenceFileDocumentBox.base.setter();
    swift_unknownObjectRelease();
  }
  else
  {
    specialized ReferenceFileDocumentBox.base.setter();
  }
  return swift_unknownObjectRelease();
}

uint64_t property wrapper backing initializer of ReferenceFileDocumentBox.fileURL(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of URL?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  Published.init(initialValue:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t ReferenceFileDocumentBox.fileURL.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t ReferenceFileDocumentBox.fileURL.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v3 = *v1;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v3 + 88);
  v12 = *(_QWORD *)(v3 + 80);
  v8 = v12;
  v13 = v9;
  swift_getKeyPath();
  v11[0] = v8;
  v11[1] = v9;
  swift_getKeyPath();
  outlined init with copy of URL?(a1, (uint64_t)v7);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t (*ReferenceFileDocumentBox.fileURL.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ReferenceFileDocumentBox.fileURL.modify;
}

uint64_t ReferenceFileDocumentBox.isEditable.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t ReferenceFileDocumentBox.isEditable.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t (*ReferenceFileDocumentBox.isEditable.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ReferenceFileDocumentBox.fileURL.modify;
}

void ReferenceFileDocumentBox.fileURL.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t ReferenceFileDocumentBox.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  ReferenceFileDocumentBox.init()();
  return v0;
}

uint64_t *ReferenceFileDocumentBox.init()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v1 = *v0;
  type metadata accessor for Published<Bool>();
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  v27 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - v9;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  v15 = type metadata accessor for Published();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v26 - v18;
  v20 = (uint64_t)v0 + *(_QWORD *)(v1 + 96);
  v30 = 0;
  v21 = type metadata accessor for Optional();
  Published.init(wrappedValue:)((uint64_t)&v30, v21);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v20, v19, v15);
  v22 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v23 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v14, 1, 1, v23);
  property wrapper backing initializer of ReferenceFileDocumentBox.fileURL((uint64_t)v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v22, v10, v27);
  v24 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v31 = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v24, v5, v29);
  *((_BYTE *)v0 + *(_QWORD *)(*v0 + 120)) = 0;
  *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128)) = 0;
  specialized ReferenceFileDocumentBox.base.setter();
  return v0;
}

uint64_t ReferenceFileDocumentBox.read(from:contentType:)(void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t Configuration;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  id v16;
  uint64_t result;
  uint64_t v18;

  v4 = v2;
  v7 = *v4;
  Configuration = type metadata accessor for FileDocumentReadConfiguration(0);
  MEMORY[0x1E0C80A78](Configuration, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v7 + 80);
  v13 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, a2, v13);
  *(_QWORD *)&v11[*(int *)(Configuration + 20)] = a1;
  v14 = *(_QWORD *)(v7 + 88);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 40);
  v16 = a1;
  result = v15(v11, v12, v14);
  if (!v3)
  {
    specialized ReferenceFileDocumentBox.base.setter();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t (*ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(uint64_t a1))(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*result)(void *);
  uint64_t (*v17)(void *);
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a1;
  v2 = *v1;
  v28 = type metadata accessor for UTType();
  v26 = *(_QWORD *)(v28 - 8);
  v3 = *(_QWORD *)(v26 + 64);
  MEMORY[0x1E0C80A78](v28, v4);
  v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v2 + 80);
  v5 = *(_QWORD *)(v2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v11 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v24 - v14;
  result = (uint64_t (*)(void *))ReferenceFileDocumentBox.base.getter();
  if (result)
  {
    v17 = result;
    v18 = v30;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v29, v6, v5);
    v30 = v18;
    if (v18)
    {
      return (uint64_t (*)(void *))swift_unknownObjectRelease();
    }
    else
    {
      v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v24 = AssociatedTypeWitness;
      v25 = v19;
      v19(v11, v15, AssociatedTypeWitness);
      v20 = v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v27, v29, v28);
      v21 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v22 = (v9 + *(unsigned __int8 *)(v20 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
      v23 = (char *)swift_allocObject();
      *((_QWORD *)v23 + 2) = v6;
      *((_QWORD *)v23 + 3) = v5;
      *((_QWORD *)v23 + 4) = v17;
      v25(&v23[v21], v11, v24);
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v23[v22], v27, v28);
      return partial apply for closure #1 in ReferenceFileDocumentBox.snapshotForSerialization(contentType:);
    }
  }
  return result;
}

uint64_t closure #1 in ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, char *, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v20;

  v11 = type metadata accessor for FileDocumentWriteConfiguration(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, a4, v15);
  *(_QWORD *)&v14[*(int *)(v11 + 20)] = a1;
  v16 = *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a6 + 56);
  v17 = a1;
  v18 = v16(a3, v14, a5, a6);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for FileDocumentWriteConfiguration);
  return v18;
}

uint64_t ReferenceFileDocumentBox.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  type metadata accessor for Optional();
  v2 = type metadata accessor for Published();
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v4 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  type metadata accessor for Published<Bool>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);

  return v0;
}

uint64_t ReferenceFileDocumentBox.__deallocating_deinit()
{
  ReferenceFileDocumentBox.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance ReferenceFileDocumentBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;

  type metadata accessor for ReferenceFileDocumentBox(0, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a2);
  result = ObservableObject<>.objectWillChange.getter();
  *a3 = result;
  return result;
}

uint64_t protocol witness for FileWrapperObservableDocumentBox.read(from:contentType:) in conformance ReferenceFileDocumentBox<A>(void *a1, uint64_t a2)
{
  return ReferenceFileDocumentBox.read(from:contentType:)(a1, a2);
}

uint64_t (*protocol witness for FileWrapperObservableDocumentBox.snapshotForSerialization(contentType:) in conformance ReferenceFileDocumentBox<A>(uint64_t a1))(void *a1)
{
  return ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(a1);
}

uint64_t protocol witness for DocumentBaseBox.base.getter in conformance ReferenceFileDocumentBox<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ReferenceFileDocumentBox.base.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DocumentBaseBox.base.setter in conformance ReferenceFileDocumentBox<A>()
{
  specialized ReferenceFileDocumentBox.base.setter();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for DocumentBaseBox.base.modify in conformance ReferenceFileDocumentBox<A>(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)ReferenceFileDocumentBox.base.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for static ObservableDocumentBox.documentBaseClass.getter in conformance ReferenceFileDocumentBox<A>()
{
  return static ReferenceFileDocumentBox.documentBaseClass.getter();
}

uint64_t protocol witness for ObservableDocumentBox.hasLoadedDocument.getter in conformance ReferenceFileDocumentBox<A>()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t (*protocol witness for ObservableDocumentBox.fileURL.modify in conformance ReferenceFileDocumentBox<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ReferenceFileDocumentBox.fileURL.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ObservableDocumentBox.isEditable.modify in conformance ReferenceFileDocumentBox<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ReferenceFileDocumentBox.isEditable.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void *protocol witness for ObservableDocumentBox.undoManager.getter in conformance ReferenceFileDocumentBox<A>()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void protocol witness for ObservableDocumentBox.undoManager.setter in conformance ReferenceFileDocumentBox<A>(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*protocol witness for ObservableDocumentBox.undoManager.modify in conformance ReferenceFileDocumentBox<A>())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for ObservableDocumentBox.readableContentTypes.getter in conformance ReferenceFileDocumentBox<A>(uint64_t a1)
{
  return specialized ReferenceFileDocumentBox.readableContentTypes.getter(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
}

uint64_t protocol witness for ObservableDocumentBox.writableContentTypes.getter in conformance ReferenceFileDocumentBox<A>(uint64_t a1)
{
  return specialized ReferenceFileDocumentBox.writableContentTypes.getter(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
}

uint64_t DocumentGroupConfiguration.NewReferenceFileDocument.provideNewDocument(to:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  type metadata accessor for ReferenceFileDocumentBox(0, a5, a6, a4);
  swift_dynamicCastClassUnconditional();
  v7 = swift_unknownObjectRetain();
  a3(v7);
  specialized ReferenceFileDocumentBox.base.setter();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for NewDocumentProvider.provideNewDocument(to:) in conformance DocumentGroupConfiguration.NewReferenceFileDocument<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return DocumentGroupConfiguration.NewReferenceFileDocument.provideNewDocument(to:)(a1, a2, *(void (**)(uint64_t))v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t, uint64_t, void (*)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.configuration.getter);
}

uint64_t DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X4>, uint64_t a2@<X6>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v10 = ReferenceFileDocumentBox.base.getter();
  result = swift_release();
  if (v10)
  {
    swift_retain();
    ReferenceFileDocumentBox.fileURL.getter();
    swift_release();
    swift_retain();
    v12 = ReferenceFileDocumentBox.isEditable.getter();
    swift_release();
    return ReferenceFileDocumentConfiguration.init(document:fileURL:isEditable:)((uint64_t)v9, v12 & 1, a1, a2, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>(_QWORD *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter);
}

uint64_t closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, _QWORD *), uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[8];

  v14 = *a1;
  swift_retain();
  swift_retain();
  v20[4] = property wrapper backing initializer of DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.modelBox((uint64_t)a1, a4, a5, v15);
  v20[5] = v16;
  v20[6] = a2;
  v20[7] = a3;
  v17 = *(_QWORD *)(v14 + 88);
  v20[0] = *(_QWORD *)(v14 + 80);
  v20[1] = a4;
  v20[2] = v17;
  v20[3] = a5;
  v18 = a6(0, v20);
  MEMORY[0x18D75FFDC](a7, v18);
  View.styleContext<A>(_:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[8];

  v14 = *a1;
  swift_retain();
  swift_retain();
  v20[4] = property wrapper backing initializer of DocumentGroupConfiguration.EditorFileDocumentContainer.modelBox((uint64_t)a1, a4, a5, v15);
  v20[5] = v16;
  v20[6] = a2;
  v20[7] = a3;
  v17 = *(_QWORD *)(v14 + 88);
  v20[0] = *(_QWORD *)(v14 + 80);
  v20[1] = a4;
  v20[2] = v17;
  v20[3] = a5;
  v18 = a6(0, v20);
  MEMORY[0x18D75FFDC](a7, v18);
  View.styleContext<A>(_:)();
  swift_release();
  return swift_release();
}

uint64_t property wrapper backing initializer of DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.modelBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for ReferenceFileDocumentBox(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReferenceFileDocumentBox<A>, v4);
  return ObservedObject.init(wrappedValue:)();
}

uint64_t DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t, uint64_t, void (*)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer.configuration.getter);
}

uint64_t DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t, uint64_t, void (*)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  char *v43;
  void (*v44)(char *);
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  _QWORD v98[2];
  _QWORD v99[2];
  _QWORD v100[2];
  _QWORD v101[2];
  _QWORD v102[2];
  _QWORD v103[2];
  uint64_t v104;

  v96 = a8;
  v91 = a4;
  v90 = a3;
  v89 = a1;
  v95 = a9;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = a7;
  v87 = type metadata accessor for ReferenceFileDocumentConfiguration(0, a5, a7, v18);
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v19);
  v21 = (char *)&v75 - v20;
  v80 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  v26 = type metadata accessor for _EnvironmentKeyWritingModifier();
  v27 = type metadata accessor for ModifiedContent();
  v82 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v88 = (char *)&v75 - v29;
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  v30 = type metadata accessor for ModifiedContent();
  v83 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v85 = (uint64_t)&v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v81 = (char *)&v75 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v84 = (char *)&v75 - v38;
  v39 = type metadata accessor for _ConditionalContent();
  v93 = *(_QWORD *)(v39 - 8);
  v94 = v39;
  v42 = MEMORY[0x1E0C80A78](v39, v40);
  v43 = (char *)&v75 - v41;
  if (*(_BYTE *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 120)) != 1)
  {
    v104 = static Color.clear.getter();
    v63 = MEMORY[0x1E0CE65C0];
    v64 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v26);
    v49 = v96;
    v103[0] = v96;
    v103[1] = v64;
    v65 = MEMORY[0x1E0CE2E70];
    v66 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v27, v103);
    v67 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, v63);
    v102[0] = v66;
    v102[1] = v67;
    MEMORY[0x18D75FFDC](v65, v30, v102);
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v104, v30, MEMORY[0x1E0CE7170]);
    swift_release();
    v53 = v26;
    goto LABEL_5;
  }
  v76 = v27;
  v77 = v17;
  v78 = (char *)&v75 - v41;
  v79 = v26;
  v44 = v90;
  a10(v89, a2, (void (*)(_QWORD))v90, v91, a5, a6, v92, v96, v42);
  v44(v21);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v21, v87);
  swift_retain();
  v45 = ReferenceFileDocumentBox.base.getter();
  result = swift_release();
  if (v45)
  {
    v47 = v96;
    View.environmentObject<A>(_:)();
    swift_unknownObjectRelease();
    v48 = v25;
    v49 = v47;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v48, a6);
    swift_getKeyPath();
    v50 = v77;
    DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.documentConfiguration.getter(v77);
    v51 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
    v52 = MEMORY[0x1E0CE65C0];
    v53 = v79;
    v54 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v79);
    v98[0] = v47;
    v98[1] = v54;
    v27 = v76;
    v55 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v76, v98);
    v56 = v81;
    v57 = v88;
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v57, v27);
    v58 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, v52);
    v97[0] = v55;
    v97[1] = v58;
    v59 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v30, v97);
    v60 = (uint64_t)v84;
    static ViewBuilder.buildExpression<A>(_:)(v56, v30, v59);
    v61 = *(void (**)(char *, uint64_t))(v83 + 8);
    v61(v56, v30);
    v62 = v85;
    static ViewBuilder.buildBlock<A>(_:)(v60, v30, v85);
    v43 = v78;
    static ViewBuilder.buildEither<A, B>(first:)(v62, v30);
    v61((char *)v62, v30);
    v61((char *)v60, v30);
LABEL_5:
    v68 = MEMORY[0x1E0CE7140];
    v69 = MEMORY[0x1E0CE65C0];
    v70 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v53);
    v101[0] = v49;
    v101[1] = v70;
    v71 = MEMORY[0x1E0CE2E70];
    v72 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v27, v101);
    v73 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, v69);
    v100[0] = v72;
    v100[1] = v73;
    v99[0] = MEMORY[0x18D75FFDC](v71, v30, v100);
    v99[1] = v68;
    v74 = v94;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v94, v99);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v43, v74, v95);
    return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v43, v74);
  }
  __break(1u);
  return result;
}

uint64_t DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X4>, uint64_t a2@<X6>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v10 = ReferenceFileDocumentBox.base.getter();
  result = swift_release();
  if (v10)
  {
    swift_retain();
    ReferenceFileDocumentBox.fileURL.getter();
    swift_release();
    return ReferenceFileDocumentConfiguration.init(document:fileURL:isEditable:)((uint64_t)v9, 0, a1, a2, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.documentConfiguration.getter@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  swift_retain();
  v2 = ReferenceFileDocumentBox.isEditable.getter();
  swift_release();
  type metadata accessor for DocumentConfiguration();
  swift_retain();
  ReferenceFileDocumentBox.fileURL.getter();
  result = swift_release();
  *a1 = v2 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer<A, B>(_QWORD *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer.body.getter);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], v3[3], a1[2], a1[3], a1[4], a1[5]);
}

uint64_t key path setter for ReferenceFileDocumentBox.fileURL : <A>ReferenceFileDocumentBox<A>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v5);
  return ReferenceFileDocumentBox.fileURL.setter((uint64_t)v5);
}

uint64_t specialized ReferenceFileDocumentBox.base.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_unknownObjectRetain();
  swift_retain();
  static Published.subscript.setter();
  return ReferenceFileDocumentBox.base.didset();
}

uint64_t specialized ReferenceFileDocumentConfiguration.document.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_18739FDEC()
{
  return 16;
}

__n128 sub_18739FDF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static ReferenceFileDocument.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ReferenceFileDocument.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ReferenceFileDocument.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ReferenceFileDocument.snapshot(contentType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ReferenceFileDocument.fileWrapper(snapshot:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

void type metadata completion function for ReferenceFileDocumentConfiguration()
{
  unint64_t v0;

  type metadata accessor for URL?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for ReferenceFileDocumentConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_unknownObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for URL?(0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  }
  return v4;
}

uint64_t destroy for ReferenceFileDocumentConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for ReferenceFileDocumentConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for URL?(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  return a1;
}

_QWORD *assignWithCopy for ReferenceFileDocumentConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for URL?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  return a1;
}

_OWORD *initializeWithTake for ReferenceFileDocumentConfiguration(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for URL?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  return a1;
}

_QWORD *assignWithTake for ReferenceFileDocumentConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_unknownObjectRelease();
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    type metadata accessor for URL?(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceFileDocumentConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873A0488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for URL?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReferenceFileDocumentConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873A0510(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for URL?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ReferenceFileDocumentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReferenceFileDocumentConfiguration);
}

void type metadata completion function for ReferenceFileDocumentBox()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Optional();
  type metadata accessor for Published();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Bool>();
      if (v2 <= 0x3F)
        swift_initClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for ReferenceFileDocumentBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReferenceFileDocumentBox);
}

void type metadata accessor for Published<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
  }
}

uint64_t sub_1873A06CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ReferenceFileDocumentBox.base.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1873A06F4()
{
  swift_unknownObjectRetain();
  specialized ReferenceFileDocumentBox.base.setter();
  return swift_unknownObjectRelease();
}

uint64_t sub_1873A0724()
{
  return 16;
}

__n128 sub_1873A0730(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized ReferenceFileDocumentBox.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t specialized ReferenceFileDocumentBox.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1873A0784()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1[2];
  v4 = v1[3];
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UTType() - 8) + 80);
  return closure #1 in ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(a1, v1[4], (uint64_t)v1 + v6, (uint64_t)v1 + ((v6 + v7 + v8) & ~v8), v3, v4);
}

uint64_t sub_1873A08F8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ReferenceFileDocumentBox.isEditable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1873A0924()
{
  return ReferenceFileDocumentBox.isEditable.setter();
}

uint64_t sub_1873A0948()
{
  return 16;
}

__n128 sub_1873A0954(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1873A0960()
{
  return ReferenceFileDocumentBox.fileURL.getter();
}

uint64_t sub_1873A0984()
{
  return 16;
}

__n128 sub_1873A0990(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1873A099C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer<A, B>);
}

{
  uint64_t *v1;

  return closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for DocumentGroupConfiguration.ViewerFileDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.ViewerFileDocumentContainer<A, B>);
}

void type metadata accessor for DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for StyleContextWriter<DocumentStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<DocumentStyleContext>)
  {
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DocumentStyleContext>);
  }
}

uint64_t type metadata accessor for DocumentGroupConfiguration.NewReferenceFileDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DocumentGroupConfiguration.NewReferenceFileDocument);
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>);
}

{
  uint64_t *v1;

  return closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for DocumentGroupConfiguration.EditorFileDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>);
}

void type metadata accessor for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer()
{
  JUMPOUT(0x18D75FF28);
}

_QWORD *assignWithCopy for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void type metadata accessor for DocumentConfiguration?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for DocumentConfiguration?, (uint64_t (*)(uint64_t))type metadata accessor for DocumentConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, (uint64_t (*)(uint64_t))type metadata accessor for DocumentConfiguration?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
}

uint64_t sub_1873A0BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];

  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for Optional();
  v2 = type metadata accessor for _EnvironmentKeyWritingModifier();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for _ConditionalContent();
  v6 = MEMORY[0x1E0CE65C0];
  v11[0] = v1;
  v11[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v2);
  v7 = MEMORY[0x1E0CE2E70];
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v11);
  v10[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, v6);
  v9[0] = MEMORY[0x18D75FFDC](v7, v4, v10);
  v9[1] = MEMORY[0x1E0CE7140];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v5, v9);
}

uint64_t View.debugLog(_:file:line:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t EnvironmentValues.triggerSubmission.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t *closure #1 in OnSubmitModifier.body(content:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(uint64_t *);
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  if ((*(_QWORD *)a2 & *result) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_BYTE *)(a2 + 40);
    outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
    v7 = (void (*)(uint64_t *))specialized Environment.wrappedValue.getter(v4, v5, v6);
    v8 = outlined consume of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
    if (v7)
    {
      v9 = v2;
      v7(&v9);
      v8 = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(a2 + 8))(v8);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnSubmitModifier@<X0>(uint64_t *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t KeyPath;
  _OWORD *v5;
  __int128 v6;
  __int128 v8;
  _OWORD v9[2];

  v3 = v1[1];
  v8 = *v1;
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)v1 + 25);
  KeyPath = swift_getKeyPath();
  v5 = (_OWORD *)swift_allocObject();
  v6 = v1[1];
  v5[1] = *v1;
  v5[2] = v6;
  *(_OWORD *)((char *)v5 + 41) = *(__int128 *)((char *)v1 + 25);
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in OnSubmitModifier.body(content:);
  a1[2] = (uint64_t)v5;
  return outlined retain of OnSubmitModifier((uint64_t)&v8);
}

uint64_t *closure #1 in SubmitScopeModifier.body(content:)(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(uint64_t *);
  uint64_t v8;

  v3 = *result;
  if ((*(_BYTE *)a2 & 1) == 0 || (*(_QWORD *)(a2 + 8) & v3) == 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_BYTE *)(a2 + 32);
    outlined retain of SubmitScopeModifier(a2);
    v7 = (void (*)(uint64_t *))specialized Environment.wrappedValue.getter(v4, v5, v6);
    result = (uint64_t *)outlined release of SubmitScopeModifier(a2);
    if (v7)
    {
      v8 = v3;
      v7(&v8);
      return (uint64_t *)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
    }
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SubmitScopeModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t KeyPath;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v3 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v3;
  v9 = *(_BYTE *)(v1 + 32);
  KeyPath = swift_getKeyPath();
  v5 = swift_allocObject();
  v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_BYTE *)(v5 + 48) = *(_BYTE *)(v1 + 32);
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in SubmitScopeModifier.body(content:);
  a1[2] = v5;
  return outlined retain of SubmitScopeModifier((uint64_t)v8);
}

uint64_t View.onSubmit(of:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t KeyPath;
  _QWORD v12[5];
  char v13;

  v9 = *a1;
  KeyPath = swift_getKeyPath();
  v12[0] = v9;
  v12[1] = a2;
  v12[2] = a3;
  v12[3] = KeyPath;
  v12[4] = 0;
  v13 = 0;
  swift_retain();
  MEMORY[0x18D75B4AC](v12, a4, &type metadata for OnSubmitModifier, a5);
  swift_release();
  return outlined consume of Environment<AppIntentExecutor?>.Content(KeyPath, 0, 0);
}

uint64_t View.submitScope(_:)(char a1, uint64_t a2, uint64_t a3)
{
  _BYTE v7[8];
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v11;

  if (one-time initialization token for all != -1)
    swift_once();
  v7[0] = a1 & 1;
  v8 = static SubmitTriggers.all;
  KeyPath = swift_getKeyPath();
  v10 = 0;
  v11 = 0;
  MEMORY[0x18D75B4AC](v7, a2, &type metadata for SubmitScopeModifier, a3);
  return swift_release();
}

uint64_t sub_1873A11B8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA16OnSubmitModifierVGAaBHPxAaBHD1__AfA0cH0HPyHCHCTm(a1, (uint64_t)&type metadata for OnSubmitModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type OnSubmitModifier and conformance OnSubmitModifier);
}

unint64_t lazy protocol witness table accessor for type OnSubmitModifier and conformance OnSubmitModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnSubmitModifier and conformance OnSubmitModifier;
  if (!lazy protocol witness table cache variable for type OnSubmitModifier and conformance OnSubmitModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnSubmitModifier, &type metadata for OnSubmitModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnSubmitModifier and conformance OnSubmitModifier);
  }
  return result;
}

uint64_t sub_1873A1210(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA16OnSubmitModifierVGAaBHPxAaBHD1__AfA0cH0HPyHCHCTm(a1, (uint64_t)&type metadata for SubmitScopeModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA16OnSubmitModifierVGAaBHPxAaBHD1__AfA0cH0HPyHCHCTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = a3();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

unint64_t lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubmitScopeModifier and conformance SubmitScopeModifier;
  if (!lazy protocol witness table cache variable for type SubmitScopeModifier and conformance SubmitScopeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubmitScopeModifier, &type metadata for SubmitScopeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitScopeModifier and conformance SubmitScopeModifier);
  }
  return result;
}

uint64_t destroy for SubmitScopeModifier(uint64_t a1)
{
  return outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for SubmitScopeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v3, v4, v5);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithCopy for SubmitScopeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v3, v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  outlined consume of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SubmitScopeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubmitScopeModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[33])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SubmitScopeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubmitScopeModifier()
{
  return &type metadata for SubmitScopeModifier;
}

uint64_t destroy for OnSubmitModifier(uint64_t a1)
{
  swift_release();
  return outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for OnSubmitModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for OnSubmitModifier(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  v5 = v2[3];
  v6 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  outlined copy of Environment<AppIntentExecutor?>.Content(v5, v6, (char)v2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for OnSubmitModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnSubmitModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnSubmitModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnSubmitModifier()
{
  return &type metadata for OnSubmitModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SubmitScopeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnSubmitModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1873A16AC()
{
  uint64_t v0;

  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in OnSubmitModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in OnSubmitModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined retain of OnSubmitModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  return a1;
}

uint64_t sub_1873A172C()
{
  uint64_t v0;

  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in SubmitScopeModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in SubmitScopeModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined retain of SubmitScopeModifier(uint64_t a1)
{
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t outlined release of SubmitScopeModifier(uint64_t a1)
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.TriggerSubmissionKey()
{
  return &type metadata for EnvironmentValues.TriggerSubmissionKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>, &lazy cache variable for type metadata for _ViewModifier_Content<OnSubmitModifier>, (void (*)(void))lazy protocol witness table accessor for type OnSubmitModifier and conformance OnSubmitModifier);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnSubmitModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<OnSubmitModifier>, (void (*)(void))lazy protocol witness table accessor for type OnSubmitModifier and conformance OnSubmitModifier);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>)
  {
    type metadata accessor for TriggerSubmitAction?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>);
  }
}

void type metadata accessor for TriggerSubmitAction?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TriggerSubmitAction?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TriggerSubmitAction?);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>, &lazy cache variable for type metadata for _ViewModifier_Content<SubmitScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<SubmitScopeModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<SubmitScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, a3, a4);
    type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>();
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t AutomaticSliderStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t KeyPath;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v6 = a1[4];
  v8 = a1[5];
  v10 = a1[6];
  v9 = a1[7];
  v11 = *((_BYTE *)a1 + 64);
  KeyPath = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 56) = v9;
  *(_WORD *)(a2 + 64) = 1;
  *(_BYTE *)(a2 + 66) = v11;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_QWORD *)(a2 + 104) = KeyPath;
  *(_BYTE *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in AutomaticSliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for SliderStyle.makeBody(configuration:) in conformance AutomaticSliderStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomaticSliderStyle.makeBody(configuration:)(a1, a2);
}

ValueMetadata *type metadata accessor for AutomaticSliderStyle()
{
  return &type metadata for AutomaticSliderStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for SliderStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>>)
  {
    type metadata accessor for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>();
    type metadata accessor for SliderStyleModifier<MenuSliderStyle>(255, &lazy cache variable for type metadata for SliderStyleModifier<PlatformSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformSliderStyle and conformance PlatformSliderStyle, (uint64_t)&type metadata for PlatformSliderStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>)
  {
    type metadata accessor for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>;
  if (!lazy cache variable for type metadata for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>)
  {
    lazy protocol witness table accessor for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel();
    type metadata accessor for Slider();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleConfiguration.ValueLabel, &type metadata for SliderStyleConfiguration.ValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for SliderStyleModifier<MenuSliderStyle>(255, &lazy cache variable for type metadata for SliderStyleModifier<MenuSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuSliderStyle and conformance MenuSliderStyle, (uint64_t)&type metadata for MenuSliderStyle);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE6398]);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuSliderStyle and conformance MenuSliderStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuSliderStyle and conformance MenuSliderStyle;
  if (!lazy protocol witness table cache variable for type MenuSliderStyle and conformance MenuSliderStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuSliderStyle, &type metadata for MenuSliderStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuSliderStyle and conformance MenuSliderStyle);
  }
  return result;
}

void type metadata accessor for SliderStyleModifier<MenuSliderStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for SliderStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformSliderStyle and conformance PlatformSliderStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformSliderStyle and conformance PlatformSliderStyle;
  if (!lazy protocol witness table cache variable for type PlatformSliderStyle and conformance PlatformSliderStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformSliderStyle, &type metadata for PlatformSliderStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformSliderStyle and conformance PlatformSliderStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel> and conformance Slider<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, (uint64_t)&protocol conformance descriptor for Slider<A, B>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for SliderStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t RoundedBorderTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(a1, a2);
}

void type metadata accessor for TextField<_TextFieldStyleLabel>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>)
  {
    v4 = type metadata accessor for TextField(0, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>);
  }
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in RoundedBorderTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for RoundedBorderTextFieldStyle()
{
  return &type metadata for RoundedBorderTextFieldStyle;
}

unint64_t lazy protocol witness table accessor for type RoundedBorderTextFieldStyle.BodyContent and conformance RoundedBorderTextFieldStyle.BodyContent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RoundedBorderTextFieldStyle.BodyContent and conformance RoundedBorderTextFieldStyle.BodyContent;
  if (!lazy protocol witness table cache variable for type RoundedBorderTextFieldStyle.BodyContent and conformance RoundedBorderTextFieldStyle.BodyContent)
  {
    v1 = type metadata accessor for RoundedBorderTextFieldStyle.BodyContent(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RoundedBorderTextFieldStyle.BodyContent, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedBorderTextFieldStyle.BodyContent and conformance RoundedBorderTextFieldStyle.BodyContent);
  }
  return result;
}

uint64_t specialized LazyHVStack<>.place(children:length:minorGeometry:emit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t))
{
  uint64_t result;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  result = _ProposedSize.init(_:in:by:)();
  if (*(_QWORD *)(a1 + 16))
  {
    v12 = a1 + 32;
    a9(result);
    AlignmentGuide.fraction.getter();
    UnitPoint.init(_:in:by:)();
    v13 = *(double *)(a7 + 112) + 0.0;
    if (*(_BYTE *)(a7 + 24))
      v14 = *(double *)(a7 + 112) + 0.0;
    else
      v14 = 0.0;
    if (*(_BYTE *)(a7 + 24))
      v13 = 0.0;
    return specialized StackPlacement.emit(_:at:size:anchor:)(v12, v15, v16, v17, v18, v13, v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for IncrementalStack.minorGeometry(updatingSize:) in conformance LazyHStackLayout(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  return 1;
}

BOOL protocol witness for static IncrementalLayout.hasMultipleViewsInAxis(_:) in conformance LazyHStackLayout(char a1)
{
  return (a1 & 1) == 0;
}

void LimitedAvailabilityToolbarContent.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilityToolbarContent.init<A>(erasing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for LimitedAvailabilityToolbarContentStorage(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 96) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 112), a1);
  return v5;
}

uint64_t type metadata accessor for LimitedAvailabilityToolbarContentStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityToolbarContentStorage);
}

uint64_t static LimitedAvailabilityToolbarContent._makeToolbar(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  id v14;
  uint64_t result;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  id v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *a2;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v9 = a2[5];
  v8 = a2[6];
  v10 = *((_DWORD *)a2 + 14);
  v18 = a2[8];
  v16 = *((_DWORD *)a2 + 18);
  v17 = *((_DWORD *)a2 + 2);
  PreferencesInputs.makeIndirectOutputs()();
  v11 = v20;
  v12 = (int)v21;
  LODWORD(v20) = v3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityToolbarContent>, (uint64_t)&type metadata for LimitedAvailabilityToolbarContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v13 = _GraphValue.value.getter();
  v14 = (id)AGSubgraphGetCurrent();
  if (!v14)
    __break(1u);
  v21 = v14;
  v22 = v4;
  LODWORD(v20) = v13;
  v23 = v17;
  v24 = v5;
  v25 = v6;
  v26 = v7;
  v27 = v9;
  v28 = v8;
  v30 = v18;
  v29 = v10;
  v31 = v16;
  v32 = v11;
  v33 = v12;
  v34 = v18;
  v35 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of LimitedAvailabilityToolbarContent.IndirectOutputs((uint64_t)&v20);
  result = PreferencesOutputs.setIndirectDependency(_:)();
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v18;
  return result;
}

void LimitedAvailabilityToolbarContent.IndirectOutputs.updateValue()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  if (!*(_QWORD *)(v0 + 120))
  {
    v1 = (id)AGSubgraphGetGraph();
    v2 = (void *)AGSubgraphCreate();

    *(_QWORD *)(v0 + 120) = v2;
    v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityToolbarContent.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityToolbarContent.IndirectOutputs.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 56);
  v25 = *(_DWORD *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 80);
  v22 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  v6 = *(_DWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v18 = *(_OWORD *)(v2 + 48);
  v19 = *(_OWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(v2 + 72);
  v10 = *(_BYTE *)(v2 + 80);
  v11 = *(_BYTE *)(v2 + 81);
  v12 = *(_QWORD *)(v2 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(_QWORD *)(v13 + 64) = v9;
  *(_QWORD *)(v13 + 72) = v8;
  *(_BYTE *)(v13 + 80) = v10;
  *(_BYTE *)(v13 + 81) = v11;
  *(_QWORD *)(v13 + 88) = v12;
  swift_retain();
  v14 = *(_QWORD *)(a1 + 96);
  LODWORD(v9) = *(_DWORD *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  v28 = v20;
  v29 = v22;
  v30 = v13;
  v31 = v4;
  v32 = v5;
  v33 = v21;
  v34 = v3;
  v35 = v25;
  v36 = v24;
  v37 = v23;
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v38, &v26, &v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v28 = v14;
  v29 = v9;
  v26 = v38;
  v27 = v39;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for ToolbarContent.body.getter in conformance LimitedAvailabilityToolbarContent()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void LimitedAvailabilityToolbarContentStorageBase._makeToolbar(content:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilityToolbarContentStorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LimitedAvailabilityToolbarContentStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityToolbarContentStorage._makeToolbar(content:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  _BYTE v28[4];

  v4 = *v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v9 = a2[8];
  v10 = *((_DWORD *)a2 + 18);
  v11 = *(_QWORD *)(*v2 + 96);
  LODWORD(v19) = *a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityToolbarContent>, (uint64_t)&type metadata for LimitedAvailabilityToolbarContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v18 = *(_OWORD *)(a2 + 5);
  v12 = a2[3];
  v13 = a2[4];
  _GraphValue.value.getter();
  v14 = *(_QWORD *)(v4 + 104);
  v16 = type metadata accessor for LimitedAvailabilityToolbarContentStorage.Child(0, v11, v14, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityToolbarContentStorage<A>.Child, v16);
  _GraphValue.init<A>(_:)();
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = v12;
  v23 = v13;
  v24 = v18;
  v25 = v8;
  v26 = v9;
  v27 = v10;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(v14 + 32))(v28, &v19, v11, v14);
}

uint64_t LimitedAvailabilityToolbarContentStorage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityToolbarContentStorage(0, a1, a2, v6);
  v7 = swift_dynamicCastClassUnconditional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v7 + *(_QWORD *)(*(_QWORD *)v7 + 112), a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityToolbarContentStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityToolbarContentStorage.Child.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityToolbarContent.IndirectOutputs, &unk_1E1B02E80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs);
  }
  return result;
}

uint64_t outlined release of LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityToolbarContent()
{
  return &type metadata for LimitedAvailabilityToolbarContent;
}

uint64_t type metadata accessor for LimitedAvailabilityToolbarContentStorageBase()
{
  return objc_opt_self();
}

uint64_t method lookup function for LimitedAvailabilityToolbarContentStorageBase()
{
  return swift_lookUpClassMethod();
}

void destroy for LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1)
{

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v6 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  v7 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v7 = *(void **)(a1 + 120);
  v8 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v4 = *(void **)(a1 + 120);
  v5 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v5;

  return a1;
}

void *type metadata accessor for LimitedAvailabilityToolbarContent.IndirectOutputs()
{
  return &unk_1E1B02E80;
}

uint64_t type metadata accessor for LimitedAvailabilityToolbarContentStorage.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityToolbarContentStorage.Child);
}

void base witness table accessor for _AttributeBody in LimitedAvailabilityToolbarContentStorage<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t View.navigationBarHidden(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v7;

  type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_OWORD *)(inited + 48) = 0u;
  *(_QWORD *)(inited + 64) = 0;
  *(_OWORD *)(inited + 32) = 0u;
  if ((a1 & 1) != 0)
    v7 = 2;
  else
    v7 = 1;
  View.toolbar(_:for:)(v7, inited, a2, a3);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

void type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement>);
  }
}

uint64_t View.navigationBarTitle(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return View.navigationTitle(_:)(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t View.navigationBarTitle(_:displayMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _BYTE v30[9];

  v26 = a4;
  v27 = a8;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v15 = type metadata accessor for ModifiedContent();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v25 - v18;
  LOBYTE(a5) = *a5;
  View.navigationTitle(_:)(a1, a2, a3 & 1, v26, a6, a7, (uint64_t)&v25 - v18);
  v30[0] = (_BYTE)a5;
  v29[0] = a7;
  v29[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v20 = MEMORY[0x1E0CE2E70];
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v29);
  v22 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  v28[0] = v21;
  v28[1] = v22;
  v23 = MEMORY[0x18D75FFDC](v20, v15, v28);
  View.navigationBarTitleDisplayMode(_:)(v30, v15, v23, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t View.navigationBarTitle(_:displayMode:)@<X0>(uint64_t a1@<X3>, _BYTE *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  char v23;

  v19 = a1;
  v20 = a5;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v19 - v12;
  LOBYTE(a2) = *a2;
  View.navigationTitle(_:)(a3, a4, (uint64_t)&v19 - v12);
  v23 = (char)a2;
  v22[0] = a4;
  v22[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v14 = MEMORY[0x1E0CE2E70];
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v22);
  v16 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  v21[0] = v15;
  v21[1] = v16;
  v17 = MEMORY[0x18D75FFDC](v14, v9, v21);
  View.navigationBarTitleDisplayMode(_:)(&v23, v9, v17, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t View.navigationBarTitle<A>(_:displayMode:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[2];
  char v24;

  v21 = a5;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v10 = type metadata accessor for ModifiedContent();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v20 - v13;
  LOBYTE(a2) = *a2;
  View.navigationTitle<A>(_:)(a1, a3, a4, (uint64_t)&v20 - v13);
  v24 = (char)a2;
  v23[0] = a4;
  v23[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v15 = MEMORY[0x1E0CE2E70];
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v23);
  v17 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  v22[0] = v16;
  v22[1] = v17;
  v18 = MEMORY[0x18D75FFDC](v15, v10, v22);
  View.navigationBarTitleDisplayMode(_:)(&v24, v10, v18, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t View.navigationBarBanner<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  v13[6] = a1;
  v13[7] = a2;
  v8 = type metadata accessor for ToolbarItem(255, MEMORY[0x1E0DEE9C0] + 8, a4, a6);
  v11 = type metadata accessor for TupleToolbarContent(0, v8, v9, v10);
  return View.toolbar<A>(content:)((void (*)(double))partial apply for closure #1 in View.navigationBarBanner<A>(_:), (uint64_t)v13, a3, v11, a5, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
}

uint64_t closure #1 in View.navigationBarBanner<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void (*v18)(_OWORD *, uint64_t);
  _BYTE v20[48];

  v9 = type metadata accessor for ToolbarItem(0, MEMORY[0x1E0DEE9C0] + 8, a4, a6);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v20[-v16];
  if (one-time initialization token for principal != -1)
    swift_once();
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement.principal, (uint64_t)v20);
  ToolbarItem<>.init(placement:content:)((uint64_t)v20, a1, a4, a6, v13);
  static ViewBuilder.buildExpression<A>(_:)(v13, v9, &protocol witness table for ToolbarItem<A, B>);
  v18 = *(void (**)(_OWORD *, uint64_t))(v10 + 8);
  v18(v13, v9);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v17, v9, &protocol witness table for ToolbarItem<A, B>);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v17, v9);
}

uint64_t partial apply for closure #1 in View.navigationBarBanner<A>(_:)()
{
  uint64_t v0;

  return closure #1 in View.navigationBarBanner<A>(_:)(*(void (**)(uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t View.navigationBarBackButtonHidden(_:)()
{
  return View.preference<A>(key:value:)();
}

void View.navigationBarBackgroundColor(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL static NavigationBarItem.TitleDisplayMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void NavigationBarItem.TitleDisplayMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int NavigationBarItem.TitleDisplayMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type NavigationBarItem.TitleDisplayMode and conformance NavigationBarItem.TitleDisplayMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationBarItem.TitleDisplayMode and conformance NavigationBarItem.TitleDisplayMode;
  if (!lazy protocol witness table cache variable for type NavigationBarItem.TitleDisplayMode and conformance NavigationBarItem.TitleDisplayMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationBarItem.TitleDisplayMode, &type metadata for NavigationBarItem.TitleDisplayMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarItem.TitleDisplayMode and conformance NavigationBarItem.TitleDisplayMode);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NavigationBarItem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1873A3D30 + 4 * byte_187C29AC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1873A3D64 + 4 * byte_187C29AC0[v4]))();
}

uint64_t sub_1873A3D64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873A3D6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1873A3D74);
  return result;
}

uint64_t sub_1873A3D80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1873A3D88);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1873A3D8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873A3D94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarItem()
{
  return &type metadata for NavigationBarItem;
}

uint64_t storeEnumTagSinglePayload for NavigationBarItem.TitleDisplayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1873A3DFC + 4 * byte_187C29ACF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1873A3E30 + 4 * byte_187C29ACA[v4]))();
}

uint64_t sub_1873A3E30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873A3E38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1873A3E40);
  return result;
}

uint64_t sub_1873A3E4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1873A3E54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1873A3E58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873A3E60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarItem.TitleDisplayMode()
{
  return &type metadata for NavigationBarItem.TitleDisplayMode;
}

uint64_t sub_1873A3E7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ToolbarAppearanceModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1873A3ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t sub_1873A3FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t sub_1873A409C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v13[0] = v1;
  v13[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v6 = MEMORY[0x1E0CE2E70];
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v13);
  v8 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  v12[0] = v7;
  v12[1] = v8;
  v11[0] = MEMORY[0x18D75FFDC](v6, v3, v12);
  v11[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v10[0] = MEMORY[0x18D75FFDC](v6, v4, v11);
  v10[1] = v8;
  return MEMORY[0x18D75FFDC](v6, v5, v10);
}

uint64_t sub_1873A41EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v13[0] = v1;
  v13[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v6 = MEMORY[0x1E0CE2E70];
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v13);
  v8 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  v12[0] = v7;
  v12[1] = v8;
  v11[0] = MEMORY[0x18D75FFDC](v6, v3, v12);
  v11[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v10[0] = MEMORY[0x18D75FFDC](v6, v4, v11);
  v10[1] = v8;
  return MEMORY[0x18D75FFDC](v6, v5, v10);
}

uint64_t sub_1873A4340(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v1 = a1[2];
  v2 = MEMORY[0x1E0DEE9C0] + 8;
  v3 = type metadata accessor for ToolbarItem(255, MEMORY[0x1E0DEE9C0] + 8, a1[1], a1[3]);
  v6 = type metadata accessor for TupleToolbarContent(255, v3, v4, v5);
  type metadata accessor for ToolbarModifier(255, v2, v6, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = &protocol witness table for ToolbarModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9);
}

uint64_t sub_1873A43DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey>, (uint64_t)&type metadata for NavigationBarBackButtonHiddenKey, (uint64_t)&protocol witness table for NavigationBarBackButtonHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey>, (uint64_t)&type metadata for NavigationBarBackButtonHiddenKey, (uint64_t)&protocol witness table for NavigationBarBackButtonHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarBackButtonHiddenKey()
{
  return &type metadata for NavigationBarBackButtonHiddenKey;
}

id UIKitPasteControl.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  double v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  ValueMetadata *v29;
  char v30;

  type metadata accessor for UIButton.Configuration.CornerStyle?();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v27 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v26 - v13;
  v28 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)v1;
  LOBYTE(a1) = *(_BYTE *)(v1 + 8);
  v16 = *(_QWORD *)(v1 + 16);
  v17 = *(unsigned __int8 *)(v1 + 24);
  v18 = *(unsigned __int8 *)(v1 + 25);
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3AB8]), sel_init);
  outlined copy of Environment<Bool>.Content(v15, a1);
  specialized Environment.wrappedValue.getter(v15, a1, (uint64_t *)&v29);
  outlined consume of Environment<Bool>.Content(v15, a1);
  if (v29)
  {
    if (v29 == &type metadata for TitleAndIconLabelStyle)
    {
      v20 = 0;
    }
    else if (v29 == &type metadata for TitleOnlyLabelStyle)
    {
      v20 = 2;
    }
    else
    {
      if (v29 != &type metadata for IconOnlyLabelStyle)
        goto LABEL_9;
      v20 = 1;
    }
    objc_msgSend(v19, sel_setDisplayMode_, v20);
  }
LABEL_9:
  outlined copy of Environment<CGFloat?>.Content(v16, v17, v18);
  specialized Environment.wrappedValue.getter(v16, v17 | (v18 << 8), (uint64_t)&v29);
  outlined consume of Environment<CGFloat?>.Content(v16, v17, v18);
  if (v30 == 1)
    __asm { BR              X11 }
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v6, *MEMORY[0x1E0DC3068], v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v27, v14, v7);
  UIPasteControlConfiguration.cornerStyle.setter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  outlined copy of Environment<CGFloat?>.Content(v16, v17, v18);
  specialized Environment.wrappedValue.getter(v16, v17 | (v18 << 8), (uint64_t)&v29);
  outlined consume of Environment<CGFloat?>.Content(v16, v17, v18);
  if ((v30 & 1) == 0)
    objc_msgSend(v19, sel_setCornerRadius_, *(double *)&v29);
  v21 = v28;
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3AB0]), sel_initWithConfiguration_, v19);
  objc_msgSend(v22, sel_setTarget_, v21);
  LODWORD(v23) = 1144750080;
  objc_msgSend(v22, sel_setContentHuggingPriority_forAxis_, 0, v23);
  LODWORD(v24) = 1144750080;
  objc_msgSend(v22, sel_setContentHuggingPriority_forAxis_, 1, v24);

  return v22;
}

uint64_t ButtonBorderShape.cornerRadius.getter()
{
  _BYTE *v0;

  if (v0[8])
    return 0;
  else
    return *(_QWORD *)v0;
}

uint64_t destroy for UIKitPasteControl(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  outlined consume of Environment<Color?>.Content(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for UIKitPasteControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 25);
  v8 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v6, v8, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v7;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Color?>.Content(v9, v10);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v12;
  v13 = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIKitPasteControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 25);
  v10 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = v8;
  v13 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 25) = v9;
  outlined consume of Environment<CGFloat?>.Content(v11, v13, v12);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Color?>.Content(v14, v15);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(unsigned __int8 *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = v15;
  outlined consume of Environment<Color?>.Content(v16, v17);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v18, v19);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v18;
  *(_BYTE *)(a1 + 56) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v22;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UIKitPasteControl(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *((_BYTE *)a2 + 25);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = a2[2];
  v12 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v9;
  outlined consume of Environment<CGFloat?>.Content(v10, v12, v11);
  v13 = *((_BYTE *)a2 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(unsigned __int8 *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v13;
  outlined consume of Environment<Color?>.Content(v14, v15);
  v16 = *((_BYTE *)a2 + 56);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = v16;
  outlined consume of Environment<Bool>.Content(v17, v18);
  swift_bridgeObjectRelease();
  v19 = a2[10];
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 80) = v19;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitPasteControl(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitPasteControl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitPasteControl()
{
  return &type metadata for UIKitPasteControl;
}

void UIKitPasteControl.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  id v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  ValueMetadata *v38;
  double v39;
  void *v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  __int128 v54;
  ValueMetadata *v55;
  char v56;

  type metadata accessor for UIButton.Configuration.CornerStyle?();
  MEMORY[0x1E0C80A78](v5, v6);
  v46 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UIButton.Configuration.CornerStyle();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v45 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v45 - v14;
  v16 = *(_QWORD *)(a2 + 40);
  v50 = a1;
  v51 = v16;
  v17 = *(_QWORD *)v2;
  v18 = *(_BYTE *)(v2 + 8);
  v19 = *(_QWORD *)(v2 + 16);
  v20 = *(unsigned __int8 *)(v2 + 24);
  v21 = *(unsigned __int8 *)(v2 + 25);
  v22 = *(unsigned __int8 *)(v2 + 40);
  v23 = *(_QWORD *)(v2 + 48);
  v47 = *(_QWORD *)(v2 + 32);
  v48 = v23;
  v52 = *(unsigned __int8 *)(v2 + 56);
  v53 = v22;
  v54 = *(_OWORD *)(v2 + 64);
  v49 = *(_QWORD *)(v2 + 80);
  v24 = objc_msgSend(a1, sel_configuration);
  outlined copy of Environment<Bool>.Content(v17, v18);
  specialized Environment.wrappedValue.getter(v17, v18, (uint64_t *)&v55);
  outlined consume of Environment<Bool>.Content(v17, v18);
  if (!v55)
  {
    v25 = v24;
    v26 = v15;
    v27 = v46;
    goto LABEL_12;
  }
  if (v55 == &type metadata for TitleAndIconLabelStyle)
  {
    v28 = 0;
    v25 = v24;
  }
  else
  {
    v25 = v24;
    if (v55 != &type metadata for TitleOnlyLabelStyle)
    {
      v26 = v15;
      v27 = v46;
      if (v55 != &type metadata for IconOnlyLabelStyle)
        goto LABEL_12;
      v28 = 1;
      goto LABEL_10;
    }
    v28 = 2;
  }
  v26 = v15;
  v27 = v46;
LABEL_10:
  if ((id)v28 != objc_msgSend(v25, sel_displayMode))
    MEMORY[0x18D75AC90](0xD000000000000025, 0x8000000187BDE730);
LABEL_12:
  outlined copy of Environment<CGFloat?>.Content(v19, v20, v21);
  specialized Environment.wrappedValue.getter(v19, v20 | (v21 << 8), (uint64_t)&v55);
  outlined consume of Environment<CGFloat?>.Content(v19, v20, v21);
  if (v56 == 1)
    __asm { BR              X11 }
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v27, *MEMORY[0x1E0DC3068], v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v27, 0, 1, v8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
  v29 = v45;
  UIPasteControlConfiguration.cornerStyle.getter();
  lazy protocol witness table accessor for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle();
  v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  v31 = *(void (**)(char *, uint64_t))(v9 + 8);
  v31(v29, v8);
  if ((v30 & 1) == 0)
    MEMORY[0x18D75AC90](0xD00000000000002CLL, 0x8000000187BDE6D0);
  v31(v26, v8);
  v32 = v50;
  v33 = v51;
  v34 = v48;
  v35 = v49;
  v36 = v47;
  outlined copy of Environment<CGFloat?>.Content(v19, v20, v21);
  specialized Environment.wrappedValue.getter(v19, v20 | (v21 << 8), (uint64_t)&v55);
  outlined consume of Environment<CGFloat?>.Content(v19, v20, v21);
  if ((v56 & 1) != 0)
  {
    v37 = v53;
  }
  else
  {
    v38 = v55;
    objc_msgSend(v25, sel_cornerRadius);
    v37 = v53;
    if (*(double *)&v38 != v39)
      MEMORY[0x18D75AC90](0xD000000000000027, 0x8000000187BDE700);
  }
  outlined copy of Environment<Color?>.Content(v36, v37);
  v40 = (void *)specialized Environment.wrappedValue.getter(v36, v37);
  outlined consume of Environment<Color?>.Content(v36, v37);
  if (v40)
  {
    type metadata accessor for UIColor();
    v40 = UIColor.init(_:)((uint64_t)v40);
  }
  v41 = v52;
  objc_msgSend(v32, sel_setTintColor_, v40);

  outlined copy of Environment<Bool>.Content(v34, v41);
  v42 = specialized Environment.wrappedValue.getter(v34, v41);
  outlined consume of Environment<Bool>.Content(v34, v41);
  objc_msgSend(v32, sel_setEnabled_, v42 & 1);
  v43 = v33 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper;
  v44 = *(_QWORD *)(v33 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper);
  *(_OWORD *)v43 = v54;
  *(_QWORD *)(v43 + 16) = v35;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  outlined copy of PasteHelper?(v44);
  outlined consume of PasteHelper?(v44);
  PasteHelper.ConfigurationSupport.pasteHelper.didset(v44);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of PasteHelper?(v44);

}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitPasteControl@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;

  v3 = *(_QWORD *)(v1 + 80);
  v4 = (objc_class *)type metadata accessor for PasteHelper.ConfigurationSupport();
  v9 = *(_OWORD *)(v1 + 64);
  v5 = (char *)objc_msgSend(objc_allocWithZone(v4), sel_init);
  v6 = &v5[OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper];
  v7 = *(_QWORD *)&v5[OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper];
  *(_OWORD *)v6 = v9;
  *((_QWORD *)v6 + 2) = v3;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  outlined copy of PasteHelper?(v7);
  outlined consume of PasteHelper?(v7);
  PasteHelper.ConfigurationSupport.pasteHelper.didset(v7);
  swift_release();
  swift_bridgeObjectRelease();
  result = outlined consume of PasteHelper?(v7);
  *a1 = v5;
  return result;
}

void type metadata accessor for UIButton.Configuration.CornerStyle?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIButton.Configuration.CornerStyle?)
  {
    type metadata accessor for UIButton.Configuration.CornerStyle();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIButton.Configuration.CornerStyle?);
  }
}

unint64_t lazy protocol witness table accessor for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle;
  if (!lazy protocol witness table cache variable for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle)
  {
    v1 = type metadata accessor for UIButton.Configuration.CornerStyle();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC3078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle);
  }
  return result;
}

uint64_t outlined destroy of UIButton.Configuration.CornerStyle?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for UIButton.Configuration.CornerStyle?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void Scene.contentDefinesWindowShadow(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.windowContentShape<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1873A5300(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void View.textInputSuggestions<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.textInputSuggestions<A, B, C>(_:id:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.textInputSuggestions<A, B>(_:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1873A5338(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for TextInputSuggestionsModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextInputSuggestionsModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t sub_1873A53B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 8);
  v13 = v1;
  v14 = *(_OWORD *)(a1 + 40);
  v4 = type metadata accessor for ForEach();
  v11 = v3;
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v4, &v11);
  v7 = type metadata accessor for TextInputSuggestionsModifier(255, v4, v5, v6);
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = v2;
  v10[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextInputSuggestionsModifier<A>, v7);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v10);
}

uint64_t sub_1873A5470(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[6];

  v1 = a1[1];
  v3 = a1[2];
  v2 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  swift_getAssociatedTypeWitness();
  v13[1] = v1;
  v13[2] = swift_getAssociatedTypeWitness();
  v13[3] = v3;
  v13[4] = v4;
  v13[5] = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for ForEach();
  v13[0] = v5;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v6, v13);
  v9 = type metadata accessor for TextInputSuggestionsModifier(255, v6, v7, v8);
  v10 = type metadata accessor for ModifiedContent();
  v12[0] = v2;
  v12[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextInputSuggestionsModifier<A>, v9);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v12);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = a1 + 48;
    do
    {
      v5 = *(_QWORD *)(v4 - 16);
      v6 = *(_QWORD *)(v4 - 8);
      outlined copy of TabCustomizationID.Base();
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      v4 += 24;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_QWORD *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AuxiliaryContent<>.init(of:content:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t AuxiliaryContent<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = MEMORY[0x1E0C80A78](a1, v3);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v8, v6);
  return FormatInputToString.init(format:)((uint64_t)v8, v5, a2);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> AuxiliaryContent<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AuxiliaryContent<>._identifiedView.getter(a1, a2);
}

void TabView.init<A>(selection:sidebarVisibility:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v16[9];
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v18 = a5;
  v19 = a4;
  v17 = a3;
  v16[2] = a1;
  v16[7] = a7;
  v16[8] = a10;
  v16[4] = a9;
  v16[5] = a2;
  MEMORY[0x1E0C80A78](a1, a2);
  v16[6] = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Binding();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v16[1] = *(_QWORD *)(v14 - 8);
  v15(a8, 1, 1, v14);
  v20 = a6;
  v21 = a7;
  v16[3] = a6;
  v22 = a9;
  v23 = a10;
  type metadata accessor for TabContentBuilder.Content();
}

void sub_1873A5970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabContentBuilder<A>.Content<A1>, a1);
  *(_QWORD *)(v3 - 112) = v1;
  *(_QWORD *)(v3 - 104) = a1;
  *(_QWORD *)(v3 - 96) = v2;
  *(_QWORD *)(v3 - 88) = v5;
  type metadata accessor for TabView();
}

uint64_t sub_1873A5998(uint64_t a1)
{
  void (*v1)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = v3 + *(int *)(a1 + 52);
  v9 = type metadata accessor for Optional();
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v3, v9);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v11 = *(_QWORD *)(v6 - 192);
  v10(v3, v11, v2);
  v1(v3, 0, 1, v2);
  v13 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  v14 = *(_QWORD *)(v6 - 168);
  swift_retain();
  swift_retain();
  v15 = outlined consume of Binding<NavigationSplitViewColumn>?(v13, v12);
  *(_QWORD *)v8 = v14;
  *(_QWORD *)(v8 + 8) = v4;
  *(_BYTE *)(v8 + 16) = *(_DWORD *)(v6 - 132);
  v16 = *(_QWORD *)(v6 - 160);
  (*(void (**)(uint64_t))(v6 - 120))(v15);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 200) + 8))(v11, v2);
  return PickerBuilder.Content.init(_:)(v16, *(_QWORD *)(v6 - 152), v3 + *(int *)(a1 + 56));
}

void TabView.init<A>(sidebarVisibility:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = v6;
  *(_QWORD *)(a4 + 24) = v7;
  *(_BYTE *)(a4 + 32) = v8;
  swift_retain();
  v9 = swift_retain();
  a3(v9);
  swift_release();
  swift_release();
  type metadata accessor for TabContentBuilder.Content();
}

void sub_1873A5B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabContentBuilder<A>.Content<A1>, a1);
  *(_QWORD *)(v3 - 96) = v1;
  *(_QWORD *)(v3 - 88) = a1;
  *(_QWORD *)(v3 - 80) = v2;
  *(_QWORD *)(v3 - 72) = v5;
  type metadata accessor for TabView();
}

uint64_t sub_1873A5B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return PickerBuilder.Content.init(_:)(v3, v1, v2 + *(int *)(a1 + 56));
}

void static AdaptiveTabViewStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_1873A5C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  type metadata accessor for _GraphValue();
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v17 = *(_OWORD *)(v1 + 56);
  v18 = *(_OWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 72);
  _GraphValue.value.getter();
  v11 = type metadata accessor for AdaptableTabView(255, v3, v2, v10);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v3, v2, v12);
  v13 = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for AdaptiveTabViewStyle.Body(0, v3, v2, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptiveTabViewStyle.Body<A>, v15);
  _GraphValue.init<A>(_:)();
  v20 = v5;
  v21 = v6;
  v22 = v0;
  v23 = v7;
  v24 = v8;
  v25 = v18;
  v26 = v17;
  v27 = v9;
  v28 = v4;
  v19[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v11);
  v19[1] = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v13, v19);
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for AdaptiveTabViewStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AdaptiveTabViewStyle.Body);
}

void static AdaptiveTabViewStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_1873A5E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;

  type metadata accessor for _GraphValue();
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  _GraphValue.value.getter();
  v10 = type metadata accessor for AdaptableTabView(255, v3, v2, v9);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v3, v2, v11);
  v12 = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for AdaptiveTabViewStyle.Body(0, v3, v2, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptiveTabViewStyle.Body<A>, v14);
  _GraphValue.init<A>(_:)();
  v21 = v0;
  v22 = v4;
  v23 = v5;
  v24 = v7;
  v25 = v8;
  v26 = v19;
  v27 = v18;
  v28 = v17;
  v29 = v6;
  v30 = v16;
  v20[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v10);
  v20[1] = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v20);
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void AdaptiveTabViewStyle.Body.base.getter()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_1873A601C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void AdaptiveTabViewStyle.Body.value.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;

  v9 = a3;
  type metadata accessor for Binding();
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v5);
  v7 = (char *)&v7 - v6;
  v10 = &type metadata for AdaptiveTabViewStyle;
  v11 = a1;
  v12 = &protocol witness table for AdaptiveTabViewStyle;
  v13 = a2;
  type metadata accessor for _TabViewValue();
}

void sub_1873A60FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = type metadata accessor for AdaptableTabView(0, v10, v9, v14);
  *(_QWORD *)(v11 - 272) = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v11 - 288) = (char *)&a9 - v17;
  *(_QWORD *)(v11 - 280) = type metadata accessor for TabViewStyleConfiguration.Content(255, v10, v9, v18);
  v19 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v11 - 264) = v19;
  *(_QWORD *)(v11 - 256) = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  AdaptiveTabViewStyle.Body.base.getter();
}

void sub_1873A620C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(v2, v1, *(_QWORD *)(v5 - 296));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  AdaptiveTabViewStyle.Body.base.getter();
}

uint64_t sub_1873A6248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v12 = v6 + *(int *)(type metadata accessor for TabViewStyleConfiguration(0, v7, v5, a4) + 36);
  v14 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v15 = *(_BYTE *)(v12 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)v12, v13);
  v9(v6, v4);
  default argument 0 of AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v11 - 120);
  v16 = *(_BYTE *)(v11 - 112);
  *(_QWORD *)(v11 - 136) = *(_QWORD *)(v11 - 120);
  *(_BYTE *)(v11 - 128) = v16;
  default argument 1 of AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v11 - 152);
  v17 = *(_BYTE *)(v11 - 144);
  *(_QWORD *)(v11 - 168) = *(_QWORD *)(v11 - 152);
  *(_BYTE *)(v11 - 160) = v17;
  KeyPath = swift_getKeyPath();
  v19 = swift_getKeyPath();
  AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v11 - 136, (uint64_t *)(v11 - 168), KeyPath, 0, 0, 0, v19, 0, *(_QWORD *)(v11 - 288), 0, 0, *(_QWORD *)(v11 - 304), v14, v13, v15, 1, v7, v5);
  *(_QWORD *)(v11 - 224) = v7;
  *(_QWORD *)(v11 - 216) = v5;
  *(_DWORD *)(v11 - 208) = v8;
  v20 = *(_QWORD *)(v11 - 272);
  _VariadicView.Tree.init(_:content:)();
  *(_QWORD *)(v11 - 192) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v20);
  *(_QWORD *)(v11 - 184) = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  v21 = *(_QWORD *)(v11 - 264);
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v21, v11 - 192);
  v23 = lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  View.input<A>(_:)((uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v21, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v22, v23);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 256) + 8))(v10, v21);
}

void closure #1 in AdaptiveTabViewStyle.Body.value.getter()
{
  type metadata accessor for _TabViewValue();
}

void sub_1873A6460(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  AdaptiveTabViewStyle.Body.base.getter();
}

uint64_t sub_1873A64A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  v7 = type metadata accessor for TabViewStyleConfiguration.Content(0, v1, v0, v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v7, &protocol witness table for TabViewStyleConfiguration<A>.Content);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v7, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AdaptiveTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  type metadata accessor for AdaptableTabView(255, v4, v5, a2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v4, v5, v6);
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v7 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

void protocol witness for Rule.value.getter in conformance AdaptiveTabViewStyle.Body<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AdaptiveTabViewStyle.Body.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void TabGroup<>._identifiedView.getter()
{
  type metadata accessor for TabSection();
}

void sub_1873A6610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  TabSection<>._identifiedView.getter(a1, v3, v2, v1, v4);
}

void protocol witness for TabContent._identifiedView.getter in conformance <> TabGroup<A, B, C, D>()
{
  TabGroup<>._identifiedView.getter();
}

void TabGroup<>.init<>(content:header:)(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(double);
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v12(v9);
  a1(v13);
  TabSection.init(header:content:footer:)((uint64_t)v11, a3, a4);
}

void TabGroup<>.init<>(content:header:compact:)(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(double);
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  void (*v22)(uint64_t);
  uint64_t v23;

  v21[1] = a4;
  v22 = a3;
  v23 = a8;
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v11, v12);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v18(v15);
  v20 = a1(v19);
  v22(v20);
  TabSection.init(header:content:footer:)((uint64_t)v17, a5, a6);
}

void TabGroup<>.init<>(content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  uint64_t (*v5)(double);
  uint64_t v6;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5(v4);
  TabSection.init(header:content:footer:)(v6, MEMORY[0x1E0CE7C38], a3);
}

void TabGroup<>.init<A>(_:image:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  TabGroup<>.init<A>(_:image:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (_QWORD *(*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

void TabGroup<>.init<A>(_:image:content:compact:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD *)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  TabGroup<>.init<A>(_:image:content:compact:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (_QWORD *(*)(__int128 *__return_ptr, char *, uint64_t, _QWORD, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

void TabGroup<>.init<>(_:image:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X6>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[5];
  char v16;

  MEMORY[0x1E0C80A78](a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = Text.init(_:tableName:bundle:comment:)();
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v11 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  v12 = swift_bridgeObjectRelease();
  v15[0] = v4;
  v15[1] = v6;
  v15[2] = v10;
  v15[3] = v8;
  v15[4] = v11;
  v16 = 1;
  a3(v12);
  TabSection.init(header:content:footer:)((uint64_t)v15, (uint64_t)&type metadata for DefaultTabLabel, a4);
}

void TabGroup<>.init<>(_:image:content:compact:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X6>, uint64_t a4@<X8>, void (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[5];
  char v20;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = Text.init(_:tableName:bundle:comment:)();
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  v15 = swift_bridgeObjectRelease();
  v19[0] = v7;
  v19[1] = v9;
  v19[2] = v13;
  v19[3] = v11;
  v19[4] = v14;
  v20 = 1;
  v16 = a3(v15);
  a5(v16);
  TabSection.init(header:content:footer:)((uint64_t)v19, (uint64_t)&type metadata for DefaultTabLabel, a4);
}

void TabGroup<>.init<A>(_:systemImage:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  TabGroup<>.init<A>(_:image:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (_QWORD *(*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

void TabGroup<>.init<A>(_:image:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *(*a12)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(_QWORD *);
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  v27 = a8;
  v28 = a6;
  v25 = a5;
  v26 = a4;
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = *(_QWORD *)(v16 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v22, a1, v23, v20);
  v24 = a12(&v29, v22, a2, a3, a7, a11);
  v30 = v30;
  v31 = 1;
  v26(v24);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a7);
  TabSection.init(header:content:footer:)((uint64_t)&v29, (uint64_t)&type metadata for DefaultTabLabel, v27);
}

void TabGroup<>.init<A>(_:systemImage:content:compact:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD *)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  TabGroup<>.init<A>(_:image:content:compact:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (_QWORD *(*)(__int128 *__return_ptr, char *, uint64_t, _QWORD, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

void TabGroup<>.init<A>(_:image:content:compact:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD *)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *(*a17)(__int128 *__return_ptr, char *, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t (*v30)(_QWORD *);
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;

  v29[1] = a8;
  v29[2] = a5;
  v31 = a7;
  v32 = a6;
  v30 = a4;
  v29[0] = a3;
  v33 = a9;
  v34 = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v19, v20);
  v21 = *(_QWORD *)(a12 - 8);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v26, a1, a12, v24);
  v27 = a17(&v35, v26, a2, v29[0], a12, a16);
  v36 = v36;
  v37 = 1;
  v28 = v30(v27);
  v32(v28);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, a12);
  TabSection.init(header:content:footer:)((uint64_t)&v35, (uint64_t)&type metadata for DefaultTabLabel, v33);
}

void TabGroup<>.init<>(_:systemImage:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, void (*a5)(uint64_t)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[5];
  char v20;

  MEMORY[0x1E0C80A78](a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = Text.init(_:tableName:bundle:comment:)();
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  *(_DWORD *)(v14 + 32) = 0;
  *(_BYTE *)(v14 + 36) = 1;
  *(_OWORD *)(v14 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v14 + 56) = a3;
  *(_QWORD *)(v14 + 64) = a4;
  *(_OWORD *)(v14 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v14 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = swift_bridgeObjectRelease();
  v19[0] = v16;
  v19[1] = v9;
  v19[2] = v13;
  v19[3] = v11;
  v19[4] = v14;
  v20 = 1;
  a5(v15);
  TabSection.init(header:content:footer:)((uint64_t)v19, (uint64_t)&type metadata for DefaultTabLabel, a6);
}

void TabGroup<>.init<>(_:systemImage:content:compact:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t (*a5)(uint64_t)@<X6>, uint64_t a6@<X8>, void (*a7)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[5];
  char v25;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = Text.init(_:tableName:bundle:comment:)();
  v20 = v12;
  v21 = v11;
  v14 = v13;
  v16 = v15 & 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  *(_DWORD *)(v17 + 32) = 0;
  *(_BYTE *)(v17 + 36) = 1;
  *(_OWORD *)(v17 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v17 + 56) = a3;
  *(_QWORD *)(v17 + 64) = a4;
  *(_OWORD *)(v17 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v17 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRelease();
  v24[0] = v21;
  v24[1] = v14;
  v24[2] = v16;
  v24[3] = v20;
  v24[4] = v17;
  v25 = 1;
  v19 = a5(v18);
  a7(v19);
  TabSection.init(header:content:footer:)((uint64_t)v24, (uint64_t)&type metadata for DefaultTabLabel, a6);
}

uint64_t TabContent.customizationBehavior(_:for:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  char *v7;
  _BYTE v9[9];

  v6 = *a1;
  v7 = specialized Sequence.compactMap<A>(_:)(a2);
  v9[0] = v6;
  TabContent.customizationBehavior(_:for:)(v9, (uint64_t)v7, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.visibility(_:for:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v7;

  v7 = specialized Sequence.compactMap<A>(_:)(a2);
  TabContent.defaultVisibility(_:for:)(a1, (uint64_t)v7, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t View.tabViewSidebarCustomization(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v26 = a3;
  v5 = type metadata accessor for TabViewCustomizationModifier();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TabSidebarCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabSidebarCustomization>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v26 - v12);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, v9);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v26 - v16);
  outlined init with copy of SearchFieldConfiguration.Data?(a1, (uint64_t)v13, &lazy cache variable for type metadata for Binding<TabSidebarCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabSidebarCustomization>, v9);
  type metadata accessor for Binding<TabSidebarCustomization>(0);
  v19 = v18;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v13, 1, v18) == 1)
  {
    outlined destroy of TableRowID?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Binding<TabSidebarCustomization>?, (uint64_t)type metadata accessor for Binding<TabSidebarCustomization>, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    type metadata accessor for Binding<TabViewCustomization>(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
  }
  else
  {
    v21 = (uint64_t)v13 + *(int *)(v19 + 32);
    type metadata accessor for Binding<TabViewCustomization>(0);
    v23 = v22;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v21, (uint64_t)v17 + *(int *)(v22 + 32), (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
    lazy protocol witness table accessor for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization();
    v24 = dispatch thunk of AnyLocation.projecting<A>(_:)();
    *v17 = *v13;
    v17[1] = v24;
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabSidebarCustomization>);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v17, 0, 1, v23);
  }
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v17, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x18D75B4AC](v8, a2, v5, v26);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomizationModifier);
  return outlined destroy of TableRowID?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t)type metadata accessor for Binding<TabViewCustomization>, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

void type metadata accessor for Binding<TabSidebarCustomization>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<TabSidebarCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

uint64_t type metadata accessor for TabSidebarCustomization()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TabSidebarCustomization;
  if (!type metadata singleton initialization cache for TabSidebarCustomization)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance TabSidebarCustomization.ToTabViewCustomization@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
}

unint64_t lazy protocol witness table accessor for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSidebarCustomization.ToTabViewCustomization, &type metadata for TabSidebarCustomization.ToTabViewCustomization);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSidebarCustomization.ToTabViewCustomization, &type metadata for TabSidebarCustomization.ToTabViewCustomization);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSidebarCustomization.ToTabViewCustomization, &type metadata for TabSidebarCustomization.ToTabViewCustomization);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization);
  }
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance TabSidebarCustomization.ToTabViewCustomization(uint64_t a1, uint64_t a2)
{
  return outlined assign with copy of TabViewCustomization(a2, a1);
}

unint64_t TabSidebarCustomization.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  UUID.init()();
  v2 = type metadata accessor for TabViewCustomization();
  v3 = *(int *)(v2 + 20);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + v3) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v5 = *(int *)(v2 + 24);
  result = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_QWORD *)(a1 + v5) = result;
  return result;
}

uint64_t TabSidebarCustomization.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;

  v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  v7 = 0;
  if ((v8 & 1) != 0)
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 56) + v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t TabSidebarCustomization.subscript.setter(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return TabViewCustomization.subscript.setter(a1, a2, a3, 0);
}

uint64_t (*TabSidebarCustomization.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;

  a1[1] = a3;
  a1[2] = v3;
  v6 = a1 + 3;
  *a1 = a2;
  v7 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, 0);
    v9 = 0;
    if ((v10 & 1) != 0)
      v9 = *(_BYTE *)(*(_QWORD *)(v7 + 56) + v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  *v6 = v9;
  return TabSidebarCustomization.subscript.modify;
}

uint64_t TabSidebarCustomization.subscript.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 24);
  swift_bridgeObjectRetain();
  return TabViewCustomization.subscript.setter(v3, v2, v1, 0);
}

uint64_t TabSidebarCustomization.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = type metadata accessor for TabViewCustomization();
  v8 = *(_QWORD *)(v3 + *(int *)(result + 24));
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_13;
  swift_bridgeObjectRetain_n();
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  if ((v10 & 1) == 0)
  {
    result = swift_bridgeObjectRelease_n();
LABEL_13:
    *a3 = 0;
    return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  if (!*(_QWORD *)(v11 + 16))
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v12 = swift_bridgeObjectRetain();
  v13 = specialized _ArrayProtocol.filter(_:)(v12);
  swift_bridgeObjectRelease();
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  v16 = MEMORY[0x1E0DEE9D8];
  if (v15)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    v16 = v23;
    v17 = (uint64_t *)(v14 + 40);
    do
    {
      v19 = *(v17 - 1);
      v18 = *v17;
      v21 = *(_QWORD *)(v23 + 16);
      v20 = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      if (v21 >= v20 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
      v17 += 2;
      *(_QWORD *)(v23 + 16) = v21 + 1;
      v22 = v23 + 24 * v21;
      *(_QWORD *)(v22 + 32) = v19;
      *(_QWORD *)(v22 + 40) = v18;
      *(_BYTE *)(v22 + 48) = 0;
      --v15;
    }
    while (v15);
  }
  *a3 = v16;
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for TabSidebarCustomization.subscript(groupID:) : TabSidebarCustomization(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *a3;
  v4 = a3[1];
  v6 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return TabSidebarCustomization.subscript.setter(&v6, v3, v4);
}

uint64_t TabSidebarCustomization.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  if (*a1)
    v6 = *a1;
  else
    v6 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *(_QWORD *)(v3 + v7);
    *(_QWORD *)(v3 + v7) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, a2, a3, 0, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + v7) = v10;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for TabViewCustomization();
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of TabCustomizationID.Base, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*TabSidebarCustomization.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  TabSidebarCustomization.subscript.getter(a2, a3, a1);
  return TabSidebarCustomization.subscript.modify;
}

uint64_t TabSidebarCustomization.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[2];
  v3 = a1[1];
  v5 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TabSidebarCustomization.subscript.setter(&v5, v3, v2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    return TabSidebarCustomization.subscript.setter(&v5, v3, v2);
  }
}

Swift::Void __swiftcall TabSidebarCustomization.reset()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = MEMORY[0x1E0DEE9D8];
  v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v3 = type metadata accessor for TabViewCustomization();
  v4 = *(int *)(v3 + 20);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + v4) = v2;
  v5 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v6 = *(int *)(v3 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + v6) = v5;
}

Swift::Void __swiftcall TabSidebarCustomization.resetVisibility()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v2 = *(int *)(type metadata accessor for TabViewCustomization() + 20);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + v2) = v1;
}

Swift::Void __swiftcall TabSidebarCustomization.resetGroupOrder(for:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object, 0);
  LOBYTE(countAndFlagsBits) = v7;
  swift_bridgeObjectRelease();
  if ((countAndFlagsBits & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v2 + v5);
    *(_QWORD *)(v2 + v5) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
    outlined consume of TabCustomizationID.Base();
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *(_QWORD *)(v2 + v5) = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall TabSidebarCustomization.resetGroupOrder()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v2 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + v2) = v1;
}

BOOL static TabSidebarCustomization.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;

  result = 0;
  if ((static UUID.== infix(_:_:)() & 1) != 0)
  {
    v4 = type metadata accessor for TabViewCustomization();
    if ((specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 20)), *(_QWORD *)(a2 + *(int *)(v4 + 20))) & 1) != 0&& (specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 24)), *(_QWORD *)(a2 + *(int *)(v4 + 24))) & 1) != 0)
    {
      return 1;
    }
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TabSidebarCustomization.CodingKeys()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TabSidebarCustomization.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TabSidebarCustomization.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabSidebarCustomization.CodingKeys()
{
  lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabSidebarCustomization.CodingKeys()
{
  lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TabSidebarCustomization.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabSidebarCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys, (uint64_t)&unk_1E1AE3758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for TabViewCustomization();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t)&protocol conformance descriptor for TabViewCustomization);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t TabSidebarCustomization.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a2;
  v3 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1E0C80A78](v3, v4);
  v24 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabSidebarCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys, (uint64_t)&unk_1E1AE3758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v25 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v22 - v9;
  v11 = type metadata accessor for TabSidebarCustomization();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v15 = *(int *)(v3 + 20);
  v16 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v14[v15] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v17 = *(int *)(v3 + 24);
  *(_QWORD *)&v14[v17] = specialized Dictionary.init(dictionaryLiteral:)(v16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();
  v18 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v18)
  {
    v19 = v23;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t)&protocol conformance descriptor for TabViewCustomization);
    v20 = (uint64_t)v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v25);
    outlined assign with take of TabViewCustomization(v20, (uint64_t)v14);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, v19, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;

  result = 0;
  if ((static UUID.== infix(_:_:)() & 1) != 0)
  {
    v4 = type metadata accessor for TabViewCustomization();
    if ((specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 20)), *(_QWORD *)(a2 + *(int *)(v4 + 20))) & 1) != 0&& (specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 24)), *(_QWORD *)(a2 + *(int *)(v4 + 24))) & 1) != 0)
    {
      return 1;
    }
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabSidebarCustomization@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TabSidebarCustomization.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabSidebarCustomization(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabSidebarCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys, (uint64_t)&unk_1E1AE3758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for TabViewCustomization();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t)&protocol conformance descriptor for TabViewCustomization);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t TabGroupCustomizationEntry.childrenOrder.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    return 0;
  v1 = swift_bridgeObjectRetain();
  v2 = specialized _ArrayProtocol.filter(_:)(v1);
  swift_bridgeObjectRelease();
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(v2);
  swift_bridgeObjectRelease();
  return v3;
}

void TabGroupCustomizationEntry.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  unsigned __int8 *v3;
  unsigned int v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (unsigned __int8 *)(v1 + 48);
    do
    {
      v4 = *v3;
      v3 += 24;
      Hasher._combine(_:)(v4);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of TabCustomizationID.Base();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t static TabGroupCustomizationEntry.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TabGroupCustomizationEntry.CodingKeys()
{
  return 0x6E6572646C696863;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TabGroupCustomizationEntry.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6572646C696863 && a2 == 0xEB00000000734449)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabGroupCustomizationEntry.CodingKeys()
{
  lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabGroupCustomizationEntry.CodingKeys()
{
  lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TabGroupCustomizationEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[4];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabGroupCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys, (uint64_t)&unk_1E1AF0318, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[3] = v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [TabCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TabCustomizationID] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

Swift::Int TabGroupCustomizationEntry.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t TabGroupCustomizationEntry.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v13 = a2;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabGroupCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys, (uint64_t)&unk_1E1AF0318, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = v13;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [TabCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TabCustomizationID] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabGroupCustomizationEntry@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return TabGroupCustomizationEntry.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabGroupCustomizationEntry(_QWORD *a1)
{
  return TabGroupCustomizationEntry.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TabGroupCustomizationEntry()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TabGroupCustomizationEntry()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabGroupCustomizationEntry(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t SceneStorage.init<A>(wrappedValue:_:store:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SceneStorage<TabSidebarCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  v10 = v9;
  a5[2] = 0;
  a5[3] = 0;
  *(_QWORD *)((char *)a5 + *(int *)(v9 + 36)) = 0;
  *a5 = a2;
  a5[1] = a3;
  outlined init with take of TableCellFormula(a1, (uint64_t)a5 + *(int *)(v9 + 32), (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TransformBox<TabSidebarCustomizationTransform>, (uint64_t)&unk_1E1B01A08, (uint64_t)&protocol witness table for TabSidebarCustomizationTransform, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransformBox);
  result = swift_allocObject();
  *(_QWORD *)((char *)a5 + *(int *)(v10 + 40)) = result;
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SceneStorage<TabViewCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  v10 = v9;
  a5[2] = 0;
  a5[3] = 0;
  *(_QWORD *)((char *)a5 + *(int *)(v9 + 36)) = 0;
  *a5 = a2;
  a5[1] = a3;
  outlined init with take of TabViewCustomization(a1, (uint64_t)a5 + *(int *)(v9 + 32));
  type metadata accessor for TransformBox<TabViewCustomizationTransform>(0, v11, v12, v13);
  result = swift_allocObject();
  *(_QWORD *)((char *)a5 + *(int *)(v10 + 40)) = result;
  return result;
}

_QWORD *AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;

  v8 = type metadata accessor for TabSidebarCustomization();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v18 - v14;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v18 - v14, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UserDefaultLocation<TabSidebarCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  v16 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1E1B01A08, (uint64_t)&protocol witness table for TabSidebarCustomizationTransform, a4, (uint64_t)v11, 0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
  return v16;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;

  v8 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v18 - v14;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v18 - v14, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UserDefaultLocation<TabViewCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  v16 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1E1AFAF60, (uint64_t)&protocol witness table for TabViewCustomizationTransform, a4, (uint64_t)v11, 0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
  return v16;
}

uint64_t TabSidebarCustomizationTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  char v8;
  uint64_t result;
  _BYTE v12[40];
  __int128 v13;
  __int128 v14;

  *a4 = 1;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v12);
  if (*((_QWORD *)&v14 + 1))
  {
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      *(_QWORD *)(a5 + 24) = type metadata accessor for TabSidebarCustomization();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)a5);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabSidebarCustomization and conformance TabSidebarCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t)&protocol conformance descriptor for TabSidebarCustomization);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data._Representation(a2, a3);
      return swift_release();
    }
  }
  else
  {
    result = outlined destroy of TableRowID?((uint64_t)&v13, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

void static TabSidebarCustomizationTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v7 = objc_msgSend(a1, sel_dataForKey_, v6);

  if (v7)
  {
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    *(_QWORD *)(a4 + 24) = type metadata accessor for TabSidebarCustomization();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabSidebarCustomization and conformance TabSidebarCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t)&protocol conformance descriptor for TabSidebarCustomization);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v8, v10);
    swift_release();
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

uint64_t TabContent.pinned(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = a1;
  return TabContent.tabPlacement(_:)(&v4, a2, a3);
}

uint64_t TabContent.sidebarOnly(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  char v5;

  if ((a1 & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  v5 = v3;
  return TabContent.tabPlacement(_:)(&v5, a2, a3);
}

void static TabViewContentDisplayMode.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t View.tabViewMode(content:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for ContentModeModifier, a3);
}

void static TabViewContentDisplayMode.balanced.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static TabViewContentDisplayMode.prominentDetail.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static TabViewContentDisplayMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.tabContentMode.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContentModeModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContentModeModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ContentModeModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ContentModeModifier()
{
  lazy protocol witness table accessor for type ContentModeModifier and conformance ContentModeModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t EnvironmentValues.tabContentMode.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t Tab<>.init<>(systemItem:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;

  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(uint64_t (**)(char *, double))(v14 + 16))(v19, v17);
  a3(v20);
  Tab.init<>(value:content:systemItem:)((uint64_t)v19, (uint64_t)v12, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a2, a4);
}

uint64_t Tab<>.init<A>(systemItem:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - v16;
  v18 = *(_QWORD *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v21 - v16, a2, a5, v15);
  v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, a5);
  a3(v19);
  Tab.init<>(value:content:systemItem:)((uint64_t)v17, (uint64_t)v12, v13, a4, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a2, a5);
}

uint64_t Tab<>.init<>(systemItem:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  double v6;
  uint64_t v7;
  char *v8;
  void (*v9)(double);
  uint64_t v11;

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  return Tab.init<>(content:systemItem:)((uint64_t)v8, a3, a4);
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1)
{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;

  v4 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v4 + 24) >> 1)
    return a2();
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x1E0DEC660]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(_QWORD, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v2;
  if ((result & 1) == 0)
    return a1(0, *(_QWORD *)(v2 + 16) + 1, 1);
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
    return a2(v3 > 1);
  return result;
}

void *specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, const void *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = a1 + 1;
  return outlined init with take of TabEntry(a2, (void *)(v3 + 272 * a1 + 32));
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *v4;
  *(_QWORD *)(v5 + 16) = result + 1;
  v6 = v5 + 24 * result;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a3;
  *(_BYTE *)(v6 + 48) = a4 & 1;
  return result;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<TableCellFormula>, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<TableColumnCollection.Entry>, type metadata accessor for TableColumnCollection.Entry);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<ToolbarStorage.Entry>, type metadata accessor for ToolbarStorage.Entry);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<AccessibilityNodeAttachment>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>, type metadata accessor for MainMenuItem.Template);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<URL>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8]);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: ToolbarStorage.Item)>, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item), (uint64_t)type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<WidgetAuxiliaryViewMetadata>, type metadata accessor for WidgetAuxiliaryViewMetadata);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB1658]);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<SystemSegmentItem>, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<UpdateCoalescingCollectionView.UpdateInvalidation>, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
  *v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<(UTType, String?)>, (uint64_t (*)(_QWORD))type metadata accessor for (UTType, String?));
  *v3 = result;
  return result;
}

_QWORD *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<ViewResponder>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<ViewResponder>);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<[Text]>, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E0CE6CF8]);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<[AnyAccessibilityAction]>, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<URLSessionBackgroundTask>>, &lazy cache variable for type metadata for BackgroundTaskEntry<URLSessionBackgroundTask>, (uint64_t)&type metadata for URLSessionBackgroundTask, (uint64_t)&protocol witness table for URLSessionBackgroundTask);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>>, &lazy cache variable for type metadata for BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>, (uint64_t)&type metadata for UnidentifiedURLSessionBackgroundTask, (uint64_t)&protocol witness table for UnidentifiedURLSessionBackgroundTask);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<AccessibilityNode>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<AccessibilityNode>);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  a5(0);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size_2(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_29;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  v18 = *(_QWORD *)(a6(0) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(_QWORD *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<()>, (uint64_t (*)(uint64_t))type metadata accessor for (), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ()();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: AccessibilityNode), (void (*)(uint64_t))type metadata accessor for AccessibilityNode);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[11 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 88 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<ResponderBasedHitTestTracing>, (uint64_t)&type metadata for ResponderBasedHitTestTracing, (uint64_t)&protocol witness table for ResponderBasedHitTestTracing, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HitTestTrace);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(key: String?, value: String)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: String?, value: String), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (key: String?, value: String)();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WheelPickerRow<AnyHashable, Subview>>, (uint64_t (*)(uint64_t))type metadata accessor for WheelPickerRow<AnyHashable, Subview>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[18 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 144 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for WheelPickerRow<AnyHashable, Subview>();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(String, Any)>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (Badge, Spacer)(0, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<String?>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<([Text], [AnyAccessibilityAction])>, (uint64_t (*)(uint64_t))type metadata accessor for ([Text], [AnyAccessibilityAction]), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ([Text], [AnyAccessibilityAction])();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformListCell & UIFocusItem>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformListCell & UIFocusItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for PlatformListCell & UIFocusItem();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<SliderMark<Double>>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for SliderMark<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderMark);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(UIViewController, TabEntry)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIViewController, TabEntry), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 280);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[35 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 280 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (UIViewController, TabEntry)();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<UIKitProxyFocusItem>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_NavigationStackStyleConfiguration.Item>, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 95;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 7);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 < a4 || v10 + 4 >= &a4[16 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[CGRect]>, (uint64_t (*)(uint64_t))type metadata accessor for [CGRect], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for [CGRect](0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<AppRefreshBackgroundTask>>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for BackgroundTaskEntry<AppRefreshBackgroundTask>, (uint64_t)&type metadata for AppRefreshBackgroundTask, (uint64_t)&protocol witness table for AppRefreshBackgroundTask, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)(0, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_2(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v10])
      memmove(v15, v16, 8 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, 8 * v10);
  }
  swift_release();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_2(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 48);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[48 * v10])
      memmove(v14, v15, 48 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_2(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v10])
      memmove(v14, v15, v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v10);
  }
  swift_release();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_2(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[40 * v10])
      memmove(v14, v15, 40 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v12;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, void (*a5)(_QWORD))
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    a5(0);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size_2(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9])
      memmove(v14, v15, 4 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 4 * v9);
  }
  swift_release();
  return v11;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6, uint64_t a7)
{
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int64_t v16;
  uint64_t v17;

  v10 = (char)result;
  if ((a3 & 1) != 0)
  {
    v11 = a4[3];
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = a4[2];
  if (v12 <= v13)
    v14 = a4[2];
  else
    v14 = v12;
  if (v14)
  {
    a5(0);
    v15 = (_QWORD *)swift_allocObject();
    v16 = _swift_stdlib_malloc_size_2(v15);
    v17 = v16 - 32;
    if (v16 < 32)
      v17 = v16 - 25;
    v15[2] = v13;
    v15[3] = 2 * (v17 >> 3);
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v10 & 1) != 0)
  {
    if (v15 != a4 || v15 + 4 >= &a4[v13 + 4])
      memmove(v15 + 4, a4 + 4, 8 * v13);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a6, a7, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v15;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6, uint64_t a7, uint64_t a8)
{
  char v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;

  v12 = (char)result;
  if ((a3 & 1) != 0)
  {
    v13 = a4[3];
    v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v14 = a2;
    }
  }
  else
  {
    v14 = a2;
  }
  v15 = a4[2];
  if (v14 <= v15)
    v16 = a4[2];
  else
    v16 = v14;
  if (v16)
  {
    a5(0);
    v17 = (_QWORD *)swift_allocObject();
    v18 = _swift_stdlib_malloc_size_2(v17);
    v19 = v18 - 32;
    if (v18 < 32)
      v19 = v18 - 1;
    v17[2] = v15;
    v17[3] = 2 * (v19 >> 5);
  }
  else
  {
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v12 & 1) != 0)
  {
    if (v17 != a4 || v17 + 4 >= &a4[4 * v15 + 4])
      memmove(v17 + 4, a4 + 4, 32 * v15);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a6, a7, a8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v17;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD, uint64_t, uint64_t))
{
  char v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  unint64_t v23;

  v12 = result;
  if ((a3 & 1) != 0)
  {
    v13 = a4[3];
    v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v14 = a2;
    }
  }
  else
  {
    v14 = a2;
  }
  v15 = a4[2];
  if (v14 <= v15)
    v16 = a4[2];
  else
    v16 = v14;
  if (!v16)
  {
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  a5(0);
  v17 = *(_QWORD *)(a8(0, a6, a7) - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v20 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size_2(v20);
  if (!v18)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v19 == 0x8000000000000000 && v18 == -1)
    goto LABEL_29;
  v20[2] = v15;
  v20[3] = 2 * ((uint64_t)(result - v19) / v18);
LABEL_19:
  v22 = *(_QWORD *)(a8(0, a6, a7) - 8);
  if ((v12 & 1) != 0)
  {
    if (v20 < a4
      || (v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80),
          (char *)v20 + v23 >= (char *)a4 + v23 + *(_QWORD *)(v22 + 72) * v15))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v20 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v20;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, type metadata accessor for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB1658]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, type metadata accessor for _ContiguousArrayStorage<(ToolbarStorage.Entry, Int)>, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v17;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (v10 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = v10;
  if (v12)
  {
    a7(0, a5, a6, MEMORY[0x1E0DED1E8]);
    v13 = (char *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_2(v13);
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v13 + 32;
  v16 = a4 + 32;
  v17 = 40 * v11;
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v15 >= &v16[v17])
      memmove(v15, v16, v17);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, v17);
  }
  swift_release();
  return v13;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_2(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 < a4 || v13 + 4 >= &a4[v11 + 4])
    {
      a6(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      a6(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    a6(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_2(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10])
      memmove(v15, v16, 16 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, 16 * v10);
  }
  swift_release();
  return v12;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v12 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v12;
    }
    outlined destroy of AnyHashable(*(_QWORD *)(v11 + 48) + 40 * v6);
    *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v6);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v15;
    }

    v10 = *(_QWORD *)(v9 + 56);
    v11 = type metadata accessor for CommandOperation();
    v12 = *(_QWORD *)(v11 - 8);
    outlined init with take of TableCellFormula(v10 + *(_QWORD *)(v12 + 72) * v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v14 = type metadata accessor for CommandOperation();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    v19 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v20 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v20;
    }

    v12 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 48 * v6);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v18 = v12[4];
    v17 = v12[5];
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
    v8 = v19;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v18 = 0;
    v17 = 0;
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = v17;
  *(_BYTE *)(a2 + 48) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v12 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v12;
    }
    outlined destroy of IdentifiedDocumentGroupConfiguration(*(_QWORD *)(v11 + 48) + (v6 << 7));
    _s7SwiftUI7WeakBoxVyyXlGWObTm_0(*(_QWORD *)(v11 + 56) + 8 * v6, a2, (uint64_t)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t)type metadata accessor for PlatformDocument, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of SceneID, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of TabCustomizationID.Base, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  result = swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v10 = v11;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(*(_QWORD *)(v10 + 48) + 16 * v6, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
    *a2 = *(_BYTE *)(*(_QWORD *)(v10 + 56) + v6);
    specialized _NativeDictionary._delete(at:)(v6, v10);
    *v3 = v10;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a2 = 3;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = v4;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3, a4);
  LOBYTE(a3) = v11;
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v5;
  v19 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v13 = v19;
  }
  v14 = *(_QWORD *)(v13 + 48) + 32 * v10;
  v15 = *(_QWORD *)(v14 + 8);
  v16 = *(_QWORD *)(v14 + 16);
  swift_release();
  outlined consume of Text.LineStyle?(v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v10);
  specialized _NativeDictionary._delete(at:)(v10, v13);
  *v5 = v13;
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>);
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  outlined destroy of AnyHashable(*(_QWORD *)(v7 + 48) + 40 * v4);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  char v18;
  double result;
  uint64_t v20;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v20 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v20;
    }
    outlined destroy of ToolbarPlacement.Role(*(_QWORD *)(v9 + 48) + 40 * v6);
    v10 = *(_QWORD *)(v9 + 56) + 80 * v6;
    v11 = *(_BYTE *)(v10 + 24);
    v12 = *(_QWORD *)(v10 + 32);
    v13 = *(_BYTE *)(v10 + 40);
    v14 = *(_QWORD *)(v10 + 48);
    v15 = *(_BYTE *)(v10 + 56);
    v16 = *(_WORD *)(v10 + 57);
    v17 = *(_QWORD *)(v10 + 64);
    v18 = *(_BYTE *)(v10 + 72);
    *(_BYTE *)a2 = *(_BYTE *)v10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v10 + 8);
    *(_BYTE *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v12;
    *(_BYTE *)(a2 + 40) = v13;
    *(_QWORD *)(a2 + 48) = v14;
    *(_BYTE *)(a2 + 56) = v15;
    *(_WORD *)(a2 + 57) = v16;
    *(_QWORD *)(a2 + 64) = v17;
    *(_BYTE *)(a2 + 72) = v18;
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = xmmword_187BF9840;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 57) = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }
    outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v9 + 56) + 40 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  double result;
  uint64_t v15;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v15;
    }
    outlined destroy of TableRowID(*(_QWORD *)(v9 + 48) + 48 * v6);
    v10 = *(_QWORD *)(v9 + 56) + 56 * v6;
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_BYTE *)(v10 + 24);
    v13 = *(_BYTE *)(v10 + 48);
    *(_OWORD *)a2 = *(_OWORD *)v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 24) = v12;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v10 + 32);
    *(_BYTE *)(a2 + 48) = v13;
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    *(_BYTE *)(a2 + 49) = 0;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_WORD *)(a2 + 48) = 256;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), void (*a5)(_QWORD, _QWORD, _QWORD), void (*a6)(uint64_t, uint64_t), void (*a7)(void))
{
  uint64_t *v7;
  uint64_t *v12;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v12 = v7;
  v15 = a3 & 1;
  swift_bridgeObjectRetain();
  v16 = a4(a1, a2, v15);
  LOBYTE(a2) = v17;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = *v12;
  v22 = *v12;
  *v12 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a7();
    v19 = v22;
  }
  a5(*(_QWORD *)(*(_QWORD *)(v19 + 48) + 24 * v16), *(_QWORD *)(*(_QWORD *)(v19 + 48) + 24 * v16 + 8), *(unsigned __int8 *)(*(_QWORD *)(v19 + 48) + 24 * v16 + 16));
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v16);
  a6(v16, v19);
  *v12 = v19;
  swift_bridgeObjectRelease();
  return v20;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for CodingUserInfoKey();
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v34(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v35)
        {
          if (v20 >= v35 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v8 = v15;
            if (v16 * a1 < v17
              || (v13 = v16, *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v16;
              v14 = v18;
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v35 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v33(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v34)
        {
          if (v20 >= v34 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v8 = v15;
            if (v16 * a1 < v17
              || (v13 = v16, *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 16 * a1);
            v25 = (_OWORD *)(v23 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v34 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v23 = MEMORY[0x1E0DEE9B0] + 8;
      v9 = MEMORY[0x1E0CE77D8];
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8 || v3 < (uint64_t)v12)
            goto LABEL_6;
        }
        else if (v12 < v8 && v3 < (uint64_t)v12)
        {
          goto LABEL_6;
        }
        v15 = (_QWORD *)(v10 + 8 * v3);
        if (v3 != v6 || v15 >= v11 + 1)
          *v15 = *v11;
        if (v3 < (uint64_t)v6 || *(_QWORD *)(a2 + 56) + 8 * v3 >= *(_QWORD *)(a2 + 56) + 8 * v6 + 8)
        {
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))v9);
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v16 = v3 == v6;
          v3 = v6;
          if (v16)
            goto LABEL_6;
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, v23, (uint64_t (*)(_QWORD, uint64_t))v9);
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        _ViewList_ID.Canonical.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_release();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        if ((v9 - 2) >= 3u)
        {
          v10 = v9 & 1;
          Hasher._combine(_:)(0);
        }
        else
        {
          v10 = (v9 - 2) + 1;
        }
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_14:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_BYTE *)(v12 + v3);
          v14 = (_BYTE *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_QWORD *)(v15 + 8 * v3);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE v25[40];
  Swift::UInt v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(a2 + 48) + 48 * v6, (uint64_t)v25);
        Hasher.init(_seed:)();
        AnyHashable.hash(into:)();
        Hasher._combine(_:)(v26);
        v9 = Hasher._finalize()();
        result = outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v25);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (__int128 *)(v11 + 48 * v3);
          v13 = (__int128 *)(v11 + 48 * v6);
          if (v3 != v6 || v12 >= v13 + 3)
          {
            v14 = *v13;
            v15 = v13[2];
            v12[1] = v13[1];
            v12[2] = v15;
            *v12 = v14;
          }
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_QWORD *)(v16 + 8 * v3);
          v18 = (_QWORD *)(v16 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v12 = *(_QWORD *)(a2 + 48);
        v13 = (_DWORD *)(v12 + 4 * v6);
        result = MEMORY[0x18D75ED7C](*(_QWORD *)(a2 + 40), *v13, 4);
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 >= v8 && v3 >= (uint64_t)v14)
          {
LABEL_16:
            v17 = (_DWORD *)(v12 + 4 * v3);
            if (v3 != v6 || v17 >= v13 + 1)
              *v17 = *v13;
            v18 = *(_QWORD *)(a2 + 56);
            v19 = (__int128 *)(v18 + (v3 << 6));
            v20 = (__int128 *)(v18 + (v6 << 6));
            if (v3 != v6 || (v3 = v6, v19 >= v20 + 4))
            {
              v9 = *v20;
              v10 = v20[1];
              v11 = v20[3];
              v19[2] = v20[2];
              v19[3] = v11;
              *v19 = v9;
              v19[1] = v10;
              v3 = v6;
            }
          }
        }
        else if (v14 >= v8 || v3 >= (uint64_t)v14)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  char v12;
  Swift::UInt v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = 16 * v6;
        v10 = *(_QWORD *)(a2 + 48) + 16 * v6;
        v11 = *(_QWORD *)v10;
        v12 = *(_BYTE *)(v10 + 8);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        if ((v12 - 2) >= 3u)
        {
          v13 = v12 & 1;
          Hasher._combine(_:)(0);
        }
        else
        {
          v13 = (v12 - 2) + 1;
        }
        Hasher._combine(_:)(v13);
        result = Hasher._finalize()();
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_14:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + v9);
          if (16 * v3 != v9 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_QWORD *)(v18 + 8 * v3);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
          {
            *v19 = *v20;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _BYTE v27[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v27);
        v9 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = outlined destroy of AnyHashable((uint64_t)v27);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= v10)
          {
LABEL_16:
            v13 = *(_QWORD *)(a2 + 48);
            v14 = v13 + 40 * v3;
            v15 = (__int128 *)(v13 + 40 * v6);
            if (v3 != v6 || v14 >= (unint64_t)v15 + 40)
            {
              v16 = *v15;
              v17 = v15[1];
              *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
              *(_OWORD *)v14 = v16;
              *(_OWORD *)(v14 + 16) = v17;
            }
            v18 = *(_QWORD *)(a2 + 56);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
            {
              *v19 = *v20;
              v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= v10)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::UInt *v11;
  Swift::UInt v12;
  Swift::UInt v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (Swift::UInt *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        result = Hasher._finalize()();
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = v18 + 40 * v3;
          v20 = (__int128 *)(v18 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= (unint64_t)v20 + 40))
          {
            v9 = *v20;
            v10 = v20[1];
            *(_QWORD *)(v19 + 32) = *((_QWORD *)v20 + 4);
            *(_OWORD *)v19 = v9;
            *(_OWORD *)(v19 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  char v16;
  Swift::Int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v32 = v4;
      do
      {
        v9 = v3;
        v10 = v8;
        v11 = 24 * v6;
        v12 = v2;
        v13 = *(_QWORD *)(v2 + 48) + 24 * v6;
        v15 = *(_QWORD *)v13;
        v14 = *(_QWORD *)(v13 + 8);
        v16 = *(_BYTE *)(v13 + 16);
        Hasher.init(_seed:)();
        if ((v16 & 1) != 0)
        {
          Hasher._combine(_:)(v15);
          Hasher._combine(_:)(v14);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
        }
        v17 = Hasher._finalize()();
        result = outlined consume of SceneID(v15, v14, v16);
        v18 = v17 & v7;
        v8 = v10;
        v3 = v9;
        if (v9 >= (uint64_t)v8)
        {
          v4 = v32;
          v2 = v12;
          if (v18 < v8)
            goto LABEL_5;
        }
        else
        {
          v4 = v32;
          v2 = v12;
          if (v18 >= v8)
            goto LABEL_14;
        }
        if ((uint64_t)v3 >= (uint64_t)v18)
        {
LABEL_14:
          v19 = *(_QWORD *)(v2 + 48);
          v20 = v19 + 24 * v3;
          v21 = (__int128 *)(v19 + v11);
          if ((uint64_t)(24 * v3) < v11 || v20 >= (unint64_t)v21 + 24 || v3 != v6)
          {
            v22 = *v21;
            *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
            *(_OWORD *)v20 = v22;
          }
          v23 = *(_QWORD *)(v2 + 56);
          v24 = (_QWORD *)(v23 + 8 * v3);
          v25 = (_QWORD *)(v23 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v24 >= v25 + 1))
          {
            *v24 = *v25;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v26 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v27 = *v26;
    v28 = (-1 << v3) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v4 + 8 * (result >> 6));
    v28 = *v26;
    v27 = (-1 << result) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(v2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v31;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[8];
  Swift::UInt v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(a2 + 48) + 16 * v6, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v21);
        v9 = Hasher._finalize()();
        result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          if (v3 < (uint64_t)v6 || *(_QWORD *)(a2 + 48) + 16 * v3 >= *(_QWORD *)(a2 + 48) + 16 * v6 + 16)
          {
            type metadata accessor for HashableWeakBox<UIViewController>();
            result = swift_arrayInitWithTakeFrontToBack();
          }
          else if (v3 != v6)
          {
            type metadata accessor for HashableWeakBox<UIViewController>();
            result = swift_arrayInitWithTakeBackToFront();
          }
          v11 = *(_QWORD *)(a2 + 56);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || (v3 = v6, v12 >= v13 + 1))
          {
            *v12 = *v13;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v14 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v15 = *v14;
    v16 = (-1 << v3) - 1;
  }
  else
  {
    v14 = (uint64_t *)(v4 + 8 * (result >> 6));
    v16 = *v14;
    v15 = (-1 << result) - 1;
  }
  *v14 = v16 & v15;
  v17 = *(_QWORD *)(a2 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v19;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t);
  uint64_t v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v33[5];

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v31 = (result + 1) & v7;
      v32 = v2;
      do
      {
        v8 = v4;
        v9 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v6);
        v11 = *v9;
        v10 = v9[1];
        v12 = v9[2];
        v13 = v9[3];
        Hasher.init(_seed:)();
        if (v11)
        {
          Hasher._combine(_:)(1u);
          v14 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v11 + 96);
          swift_retain();
          outlined copy of _ViewList_ID.Canonical?(v10, v12);
          v15 = swift_retain();
          v14(v33, v15);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v33);
          swift_release();
          if (v12 == 1)
            goto LABEL_8;
        }
        else
        {
          Hasher._combine(_:)(0);
          outlined copy of _ViewList_ID.Canonical?(v10, v12);
          if (v12 == 1)
          {
LABEL_8:
            Hasher._combine(_:)(0);
            goto LABEL_11;
          }
        }
        v33[0] = v10;
        v33[1] = v12;
        Hasher._combine(_:)(1u);
        _ViewList_ID.Canonical.hash(into:)();
LABEL_11:
        v4 = v8;
        Hasher._combine(_:)(v13);
        v16 = Hasher._finalize()();
        swift_release();
        result = outlined consume of Text.LineStyle?(v10, v12);
        v17 = v16 & v7;
        if (v3 >= (uint64_t)v31)
        {
          v2 = v32;
          if (v17 < v31)
            goto LABEL_5;
        }
        else
        {
          v2 = v32;
          if (v17 >= v31)
            goto LABEL_16;
        }
        if (v3 >= (uint64_t)v17)
        {
LABEL_16:
          v18 = *(_QWORD *)(v2 + 48);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || v19 >= v20 + 2)
          {
            v21 = v20[1];
            *v19 = *v20;
            v19[1] = v21;
          }
          v22 = *(_QWORD *)(v2 + 56);
          v23 = (_QWORD *)(v22 + 8 * v3);
          v24 = (_QWORD *)(v22 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v23 >= v24 + 1))
          {
            *v23 = *v24;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v8 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(v2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v30;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;
  Swift::UInt v14;
  Swift::UInt8 v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v31 = (result + 1) & v7;
      v32 = v4;
      do
      {
        v8 = v7;
        v9 = v2;
        v10 = *(_QWORD *)(v2 + 48) + 48 * v6;
        v12 = *(_QWORD *)v10;
        v11 = *(_QWORD *)(v10 + 8);
        v13 = *(unsigned __int8 *)(v10 + 16);
        v14 = *(_QWORD *)(v10 + 24);
        v15 = *(_BYTE *)(v10 + 32);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        if (v13 == 6)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v11);
          Hasher._combine(_:)(v13);
          Hasher._combine(_:)(v14);
        }
        Hasher._combine(_:)(v15);
        result = Hasher._finalize()();
        v7 = v8;
        v16 = result & v8;
        v2 = v9;
        if (v3 >= (uint64_t)v31)
        {
          v4 = v32;
          if (v16 < v31)
            goto LABEL_5;
        }
        else
        {
          v4 = v32;
          if (v16 >= v31)
            goto LABEL_14;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_14:
          v17 = *(_QWORD *)(v9 + 48);
          v18 = (__int128 *)(v17 + 48 * v3);
          v19 = (__int128 *)(v17 + 48 * v6);
          if (v3 != v6 || v18 >= v19 + 3)
          {
            v20 = *v19;
            v21 = v19[2];
            v18[1] = v19[1];
            v18[2] = v21;
            *v18 = v20;
          }
          v22 = *(_QWORD *)(v9 + 56);
          v23 = (_QWORD *)(v22 + 8 * v3);
          v24 = (_QWORD *)(v22 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v23 >= v24 + 1))
          {
            *v23 = *v24;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(v2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v30;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= (unint64_t)v17 + 24))
          {
            v9 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::UInt v11;
  Swift::UInt v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  const void *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48) + 24 * v6;
        v10 = *(_QWORD *)v9;
        v11 = *(unsigned __int8 *)(v9 + 8);
        v12 = *(_QWORD *)(v9 + 16);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        result = Hasher._finalize()();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = v14 + 24 * v3;
          v16 = (__int128 *)(v14 + 24 * v6);
          if (v3 != v6 || v15 >= (unint64_t)v16 + 24)
          {
            v17 = *v16;
            *(_QWORD *)(v15 + 16) = *((_QWORD *)v16 + 2);
            *(_OWORD *)v15 = v17;
          }
          v18 = *(_QWORD *)(a2 + 56);
          result = v18 + 304 * v3;
          v19 = (const void *)(v18 + 304 * v6);
          if (304 * v3 < (uint64_t)(304 * v6)
            || result >= (unint64_t)v19 + 304
            || (v20 = v3 == v6, v3 = v6, !v20))
          {
            result = (unint64_t)memmove((void *)result, v19, 0x130uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 72 * v3;
          v15 = (const void *)(v14 + 72 * v6);
          if (72 * v3 < (uint64_t)(72 * v6) || result >= (unint64_t)v15 + 72 || (v16 = v3 == v6, v3 = v6, !v16))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x48uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  const void *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v31);
        Hasher.init(_seed:)();
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v31, (uint64_t)&v28);
        switch(*((_QWORD *)&v29 + 1))
        {
          case 0:
            v9 = 0;
            goto LABEL_15;
          case 1:
            v9 = 1;
            goto LABEL_15;
          case 2:
            v9 = 2;
            goto LABEL_15;
          case 3:
            v9 = 3;
            goto LABEL_15;
          case 4:
            v9 = 4;
            goto LABEL_15;
          case 5:
            v9 = 5;
            goto LABEL_15;
          case 6:
            v9 = 7;
LABEL_15:
            Hasher._combine(_:)(v9);
            break;
          default:
            v26[0] = v28;
            v26[1] = v29;
            v27 = v30;
            Hasher._combine(_:)(6uLL);
            AnyHashable.hash(into:)();
            outlined destroy of AnyHashable((uint64_t)v26);
            break;
        }
        v10 = Hasher._finalize()();
        result = outlined destroy of ToolbarPlacement.Role((uint64_t)v31);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_21;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_21:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = v12 + 40 * v3;
          v14 = (__int128 *)(v12 + 40 * v6);
          if (v3 != v6 || v13 >= (unint64_t)v14 + 40)
          {
            v15 = *v14;
            v16 = v14[1];
            *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
            *(_OWORD *)v13 = v15;
            *(_OWORD *)(v13 + 16) = v16;
          }
          v17 = *(_QWORD *)(a2 + 56);
          result = v17 + 80 * v3;
          v18 = (const void *)(v17 + 80 * v6);
          if (80 * v3 < (uint64_t)(80 * v6) || result >= (unint64_t)v18 + 80 || (v19 = v3 == v6, v3 = v6, !v19))
          {
            result = (unint64_t)memmove((void *)result, v18, 0x50uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
    JUMPOUT(0x1873B2A68);
  }
  *(_QWORD *)(a2 + 16) = v25;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt32 v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_DWORD *)(v11 + 4 * v3);
        v13 = (_DWORD *)(v11 + 4 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        result = v14 + 176 * v3;
        if (176 * v3 < (uint64_t)(176 * v6) || result >= v14 + 176 * v6 + 176)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v15 = v3 == v6;
          v3 = v6;
          if (v15)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_19;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_19:
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        v11 = v10;
        String.hash(into:)();
        v12 = Hasher._finalize()();

        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 2))
          {
            v9 = v19[1];
            *v18 = *v19;
            v18[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  Swift::UInt v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v29 = v4;
      do
      {
        v9 = 24 * v6;
        v10 = v2;
        v11 = v3;
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + 24 * v6 + 16);
        v13 = v8;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v14 = Hasher._finalize()();
        v3 = v11;
        result = outlined consume of TabCustomizationID.Base();
        v8 = v13;
        v15 = v14 & v7;
        if (v11 >= (uint64_t)v13)
        {
          if (v15 < v13)
          {
            v4 = v29;
            v2 = v10;
          }
          else
          {
            v4 = v29;
            v2 = v10;
            if (v3 >= v15)
              goto LABEL_12;
          }
        }
        else
        {
          v4 = v29;
          v2 = v10;
          if (v15 >= v8 || v3 >= v15)
          {
LABEL_12:
            v16 = *(_QWORD *)(v2 + 48);
            v17 = v16 + 24 * v3;
            v18 = (__int128 *)(v16 + v9);
            if (24 * v3 < v9 || v17 >= (unint64_t)v18 + 24 || v3 != v6)
            {
              v19 = *v18;
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
              *(_OWORD *)v17 = v19;
            }
            v20 = *(_QWORD *)(v2 + 56);
            v21 = (_QWORD *)(v20 + 8 * v3);
            v22 = (_QWORD *)(v20 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v21 >= v22 + 1))
            {
              *v21 = *v22;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(v2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v28;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  Swift::UInt v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v29 = v4;
      do
      {
        v9 = 24 * v6;
        v10 = v2;
        v11 = v3;
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + 24 * v6 + 16);
        v13 = v8;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v14 = Hasher._finalize()();
        v3 = v11;
        result = outlined consume of TabCustomizationID.Base();
        v8 = v13;
        v15 = v14 & v7;
        if (v11 >= (uint64_t)v13)
        {
          if (v15 < v13)
          {
            v4 = v29;
            v2 = v10;
          }
          else
          {
            v4 = v29;
            v2 = v10;
            if (v3 >= v15)
              goto LABEL_12;
          }
        }
        else
        {
          v4 = v29;
          v2 = v10;
          if (v15 >= v8 || v3 >= v15)
          {
LABEL_12:
            v16 = *(_QWORD *)(v2 + 48);
            v17 = v16 + 24 * v3;
            v18 = (__int128 *)(v16 + v9);
            if (24 * v3 < v9 || v17 >= (unint64_t)v18 + 24 || v3 != v6)
            {
              v19 = *v18;
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
              *(_OWORD *)v17 = v19;
            }
            v20 = *(_QWORD *)(v2 + 56);
            v21 = (_BYTE *)(v20 + v3);
            v22 = (_BYTE *)(v20 + v6);
            if (v3 != v6 || (v3 = v6, v21 >= v22 + 1))
            {
              *v21 = *v22;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(v2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v28;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = outlined destroy of AnyHashable((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt *v9;
  Swift::UInt v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (Swift::UInt *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        result = Hasher._finalize()();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_QWORD *)(v16 + 8 * v3);
          v18 = (_QWORD *)(v16 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt32 v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_BYTE *)(v12 + v3);
          v14 = (_BYTE *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt32 *v10;
  uint64_t v11;
  Swift::UInt32 v12;
  Swift::UInt32 v13;
  int64_t v14;
  Swift::UInt32 v15;
  Swift::UInt32 v16;
  unint64_t v17;
  Swift::UInt32 v18;
  Swift::UInt32 v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v33 = v4;
      do
      {
        v9 = v2;
        v10 = (Swift::UInt32 *)(*(_QWORD *)(v2 + 48) + 16 * v6);
        v11 = v7;
        v12 = *v10;
        v13 = v10[1];
        v14 = v3;
        v15 = v10[2];
        v16 = v10[3];
        v17 = v8;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        v18 = v13;
        v7 = v11;
        Hasher._combine(_:)(v18);
        v19 = v15;
        v3 = v14;
        Hasher._combine(_:)(v19);
        Hasher._combine(_:)(v16);
        result = Hasher._finalize()();
        v8 = v17;
        v20 = result & v11;
        if (v14 >= (uint64_t)v17)
        {
          if (v20 < v17)
          {
            v4 = v33;
            v2 = v9;
          }
          else
          {
            v4 = v33;
            v2 = v9;
            if (v3 >= (uint64_t)v20)
              goto LABEL_12;
          }
        }
        else
        {
          v4 = v33;
          v2 = v9;
          if (v20 >= v8 || v3 >= (uint64_t)v20)
          {
LABEL_12:
            v21 = *(_QWORD *)(v2 + 48);
            v22 = (_OWORD *)(v21 + 16 * v3);
            v23 = (_OWORD *)(v21 + 16 * v6);
            if (v3 != v6 || v22 >= v23 + 1)
              *v22 = *v23;
            v24 = *(_QWORD *)(v2 + 56);
            v25 = (_OWORD *)(v24 + 16 * v3);
            v26 = (_OWORD *)(v24 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v25 >= v26 + 1))
            {
              *v25 = *v26;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v11;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v27 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v28 = *v27;
    v29 = (-1 << v3) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v4 + 8 * (result >> 6));
    v29 = *v27;
    v28 = (-1 << result) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(v2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v32;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt16 v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_BYTE *)(v11 + v3);
        v13 = (_BYTE *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        result = v14 + 8 * v3;
        if (v3 < (uint64_t)v6 || result >= v14 + 8 * v6 + 8)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v15 = v3 == v6;
          v3 = v6;
          if (v15)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_19;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_19:
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt32 v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_DWORD *)(v11 + 4 * v3);
          v13 = (_DWORD *)(v11 + 4 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        result = Hasher._finalize()();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_BYTE *)(v13 + v3);
          v15 = (_BYTE *)(v13 + v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (40 * v3 < (uint64_t)(40 * v6) || v17 >= (unint64_t)v18 + 40 || (v19 = v3 == v6, v3 = v6, !v19))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v32 = v2;
      v33 = v4;
      v31 = (result + 1) & v7;
      do
      {
        v8 = 40 * v6;
        v9 = *(_QWORD *)(v2 + 48) + 40 * v6;
        v11 = *(_QWORD *)v9;
        v10 = *(_QWORD *)(v9 + 8);
        v13 = *(_QWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 24);
        v14 = *(_BYTE *)(v9 + 32);
        Hasher.init(_seed:)();
        if ((v14 & 1) != 0)
        {
          Hasher._combine(_:)(1uLL);
          outlined copy of TableColumnCustomizationID.Base(v11, v10, v13, v12, 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          String.hash(into:)();
          outlined consume of TableColumnCustomizationID.Base(v11, v10, v13, v12, 1);
        }
        else
        {
          Hasher._combine(_:)(0);
          swift_bridgeObjectRetain();
          String.hash(into:)();
        }
        v15 = Hasher._finalize()();
        result = outlined consume of TableColumnCustomizationID.Base(v11, v10, v13, v12, v14);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v31)
        {
          v2 = v32;
          v4 = v33;
          if (v16 < v31)
            goto LABEL_5;
        }
        else
        {
          v2 = v32;
          v4 = v33;
          if (v16 >= v31)
            goto LABEL_14;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_14:
          v17 = *(_QWORD *)(v2 + 48);
          v18 = v17 + 40 * v3;
          v19 = (__int128 *)(v17 + v8);
          if (40 * v3 < v8 || v18 >= (unint64_t)v19 + 40 || v3 != v6)
          {
            v20 = *v19;
            v21 = v19[1];
            *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
            *(_OWORD *)v18 = v20;
            *(_OWORD *)(v18 + 16) = v21;
          }
          v22 = *(_QWORD *)(v2 + 56);
          v23 = (_OWORD *)(v22 + 16 * v3);
          v24 = (_OWORD *)(v22 + 16 * v6);
          if (16 * v3 != 16 * v6 || (v3 = v6, v23 >= v24 + 1))
          {
            *v23 = *v24;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(v2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v30;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt16 v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_BYTE *)(v14 + v3);
          v16 = (_BYTE *)(v14 + v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v3);
        v13 = (_QWORD *)(v11 + 8 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        result = v14 + 160 * v3;
        if (v3 < (uint64_t)v6 || result >= v14 + 160 * v6 + 160)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v15 = v3 == v6;
          v3 = v6;
          if (v15)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_19;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_19:
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 272 * v3;
          v15 = (const void *)(v14 + 272 * v6);
          if (272 * v3 < (uint64_t)(272 * v6)
            || result >= (unint64_t)v15 + 272
            || (v16 = v3 == v6, v3 = v6, !v16))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x110uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (16 * v3 != 16 * v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 96 * v3;
          v15 = (const void *)(v14 + 96 * v6);
          if (96 * v3 < (uint64_t)(96 * v6) || result >= (unint64_t)v15 + 96 || (v16 = v3 == v6, v3 = v6, !v16))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x60uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        Selector.hash(into:)();
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_QWORD *)(v12 + 8 * v3);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 40 * v3;
          v17 = (__int128 *)(v15 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= (unint64_t)v17 + 40))
          {
            v9 = *v17;
            v10 = v17[1];
            *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
            *(_OWORD *)v16 = v9;
            *(_OWORD *)(v16 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt32 v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_DWORD *)(v11 + 4 * v3);
          v13 = (_DWORD *)(v11 + 4 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 120 * v3;
          v15 = (const void *)(v14 + 120 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v15 + 120))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x78uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  int64_t v14;
  Swift::UInt v15;
  unint64_t v16;
  Swift::UInt v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v32 = v4;
      do
      {
        v10 = 32 * v6;
        v11 = v2;
        v12 = *(_QWORD *)(v2 + 48) + 32 * v6;
        v13 = *(_QWORD *)(v12 + 16);
        v14 = v3;
        v15 = *(unsigned __int8 *)(v12 + 24);
        v16 = v8;
        Hasher.init(_seed:)();
        String.hash(into:)();
        Hasher._combine(_:)(v13);
        v17 = v15;
        v3 = v14;
        Hasher._combine(_:)(v17);
        result = Hasher._finalize()();
        v8 = v16;
        v18 = result & v7;
        if (v14 >= (uint64_t)v16)
        {
          if (v18 < v16)
          {
            v4 = v32;
            v2 = v11;
          }
          else
          {
            v4 = v32;
            v2 = v11;
            if (v3 >= (uint64_t)v18)
              goto LABEL_12;
          }
        }
        else
        {
          v4 = v32;
          v2 = v11;
          if (v18 >= v8 || v3 >= (uint64_t)v18)
          {
LABEL_12:
            v19 = *(_QWORD *)(v2 + 48);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + v10);
            if (32 * v3 != v10 || v20 >= v21 + 2)
            {
              v22 = v21[1];
              *v20 = *v21;
              v20[1] = v22;
            }
            v23 = *(_QWORD *)(v2 + 56);
            v24 = v23 + 24 * v3;
            v25 = (__int128 *)(v23 + 24 * v6);
            if (v3 != v6 || (v3 = v6, v24 >= (unint64_t)v25 + 24))
            {
              v9 = *v25;
              *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
              *(_OWORD *)v24 = v9;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v26 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v27 = *v26;
    v28 = (-1 << v3) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v4 + 8 * (result >> 6));
    v28 = *v26;
    v27 = (-1 << result) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(v2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v31;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _BYTE v23[104];
  Swift::UInt v24;
  uint64_t v25;
  char v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = v6 << 7;
        outlined init with copy of IdentifiedDocumentGroupConfiguration(*(_QWORD *)(a2 + 48) + (v6 << 7), (uint64_t)v23);
        Hasher.init(_seed:)();
        v11 = v24;
        v10 = v25;
        if ((v26 & 1) != 0)
        {
          Hasher._combine(_:)(v24);
          Hasher._combine(_:)(v10);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of SceneID(v11, v10, 0);
        }
        v12 = Hasher._finalize()();
        result = outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v23);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_14;
LABEL_15:
        v14 = *(_QWORD *)(a2 + 48);
        result = v14 + (v3 << 7);
        v15 = (const void *)(v14 + v9);
        if (v3 << 7 != v9 || result >= (unint64_t)v15 + 128)
          result = (unint64_t)memmove((void *)result, v15, 0x80uLL);
        if (v3 < (uint64_t)v6 || *(_QWORD *)(a2 + 56) + 8 * v3 >= *(_QWORD *)(a2 + 56) + 8 * v6 + 8)
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v16 = v3 == v6;
          v3 = v6;
          if (v16)
            goto LABEL_6;
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_22;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_14:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_22:
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  Swift::UInt v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = *((_QWORD *)v9 + 1);
        Hasher.init(_seed:)();
        if (v10 == 3)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v10);
        }
        Hasher._combine(_:)(v11);
        result = Hasher._finalize()();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_14:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_QWORD *)(v16 + 8 * v3);
          v18 = (_QWORD *)(v16 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt *v10;
  Swift::UInt v11;
  Swift::UInt v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (Swift::UInt *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        result = Hasher._finalize()();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 2))
          {
            v9 = v19[1];
            *v18 = *v19;
            v18[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  char v35;
  _BYTE v36[48];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v12 = 48 * v6;
        outlined init with copy of TableRowID(*(_QWORD *)(a2 + 48) + 48 * v6, (uint64_t)v36);
        Hasher.init(_seed:)();
        outlined init with copy of TableRowID((uint64_t)v36, (uint64_t)v33);
        if ((v35 & 1) != 0)
        {
          v31[0] = v33[0];
          v31[1] = v33[1];
          v32 = v34;
          Hasher._combine(_:)(1uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v31);
        }
        else
        {
          v13 = *(_QWORD *)&v33[0];
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v13);
        }
        v14 = Hasher._finalize()();
        result = outlined destroy of TableRowID((uint64_t)v36);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_14:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (__int128 *)(v16 + 48 * v3);
          v18 = (__int128 *)(v16 + v12);
          if (48 * v3 < v12 || v17 >= v18 + 3 || v3 != v6)
          {
            v19 = *v18;
            v20 = v18[2];
            v17[1] = v18[1];
            v17[2] = v20;
            *v17 = v19;
          }
          v21 = *(_QWORD *)(a2 + 56);
          v22 = v21 + 56 * v3;
          v23 = (__int128 *)(v21 + 56 * v6);
          if (56 * v3 < (uint64_t)(56 * v6) || v22 >= (unint64_t)v23 + 56 || (v24 = v3 == v6, v3 = v6, !v24))
          {
            v9 = *v23;
            v10 = v23[1];
            v11 = v23[2];
            *(_QWORD *)(v22 + 48) = *((_QWORD *)v23 + 6);
            *(_OWORD *)(v22 + 16) = v10;
            *(_OWORD *)(v22 + 32) = v11;
            *(_OWORD *)v22 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_OWORD *)(v16 + 32 * v3);
            v18 = (_OWORD *)(v16 + 32 * v6);
            if (32 * v3 != 32 * v6 || (v3 = v6, v17 >= v18 + 2))
            {
              v9 = v18[1];
              *v17 = *v18;
              v17[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE v25[104];
  Swift::UInt v26;
  uint64_t v27;
  char v28;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = v6 << 7;
        outlined init with copy of IdentifiedDocumentGroupConfiguration(*(_QWORD *)(a2 + 48) + (v6 << 7), (uint64_t)v25);
        Hasher.init(_seed:)();
        v11 = v26;
        v10 = v27;
        if ((v28 & 1) != 0)
        {
          Hasher._combine(_:)(v26);
          Hasher._combine(_:)(v10);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of SceneID(v11, v10, 0);
        }
        v12 = Hasher._finalize()();
        result = outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v25);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_14:
          v14 = *(_QWORD *)(a2 + 48);
          result = v14 + (v3 << 7);
          v15 = (const void *)(v14 + v9);
          if (v3 << 7 != v9 || result >= (unint64_t)v15 + 128)
            result = (unint64_t)memmove((void *)result, v15, 0x80uLL);
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_QWORD *)(v16 + 8 * v3);
          v18 = (_QWORD *)(v16 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            result = v15 + 184 * v3;
            v16 = (const void *)(v15 + 184 * v6);
            if (184 * v3 < (uint64_t)(184 * v6)
              || (result < (unint64_t)v16 + 184 ? (v17 = v3 == v6) : (v17 = 0), v3 = v6, !v17))
            {
              result = (unint64_t)memmove((void *)result, v16, 0xB8uLL);
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _BYTE v29[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v29);
        v11 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = outlined destroy of AnyHashable((uint64_t)v29);
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(a2 + 48);
            v16 = v15 + 40 * v3;
            v17 = (__int128 *)(v15 + 40 * v6);
            if (v3 != v6 || v16 >= (unint64_t)v17 + 40)
            {
              v18 = *v17;
              v19 = v17[1];
              *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
              *(_OWORD *)v16 = v18;
              *(_OWORD *)(v16 + 16) = v19;
            }
            v20 = *(_QWORD *)(a2 + 56);
            v21 = v20 + 40 * v3;
            v22 = (__int128 *)(v20 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v21 >= (unint64_t)v22 + 40))
            {
              v9 = *v22;
              v10 = v22[1];
              *(_QWORD *)(v21 + 32) = *((_QWORD *)v22 + 4);
              *(_OWORD *)v21 = v9;
              *(_OWORD *)(v21 + 16) = v10;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            v16 = (_QWORD *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1)
              *v16 = *v12;
            v17 = *(_QWORD *)(a2 + 56);
            v18 = v17 + 40 * v3;
            v19 = (__int128 *)(v17 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              v9 = *v19;
              v10 = v19[1];
              *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
              *(_OWORD *)v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9 || v3 < v13)
            goto LABEL_6;
        }
        else if (v13 < v9 && v3 < v13)
        {
          goto LABEL_6;
        }
        v16 = *(_QWORD *)(a2 + 48);
        v17 = (_QWORD *)(v16 + 8 * v3);
        v18 = (_QWORD *)(v16 + 8 * v6);
        if (v3 != v6 || v17 >= v18 + 1)
          *v17 = *v18;
        v19 = *(_QWORD *)(a2 + 56);
        v20 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for CommandOperation() - 8) + 72);
        v21 = v20 * v3;
        v22 = v19 + v20 * v3;
        v23 = v20 * v6;
        v24 = v19 + v20 * v6 + v20;
        if (v21 < v23 || v22 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v21 == v23)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v26 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v27 = *v26;
    v28 = (-1 << v3) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 16 * v3);
            v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  Swift::Int v12;
  id v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v12 = *(_QWORD *)(a2 + 40);
        v13 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v14 = NSObject._rawHashValue(seed:)(v12);

        v15 = v14 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v3 >= v15)
          {
LABEL_16:
            v18 = *(_QWORD *)(a2 + 48);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || v19 >= v20 + 1)
              *v19 = *v20;
            v21 = *(_QWORD *)(a2 + 56);
            v22 = (__int128 *)(v21 + 48 * v3);
            v23 = (__int128 *)(v21 + 48 * v6);
            if (v3 != v6 || (v3 = v6, v22 >= v23 + 3))
            {
              v10 = *v23;
              v11 = v23[2];
              v22[1] = v23[1];
              v22[2] = v11;
              *v22 = v10;
              v3 = v6;
            }
          }
        }
        else if (v15 >= v9 || v3 >= v15)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD v27[2];

  v1 = v0;
  v2 = type metadata accessor for CodingUserInfoKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>();
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v9;
    return result;
  }
  v25 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v26 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_26;
      v23 = *(_QWORD *)(v26 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    v21 = 32 * v19;
    outlined init with copy of Any(*(_QWORD *)(v7 + 56) + v21, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v20, v6, v2);
    result = outlined init with take of Any(v27, (_OWORD *)(*(_QWORD *)(v9 + 56) + v21));
  }
  v24 = v22 + 2;
  if (v24 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t i;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  char v23[8];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v22 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  for (i = MEMORY[0x1E0DEE9B0] + 8;
        ;
        result = (void *)_s7SwiftUI7WeakBoxVyyXlGWObTm_0((uint64_t)v23, *(_QWORD *)(v4 + 56) + v17, (uint64_t)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, i, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>))
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16);
    outlined init with copy of AccessibilityScrollableContext?(*(_QWORD *)(v2 + 56) + 8 * v16, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, i, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE77D8]);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v22;
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, IncrementalLayoutCacheItem>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_retain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, Int>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<CGFloat, Int>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[3];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Key, [AccessibilityRelationshipScope.Relationship : [AccessibilityNode]]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(v2 + 48) + 48 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = (_OWORD *)(*(_QWORD *)(v4 + 48) + 48 * v15);
    v18 = v23[0];
    v19 = v23[2];
    v17[1] = v23[1];
    v17[2] = v19;
    *v17 = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  _OWORD v27[4];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = v15 << 6;
    result = (void *)outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v2 + 56) + (v15 << 6), (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v19 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    v21 = v27[2];
    v20 = v27[3];
    v22 = v27[1];
    *v19 = v27[0];
    v19[1] = v22;
    v19[2] = v21;
    v19[3] = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v21 = v18;
    *(_BYTE *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ViewIdentity, (_:)>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v43 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v43 >= v13)
      goto LABEL_26;
    v44 = *(_QWORD *)(v6 + 8 * v43);
    ++v9;
    if (!v44)
    {
      v9 = v43 + 1;
      if (v43 + 1 >= v13)
        goto LABEL_26;
      v44 = *(_QWORD *)(v6 + 8 * v9);
      if (!v44)
        break;
    }
LABEL_25:
    v12 = (v44 - 1) & v44;
    v15 = __clz(__rbit64(v44)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 240 * v15;
    v19 = (__int128 *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = v19[6];
    v22 = v19[3];
    v21 = v19[4];
    v51 = v19[5];
    v52 = v20;
    v49 = v22;
    v50 = v21;
    v23 = v19[10];
    v25 = v19[7];
    v24 = v19[8];
    v55 = v19[9];
    v56 = v23;
    v53 = v25;
    v54 = v24;
    v26 = v19[14];
    v28 = v19[11];
    v27 = v19[12];
    v59 = v19[13];
    v60 = v26;
    v57 = v28;
    v58 = v27;
    v30 = v19[1];
    v29 = v19[2];
    v46 = *v19;
    v47 = v30;
    v48 = v29;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v31 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    v32 = v46;
    v33 = v48;
    v31[1] = v47;
    v31[2] = v33;
    *v31 = v32;
    v34 = v49;
    v35 = v50;
    v36 = v52;
    v31[5] = v51;
    v31[6] = v36;
    v31[3] = v34;
    v31[4] = v35;
    v37 = v53;
    v38 = v54;
    v39 = v56;
    v31[9] = v55;
    v31[10] = v39;
    v31[7] = v37;
    v31[8] = v38;
    v40 = v57;
    v41 = v58;
    v42 = v60;
    v31[13] = v59;
    v31[14] = v42;
    v31[11] = v40;
    v31[12] = v41;
    result = outlined retain of AlertStorage(&v46);
  }
  v45 = v43 + 2;
  if (v45 >= v13)
    goto LABEL_26;
  v44 = *(_QWORD *)(v6 + 8 * v45);
  if (v44)
  {
    v9 = v45;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v44 = *(_QWORD *)(v6 + 8 * v9);
    ++v45;
    if (v44)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, Transaction>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  _OWORD v29[7];
  uint64_t v30;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, InspectorStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 120 * v15;
    result = (void *)outlined init with copy of InspectorStorage(*(_QWORD *)(v2 + 56) + 120 * v15, (uint64_t)v29);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v19 = *(_QWORD *)(v4 + 56) + v18;
    v20 = v29[3];
    v21 = v29[1];
    v22 = v29[0];
    *(_OWORD *)(v19 + 32) = v29[2];
    *(_OWORD *)(v19 + 48) = v20;
    *(_OWORD *)v19 = v22;
    *(_OWORD *)(v19 + 16) = v21;
    v23 = v29[4];
    v24 = v29[5];
    v25 = v29[6];
    *(_QWORD *)(v19 + 112) = v30;
    *(_OWORD *)(v19 + 80) = v24;
    *(_OWORD *)(v19 + 96) = v25;
    *(_OWORD *)(v19 + 64) = v23;
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  _BYTE v23[184];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v22 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 176 * v15;
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(v2 + 56) + 176 * v15, (uint64_t)v23);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of ConfirmationDialog((uint64_t)v23, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v22;
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  void *__src;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  __int16 v39;
  char v40;
  char v41;
  _BYTE v42[40];

  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, ToolbarAppearanceConfiguration>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v32 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v36 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = (void *)swift_release();
    v31 = v36;
    v30 = v0;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v3 = v2;
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5)
  {
    result = memmove(result, __src, 8 * v5);
    v3 = v36;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v35 = v1;
  while (1)
  {
    if (v10)
    {
      v37 = (v10 - 1) & v10;
      v38 = v7;
      v11 = __clz(__rbit64(v10)) | (v7 << 6);
      v12 = v35;
      goto LABEL_12;
    }
    v26 = v7 + 1;
    v12 = v35;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v34)
      goto LABEL_26;
    v27 = *((_QWORD *)__src + v26);
    v28 = v7 + 1;
    if (!v27)
    {
      v28 = v7 + 2;
      if (v7 + 2 >= v34)
        goto LABEL_26;
      v27 = *((_QWORD *)__src + v28);
      if (!v27)
        break;
    }
LABEL_25:
    v37 = (v27 - 1) & v27;
    v38 = v28;
    v11 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_12:
    v13 = 5 * v11;
    v14 = 40 * v11;
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v12 + 48) + 40 * v11, (uint64_t)v42);
    v15 = 16 * v13;
    v16 = *(_QWORD *)(v12 + 56) + 16 * v13;
    v17 = *(_BYTE *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 32);
    v21 = *(_BYTE *)(v16 + 40);
    v22 = *(_QWORD *)(v16 + 48);
    v40 = *(_BYTE *)(v16 + 56);
    v41 = *(_BYTE *)(v16 + 24);
    v39 = *(_WORD *)(v16 + 57);
    v23 = *(_QWORD *)(v16 + 64);
    v24 = *(_QWORD *)(v36 + 48) + v14;
    LOBYTE(v14) = *(_BYTE *)(v16 + 72);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v42, v24);
    v25 = *(_QWORD *)(v36 + 56) + v15;
    *(_BYTE *)v25 = v17;
    *(_QWORD *)(v25 + 8) = v18;
    *(_QWORD *)(v25 + 16) = v19;
    *(_BYTE *)(v25 + 24) = v41;
    *(_QWORD *)(v25 + 32) = v20;
    *(_BYTE *)(v25 + 40) = v21;
    *(_QWORD *)(v25 + 48) = v22;
    *(_BYTE *)(v25 + 56) = v40;
    *(_WORD *)(v25 + 57) = v39;
    *(_QWORD *)(v25 + 64) = v23;
    *(_BYTE *)(v25 + 72) = v14;
    swift_retain();
    swift_retain();
    result = (void *)swift_retain();
    v10 = v37;
    v7 = v38;
  }
  v29 = v7 + 3;
  if (v7 + 3 >= v34)
  {
LABEL_26:
    result = (void *)swift_release();
    v30 = v32;
    v31 = v36;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)__src + v29);
  if (v27)
  {
    v28 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v34)
      goto LABEL_26;
    v27 = *((_QWORD *)__src + v28);
    ++v29;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, OrnamentPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v33 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v33 >= v13)
      goto LABEL_26;
    v34 = *(_QWORD *)(v6 + 8 * v33);
    ++v9;
    if (!v34)
    {
      v9 = v33 + 1;
      if (v33 + 1 >= v13)
        goto LABEL_26;
      v34 = *(_QWORD *)(v6 + 8 * v9);
      if (!v34)
        break;
    }
LABEL_25:
    v12 = (v34 - 1) & v34;
    v15 = __clz(__rbit64(v34)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 120 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v21 = *(_QWORD *)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    v23 = *(_BYTE *)(v19 + 56);
    v24 = *(_QWORD *)(v19 + 64);
    v25 = *(_BYTE *)(v19 + 72);
    v26 = *(_BYTE *)(v19 + 73);
    v27 = *(_QWORD *)(v19 + 112);
    v28 = *(_OWORD *)(v19 + 24);
    v29 = *(_OWORD *)(v19 + 40);
    v30 = *(_OWORD *)(v19 + 80);
    v31 = *(_OWORD *)(v19 + 96);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v32 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v32 = v21;
    *(_QWORD *)(v32 + 8) = v20;
    *(_BYTE *)(v32 + 16) = v22;
    *(_OWORD *)(v32 + 24) = v28;
    *(_OWORD *)(v32 + 40) = v29;
    *(_BYTE *)(v32 + 56) = v23;
    *(_QWORD *)(v32 + 64) = v24;
    *(_BYTE *)(v32 + 72) = v25;
    *(_BYTE *)(v32 + 73) = v26;
    *(_OWORD *)(v32 + 80) = v30;
    *(_OWORD *)(v32 + 96) = v31;
    *(_QWORD *)(v32 + 112) = v27;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    result = (void *)swift_retain();
  }
  v35 = v33 + 2;
  if (v35 >= v13)
    goto LABEL_26;
  v34 = *(_QWORD *)(v6 + 8 * v35);
  if (v34)
  {
    v9 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v34 = *(_QWORD *)(v6 + 8 * v9);
    ++v35;
    if (v34)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Selector, CommandAction>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    outlined init with copy of TableColumnList(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of OptionalBinaryInteger(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ContainerBackgroundKeys.AnyCustomKey, AnyView>, (void (*)(void))lazy protocol witness table accessor for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[96];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 96 * v15;
    outlined init with copy of NavigationDestinationPresentation(*(_QWORD *)(v2 + 56) + 96 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of NavigationDestinationPresentation((uint64_t)v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[168];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, UpdateViewDestinationRequest>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 160 * v15;
    outlined init with copy of UpdateViewDestinationRequest(*(_QWORD *)(v2 + 56) + 160 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of UpdateViewDestinationRequest((uint64_t)v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[28];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      v9 = v38 + 1;
      if (v38 + 1 >= v13)
        goto LABEL_26;
      v39 = *(_QWORD *)(v6 + 8 * v9);
      if (!v39)
        break;
    }
LABEL_25:
    v12 = (v39 - 1) & v39;
    v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_BYTE *)(v17 + 16);
    v19 = *(_BYTE *)(v17 + 40);
    v20 = 144 * v15;
    v21 = (__int128 *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_OWORD *)v17;
    v23 = *(_OWORD *)(v17 + 24);
    v25 = v21[1];
    v24 = v21[2];
    v26 = v21[4];
    v44 = v21[3];
    v45 = v26;
    v28 = v21[6];
    v27 = v21[7];
    v29 = v21[5];
    *(_OWORD *)&v48[12] = *(__int128 *)((char *)v21 + 124);
    v47 = v28;
    *(_OWORD *)v48 = v27;
    v46 = v29;
    v41 = *v21;
    v42 = v25;
    v43 = v24;
    v30 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v30 = v22;
    *(_BYTE *)(v30 + 16) = v18;
    *(_OWORD *)(v30 + 24) = v23;
    *(_BYTE *)(v30 + 40) = v19;
    v31 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v31 = v41;
    v32 = v42;
    v33 = v43;
    v34 = v45;
    v31[3] = v44;
    v31[4] = v34;
    v31[1] = v32;
    v31[2] = v33;
    v35 = v46;
    v36 = v47;
    v37 = *(_OWORD *)v48;
    *(_OWORD *)((char *)v31 + 124) = *(_OWORD *)&v48[12];
    v31[6] = v36;
    v31[7] = v37;
    v31[5] = v35;
    result = (void *)outlined retain of NavigationRequest((uint64_t)&v41);
  }
  v40 = v38 + 2;
  if (v40 >= v13)
    goto LABEL_26;
  v39 = *(_QWORD *)(v6 + 8 * v40);
  if (v39)
  {
    v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v9);
    ++v40;
    if (v39)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, DisplayList.Version>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    result = (void *)outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<EventID, EventType>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 40 * v15;
    outlined init with copy of TableColumnList(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    result = (void *)outlined init with take of OptionalBinaryInteger(v26, *(_QWORD *)(v4 + 56) + v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<SceneID, PlatformSceneCache.Info>, (void (*)(void))lazy protocol witness table accessor for type SceneID and conformance SceneID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_QWORD *)(v23 + 8) = v19;
    *(_BYTE *)(v23 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    outlined copy of SceneID(v18, v19, v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  _BYTE v21[16];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v20 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v2 + 48) + 16 * v15, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    result = (void *)outlined init with take of TableCellFormula((uint64_t)v21, *(_QWORD *)(v4 + 48) + 16 * v15, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v20;
    goto LABEL_28;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, AnyListSelection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_BYTE *)(v17 + 32);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v17 + 40);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    v23 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v17;
    *(_OWORD *)(v22 + 16) = v23;
    *(_BYTE *)(v22 + 32) = v18;
    *(_QWORD *)(v22 + 40) = v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_retain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, NavigationListState.Selection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_BYTE *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 40);
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 32);
    v25 = *(_QWORD *)(v4 + 48) + v16;
    v26 = *(_OWORD *)(v17 + 16);
    v27 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)v25 = *(_OWORD *)v17;
    *(_OWORD *)(v25 + 16) = v26;
    *(_BYTE *)(v25 + 32) = v18;
    *(_QWORD *)(v25 + 40) = v19;
    v28 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v28 = v22;
    *(_QWORD *)(v28 + 8) = v23;
    *(_OWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 32) = v24;
    swift_retain();
    swift_retain();
    result = (void *)swift_retain();
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, Bool>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v17 = *(_BYTE *)(v16 + 32);
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = *(_QWORD *)(v16 + 40);
    v20 = *(_QWORD *)(v4 + 48) + 48 * v15;
    v21 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v20 = *(_OWORD *)v16;
    *(_OWORD *)(v20 + 16) = v21;
    *(_BYTE *)(v20 + 32) = v17;
    *(_QWORD *)(v20 + 40) = v19;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v18;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_BYTE *)(v17 + 32);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v17 + 40);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    v23 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v17;
    *(_OWORD *)(v22 + 16) = v23;
    *(_BYTE *)(v22 + 32) = v18;
    *(_QWORD *)(v22 + 40) = v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  __int128 v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationLinkSelectionIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    v25 = *(_OWORD *)(v17 + 16);
    *(_QWORD *)v21 = *(_QWORD *)v17;
    *(_QWORD *)(v21 + 8) = v18;
    *(_OWORD *)(v21 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_retain();
    result = (void *)outlined copy of _ViewList_ID.Canonical?(v18, v25);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, Decodable & Encodable.Type>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 16);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)v21;
    *v23 = v19;
    v23[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v25 = v24;
    *(_QWORD *)(v25 + 16) = v22;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t __dst[39];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationColumnState>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  v26 = v2 + 64;
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v22 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v12)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_26;
      v23 = *(_QWORD *)(v26 + 8 * v8);
      if (!v23)
        break;
    }
LABEL_25:
    v11 = (v23 - 1) & v23;
    v14 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_12:
    v15 = 24 * v14;
    v16 = *(_QWORD *)(v2 + 48) + 24 * v14;
    v17 = *(_QWORD *)v16;
    v18 = *(_BYTE *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = 304 * v14;
    memcpy(__dst, (const void *)(*(_QWORD *)(v2 + 56) + 304 * v14), 0x12BuLL);
    v21 = *(_QWORD *)(v4 + 48) + v15;
    *(_QWORD *)v21 = v17;
    *(_BYTE *)(v21 + 8) = v18;
    *(_QWORD *)(v21 + 16) = v19;
    memcpy((void *)(*(_QWORD *)(v4 + 56) + v20), __dst, 0x12BuLL);
    result = outlined retain of NavigationColumnState(__dst);
  }
  v24 = v22 + 2;
  if (v24 >= v12)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v8 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v8);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[4];
  char v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationState.StackContent.PositionedView>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    result = (void *)outlined init with copy of NavigationState.StackContent.PositionedView(*(_QWORD *)(v2 + 56) + 72 * v15, (uint64_t)v24);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    v17 = *(_QWORD *)(v4 + 56) + 72 * v15;
    *(_OWORD *)v17 = v24[0];
    v18 = v24[1];
    v19 = v24[2];
    v20 = v24[3];
    *(_BYTE *)(v17 + 64) = v25;
    *(_OWORD *)(v17 + 32) = v19;
    *(_OWORD *)(v17 + 48) = v20;
    *(_OWORD *)(v17 + 16) = v18;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UUID, PlatformItemList>();
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v25 = v8;
    return result;
  }
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<KeyCommandID, ()>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<GridIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type GridIndex and conformance GridIndex);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, PropertyList>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, Any>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<VerticalEdge, Double>, (void (*)(void))lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[40];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, PlatformBarUpdates>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v22);
    v17 = 2 * v15;
    v18 = *(_WORD *)(*(_QWORD *)(v2 + 56) + v17);
    result = (void *)outlined init with take of ToolbarPlacement.Role((uint64_t)v22, *(_QWORD *)(v4 + 48) + v16);
    *(_WORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>);
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<UInt, ObjectIdentifier>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, TabItemGroup.HostCache>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v23 = *(_QWORD *)v21;
    v22 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)(v21 + 16);
    *v24 = v18;
    v24[1] = v19;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v23;
    *(_QWORD *)(v26 + 8) = v22;
    *(_OWORD *)(v26 + 16) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, Int>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, Int>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    result = (void *)outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_BYTE *)(v17 + 16);
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v22 = *(_QWORD *)v17;
    *(_QWORD *)(v22 + 8) = v18;
    *(_BYTE *)(v22 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    outlined copy of TabCustomizationID.Base();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 16);
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v20 = *(_QWORD *)(v4 + 48) + 24 * v15;
    *(_QWORD *)v20 = v17;
    *(_QWORD *)(v20 + 8) = v18;
    *(_BYTE *)(v20 + 16) = v19;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
    result = (void *)outlined copy of TabCustomizationID.Base();
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, ScrollViewCommitInfo>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      v9 = v31 + 1;
      if (v31 + 1 >= v13)
        goto LABEL_26;
      v32 = *(_QWORD *)(v6 + 8 * v9);
      if (!v32)
        break;
    }
LABEL_25:
    v12 = (v32 - 1) & v32;
    v15 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 80 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = v19[3];
    v24 = v19[4];
    v25 = v19[5];
    v26 = v19[6];
    v27 = v19[7];
    v29 = v19[8];
    v28 = v19[9];
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v30 = (uint64_t *)(*(_QWORD *)(v4 + 56) + v18);
    *v30 = v20;
    v30[1] = v21;
    v30[2] = v22;
    v30[3] = v23;
    v30[4] = v24;
    v30[5] = v25;
    v30[6] = v26;
    v30[7] = v27;
    v30[8] = v29;
    v30[9] = v28;
    result = (void *)outlined copy of ScrollViewCommitInfo(v20, v21, v22, v23, v24, v25, v26, v27, v29);
  }
  v33 = v31 + 2;
  if (v33 >= v13)
    goto LABEL_26;
  v32 = *(_QWORD *)(v6 + 8 * v33);
  if (v32)
  {
    v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v9);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;

  v1 = v0;
  v2 = type metadata accessor for CommandGroupPlacementBox(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>();
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v9;
    return result;
  }
  v26 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v13;
    if (!v24)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v17)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v13);
      if (!v24)
        break;
    }
LABEL_25:
    v16 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v7 + 48) + v20, (uint64_t)v6, type metadata accessor for CommandGroupPlacementBox);
    v21 = 16 * v19;
    v22 = *(_QWORD *)(v9 + 48) + v20;
    v28 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v21);
    outlined init with take of TableCellFormula((uint64_t)v6, v22, type metadata accessor for CommandGroupPlacementBox);
    *(_OWORD *)(*(_QWORD *)(v9 + 56) + v21) = v28;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v13 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v13);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = outlined init with take of Any(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewDebug.Property, Any>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = outlined init with take of Any(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    v18 = (id)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<AccessibilityAttachmentToken, DisplayList.Version>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = 12 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 12 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v21 = v18;
    *(_BYTE *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<String, MainMenuItemCoordinator>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, [Any]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[40];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v22);
    v17 = 8 * v15;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v22, *(_QWORD *)(v4 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
    result = (void *)swift_retain();
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[40];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v22);
    v17 = 8 * v15;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v22, *(_QWORD *)(v4 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
    result = (void *)swift_retain();
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20[8];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    outlined init with copy of AccessibilityFocus.Target(*(_QWORD *)(v2 + 56) + 8 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = (void *)outlined init with take of AccessibilityFocus.Target((uint64_t)v20, *(_QWORD *)(v4 + 56) + 8 * v15);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, [AnyHashable : PassthroughSubject<Any, Never>]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, TouchEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v34 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v13)
      goto LABEL_26;
    v35 = *(_QWORD *)(v6 + 8 * v34);
    ++v9;
    if (!v35)
    {
      v9 = v34 + 1;
      if (v34 + 1 >= v13)
        goto LABEL_26;
      v35 = *(_QWORD *)(v6 + 8 * v9);
      if (!v35)
        break;
    }
LABEL_25:
    v12 = (v35 - 1) & v35;
    v15 = __clz(__rbit64(v35)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 112 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 72);
    v26 = *(_QWORD *)(v21 + 80);
    v27 = *(_BYTE *)(v21 + 104);
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v29 = *(_OWORD *)(v21 + 24);
    v30 = *(_OWORD *)(v21 + 40);
    v31 = *(_OWORD *)(v21 + 56);
    v32 = *(_OWORD *)(v21 + 88);
    *v28 = v19;
    v28[1] = v18;
    v33 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v33 = v22;
    *(_BYTE *)(v33 + 8) = v23;
    *(_QWORD *)(v33 + 16) = v24;
    *(_OWORD *)(v33 + 24) = v29;
    *(_OWORD *)(v33 + 40) = v30;
    *(_OWORD *)(v33 + 56) = v31;
    *(_QWORD *)(v33 + 72) = v25;
    *(_QWORD *)(v33 + 80) = v26;
    *(_OWORD *)(v33 + 88) = v32;
    *(_BYTE *)(v33 + 104) = v27;
    result = (void *)swift_retain();
  }
  v36 = v34 + 2;
  if (v36 >= v13)
    goto LABEL_26;
  v35 = *(_QWORD *)(v6 + 8 * v36);
  if (v35)
  {
    v9 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v35 = *(_QWORD *)(v6 + 8 * v9);
    ++v36;
    if (v35)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, PhysicalButtonEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    LOBYTE(v21) = *(_BYTE *)(v21 + 24);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v25 = v19;
    v25[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_BYTE *)(v26 + 8) = v23;
    *(_QWORD *)(v26 + 16) = v24;
    *(_BYTE *)(v26 + 24) = v21;
    result = (void *)swift_retain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationSplitViewColumnWidth>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v24 = __clz(__rbit64(v22));
    v12 = (v22 - 1) & v22;
    v15 = v24 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 40 * v15;
    v17 = *(_BYTE *)(v16 + 32);
    v18 = *(_OWORD *)v16;
    v19 = *(_OWORD *)(v16 + 16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v20 = *(_QWORD *)(v4 + 56) + 40 * v15;
    *(_OWORD *)v20 = v18;
    *(_OWORD *)(v20 + 16) = v19;
    *(_BYTE *)(v20 + 32) = v17;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableColumnCustomizationID, TableColumnCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 40 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_BYTE *)(v17 + 32);
    v23 = 16 * v15;
    v24 = *(_QWORD *)(v2 + 56) + v23;
    v25 = *(_QWORD *)v24;
    v26 = *(_BYTE *)(v24 + 8);
    LOBYTE(v24) = *(_BYTE *)(v24 + 9);
    v27 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v27 = v18;
    *(_QWORD *)(v27 + 8) = v19;
    *(_QWORD *)(v27 + 16) = v20;
    *(_QWORD *)(v27 + 24) = v21;
    *(_BYTE *)(v27 + 32) = v22;
    v28 = *(_QWORD *)(v4 + 56) + v23;
    *(_QWORD *)v28 = v25;
    *(_BYTE *)(v28 + 8) = v26;
    *(_BYTE *)(v28 + 9) = v24;
    result = (void *)outlined copy of TableColumnCustomizationID.Base(v18, v19, v20, v21, v22);
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<SpatialEventCollection.Event.ID, SpatialEventCollection.Event>, (void (*)(void))lazy protocol witness table accessor for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v31 = __clz(__rbit64(v29));
    v12 = (v29 - 1) & v29;
    v15 = v31 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 80 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    v23 = *(_BYTE *)(v19 + 40);
    result = *(void **)(v19 + 64);
    v24 = *(_BYTE *)(v19 + 72);
    v25 = *(_OWORD *)(v19 + 24);
    v26 = *(_OWORD *)(v19 + 48);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v27 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v27 = v20;
    *(_QWORD *)(v27 + 8) = v21;
    *(_BYTE *)(v27 + 16) = v22;
    *(_OWORD *)(v27 + 24) = v25;
    *(_BYTE *)(v27 + 40) = v23;
    *(_OWORD *)(v27 + 48) = v26;
    *(_QWORD *)(v27 + 64) = result;
    *(_BYTE *)(v27 + 72) = v24;
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for SystemSegmentItem();
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<SystemSegmentItem, Int>();
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v27 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v28 + 72) * v18;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v6 + 48) + v19, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v20);
    result = (void *)outlined init with take of TableCellFormula((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<AccessibilityTechnology, [AccessibilityFocus.Match : Set<UniqueID>]>);
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Match>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<String, SceneStorageValues.AnyEntry>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _OWORD v37[11];

  v1 = v0;
  v2 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>();
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v9;
    return result;
  }
  v35 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v36 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v31 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v31 >= v17)
      goto LABEL_26;
    v32 = *(_QWORD *)(v36 + 8 * v31);
    ++v13;
    if (!v32)
    {
      v13 = v31 + 1;
      if (v31 + 1 >= v17)
        goto LABEL_26;
      v32 = *(_QWORD *)(v36 + 8 * v13);
      if (!v32)
        break;
    }
LABEL_25:
    v16 = (v32 - 1) & v32;
    v19 = __clz(__rbit64(v32)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v7 + 48) + v20, (uint64_t)v6, type metadata accessor for DisplayList.HostedViewState.Key);
    v21 = 176 * v19;
    outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(_QWORD *)(v7 + 56) + v21, (uint64_t)v37);
    result = (void *)outlined init with take of TableCellFormula((uint64_t)v6, *(_QWORD *)(v9 + 48) + v20, type metadata accessor for DisplayList.HostedViewState.Key);
    v22 = (_OWORD *)(*(_QWORD *)(v9 + 56) + v21);
    v23 = v37[7];
    v24 = v37[8];
    v25 = v37[10];
    v22[9] = v37[9];
    v22[10] = v25;
    v22[7] = v23;
    v22[8] = v24;
    v26 = v37[3];
    v27 = v37[4];
    v28 = v37[6];
    v22[5] = v37[5];
    v22[6] = v28;
    v22[3] = v26;
    v22[4] = v27;
    v29 = v37[2];
    v30 = v37[1];
    *v22 = v37[0];
    v22[1] = v30;
    v22[2] = v29;
  }
  v33 = v31 + 2;
  if (v33 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v35;
    goto LABEL_28;
  }
  v32 = *(_QWORD *)(v36 + 8 * v33);
  if (v32)
  {
    v13 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v32 = *(_QWORD *)(v36 + 8 * v13);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_DisplayList_Identity, DisplayList>, (void (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 16 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_WORD *)(v19 + 8);
    LOBYTE(v19) = *(_BYTE *)(v19 + 10);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v22 = v20;
    *(_WORD *)(v22 + 8) = v21;
    *(_BYTE *)(v22 + 10) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[280];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, TabEntry>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 272 * v15;
    outlined init with copy of TabEntry(*(_QWORD *)(v2 + 56) + 272 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of TabEntry(v26, (void *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Int, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v27 = __clz(__rbit64(v25));
    v12 = (v25 - 1) & v25;
    v15 = v27 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 48 * v15;
    v19 = (__int128 *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v23 = v20;
    v23[1] = v21;
    v23[2] = v22;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, AGAttribute>, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, MEMORY[0x1E0CFED18]);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarStorage.ID, Int>, (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 40);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    v24 = *(_OWORD *)(v17 + 16);
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_QWORD *)(v23 + 8) = v18;
    *(_OWORD *)(v23 + 16) = v24;
    *(_QWORD *)(v23 + 32) = v20;
    *(_QWORD *)(v23 + 40) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;
  _BYTE v25[40];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Toolbar.BarLocation, Toolbar.LocationStorage>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 24 * v15;
    v18 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v19 = *(_QWORD *)(v18 + 16);
    v24 = *(_OWORD *)v18;
    outlined init with take of Toolbar.BarLocation((uint64_t)v25, *(_QWORD *)(v4 + 48) + v16);
    v20 = *(_QWORD *)(v4 + 56) + v17;
    *(_OWORD *)v20 = v24;
    *(_QWORD *)(v20 + 16) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, Toolbar.VendedItem>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(void **)v20;
    LOBYTE(v20) = *(_BYTE *)(v20 + 8);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v18;
    v22[1] = v19;
    v23 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v23 = v21;
    *(_BYTE *)(v23 + 8) = v20;
    v24 = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for ToolbarStorage.Entry(0);
  v30 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<String, ToolbarStorage.Entry>();
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v27 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v28 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v29 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v29)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v12;
    if (!v25)
    {
      v12 = v24 + 1;
      if (v24 + 1 >= v29)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v12);
      if (!v25)
        break;
    }
LABEL_25:
    v15 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v6 + 56) + v22, (uint64_t)v5, type metadata accessor for ToolbarStorage.Entry);
    v23 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v18);
    *v23 = v21;
    v23[1] = v20;
    outlined init with take of TableCellFormula((uint64_t)v5, *(_QWORD *)(v8 + 56) + v22, type metadata accessor for ToolbarStorage.Entry);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v29)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v12 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v12 >= v29)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v12);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _OWORD v25[5];
  char v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarStorage.Entry.ID, Int>, (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    result = (void *)outlined init with copy of ToolbarStorage.Entry.ID(*(_QWORD *)(v2 + 48) + 88 * v15, (uint64_t)v25);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 88 * v15;
    v18 = v25[4];
    v19 = v25[3];
    v20 = v25[2];
    *(_BYTE *)(v17 + 80) = v26;
    *(_OWORD *)(v17 + 48) = v19;
    *(_OWORD *)(v17 + 64) = v18;
    *(_OWORD *)(v17 + 32) = v20;
    v21 = v25[1];
    *(_OWORD *)v17 = v25[0];
    *(_OWORD *)(v17 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>, (void (*)(void))lazy protocol witness table accessor for type Axis and conformance Axis);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = (__int128 *)(*(_QWORD *)(v2 + 56) + 32 * v15);
    v17 = *v16;
    v18 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15);
    *v19 = v17;
    v19[1] = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Character, String>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  __int128 v31;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyboardShortcut, KeyboardShortcutBridge.Shortcut>, (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcut and conformance KeyboardShortcut);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    LOBYTE(v17) = *(_BYTE *)(v17 + 24);
    v21 = 24 * v15;
    v22 = *(_QWORD *)(v2 + 56) + v21;
    v23 = *(_QWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v4 + 48) + v16;
    v31 = *(_OWORD *)v22;
    v25 = *(_OWORD *)v22;
    *(_QWORD *)v24 = v19;
    *(_QWORD *)(v24 + 8) = v18;
    *(_QWORD *)(v24 + 16) = v20;
    *(_BYTE *)(v24 + 24) = v17;
    v26 = *(_QWORD *)(v4 + 56) + v21;
    *(_OWORD *)v26 = v25;
    *(_QWORD *)(v26 + 16) = v23;
    swift_bridgeObjectRetain();
    v27 = (id)v31;
    result = (void *)swift_retain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<KeyboardShortcutBinding, Int>, (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = v15 << 6;
    v17 = *(_QWORD *)(v2 + 48) + (v15 << 6);
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(_BYTE *)(v17 + 24);
    v22 = *(_QWORD *)(v17 + 48);
    v21 = *(_QWORD *)(v17 + 56);
    v23 = 8 * v15;
    v24 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v23);
    v25 = *(_QWORD *)(v4 + 48) + v16;
    v26 = *(_OWORD *)(v17 + 32);
    *(_QWORD *)v25 = *(_QWORD *)v17;
    *(_QWORD *)(v25 + 8) = v18;
    *(_QWORD *)(v25 + 16) = v19;
    *(_BYTE *)(v25 + 24) = v20;
    *(_OWORD *)(v25 + 32) = v26;
    *(_QWORD *)(v25 + 48) = v22;
    *(_QWORD *)(v25 + 56) = v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v23) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  const void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = type metadata accessor for UTType();
  v1 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v2);
  v36 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UTType, String?>();
  v33 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)();
  v6 = *(_QWORD *)(v4 + 16);
  v39 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v31 = v39;
    v30 = v33;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v35 = (const void *)(v4 + 64);
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, v35, 8 * v9);
    v7 = v39;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v38 = v4;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v34 = (unint64_t)(v12 + 63) >> 6;
  v16 = v36;
  v15 = v37;
  v17 = v39;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v38;
      goto LABEL_12;
    }
    v27 = v11 + 1;
    v20 = v38;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v27);
    ++v11;
    if (!v28)
    {
      v11 = v27 + 1;
      if (v27 + 1 >= v34)
        goto LABEL_26;
      v28 = *((_QWORD *)v35 + v11);
      if (!v28)
        break;
    }
LABEL_25:
    v14 = (v28 - 1) & v28;
    v19 = __clz(__rbit64(v28)) + (v11 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v15);
    v22 = 16 * v19;
    v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v19);
    v24 = *v23;
    v25 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v17 + 48) + v21, v16, v15);
    v26 = (_QWORD *)(*(_QWORD *)(v17 + 56) + v22);
    *v26 = v24;
    v26[1] = v25;
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v34)
  {
LABEL_26:
    result = (void *)swift_release();
    v30 = v33;
    v31 = v39;
    goto LABEL_28;
  }
  v28 = *((_QWORD *)v35 + v29);
  if (v28)
  {
    v11 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v11 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v11);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  char v29[8];
  _OWORD v30[6];
  _OWORD v31[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v28 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = v15 << 7;
    outlined init with copy of IdentifiedDocumentGroupConfiguration(*(_QWORD *)(v2 + 48) + (v15 << 7), (uint64_t)v30);
    v17 = 8 * v15;
    outlined init with copy of SearchFieldConfiguration.Data?(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    v18 = (_OWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v19 = v30[4];
    v20 = v30[5];
    v21 = v31[0];
    *(_OWORD *)((char *)v18 + 105) = *(_OWORD *)((char *)v31 + 9);
    v18[5] = v20;
    v18[6] = v21;
    v18[4] = v19;
    v22 = v30[0];
    v23 = v30[1];
    v24 = v30[3];
    v18[2] = v30[2];
    v18[3] = v24;
    *v18 = v22;
    v18[1] = v23;
    result = (void *)_s7SwiftUI7WeakBoxVyyXlGWObTm_0((uint64_t)v29, *(_QWORD *)(v4 + 56) + v17, (uint64_t)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t)type metadata accessor for PlatformDocument, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, char *, uint64_t);
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UUID, (_:)>();
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v9;
    return result;
  }
  v27 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v28 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v17)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v13;
    if (!v25)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v17)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v13);
      if (!v25)
        break;
    }
LABEL_25:
    v16 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    v21 = 16 * v19;
    v22 = *(_QWORD *)(v9 + 48) + v20;
    v23 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v29 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v21);
    v23(v22, v6, v2);
    *(_OWORD *)(*(_QWORD *)(v9 + 56) + v21) = v29;
    result = (void *)swift_retain();
  }
  v26 = v24 + 2;
  if (v26 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v13 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v13);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, RawPanGesture.StateType.EventInfo>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v29 = __clz(__rbit64(v27));
    v12 = (v27 - 1) & v27;
    v15 = v29 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = (__int128 *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *v21;
    v24 = v21[1];
    *v22 = v19;
    v22[1] = v18;
    v25 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v25 = v23;
    v25[1] = v24;
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _BYTE v34[48];

  type metadata accessor for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>();
  v28 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = (void *)swift_release();
    v27 = v0;
LABEL_28:
    *v27 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5)
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  v7 = 0;
  v31 = v3;
  v32 = v1;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v29 = v1 + 64;
  v30 = (unint64_t)(v8 + 63) >> 6;
  v11 = v3;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v7 << 6);
      v14 = v32;
      goto LABEL_12;
    }
    v24 = v7 + 1;
    v14 = v32;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v7;
    if (!v25)
    {
      v7 = v24 + 1;
      if (v24 + 1 >= v30)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v7);
      if (!v25)
        break;
    }
LABEL_25:
    v10 = (v25 - 1) & v25;
    v13 = __clz(__rbit64(v25)) + (v7 << 6);
LABEL_12:
    v15 = 48 * v13;
    outlined init with copy of TableRowID(*(_QWORD *)(v14 + 48) + 48 * v13, (uint64_t)v34);
    v16 = 56 * v13;
    v17 = *(_QWORD *)(v14 + 56) + v16;
    v33 = *(_OWORD *)v17;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_BYTE *)(v17 + 24);
    v20 = *(_QWORD *)(v17 + 32);
    v21 = *(_QWORD *)(v17 + 40);
    v22 = *(_BYTE *)(v17 + 48);
    result = (void *)outlined init with take of TableRowID((uint64_t)v34, *(_QWORD *)(v11 + 48) + v15);
    v23 = *(_QWORD *)(v11 + 56) + v16;
    *(_OWORD *)v23 = v33;
    *(_QWORD *)(v23 + 16) = v18;
    *(_BYTE *)(v23 + 24) = v19;
    *(_QWORD *)(v23 + 32) = v20;
    *(_QWORD *)(v23 + 40) = v21;
    *(_BYTE *)(v23 + 48) = v22;
  }
  v26 = v24 + 2;
  if (v26 >= v30)
  {
LABEL_26:
    result = (void *)swift_release();
    v27 = v28;
    v3 = v31;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v7 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v7 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v7);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[48];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, Int>, (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    outlined init with copy of TableRowID(*(_QWORD *)(v2 + 48) + 48 * v15, (uint64_t)v22);
    v17 = 8 * v15;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
    result = (void *)outlined init with take of TableRowID((uint64_t)v22, *(_QWORD *)(v4 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v27 = __clz(__rbit64(v25));
    v12 = (v25 - 1) & v25;
    v15 = v27 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_BYTE *)(v19 + 24);
    v22 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v23 = v22;
    *(_QWORD *)(v23 + 16) = v20;
    *(_BYTE *)(v23 + 24) = v21;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, HoverEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v26 = *(_OWORD *)(v21 + 24);
    *v25 = v19;
    v25[1] = v18;
    v27 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v27 = v22;
    *(_BYTE *)(v27 + 8) = v23;
    *(_QWORD *)(v27 + 16) = v24;
    *(_OWORD *)(v27 + 24) = v26;
    result = (void *)swift_retain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<EventID, [KeyPress.Handler]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  _OWORD v27[6];
  _OWORD v28[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    outlined init with copy of IdentifiedDocumentGroupConfiguration(*(_QWORD *)(v2 + 48) + (v15 << 7), (uint64_t)v27);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = (_OWORD *)(*(_QWORD *)(v4 + 48) + (v15 << 7));
    v19 = v27[5];
    v18 = v28[0];
    v20 = v27[4];
    *(_OWORD *)((char *)v17 + 105) = *(_OWORD *)((char *)v28 + 9);
    v17[5] = v19;
    v17[6] = v18;
    v17[4] = v20;
    v21 = v27[0];
    v22 = v27[1];
    v23 = v27[3];
    v17[2] = v27[2];
    v17[3] = v23;
    *v17 = v21;
    v17[1] = v22;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, String>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, VersionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v27 = __clz(__rbit64(v25));
    v12 = (v25 - 1) & v25;
    v15 = v27 + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_BYTE *)(v17 + 16);
    v19 = 4 * v15;
    v20 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_BYTE *)(v17 + 40);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    v23 = *(_OWORD *)(v17 + 24);
    *(_OWORD *)v22 = *(_OWORD *)v17;
    *(_BYTE *)(v22 + 16) = v18;
    *(_OWORD *)(v22 + 24) = v23;
    *(_BYTE *)(v22 + 40) = v21;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, Image.Resolved>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v39 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v39 >= v13)
      goto LABEL_26;
    v40 = *(_QWORD *)(v6 + 8 * v39);
    ++v9;
    if (!v40)
    {
      v9 = v39 + 1;
      if (v39 + 1 >= v13)
        goto LABEL_26;
      v40 = *(_QWORD *)(v6 + 8 * v9);
      if (!v40)
        break;
    }
LABEL_25:
    v12 = (v40 - 1) & v40;
    v15 = __clz(__rbit64(v40)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 184 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_OWORD *)(v19 + 112);
    v22 = *(_OWORD *)(v19 + 64);
    v21 = *(_OWORD *)(v19 + 80);
    v48 = *(_OWORD *)(v19 + 96);
    v49 = v20;
    v46 = v22;
    v47 = v21;
    v24 = *(_OWORD *)(v19 + 144);
    v23 = *(_OWORD *)(v19 + 160);
    v25 = *(_OWORD *)(v19 + 128);
    *(_DWORD *)((char *)v52 + 15) = *(_DWORD *)(v19 + 175);
    v51 = v24;
    v52[0] = v23;
    v50 = v25;
    v27 = *(_OWORD *)v19;
    v26 = *(_OWORD *)(v19 + 16);
    v28 = *(_OWORD *)(v19 + 48);
    v44 = *(_OWORD *)(v19 + 32);
    v45 = v28;
    v42 = v27;
    v43 = v26;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v29 = *(_QWORD *)(v4 + 56) + v18;
    v30 = v42;
    v31 = v43;
    v32 = v45;
    *(_OWORD *)(v29 + 32) = v44;
    *(_OWORD *)(v29 + 48) = v32;
    *(_OWORD *)v29 = v30;
    *(_OWORD *)(v29 + 16) = v31;
    v33 = v46;
    v34 = v47;
    v35 = v49;
    *(_OWORD *)(v29 + 96) = v48;
    *(_OWORD *)(v29 + 112) = v35;
    *(_OWORD *)(v29 + 64) = v33;
    *(_OWORD *)(v29 + 80) = v34;
    v36 = v50;
    v37 = v51;
    v38 = v52[0];
    *(_DWORD *)(v29 + 175) = *(_DWORD *)((char *)v52 + 15);
    *(_OWORD *)(v29 + 144) = v37;
    *(_OWORD *)(v29 + 160) = v38;
    *(_OWORD *)(v29 + 128) = v36;
    result = (void *)outlined retain of Image.Resolved((uint64_t)&v42);
  }
  v41 = v39 + 2;
  if (v41 >= v13)
    goto LABEL_26;
  v40 = *(_QWORD *)(v6 + 8 * v41);
  if (v40)
  {
    v9 = v41;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v40 = *(_QWORD *)(v6 + 8 * v9);
    ++v41;
    if (v40)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AdaptableTabBarPlacement, Visibility>, (void (*)(void))lazy protocol witness table accessor for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_DWORD *)(v19 + 16);
    v22 = *(_WORD *)(v19 + 20);
    v23 = *(_QWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v24 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v24 = v23;
    *(_QWORD *)(v24 + 8) = v20;
    *(_WORD *)(v24 + 20) = v22;
    *(_DWORD *)(v24 + 16) = v21;
    result = (void *)swift_retain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v28);
    v17 = *(_QWORD *)(v2 + 56) + v16;
    v18 = *(_DWORD *)v17;
    v19 = *(_QWORD *)(v4 + 48) + v16;
    v20 = *(_OWORD *)(v17 + 8);
    v21 = *(_OWORD *)(v17 + 24);
    v22 = v28[0];
    v23 = v28[1];
    *(_QWORD *)(v19 + 32) = v29;
    *(_OWORD *)v19 = v22;
    *(_OWORD *)(v19 + 16) = v23;
    v24 = *(_QWORD *)(v4 + 56) + v16;
    *(_DWORD *)v24 = v18;
    *(_OWORD *)(v24 + 8) = v20;
    *(_OWORD *)(v24 + 24) = v21;
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_27:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v13)
      goto LABEL_27;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_27;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v13)
          goto LABEL_27;
        v20 = *(_QWORD *)(v6 + 8 * v9);
        if (!v20)
        {
          v9 = v19 + 3;
          if (v19 + 3 >= v13)
            goto LABEL_27;
          v20 = *(_QWORD *)(v6 + 8 * v9);
          v21 = v19 + 3;
          if (!v20)
            break;
        }
      }
    }
LABEL_26:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    outlined init with copy of TableColumnList(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of OptionalBinaryInteger(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_27;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_29:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v13 = (v20 - 1) & v20;
    v16 = v22 + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for CommandOperation();
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UIMenuElement, CommandOperation>();
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (id)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (id)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v27 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = 8 * v18;
    v20 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v18);
    v21 = *(_QWORD *)(v28 + 72) * v18;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v6 + 56) + v21, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v20;
    outlined init with take of TableCellFormula((uint64_t)v5, *(_QWORD *)(v8 + 56) + v21, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (id)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 8 * v15;
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v17);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UIDragItem, CGPoint>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UIDragItem, CGAffineTransform>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 48 * v15;
    v19 = (__int128 *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v23 = v20;
    v23[1] = v21;
    v23[2] = v22;
    result = v17;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 48 * v15;
    v20 = *(_QWORD *)(v2 + 56) + v19;
    v22 = *(void **)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_BYTE *)(v20 + 40);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v26 = *(_OWORD *)(v20 + 24);
    *v25 = *v17;
    v25[1] = v18;
    v27 = *(_QWORD *)(v4 + 56) + v19;
    *(_QWORD *)v27 = v22;
    *(_QWORD *)(v27 + 8) = v21;
    *(_QWORD *)(v27 + 16) = v23;
    *(_OWORD *)(v27 + 24) = v26;
    *(_BYTE *)(v27 + 40) = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    result = v22;
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UTType();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<NSFileWrapper, UTType>();
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v25 = v8;
    return result;
  }
  result = (id)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v26 = v6 + 64;
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v17);
    v20 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 56) + v20, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 56) + v20, v5, v1);
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIMenuIdentifier, &lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, (uint64_t)&protocol conformance descriptor for UIMenuIdentifier);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v12)
      goto LABEL_23;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v8;
    if (!v20)
    {
      v8 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_23;
      v20 = *(_QWORD *)(v6 + 8 * v8);
      if (!v20)
        break;
    }
LABEL_22:
    v11 = (v20 - 1) & v20;
    v14 = __clz(__rbit64(v20)) + (v8 << 6);
LABEL_9:
    v15 = 8 * v14;
    v16 = *(void **)(*(_QWORD *)(v2 + 48) + v15);
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v15) = v17;
    v18 = v16;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v12)
    goto LABEL_23;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v8 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v8 >= v12)
      goto LABEL_23;
    v20 = *(_QWORD *)(v6 + 8 * v8);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, UIAccessibilityCustomRotor>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_BYTE *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = 8 * v15;
    v21 = *(void **)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_BYTE *)v22 = v18;
    *(_QWORD *)(v22 + 8) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, PinnedSection>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  result = v3 + 64;
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || result >= v2 + 64 + 8 * v7)
    result = (unint64_t)memmove((void *)result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v29 = __clz(__rbit64(v27));
    v12 = (v27 - 1) & v27;
    v15 = v29 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = v15 << 6;
    v19 = (__int128 *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *((_QWORD *)v19 + 4);
    v21 = *((_BYTE *)v19 + 40);
    v22 = *((_QWORD *)v19 + 6);
    result = *((unsigned __int8 *)v19 + 56);
    v23 = *v19;
    v24 = v19[1];
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v25 = v23;
    *(_OWORD *)(v25 + 16) = v24;
    *(_QWORD *)(v25 + 32) = v20;
    *(_BYTE *)(v25 + 40) = v21;
    *(_QWORD *)(v25 + 48) = v22;
    *(_BYTE *)(v25 + 56) = result;
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1)
{
  return specialized _NativeDictionary.filter(_:)(a1, (uint64_t (*)(void))specialized _NativeDictionary.extractDictionary(using:count:));
}

{
  return specialized _NativeDictionary.filter(_:)(a1, (uint64_t (*)(void))specialized _NativeDictionary.extractDictionary(using:count:));
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v4 = v2;
  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(isStackAllocationSafe + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5, a2);
    if (v2)
      swift_willThrow();
    else
      return v9;
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v4 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v10, v7, v5, a2);
    MEMORY[0x18D760108](v10, -1, -1);
  }
  return v4;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  v6 = 0;
  v7 = 0;
  v8 = a3 + 64;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v12)
      return a4();
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v12)
        return a4();
      v16 = *(_QWORD *)(v8 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v12)
          return a4();
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    if ((*(_BYTE *)(*(_QWORD *)(a3 + 48) + 24 * v14 + 16) & 1) == 0)
    {
      *(_QWORD *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
        return a4();
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    return a4();
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      return a4();
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  unsigned __int8 *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unsigned __int8 *)(a2 + 48);
    do
    {
      v5 = *v4;
      v4 += 24;
      Hasher._combine(_:)(v5);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of TabCustomizationID.Base();
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  Swift::UInt32 *v4;
  Swift::UInt32 v5;
  Swift::UInt32 v6;
  Swift::UInt32 v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt32 *)(a2 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if ((v6 & 0x7FFFFFFF) != 0)
        v7 = v5;
      else
        v7 = 0;
      Hasher._combine(_:)(v7);
      --v3;
    }
    while (v3);
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  return specialized _ArrayProtocol.filter(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD v53[2];
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v3 = type metadata accessor for ToolbarStorage.GroupItem(0);
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v54 = (uint64_t)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.GroupItem?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v61 = (char *)v53 - v16;
  type metadata accessor for ToolbarStorage.Item?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v60 = (uint64_t)v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ToolbarStorage.Entry(0);
  MEMORY[0x1E0C80A78](v20, v21);
  v65 = (uint64_t)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v66 = (uint64_t)v53 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v30 = (char *)v53 - v29;
  result = MEMORY[0x1E0DEE9D8];
  v68 = MEMORY[0x1E0DEE9D8];
  v32 = *(_QWORD *)(a1 + 16);
  if (v32)
  {
    v55 = v9;
    v53[1] = v1;
    v33 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    v67 = *(_QWORD *)(v28 + 72);
    v58 = v33;
    v34 = a1 + v33;
    v63 = v13;
    v64 = v10;
    v35 = (uint64_t)v61;
    while (1)
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, (uint64_t)v30, type metadata accessor for ToolbarStorage.Entry);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, v35, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (!swift_getEnumCaseMultiPayload())
        break;
      v62 = v32;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, type metadata accessor for ToolbarStorage.Entry.Kind);
      v36 = type metadata accessor for ToolbarStorage.Item(0);
      v37 = (uint64_t)v13;
      v59 = *(_QWORD *)(v36 - 8);
      v38 = v60;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v60, 1, 1, v36);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v38, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.Item?);
      v39 = v66;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, v66, type metadata accessor for ToolbarStorage.Entry);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v39, v37, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v40 = v54;
        outlined init with take of TableCellFormula(v37, v54, type metadata accessor for ToolbarStorage.GroupItem);
        result = v40;
        v41 = *(_QWORD **)(v40 + 72);
        v32 = v62;
        if (v41[2] == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v41 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v41);
          result = v54;
          if (!v41[2])
          {
            __break(1u);
            return result;
          }
          *((_BYTE *)v41
          + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))
          + *(int *)(v36 + 60)) = 1;
          *(_QWORD *)(result + 72) = v41;
        }
        v42 = (uint64_t)v55;
        outlined init with take of TableCellFormula(result, (uint64_t)v55, type metadata accessor for ToolbarStorage.GroupItem);
        v43 = 0;
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, type metadata accessor for ToolbarStorage.Entry.Kind);
        v43 = 1;
        v42 = (uint64_t)v55;
        v32 = v62;
      }
      v49 = v56;
      v48 = v57;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v42, v43, 1, v57);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, type metadata accessor for ToolbarStorage.Entry);
      LODWORD(v48) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v42, 1, v48);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v42, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.GroupItem?);
      v13 = v63;
      if ((_DWORD)v48 != 1)
        goto LABEL_16;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, type metadata accessor for ToolbarStorage.Entry);
      v35 = (uint64_t)v61;
LABEL_4:
      v34 += v67;
      if (!--v32)
        return v68;
    }
    v44 = v35;
    v45 = v60;
    outlined init with take of TableCellFormula(v44, v60, type metadata accessor for ToolbarStorage.Item);
    v46 = type metadata accessor for ToolbarStorage.Item(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.Item?);
    v47 = v66;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, v66, type metadata accessor for ToolbarStorage.Entry);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, type metadata accessor for ToolbarStorage.Entry);
LABEL_16:
    outlined init with take of TableCellFormula((uint64_t)v30, v65, type metadata accessor for ToolbarStorage.Entry);
    v50 = v68;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v50 + 16) + 1, 1);
      v50 = v68;
    }
    v35 = (uint64_t)v61;
    v52 = *(_QWORD *)(v50 + 16);
    v51 = *(_QWORD *)(v50 + 24);
    if (v52 >= v51 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      v50 = v68;
    }
    *(_QWORD *)(v50 + 16) = v52 + 1;
    outlined init with take of TableCellFormula(v65, v50 + v58 + v52 * v67, type metadata accessor for ToolbarStorage.Entry);
    v13 = v63;
    goto LABEL_4;
  }
  return result;
}

{
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X8 }
  return MEMORY[0x1E0DEE9D8];
}

unint64_t lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSidebarCustomization.CodingKeys, &unk_1E1AE3758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSidebarCustomization.CodingKeys, &unk_1E1AE3758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSidebarCustomization.CodingKeys, &unk_1E1AE3758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSidebarCustomization.CodingKeys, &unk_1E1AE3758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of TabViewCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabViewCustomization();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = 0;
  v2 = *(_QWORD *)(result + 16);
  v3 = result + 48;
  v4 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  if (v1 <= v2)
    v5 = v2;
  else
    v5 = v1;
  v6 = v5 + 1;
  v7 = (char *)(v3 + 24 * v1);
  while (1)
  {
    if (v2 == v1)
      return v4;
    if (v6 == ++v1)
      break;
    v8 = v7 + 24;
    v9 = *v7;
    v7 += 24;
    if ((v9 & 1) == 0)
    {
      v11 = *((_QWORD *)v8 - 5);
      v10 = *((_QWORD *)v8 - 4);
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v13 = *(_QWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 24);
      if (v13 >= v12 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      *(_QWORD *)(v4 + 16) = v13 + 1;
      v14 = v4 + 24 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v10;
      *(_BYTE *)(v14 + 48) = 0;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v1 = 0;
  v2 = *(_QWORD *)(result + 16);
  v3 = result + 32;
  v4 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  if (v1 <= v2)
    v5 = v2;
  else
    v5 = v1;
  while (1)
  {
    if (v2 == v1)
      return v4;
    if (v5 == v1)
      break;
    v6 = *(unsigned __int8 *)(v3 + v1++);
    if (v6 <= 1)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v8 = *(_QWORD *)(v4 + 16);
      v7 = *(_QWORD *)(v4 + 24);
      if (v8 >= v7 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v4 + 16) = v8 + 1;
      *(_BYTE *)(v4 + v8 + 32) = v6;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabGroupCustomizationEntry.CodingKeys, &unk_1E1AF0318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabGroupCustomizationEntry.CodingKeys, &unk_1E1AF0318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabGroupCustomizationEntry.CodingKeys, &unk_1E1AF0318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabGroupCustomizationEntry.CodingKeys, &unk_1E1AF0318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TabCustomizationID] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> AuxiliaryContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> AuxiliaryContent<A, B>, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> AuxiliaryContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for <> AuxiliaryContent<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> AuxiliaryContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> TabGroup<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a3 - 24);
  v5 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v6 = v3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TabGroup<A, B, C, D>, a1, &v5);
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> TabGroup<A, B, C, D>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> TabGroup<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for <> TabGroup<A, B, C, D>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v4 = *((_QWORD *)a3 + 2);
  v6 = *a3;
  v7 = v4;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TabGroup<A, B, C, D>, a2, &v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TabGroupCustomizationEntry and conformance TabGroupCustomizationEntry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry and conformance TabGroupCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry and conformance TabGroupCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabGroupCustomizationEntry, &type metadata for TabGroupCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry and conformance TabGroupCustomizationEntry);
  }
  return result;
}

uint64_t sub_1873C4F30@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = TabSidebarCustomization.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1873C4F5C(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *a3;
  v4 = a3[1];
  v5 = *a1;
  swift_bridgeObjectRetain();
  return TabViewCustomization.subscript.setter(v5, v3, v4, 0);
}

uint64_t sub_1873C4FA4()
{
  return 0;
}

uint64_t sub_1873C4FB4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = TabSidebarCustomization.subscript.getter(*a1, a1[1], &v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1873C4FF4()
{
  return 0;
}

uint64_t type metadata completion function for AuxiliaryContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AuxiliaryContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1873C5120 + 4 * byte_187C29C20[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AuxiliaryContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AuxiliaryContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AuxiliaryContent);
}

ValueMetadata *type metadata accessor for AdaptiveTabViewStyle()
{
  return &type metadata for AdaptiveTabViewStyle;
}

void type metadata completion function for TabGroup()
{
  type metadata accessor for TabSection();
}

uint64_t *initializeBufferWithCopyOfBuffer for TabGroup(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v4 = a1;
  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v6 + 80) | v11);
  if (v13 <= 7
    && ((v12 + (v9 & ~v8)) & ~(unint64_t)v11) + *(_QWORD *)(v10 + 64) <= 0x18
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80) | v11) & 0x100000) == 0)
  {
    v17 = ~v8;
    v18 = ~(unint64_t)v11;
    v21 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v19 = ((unint64_t)a2 + v9) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v17, v19, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((((unint64_t)v4 + v9) & v17) + v12) & v18, (v19 + v12) & v18, v21);
  }
  else
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for TabGroup(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v7
                                                                                       + *(_QWORD *)(v6 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

uint64_t initializeWithCopy for TabGroup(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithCopy for TabGroup(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t initializeWithTake for TabGroup(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for TabGroup(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TabGroup(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for TabGroup(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

void type metadata accessor for TabGroup()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t *initializeBufferWithCopyOfBuffer for TabSidebarCustomization(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for TabViewCustomization();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TabSidebarCustomization(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for TabViewCustomization();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = type metadata accessor for TabViewCustomization();
  *(_QWORD *)(a1 + *(int *)(v5 + 20)) = *(_QWORD *)(a2 + *(int *)(v5 + 20));
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = *(_QWORD *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = type metadata accessor for TabViewCustomization();
  *(_QWORD *)(a1 + *(int *)(v5 + 20)) = *(_QWORD *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = *(_QWORD *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = type metadata accessor for TabViewCustomization();
  *(_QWORD *)(a1 + *(int *)(v5 + 20)) = *(_QWORD *)(a2 + *(int *)(v5 + 20));
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = *(_QWORD *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t assignWithTake for TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = type metadata accessor for TabViewCustomization();
  *(_QWORD *)(a1 + *(int *)(v5 + 20)) = *(_QWORD *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = *(_QWORD *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TabSidebarCustomization()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873C5F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabViewCustomization();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TabSidebarCustomization()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873C5F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabViewCustomization();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TabSidebarCustomization()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TabViewCustomization();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabGroupCustomizationEntry()
{
  return &type metadata for TabGroupCustomizationEntry;
}

ValueMetadata *type metadata accessor for TabViewContentDisplayMode()
{
  return &type metadata for TabViewContentDisplayMode;
}

ValueMetadata *type metadata accessor for TabItemKind()
{
  return &type metadata for TabItemKind;
}

void sub_1873C6030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TabSectionActions(255, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1873C605C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  v5 = type metadata accessor for ModifiedTabContent(255, *a1, (uint64_t)&type metadata for DropDestinationModifier, a4);
  v7[0] = v4;
  v7[1] = lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

uint64_t sub_1873C60B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for DefaultTabVisibilityModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier, a4);
}

unint64_t lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier;
  if (!lazy protocol witness table cache variable for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultTabVisibilityModifier, &type metadata for DefaultTabVisibilityModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier);
  }
  return result;
}

void sub_1873C610C()
{
  type metadata accessor for TabSection<>.TabSectionView();
}

uint64_t sub_1873C613C(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSection<A, B, C, D><>.TabSectionView, a1);
}

uint64_t sub_1873C6158(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for CustomizationBehaviorModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier, a4);
}

uint64_t sub_1873C616C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for TabViewCustomizationModifier();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for TabViewCustomizationModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1873C61C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for TabPlacementModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type TabPlacementModifier and conformance TabPlacementModifier, a4);
}

unint64_t lazy protocol witness table accessor for type TabPlacementModifier and conformance TabPlacementModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabPlacementModifier and conformance TabPlacementModifier;
  if (!lazy protocol witness table cache variable for type TabPlacementModifier and conformance TabPlacementModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabPlacementModifier, &type metadata for TabPlacementModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabPlacementModifier and conformance TabPlacementModifier);
  }
  return result;
}

uint64_t sub_1873C6220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ContentModeModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for TabItemKind.Item()
{
  return &type metadata for TabItemKind.Item;
}

ValueMetadata *type metadata accessor for TabViewContentDisplayMode.ContentMode()
{
  return &type metadata for TabViewContentDisplayMode.ContentMode;
}

uint64_t storeEnumTagSinglePayload for TabViewContentDisplayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1873C62E4 + 4 * byte_187C29C41[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1873C6318 + 4 * byte_187C29C3C[v4]))();
}

uint64_t sub_1873C6318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873C6320(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1873C6328);
  return result;
}

uint64_t sub_1873C6334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1873C633CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1873C6340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873C6348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentModeModifier()
{
  return &type metadata for ContentModeModifier;
}

void *type metadata accessor for TabSidebarCustomizationTransform()
{
  return &unk_1E1B01A08;
}

void *type metadata accessor for TabGroupCustomizationEntry.CodingKeys()
{
  return &unk_1E1AF0318;
}

uint64_t storeEnumTagSinglePayload for TabItemKind.Item(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1873C63C4 + 4 * byte_187C29C46[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1873C63E4 + 4 * byte_187C29C4B[v4]))();
}

_BYTE *sub_1873C63C4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1873C63E4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1873C63EC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1873C63F4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1873C63FC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1873C6404(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for TabSidebarCustomization.CodingKeys()
{
  return &unk_1E1AE3758;
}

ValueMetadata *type metadata accessor for TabSidebarCustomization.ToTabViewCustomization()
{
  return &type metadata for TabSidebarCustomization.ToTabViewCustomization;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ContentModeModifier()
{
  return &protocol witness table for ContentModeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContentModeModifier()
{
  return &protocol witness table for ContentModeModifier;
}

unint64_t lazy protocol witness table accessor for type TabViewContentDisplayMode.ContentMode and conformance TabViewContentDisplayMode.ContentMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewContentDisplayMode.ContentMode and conformance TabViewContentDisplayMode.ContentMode;
  if (!lazy protocol witness table cache variable for type TabViewContentDisplayMode.ContentMode and conformance TabViewContentDisplayMode.ContentMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewContentDisplayMode.ContentMode, &type metadata for TabViewContentDisplayMode.ContentMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewContentDisplayMode.ContentMode and conformance TabViewContentDisplayMode.ContentMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabItemKind.Item and conformance TabItemKind.Item()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabItemKind.Item and conformance TabItemKind.Item;
  if (!lazy protocol witness table cache variable for type TabItemKind.Item and conformance TabItemKind.Item)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabItemKind.Item, &type metadata for TabItemKind.Item);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabItemKind.Item and conformance TabItemKind.Item);
  }
  return result;
}

void base witness table accessor for _AttributeBody in AdaptiveTabViewStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for _ContiguousArrayStorage<ToolbarStorage.Entry>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Entry>, type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityNodeAttachment>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNodeAttachment>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE6150], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _DictionaryStorage<ViewIdentity, (_:)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, (_:)>)
  {
    type metadata accessor for (_:)();
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, (_:)>);
  }
}

void type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>)
  {
    type metadata accessor for (_ViewList_ID.Canonical, AccessibilitySectionContext?)();
    lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>);
  }
}

void type metadata accessor for (_ViewList_ID.Canonical, AccessibilitySectionContext?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ViewList_ID.Canonical, AccessibilitySectionContext?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilitySectionContext?, (uint64_t)&type metadata for AccessibilitySectionContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ViewList_ID.Canonical, AccessibilitySectionContext?));
  }
}

void type metadata accessor for [CGRect](uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for [CGRect], (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, IncrementalLayoutCacheItem>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, IncrementalLayoutCacheItem>)
  {
    type metadata accessor for IncrementalLayoutCacheItem();
    lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, IncrementalLayoutCacheItem>);
  }
}

void type metadata accessor for _DictionaryStorage<UInt32, PinnedSection>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UInt32, PinnedSection>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UInt32, PinnedSection>);
  }
}

void partial apply for closure #1 in AdaptiveTabViewStyle.Body.value.getter()
{
  closure #1 in AdaptiveTabViewStyle.Body.value.getter();
}

uint64_t outlined assign with copy of TabViewCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabViewCustomization();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized TabSidebarCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  __int128 v31;
  __int128 v32;
  _BYTE v33[48];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v30 - v10;
  v12 = type metadata accessor for TabSidebarCustomization();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v33);
  v17 = swift_dynamicCast();
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v17)
  {
    v30[1] = a2;
    v18(v11, 0, 1, v12);
    outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
    v19 = type metadata accessor for TabViewCustomization();
    v20 = *(int *)(v19 + 20);
    v21 = swift_bridgeObjectRetain();
    v22 = specialized _NativeDictionary.filter(_:)(v21, (uint64_t (*)(void))specialized _NativeDictionary.extractDictionary(using:count:));
    swift_bridgeObjectRelease_n();
    *(_QWORD *)&v16[v20] = v22;
    v23 = *(int *)(v19 + 24);
    v24 = swift_bridgeObjectRetain();
    v25 = specialized _NativeDictionary.filter(_:)(v24, (uint64_t (*)(void))specialized _NativeDictionary.extractDictionary(using:count:));
    swift_bridgeObjectRelease_n();
    *(_QWORD *)&v16[v23] = v25;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization and conformance TabSidebarCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t)&protocol conformance descriptor for TabSidebarCustomization);
    v27 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v29 = v28;
    swift_release();
    *(_QWORD *)&v31 = a3;
    *((_QWORD *)&v31 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (v29 >> 60 == 15)
    {
      v31 = 0u;
      v32 = 0u;
    }
    else
    {
      *((_QWORD *)&v32 + 1) = MEMORY[0x1E0CB0338];
      *(_QWORD *)&v31 = v27;
      *((_QWORD *)&v31 + 1) = v29;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v31, (uint64_t)v33);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
  }
  else
  {
    v18(v11, 1, 1, v12);
    return outlined destroy of TableRowID?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t)type metadata accessor for TabSidebarCustomization, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
}

uint64_t specialized TabSidebarCustomization.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x8000000187BDE760)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized static TabSidebarCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Class isa;
  void *v44;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _BYTE v51[24];
  uint64_t v52;

  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v46 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v46 - v20;
  v22 = MEMORY[0x1E0DEE9B8] + 8;
  outlined init with copy of AccessibilityScrollableContext?(a1, (uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))v8);
  v48 = v10;
  v49 = v13;
  if (v52)
  {
    v23 = type metadata accessor for TabSidebarCustomization();
    v24 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, v24 ^ 1u, 1, v23);
  }
  else
  {
    outlined destroy of TableRowID?((uint64_t)v51, (uint64_t)&lazy cache variable for type metadata for Any?, v22, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v23 = type metadata accessor for TabSidebarCustomization();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 1, 1, v23);
  }
  type metadata accessor for TabSidebarCustomization();
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48);
  v26 = v25(v21, 1, v23);
  v50 = a3;
  if (!v26)
  {
    v27 = type metadata accessor for TabViewCustomization();
    v47 = a2;
    v28 = *(int *)(v27 + 20);
    v29 = swift_bridgeObjectRetain();
    v30 = specialized _NativeDictionary.filter(_:)(v29, (uint64_t (*)(void))specialized _NativeDictionary.extractDictionary(using:count:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v21[v28] = v30;
    v31 = *(int *)(v27 + 24);
    v32 = swift_bridgeObjectRetain();
    v33 = specialized _NativeDictionary.filter(_:)(v32, (uint64_t (*)(void))specialized _NativeDictionary.extractDictionary(using:count:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v21[v31] = v33;
    a2 = v47;
  }
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v21, (uint64_t)v17, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v34 = v25(v17, 1, v23);
  outlined destroy of TableRowID?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t)type metadata accessor for TabSidebarCustomization, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if (v34 == 1)
  {
    v35 = (void *)MEMORY[0x18D75CC88](v50, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v35);

  }
  else
  {
    v36 = a2;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v37 = (uint64_t)v49;
    outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v21, (uint64_t)v49, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type TabSidebarCustomization? and conformance <A> A?();
    v38 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v39 = v50;
    v40 = v38;
    v42 = v41;
    outlined destroy of TableRowID?(v37, (uint64_t)&lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t)type metadata accessor for TabSidebarCustomization, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    swift_release();
    outlined copy of Data._Representation(v40, v42);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v40, v42);
    v44 = (void *)MEMORY[0x18D75CC88](v39, a4);
    objc_msgSend(v36, sel_setObject_forKey_, isa, v44);
    swift_unknownObjectRelease();

    outlined consume of Data?(v40, v42);
  }
  return outlined destroy of TableRowID?((uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t)type metadata accessor for TabSidebarCustomization, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

unint64_t lazy protocol witness table accessor for type TabSidebarCustomization? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type TabSidebarCustomization? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization? and conformance <A> A?)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization and conformance TabSidebarCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t)&protocol conformance descriptor for TabSidebarCustomization);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE988], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<[Text]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[Text]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[Text]>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<[AnyAccessibilityAction]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[AnyAccessibilityAction]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[AnyAccessibilityAction]>);
  }
}

void type metadata accessor for ([Text], [AnyAccessibilityAction])()
{
  uint64_t (*v0)(void);
  unint64_t TupleTypeMetadata2;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ([Text], [AnyAccessibilityAction]))
  {
    v0 = MEMORY[0x1E0DEAEC8];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for ([Text], [AnyAccessibilityAction]));
  }
}

void type metadata accessor for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for Anchor<CGRect?>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect?, MEMORY[0x1E0CE7360]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>);
  }
}

void type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>)
  {
    type metadata accessor for [Binding<Bool>]();
    lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>);
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE77D8]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>)
  {
    type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)(255, (unint64_t *)&lazy cache variable for type metadata for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>);
  }
}

void type metadata accessor for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>)
  {
    type metadata accessor for UIMenuIdentifier(255);
    type metadata accessor for [UIMenuElement]();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UIMenuIdentifier, (uint64_t)&protocol conformance descriptor for UIMenuIdentifier);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>);
  }
}

void type metadata accessor for _DictionaryStorage<UIMenuElement, CommandOperation>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UIMenuElement, CommandOperation>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    type metadata accessor for CommandOperation();
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIMenuElement and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIMenuElement, CommandOperation>);
  }
}

void type metadata accessor for _DictionaryStorage<KeyCommandID, ()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<KeyCommandID, ()>)
  {
    type metadata accessor for ()();
    lazy protocol witness table accessor for type KeyCommandID and conformance KeyCommandID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyCommandID, ()>);
  }
}

void type metadata accessor for _DictionaryStorage<Selector, CommandAction>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Selector, CommandAction>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for CommandAction);
    lazy protocol witness table accessor for type Selector and conformance Selector();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Selector, CommandAction>);
  }
}

unint64_t lazy protocol witness table accessor for type Selector and conformance Selector()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Selector and conformance Selector;
  if (!lazy protocol witness table cache variable for type Selector and conformance Selector)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCC8], MEMORY[0x1E0DEFCC0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Selector and conformance Selector);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<IndexPath>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>)
  {
    type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(255);
    lazy protocol witness table accessor for type TableRowID and conformance TableRowID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<TableColumnCollection.Entry>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnCollection.Entry>, type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _ContiguousArrayStorage<TableCellFormula>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableCellFormula>, (uint64_t (*)(uint64_t))type metadata accessor for TableCellFormula, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _ContiguousArrayStorage<WidgetAuxiliaryViewMetadata>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<WidgetAuxiliaryViewMetadata>, type metadata accessor for WidgetAuxiliaryViewMetadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: String)>)
  {
    type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)(255, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: String)>);
  }
}

void type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

unint64_t type metadata accessor for PlatformListCell & UIFocusItem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PlatformListCell & UIFocusItem;
  if (!lazy cache variable for type metadata for PlatformListCell & UIFocusItem)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PlatformListCell & UIFocusItem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID;
  if (!lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarStorage.ID, &type metadata for ToolbarStorage.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID;
  if (!lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarStorage.ID, &type metadata for ToolbarStorage.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<SystemSegmentItem, Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<SystemSegmentItem, Int>)
  {
    type metadata accessor for SystemSegmentItem();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentItem, (uint64_t)&protocol conformance descriptor for SystemSegmentItem);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<SystemSegmentItem, Int>);
  }
}

unint64_t lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5270], MEMORY[0x1E0CE5260]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5278], MEMORY[0x1E0CE5260]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5268], MEMORY[0x1E0CE5260]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>)
  {
    type metadata accessor for DisplayList.HostedViewState.Key(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.Key and conformance DisplayList.HostedViewState.Key, type metadata accessor for DisplayList.HostedViewState.Key, (uint64_t)&protocol conformance descriptor for DisplayList.HostedViewState.Key);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>);
  }
}

uint64_t specialized static ContentModeModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  AGGraphCreateOffsetAttribute2();
  AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ContentModeModifier and conformance ContentModeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentModeModifier and conformance ContentModeModifier;
  if (!lazy protocol witness table cache variable for type ContentModeModifier and conformance ContentModeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentModeModifier, &type metadata for ContentModeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentModeModifier and conformance ContentModeModifier);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: ToolbarStorage.Item)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: ToolbarStorage.Item)>)
  {
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(255, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item), (void (*)(uint64_t))type metadata accessor for ToolbarStorage.Item);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: ToolbarStorage.Item)>);
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID;
  if (!lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarStorage.Entry.ID, &type metadata for ToolbarStorage.Entry.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID;
  if (!lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarStorage.Entry.ID, &type metadata for ToolbarStorage.Entry.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>)
  {
    type metadata accessor for BarEnvironmentViewModel(255);
    lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>);
  }
}

void type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for [WeakBox<DocumentViewController>], (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<DocumentViewController>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<AppRefreshBackgroundTask>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<AppRefreshBackgroundTask>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for BackgroundTaskEntry<AppRefreshBackgroundTask>, (uint64_t)&type metadata for AppRefreshBackgroundTask, (uint64_t)&protocol witness table for AppRefreshBackgroundTask, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<AppRefreshBackgroundTask>>);
  }
}

void type metadata accessor for _DictionaryStorage<UUID, (_:)>()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UUID, (_:)>)
  {
    type metadata accessor for UUID();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for (_:)();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v0, MEMORY[0x1E0CB09C8]);
    v1 = type metadata accessor for _DictionaryStorage();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, (_:)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<MainMenuItem.Template>, type metadata accessor for MainMenuItem.Template, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _ContiguousArrayStorage<UpdateCoalescingCollectionView.UpdateInvalidation>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<UpdateCoalescingCollectionView.UpdateInvalidation>, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>)
  {
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(255, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: AccessibilityNode), (void (*)(uint64_t))type metadata accessor for AccessibilityNode);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>);
  }
}

void type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, Any)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  }
}

void type metadata accessor for _DictionaryStorage<AnyHashable, Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Int>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Int>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<URL>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>, (uint64_t)&type metadata for UnidentifiedURLSessionBackgroundTask, (uint64_t)&protocol witness table for UnidentifiedURLSessionBackgroundTask, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<URLSessionBackgroundTask>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<URLSessionBackgroundTask>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for BackgroundTaskEntry<URLSessionBackgroundTask>, (uint64_t)&type metadata for URLSessionBackgroundTask, (uint64_t)&protocol witness table for URLSessionBackgroundTask, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<URLSessionBackgroundTask>>);
  }
}

void type metadata accessor for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>);
  }
}

void type metadata accessor for _DictionaryStorage<UTType, String?>()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UTType, String?>)
  {
    type metadata accessor for UTType();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, v0, MEMORY[0x1E0DF0358]);
    v1 = type metadata accessor for _DictionaryStorage();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UTType, String?>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(UTType, String?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<(UTType, String?)>, (uint64_t (*)(uint64_t))type metadata accessor for (UTType, String?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for (UTType, String?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UTType, String?))
  {
    type metadata accessor for UTType();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UTType, String?));
  }
}

void type metadata accessor for _ContiguousArrayStorage<Attribute<TableRowList>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<TableRowList>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<TableRowList>>);
  }
}

unint64_t lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding;
  if (!lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyboardShortcutBinding, &type metadata for KeyboardShortcutBinding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding;
  if (!lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyboardShortcutBinding, &type metadata for KeyboardShortcutBinding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<ResponderBasedHitTestTracing>, (uint64_t)&type metadata for ResponderBasedHitTestTracing, (uint64_t)&protocol witness table for ResponderBasedHitTestTracing, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HitTestTrace);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>);
  }
}

unint64_t lazy protocol witness table accessor for type GridIndex and conformance GridIndex()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridIndex and conformance GridIndex;
  if (!lazy protocol witness table cache variable for type GridIndex and conformance GridIndex)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridIndex, &type metadata for GridIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridIndex and conformance GridIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridIndex and conformance GridIndex;
  if (!lazy protocol witness table cache variable for type GridIndex and conformance GridIndex)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridIndex, &type metadata for GridIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridIndex and conformance GridIndex);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Attribute<AccessibilityRotorEntryList>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<AccessibilityRotorEntryList>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<AccessibilityRotorEntryList>>);
  }
}

void type metadata accessor for _DictionaryStorage<UInt, ObjectIdentifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UInt, ObjectIdentifier>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UInt, ObjectIdentifier>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<String?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<String?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<String?>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E68], MEMORY[0x1E0CE0E60]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for Set<UniqueID>, (uint64_t (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID, MEMORY[0x1E0CE7910], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB388]);
    lazy protocol witness table accessor for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>);
  }
}

ValueMetadata *type metadata accessor for TabViewContentDisplayMode.Key()
{
  return &type metadata for TabViewContentDisplayMode.Key;
}

void type metadata accessor for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
    v9 = type metadata accessor for _DictionaryStorage();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Set<AccessibilityRelationshipScope.Key>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB388]);
    lazy protocol witness table accessor for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>);
  }
}

void type metadata accessor for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>)
  {
    type metadata accessor for AGAttribute(255);
    type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, MEMORY[0x1E0CFED18]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<NavigationSplitViewColumnWidth?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationSplitViewColumnWidth?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for NavigationSplitViewColumnWidth?, (uint64_t)&type metadata for NavigationSplitViewColumnWidth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationSplitViewColumnWidth?>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(ToolbarStorage.Entry, Int)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ToolbarStorage.Entry, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarStorage.Entry, Int), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void type metadata accessor for WeakBox<AccessibilityNode>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for WeakBox<AccessibilityNode>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

uint64_t outlined init with copy of NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationState.StackContent.PositionedView(a2, a1);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<SystemSegmentItem>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<SystemSegmentItem>, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

CGSize __swiftcall _ViewTest.initSize()()
{
  double v0;
  double v1;
  CGSize result;

  v0 = 100.0;
  v1 = 100.0;
  result.height = v1;
  result.width = v0;
  return result;
}

{
  double v0;
  double v1;
  CGSize result;

  v0 = 100.0;
  v1 = 100.0;
  result.height = v1;
  result.width = v0;
  return result;
}

uint64_t _ViewTest.setTestView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _ViewTest.setTestView<A>(_:)(a1, a4, a2, a5, a3);
}

Swift::Void __swiftcall _ViewTest.setUpTest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _QWORD v15[4];

  v2 = v1;
  v3 = v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)v15 - v7;
  EnvironmentValues.init()();
  v15[0] = v15[2];
  v15[1] = v15[3];
  MEMORY[0x18D75BEB4](v15);
  swift_release();
  swift_release();
  v9 = (*(double (**)(uint64_t, uint64_t))(v2 + 48))(v3, v2);
  specialized _ViewTest.setSize(_:)(v9, v10);
  static EdgeInsets.zero.getter();
  specialized _ViewTest.setSafeAreaInsets(_:)(v11, v12, v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v3, v2);
  swift_getAssociatedConformanceWitness();
  _ViewTest.setRootTestView<A>(_:)((uint64_t)v8, v3, AssociatedTypeWitness, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  specialized _ViewTest.render(seconds:)(0.0166666667);
}

uint64_t _ViewTest.setEnvironment(_:)(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  return MEMORY[0x18D75BEB4](&v2);
}

uint64_t _ViewTest.setRootTestView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  _QWORD v15[2];
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = _ViewTest.findState()(a2, a4, (uint64_t)&v16);
  v5 = v17;
  if (v17)
  {
    v6 = *(_QWORD *)&v16;
    v7 = v18;
    v8 = v19;
    v9 = static _TestApp.host.getter();
    if (v9)
    {
      v10 = v9;
      swift_getObjectType();
      v11 = swift_conformsToProtocol2();
      if (v11)
        v12 = v11;
      else
        v12 = 0;
      if (v11)
        v13 = v10;
      else
        v13 = 0;
      if (v13)
      {
        ObjectType = swift_getObjectType();
        (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(v12 + 24))(&v16, ObjectType, v12);
        v16 = ceil(v16 + 1.0);
        (*(void (**)(double *, uint64_t, uint64_t))(v12 + 32))(&v16, ObjectType, v12);
      }
      swift_unknownObjectRelease();
    }
    v16 = *(double *)&v6;
    v17 = v5;
    v18 = v7;
    v19 = v8;
    type metadata accessor for Binding<_TestApp.RootView.StateType>();
    MEMORY[0x18D75B9C8](v15);
    _TestApp.RootView.StateType.setTestView<A>(_:)();
    v16 = *(double *)v15;
    v17 = v15[1];
    swift_retain();
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    outlined consume of Binding<_TestApp.RootView.StateType>?(v6, v5);
    return outlined consume of Binding<_TestApp.RootView.StateType>?(v6, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall _ViewTest.tearDownTest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[6];

  v3 = v1;
  v4 = v0;
  v5 = *(_QWORD *)(v0 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = specialized _ViewTest.resetEvents()();
  _ViewTest.setRootTestView<A>(_:)(v8, v4, MEMORY[0x1E0CE7C38], v3);
  v9 = (void *)objc_opt_self();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v4;
  *(_QWORD *)(v11 + 24) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, v7, v4);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in _ViewTest.tearDownTest();
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_25;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_performWithoutAnimation_, v13);
  _Block_release(v13);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v13 & 1) != 0)
    __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _ViewTest.tearDownTestWithError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  _QWORD aBlock[6];
  uint64_t v30;

  v3 = v1;
  v4 = v0;
  v5 = *(_QWORD *)(v0 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self();
  if ((objc_msgSend(v8, sel_areAnimationsEnabled) & 1) == 0)
  {
    objc_msgSend(v8, sel_setAnimationsEnabled_, 1);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v4);
    v12 = String.init<A>(describing:)();
    v14 = v13;
    lazy protocol witness table accessor for type Error and conformance Error();
    swift_allocError();
    *(_QWORD *)v15 = v12;
    *(_QWORD *)(v15 + 8) = v14;
    *(_BYTE *)(v15 + 16) = 0;
    swift_willThrow();
    return;
  }
  v30 = v3;
  if (static _TestApp.host.getter())
  {
    objc_opt_self();
    v9 = (void *)swift_dynamicCastObjCClass();
    if (!v9)
      swift_unknownObjectRelease();
    v10 = objc_msgSend(v9, sel_window);

    v11 = objc_msgSend(v10, sel_rootViewController);
  }
  else
  {
    v11 = 0;
  }
  v16 = objc_msgSend(v11, sel_presentedViewController);

  if (!v16)
    goto LABEL_11;
  v17 = objc_opt_self();
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v4);
  v18 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v19 = (char *)swift_allocObject();
  v20 = v30;
  *((_QWORD *)v19 + 2) = v4;
  *((_QWORD *)v19 + 3) = v20;
  *((_QWORD *)v19 + 4) = v11;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v19[v18], v7, v4);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for closure #1 in _ViewTest.tearDownTestWithError();
  *(_QWORD *)(v21 + 24) = v19;
  aBlock[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_13_0;
  v22 = _Block_copy(aBlock);
  v11 = v11;
  swift_retain();
  swift_release();
  objc_msgSend((id)v17, sel__performWithoutDeferringTransitions_, v22);
  _Block_release(v22);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v17 & 1) == 0)
  {
    v28(v7, v2, v4);
    v23 = String.init<A>(describing:)();
    v25 = v24;
    lazy protocol witness table accessor for type Error and conformance Error();
    swift_allocError();
    *(_QWORD *)v26 = v23;
    *(_QWORD *)(v26 + 8) = v25;
    *(_BYTE *)(v26 + 16) = 1;
    swift_willThrow();
    swift_release();
LABEL_11:

    return;
  }
  __break(1u);
}

uint64_t closure #1 in _ViewTest.tearDownTestWithError()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t result;
  _QWORD aBlock[6];

  v7 = a1;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (void *)objc_opt_self();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a3);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a3;
  *((_QWORD *)v12 + 3) = a4;
  *((_QWORD *)v12 + 4) = v7;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v12[v11], (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = partial apply for closure #1 in closure #1 in _ViewTest.tearDownTestWithError();
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_24_0;
  v14 = _Block_copy(aBlock);
  v15 = v7;
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_performWithoutAnimation_, v14);
  _Block_release(v14);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v7 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t _ViewTest.findState()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t OpaqueTypeConformance2;
  unint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;

  type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0(0, a2);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static _TestApp.rootViewIdentifier.getter();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v13 = lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
  v17 = a1;
  v18 = v7;
  v19 = MEMORY[0x1E0CE7A88];
  v20 = MEMORY[0x1E0CE7AA8];
  v21 = a2;
  v22 = OpaqueTypeConformance2;
  v23 = v13;
  v24 = v11;
  v14 = type metadata accessor for Binding();
  _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:), v14, a3);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t _ViewTest.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Binding();
  return _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:), v2, a1);
}

uint64_t _ViewTest.rootViewID.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = _ViewTest.findState()(a1, a2, (uint64_t)&v7);
  v3 = v8;
  if (v8)
  {
    v4 = v7;
    type metadata accessor for Binding<_TestApp.RootView.StateType>();
    MEMORY[0x18D75B9C8](&v6);
    outlined consume of Binding<_TestApp.RootView.StateType>?(v4, v3);
    v5 = v6;
    swift_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ViewTest.rootView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t result;
  _QWORD v15[11];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v15[-1] - v9;
  v15[0] = _ViewTest.rootViewID.getter(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15[3] = a1;
  v15[4] = AssociatedTypeWitness;
  v15[5] = MEMORY[0x1E0DEB418];
  v15[6] = a2;
  v15[7] = AssociatedConformanceWitness;
  v15[8] = MEMORY[0x1E0DEB428];
  v15[9] = v15;
  v15[10] = AssociatedTypeWitness;
  _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:), AssociatedTypeWitness, (uint64_t)v10);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v10, AssociatedTypeWitness);
  __break(1u);
  return result;
}

uint64_t _ViewTest.viewForIdentifier<A, B>(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:), a1, a2);
}

uint64_t closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:)()
{
  uint64_t result;

  result = static _TestApp.host.getter();
  if (result)
  {
    swift_getObjectType();
    _BenchmarkHost.viewForIdentifier<A, B>(_:_:)();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ViewTest.withRenderIfNeeded<A>(_:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v18 - v10;
  a1(v9);
  v12 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    result = static _TestApp.host.getter();
    if (result)
    {
      v15 = v14;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, double))(*(_QWORD *)(v15 + 8) + 8))(ObjectType, 0.0);
      v17 = swift_unknownObjectRelease();
      return ((uint64_t (*)(uint64_t))a1)(v17);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v11, a2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a3, 0, 1, a2);
  }
  return result;
}

uint64_t closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:)()
{
  uint64_t result;

  result = static _TestApp.host.getter();
  if (result)
  {
    swift_getObjectType();
    _BenchmarkHost.stateForIdentifier<A, B, C>(_:type:in:)();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall _ViewTest.renderAsync(seconds:)(Swift::Double seconds)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v2 = static _TestApp.host.getter();
  if (v2)
  {
    v4 = v3;
    ObjectType = swift_getObjectType();
    LOBYTE(v4) = (*(uint64_t (**)(uint64_t, Swift::Double))(*(_QWORD *)(v4 + 8) + 16))(ObjectType, seconds);
    swift_unknownObjectRelease();
    LOBYTE(v2) = v4 & 1;
  }
  else
  {
    __break(1u);
  }
  return v2;
}

Swift::Void __swiftcall _ViewTest.renderRecursively(seconds:)(Swift::Double seconds)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  double v5;

  if (static _TestApp.host.getter())
  {
    v2 = v1;
    ObjectType = swift_getObjectType();
    v5 = MEMORY[0x1E0C80A78](ObjectType, v4);
    (*(void (**)(uint64_t (*)(uint64_t, uint64_t), double))(v2 + 120))(partial apply for closure #1 in _ViewTest.renderRecursively(seconds:), v5);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall _ViewTest.loop()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v12;
  id v13;
  Class isa;
  unsigned __int8 v15;
  _BYTE v16[16];
  __int128 v17;
  id v18[2];

  v0 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  specialized _ViewTest.render(seconds:)(0.0166666667);
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_currentRunLoop);
  v17 = xmmword_187BF9820;
  v7 = (void *)*MEMORY[0x1E0C99860];
  v18[0] = *(id *)MEMORY[0x1E0C99748];
  v18[1] = v7;
  v8 = v18[0];
  v9 = v7;
  v10 = 0;
  while ((v10 & 1u) < (unint64_t)v17)
  {
    v12 = v18[v10 & 1];
    v13 = objc_msgSend(v5, sel_currentRunLoop);
    Date.init(timeIntervalSinceNow:)();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v4, v0);
    v15 = objc_msgSend(v13, sel_runMode_beforeDate_, v12, isa);

    if ((v15 & 1) == 0)
      objc_msgSend((id)objc_opt_self(), sel_sleepForTimeInterval_, 0.001);

    if (__OFADD__(v10++, 1))
      goto LABEL_7;
  }
  __break(1u);
LABEL_7:
  __break(1u);
}

uint64_t _ViewTest.rootState<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v19[11];

  v8 = type metadata accessor for Binding();
  v9 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v19[-1] - v11;
  v19[0] = _ViewTest.rootViewID.getter(a1, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19[3] = a1;
  v19[4] = MEMORY[0x1E0DEB418];
  v19[5] = a2;
  v19[6] = AssociatedTypeWitness;
  v19[7] = a3;
  v19[8] = MEMORY[0x1E0DEB428];
  v19[9] = AssociatedConformanceWitness;
  v19[10] = v19;
  v15 = type metadata accessor for Binding();
  _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:), v15, (uint64_t)v12);
  v16 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v8);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v12, v8);
  __break(1u);
  return result;
}

uint64_t _ViewTest.rootState<A, B>(type:in:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v21[11];

  v12 = type metadata accessor for Binding();
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v21[-1] - v15;
  v21[0] = _ViewTest.rootViewID.getter(a1, a4);
  v21[3] = a1;
  v21[4] = MEMORY[0x1E0DEB418];
  v21[5] = a2;
  v21[6] = a3;
  v21[7] = a4;
  v21[8] = MEMORY[0x1E0DEB428];
  v21[9] = a5;
  v21[10] = v21;
  v17 = type metadata accessor for Binding();
  _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:), v17, (uint64_t)v16);
  v18 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v12);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a6, v16, v12);
  __break(1u);
  return result;
}

uint64_t _ViewTest.set<A>(_:to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a4;
  v23 = a2;
  v5 = (uint64_t *)(*a1 + *MEMORY[0x1E0DEC880]);
  v6 = *v5;
  v24 = *(_QWORD *)(*v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v22 - v7;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v22 - v14;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v22 - v19;
  _ViewTest.rootState<A>(type:)(a3, v6, v22, (uint64_t)&v22 - v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v23, v10);
  MEMORY[0x18D75B9C8](v16);
  swift_setAtWritableKeyPath();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t _ViewTest.get<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v16[2];

  v16[1] = a4;
  v6 = *(_QWORD *)(*a1 + *MEMORY[0x1E0DEE2A8]);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v16 - v8;
  v10 = type metadata accessor for Binding();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v16 - v13;
  _ViewTest.rootState<A>(type:)(a2, v6, a3, (uint64_t)v16 - v13);
  MEMORY[0x18D75B9C8](v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t specialized Binding.wrappedValue.setter()
{
  return dispatch thunk of AnyLocation.set(_:transaction:)();
}

uint64_t specialized _ViewTest.sendEvents(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  result = static _TestApp.host.getter();
  if (result)
  {
    v4 = v3;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(a1, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _ViewTest.setSize(_:)(double a1, double a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = static _TestApp.host.getter();
  if (result)
  {
    v6 = v5;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, double, double))(v6 + 16))(ObjectType, v6, a1, a2);
    swift_unknownObjectRelease();
    result = static _TestApp.comparisonHost.getter();
    if (result)
    {
      v9 = v8;
      v10 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, double, double))(v9 + 16))(v10, v9, a1, a2);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _ViewTest.setSafeAreaInsets(_:)(double a1, double a2, double a3, double a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  result = static _TestApp.host.getter();
  if (result)
  {
    v10 = v9;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v10 + 24))(ObjectType, v10, a1, a2, a3, a4);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _ViewTest.render(seconds:)(double a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  result = static _TestApp.host.getter();
  if (result)
  {
    v4 = v3;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, double))(*(_QWORD *)(v4 + 8) + 8))(ObjectType, a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _ViewTest.resetEvents()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  result = static _TestApp.host.getter();
  if (result)
  {
    v2 = v1;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1873CA47C()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _ViewTest.tearDownTest()()
{
  return specialized _ViewTest.render(seconds:)(0.0166666667);
}

uint64_t sub_1873CA4E8()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Error and conformance Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error and conformance Error;
  if (!lazy protocol witness table cache variable for type Error and conformance Error)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Error, &unk_1E1B0ACE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error and conformance Error);
  }
  return result;
}

uint64_t partial apply for closure #1 in _ViewTest.tearDownTestWithError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #1 in _ViewTest.tearDownTestWithError()(*(void **)(v0 + 32), v0 + ((v2 + 40) & ~v2), v1, *(_QWORD *)(v0 + 24));
}

uint64_t sub_1873CA560()
{
  return swift_deallocObject();
}

void specialized _ViewTest.turnRunloop(times:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  Class isa;
  unsigned __int8 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];

  v2 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v2 - 8);
  v19 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0)
  {
    __break(1u);
  }
  else if (a1)
  {
    v6 = (void *)objc_opt_self();
    v17 = v21;
    v7 = (void *)*MEMORY[0x1E0C99748];
    v8 = (void *)*MEMORY[0x1E0C99860];
    v9 = a1 - 1;
    v16 = xmmword_187BF9820;
    while (1)
    {
      v10 = objc_msgSend(v6, sel_currentRunLoop, v16);
      v20 = v16;
      v21[0] = v7;
      v21[1] = v8;
      v11 = v7;
      v12 = v8;
      v13 = objc_msgSend(v6, sel_currentRunLoop);
      Date.init(timeIntervalSinceNow:)();
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v19);
      v15 = objc_msgSend(v13, sel_runMode_beforeDate_, v11, isa);

      if ((v15 & 1) == 0)
        objc_msgSend((id)objc_opt_self(), sel_sleepForTimeInterval_, 0.001);

      type metadata accessor for NSRunLoopMode(0);
      swift_arrayDestroy();

      if (!v9)
        break;
      --v9;
    }
  }
}

uint64_t partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:)()
{
  return closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:)();
}

uint64_t partial apply for closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:)()
{
  return closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:)();
}

uint64_t partial apply for closure #1 in _ViewTest.renderRecursively(seconds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v4;
  uint64_t ObjectType;

  v4 = *(double *)(v2 + 16);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 128))(ObjectType, a2, v4);
}

uint64_t dispatch thunk of _ViewTest.initRootView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _ViewTest.initSize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of _ViewTest.setTestView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t destroy for Error()
{
  return outlined consume of TabCustomizationID.Base();
}

uint64_t initializeBufferWithCopyOfBuffer for Error(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of TabCustomizationID.Base();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Error(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of TabCustomizationID.Base();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of TabCustomizationID.Base();
  return a1;
}

uint64_t assignWithTake for Error(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of TabCustomizationID.Base();
  return a1;
}

void *type metadata accessor for Error()
{
  return &unk_1E1B0ACE0;
}

void type metadata accessor for Binding<_TestApp.RootView.StateType>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<_TestApp.RootView.StateType>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<_TestApp.RootView.StateType>);
  }
}

uint64_t outlined consume of Binding<_TestApp.RootView.StateType>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t objectdestroy_5Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in _ViewTest.tearDownTestWithError()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 0, 0);
    specialized _ViewTest.turnRunloop(times:)(4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1873CA9F8()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for UIViewSnapshotResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UIViewSnapshotResponder;
  if (!type metadata singleton initialization cache for UIViewSnapshotResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for UIViewSnapshotResponder()
{
  return swift_initClassMetadata2();
}

uint64_t UIViewSnapshotResponder.allowsHitTesting.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 256);
}

double UIViewSnapshotResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void (*v8)(_QWORD *, uint64_t, uint64_t, uint64_t *);
  double result;
  uint64_t v10;

  if (*(_BYTE *)(v4 + 256) == 1)
  {
    v10 = *a4;
    type metadata accessor for DefaultLayoutViewResponder();
    v8 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t *))method lookup function for ViewResponder();
    v8(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), &v10);
  }
  else
  {
    *a1 = 0;
    return 0.0;
  }
  return result;
}

void UIViewSnapshotResponder.__allocating_init(inputs:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void UIViewSnapshotResponder.__allocating_init(inputs:viewSubgraph:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

double UIViewSnapshotResponder.transform.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v4 == 1)
  {
    ViewTransform.init()();
  }
  else
  {
    v7 = v4;
    v8 = v5;
    v9 = v6;
  }
  ViewTransform.appendPosition(_:)(*(CGPoint *)(v1 + 232));
  *(_QWORD *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v8;
  result = *(double *)&v9;
  *(_OWORD *)(a1 + 24) = v9;
  return result;
}

void __swiftcall UIViewSnapshotResponder.previewTargetContainer(host:)(UIView *__return_ptr retstr, UIView *host)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  UIView *v6;
  UIView *v7;
  uint64_t v8;

  v7 = host;
  type metadata accessor for HostingScrollViewResponder();
  ResponderNode.firstAncestor<A>(ofType:)();
  if (!v8)
    goto LABEL_10;
  v2 = (void *)MEMORY[0x18D760234](v8 + 48);
  if (!v2)
  {
    swift_release();
    goto LABEL_10;
  }
  v3 = v2;
  v4 = objc_msgSend(v2, sel_superview, v7);

  swift_release();
  if (!v4)
  {
LABEL_10:
    v6 = v7;
    return;
  }
  v5 = objc_msgSend(v4, sel_window);
  if (!v5)
  {

    goto LABEL_10;
  }

  if (objc_msgSend(v4, sel_superview))
}

uint64_t UIViewSnapshotResponder.contentPath.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  _BYTE v10[48];
  __int128 v11;
  __int128 v12;
  char v13;
  _OWORD v14[2];
  char v15;

  v11 = 0u;
  v12 = 0u;
  v13 = 6;
  (*(void (**)(_OWORD *__return_ptr))(class metadata base offset for UIViewSnapshotResponder + *v1 + 88))(v14);
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  AnyHashable.init<A>(_:)();
  v10[40] = 0;
  dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
  outlined destroy of CoordinateSpace((uint64_t)v10);
  v14[0] = v11;
  v14[1] = v12;
  v3 = v13;
  v15 = v13;
  v5 = *((_QWORD *)&v11 + 1);
  v4 = v11;
  v7 = *((_QWORD *)&v12 + 1);
  v6 = v12;
  outlined init with take of Path.Storage((uint64_t)v14, (uint64_t)v10);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  v8 = Path.isEmpty.getter();
  result = outlined retain of TableColumnCustomizationID.Base((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  if ((v8 & 1) != 0)
  {
    result = outlined retain of TableColumnCustomizationID.Base((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v3 = -1;
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v3;
  return result;
}

__C::CGRect __swiftcall UIViewSnapshotResponder.convertRectToTargetSpace(_:host:preferredContainer:)(__C::CGRect _, UIView *host, UIView_optional *preferredContainer)
{
  uint64_t v3;
  void *v6;
  void *v7;
  id v8;
  id v9;
  UIView *v10;
  double v11;
  CGFloat x;
  double v13;
  CGFloat y;
  double v15;
  CGFloat width;
  double v17;
  CGFloat height;
  double v19;
  double v20;
  double v21;
  double v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __C::CGRect v32;
  __C::CGRect result;

  v32 = _;
  type metadata accessor for HostingScrollViewResponder();
  ResponderNode.firstAncestor<A>(ofType:)();
  if (!v28)
  {
LABEL_9:
    hostingViewCoordinateSpace.getter();
    v31 = 1;
    AGGraphClearUpdate();
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
    static Update.dispatchImmediately<A>(_:)();
    AGGraphSetUpdate();
    if (v24 == 1)
      ViewTransform.init()();
    ViewTransform.appendPosition(_:)(*(CGPoint *)(v3 + 232));
    CGRect.convert(to:transform:)();
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)&v28);
    v10 = host;
    if (!preferredContainer)
      goto LABEL_15;
    goto LABEL_12;
  }
  v6 = (void *)MEMORY[0x18D760234](v28 + 48);
  if (!v6)
  {
    swift_release();
    goto LABEL_9;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel_superview);

  swift_release();
  if (!v8)
    goto LABEL_9;
  v9 = objc_msgSend(v8, sel_window);
  if (!v9)
  {

    goto LABEL_9;
  }

  v10 = (UIView *)v8;
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v25 == 1)
  {
    ViewTransform.init()();
  }
  else
  {
    v28 = v25;
    v29 = v26;
    v30 = v27;
  }
  ViewTransform.appendPosition(_:)(*(CGPoint *)(v3 + 232));
  v23 = v29;
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v28);

  swift_release();
  if (!preferredContainer)
  {
LABEL_15:

    x = v32.origin.x;
    y = v32.origin.y;
    width = v32.size.width;
    height = v32.size.height;
    goto LABEL_16;
  }
LABEL_12:
  -[UIView convertRect:toCoordinateSpace:](v10, sel_convertRect_toCoordinateSpace_, preferredContainer, v32.origin.x, v32.origin.y, v32.size.width, v32.size.height, v23);
  x = v11;
  y = v13;
  width = v15;
  height = v17;

LABEL_16:
  v19 = x;
  v20 = y;
  v21 = width;
  v22 = height;
  result.size.height = v22;
  result.size.width = v21;
  result.origin.y = v20;
  result.origin.x = v19;
  return result;
}

uint64_t closure #1 in closure #1 in UIViewSnapshotResponder.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = AGGraphGetWeakValue();
  if (result)
  {
    v6 = *(_OWORD *)result;
    v7 = *(_OWORD *)(result + 16);
    v3 = *(_QWORD *)(result + 32);
    result = swift_retain();
    v4 = v6;
    v5 = v7;
  }
  else
  {
    v3 = 0;
    v4 = xmmword_187BFE310;
    v5 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t closure #1 in UIViewSnapshotResponder.canPortal.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;
  BOOL v3;

  result = AGGraphGetWeakValue();
  if (result)
    v3 = (*(_WORD *)(result + 8) & 0x200) == 0;
  else
    v3 = 1;
  *a1 = v3;
  return result;
}

void closure #1 in UIViewSnapshotResponder.snapshotView(host:)(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  char *v12;
  char *v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  double v19;
  double v20;
  __int128 v21;
  id v22;
  objc_super v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int8 v32;
  char v33;
  double v34;
  double v35;
  __int128 v36;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList?);
  static Update.ensure<A>(_:)();
  if (v30)
  {
    v6 = v31 | (v32 << 16);
    v7 = *(double *)(a1 + 216);
    v8 = *(double *)(a1 + 224);
    v9 = *(_QWORD *)(a1 + 272);
    v10 = *(_QWORD *)(a1 + 280);
    v11 = (objc_class *)type metadata accessor for DisplayListView();
    v12 = (char *)objc_allocWithZone(v11);
    v13 = &v12[OBJC_IVAR____TtC7SwiftUI15DisplayListView_displayList];
    *(_QWORD *)v13 = v30;
    *((_WORD *)v13 + 4) = v6;
    v13[10] = BYTE2(v6);
    v14 = &v12[OBJC_IVAR____TtC7SwiftUI15DisplayListView_displayListPosition];
    *(_QWORD *)v14 = v9;
    *((_QWORD *)v14 + 1) = v10;
    v23.receiver = v12;
    v23.super_class = v11;
    v15 = objc_msgSendSuper2(&v23, sel_initWithFrame_, 0.0, 0.0, v7, v8);
    v16 = (void *)objc_opt_self();
    v17 = v15;
    v18 = objc_msgSend(v16, sel_clearColor);
    objc_msgSend(v17, sel_setBackgroundColor_, v18);

LABEL_8:
    *a3 = v17;
    return;
  }
  v34 = 0.0;
  v35 = 0.0;
  v36 = *(_OWORD *)(a1 + 216);
  hostingViewCoordinateSpace.getter();
  v33 = 1;
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v24 == 1)
  {
    ViewTransform.init()();
  }
  else
  {
    v27 = v24;
    v28 = v25;
    v29 = v26;
  }
  ViewTransform.appendPosition(_:)(*(CGPoint *)(a1 + 232));
  CGRect.convert(to:transform:)();
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)&v30);
  v19 = v34;
  v20 = v35;
  v21 = v36;
  v22 = objc_msgSend(a2, sel_resizableSnapshotViewFromRect_afterScreenUpdates_withCapInsets_, 0, v34, v35, v36, *MEMORY[0x1E0DC49E8], *(double *)(MEMORY[0x1E0DC49E8] + 8), *(double *)(MEMORY[0x1E0DC49E8] + 16), *(double *)(MEMORY[0x1E0DC49E8] + 24));
  if (v22)
  {
    v17 = v22;
    objc_msgSend(v22, sel_setContentMode_, 4);
    objc_msgSend(v17, sel_setFrame_, v19, v20, v21);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t closure #1 in closure #1 in UIViewSnapshotResponder.snapshotView(host:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;

  result = AGGraphGetWeakValue();
  if (result)
  {
    v3 = *(unsigned __int16 *)(result + 8) | (*(unsigned __int8 *)(result + 10) << 16);
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 10) = BYTE2(v3);
  return result;
}

uint64_t UIViewSnapshotResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for UIViewSnapshotResponder()
{
  return type metadata accessor for UIViewSnapshotResponder();
}

uint64_t UIViewSnapshotResponder.Transform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _OWORD v7[3];

  Value = AGGraphGetValue();
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  v7[0] = *(_OWORD *)AGGraphGetValue();
  v3 = swift_retain();
  *(double *)&v4 = MEMORY[0x18D755E9C](v3);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v5, v4));
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)();
  return outlined destroy of AnyHashable((uint64_t)v7);
}

unint64_t implicit closure #1 in DisplayListView.draw(_:)()
{
  return 0xD00000000000001BLL;
}

uint64_t closure #1 in DisplayListView.draw(_:)()
{
  type metadata accessor for DisplayList.GraphicsRenderer();
  swift_allocObject();
  DisplayList.GraphicsRenderer.init(platformViewMode:)();
  GraphicsContext.translateBy(x:y:)();
  swift_bridgeObjectRetain();
  DisplayList.GraphicsRenderer.renderDisplayList(_:at:in:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t type metadata accessor for DisplayListView()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in closure #1 in UIViewSnapshotResponder.snapshotView(host:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in UIViewSnapshotResponder.snapshotView(host:)(a1);
}

uint64_t partial apply for closure #1 in DisplayListView.draw(_:)()
{
  return closure #1 in DisplayListView.draw(_:)();
}

ValueMetadata *type metadata accessor for UIViewSnapshotResponder.Transform()
{
  return &type metadata for UIViewSnapshotResponder.Transform;
}

uint64_t one-time initialization function for isEnabledInProcessEnv()
{
  uint64_t result;

  result = static ProcessEnvironment.BOOL(forKey:defaultValue:)();
  static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv = result & 1;
  return result;
}

void protocol witness for _SceneModifier.body(content:) in conformance RestorationBehaviorModifier()
{
  protocol witness for _SceneModifier.body(content:) in conformance RestorationBehaviorModifier();
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void _SceneModifier<>.body(content:)()
{
  specialized _SceneModifier<>.body(content:)();
}

void protocol witness for _SceneModifier.body(content:) in conformance WindowResizabilityModifier()
{
  protocol witness for _SceneModifier.body(content:) in conformance RestorationBehaviorModifier();
}

void protocol witness for _SceneModifier.body(content:) in conformance EnvironmentWritingSceneModifier<A>()
{
  specialized _SceneModifier<>.body(content:)();
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance EnvironmentWritingSceneModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _SceneModifier<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for EnvironmentWritingSceneModifier<A>);
}

uint64_t static _SceneModifier<>._makeScene(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v10 = *a1;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v13 = a2[5];
  v14 = a2[6];
  v15 = *((_DWORD *)a2 + 14);
  v26 = *a2;
  v27 = v11;
  v28 = v12;
  v29 = *(_OWORD *)(a2 + 3);
  v30 = v13;
  v31 = v14;
  v32 = v15;
  LODWORD(v19) = v10;
  v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a7 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v19, &v26, a5, a7);
  v19 = v26;
  v20 = v27;
  v21 = v28;
  v22 = v29;
  v23 = v30;
  v24 = v31;
  v25 = v32;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v17 = swift_bridgeObjectRetain();
  a3(v17, &v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for _SceneModifier.body(content:) in conformance WindowDefaultsPropertyModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _EnvironmentKeyWritingModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65B8], a5);
  return static _SceneModifier<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, v11, v10);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _EnvironmentKeyTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D0], a5);
  return static _SceneModifier<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, v11, v10);
}

uint64_t static _SceneModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  int v28;
  uint64_t result;
  int v30;
  int v31;
  uint64_t v32;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;

  v10 = *a1;
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v14 = a2[5];
  v15 = a2[6];
  v16 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  v17 = v51;
  v18 = v52;
  v19 = v53;
  v20 = HIDWORD(v53);
  v51 = v11;
  LODWORD(v52) = v12;
  v53 = v13;
  v54 = *(_OWORD *)(a2 + 3);
  v55 = v14;
  v56 = v15;
  v57 = v16;
  v30 = v20;
  v31 = v10;
  v46 = v10;
  v36 = v18;
  v37 = v17;
  v39 = v17;
  v40 = v18;
  v35 = v19;
  LOBYTE(v41) = v19;
  HIDWORD(v41) = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _SceneModifier.makeBody(modifier:inputs:fields:)((uint64_t)&v50, (uint64_t)&v47, (uint64_t)&v46, (uint64_t)&v51, (uint64_t)&v39, a5, a6);
  v21 = v50;
  v22 = v48;
  v32 = v47;
  LOBYTE(v15) = v49;
  v39 = a3;
  v40 = a4;
  v24 = type metadata accessor for _SceneModifier_Content.BodyInput(0, a5, a6, v23);
  type metadata accessor for (_:_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SceneModifier_Content<A>.BodyInput, v24);
  _SceneInputs.append<A, B>(_:to:)();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = v21;
  v39 = v51;
  LODWORD(v40) = v52;
  v41 = v53;
  v42 = v54;
  v43 = v55;
  v44 = v56;
  v45 = v57;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v47, &v50, &v39, AssociatedTypeWitness, AssociatedConformanceWitness);
  v27 = v47;
  v28 = v48;
  if ((v15 & 1) == 0)
  {
    v47 = v32;
    v48 = v22;
    v50 = v31;
    v39 = v37;
    v40 = v36;
    LOBYTE(v41) = v35;
    HIDWORD(v41) = v30;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a7 = v27;
  *(_DWORD *)(a7 + 8) = v28;
  return result;
}

uint64_t static EmptyModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 14);
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = *(_OWORD *)(a2 + 3);
  v11 = *(_OWORD *)(a2 + 5);
  v12 = v5;
  return a3(a1, &v7);
}

void protocol witness for _SceneModifier.body(content:) in conformance EmptyModifier()
{
  specialized _SceneModifier.sceneBodyError()(0x646F4D7974706D45, (void *)0xED00007265696669);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance EmptyModifier(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 14);
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = *(_OWORD *)(a2 + 3);
  v11 = *(_OWORD *)(a2 + 5);
  v12 = v5;
  return a3(a1, &v7);
}

void ModifiedContent<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

void protocol witness for Scene.body.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t static ModifiedContent<>._makeScene(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t);
  __int128 v23;
  int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  _BYTE v33[12];

  v15 = *a2;
  v16 = *((_DWORD *)a2 + 2);
  v17 = a2[2];
  v24 = *((_DWORD *)a2 + 14);
  LODWORD(v26) = *a1;
  v14 = v26;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v23 = *(_OWORD *)(a2 + 5);
  v18 = a2[3];
  v19 = a2[4];
  _GraphValue.subscript.getter();
  v26 = v15;
  v27 = v16;
  v28 = v17;
  v29 = v18;
  v30 = v19;
  v31 = v23;
  v32 = v24;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a6;
  *(_QWORD *)(v20 + 32) = a7;
  *(_QWORD *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(_QWORD *)(v20 + 56) = a3;
  *(_QWORD *)(v20 + 64) = a4;
  v21 = *(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v33, &v26, partial apply for closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:), v20, a6, a8);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _BYTE v28[4];

  v13 = *a2;
  v14 = *((_DWORD *)a2 + 2);
  v15 = a2[2];
  v16 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v20 = *(_OWORD *)(a2 + 5);
  v17 = a2[3];
  v18 = a2[4];
  _GraphValue.subscript.getter();
  v21 = v13;
  v22 = v14;
  v23 = v15;
  v24 = v17;
  v25 = v18;
  v26 = v20;
  v27 = v16;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(v28, &v21, a4, a5, a6, a8);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a6 - 8), *(_QWORD *)(a6 - 16));
}

uint64_t static _SceneModifier_Content._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(uint64_t, _QWORD);
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_DWORD *)(a2 + 56);
  v20 = *(void (**)(uint64_t, _QWORD))a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 24);
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v9 = type metadata accessor for _SceneModifier_Content.BodyInput(0, a3, a4, a4);
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SceneModifier_Content<A>.BodyInput, v9);
  _SceneInputs.popLast<A, B>(_:)();
  v10 = v13;
  if (v13)
  {
    v13 = v20;
    LODWORD(v14) = v21;
    v15 = v22;
    v16 = v23;
    v17 = v24;
    v18 = v25;
    v19 = v26;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v10(v11, &v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t static _SceneModifier_Content.BodyInput.defaultValue.getter()
{
  type metadata accessor for (_:_:)();
  return Stack.init()();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SceneModifier_Content<A>.BodyInput()
{
  return static _SceneModifier_Content.BodyInput.defaultValue.getter();
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance _SceneModifier_Content<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _SceneModifier_Content._makeScene(scene:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static _SceneModifier.makeBody(modifier:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    v10 = type metadata accessor for AppModifierBodyAccessor(0, a6, a7, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AppModifierBodyAccessor<A>, v10);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t AppModifierBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for AppModifierBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AppModifierBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance AppModifierBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return AppModifierBodyAccessor.updateBody(of:changed:)(result, a2);
}

void protocol witness for _SceneModifier.body(content:) in conformance _AppearanceActionModifier()
{
  specialized _SceneModifier.sceneBodyError()(0xD000000000000019, (void *)0x8000000187BDEC90);
}

void protocol witness for _SceneModifier.body(content:) in conformance ActivationConditionsModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _SceneModifier.body(content:) in conformance PersistentSystemOverlaysSceneModifier()
{
  protocol witness for _SceneModifier.body(content:) in conformance RestorationBehaviorModifier();
}

void protocol witness for _SceneModifier.body(content:) in conformance SceneSafeAreaDisabledModifier()
{
  protocol witness for _SceneModifier.body(content:) in conformance RestorationBehaviorModifier();
}

void protocol witness for _SceneModifier.body(content:) in conformance CommandsRemovedModifier()
{
  protocol witness for _SceneModifier.body(content:) in conformance RestorationBehaviorModifier();
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance WindowToolbarStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _SceneModifier<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for WindowToolbarStyleModifier<A>);
}

void specialized _SceneModifier.sceneBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized _SceneModifier<>.body(content:)()
{
  specialized _SceneModifier.sceneBodyError()();
}

uint64_t type metadata accessor for _SceneModifier_Content.BodyInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _SceneModifier_Content.BodyInput);
}

unint64_t type metadata accessor for (_:_:)()
{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

uint64_t sub_1873CC8E8()
{
  return swift_deallocObject();
}

void specialized _SceneModifier.sceneBodyError()(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ModifiedContent<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v7[2];

  v6 = type metadata accessor for ModifiedContent();
  v7[0] = a3;
  v7[1] = a4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v6, v7);
  specialized Scene.sceneBodyError()();
}

{
  uint64_t v6;
  _QWORD v7[2];

  v6 = type metadata accessor for ModifiedContent();
  v7[0] = a3;
  v7[1] = a4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v6, v7);
  specialized WidgetConfiguration.widgetConfigurationBodyError()();
}

{
  uint64_t v6;
  _QWORD v7[2];

  v6 = type metadata accessor for ModifiedContent();
  v7[0] = a3;
  v7[1] = a4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v6, v7);
  specialized ControlWidgetConfiguration.controlWidgetConfigurationBodyError()();
}

{
  uint64_t v6;
  _QWORD v7[2];

  v6 = type metadata accessor for ModifiedContent();
  v7[0] = a3;
  v7[1] = a4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v6, v7);
  specialized ControlWidgetTemplate.controlWidgetTemplateBodyError()();
}

uint64_t sub_1873CC9FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t dispatch thunk of _SceneModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static _SceneModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t type metadata accessor for _SceneModifier_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _SceneModifier_Content);
}

void base witness table accessor for PropertyKey in _SceneModifier_Content<A>.BodyInput()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for _SceneModifier_Content<A>.BodyInput(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SceneModifier_Content<A>.BodyInput);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata accessor for AppModifierBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppModifierBodyAccessor);
}

uint64_t partial apply for closure #1 in AppModifierBodyAccessor.updateBody(of:changed:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 24) + 24))(a1, *(_QWORD *)(v1 + 16));
}

uint64_t specialized MutableCollection<>.sort(by:)(char **a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  uint64_t v10[2];

  v4 = swift_allocObject();
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v6;
  v7 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
  v8 = *((_QWORD *)v7 + 2);
  v10[0] = (uint64_t)(v7 + 32);
  v10[1] = v8;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v10, a2);
  *a1 = v7;
  return swift_release();
}

double *specialized MutableCollection<>.sort(by:)(_QWORD **a1, char a2)
{
  _QWORD *v4;
  uint64_t v5;
  double *result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2 & 1);
  *a1 = v4;
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(char **a1, uint64_t (*a2)(_QWORD *))
{
  char *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  v5 = *((_QWORD *)v4 + 2);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = a2(v7);
  *a1 = v4;
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, char **a2, char a3, char ***a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char ***v9;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  if (v8)
  {
    v9 = a4;
    v13 = 0;
    v14 = a3 & 1;
    v15 = MEMORY[0x1E0DEE9D8];
    while (v13 < *(_QWORD *)(v7 + 16))
    {
      v20 = *(_OWORD *)(v7 + 16 * v13 + 32);
      v21 = v20;
      swift_unknownObjectRetain();
      v16 = closure #2 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)((char **)&v21, a2, v14, v9, a5, a6);
      if (v6)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return v15;
      }
      if ((v16 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v22 = v15;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
          v15 = v22;
        }
        v18 = *(_QWORD *)(v15 + 16);
        v17 = *(_QWORD *)(v15 + 24);
        if (v18 >= v17 >> 1)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1);
          v15 = v22;
        }
        *(_QWORD *)(v15 + 16) = v18 + 1;
        *(_OWORD *)(v15 + 16 * v18 + 32) = v20;
        v9 = a4;
      }
      else
      {
        result = swift_unknownObjectRelease();
      }
      if (v8 == ++v13)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

__n128 one-time initialization function for zero()
{
  __n128 result;
  __int128 v1;

  static HostingScrollView.PlatformGroupContainer.Viewport.zero = 0u;
  *(_OWORD *)&qword_1EDF00058 = 0u;
  result = *(__n128 *)MEMORY[0x1E0DC49E8];
  v1 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  xmmword_1EDF00068 = *MEMORY[0x1E0DC49E8];
  *(_OWORD *)&qword_1EDF00078 = v1;
  return result;
}

double HostingScrollView.PlatformGroupContainer.visibleBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  double v4;
  double v5;
  uint64_t v6;
  void *v7;
  objc_class *v8;
  objc_super v10;
  objc_super v11;

  v1 = v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView;
  v2 = (void *)MEMORY[0x18D760234](v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView);
  if (v2)
  {
    v3 = v2;
    v10.receiver = v2;
    v10.super_class = (Class)type metadata accessor for HostingScrollView();
    objc_msgSendSuper2(&v10, sel_bounds);
    objc_msgSend(v3, sel_contentOffset);
    v5 = v4;
    objc_msgSend(v3, sel_adjustedContentInset);

  }
  else
  {
    if (one-time initialization token for zero != -1)
      swift_once();
    v5 = *(double *)&qword_1EDF00058;
  }
  v6 = MEMORY[0x18D760234](v1);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (objc_class *)type metadata accessor for HostingScrollView();
    v11.receiver = v7;
    v11.super_class = v8;
    objc_msgSendSuper2(&v11, sel_bounds);
    objc_msgSend(v7, sel_contentOffset);
    objc_msgSend(v7, sel_adjustedContentInset);

  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  return v5;
}

double HostingScrollView.PlatformGroupContainer.pageBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  objc_class *v8;
  double v9;
  double v10;
  uint64_t v11;
  void *v12;
  objc_class *v13;
  uint64_t v14;
  void *v15;
  objc_class *v16;
  uint64_t v17;
  void *v18;
  objc_class *v19;
  uint64_t v20;
  void *v21;
  objc_class *v22;
  uint64_t v23;
  void *v24;
  objc_class *v25;
  uint64_t v26;
  void *v27;
  objc_class *v28;
  double v30;
  objc_super v31;
  objc_super v32;
  objc_super v33;
  objc_super v34;
  objc_super v35;
  objc_super v36;
  objc_super v37;
  objc_super v38;

  v1 = v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView;
  v2 = (void *)MEMORY[0x18D760234](v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView);
  if (v2)
  {
    v3 = v2;
    v31.receiver = v2;
    v31.super_class = (Class)type metadata accessor for HostingScrollView();
    objc_msgSendSuper2(&v31, sel_bounds);
    objc_msgSend(v3, sel_contentOffset);
    v30 = v4;
    objc_msgSend(v3, sel_adjustedContentInset, v5);

  }
  else
  {
    if (one-time initialization token for zero != -1)
      swift_once();
    v30 = *(double *)&qword_1EDF00058;
  }
  v6 = MEMORY[0x18D760234](v1);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (objc_class *)type metadata accessor for HostingScrollView();
    v32.receiver = v7;
    v32.super_class = v8;
    objc_msgSendSuper2(&v32, sel_bounds);
    objc_msgSend(v7, sel_contentOffset);
    objc_msgSend(v7, sel_adjustedContentInset);
    v10 = v9;

  }
  else
  {
    if (one-time initialization token for zero != -1)
      swift_once();
    v10 = *((double *)&xmmword_1EDF00068 + 1);
  }
  v11 = MEMORY[0x18D760234](v1);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = (objc_class *)type metadata accessor for HostingScrollView();
    v33.receiver = v12;
    v33.super_class = v13;
    objc_msgSendSuper2(&v33, sel_bounds);
    objc_msgSend(v12, sel_contentOffset);
    objc_msgSend(v12, sel_adjustedContentInset);

  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  v14 = MEMORY[0x18D760234](v1);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = (objc_class *)type metadata accessor for HostingScrollView();
    v34.receiver = v15;
    v34.super_class = v16;
    objc_msgSendSuper2(&v34, sel_bounds);
    objc_msgSend(v15, sel_contentOffset);
    objc_msgSend(v15, sel_adjustedContentInset);

  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  v17 = MEMORY[0x18D760234](v1);
  if (v17)
  {
    v18 = (void *)v17;
    v19 = (objc_class *)type metadata accessor for HostingScrollView();
    v35.receiver = v18;
    v35.super_class = v19;
    objc_msgSendSuper2(&v35, sel_bounds);
    objc_msgSend(v18, sel_contentOffset);
    objc_msgSend(v18, sel_adjustedContentInset);

  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  v20 = MEMORY[0x18D760234](v1);
  if (v20)
  {
    v21 = (void *)v20;
    v22 = (objc_class *)type metadata accessor for HostingScrollView();
    v36.receiver = v21;
    v36.super_class = v22;
    objc_msgSendSuper2(&v36, sel_bounds);
    objc_msgSend(v21, sel_contentOffset);
    objc_msgSend(v21, sel_adjustedContentInset);

  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  v23 = MEMORY[0x18D760234](v1);
  if (v23)
  {
    v24 = (void *)v23;
    v25 = (objc_class *)type metadata accessor for HostingScrollView();
    v37.receiver = v24;
    v37.super_class = v25;
    objc_msgSendSuper2(&v37, sel_bounds);
    objc_msgSend(v24, sel_contentOffset);
    objc_msgSend(v24, sel_adjustedContentInset);

  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  v26 = MEMORY[0x18D760234](v1);
  if (v26)
  {
    v27 = (void *)v26;
    v28 = (objc_class *)type metadata accessor for HostingScrollView();
    v38.receiver = v27;
    v38.super_class = v28;
    objc_msgSendSuper2(&v38, sel_bounds);
    objc_msgSend(v27, sel_contentOffset);
    objc_msgSend(v27, sel_adjustedContentInset);

  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  return v30 + v10;
}

void HostingScrollView.PlatformGroupContainer.pruneFillerItems()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  os_log_t v33;
  unsigned int (*isa)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  os_log_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  os_log_t v87;
  _QWORD *v88;
  os_log_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[2];
  _QWORD *v97;

  v1 = v0;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v85 - v8;
  v10 = OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems;
  if (!*(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems]
                  + 16))
    return;
  v11 = HostingScrollView.PlatformGroupContainer.visibleBounds.getter();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v97 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = v0;
  v19 = swift_bridgeObjectRetain();
  v20 = (_QWORD *)specialized _ArrayProtocol.filter(_:)(v19, v18, &v97, v11, v13, v15, v17);

  v21 = v97;
  v22 = (_QWORD *)v97[2];
  if (v22)
  {
    v92 = v5;
    v93 = v9;
    v23 = v20;
    v94 = v10;
    v24 = v97 + 4;
    swift_bridgeObjectRetain();
    type metadata accessor for UIKitFocusableFillerItem();
    v20 = 0;
    while (1)
    {
      swift_unknownObjectRetain();
      v10 = UIFocusItem.isFocused.getter();
      swift_unknownObjectRelease();
      if ((v10 & 1) != 0)
        break;
      v20 = (_QWORD *)((char *)v20 + 1);
      v24 += 2;
      if (v22 == v20)
      {
        swift_bridgeObjectRelease();
        v10 = v94;
        v20 = v23;
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    if ((unint64_t)v20 >= v21[2])
    {
      __break(1u);
    }
    else
    {
      v21 = (_QWORD *)*v24;
      swift_unknownObjectRetain();
      specialized Array.remove(at:)((unint64_t)v20);
      swift_unknownObjectRelease();
      swift_unknownObjectRetain();
      v20 = v23;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v10 = v94;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_9:
        v26 = (uint64_t)v93;
        v28 = v20[2];
        v27 = v20[3];
        if (v28 >= v27 >> 1)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v20);
        v20[2] = v28 + 1;
        v29 = &v20[2 * v28];
        v29[4] = v21;
        v29[5] = &protocol witness table for UIKitFocusableFillerItem;
        v30 = (unsigned __int8 *)swift_unknownObjectRetain();
        v31 = HostingScrollView.PlatformGroupContainer.querySubstitute(for:)(v30);
        if (v31)
        {
          *(_QWORD *)&v18[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem] = v31;
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          static Log.focus.getter();
          v32 = type metadata accessor for Logger();
          v33 = *(os_log_t *)(v32 - 8);
          isa = (unsigned int (*)(uint64_t, uint64_t))v33[6].isa;
          v92 = (char *)v32;
          if (isa(v26, 1) == 1)
          {
            outlined destroy of Logger?(v26);
          }
          else
          {
            v38 = v18;
            swift_unknownObjectRetain_n();
            swift_unknownObjectRetain_n();
            v91 = v38;
            v39 = Logger.logObject.getter();
            v40 = static os_log_type_t.default.getter();
            LODWORD(v90) = v40;
            if (os_log_type_enabled(v39, v40))
            {
              v41 = swift_slowAlloc();
              v88 = v20;
              v89 = v33;
              v42 = v41;
              v86 = swift_slowAlloc();
              v96[0] = v86;
              *(_DWORD *)v42 = 136315650;
              v43 = (void *)swift_unknownObjectRetain();
              v44 = specialized UIKitFocusItemDescription.init(_:)(v43);
              v87 = v39;
              v45 = v44;
              v47 = v46;
              swift_unknownObjectRelease();
              v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v42 + 12) = 2080;
              swift_getObjectType();
              v48 = swift_unknownObjectRetain();
              v49 = specialized UIKitFocusItemDescription.init(_:)(v48);
              v51 = v50;
              swift_unknownObjectRelease();
              v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v42 + 22) = 2080;
              v52 = v91;
              v53 = specialized UIKitFocusItemDescription.init(_:)();
              v55 = v54;

              v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              v26 = (uint64_t)v93;
              v10 = v94;
              swift_bridgeObjectRelease();
              v39 = v87;
              _os_log_impl(&dword_186E48000, v87, (os_log_type_t)v90, "substituting: %s with: %s in host: %s", (uint8_t *)v42, 0x20u);
              v56 = v86;
              swift_arrayDestroy();
              MEMORY[0x18D760108](v56, -1, -1);
              v57 = v42;
              v20 = v88;
              v33 = v89;
              MEMORY[0x18D760108](v57, -1, -1);
            }
            else
            {
              v78 = v91;

              swift_unknownObjectRelease_n();
              swift_unknownObjectRelease_n();
            }

            ((void (*)(uint64_t, char *))v33[1].isa)(v26, v92);
          }
          objc_msgSend(v18, sel_setNeedsFocusUpdate);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease_n();
        }
        else
        {
          v35 = (uint64_t)v92;
          static Log.focus.getter();
          v36 = type metadata accessor for Logger();
          v37 = *(_QWORD *)(v36 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
          {
            swift_unknownObjectRelease_n();
            outlined destroy of Logger?(v35);
          }
          else
          {
            v58 = v18;
            swift_unknownObjectRetain_n();
            v59 = v58;
            v60 = Logger.logObject.getter();
            v61 = static os_log_type_t.default.getter();
            v62 = v61;
            if (os_log_type_enabled(v60, v61))
            {
              v63 = swift_slowAlloc();
              LODWORD(v91) = v62;
              v64 = v63;
              v90 = swift_slowAlloc();
              v96[0] = v90;
              *(_DWORD *)v64 = 136315394;
              v88 = (_QWORD *)(v64 + 4);
              v65 = (void *)swift_unknownObjectRetain();
              v66 = specialized UIKitFocusItemDescription.init(_:)(v65);
              v89 = v60;
              v67 = v66;
              v93 = v1;
              v68 = v20;
              v70 = v69;
              swift_unknownObjectRelease();
              v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v70, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v64 + 12) = 2080;
              v88 = (_QWORD *)(v64 + 14);
              v71 = v59;
              v72 = specialized UIKitFocusItemDescription.init(_:)();
              v74 = v73;

              v75 = v72;
              v20 = v68;
              v1 = v93;
              v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v74, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              v76 = v89;
              _os_log_impl(&dword_186E48000, v89, (os_log_type_t)v91, "rouge filler: %s in host: %s", (uint8_t *)v64, 0x16u);
              v77 = v90;
              swift_arrayDestroy();
              MEMORY[0x18D760108](v77, -1, -1);
              v35 = (uint64_t)v92;
              MEMORY[0x18D760108](v64, -1, -1);

            }
            else
            {

            }
            swift_unknownObjectRelease_n();
            (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
            v10 = v94;
          }
        }
        goto LABEL_25;
      }
    }
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    goto LABEL_9;
  }
LABEL_25:
  v79 = v97;
  v80 = v97[2];
  if (v80)
  {
    v93 = v1;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    swift_bridgeObjectRetain();
    v81 = 4;
    do
    {
      v82 = v79[v81];
      swift_unknownObjectRetain();
      v83 = (void *)static UIFocusSystem.focusSystem(for:)();
      if (v83)
      {
        v84 = v83;
        objc_msgSend(v83, sel__focusEnvironmentWillDisappear_, v82);

      }
      swift_unknownObjectRelease();
      v81 += 2;
      --v80;
    }
    while (v80);
    swift_bridgeObjectRelease();
    v1 = v93;
  }
  *(_QWORD *)&v1[v10] = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

id HostingScrollView.PlatformGroupContainer.updateFocusScrollBoundaryMetrics(_:for:)(void *a1, id a2)
{
  char *v2;
  id result;
  uint64_t v6;
  void *v7;
  id v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  uint64_t v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double MaxY;
  _BOOL8 v29;
  _BOOL8 v30;
  double v31;
  double MinY;
  double v33;
  objc_super v34;
  char v35;
  unsigned __int8 v36;
  char v37;
  unsigned __int8 v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  result = objc_msgSend(a2, sel_parentFocusEnvironment);
  if (result)
  {
    objc_opt_self();
    v6 = swift_dynamicCastObjCClass();
    if (!v6)
      return (id)swift_unknownObjectRelease();
    v7 = (void *)v6;
    objc_msgSend(a2, sel_frame);
    v8 = objc_msgSend(v7, sel_convertRect_toView_, v2);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v38 = 1;
    v37 = 1;
    v36 = 1;
    v35 = 1;
    MEMORY[0x1E0C80A78](v8, v17);
    static Update.ensure<A>(_:)();
    v18 = (void *)MEMORY[0x18D760234](&v2[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView]);
    if (v18)
    {
      v19 = v18;
      v34.receiver = v18;
      v34.super_class = (Class)type metadata accessor for HostingScrollView();
      objc_msgSendSuper2(&v34, sel_bounds);
      v21 = v20;
      objc_msgSend(v19, sel_contentOffset);
      v23 = v22;
      objc_msgSend(v19, sel_adjustedContentInset);
      v25 = v24;
      v27 = v26;

    }
    else
    {
      if (one-time initialization token for zero != -1)
        swift_once();
      v21 = *((double *)&static HostingScrollView.PlatformGroupContainer.Viewport.zero + 1);
      v23 = *(double *)&qword_1EDF00060;
      v25 = *(double *)&xmmword_1EDF00068;
      v27 = *(double *)&qword_1EDF00078;
    }
    MaxY = v21 - (v25 + v27);
    if ((v37 & 1) != 0)
    {
      if ((v35 & 1) != 0)
      {
        v29 = 1;
        v30 = 1;
LABEL_21:
        objc_msgSend(a1, sel_setIsMinX_, v38, MaxY);
        objc_msgSend(a1, sel_setIsMinY_, v30);
        objc_msgSend(a1, sel_setIsMaxX_, v36);
        objc_msgSend(a1, sel_setIsMaxY_, v29);
        return (id)swift_unknownObjectRelease();
      }
      v33 = v21 - (v25 + v27);
      v30 = 1;
LABEL_18:
      v42.origin.x = v10;
      v42.origin.y = v12;
      v42.size.width = v14;
      v42.size.height = v16;
      MaxY = CGRectGetMaxY(v42);
      if (v21 + v23 - v27 <= MaxY)
      {
        v43.origin.x = v10;
        v43.origin.y = v12;
        v43.size.width = v14;
        v43.size.height = v16;
        MinY = CGRectGetMinY(v43);
        objc_msgSend(v2, sel_bounds);
        MaxY = CGRectGetMaxY(v44) - v33;
        v29 = MaxY <= MinY;
      }
      else
      {
        v29 = 0;
      }
      goto LABEL_21;
    }
    v33 = v21 - (v25 + v27);
    v39.origin.x = v10;
    v39.origin.y = v12;
    v39.size.width = v14;
    v39.size.height = v16;
    MaxY = CGRectGetMinY(v39);
    if (MaxY <= v23 + v25)
    {
      v40.origin.x = v10;
      v40.origin.y = v12;
      v40.size.width = v14;
      v40.size.height = v16;
      v31 = CGRectGetMaxY(v40);
      objc_msgSend(v2, sel_bounds);
      MaxY = v33 + CGRectGetMinY(v41);
      v30 = v31 <= MaxY;
      if ((v35 & 1) == 0)
        goto LABEL_18;
    }
    else
    {
      v30 = 0;
      if ((v35 & 1) == 0)
        goto LABEL_18;
    }
    v29 = 1;
    goto LABEL_21;
  }
  return result;
}

uint64_t closure #1 in HostingScrollView.PlatformGroupContainer.updateFocusScrollBoundaryMetrics(_:for:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, BOOL *a6, BOOL *a7, BOOL *a8, BOOL *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  double v22;
  CGFloat v23;
  CGFloat v24;
  double *WeakValue;
  double v26;
  CGFloat MinX;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  CGFloat MinY;
  CGFloat MaxX;
  uint64_t v33;
  CGFloat MaxY;
  CGFloat v35;
  CGFloat v36;
  double v37;
  double v38;
  double v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  CGFloat v52;
  CGFloat v53;
  double v54;
  BOOL *v55;
  BOOL *v56;
  BOOL *v57;
  double v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v57 = a7;
  v16 = type metadata accessor for FloatingPointRoundingRule();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for FocusableBorder?, (uint64_t)&type metadata for FocusableBorder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetWeakValue();
  if (result && (*(_BYTE *)(result + 64) & 1) == 0)
  {
    v51 = *(double *)(result + 56);
    v54 = *(double *)(result + 48);
    v47 = *(double *)(result + 40);
    v49 = *(double *)(result + 32);
    v22 = *(double *)(result + 24);
    v23 = *(double *)(result + 8);
    v52 = *(double *)(result + 16);
    v53 = v22;
    v24 = *(double *)result;
    swift_beginAccess();
    WeakValue = (double *)AGGraphGetWeakValue();
    v55 = a8;
    v56 = a9;
    if (WeakValue)
      v26 = *WeakValue;
    else
      v26 = 1.0;
    v59.origin.x = a1;
    v59.origin.y = a2;
    v59.size.width = a3;
    v59.size.height = a4;
    MinX = CGRectGetMinX(v59);
    v28 = *MEMORY[0x1E0DED500];
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
    v29(v20, v28, v16);
    v58 = MinX;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v26);
    v50 = v58;
    v30 = *(void (**)(char *, uint64_t))(v17 + 8);
    v30(v20, v16);
    v60.origin.x = a1;
    v60.origin.y = a2;
    v60.size.width = a3;
    v60.size.height = a4;
    MinY = CGRectGetMinY(v60);
    v29(v20, v28, v16);
    v58 = MinY;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v26);
    v48 = v58;
    v30(v20, v16);
    v61.origin.x = a1;
    v61.origin.y = a2;
    v61.size.width = a3;
    v61.size.height = a4;
    MaxX = CGRectGetMaxX(v61);
    v33 = *MEMORY[0x1E0DED508];
    v29(v20, v33, v16);
    v58 = MaxX;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v26);
    v46 = v58;
    v30(v20, v16);
    v62.origin.x = a1;
    v62.origin.y = a2;
    v62.size.width = a3;
    v62.size.height = a4;
    MaxY = CGRectGetMaxY(v62);
    v29(v20, v33, v16);
    v58 = MaxY;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v26);
    v45 = v58;
    v30(v20, v16);
    v63.origin.x = v24;
    v63.origin.y = v23;
    v35 = v52;
    v36 = v53;
    v63.size.width = v52;
    v63.size.height = v53;
    v37 = v47 + CGRectGetMinX(v63);
    v29(v20, v28, v16);
    v58 = v37;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v26);
    v38 = v58;
    v30(v20, v16);
    v64.origin.x = v24;
    v64.origin.y = v23;
    v64.size.width = v35;
    v64.size.height = v36;
    v39 = v49 + CGRectGetMinY(v64);
    v29(v20, v28, v16);
    v58 = v39;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v26);
    v40 = v58;
    v30(v20, v16);
    v65.origin.x = v24;
    v65.origin.y = v23;
    v65.size.width = v35;
    v65.size.height = v36;
    v41 = CGRectGetMaxX(v65) - v51;
    v29(v20, v33, v16);
    v58 = v41;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v26);
    v42 = v58;
    v30(v20, v16);
    v66.origin.x = v24;
    v66.origin.y = v23;
    v66.size.width = v35;
    v66.size.height = v36;
    v43 = CGRectGetMaxY(v66) - v54;
    v29(v20, v33, v16);
    v58 = v43;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v26);
    v44 = v58;
    result = ((uint64_t (*)(char *, uint64_t))v30)(v20, v16);
    *a6 = v46 <= v38;
    *v57 = v45 <= v40;
    *v55 = v42 <= v50;
    *v56 = v44 <= v48;
  }
  return result;
}

uint64_t HostingScrollView.PlatformGroupContainer.preferredFocusEnvironments.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  swift_getObjectType();
  v2 = swift_conformsToProtocol2();
  if (v2)
    v3 = v2;
  else
    v3 = 0;
  if (v2)
    v4 = v1;
  else
    v4 = 0;
  if (v4)
  {
    ObjectType = swift_getObjectType();
    v6 = *(void (**)(uint64_t, uint64_t))(v3 + 56);
    swift_unknownObjectRetain_n();
    v6(ObjectType, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v8 + 32) = v1;
  v9 = v8;
  specialized Array._endMutation()();
  return v9;
}

void closure #1 in HostingScrollView.PlatformGroupContainer.focusItems(in:)(void *a1@<X0>, _QWORD *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v6;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  id v17;
  unint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t ObjectType;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_super v45;
  _QWORD *v46;

  v46 = a2;
  v45.receiver = a1;
  v45.super_class = (Class)type metadata accessor for HostingScrollView.PlatformGroupContainer();
  v12 = objc_msgSendSuper2(&v45, sel_focusItemsInRect_, a3, a4, a5, a6);
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v44 = MEMORY[0x1E0DEE9D8];
  if (!(v13 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    v43 = v6;
    if (v14)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x1E0DEE9D8];
LABEL_15:
    *v46 = v16;
    v17 = a1;
    v18 = MEMORY[0x1E0DEE9D8];
    v19 = v17;
    while (1)
    {
      swift_getObjectType();
      v20 = swift_conformsToProtocol2() ? v19 : 0;
      if (v20)
        break;
      v21 = objc_msgSend(v19, sel_parentFocusEnvironment);
      swift_unknownObjectRelease();
      v19 = v21;
      if (!v21)
        goto LABEL_55;
    }
    swift_getObjectType();
    if (v20 == v17)
    {
      v37 = ViewRendererHost.responderNode.getter();
      swift_unknownObjectRelease();
      if (!v37)
      {
        v18 = MEMORY[0x1E0DEE9D8];
        goto LABEL_55;
      }
    }
    else
    {
      ViewRendererHost.responderNode.getter();
      swift_release();
      swift_getObjectType();
      v22 = swift_conformsToProtocol2();
      if (v22)
        v23 = v22;
      else
        v23 = 0;
      if (v22)
        v24 = v17;
      else
        v24 = 0;
      if (!v24)
      {
LABEL_33:
        v29 = v17;
        do
        {
          swift_getObjectType();
          v31 = swift_conformsToProtocol2();
          if (v31)
            v32 = v31;
          else
            v32 = 0;
          if (v31)
            v33 = v29;
          else
            v33 = 0;
          if (v33)
          {
            ObjectType = swift_getObjectType();
            v35 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
            swift_unknownObjectRetain();
            v36 = v35(ObjectType, v32);
            if (v36)
            {
              v37 = v36;
              v38 = v36 + 16;
              swift_beginAccess();
              v39 = MEMORY[0x18D760234](v38);
              if (v39)
              {
                v40 = v39;
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                if ((id)v40 == v20)
                {
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  goto LABEL_54;
                }
              }
              else
              {
                swift_unknownObjectRelease();
              }
              swift_release();
            }
            else
            {
              swift_unknownObjectRelease();
            }
          }
          v30 = objc_msgSend(v29, sel_parentFocusEnvironment, v43);
          swift_unknownObjectRelease();
          v29 = v30;
        }
        while (v30);
        swift_unknownObjectRelease();
        goto LABEL_50;
      }
      v25 = swift_getObjectType();
      v26 = v17;
      v27 = UIFocusEnvironment.nearestRenderer()();
      if (!v27 || (v28 = v27, swift_unknownObjectRelease(), v20 != v28))
      {

        goto LABEL_33;
      }
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 48))(v25, v23);

      swift_unknownObjectRelease();
      if (!v37)
      {
LABEL_50:
        v18 = MEMORY[0x1E0DEE9D8];
LABEL_55:
        specialized Array.append<A>(contentsOf:)(v18);
        v42 = HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)(a3, a4, a5, a6);
        specialized Array.append<A>(contentsOf:)(v42);
        return;
      }
    }
LABEL_54:
    v41 = v17;
    v18 = specialized static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(v37, v41, v20 != v17, a3, a4, a5, a6);
    swift_release();

    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v43 = v6;
  if (!v14)
    goto LABEL_14;
LABEL_3:
  if (v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0)
        MEMORY[0x18D75E3BC](i, v13);
      else
        swift_unknownObjectRetain();
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        swift_unknownObjectRelease();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v16 = v44;
    goto LABEL_15;
  }
  __break(1u);
}

unint64_t HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  os_log_t v23;
  CGFloat v24;
  CGFloat v25;
  double v26;
  double v27;
  NSObject *v28;
  double v29;
  double v30;
  char v31;
  double v32;
  NSObject *v33;
  double v34;
  double v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  double v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  double v65;
  os_log_t v66;
  uint64_t v67;
  uint64_t v68[3];
  CGRect v69;
  CGRect v70;
  CGRect v71;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = HostingScrollView.PlatformGroupContainer.fillerAxis.getter();
  v15 = MEMORY[0x1E0DEE9D8];
  if (v13 != 2)
  {
    v16 = v13;
    v61 = v12;
    MEMORY[0x1E0C80A78](v13, v14);
    v63 = v4;
    type metadata accessor for [FocusableBounds]?(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds]?, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds);
    static Update.ensure<A>(_:)();
    v17 = v67;
    if (!v67)
      v17 = v15;
    v62 = v17;
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      LODWORD(v64) = v16 & 1;
      v19 = v62 + 72;
      do
      {
        v25 = *(double *)(v19 - 40);
        v24 = *(double *)(v19 - 32);
        v27 = *(double *)(v19 - 24);
        v26 = *(double *)(v19 - 16);
        v28 = *(NSObject **)(v19 - 8);
        v29 = *(double *)(v19 + 8);
        v65 = *(double *)v19;
        v66 = v28;
        v30 = *(double *)(v19 + 16);
        v31 = *(_BYTE *)(v19 + 24);
        v33 = *(NSObject **)(v19 + 32);
        v32 = *(double *)(v19 + 40);
        v35 = *(double *)(v19 + 48);
        v34 = *(double *)(v19 + 56);
        v36 = *(_BYTE *)(v19 + 64);
        v69.origin.x = a1;
        v69.origin.y = a2;
        v69.size.width = a3;
        v69.size.height = a4;
        v71.origin.x = v25;
        v71.origin.y = v24;
        v71.size.width = v27;
        v71.size.height = v26;
        v70 = CGRectIntersection(v69, v71);
        if (!CGRectIsEmpty(v70))
        {
          if ((_DWORD)v64)
            v38 = v36;
          else
            v38 = v31;
          if ((v38 & 1) != 0)
          {
            if ((_DWORD)v64)
              v39 = v31;
            else
              v39 = v36;
            if ((v39 & 1) == 0)
            {
              if ((_DWORD)v64)
                v40 = v26;
              else
                v40 = v27;
              HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(v64, v37, a1, a2, a3, a4, v25, v24, v27, v26, v40, 0.0, 0.0, 0.0);
            }
          }
          else
          {
            if ((_DWORD)v64)
              v20 = v34;
            else
              v20 = v30;
            if ((_DWORD)v64)
              v21 = v35;
            else
              v21 = v29;
            v22 = v65;
            v23 = v66;
            if ((_DWORD)v64)
            {
              v22 = v32;
              v23 = v33;
            }
            HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(v64, v37, a1, a2, a3, a4, v25, v24, v27, v26, *(double *)&v23, v22, v21, v20);
          }
        }
        v19 += 112;
        --v18;
      }
      while (v18);
    }
    swift_bridgeObjectRelease();
    v41 = v63;
    HostingScrollView.PlatformGroupContainer.queryFillerItems(in:)(a1, a2, a3, a4);
    v15 = v42;
    v43 = (uint64_t)v61;
    static Log.focus.getter();
    v44 = type metadata accessor for Logger();
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
    {
      outlined destroy of Logger?(v43);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      v46 = v41;
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, (os_log_type_t)v48))
      {
        LODWORD(v65) = v48;
        v66 = v47;
        v49 = swift_slowAlloc();
        v64 = swift_slowAlloc();
        v68[0] = v64;
        *(_DWORD *)v49 = 134218498;
        if (v15 >> 62)
        {
          swift_bridgeObjectRetain();
          v50 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v50 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        v67 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 12) = 2080;
        CGRect.loggable.getter();
        v51 = LoggableRect.description.getter();
        v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 22) = 2080;
        v53 = v46;
        v54 = specialized UIKitFocusItemDescription.init(_:)();
        v56 = v55;

        v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        v57 = v66;
        _os_log_impl(&dword_186E48000, v66, LOBYTE(v65), "filler items queried: %ld in: %s for: %s", (uint8_t *)v49, 0x20u);
        v58 = v64;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v58, -1, -1);
        MEMORY[0x18D760108](v49, -1, -1);

        v43 = (uint64_t)v61;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
    }
  }
  return v15;
}

uint64_t HostingScrollView.PlatformGroupContainer.fillerAxis.getter()
{
  void *v0;
  double Height;
  double Width;
  CGRect v4;
  CGRect v5;
  CGRect v6;
  CGRect v7;

  objc_msgSend(v0, sel_bounds);
  Height = CGRectGetHeight(v4);
  v5.origin.x = HostingScrollView.PlatformGroupContainer.pageBounds.getter();
  if (CGRectGetHeight(v5) < Height)
    return 1;
  objc_msgSend(v0, sel_bounds);
  Width = CGRectGetWidth(v6);
  v7.origin.x = HostingScrollView.PlatformGroupContainer.pageBounds.getter();
  return 2 * (CGRectGetWidth(v7) >= Width);
}

uint64_t HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(char a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, double a11, double a12, double a13, double a14)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  CGRect *v56;
  double *v57;
  double x;
  double y;
  double width;
  double height;
  char x_low;
  BOOL v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  unint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  __int128 v75;
  double v76;
  double v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  char *v81;
  char *v82;
  double v83;
  double v84;
  double v85;
  _QWORD *v86;
  double *v87;
  int64_t v88;
  char *v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  double v100;
  double v101;
  double v102;
  _QWORD *v103;
  double *v104;
  uint64_t v105;
  char *v106;
  double *v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t result;
  uint64_t v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  __int128 v141;
  char *v142[3];
  _QWORD *v143;
  _QWORD *v144[2];
  char *v145;
  CGRect v146;

  v21 = v20;
  v28 = a1 & 1;
  CGRect.range(in:)(v28, a2, a7, a8, a9, a10);
  v30 = v29;
  v32 = v31;
  CGRect.range(in:)(v28 ^ 1, v33, a7, a8, a9, a10);
  v135 = v34;
  v134 = v35;
  v36 = HostingScrollView.PlatformGroupContainer.visibleBounds.getter();
  CGRect.range(in:)(v28, v37, v36, v38, v39, v40);
  v42 = v41;
  v44 = v43;
  type metadata accessor for [FocusableBounds]?(0, &lazy cache variable for type metadata for [FocusableBounds]?, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds);
  static Update.ensure<A>(_:)();
  v46 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v142[0])
    v47 = v142[0];
  else
    v47 = (char *)MEMORY[0x1E0DEE9D8];
  v145 = v47;
  CGRect.range(in:)(v28, v45, a3, a4, a5, a6);
  v138 = v30;
  if (v48 > v30)
    v30 = v48;
  v133 = v32;
  if (v32 >= v49)
    v32 = v49;
  if (v30 >= v32)
    return swift_bridgeObjectRelease();
  if (v30 > v32)
    goto LABEL_177;
  v144[0] = v46;
  v50 = OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems;
  v51 = swift_bridgeObjectRetain();
  v52 = (_QWORD *)specialized _ArrayProtocol.filter(_:)(v51, &v145, v28, (char ***)v144, v30, v32);
  specialized MutableCollection<>.sort(by:)(v144, v28);
  v143 = v46;
  v53 = *((_QWORD *)v145 + 2);
  if (v53)
  {
    v132 = v50;
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    v56 = (CGRect *)(isUniquelyReferenced_nonNull_native + 64);
    while (1)
    {
      x = v56[-1].origin.x;
      y = v56[-1].origin.y;
      width = v56[-1].size.width;
      height = v56[-1].size.height;
      x_low = LOBYTE(v56->origin.x);
      v63 = (~*(_QWORD *)&x & 0x7FF0000000000000) == 0 || (~*(_QWORD *)&v56[-1].origin.y & 0x7FF0000000000000) == 0;
      if (!v63
        && (v69 = CGRectGetWidth(v56[-1]),
            (~*(_QWORD *)&v69 & 0x7FF0000000000000) != 0
         && (v146.origin.x = x,
             v146.origin.y = y,
             v146.size.width = width,
             v146.size.height = height,
             (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v146) & 0x7FF0000000000000) != 0)))
      {
        if ((_DWORD)v28)
          v70 = height;
        else
          v70 = width;
        if ((_DWORD)v28)
          x = y;
        if (v70 <= 0.0)
          v70 = 0.0;
        v64 = x + v70;
        if (x > x + v70)
          goto LABEL_176;
      }
      else
      {
        MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native, v55);
        isUniquelyReferenced_nonNull_native = static Log.internalError(_:)();
        x = 0.0;
        v64 = 0.0;
      }
      v65 = x > v42 ? x : v42;
      v66 = v44 >= v64 ? v64 : v44;
      if (v65 < v66)
        break;
      if ((x_low & 1) == 0)
        goto LABEL_30;
LABEL_13:
      v56 = (CGRect *)((char *)v56 + 40);
      if (!--v53)
      {
        swift_bridgeObjectRelease();
        v50 = v132;
        goto LABEL_46;
      }
    }
    if (v65 > v66)
    {
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      swift_release();
      __break(1u);
      result = swift_release();
      __break(1u);
      return result;
    }
LABEL_30:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, (char *)v46);
      v46 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v68 = v46[2];
    v67 = v46[3];
    if (v68 >= v67 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, (char *)v46);
      v46 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v46[2] = v68 + 1;
    v57 = (double *)&v46[2 * v68];
    v57[4] = x;
    v57[5] = v64;
    goto LABEL_13;
  }
LABEL_46:
  v71 = v46[2];
  if (v71)
  {
    swift_bridgeObjectRetain();
    v72 = 0;
    v73 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v74 = &v46[2 * v72];
      v75 = *((_OWORD *)v74 + 2);
      if (*(double *)&v75 > v30)
        v76 = *((double *)v74 + 4);
      else
        v76 = v30;
      v77 = *((double *)v74 + 5);
      if (v32 < *((double *)&v75 + 1))
        v77 = v32;
      if (v76 < v77)
      {
        if (v76 > v77)
          goto LABEL_175;
        v141 = *((_OWORD *)v74 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v73 + 2) + 1, 1, v73);
        v79 = *((_QWORD *)v73 + 2);
        v78 = *((_QWORD *)v73 + 3);
        v80 = v141;
        if (v79 >= v78 >> 1)
        {
          v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v79 + 1, 1, v73);
          v80 = v141;
          v73 = v81;
        }
        *((_QWORD *)v73 + 2) = v79 + 1;
        *(_OWORD *)&v73[16 * v79 + 32] = v80;
      }
      ++v72;
    }
    while (v71 != v72);
    swift_bridgeObjectRelease();
  }
  else
  {
    v73 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v137 = a11 * 0.25;
  swift_bridgeObjectRelease();
  if (v30 < v42)
  {
    v142[0] = v73;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(v142, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    v82 = v142[0];
    if (v42 >= v32)
      v83 = v32;
    else
      v83 = v42;
    if (v30 > v83)
      goto LABEL_178;
    v84 = floor((v30 - v138 - a13 - a11) / (a11 + a12) + 1.0);
    if (v84 <= 0.0)
      v84 = 0.0;
    v85 = v138 + a13 + (a11 + a12) * v84;
    if (v85 < v83)
    {
      v132 = v50;
      v136 = v83;
      while (1)
      {
        v88 = *((_QWORD *)v82 + 2);
        if (!v88)
          break;
        while (*((double *)v82 + 5) <= v85)
        {
          v89 = (char *)swift_isUniquelyReferenced_nonNull_native();
          if (!(_DWORD)v89 || (unint64_t)(v88 - 1) > *((_QWORD *)v82 + 3) >> 1)
            v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v89, v88, 1, v82);
          v90 = *((_QWORD *)v82 + 2);
          if (!v90)
            goto LABEL_180;
          memmove(v82 + 32, v82 + 48, 16 * v90 - 16);
          v88 = v90 - 1;
          *((_QWORD *)v82 + 2) = v88;
          if (!v88)
            goto LABEL_81;
        }
        v91 = *((double *)v82 + 4) - a12 - v85;
        if (v83 - v85 < v91)
          v91 = v83 - v85;
        if (v137 <= v91)
        {
          if (v91 > a11)
            v91 = a11;
          goto LABEL_87;
        }
LABEL_73:
        v85 = a11 + a12 + v85;
        if (v85 >= v83)
          goto LABEL_156;
      }
LABEL_81:
      v91 = a11;
LABEL_87:
      if ((_DWORD)v28)
        v92 = v134 - v135;
      else
        v92 = v91;
      if ((_DWORD)v28)
        v93 = v91;
      else
        v93 = v134 - v135;
      if ((_DWORD)v28)
        v94 = 0.0;
      else
        v94 = v85;
      if ((_DWORD)v28)
        v95 = v85;
      else
        v95 = 0.0;
      if (v144[0][2])
      {
        v96 = (char *)v144[0][4];
        swift_unknownObjectRetain();
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      }
      else
      {
        v96 = (char *)specialized closure #4 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(v21, v28, &v143);
      }
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
      v98 = v52[2];
      v97 = v52[3];
      if (v98 >= v97 >> 1)
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v97 > 1), v98 + 1, 1, v52);
      v52[2] = v98 + 1;
      v86 = &v52[2 * v98];
      v86[4] = v96;
      v86[5] = &protocol witness table for UIKitFocusableFillerItem;
      v87 = (double *)&v96[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame];
      *v87 = v94;
      v87[1] = v95;
      v87[2] = v92;
      v87[3] = v93;
      swift_unknownObjectRelease();
      v83 = v136;
      goto LABEL_73;
    }
    swift_release();
  }
  if (v44 >= v32)
    goto LABEL_159;
  do
  {
    v142[0] = v73;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(v142, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_bridgeObjectRelease();
    if (v30 > v44)
      v44 = v30;
    if (v44 > v32)
      goto LABEL_179;
    v99 = v142[0];
    v100 = v133 - a14 - v32 - a11;
    v32 = a11 + a12;
    v101 = floor(v100 / (a11 + a12) + 1.0);
    if (v101 <= 0.0)
      v101 = 0.0;
    v102 = v133 - a14 - v32 * v101;
    if (v44 >= v102)
    {
      swift_release();
      goto LABEL_160;
    }
    while (1)
    {
      v105 = *((_QWORD *)v99 + 2);
      if (v105)
      {
        v106 = &v99[16 * v105];
        if (v102 <= *((double *)v106 + 2))
        {
          while (1)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v108 = *((_QWORD *)v99 + 2);
              if (!v108)
                goto LABEL_173;
            }
            else
            {
              v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99);
              v108 = *((_QWORD *)v99 + 2);
              if (!v108)
              {
LABEL_173:
                __break(1u);
                goto LABEL_174;
              }
            }
            *((_QWORD *)v99 + 2) = v108 - 1;
            if (v108 == 1)
              goto LABEL_127;
            v109 = v108 - 2;
            if (v102 > *(double *)&v99[16 * v109 + 32])
            {
              v107 = (double *)&v99[16 * v109 + 40];
              goto LABEL_128;
            }
          }
        }
        v107 = (double *)(v106 + 24);
LABEL_128:
        v110 = v102 - *v107 - a12;
        if (v102 - v44 < v110)
          v110 = v102 - v44;
        if (v137 > v110)
          goto LABEL_116;
        if (v110 > a11)
          v110 = a11;
      }
      else
      {
LABEL_127:
        v110 = a11;
      }
      if ((_DWORD)v28)
        v111 = v134 - v135;
      else
        v111 = v110;
      if ((_DWORD)v28)
        v112 = v110;
      else
        v112 = v134 - v135;
      if ((_DWORD)v28)
        v30 = 0.0;
      else
        v30 = v102 - v110;
      if ((_DWORD)v28)
        v113 = v102 - v110;
      else
        v113 = 0.0;
      v73 = (char *)v144[0];
      if (!v144[0][2])
      {
        v116 = (char *)specialized closure #4 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(v21, v28, &v143);
        goto LABEL_150;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v114 = *((_QWORD *)v73 + 2);
        if (!v114)
          break;
        goto LABEL_148;
      }
      v73 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v73);
      v114 = *((_QWORD *)v73 + 2);
      if (!v114)
        break;
LABEL_148:
      v115 = v114 - 1;
      v116 = *(char **)&v73[16 * v115 + 32];
      *((_QWORD *)v73 + 2) = v115;
      v144[0] = v73;
LABEL_150:
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
      v118 = v52[2];
      v117 = v52[3];
      if (v118 >= v117 >> 1)
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v117 > 1), v118 + 1, 1, v52);
      v52[2] = v118 + 1;
      v103 = &v52[2 * v118];
      v103[4] = v116;
      v103[5] = &protocol witness table for UIKitFocusableFillerItem;
      v104 = (double *)&v116[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame];
      *v104 = v30;
      v104[1] = v113;
      v104[2] = v111;
      v104[3] = v112;
      swift_unknownObjectRelease();
LABEL_116:
      v102 = v102 - v32;
      if (v44 >= v102)
        goto LABEL_159;
    }
    __break(1u);
LABEL_156:
    swift_bridgeObjectRelease();
    v50 = v132;
  }
  while (v44 < v32);
LABEL_159:
  swift_bridgeObjectRelease();
LABEL_160:
  v119 = v144[0];
  v120 = v144[0][2];
  if (v120)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    swift_bridgeObjectRetain();
    v121 = 4;
    do
    {
      v122 = v119[v121];
      swift_unknownObjectRetain();
      v123 = (void *)static UIFocusSystem.focusSystem(for:)();
      if (v123)
      {
        v124 = v123;
        objc_msgSend(v123, sel__focusEnvironmentWillDisappear_, v122);

      }
      swift_unknownObjectRelease();
      v121 += 2;
      --v120;
    }
    while (v120);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v21 + v50) = v52;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v125 = v143;
  v126 = v143[2];
  if (v126)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    v127 = v125 + 4;
    do
    {
      v128 = *v127;
      swift_unknownObjectRetain();
      v129 = (void *)static UIFocusSystem.focusSystem(for:)();
      if (v129)
      {
        v130 = v129;
        objc_msgSend(v129, sel__focusEnvironmentDidAppear_, v128);

      }
      swift_unknownObjectRelease();
      v127 += 2;
      --v126;
    }
    while (v126);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void HostingScrollView.PlatformGroupContainer.queryFillerItems(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  CGRect *v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  uint64_t v28;
  uint64_t v29;
  double x;
  double y;
  double width;
  double height;
  double v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  double v39;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  __int128 v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = MEMORY[0x1E0DEE9D8];
    do
    {
      v56 = *(_OWORD *)(v9 + 16 * v11 + 32);
      v13 = *(double *)(v56
                      + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
      v14 = *(double *)(v56
                      + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                      + 8);
      v15 = *(double *)(v56
                      + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                      + 16);
      v16 = *(double *)(v56
                      + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                      + 24);
      swift_unknownObjectRetain();
      v57.origin.x = v13;
      v57.origin.y = v14;
      v57.size.width = v15;
      v57.size.height = v16;
      v64.origin.x = a1;
      v64.origin.y = a2;
      v64.size.width = a3;
      v64.size.height = a4;
      v58 = CGRectIntersection(v57, v64);
      if (CGRectIsEmpty(v58))
      {
        swift_unknownObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v18 = *(_QWORD *)(v12 + 16);
        v17 = *(_QWORD *)(v12 + 24);
        if (v18 >= v17 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1);
        *(_QWORD *)(v12 + 16) = v18 + 1;
        *(_OWORD *)(v12 + 16 * v18 + 32) = v56;
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v12 + 16);
    if (!v19)
      goto LABEL_64;
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
    v19 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v19)
      goto LABEL_64;
  }
  swift_retain();
  v20 = 32;
  v54 = a3;
  v55 = a4;
  v52 = a1;
  v53 = a2;
  while (1)
  {
    v21 = *(_QWORD *)(v12 + v20);
    v22 = *(unsigned __int8 *)(v21
                             + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_axis);
    v23 = (CGRect *)(v21
                   + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
    v24 = *(double *)(v21
                    + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
    v25 = *(double *)(v21
                    + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                    + 8);
    v26 = *(double *)(v21
                    + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                    + 16);
    v27 = *(double *)(v21
                    + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                    + 24);
    swift_unknownObjectRetain();
    v59.origin.x = a1;
    v59.origin.y = a2;
    v59.size.width = a3;
    v59.size.height = a4;
    v65.origin.x = v24;
    v65.origin.y = v25;
    v65.size.width = v26;
    v65.size.height = v27;
    v60 = CGRectIntersection(v59, v65);
    x = v60.origin.x;
    y = v60.origin.y;
    width = v60.size.width;
    height = v60.size.height;
    v34 = v23->origin.x;
    v35 = v23->origin.y;
    v36 = v23->size.width;
    v37 = v23->size.height;
    v38 = (~*(_QWORD *)&v23->origin.x & 0x7FF0000000000000) == 0
       || (~*(_QWORD *)&v23->origin.y & 0x7FF0000000000000) == 0;
    if (!v38
      && (v48 = CGRectGetWidth(*v23),
          (~*(_QWORD *)&v48 & 0x7FF0000000000000) != 0
       && (v61.origin.x = v34,
           v61.origin.y = v35,
           v61.size.width = v36,
           v61.size.height = v37,
           (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v61) & 0x7FF0000000000000) != 0)))
    {
      if (v22)
        v49 = v37;
      else
        v49 = v36;
      if (v22)
        v34 = v35;
      if (v49 <= 0.0)
        v49 = 0.0;
      v39 = v34 + v49;
      if (v34 > v34 + v49)
      {
        __break(1u);
        return;
      }
    }
    else
    {
      MEMORY[0x1E0C80A78](v28, v29);
      v28 = static Log.internalError(_:)();
      v34 = 0.0;
      v39 = 0.0;
    }
    if ((~*(_QWORD *)&x & 0x7FF0000000000000) != 0 && (~*(_QWORD *)&y & 0x7FF0000000000000) != 0)
    {
      v62.origin.x = x;
      v62.origin.y = y;
      v62.size.width = width;
      v62.size.height = height;
      v50 = CGRectGetWidth(v62);
      if ((~*(_QWORD *)&v50 & 0x7FF0000000000000) != 0)
      {
        v63.origin.x = x;
        v63.origin.y = y;
        v63.size.width = width;
        v63.size.height = height;
        if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v63) & 0x7FF0000000000000) != 0)
          break;
      }
    }
    MEMORY[0x1E0C80A78](v28, v29);
    static Log.internalError(_:)();
    v41 = 0.0;
    v42 = 0.0;
LABEL_27:
    v43 = v42 - v41;
    if (v22)
      v44 = v43;
    else
      v44 = v39 - v34;
    if (v22)
      v45 = v41;
    else
      v45 = v34;
    if (v22)
      v41 = v34;
    v46 = v21 + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_focusableFrame;
    *(double *)v46 = v45;
    *(double *)(v46 + 8) = v41;
    if (v22)
      v47 = v39 - v34;
    else
      v47 = v43;
    *(double *)(v46 + 16) = v44;
    *(double *)(v46 + 24) = v47;
    *(_BYTE *)(v46 + 32) = 0;
    swift_unknownObjectRelease();
    v20 += 16;
    --v19;
    a3 = v54;
    a4 = v55;
    a1 = v52;
    a2 = v53;
    if (!v19)
      goto LABEL_63;
  }
  if (v22)
    v51 = width;
  else
    v51 = height;
  if (v22)
    v41 = x;
  else
    v41 = y;
  if (v51 <= 0.0)
    v51 = 0.0;
  v42 = v41 + v51;
  if (v41 <= v42)
    goto LABEL_27;
  __break(1u);
LABEL_63:
  swift_release();
LABEL_64:
  specialized _arrayForceCast<A, B>(_:)(v12);
  swift_release();
}

void CGRect.range(in:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  char v10;
  double v11;
  double v12;
  CGRect v13;

  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) != 0
    && (~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0
    && (v10 = a1, (~((uint64_t (__cdecl *)(CGRect))CGRectGetWidth)(*(CGRect *)&a3) & 0x7FF0000000000000) != 0)
    && (v13.origin.x = a3,
        v13.origin.y = a4,
        v13.size.width = a5,
        v13.size.height = a6,
        (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v13) & 0x7FF0000000000000) != 0))
  {
    if ((v10 & 1) != 0)
      v11 = a6;
    else
      v11 = a5;
    if ((v10 & 1) != 0)
      v12 = a4;
    else
      v12 = a3;
    if (v11 <= 0.0)
      v11 = 0.0;
    if (v12 > v12 + v11)
      __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a2);
    static Log.internalError(_:)();
  }
}

void HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.searchRect.getter()
{
  uint64_t v0;
  double v1;
  double v2;

  v2 = *(double *)(v0 + 8);
  v1 = *(double *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 64) & 1) == 0)
    goto LABEL_6;
  if (v1 <= *(double *)(v0 + 32))
    v1 = *(double *)(v0 + 32);
  if (v2 > v1)
  {
    __break(1u);
LABEL_6:
    if (*(double *)(v0 + 24) < v2)
      v2 = *(double *)(v0 + 24);
    if (v2 > v1)
      __break(1u);
  }
}

uint64_t closure #1 in HostingScrollView.PlatformGroupContainer.pruneFillerItems()(uint64_t *a1, id a2, _QWORD **a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v12;
  uint64_t v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  uint64_t result;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  v12 = *a1;
  v13 = *a1 + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
  v14 = *(double *)v13;
  v15 = *(double *)(v13 + 8);
  v16 = *(double *)(v13 + 16);
  v17 = *(double *)(v13 + 24);
  objc_msgSend(a2, sel_bounds);
  v28.origin.x = v14;
  v28.origin.y = v15;
  v28.size.width = v16;
  v28.size.height = v17;
  v25 = CGRectIntersection(v24, v28);
  v29.origin.x = v14;
  v29.origin.y = v15;
  v29.size.width = v16;
  v29.size.height = v17;
  if (CGRectEqualToRect(v25, v29))
  {
    v26.origin.x = a4;
    v26.origin.y = a5;
    v26.size.width = a6;
    v26.size.height = a7;
    v30.origin.x = v14;
    v30.origin.y = v15;
    v30.size.width = v16;
    v30.size.height = v17;
    v27 = CGRectIntersection(v26, v30);
    if (CGRectIsEmpty(v27))
      return 1;
  }
  v19 = *a3;
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *a3 = v19;
  }
  v22 = v19[2];
  v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
    *a3 = v19;
  }
  v19[2] = v22 + 1;
  v23 = &v19[2 * v22];
  v23[4] = v12;
  result = 0;
  v23[5] = &protocol witness table for UIKitFocusableFillerItem;
  return result;
}

uint64_t HostingScrollView.PlatformGroupContainer.querySubstitute(for:)(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t result;
  double v36;
  double v37;
  double v38;
  unsigned __int8 v39[8];
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  BOOL v47;
  unsigned __int8 v48[8];
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  BOOL v56;

  v2 = a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_axis];
  objc_msgSend(a1, sel_frame);
  CGRect.range(in:)(v2 ^ 1, v3, v4, v5, v6, v7);
  v38 = (v8 + v9) * 0.5;
  CGRect.range(in:)(v2, v10, *(CGFloat *)&a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame], *(CGFloat *)&a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 8], *(CGFloat *)&a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 16], *(CGFloat *)&a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 24]);
  v12 = v11;
  v14 = v13;
  v15 = HostingScrollView.PlatformGroupContainer.visibleBounds.getter();
  CGRect.range(in:)(v2, v16, v15, v17, v18, v19);
  v21 = v20;
  v23 = v22;
  v24 = HostingScrollView.PlatformGroupContainer.visibleBounds.getter();
  CGRect.range(in:)(v2 ^ 1, v25, v24, v26, v27, v28);
  v30 = v29;
  v32 = v31;
  v33 = (v12 + v14) * 0.5;
  v34 = (v21 + v23) * 0.5;
  v48[0] = v2;
  v49 = v12;
  v50 = v14;
  v51 = v21;
  v52 = v23;
  v53 = v29;
  v54 = v31;
  v55 = v38;
  v56 = v33 >= v34;
  result = HostingScrollView.PlatformGroupContainer.queryDeepestFocusableItem(strategy:)(v48);
  if (!result)
  {
    if (v12 > v21)
      v36 = v12;
    else
      v36 = v21;
    if (v23 >= v14)
      v37 = v14;
    else
      v37 = v23;
    if (v36 >= v37)
      return 0;
    if (v36 > v37)
    {
      __break(1u);
    }
    else
    {
      if ((v14 - v12) * 0.5 > v37 - v36)
        return 0;
      v39[0] = v2;
      v40 = v12;
      v41 = v14;
      v42 = v21;
      v43 = v23;
      v44 = v30;
      v45 = v32;
      v46 = v38;
      v47 = v33 < v34;
      return HostingScrollView.PlatformGroupContainer.queryDeepestFocusableItem(strategy:)(v39);
    }
  }
  return result;
}

uint64_t HostingScrollView.PlatformGroupContainer.queryDeepestFocusableItem(strategy:)(unsigned __int8 *a1)
{
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  unint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t ObjectType;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  id v63;
  void *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  id v73;
  unint64_t v74;
  double v75;
  double v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  int v85;
  double v87;
  double v88;
  char *v89;
  unint64_t v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;

  HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.searchRect.getter();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v11 = MEMORY[0x1E0DEE9D8];
  v12 = v10;
  while (1)
  {
    swift_getObjectType();
    v13 = swift_conformsToProtocol2() ? v12 : 0;
    if (v13)
      break;
    v14 = objc_msgSend(v12, sel_parentFocusEnvironment);
    swift_unknownObjectRelease();
    v12 = v14;
    if (!v14)
      goto LABEL_40;
  }
  swift_getObjectType();
  if (v13 == v10)
  {
    v30 = ViewRendererHost.responderNode.getter();
  }
  else
  {
    ViewRendererHost.responderNode.getter();
    swift_release();
    swift_getObjectType();
    v15 = swift_conformsToProtocol2();
    if (v15)
      v16 = v15;
    else
      v16 = 0;
    if (v15)
      v17 = v10;
    else
      v17 = 0;
    if (!v17)
    {
LABEL_19:
      v22 = v10;
      do
      {
        swift_getObjectType();
        v24 = swift_conformsToProtocol2();
        if (v24)
          v25 = v24;
        else
          v25 = 0;
        if (v24)
          v26 = v22;
        else
          v26 = 0;
        if (v26)
        {
          ObjectType = swift_getObjectType();
          v28 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8);
          swift_unknownObjectRetain();
          v29 = v28(ObjectType, v25);
          if (v29)
          {
            v30 = v29;
            v31 = v29 + 16;
            swift_beginAccess();
            v32 = MEMORY[0x18D760234](v31);
            if (v32)
            {
              v33 = v32;
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              if ((id)v33 == v13)
              {
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                goto LABEL_39;
              }
            }
            else
            {
              swift_unknownObjectRelease();
            }
            swift_release();
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
        v23 = objc_msgSend(v22, sel_parentFocusEnvironment);
        swift_unknownObjectRelease();
        v22 = v23;
      }
      while (v23);
      swift_unknownObjectRelease();
      goto LABEL_38;
    }
    v18 = swift_getObjectType();
    v19 = v10;
    v20 = UIFocusEnvironment.nearestRenderer()();
    if (!v20 || (v21 = v20, swift_unknownObjectRelease(), v13 != v21))
    {

      goto LABEL_19;
    }
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 48))(v18, v16);

  }
  swift_unknownObjectRelease();
  if (!v30)
  {
LABEL_38:
    v11 = MEMORY[0x1E0DEE9D8];
    goto LABEL_40;
  }
LABEL_39:
  v34 = v10;
  v11 = specialized static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(v30, v34, v13 != v10, v3, v5, v7, v9);
  swift_release();

LABEL_40:
  v90 = v11;
  if (v11 >> 62)
  {
LABEL_106:
    swift_bridgeObjectRetain();
    v82 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v82)
      goto LABEL_42;
LABEL_107:
    v35 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_108:
    v89 = v35;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(&v89, (uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (*((_QWORD *)v89 + 2))
    {
      v83 = *((_QWORD *)v89 + 4);
      swift_unknownObjectRetain();
    }
    else
    {
      v83 = 0;
    }
    swift_release();
    return v83;
  }
  if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_107;
LABEL_42:
  v35 = (char *)MEMORY[0x1E0DEE9D8];
  v85 = *a1;
  v87 = v5;
  v88 = v3;
  while (1)
  {
    v36 = v11 >> 62;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v39)
        goto LABEL_113;
      swift_bridgeObjectRetain();
      v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v40)
      {
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
    }
    else if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_103;
    }
    if ((v11 & 0xC000000000000001) != 0)
    {
      v37 = (void *)MEMORY[0x18D75E3BC](0, v11);
      if (!v36)
        goto LABEL_48;
    }
    else
    {
      if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_104;
      v37 = *(void **)(v11 + 32);
      swift_unknownObjectRetain();
      if (!v36)
      {
LABEL_48:
        v38 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_54;
      }
    }
    swift_bridgeObjectRetain();
    v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_54:
    if (!v38)
      goto LABEL_105;
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    v41 = v10;
    if (!objc_msgSend((id)swift_unknownObjectRetain(), sel_canBecomeFocused)
      || (v42 = objc_msgSend(v37, sel_parentFocusEnvironment)) == 0
      || (v43 = objc_msgSend(v42, sel_focusItemContainer),
          swift_unknownObjectRelease(),
          !v43))
    {
      swift_unknownObjectRelease();

      v63 = objc_msgSend(v37, sel_focusItemContainer);
      if (v63)
      {
        v64 = v63;
        objc_msgSend(objc_msgSend(v63, sel_coordinateSpace), sel_convertRect_fromCoordinateSpace_, objc_msgSend(v41, sel_coordinateSpace), v3, v5, v7, v9);
        v66 = v65;
        v68 = v67;
        v70 = v69;
        v72 = v71;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v73 = objc_msgSend(v64, sel_focusItemsInRect_, v66, v68, v70, v72);
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
        v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        specialized Array.append<A>(contentsOf:)(v74);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      goto LABEL_87;
    }
    v44 = objc_msgSend(v43, sel_coordinateSpace);
    objc_msgSend(v37, sel_frame);
    objc_msgSend(v44, sel_convertRect_toCoordinateSpace_, objc_msgSend(v41, sel_coordinateSpace), v45, v46, v47, v48);
    v50 = v49;
    v52 = v51;
    v54 = v53;
    v56 = v55;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((*(_QWORD *)&v50 & 0x7FF0000000000000) == 0x7FF0000000000000)
      goto LABEL_60;
    if ((~*(_QWORD *)&v52 & 0x7FF0000000000000) != 0)
    {
      swift_unknownObjectRetain();
      v91.origin.x = v50;
      v91.origin.y = v52;
      v91.size.width = v54;
      v91.size.height = v56;
      if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetWidth)(v91) & 0x7FF0000000000000) != 0)
      {
        v92.origin.x = v50;
        v92.origin.y = v52;
        v92.size.width = v54;
        v92.size.height = v56;
        if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v92) & 0x7FF0000000000000) != 0)
        {
          if (v85)
            v75 = v56;
          else
            v75 = v54;
          if (v85)
            v62 = v52;
          else
            v62 = v50;
          if (v75 <= 0.0)
            v75 = 0.0;
          v61 = v62 + v75;
          if (v62 > v62 + v75)
            goto LABEL_112;
          goto LABEL_79;
        }
      }
    }
    else
    {
LABEL_60:
      v57 = swift_unknownObjectRetain();
    }
    MEMORY[0x1E0C80A78](v57, v58);
    v59 = static Log.internalError(_:)();
    v61 = 0.0;
    v62 = 0.0;
    if ((*(_QWORD *)&v50 & 0x7FF0000000000000) == 0x7FF0000000000000
      || (~*(_QWORD *)&v52 & 0x7FF0000000000000) == 0)
    {
      goto LABEL_81;
    }
LABEL_79:
    v93.origin.x = v50;
    v93.origin.y = v52;
    v93.size.width = v54;
    v93.size.height = v56;
    if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetWidth)(v93) & 0x7FF0000000000000) != 0)
    {
      v94.origin.x = v50;
      v94.origin.y = v52;
      v94.size.width = v54;
      v94.size.height = v56;
      if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v94) & 0x7FF0000000000000) != 0)
        break;
    }
LABEL_81:
    MEMORY[0x1E0C80A78](v59, v60);
    static Log.internalError(_:)();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v50 = 0.0;
    v76 = 0.0;
LABEL_82:
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
    v78 = *((_QWORD *)v35 + 2);
    v77 = *((_QWORD *)v35 + 3);
    if (v78 >= v77 >> 1)
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 1, 1, v35);
    *((_QWORD *)v35 + 2) = v78 + 1;
    v79 = &v35[40 * v78];
    *((_QWORD *)v79 + 4) = v37;
    *((double *)v79 + 5) = v62;
    *((double *)v79 + 6) = v61;
    *((double *)v79 + 7) = v50;
    *((double *)v79 + 8) = v76;
    swift_unknownObjectRelease_n();
    v5 = v87;
    v3 = v88;
LABEL_87:
    v11 = v90;
    if (v90 >> 62)
    {
      swift_bridgeObjectRetain();
      v81 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v81)
        goto LABEL_108;
    }
    else if (!*(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_108;
    }
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (v85)
    v80 = v54;
  else
    v80 = v56;
  if (!v85)
    v50 = v52;
  if (v80 <= 0.0)
    v80 = 0.0;
  v76 = v50 + v80;
  if (v50 <= v50 + v80)
    goto LABEL_82;
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t closure #1 in HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)@<X0>(unint64_t *a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a1, a2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetWeakValue();
  if (result)
    result = swift_bridgeObjectRetain();
  *a3 = result;
  return result;
}

uint64_t closure #2 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(char **a1, char **a2, char a3, char ***a4, double a5, double a6)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  double v22;
  double v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t result;
  char **v29;
  char **v30;
  char *v31;
  char **v32;

  v11 = *a1;
  type metadata accessor for UIKitFocusableFillerItem();
  if ((UIFocusItem.isFocused.getter() & 1) != 0)
  {
    v13 = *(_QWORD *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame];
    v14 = *(_QWORD *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                        + 8];
    v15 = *(_QWORD *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                        + 16];
    v16 = *(_QWORD *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                        + 24];
    v17 = *a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
      *a2 = v17;
    }
    v20 = *((_QWORD *)v17 + 2);
    v19 = *((_QWORD *)v17 + 3);
    if (v20 >= v19 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v20 + 1;
    v21 = &v17[40 * v20];
    *((_QWORD *)v21 + 4) = v13;
    *((_QWORD *)v21 + 5) = v14;
    *((_QWORD *)v21 + 6) = v15;
    *((_QWORD *)v21 + 7) = v16;
    v21[64] = 0;
    *a2 = v17;
    return 1;
  }
  CGRect.range(in:)(a3 & 1, v12, *(CGFloat *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame], *(CGFloat *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 8], *(CGFloat *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 16], *(CGFloat *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 24]);
  if (v22 <= a5)
    v22 = a5;
  if (v23 > a6)
    v23 = a6;
  if (v22 >= v23)
    return 1;
  if (v22 > v23)
  {
    __break(1u);
    goto LABEL_19;
  }
  a2 = *a4;
  swift_unknownObjectRetain();
  v24 = swift_isUniquelyReferenced_nonNull_native();
  *a4 = a2;
  if ((v24 & 1) == 0)
  {
LABEL_19:
    a2 = (char **)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)(a2[2] + 1), 1, a2);
    *a4 = a2;
  }
  v25 = (unint64_t)a2[2];
  v26 = (unint64_t)a2[3];
  v27 = (char *)(v25 + 1);
  if (v25 >= v26 >> 1)
  {
    v30 = a2;
    v31 = a2[2];
    v32 = (char **)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v25 + 1, 1, v30);
    v25 = (unint64_t)v31;
    a2 = v32;
    *a4 = v32;
  }
  result = 0;
  a2[2] = v27;
  v29 = &a2[2 * v25];
  v29[4] = v11;
  v29[5] = (char *)&protocol witness table for UIKitFocusableFillerItem;
  return result;
}

id specialized closure #4 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(uint64_t a1, char a2, _QWORD **a3)
{
  char v4;
  objc_class *v5;
  _BYTE *v6;
  _OWORD *v7;
  char *v8;
  id v9;
  _QWORD *v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  objc_super v17;

  v4 = a2 & 1;
  v5 = (objc_class *)type metadata accessor for UIKitFocusableFillerItem();
  v6 = objc_allocWithZone(v5);
  swift_unknownObjectWeakInit();
  v7 = &v6[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame];
  *v7 = 0u;
  v7[1] = 0u;
  v8 = &v6[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_focusableFrame];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  swift_unknownObjectWeakAssign();
  v6[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_axis] = v4;
  v17.receiver = v6;
  v17.super_class = v5;
  v9 = objc_msgSendSuper2(&v17, sel_init);
  swift_beginAccess();
  v10 = *a3;
  v11 = v9;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *a3 = v10;
  }
  v14 = v10[2];
  v13 = v10[3];
  if (v14 >= v13 >> 1)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v10);
    *a3 = v10;
  }
  v10[2] = v14 + 1;
  v15 = &v10[2 * v14];
  v15[4] = v11;
  v15[5] = &protocol witness table for UIKitFocusableFillerItem;
  return v11;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FocusableBorder(CGRect *a1, CGRect *a2)
{
  uint64_t result;

  result = CGRectEqualToRect(*a1, *a2);
  if ((_DWORD)result)
    return static EdgeInsets.== infix(_:_:)();
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static FocusableBounds.Key.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableBounds.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableBounds.Key(a1, a2, a3, a4, a5, specialized Array.append<A>(contentsOf:));
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableFillerBounds.Key@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static FocusableFillerBounds.Key.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableFillerBounds.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableBounds.Key(a1, a2, a3, a4, a5, specialized Array.append<A>(contentsOf:));
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableBounds.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v8;

  a2(&v8);
  return a6(v8);
}

uint64_t type metadata accessor for UIKitFocusableFillerItem()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for FocusableBorder(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FocusableBorder(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FocusableBorder()
{
  return &type metadata for FocusableBorder;
}

uint64_t getEnumTagSinglePayload for FocusableFillerBounds(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FocusableFillerBounds(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 105) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FocusableBounds()
{
  return &type metadata for FocusableBounds;
}

uint64_t FocusableBoundsTransform.value.getter(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t Value;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[3];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v2 = BYTE4(a2);
  Value = AGGraphGetValue();
  v17 = *(_QWORD *)Value;
  v18 = *(_OWORD *)(Value + 8);
  v19 = *(_OWORD *)(Value + 24);
  v14[0] = *(_OWORD *)AGGraphGetValue();
  v4 = swift_retain();
  *(double *)&v5 = MEMORY[0x18D755E9C](v4);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v6, v5));
  v7 = (_OWORD *)AGGraphGetValue();
  v8 = v7[1];
  v14[0] = *v7;
  v14[1] = v8;
  v15 = 0uLL;
  *(_QWORD *)&v16 = MEMORY[0x18D75BE3C]();
  *((_QWORD *)&v16 + 1) = v9;
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v14);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableBounds>, (uint64_t)&type metadata for FocusableBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v10 = swift_allocObject();
  v11 = v15;
  v12 = v16;
  *(_OWORD *)(v10 + 16) = xmmword_187BF9830;
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v12;
  *(_BYTE *)(v10 + 64) = v2 & 1;
  swift_release();
  return v10;
}

uint64_t protocol witness for Rule.value.getter in conformance FocusableBoundsTransform@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = 0x100000000;
  if (!*(_BYTE *)(v1 + 12))
    v3 = 0;
  result = FocusableBoundsTransform.value.getter(*(_QWORD *)v1, v3 | *(unsigned int *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t implicit closure #1 in CGRect.range(in:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(37);
  v0._object = (void *)0x8000000187BDEE80;
  v0._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  CGRect.loggable.getter();
  v1._countAndFlagsBits = LoggableRect.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t partial apply for implicit closure #1 in CGRect.range(in:)()
{
  return implicit closure #1 in CGRect.range(in:)();
}

void FocusableFillerBounds.fillerFrames(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  double *v24;
  double *v25;
  uint64_t v26;

  ranges #1 (_:) in FocusableFillerBounds.fillerFrames(in:)(0, v4, a1, a2, a3, a4);
  v10 = v9;
  ranges #1 (_:) in FocusableFillerBounds.fillerFrames(in:)(1, v4, a1, a2, a3, a4);
  v26 = *(_QWORD *)(v10 + 16);
  if (v26)
  {
    v12 = 0;
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v10 + 32;
    v25 = (double *)(v11 + 40);
    v15 = (char *)MEMORY[0x1E0DEE9D8];
    while (v12 < *(_QWORD *)(v10 + 16))
    {
      if (v13)
      {
        v16 = *(double *)(v14 + 16 * v12);
        v17 = *(double *)(v14 + 16 * v12 + 8) - v16;
        swift_bridgeObjectRetain();
        v18 = v25;
        v19 = v13;
        do
        {
          v20 = *(v18 - 1);
          v21 = *v18;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
          v23 = *((_QWORD *)v15 + 2);
          v22 = *((_QWORD *)v15 + 3);
          if (v23 >= v22 >> 1)
            v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v15);
          *((_QWORD *)v15 + 2) = v23 + 1;
          v24 = (double *)&v15[32 * v23];
          v24[4] = v16;
          v24[5] = v20;
          v24[6] = v17;
          v24[7] = v21 - v20;
          v18 += 2;
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
      }
      if (++v12 == v26)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void ranges #1 (_:) in FocusableFillerBounds.fillerFrames(in:)(char a1, CGFloat *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v11 = a1 & 1;
  CGRect.range(in:)(v11, (uint64_t)a2, *a2, a2[1], a2[2], a2[3]);
  v13 = v12;
  v15 = v14;
  CGRect.range(in:)(v11, v16, a3, a4, a5, a6);
  if (v13 > v17)
    v19 = v13;
  else
    v19 = v17;
  if (v18 >= v15)
    v20 = v15;
  else
    v20 = v18;
  v21 = v20 - v19;
  if (v20 - v19 > 0.0)
  {
    v22 = 13;
    if (!(_DWORD)v11)
      v22 = 8;
    v23 = 0.0;
    v24 = 0.0;
    v25 = v21;
    if ((LOBYTE(a2[v22]) & 1) == 0)
    {
      v26 = 10;
      if (!(_DWORD)v11)
        v26 = 5;
      v27 = 9;
      if (!(_DWORD)v11)
        v27 = 4;
      v24 = a2[v26];
      v25 = a2[v27];
    }
    v28 = floor((v21 + v24) / (v24 + v25));
    if (v28 > 1.0)
      v23 = (v21 - v25 * v28) / (v28 + -1.0);
    if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) == 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (v28 <= -9.22337204e18)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v28 >= 9.22337204e18)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v29 = (uint64_t)v28;
    if ((uint64_t)v28 < 0)
    {
LABEL_34:
      __break(1u);
      return;
    }
    if (v29)
    {
      v30 = v25 + v23;
      v37 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (uint64_t)v28, 0);
      v31 = 0;
      v32 = v37;
      while (1)
      {
        v33 = v19 + v30 * (double)v31;
        if (v33 > v25 + v33)
          break;
        v38 = v32;
        v35 = *(_QWORD *)(v32 + 16);
        v34 = *(_QWORD *)(v32 + 24);
        if (v35 >= v34 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1);
          v32 = v38;
        }
        ++v31;
        *(_QWORD *)(v32 + 16) = v35 + 1;
        v36 = v32 + 16 * v35;
        *(double *)(v36 + 32) = v33;
        *(double *)(v36 + 40) = v25 + v33;
        if (v29 == v31)
          return;
      }
      __break(1u);
      goto LABEL_31;
    }
  }
}

double *specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  double *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  uint64_t v23;
  double v24;
  _QWORD *v25;
  double *v26;
  double v27;
  double v28;
  __int128 *v29;
  Swift::Int v30;
  Swift::Int v31;
  __int128 *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  double *v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  double *v107;
  double v108;
  double *v109;
  uint64_t v110;
  char *v111;
  BOOL v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  double *v121;
  double v122;
  double *v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  double *v151;
  uint64_t v152;
  Swift::Int v153;
  Swift::Int v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  int64_t v164;

  v4 = a2 & 1;
  v5 = a1[1];
  result = (double *)_minimumMergeRunLength(_:)(v5);
  if ((uint64_t)result < v5)
  {
    if (v5 >= 0)
      v7 = v5;
    else
      v7 = v5 + 1;
    if (v5 < -1)
    {
LABEL_224:
      result = (double *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v152 = v2;
    v153 = v5;
    v151 = result;
    v148 = a1;
    if (v5 >= 2)
    {
      v8 = v7 >> 1;
      type metadata accessor for UIKitProxyFocusItem();
      v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v9 + 16) = v8;
      v149 = v9;
      v10 = (char *)(v9 + 32);
      goto LABEL_12;
    }
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v10 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v149 = MEMORY[0x1E0DEE9D8];
    if (v5 == 1)
    {
LABEL_12:
      v12 = 0;
      v13 = *a1;
      v150 = *a1 + 32;
      v155 = *a1 - 16;
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      v14 = v153;
      v161 = v10;
      v159 = *a1;
      while (1)
      {
        v16 = v12 + 1;
        if (v12 + 1 < v14)
        {
          v17 = *(_QWORD *)(v13 + 16 * v12);
          v18 = (double *)(*(_QWORD *)(v13 + 16 * v16)
                         + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
          v19 = *v18;
          v20 = v18[1];
          if ((_DWORD)v4)
            v21 = v18[1];
          else
            v21 = *v18;
          v22 = (double *)(v17
                         + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
          v23 = v17
              + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
              + 8;
          if ((_DWORD)v4)
            v22 = (double *)v23;
          v24 = *v22;
          v16 = v12 + 2;
          if (v12 + 2 < v14)
          {
            v25 = (_QWORD *)(v150 + 16 * v12);
            while (1)
            {
              v26 = (double *)(*v25
                             + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
              v27 = (_DWORD)v4 ? v20 : v19;
              v19 = *v26;
              v20 = v26[1];
              v28 = (_DWORD)v4 ? v26[1] : *v26;
              if (v21 < v24 == v28 >= v27)
                break;
              ++v16;
              v25 += 2;
              if (v14 == v16)
              {
                v16 = v14;
                break;
              }
            }
          }
          if (v21 < v24)
          {
            if (v16 < v12)
              goto LABEL_214;
            if (v12 < v16)
            {
              v29 = (__int128 *)(v155 + 16 * v16);
              v30 = v16;
              v31 = v12;
              v32 = (__int128 *)(v13 + 16 * v12);
              do
              {
                if (v31 != --v30)
                {
                  if (!v13)
                    goto LABEL_221;
                  v33 = *v32;
                  *v32 = *v29;
                  *v29 = v33;
                }
                ++v31;
                --v29;
                ++v32;
              }
              while (v31 < v30);
            }
          }
        }
        if (v16 < v14)
        {
          if (__OFSUB__(v16, v12))
            goto LABEL_209;
          if (v16 - v12 < (uint64_t)v151)
          {
            v34 = (char *)v151 + v12;
            if (__OFADD__(v12, v151))
              goto LABEL_215;
            if ((uint64_t)v34 >= v14)
              v34 = (char *)v14;
            if ((uint64_t)v34 < v12)
              goto LABEL_216;
            if ((char *)v16 != v34)
            {
              v35 = v155 + 16 * v16;
              do
              {
                v36 = *(_QWORD *)(v13 + 16 * v16);
                v37 = v35;
                v38 = v12;
                do
                {
                  v39 = (double *)(v36
                                 + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
                  if ((_DWORD)v4)
                    v39 = (double *)(v36
                                   + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                                   + 8);
                  v40 = (double *)(*(_QWORD *)v37
                                 + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
                  if ((_DWORD)v4)
                    ++v40;
                  if (*v39 >= *v40)
                    break;
                  if (!v13)
                    goto LABEL_217;
                  v41 = *(_QWORD *)(v37 + 24);
                  *(_OWORD *)(v37 + 16) = *(_OWORD *)v37;
                  *(_QWORD *)v37 = v36;
                  *(_QWORD *)(v37 + 8) = v41;
                  v37 -= 16;
                  ++v38;
                }
                while (v16 != v38);
                ++v16;
                v35 += 16;
              }
              while ((char *)v16 != v34);
              v16 = (Swift::Int)v34;
            }
          }
        }
        if (v16 < v12)
          goto LABEL_208;
        v154 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
        v43 = *((_QWORD *)v11 + 2);
        v42 = *((_QWORD *)v11 + 3);
        v15 = v43 + 1;
        v10 = v161;
        if (v43 >= v42 >> 1)
        {
          v10 = v161;
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v11);
        }
        *((_QWORD *)v11 + 2) = v15;
        v44 = v11 + 32;
        v45 = &v11[16 * v43 + 32];
        *(_QWORD *)v45 = v12;
        *((_QWORD *)v45 + 1) = v154;
        if (v43)
          break;
        v15 = 1;
LABEL_14:
        v14 = v153;
        v12 = v154;
        if (v154 >= v153)
          goto LABEL_181;
      }
      v160 = v11 + 32;
      v156 = v11;
      while (1)
      {
        v46 = v15 - 1;
        if (v15 >= 4)
        {
          v51 = &v44[16 * v15];
          v52 = *((_QWORD *)v51 - 8);
          v53 = *((_QWORD *)v51 - 7);
          v57 = __OFSUB__(v53, v52);
          v54 = v53 - v52;
          if (v57)
            goto LABEL_197;
          v56 = *((_QWORD *)v51 - 6);
          v55 = *((_QWORD *)v51 - 5);
          v57 = __OFSUB__(v55, v56);
          v49 = v55 - v56;
          v50 = v57;
          if (v57)
            goto LABEL_198;
          v58 = v15 - 2;
          v59 = &v44[16 * v15 - 32];
          v61 = *(_QWORD *)v59;
          v60 = *((_QWORD *)v59 + 1);
          v57 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v57)
            goto LABEL_200;
          v57 = __OFADD__(v49, v62);
          v63 = v49 + v62;
          if (v57)
            goto LABEL_203;
          if (v63 >= v54)
          {
            v81 = &v44[16 * v46];
            v83 = *(_QWORD *)v81;
            v82 = *((_QWORD *)v81 + 1);
            v57 = __OFSUB__(v82, v83);
            v84 = v82 - v83;
            if (v57)
              goto LABEL_207;
            v74 = v49 < v84;
            goto LABEL_99;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v75 = *((_QWORD *)v11 + 4);
            v76 = *((_QWORD *)v11 + 5);
            v57 = __OFSUB__(v76, v75);
            v68 = v76 - v75;
            v69 = v57;
            goto LABEL_93;
          }
          v48 = *((_QWORD *)v11 + 4);
          v47 = *((_QWORD *)v11 + 5);
          v57 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          v50 = v57;
        }
        if ((v50 & 1) != 0)
          goto LABEL_199;
        v58 = v15 - 2;
        v64 = &v44[16 * v15 - 32];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v67 = __OFSUB__(v65, v66);
        v68 = v65 - v66;
        v69 = v67;
        if (v67)
          goto LABEL_202;
        v70 = &v44[16 * v46];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v57 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v57)
          goto LABEL_205;
        if (__OFADD__(v68, v73))
          goto LABEL_206;
        if (v68 + v73 >= v49)
        {
          v74 = v49 < v73;
LABEL_99:
          if (v74)
            v46 = v58;
          goto LABEL_101;
        }
LABEL_93:
        if ((v69 & 1) != 0)
          goto LABEL_201;
        v77 = &v44[16 * v46];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v57 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v57)
          goto LABEL_204;
        if (v80 < v68)
          goto LABEL_14;
LABEL_101:
        if (v46 - 1 >= v15)
        {
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
          goto LABEL_210;
        }
        if (!v13)
          goto LABEL_220;
        v85 = v4;
        v86 = v11;
        v164 = v46 - 1;
        v163 = &v44[16 * v46 - 16];
        v87 = *(_QWORD *)v163;
        v88 = &v44[16 * v46];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v162 = v88;
        v91 = (char *)(v13 + 16 * *(_QWORD *)v163);
        v92 = (char *)(v13 + 16 * *(_QWORD *)v88);
        v93 = v13 + 16 * v89;
        v94 = v92 - v91;
        v95 = v92 - v91 + 15;
        if (v92 - v91 >= 0)
          v95 = v92 - v91;
        v96 = v95 >> 4;
        v97 = v93 - (_QWORD)v92;
        v98 = v93 - (_QWORD)v92 + 15;
        if ((uint64_t)(v93 - (_QWORD)v92) >= 0)
          v98 = v93 - (_QWORD)v92;
        v99 = v98 >> 4;
        if (v96 >= v98 >> 4)
        {
          if (v97 < -15)
            goto LABEL_223;
          if ((unint64_t)v10 >= v93 || v10 != v92)
          {
            v158 = v89;
            v113 = *(_QWORD *)v163;
            v114 = v46;
            v115 = v90;
            memmove(v10, v92, 16 * v99);
            v90 = v115;
            v89 = v158;
            v87 = v113;
            v46 = v114;
            v10 = v161;
          }
          v103 = &v10[16 * v99];
          v13 = v159;
          if (v87 >= v90 || v97 < 16)
          {
            v105 = v10;
            v11 = v86;
            v4 = v85;
            goto LABEL_157;
          }
          v116 = OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
          v117 = (char *)(v155 + 16 * v89);
          v11 = v86;
          v4 = v85;
          while (2)
          {
            v118 = v117 + 16;
            v119 = v92 - 16;
            v120 = *((_QWORD *)v92 - 2);
            v121 = (double *)(*((_QWORD *)v103 - 2) + v116);
            if ((_DWORD)v85)
              ++v121;
            v122 = *v121;
            v123 = (double *)(v120 + v116);
            v124 = v120 + v116 + 8;
            if ((_DWORD)v85)
              v123 = (double *)v124;
            if (v122 >= *v123)
            {
              v119 = v103 - 16;
              if (v118 == v103)
              {
                v125 = v117 >= v103;
                v103 -= 16;
                if (!v125)
                  goto LABEL_151;
              }
              else
              {
                v103 -= 16;
              }
            }
            else if (v118 == v92)
            {
              v125 = v117 >= v92;
              v92 -= 16;
              if (!v125)
                goto LABEL_151;
            }
            else
            {
              v92 -= 16;
            }
            *(_OWORD *)v117 = *(_OWORD *)v119;
LABEL_151:
            if (v91 >= v92 || (v117 -= 16, v10 >= v103))
            {
              v105 = v10;
              goto LABEL_157;
            }
            continue;
          }
        }
        if (v94 < -15)
          goto LABEL_223;
        if (v10 != v91 || (v11 = v86, v10 >= v92))
        {
          v157 = v89;
          v100 = *(_QWORD *)v163;
          v101 = v46;
          v102 = v90;
          memmove(v10, v91, 16 * v96);
          v90 = v102;
          v11 = v156;
          v89 = v157;
          v87 = v100;
          v46 = v101;
          v10 = v161;
        }
        v103 = &v10[16 * v96];
        v4 = v85;
        if (v90 < v89 && v94 >= 16)
        {
          v104 = OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
          v105 = v10;
          while (1)
          {
            v106 = *(_QWORD *)v105;
            v107 = (double *)(*(_QWORD *)v92 + v104);
            if ((_DWORD)v85)
              ++v107;
            v108 = *v107;
            v109 = (double *)(v106 + v104);
            v110 = v106 + v104 + 8;
            if ((_DWORD)v85)
              v109 = (double *)v110;
            if (v108 >= *v109)
              break;
            v111 = v92;
            v112 = v91 == v92;
            v92 += 16;
            if (!v112)
              goto LABEL_124;
LABEL_125:
            v91 += 16;
            if (v105 >= v103 || (unint64_t)v92 >= v93)
              goto LABEL_155;
          }
          v111 = v105;
          v112 = v91 == v105;
          v105 += 16;
          if (v112)
            goto LABEL_125;
LABEL_124:
          *(_OWORD *)v91 = *(_OWORD *)v111;
          goto LABEL_125;
        }
        v105 = v10;
LABEL_155:
        v92 = v91;
        v13 = v159;
LABEL_157:
        v126 = v103 - v105;
        v127 = v103 - v105 + 15;
        if (v126 >= 0)
          v127 = v126;
        if (v126 <= -16)
          goto LABEL_223;
        v128 = v127 >> 4;
        if (v92 != v105 || v92 >= &v105[16 * v128])
        {
          v129 = v89;
          v130 = v87;
          v131 = v46;
          memmove(v92, v105, 16 * v128);
          v89 = v129;
          v87 = v130;
          v46 = v131;
        }
        if (v89 < v87)
          goto LABEL_194;
        if (v46 > *((_QWORD *)v11 + 2))
          goto LABEL_195;
        *(_QWORD *)v163 = v87;
        v44 = v160;
        *(_QWORD *)&v160[16 * v164 + 8] = v89;
        v132 = *((_QWORD *)v11 + 2);
        if (v46 >= (uint64_t)v132)
          goto LABEL_196;
        v15 = v132 - 1;
        memmove(v162, v162 + 16, 16 * (v132 - 1 - v46));
        *((_QWORD *)v11 + 2) = v132 - 1;
        v10 = v161;
        if (v132 <= 2)
          goto LABEL_14;
      }
    }
    v15 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_181:
    if (v15 < 2)
    {
LABEL_192:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v149 + 16) = 0;
      return (double *)swift_bridgeObjectRelease();
    }
    v142 = *v148;
    while (1)
    {
      v143 = v15 - 2;
      if (v15 < 2)
        break;
      if (!v142)
        goto LABEL_222;
      v144 = *(_QWORD *)&v11[16 * v143 + 32];
      v145 = *(_QWORD *)&v11[16 * v15 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v142 + 16 * v144), (char *)(v142 + 16 * *(_QWORD *)&v11[16 * v15 + 16]), v142 + 16 * v145, v10, v4);
      if (v152)
        goto LABEL_192;
      if (v145 < v144)
        goto LABEL_211;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
      if (v143 >= *((_QWORD *)v11 + 2))
        goto LABEL_212;
      v146 = &v11[16 * v143 + 32];
      *(_QWORD *)v146 = v144;
      *((_QWORD *)v146 + 1) = v145;
      v147 = *((_QWORD *)v11 + 2);
      if (v15 > v147)
        goto LABEL_213;
      memmove(&v11[16 * v15 + 16], &v11[16 * v15 + 32], 16 * (v147 - v15));
      *((_QWORD *)v11 + 2) = v147 - 1;
      v15 = v147 - 1;
      if (v147 <= 2)
        goto LABEL_192;
    }
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    __break(1u);
LABEL_223:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_224;
  }
  if (v5 < 0)
    goto LABEL_218;
  if ((unint64_t)v5 >= 2)
  {
    v133 = *a1;
    v134 = -1;
    v135 = 1;
    v136 = *a1;
    do
    {
      v137 = *(_QWORD *)(v133 + 16 * v135);
      v138 = v134;
      v139 = v136;
      do
      {
        result = (double *)(v137
                          + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
        if ((_DWORD)v4)
          result = (double *)(v137
                            + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                            + 8);
        v140 = (double *)(*(_QWORD *)v139
                        + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
        if ((_DWORD)v4)
          ++v140;
        if (*result >= *v140)
          break;
        if (!v133)
          goto LABEL_219;
        v141 = *(_QWORD *)(v139 + 24);
        *(_OWORD *)(v139 + 16) = *(_OWORD *)v139;
        *(_QWORD *)v139 = v137;
        *(_QWORD *)(v139 + 8) = v141;
        v139 -= 16;
        v125 = __CFADD__(v138++, 1);
      }
      while (!v125);
      ++v135;
      v136 += 16;
      --v134;
    }
    while (v135 != v5);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  double v14;
  char v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  __int128 v29;

  result = swift_allocObject();
  v11 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(result + 48) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(result + 64) = v11;
  *(_BYTE *)(result + 80) = *(_BYTE *)(a5 + 64);
  v12 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(result + 16) = *(_OWORD *)a5;
  *(_OWORD *)(result + 32) = v12;
  if (a3 == a2)
    return swift_release();
  v13 = *a4;
  v14 = *(double *)(a5 + 56);
  v15 = *(_BYTE *)(a5 + 64);
  v16 = *a4 + 40 * a3 - 16;
LABEL_5:
  v17 = (double *)(v13 + 40 * a3);
  v18 = v17[1];
  v19 = v17[2];
  v20 = v17[3];
  v21 = v17[4];
  v22 = vabdd_f64((v20 + v21) * 0.5, v14);
  v23 = v16;
  v24 = a1;
  while (1)
  {
    v25 = vabdd_f64((*(double *)v23 + *(double *)(v23 + 8)) * 0.5, v14);
    if ((v15 & 1) != 0)
    {
      v26 = *(double *)(v23 - 16);
      if (v18 != v26)
      {
        if (v18 >= v26)
          goto LABEL_4;
        goto LABEL_14;
      }
LABEL_11:
      if (v22 >= v25)
        goto LABEL_4;
      goto LABEL_14;
    }
    v27 = *(double *)(v23 - 8);
    if (v19 == v27)
      goto LABEL_11;
    if (v27 >= v19)
      goto LABEL_4;
LABEL_14:
    if (!v13)
      break;
    v28 = *(_QWORD *)(v23 + 16);
    v29 = *(_OWORD *)(v23 - 8);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)(v23 - 24);
    *(_OWORD *)(v23 + 32) = v29;
    *(_QWORD *)(v23 + 48) = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 - 24) = v28;
    *(double *)(v23 - 16) = v18;
    *(double *)(v23 - 8) = v19;
    *(double *)v23 = v20;
    *(double *)(v23 + 8) = v21;
    v23 -= 40;
    if (a3 == ++v24)
    {
LABEL_4:
      ++a3;
      v16 += 40;
      if (a3 == a2)
        return swift_release();
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *a1, double *a2, unint64_t a3, double *a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  char v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double *v26;
  double v27;
  double v28;
  __int128 v29;
  __int128 v30;
  double *v31;
  double v32;
  char v33;
  unint64_t v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double *v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  double *v45;
  __int128 v46;
  __int128 v47;
  uint64_t result;
  char *v49;
  double *v50;
  double *v51;

  v10 = swift_allocObject();
  v11 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  *(_BYTE *)(v10 + 80) = *(_BYTE *)(a5 + 64);
  v12 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a5;
  *(_OWORD *)(v10 + 32) = v12;
  v13 = (char *)a2 - (char *)a1;
  v14 = ((char *)a2 - (char *)a1) / 40;
  v15 = a3 - (_QWORD)a2;
  v16 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v51 = a1;
  v50 = a4;
  if (v14 >= v16)
  {
    if (v15 < -39)
      goto LABEL_54;
    if (a4 != a2 || &a2[5 * v16] <= a4)
      memmove(a4, a2, 40 * v16);
    v31 = &a4[5 * v16];
    v49 = (char *)v31;
    v51 = a2;
    if (v15 < 40 || a1 >= a2)
    {
LABEL_53:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v51, (const void **)&v50, &v49);
      swift_release();
      return 1;
    }
    v32 = *(double *)(a5 + 56);
    v33 = *(_BYTE *)(a5 + 64);
    v34 = a3 - 40;
    while (1)
    {
      v35 = (double *)(v34 + 40);
      v36 = vabdd_f64((*(v31 - 2) + *(v31 - 1)) * 0.5, v32);
      v37 = vabdd_f64((*(a2 - 2) + *(a2 - 1)) * 0.5, v32);
      if ((v33 & 1) != 0)
        break;
      v43 = *(v31 - 3);
      v44 = *(a2 - 3);
      if (v43 == v44)
        goto LABEL_43;
      if (v44 < v43)
      {
LABEL_37:
        v40 = a2 - 5;
        if (v35 != a2 || v34 >= (unint64_t)a2)
        {
          v41 = *(_OWORD *)v40;
          v42 = *(_OWORD *)(a2 - 3);
          *(double *)(v34 + 32) = *(a2 - 1);
          *(_OWORD *)v34 = v41;
          *(_OWORD *)(v34 + 16) = v42;
        }
        v51 = a2 - 5;
        if (v31 <= a4)
          goto LABEL_53;
        goto LABEL_49;
      }
LABEL_44:
      v45 = v31 - 5;
      v49 = (char *)(v31 - 5);
      if (v35 < v31 || v34 >= (unint64_t)v31 || v35 != v31)
      {
        v46 = *(_OWORD *)v45;
        v47 = *(_OWORD *)(v31 - 3);
        *(double *)(v34 + 32) = *(v31 - 1);
        *(_OWORD *)v34 = v46;
        *(_OWORD *)(v34 + 16) = v47;
      }
      v40 = a2;
      v31 -= 5;
      if (v45 <= a4)
        goto LABEL_53;
LABEL_49:
      v34 -= 40;
      a2 = v40;
      if (v40 <= a1)
        goto LABEL_53;
    }
    v38 = *(v31 - 4);
    v39 = *(a2 - 4);
    if (v38 != v39)
    {
      if (v38 < v39)
        goto LABEL_37;
      goto LABEL_44;
    }
LABEL_43:
    if (v36 < v37)
      goto LABEL_37;
    goto LABEL_44;
  }
  if (v13 >= -39)
  {
    if (a4 != a1 || &a1[5 * v14] <= a4)
      memmove(a4, a1, 40 * v14);
    v17 = &a4[5 * v14];
    v49 = (char *)v17;
    if (v13 >= 40 && (unint64_t)a2 < a3)
    {
      v18 = *(double *)(a5 + 56);
      v19 = *(_BYTE *)(a5 + 64);
      v20 = a4;
      while (1)
      {
        v21 = vabdd_f64((a2[3] + a2[4]) * 0.5, v18);
        v22 = vabdd_f64((v20[3] + v20[4]) * 0.5, v18);
        if ((v19 & 1) != 0)
          break;
        v27 = a2[2];
        v28 = v20[2];
        if (v27 == v28)
          goto LABEL_16;
        if (v28 < v27)
        {
LABEL_12:
          v25 = a2 + 5;
          v26 = a2;
          if (a1 == a2 && a1 < v25)
            goto LABEL_24;
          goto LABEL_23;
        }
LABEL_17:
        a4 = v20 + 5;
        v26 = v20;
        v25 = a2;
        if (a1 == v20)
        {
          v20 += 5;
          if (a1 < a4)
            goto LABEL_24;
        }
        else
        {
          v20 += 5;
        }
LABEL_23:
        v29 = *(_OWORD *)v26;
        v30 = *((_OWORD *)v26 + 1);
        a1[4] = v26[4];
        *(_OWORD *)a1 = v29;
        *((_OWORD *)a1 + 1) = v30;
LABEL_24:
        a1 += 5;
        if (v20 < v17)
        {
          a2 = v25;
          if ((unint64_t)v25 < a3)
            continue;
        }
        v50 = a4;
        v51 = a1;
        goto LABEL_53;
      }
      v23 = a2[1];
      v24 = v20[1];
      if (v23 != v24)
      {
        if (v23 < v24)
          goto LABEL_12;
        goto LABEL_17;
      }
LABEL_16:
      if (v21 < v22)
        goto LABEL_12;
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_54:
  swift_release();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, char a5)
{
  char *v5;
  char *v7;
  char *v8;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  double *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  double *v33;
  uint64_t v34;
  uint64_t result;
  char *v36;
  char *v37;
  char *v38;

  v5 = __dst;
  v7 = a2;
  v8 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 4;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 4;
  v38 = __src;
  v37 = __dst;
  if (v12 >= v14 >> 4)
  {
    if (v13 >= -15)
    {
      if (__dst != a2 || &a2[16 * v15] <= __dst)
        memmove(__dst, a2, 16 * v15);
      v24 = &v5[16 * v15];
      v36 = v24;
      v38 = v7;
      if (v8 < v7 && v13 >= 16)
      {
        v25 = OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
        v26 = (char *)(a3 - 16);
        v27 = v7;
        while (1)
        {
          v28 = v26 + 16;
          v30 = *((_QWORD *)v27 - 2);
          v27 -= 16;
          v29 = v30;
          v31 = (double *)(*((_QWORD *)v24 - 2) + v25);
          if ((a5 & 1) != 0)
            ++v31;
          v32 = *v31;
          v33 = (double *)(v29 + v25);
          v34 = v29 + v25 + 8;
          if ((a5 & 1) != 0)
            v33 = (double *)v34;
          if (v32 >= *v33)
          {
            v36 = v24 - 16;
            if (v28 < v24 || v26 >= v24 || v28 != v24)
              *(_OWORD *)v26 = *((_OWORD *)v24 - 1);
            v27 = v7;
            v24 -= 16;
            if (v7 <= v8)
              goto LABEL_51;
          }
          else
          {
            if (v28 != v7 || v26 >= v7)
              *(_OWORD *)v26 = *(_OWORD *)v27;
            v38 = v27;
            if (v27 <= v8)
              goto LABEL_51;
          }
          v26 -= 16;
          v7 = v27;
          if (v24 <= v5)
            goto LABEL_51;
        }
      }
      goto LABEL_51;
    }
  }
  else if (v10 >= -15)
  {
    if (__dst != __src || &__src[16 * v12] <= __dst)
      memmove(__dst, __src, 16 * v12);
    v16 = &v5[16 * v12];
    v36 = v16;
    if ((unint64_t)v7 < a3 && v10 >= 16)
    {
      v17 = OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
      do
      {
        v18 = *(_QWORD *)v5;
        v19 = (double *)(*(_QWORD *)v7 + v17);
        if ((a5 & 1) != 0)
          ++v19;
        v20 = *v19;
        v21 = (double *)(v18 + v17);
        v22 = v18 + v17 + 8;
        if ((a5 & 1) != 0)
          v21 = (double *)v22;
        if (v20 >= *v21)
        {
          if (v8 != v5)
            *(_OWORD *)v8 = *(_OWORD *)v5;
          v5 += 16;
          v37 = v5;
          v23 = v7;
        }
        else
        {
          v23 = v7 + 16;
          if (v8 < v7 || v8 >= v23 || v8 != v7)
            *(_OWORD *)v8 = *(_OWORD *)v7;
        }
        v8 += 16;
        if (v5 >= v16)
          break;
        v7 = v23;
      }
      while ((unint64_t)v23 < a3);
      v38 = v8;
    }
LABEL_51:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v38, &v37, &v36);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in HostingScrollView.PlatformGroupContainer.updateFocusScrollBoundaryMetrics(_:for:)()
{
  uint64_t v0;

  return closure #1 in HostingScrollView.PlatformGroupContainer.updateFocusScrollBoundaryMetrics(_:for:)(*(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48), *(_QWORD *)(v0 + 16), *(BOOL **)(v0 + 56), *(BOOL **)(v0 + 64), *(BOOL **)(v0 + 72), *(BOOL **)(v0 + 80));
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, void *a2, _QWORD **a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v8 = result;
  v9 = *(_QWORD *)(result + 16);
  if (v9)
  {
    v16 = 0;
    v17 = MEMORY[0x1E0DEE9D8];
    while (v16 < *(_QWORD *)(v8 + 16))
    {
      v21 = *(_OWORD *)(v8 + 16 * v16 + 32);
      v22 = v21;
      swift_unknownObjectRetain();
      v18 = closure #1 in HostingScrollView.PlatformGroupContainer.pruneFillerItems()((uint64_t *)&v22, a2, a3, a4, a5, a6, a7);
      if (v7)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return v17;
      }
      if ((v18 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v23 = v17;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v17 = v23;
        }
        v20 = *(_QWORD *)(v17 + 16);
        v19 = *(_QWORD *)(v17 + 24);
        if (v20 >= v19 >> 1)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1);
          v17 = v23;
        }
        *(_QWORD *)(v17 + 16) = v20 + 1;
        *(_OWORD *)(v17 + 16 * v20 + 32) = v21;
      }
      else
      {
        result = swift_unknownObjectRelease();
      }
      if (v9 == ++v16)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v17 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v17;
  }
  return result;
}

uint64_t specialized UIKitFocusItemDescription.init(_:)(void *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;

  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  if (dynamic_cast_existential_1_superclass_conditional((uint64_t)a1))
  {
    v3 = v2;
    goto LABEL_19;
  }
  swift_getObjectType();
  v4 = swift_conformsToProtocol2();
  if (v4)
    v5 = v4;
  else
    v5 = 0;
  if (v4)
    v6 = a1;
  else
    v6 = 0;
  if (v6)
  {
    v3 = v5 | 0x4000000000000000;
    goto LABEL_19;
  }
  v7 = swift_conformsToProtocol2();
  if (v7)
    v8 = v7;
  else
    v8 = 0;
  if (v7)
    v9 = a1;
  else
    v9 = 0;
  if (v9)
  {
    v3 = v8 | 0x8000000000000000;
LABEL_19:
    swift_unknownObjectRetain();
    v10._countAndFlagsBits = 60;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    __asm { BR              X10 }
  }
  swift_unknownObjectRetain();
  v11._countAndFlagsBits = 60;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_getObjectType();
  swift_unknownObjectRetain();
  v12._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);

  v14._countAndFlagsBits = 0x3C6E776F6E6B6E55;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 8250;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  _print_unlocked<A, B>(_:_:)();
  v16 = specialized UIKitFocusItemDescription.Category.attributes.getter(a1, 0xC000000000000000);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = (void **)(v16 + 40);
    do
    {
      v19 = (uint64_t)*(v18 - 1);
      v20 = *v18;
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = v19;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 8251;
      v22._object = (void *)0xE200000000000000;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 62;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);

  return 0;
}

{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  Swift::String v12;
  id v13;
  Swift::String v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;

  swift_getObjectType();
  v2 = swift_conformsToProtocol2();
  if (v2)
    v3 = v2;
  else
    v3 = 0;
  if (v2)
    v4 = a1;
  else
    v4 = 0;
  if (v4)
  {
LABEL_24:
    v11 = a1;
    v12._countAndFlagsBits = 60;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    __asm { BR              X10 }
  }
  v5 = swift_conformsToProtocol2();
  if (v5)
    v6 = v5;
  else
    v6 = 0;
  if (v5)
    v7 = a1;
  else
    v7 = 0;
  if (v7)
  {
    v3 = v6 | 0x4000000000000000;
    goto LABEL_24;
  }
  v8 = swift_conformsToProtocol2();
  if (v8)
    v9 = v8;
  else
    v9 = 0;
  if (v8)
    v10 = a1;
  else
    v10 = 0;
  if (v10)
  {
    v3 = v9 | 0x8000000000000000;
    goto LABEL_24;
  }
  v13 = a1;
  v14._countAndFlagsBits = 60;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_getObjectType();
  v15 = a1;
  v16._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);

  v18._countAndFlagsBits = 0x3C6E776F6E6B6E55;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 8250;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  _print_unlocked<A, B>(_:_:)();
  specialized UIKitFocusItemDescription.Category.attributes.getter((uint64_t)a1, 0xC000000000000000);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = (void **)(v20 + 40);
    do
    {
      v23 = (uint64_t)*(v22 - 1);
      v24 = *v22;
      swift_bridgeObjectRetain();
      v25._countAndFlagsBits = v23;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 8251;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v22 += 2;
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 62;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);

  return 0;
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  Swift::String v11;
  id v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;

  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  if (dynamic_cast_existential_1_superclass_conditional((uint64_t)a1))
  {
    v3 = v2;
    goto LABEL_19;
  }
  swift_getObjectType();
  v4 = swift_conformsToProtocol2();
  if (v4)
    v5 = v4;
  else
    v5 = 0;
  if (v4)
    v6 = a1;
  else
    v6 = 0;
  if (v6)
  {
    v3 = v5 | 0x4000000000000000;
    goto LABEL_19;
  }
  v7 = swift_conformsToProtocol2();
  if (v7)
    v8 = v7;
  else
    v8 = 0;
  if (v7)
    v9 = a1;
  else
    v9 = 0;
  if (v9)
  {
    v3 = v8 | 0x8000000000000000;
LABEL_19:
    v10 = a1;
    v11._countAndFlagsBits = 60;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    __asm { BR              X10 }
  }
  v12 = a1;
  v13._countAndFlagsBits = 60;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_getObjectType();
  v14 = a1;
  v15._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);

  v17._countAndFlagsBits = 0x3C6E776F6E6B6E55;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 8250;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  _print_unlocked<A, B>(_:_:)();
  specialized UIKitFocusItemDescription.Category.attributes.getter((uint64_t)a1, 0xC000000000000000);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = (void **)(v19 + 40);
    do
    {
      v22 = (uint64_t)*(v21 - 1);
      v23 = *v21;
      swift_bridgeObjectRetain();
      v24._countAndFlagsBits = v22;
      v24._object = v23;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 8251;
      v25._object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v21 += 2;
      --v20;
    }
    while (v20);
  }
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 62;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);

  return 0;
}

uint64_t dynamic_cast_existential_1_superclass_conditional(uint64_t a1)
{
  uint64_t result;

  result = swift_dynamicCastMetatype();
  if (result)
  {
    if (swift_conformsToProtocol2())
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1873D4E40()
{
  return swift_deallocObject();
}

uint64_t sub_1873D4E50()
{
  return swift_deallocObject();
}

uint64_t sub_1873D4E60()
{
  return swift_deallocObject();
}

uint64_t sub_1873D4E70()
{
  return swift_deallocObject();
}

void specialized HostingScrollView.PlatformGroupContainer.didUpdateFocus(in:with:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  id v17;
  id v18;
  id v19;
  BOOL v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint8_t *v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v37 - v11;
  v13 = OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem;
  if (*(_QWORD *)&v2[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem]
    || (v22 = objc_msgSend(a1, sel_previouslyFocusedItem, v10)) != 0
    && ((v23 = v22, swift_getObjectType(), swift_unknownObjectRelease(), swift_conformsToProtocol2())
      ? (v24 = v23)
      : (v24 = 0),
        v24))
  {
    static Log.focus.getter();
    v14 = type metadata accessor for Logger();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v16(v7, 1, v14) == 1)
    {
      outlined destroy of Logger?((uint64_t)v7);
LABEL_25:
      *(_QWORD *)&v2[v13] = 0;
      swift_unknownObjectRelease();
      HostingScrollView.PlatformGroupContainer.pruneFillerItems()();
      return;
    }
    v17 = objc_msgSend(a1, sel_nextFocusedItem);
    v18 = *(id *)&v2[v13];
    if (v17)
    {
      v19 = v17;
      swift_unknownObjectRelease();
      if (v18)
        v20 = v19 == v18;
      else
        v20 = 0;
      if (!v20)
        goto LABEL_18;
    }
    else if (v18)
    {
LABEL_18:
      v21 = 1;
LABEL_19:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v12, v21, 1, v14);
      v25 = *(void (**)(char *, uint64_t))(v15 + 8);
      v25(v7, v14);
      if (v16(v12, 1, v14) == 1)
      {
        outlined destroy of Logger?((uint64_t)v12);
      }
      else
      {
        v26 = v2;
        v27 = Logger.logObject.getter();
        v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          v40 = v27;
          v29 = (uint8_t *)swift_slowAlloc();
          v39 = swift_slowAlloc();
          v42 = v39;
          v38 = v29;
          *(_DWORD *)v29 = 136315138;
          v37 = v29 + 4;
          v30 = v26;
          v31 = specialized UIKitFocusItemDescription.init(_:)();
          v33 = v32;

          v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          v27 = v40;
          v34 = v28;
          v35 = v38;
          _os_log_impl(&dword_186E48000, v40, v34, "filler substituted in: %s", v38, 0xCu);
          v36 = v39;
          swift_arrayDestroy();
          MEMORY[0x18D760108](v36, -1, -1);
          MEMORY[0x18D760108](v35, -1, -1);
        }
        else
        {

        }
        v25(v12, v14);
      }
      goto LABEL_25;
    }
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v7, v14);
    v21 = 0;
    goto LABEL_19;
  }
}

uint64_t specialized UIKitFocusableFillerItem.didUpdateFocus(in:with:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.focus.getter();
  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of Logger?((uint64_t)v4);
  v8 = v0;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20 = v18;
    *(_DWORD *)v11 = 136315138;
    v17 = v11 + 4;
    v12 = v8;
    v13 = specialized UIKitFocusItemDescription.init(_:)(v12);
    v15 = v14;

    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_186E48000, v9, v10, "focus changed for: %s", v11, 0xCu);
    v16 = v18;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v16, -1, -1);
    MEMORY[0x18D760108](v11, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
}

void partial apply for closure #1 in HostingScrollView.PlatformGroupContainer.focusItems(in:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in HostingScrollView.PlatformGroupContainer.focusItems(in:)(*(void **)(v1 + 16), a1, *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48));
}

uint64_t partial apply for closure #1 in HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)(&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, a1);
}

void type metadata accessor for [FocusableBounds]?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v5 = type metadata accessor for Optional();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t partial apply for closure #1 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)(&lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, a1);
}

void type metadata accessor for ClosedRange<CGFloat>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ClosedRange<CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    v0 = type metadata accessor for ClosedRange();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<CGFloat>);
  }
}

unint64_t type metadata accessor for UIKitProxyFocusItem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIKitProxyFocusItem;
  if (!lazy cache variable for type metadata for UIKitProxyFocusItem)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
  }
  return result;
}

uint64_t initializeWithCopy for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate()
{
  return &type metadata for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate;
}

ValueMetadata *type metadata accessor for FocusableBoundsTransform()
{
  return &type metadata for FocusableBoundsTransform;
}

ValueMetadata *type metadata accessor for FocusableBounds.Key()
{
  return &type metadata for FocusableBounds.Key;
}

ValueMetadata *type metadata accessor for FocusableFillerBounds.Key()
{
  return &type metadata for FocusableFillerBounds.Key;
}

ValueMetadata *type metadata accessor for FocusableFillerBounds.Metrics()
{
  return &type metadata for FocusableFillerBounds.Metrics;
}

uint64_t getEnumTagSinglePayload for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[65])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy()
{
  return &unk_1E1AC44D0;
}

uint64_t storeEnumTagSinglePayload for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1873D576C + 4 * byte_187C2A939[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1873D57A0 + 4 * byte_187C2A934[v4]))();
}

uint64_t sub_1873D57A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873D57A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1873D57B0);
  return result;
}

uint64_t sub_1873D57BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1873D57C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1873D57C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873D57D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder()
{
  return &unk_1E1AC4440;
}

unint64_t lazy protocol witness table accessor for type HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder and conformance HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder and conformance HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder;
  if (!lazy protocol witness table cache variable for type HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder and conformance HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder, &unk_1E1AC4440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder and conformance HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder);
  }
  return result;
}

void CustomHoverEffect.hoverEffect<A>(in:isEnabled:body:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1873D5848(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void static ScenePadding.minimum.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static ScenePadding.navigationBar.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL static ScenePadding.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t View.scenePadding(_:)()
{
  return View.scenePadding(_:edges:)();
}

uint64_t View.scenePadding(_:edges:)()
{
  EdgeInsets.init(_all:)();
  EdgeInsets.in(_:)();
  return View.padding(_:)();
}

const char *PepperUICoreFeatureFlag.domain.getter()
{
  return "PepperUICore";
}

const char *PepperUICoreFeatureFlag.feature.getter()
{
  return "new_system_margins";
}

uint64_t static PepperUICoreFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void PepperUICoreFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int PepperUICoreFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type PepperUICoreFeatureFlag and conformance PepperUICoreFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PepperUICoreFeatureFlag and conformance PepperUICoreFeatureFlag;
  if (!lazy protocol witness table cache variable for type PepperUICoreFeatureFlag and conformance PepperUICoreFeatureFlag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PepperUICoreFeatureFlag, &type metadata for PepperUICoreFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PepperUICoreFeatureFlag and conformance PepperUICoreFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance PepperUICoreFeatureFlag()
{
  return "PepperUICore";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance PepperUICoreFeatureFlag()
{
  return "new_system_margins";
}

ValueMetadata *type metadata accessor for ScenePadding()
{
  return &type metadata for ScenePadding;
}

ValueMetadata *type metadata accessor for ScenePaddingAlignment()
{
  return &type metadata for ScenePaddingAlignment;
}

uint64_t storeEnumTagSinglePayload for PepperUICoreFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1873D5A48 + 4 * byte_187C2ABA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1873D5A68 + 4 * byte_187C2ABA5[v4]))();
}

_BYTE *sub_1873D5A48(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1873D5A68(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1873D5A70(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1873D5A78(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1873D5A80(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1873D5A88(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PepperUICoreFeatureFlag()
{
  return &type metadata for PepperUICoreFeatureFlag;
}

uint64_t sub_1873D5AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = MEMORY[0x1E0CE2BC0];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void static ScenePaddingAlignment.statusBarMargin.getter()
{
  static ScenePadding.navigationBar.getter();
}

void CustomHoverEffect.overlay<A, B>(alignment:content:effect:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void CustomHoverEffect.background<A>(alignment:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CustomHoverEffect.background<A, B>(alignment:content:effect:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

uint64_t sub_1873D5B5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1873D5B64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void CustomHoverEffect.overlay<A>(alignment:content:)()
{
  CustomHoverEffect.background<A>(alignment:content:)();
}

void static OpenImmersiveSpaceAction.Result.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void OpenImmersiveSpaceAction.Result.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void OpenImmersiveSpaceAction.Result.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t OpenImmersiveSpaceAction.callAsFunction(id:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t OpenImmersiveSpaceAction.callAsFunction<A>(value:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t OpenImmersiveSpaceAction.callAsFunction<A>(id:value:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

void EnvironmentValues.openImmersiveSpace.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type OpenImmersiveSpaceAction.Result and conformance OpenImmersiveSpaceAction.Result()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpenImmersiveSpaceAction.Result and conformance OpenImmersiveSpaceAction.Result;
  if (!lazy protocol witness table cache variable for type OpenImmersiveSpaceAction.Result and conformance OpenImmersiveSpaceAction.Result)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OpenImmersiveSpaceAction.Result, &type metadata for OpenImmersiveSpaceAction.Result);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenImmersiveSpaceAction.Result and conformance OpenImmersiveSpaceAction.Result);
  }
  return result;
}

void sub_1873D5D2C()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1873D5D50()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for OpenImmersiveSpaceAction()
{
  return &type metadata for OpenImmersiveSpaceAction;
}

uint64_t storeEnumTagSinglePayload for OpenImmersiveSpaceAction.Result(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1873D5DBC + 4 * byte_187C2ACF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1873D5DF0 + 4 * asc_187C2ACF0[v4]))();
}

uint64_t sub_1873D5DF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873D5DF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1873D5E00);
  return result;
}

uint64_t sub_1873D5E0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1873D5E14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1873D5E18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873D5E20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OpenImmersiveSpaceAction.Result()
{
  return &type metadata for OpenImmersiveSpaceAction.Result;
}

uint64_t View.accessibilityRespondsToUserInteraction(_:isEnabled:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;

  v10 = type metadata accessor for ModifiedContent();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v16 - v13;
  if ((a2 & 1) == 0)
    return View.accessibility()(a3, a4);
  if ((a1 & 1) != 0)
  {
    v17 = 21;
    View.accessibilityAddTraits(_:)(&v17, a3, a4);
  }
  else
  {
    v18 = 21;
    View.accessibilityRemoveTraits(_:)(&v18, a3, a4);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, v10);
}

uint64_t ModifiedContent<>.accessibilityRespondsToUserInteraction(_:isEnabled:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v6;
  __int128 v8;

  v6 = 0uLL;
  if ((a2 & 1) != 0)
  {
    if ((a1 & 1) != 0)
      AccessibilityNullableOptionSet<>.init(adding:)();
    else
      AccessibilityNullableOptionSet<>.init(removing:)();
    v6 = v8;
  }
  v8 = v6;
  return ModifiedContent<>.accessibilityTraits(_:)(&v8, a3, a4);
}

void TupleWidget.init()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t TupleWidget.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t TupleWidget.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for TupleWidgetConfiguration(0, *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v4, v6);
}

uint64_t type metadata accessor for TupleWidgetConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleWidgetConfiguration);
}

void protocol witness for Widget.init() in conformance TupleWidget<A>()
{
  TupleWidget.init()();
}

void TupleWidgetConfiguration.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized TupleWidgetConfiguration.body.getter(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t static TupleWidgetConfiguration._makeWidgetConfiguration(widget:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t List;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int128 *, _QWORD);
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  _QWORD v47[2];
  int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v11 = a2[5];
  v10 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  lazy protocol witness table accessor for type WidgetDescriptor and conformance WidgetDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v13 = v47[0];
  LODWORD(v47[0]) = v6;
  v14 = v13;
  v47[1] = v7;
  v48 = v8;
  v49 = v9;
  v50 = *(_OWORD *)(a2 + 3);
  v51 = v11;
  v52 = v10;
  v53 = v12;
  v54 = 0;
  v55 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = (__int128 *)(v14 + 40);
    v17 = v10;
    do
    {
      v18 = *v16;
      v16 = (__int128 *)((char *)v16 + 24);
      v54 = AGTupleElementOffset();
      v46 = v18;
      List = type metadata accessor for TupleWidgetConfiguration.MakeList(0, a3, v19, v20);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v47, List, (uint64_t)&protocol witness table for TupleWidgetConfiguration<A>.MakeList);
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v22 = v55;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x1E0DEE9D8];
    v17 = v10;
  }
  v23 = *(_QWORD *)(v22 + 16);
  v24 = MEMORY[0x1E0DEE9D8];
  if (v23)
  {
    *(_QWORD *)&v46 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
    v24 = v46;
    v25 = (_DWORD *)(v22 + 40);
    do
    {
      v26 = *((_QWORD *)v25 - 1);
      v27 = *v25;
      *(_QWORD *)&v46 = v24;
      v29 = *(_QWORD *)(v24 + 16);
      v28 = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
        v24 = v46;
      }
      *(_QWORD *)(v24 + 16) = v29 + 1;
      v30 = v24 + 16 * v29;
      *(_QWORD *)(v30 + 32) = v26;
      *(_DWORD *)(v30 + 40) = v27;
      v25 += 4;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
  }
  PreferencesOutputs.init()();
  v43 = v24;
  v44 = v46;
  v45 = DWORD2(v46);
  v42 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v31 = MEMORY[0x1E0CE6550];
    v32 = MEMORY[0x1E0CE6548];
    do
    {
      v33 = (void (*)(__int128 *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v35 = *v34;
      v36 = v34[1];
      v33(&v46, 0);
      v37 = v42;
      *(_QWORD *)&v46 = v17;
      swift_bridgeObjectRetain();
      v38 = PreferenceKeys.endIndex.getter();
      if (v42 < 0 || v42 >= v38)
        __break(1u);
      ++v42;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 16))(&v43, v31, v32, v35, v36);
    }
    while (v37 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  v39 = v45;
  *(_QWORD *)a4 = v44;
  *(_DWORD *)(a4 + 8) = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t TupleWidgetConfiguration.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  int v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE v31[4];
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v5 = v4;
  LODWORD(v34) = *(_DWORD *)v4;
  type metadata accessor for TupleWidgetConfiguration(255, *(_QWORD *)(a2 + 16), a3, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  v8 = *(_DWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_QWORD *)(v4 + 48);
  v11 = *(_QWORD *)(v4 + 56);
  v12 = *(_DWORD *)(v4 + 64);
  v34 = *(_QWORD *)(v4 + 8);
  v35 = v8;
  v36 = v9;
  v37 = *(_OWORD *)(v4 + 32);
  v38 = v10;
  v39 = v11;
  v40 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DynamicPropertyCache.fields(of:)();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3);
  _GraphValue.init(_:)();
  v14 = type metadata accessor for WidgetBodyAccessor(0, a3, a4, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetBodyAccessor<A>, v14);
  BodyAccessor.makeBody(container:inputs:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = v34;
  LODWORD(v25) = v35;
  v26 = v9;
  v27 = v37;
  v28 = v10;
  v29 = v11;
  v30 = v40;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v32, v31, &v24, AssociatedTypeWitness, AssociatedConformanceWitness);
  v17 = v32;
  v18 = v33;
  v19 = *(char **)(v4 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
  v21 = *((_QWORD *)v19 + 2);
  v20 = *((_QWORD *)v19 + 3);
  if (v21 >= v20 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v19);
  *((_QWORD *)v19 + 2) = v21 + 1;
  v22 = &v19[16 * v21];
  *((_QWORD *)v22 + 4) = v17;
  *((_DWORD *)v22 + 10) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)(v5 + 80) = v19;
  return result;
}

uint64_t protocol witness for WidgetTypeVisitor.visit<A>(type:) in conformance TupleWidgetConfiguration<A>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleWidgetConfiguration.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void protocol witness for WidgetConfiguration.body.getter in conformance TupleWidgetConfiguration<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized TupleWidgetConfiguration.body.getter(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance TupleWidgetConfiguration<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleWidgetConfiguration._makeWidgetConfiguration(widget:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

void specialized TupleWidgetConfiguration.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TupleWidgetConfiguration(0, a1, a3, a4);
  specialized WidgetConfiguration.widgetConfigurationBodyError()();
}

unint64_t lazy protocol witness table accessor for type WidgetDescriptor and conformance WidgetDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor;
  if (!lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetDescriptor, &type metadata for WidgetDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor;
  if (!lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetDescriptor, &type metadata for WidgetDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor);
  }
  return result;
}

uint64_t type metadata accessor for TupleWidgetConfiguration.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleWidgetConfiguration.MakeList);
}

uint64_t associated type witness table accessor for Widget.Body : WidgetConfiguration in TupleWidget<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for TupleWidget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleWidget);
}

uint64_t getEnumTagSinglePayload for TupleWidget(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1873D6864 + 4 * byte_187C2ADA0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TupleWidget(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **sub_1873D6A64()
{
  return &protocol witness table for TupleWidgetConfiguration<A>;
}

uint64_t destroy for TupleWidgetConfiguration.MakeList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleWidgetConfiguration.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleWidgetConfiguration.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TupleWidgetConfiguration.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleWidgetConfiguration.MakeList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleWidgetConfiguration.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t MapKitGraphInputs.environment.getter()
{
  _GraphInputs.environment.getter();
  return _GraphValue.init(_:)();
}

uint64_t key path getter for MapKitGraphInputs.environment : MapKitGraphInputs@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  v4 = *a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.environment.getter();
  _GraphValue.init(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t key path setter for MapKitGraphInputs.environment : MapKitGraphInputs()
{
  type metadata accessor for _GraphValue<EnvironmentValues>();
  _GraphValue.value.getter();
  return _GraphInputs.environment.setter();
}

uint64_t MapKitGraphInputs.environment.setter()
{
  type metadata accessor for _GraphValue<EnvironmentValues>();
  _GraphValue.value.getter();
  return _GraphInputs.environment.setter();
}

void type metadata accessor for _GraphValue<EnvironmentValues>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<EnvironmentValues>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<EnvironmentValues>);
  }
}

uint64_t (*MapKitGraphInputs.environment.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  _GraphInputs.environment.getter();
  _GraphValue.init(_:)();
  return MapKitGraphInputs.environment.modify;
}

uint64_t MapKitGraphInputs.environment.modify()
{
  type metadata accessor for _GraphValue<EnvironmentValues>();
  _GraphValue.value.getter();
  return _GraphInputs.environment.setter();
}

uint64_t destroy for MapKitGraphInputs()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MapKitGraphInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapKitGraphInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MapKitGraphInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MapKitGraphInputs()
{
  return &type metadata for MapKitGraphInputs;
}

uint64_t AdaptiveStack.init(axis:alignment:spacing:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  char v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  if ((v7 & 1) != 0)
    lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
  else
    lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout();
  AnyLayout.init<A>(_:)();
  v8 = swift_retain();
  a6(v8);
  type metadata accessor for _LayoutRoot<AnyLayout>();
  lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>((unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, MEMORY[0x1E0CE14B8]);
  _VariadicView.Tree.init(root:content:)();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout;
  if (!lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1940], MEMORY[0x1E0CE1948]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout);
  }
  return result;
}

void type metadata accessor for _LayoutRoot<AnyLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _LayoutRoot<AnyLayout>)
  {
    lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout();
    v0 = type metadata accessor for _LayoutRoot();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<AnyLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout;
  if (!lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7BB8], MEMORY[0x1E0CE7BC8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout;
  if (!lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE17D0], MEMORY[0x1E0CE17D8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout);
  }
  return result;
}

uint64_t type metadata completion function for AdaptiveStack()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for _LayoutRoot<AnyLayout>();
  lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>((unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, MEMORY[0x1E0CE14B8]);
  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AdaptiveStack(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1873D7550 + 4 * byte_187C2AEA8[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AdaptiveStack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for AdaptiveStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AdaptiveStack);
}

_UNKNOWN **base witness table accessor for View in AdaptiveStack<A>()
{
  return &protocol witness table for AdaptiveStack<A>;
}

uint64_t static AdaptiveStack._makeView(view:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 20);
  LODWORD(v18) = *a1;
  type metadata accessor for AdaptiveStack(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  type metadata accessor for _LayoutRoot<AnyLayout>();
  lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>((unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, MEMORY[0x1E0CE14B8]);
  v10 = type metadata accessor for _VariadicView.Tree();
  v11 = a2[3];
  v12 = a2[4];
  v15 = *(_OWORD *)(a2 + 7);
  v16 = *(_OWORD *)(a2 + 5);
  v13 = a2[9];
  _GraphValue.subscript.getter();
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v11;
  v22 = v12;
  v23 = v16;
  v24 = v15;
  v25 = v13;
  v26 = v9;
  v17[0] = lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>((unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, MEMORY[0x1E0CE14C0]);
  v17[1] = a4;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v10, v17);
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #1 in static AdaptiveStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v8[2] = type metadata accessor for AdaptiveStack(0, a2, a3, a4);
  type metadata accessor for _LayoutRoot<AnyLayout>();
  lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>((unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, MEMORY[0x1E0CE14B8]);
  v9 = type metadata accessor for _VariadicView.Tree();
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v9, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v10;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AdaptiveStack<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static AdaptiveStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AdaptiveStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptiveStack<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AdaptiveStack<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptiveStack<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance AdaptiveStack<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptiveStack<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t partial apply for closure #1 in static AdaptiveStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static AdaptiveStack._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _LayoutRoot<AnyLayout>();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

SwiftUI::TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.init()()
{
  _QWORD *v0;
  SwiftUI::TableColumnCustomizationBehavior result;

  *v0 = 0;
  return result;
}

void static TableColumnCustomizationBehavior.all.getter(_QWORD *a1@<X8>)
{
  *a1 = 7;
}

void static TableColumnCustomizationBehavior.reorder.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static TableColumnCustomizationBehavior.resize.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static TableColumnCustomizationBehavior.visibility.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

Swift::Bool __swiftcall TableColumnCustomizationBehavior.contains(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  _QWORD *v1;

  return (*(_QWORD *)a1.guts.rawValue & ~*v1) == 0;
}

SwiftUI::TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.union(_:)(SwiftUI::TableColumnCustomizationBehavior result)
{
  _QWORD *v1;
  _QWORD *v2;

  *v1 = *v2 | *(_QWORD *)result.guts.rawValue;
  return result;
}

SwiftUI::TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.intersection(_:)(SwiftUI::TableColumnCustomizationBehavior result)
{
  _QWORD *v1;
  _QWORD *v2;

  *v1 = *v2 & *(_QWORD *)result.guts.rawValue;
  return result;
}

SwiftUI::TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.symmetricDifference(_:)(SwiftUI::TableColumnCustomizationBehavior result)
{
  _QWORD *v1;
  _QWORD *v2;

  *v1 = *v2 ^ *(_QWORD *)result.guts.rawValue;
  return result;
}

Swift::tuple_inserted_Bool_memberAfterInsert_SwiftUI_TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.insert(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Bool v5;
  Swift::tuple_inserted_Bool_memberAfterInsert_SwiftUI_TableColumnCustomizationBehavior result;

  v3 = *v1;
  v4 = *v2 & *v1;
  if (v4 != *v1)
    *v2 |= v3;
  *(_QWORD *)a1.guts.rawValue = v3;
  v5 = v4 != v3;
  result.memberAfterInsert.guts.rawValue = (Swift::Int)v1;
  result.inserted = v5;
  return result;
}

SwiftUI::TableColumnCustomizationBehavior_optional __swiftcall TableColumnCustomizationBehavior.remove(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  SwiftUI::TableColumnCustomizationBehavior_optional result;

  v3 = *v2 & *(_QWORD *)a1.guts.rawValue;
  if (v3)
    *v2 &= ~*(_QWORD *)a1.guts.rawValue;
  *(_QWORD *)v1 = v3;
  *(_BYTE *)(v1 + 8) = v3 == 0;
  result.value = a1;
  return result;
}

SwiftUI::TableColumnCustomizationBehavior_optional __swiftcall TableColumnCustomizationBehavior.update(with:)(SwiftUI::TableColumnCustomizationBehavior with)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  SwiftUI::TableColumnCustomizationBehavior_optional result;

  v3 = *(_QWORD *)with.guts.rawValue;
  v4 = *v2;
  *v2 |= *(_QWORD *)with.guts.rawValue;
  v5 = v4 & v3;
  *(_QWORD *)v1 = v5;
  *(_BYTE *)(v1 + 8) = v5 == 0;
  result.value = with;
  return result;
}

Swift::Void __swiftcall TableColumnCustomizationBehavior.formUnion(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  _QWORD *v1;

  *v1 |= *(_QWORD *)a1.guts.rawValue;
}

Swift::Void __swiftcall TableColumnCustomizationBehavior.formIntersection(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  _QWORD *v1;

  *v1 &= *(_QWORD *)a1.guts.rawValue;
}

Swift::Void __swiftcall TableColumnCustomizationBehavior.formSymmetricDifference(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  _QWORD *v1;

  *v1 ^= *(_QWORD *)a1.guts.rawValue;
}

BOOL static TableColumnCustomizationBehavior.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void TableColumnContent.defaultVisibility(_:)(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = a1;
  TableColumnContent.environment<A>(key:value:)((uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&v3, a2, a3);
}

void TableColumnContent.customizationID(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v4[4];
  char v5;

  v4[0] = a1;
  v4[1] = a2;
  v4[2] = 0;
  v4[3] = 0;
  v5 = 0;
  TableColumnContent.environment<A>(key:value:)((uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)v4, a3, a4);
}

void TableColumnContent.disabledCustomizationBehavior(_:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  TableColumnContent.environment<A>(key:value:)((uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&v3, a2, a3);
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationBehavior, &type metadata for TableColumnCustomizationBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationBehavior, &type metadata for TableColumnCustomizationBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationBehavior()
{
  return &type metadata for TableColumnCustomizationBehavior;
}

void sub_1873D7E18()
{
  get_witness_table_7SwiftUI18TableColumnContentRzlAA018EnvironmentWritingcdE033_D18AEB50FB5BD1FE65061C37D76F709BLLVyAA0cD20DefaultVisibilityKey33_AD0B7B82D3360F70EB1ED1A484B203ACLLVxGAaBHPyHCTm();
}

void sub_1873D7E2C()
{
  get_witness_table_7SwiftUI18TableColumnContentRzlAA018EnvironmentWritingcdE033_D18AEB50FB5BD1FE65061C37D76F709BLLVyAA0cD20DefaultVisibilityKey33_AD0B7B82D3360F70EB1ED1A484B203ACLLVxGAaBHPyHCTm();
}

void sub_1873D7E40()
{
  get_witness_table_7SwiftUI18TableColumnContentRzlAA018EnvironmentWritingcdE033_D18AEB50FB5BD1FE65061C37D76F709BLLVyAA0cD20DefaultVisibilityKey33_AD0B7B82D3360F70EB1ED1A484B203ACLLVxGAaBHPyHCTm();
}

void get_witness_table_7SwiftUI18TableColumnContentRzlAA018EnvironmentWritingcdE033_D18AEB50FB5BD1FE65061C37D76F709BLLVyAA0cD20DefaultVisibilityKey33_AD0B7B82D3360F70EB1ED1A484B203ACLLVxGAaBHPyHCTm()
{
  type metadata accessor for EnvironmentWritingTableColumnContent();
}

uint64_t sub_1873D7E78(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentWritingTableColumnContent<A, B>, a1);
}

void *type metadata accessor for TableColumnCustomizationBehavior.Guts()
{
  return &unk_1E1B01A60;
}

ValueMetadata *type metadata accessor for TableColumnDisabledCustomizationBehaviorKey()
{
  return &type metadata for TableColumnDisabledCustomizationBehaviorKey;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationIDKey()
{
  return &type metadata for TableColumnCustomizationIDKey;
}

ValueMetadata *type metadata accessor for TableColumnDefaultVisibilityKey()
{
  return &type metadata for TableColumnDefaultVisibilityKey;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationBehavior.Guts, &unk_1E1B01A60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationBehavior.Guts, &unk_1E1B01A60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationBehavior.Guts, &unk_1E1B01A60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationBehavior.Guts, &unk_1E1B01A60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts);
  }
  return result;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance TableColumnCustomizationIDKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = -1;
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TableColumnCustomizationIDKey(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];
  _BYTE v5[40];

  outlined init with take of TableColumnCustomizationID?(a1, (uint64_t)v4);
  outlined init with take of TableColumnCustomizationID?(a2, (uint64_t)v5);
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)((uint64_t)v4, (uint64_t)v5);
}

uint64_t outlined init with take of TableColumnCustomizationID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TableColumnCustomizationID?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TableColumnCustomizationID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TableColumnCustomizationID?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TableColumnCustomizationID?);
  }
}

uint64_t ObjectFallbackDelegateBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

void FallbackDelegateBox.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t FallbackDelegateBox.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t ObservableObjectFallbackDelegateBox.addDelegate(to:)()
{
  uint64_t v0;
  id v1;

  static ObservableObject.environmentStore.getter();
  v1 = *(id *)(v0 + 16);
  swift_setAtWritableKeyPath();
  return swift_release();
}

uint64_t type metadata accessor for ObservableObjectFallbackDelegateBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableObjectFallbackDelegateBox);
}

uint64_t UnsafeObservableObjectFallbackDelegateBox.addDelegate(to:)()
{
  static ObservableObject.environmentStore.getter();
  swift_unknownObjectRetain();
  swift_setAtWritableKeyPath();
  return swift_release();
}

uint64_t type metadata accessor for UnsafeObservableObjectFallbackDelegateBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeObservableObjectFallbackDelegateBox);
}

uint64_t type metadata completion function for ObservableObjectFallbackDelegateBox()
{
  return swift_initClassMetadata2();
}

void *ObservableFallbackDelegateBox.delegate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void ObservableFallbackDelegateBox.addDelegate(to:)()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  specialized EnvironmentValues.subscript.setter((uint64_t)v1);

}

uint64_t ObservableObjectFallbackDelegateBox.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  v1 = specialized ObservableObjectFallbackDelegateBox.init()(v0);
  swift_release();
  return v1;
}

void ObservableFallbackDelegateBox.__ivar_destroyer()
{
  uint64_t v0;

}

uint64_t type metadata accessor for ObservableFallbackDelegateBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableFallbackDelegateBox);
}

uint64_t type metadata completion function for ObjectFallbackDelegateBox()
{
  return type metadata completion function for FallbackDelegateBox();
}

uint64_t ObjectFallbackDelegateBox.delegate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ObjectFallbackDelegateBox.addDelegate(to:)()
{
  uint64_t v0;

  swift_getObjectType();
  v0 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_unknownObjectRelease();
}

uint64_t ObjectFallbackDelegateBox.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t UnsafeObservableObjectFallbackDelegateBox.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ObjectFallbackDelegateBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectFallbackDelegateBox);
}

uint64_t initializeBufferWithCopyOfBuffer for FallbackDelegateBox.DelegateStorage(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of FallbackDelegateBox<A>.DelegateStorage<A>(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

void destroy for FallbackDelegateBox.DelegateStorage(uint64_t a1)
{
  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for FallbackDelegateBox.DelegateStorage(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(v5, v6);
  return a1;
}

uint64_t assignWithTake for FallbackDelegateBox.DelegateStorage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(v5, v6);
  return a1;
}

uint64_t getEnumTag for FallbackDelegateBox.DelegateStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for FallbackDelegateBox.DelegateStorage(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for FallbackDelegateBox.DelegateStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FallbackDelegateBox.DelegateStorage);
}

uint64_t MakeObservableObjectDelegateBox.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[32];

  type metadata accessor for UnsafeObservableObjectFallbackDelegateBox(0, a2, a3, a4);
  outlined init with copy of Any(v4, (uint64_t)v8);
  swift_dynamicCast();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v7;
  result = swift_release();
  *(_QWORD *)(v4 + 32) = v5;
  return result;
}

uint64_t EnvironmentValues._set<A>(_:for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v4);
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v10 - v7, a1, v5);
  v8 = type metadata accessor for EnvironmentPropertyKey();
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v8);
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = type metadata accessor for EnvironmentObjectKey();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4D48], v1);
  return EnvironmentValues._set<A>(_:for:)((uint64_t)&v3);
}

{
  return specialized EnvironmentValues.subscript.setter(a1);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollViewKey>, (uint64_t)&type metadata for ScrollViewKey, (uint64_t)&protocol witness table for ScrollViewKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey>, (uint64_t)&type metadata for GridBadgeInfoEnvironmentKey, (uint64_t)&protocol witness table for GridBadgeInfoEnvironmentKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>, (uint64_t)&type metadata for FocusScopesKey, (uint64_t)&protocol witness table for FocusScopesKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>);
  outlined retain of HeaderFooterConfiguration(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>, (uint64_t)&type metadata for GaugeIndicatorDotTintEnvironmentKey, (uint64_t)&protocol witness table for GaugeIndicatorDotTintEnvironmentKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultHoverEffectKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultHoverEffectKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>);
  outlined copy of Transaction?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeTintOverrideKey>);
  outlined copy of (Color, Color)?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeTintOverrideKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeTintOverrideKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey>, (uint64_t)&type metadata for EnvironmentValues.SceneKeyboardShortcutsKey, (uint64_t)&protocol witness table for EnvironmentValues.SceneKeyboardShortcutsKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t specialized ObservableObjectFallbackDelegateBox.init()(uint64_t a1)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  *(_QWORD *)(a1 + 16) = objc_msgSend(v2, sel_init);
  return a1;
}

uint64_t destroy for MakeObservableObjectDelegateBox(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

uint64_t initializeWithCopy for MakeObservableObjectDelegateBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for MakeObservableObjectDelegateBox(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MakeObservableObjectDelegateBox(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MakeObservableObjectDelegateBox()
{
  return &type metadata for MakeObservableObjectDelegateBox;
}

ValueMetadata *type metadata accessor for ObservableObjectDescriptor()
{
  return &type metadata for ObservableObjectDescriptor;
}

uint64_t static UIApplicationDelegateAdaptor._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for GraphHost();
  MEMORY[0x18D75C118]();
  type metadata accessor for AppGraph();
  v0 = swift_dynamicCastClass();
  result = swift_release();
  if (!v0)
    JUMPOUT(0x18D75AC90);
  return result;
}

uint64_t UIApplicationDelegateAdaptor<>.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIApplicationDelegateAdaptor<>.init(_:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ObservableObjectFallbackDelegateBox, ObservableObjectFallbackDelegateBox.__allocating_init());
}

{
  return UIApplicationDelegateAdaptor<>.init(_:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ObservableFallbackDelegateBox, ObservableObjectFallbackDelegateBox.__allocating_init());
}

void UIApplicationDelegateAdaptor<>.projectedValue.getter()
{
  void *v0;

  if (!static AppGraph.delegateBox)
  {
    static os_log_type_t.fault.getter();
    v0 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  specialized UIApplicationDelegateAdaptor.wrappedValue.getter();
}

uint64_t UIApplicationDelegateAdaptor<>.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(void))
{
  a4(0);
  static AppGraph.delegateBox = a5();
  return swift_release();
}

void specialized UIApplicationDelegateAdaptor.wrappedValue.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v0 = static AppGraph.delegateBox;
  if (static AppGraph.delegateBox
    || (static os_log_type_t.fault.getter(),
        v1 = (void *)static Log.runtimeIssuesLog.getter(),
        os_log(_:dso:log:_:_:)(),
        v1,
        (v0 = static AppGraph.delegateBox) != 0))
  {
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 80);
    v3 = swift_retain();
    v4 = v2(v3);
    swift_release();
    if (v4)
    {
      swift_dynamicCastUnknownClassUnconditional();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

ValueMetadata *type metadata accessor for MenuSliderStyle()
{
  return &type metadata for MenuSliderStyle;
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in MenuSliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MenuSliderStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t result;
  char v15;
  uint64_t v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v6 = a1[4];
  v8 = a1[5];
  v9 = a1[7];
  v16 = a1[6];
  v15 = *((_BYTE *)a1 + 64);
  v10 = (void *)a1[9];
  v11 = (void *)a1[10];
  v12 = (void *)a1[11];
  v13 = (void *)a1[12];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v10, v11, v12, v13);
  result = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v15;
  *(_QWORD *)(a2 + 72) = v10;
  *(_QWORD *)(a2 + 80) = v11;
  *(_QWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 96) = v13;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = v3;
  *(_QWORD *)(a2 + 120) = v4;
  *(_QWORD *)(a2 + 128) = v5;
  *(_QWORD *)(a2 + 136) = v7;
  *(_QWORD *)(a2 + 144) = v6;
  *(_QWORD *)(a2 + 152) = v8;
  *(_QWORD *)(a2 + 160) = v16;
  *(_QWORD *)(a2 + 168) = v9;
  *(_BYTE *)(a2 + 176) = v15;
  *(_QWORD *)(a2 + 184) = v10;
  *(_QWORD *)(a2 + 192) = v11;
  *(_QWORD *)(a2 + 200) = v12;
  *(_QWORD *)(a2 + 208) = v13;
  *(_WORD *)(a2 + 216) = 257;
  *(_QWORD *)(a2 + 224) = result;
  *(_QWORD *)(a2 + 232) = closure #4 in PaletteControlGroupStyle.makeBody(configuration:);
  *(_QWORD *)(a2 + 240) = 0;
  return result;
}

uint64_t protocol witness for SliderStyle.makeBody(configuration:) in conformance MenuSliderStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return MenuSliderStyle.makeBody(configuration:)(a1, a2);
}

void destroy for MenuSliderStepButton(uint64_t a1)
{
  void *v2;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(void **)(a1 + 72);
  if (v2)
  {

  }
}

uint64_t initializeWithCopy for MenuSliderStepButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = (_OWORD *)(a2 + 72);
  v7 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = *(void **)(a2 + 80);
    v10 = *(void **)(a2 + 88);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v9;
    v11 = *(void **)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v11;
    v12 = v7;
    v13 = v9;
    v14 = v10;
    v15 = v11;
  }
  else
  {
    v16 = v8[1];
    *(_OWORD *)(a1 + 72) = *v8;
    *(_OWORD *)(a1 + 88) = v16;
  }
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for MenuSliderStepButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  void *v6;
  void *v7;
  _OWORD *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 72);
  v6 = *(void **)(a1 + 72);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = (_OWORD *)(a2 + 72);
  v7 = *(void **)(a2 + 72);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 72) = v7;
      v9 = v7;

      v10 = *(void **)(a1 + 80);
      v11 = *(void **)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v11;
      v12 = v11;

      v13 = *(void **)(a1 + 88);
      v14 = *(void **)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v14;
      v15 = v14;

      v16 = *(void **)(a1 + 96);
      v17 = *(void **)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v17;
      v18 = v17;

    }
    else
    {
      outlined destroy of AccessibilityBoundedNumber(a1 + 72);
      v26 = *(_OWORD *)(a2 + 88);
      *v5 = *v8;
      *(_OWORD *)(a1 + 88) = v26;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 72) = v7;
    v19 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v19;
    v20 = *(void **)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v20;
    v21 = *(void **)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v21;
    v22 = v7;
    v23 = v19;
    v24 = v20;
    v25 = v21;
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 88);
    *v5 = *v8;
    *(_OWORD *)(a1 + 88) = v27;
  }
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t outlined destroy of AccessibilityBoundedNumber(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE5F80] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for MenuSliderStepButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(void **)(a1 + 72);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  if (!v6)
    goto LABEL_5;
  if (!v5)
  {
    outlined destroy of AccessibilityBoundedNumber(a1 + 72);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v10;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 72) = v5;

  v7 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  v8 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);

  v9 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

LABEL_6:
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

void *type metadata accessor for MenuSliderStepButton()
{
  return &unk_1E1AD3958;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>);
  }
}

void type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>)
  {
    type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<CompactMenuControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle, (uint64_t)&type metadata for CompactMenuControlGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ControlGroupStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>);
  }
}

void type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>)
  {
    v2 = type metadata accessor for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>();
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label> and conformance LabeledControlGroupContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>, (uint64_t)&protocol conformance descriptor for LabeledControlGroupContent<A, B>);
    v5 = type metadata accessor for ControlGroup(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>);
  }
}

uint64_t type metadata accessor for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>;
  if (!lazy cache variable for type metadata for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>)
  {
    type metadata accessor for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(MenuSliderStepButton, MenuSliderStepButton)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, MEMORY[0x1E0CE7EB8]);
    type metadata accessor for LabeledControlGroupContent();
  }
  return result;
}

void type metadata accessor for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>)
  {
    type metadata accessor for (MenuSliderStepButton, MenuSliderStepButton)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>);
  }
}

void type metadata accessor for (MenuSliderStepButton, MenuSliderStepButton)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (MenuSliderStepButton, MenuSliderStepButton))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (MenuSliderStepButton, MenuSliderStepButton));
  }
}

unint64_t lazy protocol witness table accessor for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle;
  if (!lazy protocol witness table cache variable for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CompactMenuControlGroupStyle, &type metadata for CompactMenuControlGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>> and conformance ControlGroup<A>, (uint64_t (*)(uint64_t))type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, (uint64_t)&protocol conformance descriptor for ControlGroup<A>);
    v3[1] = &protocol witness table for ControlGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MenuSliderStepButton()
{
  return swift_getOpaqueTypeConformance2();
}

void MenuSliderStepButton.resolvedLabel.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_BYTE *)(v1 + 64);
  v4 = *(unsigned __int8 *)(v1 + 104);
  if (v4 == 1)
  {
    if ((*(_BYTE *)(v1 + 64) & 1) == 0)
    {
      LocalizedStringKey.init(stringLiteral:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = Text.init(_:tableName:bundle:comment:)();
      v8 = v7;
      v10 = v9;
      v11 = 0xE400000000000000;
      v12 = 1937075312;
LABEL_7:
      v13 = v5 & 1;
      type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v12;
      *(_QWORD *)(v14 + 24) = v11;
      *(_DWORD *)(v14 + 32) = 0;
      *(_BYTE *)(v14 + 36) = 1;
      *(_OWORD *)(v14 + 40) = xmmword_187BF9F90;
      *(_QWORD *)(v14 + 56) = v12;
      *(_QWORD *)(v14 + 64) = v11;
      *(_OWORD *)(v14 + 72) = xmmword_187BF9FB0;
      *(_BYTE *)(v14 + 88) = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(v1 + 64) & 1) == 0)
  {
    LocalizedStringKey.init(stringLiteral:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = Text.init(_:tableName:bundle:comment:)();
    v8 = v15;
    v10 = v16;
    v11 = 0xE500000000000000;
    v12 = 0x73756E696DLL;
    goto LABEL_7;
  }
  v6 = 0;
  v8 = 0;
  v13 = 0;
  v10 = 0;
  v14 = 0;
LABEL_8:
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = v3 ^ 1;
  *(_BYTE *)(a1 + 41) = v4 ^ 1;
}

_QWORD *closure #1 in MenuSliderStepButton.body.getter(_QWORD *a1)
{
  uint64_t v3;

  outlined retain of SliderStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v3);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of SliderStyleConfiguration(a1);
}

_QWORD *closure #2 in MenuSliderStepButton.body.getter(_QWORD *a1)
{
  uint64_t v3;

  outlined retain of SliderStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v3);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of SliderStyleConfiguration(a1);
}

uint64_t closure #3 in MenuSliderStepButton.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  type metadata accessor for Button<MappedViewElement.Placeholder>(0, a1, a2, a3);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (_WORD *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v29 - v19;
  v21 = swift_allocObject();
  v22 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v21 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v21 + 96) = v22;
  *(_OWORD *)(v21 + 105) = *(_OWORD *)(a1 + 89);
  v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v21 + 32) = v23;
  v24 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v21 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v21 + 64) = v24;
  *(_QWORD *)(v21 + 128) = a2;
  *(_QWORD *)(v21 + 136) = a3;
  *v12 = 256;
  v25 = (uint64_t (**)())((char *)v12 + *(int *)(v9 + 36));
  *v25 = partial apply for closure #1 in closure #3 in MenuSliderStepButton.body.getter;
  v25[1] = (uint64_t (*)())v21;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of Button<MappedViewElement.Placeholder>((uint64_t)v12, (uint64_t)v16, v26, v27);
  outlined retain of SliderStyleConfiguration((_QWORD *)a1);
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Button<MappedViewElement.Placeholder>);
  specialized View.accessibility<A>(_:_:isEnabled:)(0x80000, 0x80000, 1, (uint64_t)v20);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>);
  return outlined init with take of ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>((uint64_t)v20, a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MenuSliderStepButton(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)a1;
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8) | 0x800;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = specialized static _ConditionalContent<>._viewListCount(inputs:)(v1, v4, v2, v3);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v5;
}

_QWORD *protocol witness for View.body.getter in conformance MenuSliderStepButton@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *(*v6)();
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[25];

  *(_OWORD *)&v30[9] = *(__int128 *)((char *)v1 + 89);
  v3 = v1[5];
  v29 = v1[4];
  *(_OWORD *)v30 = v3;
  v4 = v1[1];
  v25 = *v1;
  v26 = v4;
  v5 = v1[3];
  v27 = v1[2];
  v28 = v5;
  if ((v30[24] & 1) != 0)
    v6 = partial apply for closure #1 in MenuSliderStepButton.body.getter;
  else
    v6 = partial apply for closure #2 in MenuSliderStepButton.body.getter;
  v7 = (_OWORD *)swift_allocObject();
  v8 = v1[5];
  v7[5] = v1[4];
  v7[6] = v8;
  *(_OWORD *)((char *)v7 + 105) = *(__int128 *)((char *)v1 + 89);
  v9 = v1[1];
  v7[1] = *v1;
  v7[2] = v9;
  v10 = v1[3];
  v7[3] = v1[2];
  v7[4] = v10;
  outlined retain of SliderStyleConfiguration(&v25);
  MenuSliderStepButton.resolvedLabel.getter((uint64_t)v21);
  v19 = v21[1];
  v20 = v21[0];
  v11 = v22;
  v12 = v23;
  v13 = v24;
  v14 = swift_allocObject();
  v15 = *(_OWORD *)v30;
  *(_OWORD *)(v14 + 80) = v29;
  *(_OWORD *)(v14 + 96) = v15;
  *(_OWORD *)(v14 + 105) = *(_OWORD *)&v30[9];
  v16 = v26;
  *(_OWORD *)(v14 + 16) = v25;
  *(_OWORD *)(v14 + 32) = v16;
  v17 = v28;
  *(_OWORD *)(v14 + 48) = v27;
  *(_OWORD *)(v14 + 64) = v17;
  *(_QWORD *)(v14 + 128) = v6;
  *(_QWORD *)(v14 + 136) = v7;
  *(_OWORD *)a1 = v20;
  *(_OWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 41) = v13;
  *(_QWORD *)(a1 + 48) = partial apply for closure #3 in MenuSliderStepButton.body.getter;
  *(_QWORD *)(a1 + 56) = v14;
  return outlined retain of SliderStyleConfiguration(&v25);
}

_QWORD *partial apply for closure #2 in MenuSliderStepButton.body.getter()
{
  uint64_t v0;

  return closure #2 in MenuSliderStepButton.body.getter((_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #3 in MenuSliderStepButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #3 in MenuSliderStepButton.body.getter(v1 + 16, *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), a1);
}

_QWORD *partial apply for closure #1 in MenuSliderStepButton.body.getter()
{
  uint64_t v0;

  return closure #1 in MenuSliderStepButton.body.getter((_QWORD *)(v0 + 16));
}

void type metadata accessor for Button<MappedViewElement.Placeholder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Button<MappedViewElement.Placeholder>)
  {
    v4 = type metadata accessor for Button(0, (uint64_t)&type metadata for MappedViewElement.Placeholder, (uint64_t)&protocol witness table for MappedViewElement.Placeholder, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Button<MappedViewElement.Placeholder>);
  }
}

void type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, (void (*)(uint64_t))type metadata accessor for Button<MappedViewElement.Placeholder>);
}

uint64_t objectdestroy_3Tm_1()
{
  uint64_t v0;
  void *v1;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 88);
  if (v1)
  {

  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in MenuSliderStepButton.body.getter()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(v0 + 128);
  v2 = *(uint64_t (**)(uint64_t))(v0 + 40);
  v3 = v2(1);
  v1(v3);
  return v2(0);
}

uint64_t outlined init with copy of Button<MappedViewElement.Placeholder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for Button<MappedViewElement.Placeholder>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static _ConditionalContent<>._viewListCount(inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v8 = specialized static ViewAlias._viewListCount(inputs:)(a1, a2, a3, a4);
  if ((v9 & 1) != 0)
    return v8;
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  v10 = static ModifiedContent<>._viewListCount(inputs:)();
  result = 0;
  if ((v12 & 1) == 0 && v8 == v10)
  {
    v13 = specialized static ViewAlias._viewListCount(inputs:)(a1, a2, a3, a4);
    if ((v14 & 1) == 0)
    {
      v15 = v13;
      v16 = static ModifiedContent<>._viewListCount(inputs:)();
      if ((v17 & 1) == 0 && v15 == v16 && v8 == v15)
        return v8;
    }
    return 0;
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>);
    type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, Text>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>);
  }
}

uint64_t type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
    lazy protocol witness table accessor for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityHidesLabelIcon, &type metadata for AccessibilityHidesLabelIcon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon;
  if (!lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleConfiguration.Icon, &type metadata for LabelStyleConfiguration.Icon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon;
  if (!lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleConfiguration.Icon, &type metadata for LabelStyleConfiguration.Icon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    v4[0] = MEMORY[0x1E0CE7238];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>();
    v2[0] = &protocol witness table for AccessibilityAttachmentModifier;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, Text>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Title, Text>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Title, Text>)
  {
    lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title;
  if (!lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleConfiguration.Title, &type metadata for LabelStyleConfiguration.Title);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title;
  if (!lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleConfiguration.Title, &type metadata for LabelStyleConfiguration.Title);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E0CE4A60], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>)
    type metadata accessor for StaticIf();
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle;
  if (!lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedLabelStyle, &type metadata for ResolvedLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle;
  if (!lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedLabelStyle, &type metadata for ResolvedLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier);
}

unint64_t lazy protocol witness table accessor for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier;
  if (!lazy protocol witness table cache variable for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowsToolbarItemBridgingModifier, &type metadata for AllowsToolbarItemBridgingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier);
  }
  return result;
}

_UNKNOWN **sub_1873DA644()
{
  return &protocol witness table for MappedViews<A, B>;
}

void Scene.windowInsets(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.windowInsets(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

double SpatialLongPressGesture.Value.location.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void SpatialLongPressGesture.Value.location.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*SpatialLongPressGesture.Value.location.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialLongPressGesture.Value.isPressed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t SpatialLongPressGesture.Value.isPressed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*SpatialLongPressGesture.Value.isPressed.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static SpatialLongPressGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SpatialLongPressGesture.Value(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  else
    return 0;
}

double SpatialLongPressGesture.minimumDuration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void SpatialLongPressGesture.minimumDuration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*SpatialLongPressGesture.minimumDuration.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SpatialLongPressGesture.maximumDistance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void SpatialLongPressGesture.maximumDistance.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpatialLongPressGesture.maximumDistance.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialLongPressGesture.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CoordinateSpace(v1 + 16, a1);
}

uint64_t SpatialLongPressGesture.coordinateSpace.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of CoordinateSpace(a1, v1 + 16);
}

uint64_t (*SpatialLongPressGesture.coordinateSpace.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialLongPressGesture.init<A>(minimumDuration:maximumDistance:coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  _QWORD v10[6];

  *a4 = a5;
  a4[1] = a6;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v10, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return outlined init with take of CoordinateSpace((uint64_t)v10, (uint64_t)(a4 + 2));
}

uint64_t SpatialLongPressGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[48];
  _BYTE v7[8];
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *v1;
  v4 = v1[1];
  outlined init with copy of CoordinateSpace((uint64_t)(v1 + 2), (uint64_t)v6);
  outlined init with copy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>((uint64_t)v6, (uint64_t)&v12);
  v7[0] = 0;
  v8 = closure #1 in SpatialLongPressGesture.internalBody.getter;
  v9 = 0;
  v10 = v3;
  v11 = v4;
  outlined destroy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>((uint64_t)v6);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>((uint64_t)v7, a1);
  *(_QWORD *)(a1 + 88) = 16;
  *(_BYTE *)(a1 + 96) = 1;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>);
}

void closure #1 in SpatialLongPressGesture.internalBody.getter(uint64_t a1)
{
  __asm { BR              X0 }
}

uint64_t sub_1873DA8BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (v0 == 1)
  {
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_WORD *)(v1 + 16) = 2;
  }
  else
  {
    result = TappableSpatialEvent.location.getter();
    *(_QWORD *)v1 = v3;
    *(_QWORD *)(v1 + 8) = v4;
    *(_WORD *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<SpatialLongPressGesture.Value>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE53B0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<SpatialLongPressGesture.Value>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE53B0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>)
  {
    v0 = MEMORY[0x1E0CE53B0];
    type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<SpatialLongPressGesture.Value>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE53B0]);
    type metadata accessor for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>(255);
    lazy protocol witness table accessor for type CategoryGesture<SpatialLongPressGesture.Value> and conformance CategoryGesture<A>(&lazy protocol witness table cache variable for type CoordinateSpaceGesture<SpatialLongPressGesture.Value> and conformance CoordinateSpaceGesture<A>, &lazy cache variable for type metadata for CoordinateSpaceGesture<SpatialLongPressGesture.Value>, (uint64_t (*)(_QWORD, ValueMetadata *))v0, MEMORY[0x1E0CE53C0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>> and conformance SingleLongPressGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>, (uint64_t)&protocol conformance descriptor for SingleLongPressGesture<A, B>);
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>);
  }
}

void type metadata accessor for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>)
  {
    type metadata accessor for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>, MEMORY[0x1E0CE2E88]);
    v5 = type metadata accessor for SingleLongPressGesture(a1, (uint64_t)&type metadata for SpatialLongPressGesture.Value, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>);
  }
}

void type metadata accessor for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>)
  {
    type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, (uint64_t)&type metadata for SpatialLongPressGesture.Value, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE0BC8]);
    type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for EventListener<TappableSpatialEvent>, MEMORY[0x1E0CE4E68], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE1EB0]);
    lazy protocol witness table accessor for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<TappableSpatialEvent> and conformance EventListener<A>();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>);
  }
}

void type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x1E0CE4E80]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>)
  {
    type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, (uint64_t)&type metadata for SpatialLongPressGesture.Value, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE0BC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<TappableSpatialEvent> and conformance EventListener<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListener<TappableSpatialEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<TappableSpatialEvent> and conformance EventListener<A>)
  {
    type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for EventListener<TappableSpatialEvent>, MEMORY[0x1E0CE4E68], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE1EB0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1EC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<TappableSpatialEvent> and conformance EventListener<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CategoryGesture<SpatialLongPressGesture.Value> and conformance CategoryGesture<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance SpatialLongPressGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[48];
  _BYTE v7[8];
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *v1;
  v4 = v1[1];
  outlined init with copy of CoordinateSpace((uint64_t)(v1 + 2), (uint64_t)v6);
  outlined init with copy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>((uint64_t)v6, (uint64_t)&v12);
  v7[0] = 0;
  v8 = closure #1 in SpatialLongPressGesture.internalBody.getter;
  v9 = 0;
  v10 = v3;
  v11 = v4;
  outlined destroy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>((uint64_t)v6);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>((uint64_t)v7, a1);
  *(_QWORD *)(a1 + 88) = 16;
  *(_BYTE *)(a1 + 96) = 1;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SpatialLongPressGesture()
{
  lazy protocol witness table accessor for type SpatialLongPressGesture and conformance SpatialLongPressGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance SpatialLongPressGesture()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View.onLongPressGesture<A>(minimumDuration:maximumDistance:coordinateSpace:perform:onPressingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[12];
  __int128 v40;
  uint64_t v41;

  v38 = a8;
  v37 = a6;
  v34 = a2;
  v36 = a9;
  v19 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(0);
  v23 = v22;
  v35 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v21, a1, a7, v25);
  *(double *)&v40 = a10;
  *((double *)&v40 + 1) = a11;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a12 + 8))(v39, a7, a12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, a7);
  outlined init with take of CoordinateSpace((uint64_t)v39, (uint64_t)&v41);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v34;
  *(_QWORD *)(v28 + 24) = a3;
  outlined init with copy of SpatialLongPressGesture(&v40, (uint64_t)v39);
  v39[8] = a4;
  v39[9] = a5;
  v39[10] = partial apply for closure #1 in View.onLongPressGesture<A>(minimumDuration:maximumDistance:coordinateSpace:perform:onPressingChanged:);
  v39[11] = v28;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a4, a5);
  type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>();
  v30 = v29;
  v31 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>, MEMORY[0x1E0CE2E88]);
  swift_retain();
  Gesture.cancellable()();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>);
  swift_release();
  outlined destroy of SpatialLongPressGesture((uint64_t)&v40);
  v39[0] = v30;
  v39[1] = MEMORY[0x1E0CE5A80];
  v39[2] = v31;
  v39[3] = MEMORY[0x1E0CE5A70];
  swift_getOpaqueTypeConformance2();
  View.gesture<A>(_:including:)();
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v27, v23);
}

void type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>, MEMORY[0x1E0CE2E88]);
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CE5A80];
    v7[2] = v4;
    v7[3] = MEMORY[0x1E0CE5A70];
    v5 = MEMORY[0x18D75FF88](a1, v7, MEMORY[0x1E0CE76E8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>, MEMORY[0x1E0CE2E88]);
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CE5A80];
    v7[2] = v4;
    v7[3] = MEMORY[0x1E0CE5A70];
    v5 = MEMORY[0x18D75FF88](a1, v7, MEMORY[0x1E0CE76E8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>, MEMORY[0x1E0CE2E88]);
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CE5A80];
    v7[2] = v4;
    v7[3] = MEMORY[0x1E0CE5A70];
    v5 = MEMORY[0x18D75FF88](a1, v7, MEMORY[0x1E0CE76E8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>, MEMORY[0x1E0CE2E88]);
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CE5A80];
    v7[2] = v4;
    v7[3] = MEMORY[0x1E0CE5A70];
    v5 = MEMORY[0x18D75FF88](a1, v7, MEMORY[0x1E0CE76E8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0);
  }
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>> and conformance CallbacksGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, MEMORY[0x1E0CE3150]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>);
  }
}

void type metadata accessor for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>)
  {
    type metadata accessor for PressableGestureCallbacks<SpatialLongPressGesture.Value>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PressableGestureCallbacks<SpatialLongPressGesture.Value> and conformance PressableGestureCallbacks<A>, (uint64_t (*)(uint64_t))type metadata accessor for PressableGestureCallbacks<SpatialLongPressGesture.Value>, (uint64_t)&protocol conformance descriptor for PressableGestureCallbacks<A>);
    v0 = type metadata accessor for CallbacksGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>);
  }
}

void type metadata accessor for PressableGestureCallbacks<SpatialLongPressGesture.Value>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for PressableGestureCallbacks<SpatialLongPressGesture.Value>)
  {
    v2 = lazy protocol witness table accessor for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value();
    v4 = type metadata accessor for PressableGestureCallbacks(a1, (uint64_t)&type metadata for SpatialLongPressGesture.Value, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for PressableGestureCallbacks<SpatialLongPressGesture.Value>);
  }
}

unint64_t lazy protocol witness table accessor for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value;
  if (!lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialLongPressGesture.Value, &type metadata for SpatialLongPressGesture.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value;
  if (!lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialLongPressGesture.Value, &type metadata for SpatialLongPressGesture.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value);
  }
  return result;
}

uint64_t sub_1873DB3F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.onLongPressGesture<A>(minimumDuration:maximumDistance:coordinateSpace:perform:onPressingChanged:)(unint64_t a1, unint64_t a2, char a3, __n128 a4, __n128 a5)
{
  uint64_t v5;

  a4.n128_u64[0] = a1;
  a5.n128_u64[0] = a2;
  if ((a3 & 1) != 0)
  {
    a5.n128_f64[0] = 0.0;
    a4.n128_f64[0] = 0.0;
  }
  return (*(uint64_t (**)(__n128, __n128))(v5 + 16))(a4, a5);
}

uint64_t outlined init with copy of SpatialLongPressGesture(__int128 *a1, uint64_t a2)
{
  initializeWithCopy for SpatialLongPressGesture(a2, a1);
  return a2;
}

uint64_t outlined destroy of SpatialLongPressGesture(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SpatialLongPressGesture and conformance SpatialLongPressGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture;
  if (!lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialLongPressGesture, &type metadata for SpatialLongPressGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture;
  if (!lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialLongPressGesture, &type metadata for SpatialLongPressGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in SpatialLongPressGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in SpatialLongPressGesture()
{
  return &protocol witness table for SpatialLongPressGesture;
}

uint64_t destroy for SpatialLongPressGesture(uint64_t result)
{
  if (!*(_BYTE *)(result + 56))
    return __swift_destroy_boxed_opaque_existential_1(result + 16);
  return result;
}

uint64_t initializeWithCopy for SpatialLongPressGesture(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;

  v5 = *a2;
  v4 = a2 + 1;
  *(_OWORD *)a1 = v5;
  v6 = (_OWORD *)(a1 + 16);
  if (*((_BYTE *)a2 + 56))
  {
    v7 = v4[1];
    *v6 = *v4;
    v6[1] = v7;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 40);
    *(_OWORD *)(a1 + 40) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v4);
    *(_BYTE *)(a1 + 56) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SpatialLongPressGesture(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  if (a1 != a2)
  {
    v4 = (_OWORD *)(a1 + 16);
    v5 = (__int128 *)(a2 + 16);
    outlined destroy of CoordinateSpace(a1 + 16);
    if (*(_BYTE *)(a2 + 56))
    {
      v6 = *v5;
      v7 = v5[1];
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)v5 + 25);
      *v4 = v6;
      *(_OWORD *)(a1 + 32) = v7;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1 + 16, v5);
      *(_BYTE *)(a1 + 56) = 0;
    }
  }
  return a1;
}

_OWORD *assignWithTake for SpatialLongPressGesture(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  *a1 = *a2;
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace((uint64_t)(a1 + 1));
    v4 = a2[2];
    a1[1] = a2[1];
    a1[2] = v4;
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialLongPressGesture(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialLongPressGesture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialLongPressGesture()
{
  return &type metadata for SpatialLongPressGesture;
}

uint64_t getEnumTagSinglePayload for SpatialLongPressGesture.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialLongPressGesture.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialLongPressGesture.Value()
{
  return &type metadata for SpatialLongPressGesture.Value;
}

uint64_t sub_1873DB7CC()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>>()
{
  uint64_t (*v0)(_QWORD, ValueMetadata *);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>>)
  {
    v0 = (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE2C58];
    type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for CategoryGesture<SpatialLongPressGesture.Value>, MEMORY[0x1E0CE2C58]);
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>();
    lazy protocol witness table accessor for type CategoryGesture<SpatialLongPressGesture.Value> and conformance CategoryGesture<A>(&lazy protocol witness table cache variable for type CategoryGesture<SpatialLongPressGesture.Value> and conformance CategoryGesture<A>, &lazy cache variable for type metadata for CategoryGesture<SpatialLongPressGesture.Value>, v0, MEMORY[0x1E0CE2C68]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>, MEMORY[0x1E0CE2E88]);
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>>);
  }
}

void type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for SpatialLongPressGesture.Value);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1873DB91C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, MEMORY[0x1E0CE41B8]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(255);
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>, MEMORY[0x1E0CE2E88]);
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for AddGestureModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(255);
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>, MEMORY[0x1E0CE2E88]);
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for AddGestureModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(255);
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>, MEMORY[0x1E0CE2E88]);
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for AddGestureModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
  }
}

uint64_t TableRowContent.contextMenu<A>(menuItems:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for _ContextMenuTableRowModifier(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v20 - v17;
  a1(v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContextMenuTableRowModifier<A>, v13);
  Scene.modifier<A>(_:)((uint64_t)v18, a3, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

uint64_t type metadata accessor for _ContextMenuTableRowModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ContextMenuTableRowModifier);
}

void TableRowContent.contextMenu<A, B>(menuItems:preview:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for _ContextMenuPreviewTableRowModifier();
}

void sub_1873DBC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&a9 - v16;
  v18 = (*(uint64_t (**)(double))(v14 - 176))(v15);
  (*(void (**)(uint64_t))(v14 - 160))(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v17, v10, v12);
  *(_QWORD *)(v14 - 112) = v12;
  *(_QWORD *)(v14 - 104) = v11;
  v19 = *(_QWORD *)(v14 - 184);
  *(_QWORD *)(v14 - 96) = v9;
  *(_QWORD *)(v14 - 88) = v19;
  type metadata accessor for _ContextMenuPreviewTableRowModifier();
}

uint64_t sub_1873DBCE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 152) + 32))(v2 + *(int *)(a1 + 52), v4, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContextMenuPreviewTableRowModifier<A, B>, v5);
  Scene.modifier<A>(_:)(v2, *(_QWORD *)(v6 - 136), v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v5);
}

void type metadata accessor for _ContextMenuPreviewTableRowModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t _ContextMenuTableRowModifier.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  View.styleContext<A>(_:)();
  v8[0] = v6;
  v8[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8);
  result = AnyView.init<A>(_:)();
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t _ContextMenuPreviewTableRowModifier.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v10 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = *(_QWORD *)(a1 + 32);
  View.styleContext<A>(_:)();
  v13 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v16[0] = v12;
  v16[1] = v13;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v16);
  v14 = AnyView.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + *(int *)(a1 + 52), v6);
  result = AnyView.init<A>(_:)();
  *a3 = v14;
  a3[1] = result;
  return result;
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in _ContextMenuTableRowModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in _ContextMenuPreviewTableRowModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _ContextMenuTableRowModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1873DC09C + 4 * byte_187C2B740[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _ContextMenuTableRowModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t getEnumTagSinglePayload for _ContextMenuPreviewTableRowModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1873DC378 + 4 * byte_187C2B74E[v17 - 1]))();
}

void storeEnumTagSinglePayload for _ContextMenuPreviewTableRowModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

_UNKNOWN **sub_1873DC5F4()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

_UNKNOWN **sub_1873DC600()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

ValueMetadata *type metadata accessor for TableRowContextMenuTraitKey()
{
  return &type metadata for TableRowContextMenuTraitKey;
}

ValueMetadata *type metadata accessor for TableRowContextMenuTraitKey.Storage()
{
  return &type metadata for TableRowContextMenuTraitKey.Storage;
}

uint64_t static AccessibilityRotorContent._makeEntries(content:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static AccessibilityRotorContent._makeEntries(content:inputs:)(a1, a2, a3, a4);
}

{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  __int128 v18;
  int v19;
  int v20;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v19 = *((_DWORD *)a2 + 14);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v27) = v7;
  type metadata accessor for _GraphValue();
  v18 = *(_OWORD *)(a2 + 5);
  v12 = a2[3];
  v13 = a2[4];
  v25 = a3;
  v26 = a4;
  LODWORD(v27) = _GraphValue.value.getter();
  KeyPath = swift_getKeyPath();
  v22 = AssociatedTypeWitness;
  v23 = type metadata accessor for Focus();
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v23);
  v14 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v27, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v21, v23, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v15);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  v27 = v8;
  LODWORD(KeyPath) = v9;
  v29 = v10;
  v30 = v12;
  v31 = v13;
  v32 = v18;
  v33 = v19;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(&v20, &v27, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t specialized static AccessibilityRotorContent._makeEntries(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = MEMORY[0x1E0DEDCE8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Never>, MEMORY[0x1E0DEDCE8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v4 = _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, v3, v3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CFECD8]);
  lazy protocol witness table accessor for type Focus<Never, Never> and conformance Focus<A, B>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static AccessibilityRotorContent._makeEntries(content:inputs:)(v4, a2);
}

uint64_t static AccessibilityRotorContent._entryCount(inputs:)(uint64_t *a1)
{
  return static AccessibilityRotorContent._entryCount(inputs:)(a1);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = *((_DWORD *)a1 + 14);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = v2;
  v10 = v3;
  v11 = v4;
  v12 = *(_OWORD *)(a1 + 3);
  v13 = *(_OWORD *)(a1 + 5);
  v14 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v9, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_1873DCA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 40))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_1873DCA9C()
{
  return 16;
}

__n128 sub_1873DCAA8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance Never(unsigned int *a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];

  v2 = *a1;
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v6[0] = a2[2];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static AccessibilityRotorContent._makeEntries(content:inputs:)(v2, (uint64_t)v5);
}

uint64_t protocol witness for static AccessibilityRotorContent._entryCount(inputs:) in conformance Never(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  v1 = *((_DWORD *)a1 + 2);
  v2 = a1[2];
  v3 = *((_DWORD *)a1 + 14);
  v5 = *a1;
  v6 = v1;
  v7 = v2;
  v8 = *(_OWORD *)(a1 + 3);
  v9 = *(_OWORD *)(a1 + 5);
  v10 = v3;
  return protocol witness for static AccessibilityRotorContent._entryCount(inputs:) in conformance Never(&v5);
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance Never()
{
  Never.body.getter();
  __break(1u);
}

uint64_t AccessibilityOptionalRotorContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a3, a1, v5);
}

uint64_t AccessibilityTupleRotorContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AccessibilityTupleRotorContent.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AccessibilityTupleRotorContent.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityTupleRotorContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

void AccessibilityTupleRotorContent.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static AccessibilityTupleRotorContent.visitTypes(_:)(void (*a1)(uint64_t, __int128 *))
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;

  lazy protocol witness table accessor for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v2 = *(_QWORD *)(v7 + 16);
  if (v2)
  {
    v3 = (__int128 *)(v7 + 40);
    do
    {
      v4 = *v3;
      v3 = (__int128 *)((char *)v3 + 24);
      v5 = AGTupleElementOffset();
      v7 = v4;
      a1(v5, &v7);
      --v2;
    }
    while (v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t static AccessibilityTupleRotorContent._entryCount(inputs:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static AccessibilityTupleRotorContent.visitTypes(_:)((void (*)(uint64_t, __int128 *))partial apply for closure #1 in static AccessibilityTupleRotorContent._entryCount(inputs:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return 0;
}

void AccessibilityTupleRotorContent.CountEntries.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;

  if ((v4[9] & 1) != 0)
    goto LABEL_5;
  v5 = v4[8];
  v6 = *((_DWORD *)v4 + 2);
  v7 = v4[2];
  v8 = *((_DWORD *)v4 + 14);
  v13 = *v4;
  v14 = v6;
  v15 = v7;
  v16 = *(_OWORD *)(v4 + 3);
  v17 = *(_OWORD *)(v4 + 5);
  v18 = v8;
  v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v13, a3, a4);
  if ((v10 & 1) != 0)
  {
LABEL_5:
    v11 = 0;
    v12 = 1;
    goto LABEL_6;
  }
  v11 = v5 + v9;
  if (!__OFADD__(v5, v9))
  {
    v12 = 0;
LABEL_6:
    v4[8] = v11;
    *((_BYTE *)v4 + 72) = v12;
    return;
  }
  __break(1u);
}

void protocol witness for AccessibilityRotorContentTypeVisitor.visit<A>(type:) in conformance AccessibilityTupleRotorContent<A>.CountEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AccessibilityTupleRotorContent.CountEntries.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t static AccessibilityTupleRotorContent._makeEntries(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD v31[6];
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  v32 = v6;
  v33 = v7;
  v34 = v8;
  v35 = v9;
  v36 = *(_OWORD *)(a2 + 3);
  v37 = v10;
  v38 = v11;
  v13 = MEMORY[0x1E0DEE9D8];
  v39 = v12;
  v40 = MEMORY[0x1E0DEE9D8];
  v41 = 0;
  v31[3] = a3;
  v31[4] = &v32;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = static AccessibilityTupleRotorContent.visitTypes(_:)((void (*)(uint64_t, __int128 *))partial apply for closure #1 in static AccessibilityTupleRotorContent._makeEntries(content:inputs:));
  v16 = v40;
  v17 = *(_QWORD *)(v40 + 16);
  if (v17)
  {
    v31[0] = v13;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v18 = 0;
    v19 = *(_QWORD *)(v13 + 16);
    do
    {
      v20 = *(_DWORD *)(v16 + 4 * v18 + 32);
      v31[0] = v13;
      v21 = *(_QWORD *)(v13 + 24);
      if (v19 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v19 + 1, 1);
        v13 = v31[0];
      }
      ++v18;
      *(_QWORD *)(v13 + 16) = v19 + 1;
      *(_DWORD *)(v13 + 4 * v19++ + 32) = v20;
    }
    while (v17 != v18);
    v14 = swift_bridgeObjectRelease();
  }
  v31[0] = v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v28 = type metadata accessor for AccessibilityTupleRotorContent.MergeLists(0, a3, v22, v23);
  v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTupleRotorContent<A>.MergeLists, v28);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v31, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v27, v28, MEMORY[0x1E0DEDCE8], v24, MEMORY[0x1E0DEDD18], v25);
  swift_bridgeObjectRelease();
  *a4 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t AccessibilityTupleRotorContent.MakeLists.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  _BYTE v23[4];
  uint64_t v24;

  v5 = v4;
  LODWORD(v17) = *(_DWORD *)v4;
  type metadata accessor for AccessibilityTupleRotorContent(255, *(_QWORD *)(a2 + 16), a3, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  v8 = *(_DWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_DWORD *)(v4 + 64);
  v17 = *(_QWORD *)(v4 + 8);
  v18 = v8;
  v19 = v9;
  v11 = *(_OWORD *)(v4 + 48);
  v20 = *(_OWORD *)(v4 + 32);
  v21 = v11;
  v22 = v10;
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(&v24, v23, &v17, a3, a4);
  v12 = v24;
  v13 = *(_QWORD *)(v4 + 72);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, (char *)v13);
    v13 = result;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, (char *)v13);
    v13 = result;
  }
  *(_QWORD *)(v13 + 16) = v16 + 1;
  *(_DWORD *)(v13 + 4 * v16 + 32) = v12;
  *(_QWORD *)(v5 + 72) = v13;
  return result;
}

uint64_t protocol witness for AccessibilityRotorContentTypeVisitor.visit<A>(type:) in conformance AccessibilityTupleRotorContent<A>.MakeLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AccessibilityTupleRotorContent.MakeLists.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t AccessibilityTupleRotorContent.MergeLists.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _UNKNOWN **v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = 0;
    v4 = v13;
    do
    {
      Value = AGGraphGetValue();
      outlined init with copy of DropInfo(Value, (uint64_t)&v14);
      v8 = *(_QWORD *)(v13 + 16);
      v7 = *(_QWORD *)(v13 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      ++v5;
      *(_QWORD *)(v13 + 16) = v8 + 1;
      v9 = v13 + 40 * v8;
      v10 = v14;
      v11 = v15;
      *(_QWORD *)(v9 + 64) = v16;
      *(_OWORD *)(v9 + 32) = v10;
      *(_OWORD *)(v9 + 48) = v11;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  *((_QWORD *)&v15 + 1) = &unk_1E1ABEB68;
  v16 = &protocol witness table for CombineGenerator;
  *(_QWORD *)&v14 = v4;
  return outlined init with take of OptionalBinaryInteger(&v14, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityTupleRotorContent<A>.MergeLists@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return AccessibilityTupleRotorContent.MergeLists.value.getter(*v1, a1);
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance AccessibilityTupleRotorContent<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  return static AccessibilityTupleRotorContent._makeEntries(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t protocol witness for static AccessibilityRotorContent._entryCount(inputs:) in conformance AccessibilityTupleRotorContent<A>()
{
  return static AccessibilityTupleRotorContent._entryCount(inputs:)();
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance AccessibilityTupleRotorContent<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void one-time initialization function for typeCache()
{
  static AccessibilityRotorContentDescriptor.typeCache = MEMORY[0x1E0DEE9E0];
}

{
  static ToolbarContentDescriptor.typeCache = MEMORY[0x1E0DEE9E0];
}

{
  static CommandsDescriptor.typeCache = MEMORY[0x1E0DEE9E0];
}

{
  static TableColumnDescriptor.typeCache = MEMORY[0x1E0DEE9E0];
}

{
  static NavigationDestinationDescriptor.typeCache = MEMORY[0x1E0DEE9E0];
}

{
  static SceneDescriptor.typeCache = MEMORY[0x1E0DEE9E0];
}

{
  static WidgetDescriptor.typeCache = MEMORY[0x1E0DEE9E0];
}

{
  static TableRowDescriptor.typeCache = MEMORY[0x1E0DEE9E0];
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance AccessibilityRotorContentDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance AccessibilityRotorContentDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static AccessibilityRotorContentDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance AccessibilityRotorContentDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void ForEach<>.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static ForEach<>._entryCount(inputs:)()
{
  return 0;
}

void static ForEach<>._makeEntries(content:inputs:)()
{
  id v0;
  uint64_t v1;

  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v0 = (id)AGSubgraphGetCurrent();
  if (v0)
  {
    MEMORY[0x1E0C80A78](v0, v1);
    type metadata accessor for ForEach<>.MakeList();
  }
  __break(1u);
  JUMPOUT(0x1873DD88CLL);
}

void ForEach<>.MakeList.value.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE v18[16];
  unsigned int v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;

  v29 = a2;
  v4 = a1[2];
  v27 = a1[3];
  v28 = v4;
  v5 = a1[5];
  v26 = a1[4];
  v25 = v5;
  v24 = a1[6];
  v37 = v4;
  v38 = v27;
  v39 = v26;
  v40 = v5;
  v41 = v24;
  v6 = type metadata accessor for ForEach();
  MEMORY[0x1E0C80A78](v6, v7);
  v21 = &v18[-v8];
  v23 = *v2;
  v9 = *((_QWORD *)v2 + 1);
  v20 = v2[4];
  v10 = *((_QWORD *)v2 + 3);
  v11 = v2[9];
  v19 = v2[8];
  v12 = v2[10];
  v13 = v2[11];
  v14 = *((_QWORD *)v2 + 6);
  v15 = *((_QWORD *)v2 + 7);
  v16 = v2[16];
  v30 = *((_QWORD *)v2 + 9);
  LODWORD(v37) = v23;
  v38 = v9;
  v22 = v9;
  LODWORD(v39) = v20;
  v40 = v10;
  v41 = __PAIR64__(v11, v19);
  v42 = __PAIR64__(v13, v12);
  v43 = v14;
  v44 = v15;
  v45 = v16;
  v46 = v30;
  ForEach<>.PreferenceTransform.forEach.getter((uint64_t)&v18[-v8]);
  v37 = v9;
  LODWORD(v38) = v20;
  v39 = v10;
  v40 = __PAIR64__(v11, v19);
  v41 = __PAIR64__(v13, v12);
  v42 = v14;
  v43 = v15;
  LODWORD(v44) = v16;
  v17 = a1[7];
  v31 = v28;
  v32 = v27;
  v33 = v26;
  v34 = v25;
  v35 = v24;
  v36 = v17;
  type metadata accessor for ForEach<>.Generator();
}

void sub_1873DDA00(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *boxed_opaque_existential_1;

  v2 = *(uint64_t **)(v1 - 232);
  v2[3] = a1;
  v2[4] = (uint64_t)&protocol witness table for ForEach<A, B, C><>.Generator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2);
  ForEach<>.Generator.init(forEach:inputs:attribute:parentSubgraph:)(*(_QWORD *)(v1 - 296), (uint64_t)boxed_opaque_existential_1);
}

id sub_1873DDA4C()
{
  uint64_t v0;

  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return *(id *)(v0 - 224);
}

void ForEach<>.Generator.init(forEach:inputs:attribute:parentSubgraph:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for ForEach();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for ForEach<>.Generator();
}

__n128 sub_1873DDB50(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v5 = v2 + a1[17];
  *(_QWORD *)v5 = v1;
  *(_DWORD *)(v5 + 8) = v9;
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = v4;
  result = v7;
  *(__n128 *)(v5 + 40) = v7;
  *(_DWORD *)(v5 + 56) = v10;
  *(_DWORD *)(v2 + a1[18]) = v11;
  *(_QWORD *)(v2 + a1[19]) = v12;
  return result;
}

void ForEach<>.Generator.forEachContentList(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD v40[5];

  v34 = a1;
  v35 = a2;
  v5 = a3[5];
  v6 = a3[2];
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v39 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v17);
  v19 = (char *)&v27 - v18;
  v20 = (id)AGSubgraphGetGraph();
  v38 = (id)AGSubgraphCreate2();

  v21 = a3[3];
  v22 = a3[4];
  v36 = a3;
  v23 = a3[6];
  v40[0] = v6;
  v40[1] = v21;
  v30 = v22;
  v31 = v21;
  v40[2] = v22;
  v40[3] = v5;
  v33 = v5;
  v29 = v23;
  v40[4] = v23;
  type metadata accessor for ForEach();
  v37 = v3;
  ForEach.data.getter();
  dispatch thunk of Sequence.makeIterator()();
  v32 = v6;
  swift_getAssociatedConformanceWitness();
  v24 = v19;
  dispatch thunk of IteratorProtocol.next()();
  v25 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v14, 1, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v10, v14, AssociatedTypeWitness);
    AGGraphClearUpdate();
    v26 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in ForEach<>.Generator.forEachContentList(_:)(v37, (uint64_t)v10, v32, v31, v30, v33, v29, v36[7], (uint64_t)v40);
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v39);

}

void closure #1 in ForEach<>.Generator.forEachContentList(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v31 = a6;
  v32 = a7;
  v33 = a1;
  v34 = a9;
  v43 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v30 - v20;
  v37 = v22;
  v38 = v23;
  v39 = v24;
  v40 = v25;
  v41 = v26;
  v27 = *(void (**)(uint64_t))(a1 + *(int *)(type metadata accessor for ForEach() + 60));
  swift_retain();
  v27(a2);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v21, a5);
  v36 = a5;
  v28 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v35, a5, MEMORY[0x1E0DEDCE8], v28, MEMORY[0x1E0DEDD18], v29);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  _GraphValue.init(_:)();
  v37 = a3;
  v38 = a4;
  v39 = a5;
  v40 = v31;
  v41 = v32;
  v42 = a8;
  type metadata accessor for ForEach<>.Generator();
}

uint64_t sub_1873DE058(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t Value;

  v6 = *(_QWORD *)(v5 - 216) + *(int *)(a1 + 68);
  v7 = *(_DWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *(_DWORD *)(v6 + 56);
  *(_QWORD *)(v5 - 152) = *(_QWORD *)v6;
  *(_DWORD *)(v5 - 144) = v7;
  *(_QWORD *)(v5 - 136) = v8;
  v10 = *(_OWORD *)(v6 + 40);
  *(_OWORD *)(v5 - 128) = *(_OWORD *)(v6 + 24);
  *(_OWORD *)(v5 - 112) = v10;
  *(_DWORD *)(v5 - 96) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24))(v5 - 196, v5 - 152, v1, v3);
  Value = AGGraphGetValue();
  outlined init with copy of DropInfo(Value, *(_QWORD *)(v5 - 208));
  return v2(v4, v1);
}

uint64_t ForEach<>.Generator.visitEntries<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 v17;

  v17 = 1;
  v16 = 0;
  v6[1] = *(_OWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = a4;
  v9 = *(_OWORD *)(a3 + 40);
  v10 = *(_QWORD *)(a3 + 56);
  v11 = a5;
  v12 = a2;
  v13 = &v16;
  v14 = a1;
  v15 = &v17;
  ForEach<>.Generator.forEachContentList(_:)((uint64_t)partial apply for closure #1 in ForEach<>.Generator.visitEntries<A>(applying:from:), (uint64_t)v6, (_QWORD *)a3);
  return v17;
}

uint64_t closure #1 in ForEach<>.Generator.visitEntries<A>(applying:from:)(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v18 = a1[3];
  v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
  v21 = *a3;
  v22 = *a3 + result;
  v23 = __OFADD__(*a3, result);
  if (__OFADD__(*a3, result))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v24 = *a2;
  if (*a2 >= v22)
  {
LABEL_11:
    if (!v23)
    {
      *a3 = v22;
      return 1;
    }
    goto LABEL_16;
  }
  if (__OFSUB__(v24, v21))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v25 = result;
  v28 = (v24 - v21) & ~((v24 - v21) >> 63);
  v26 = a1[3];
  v27 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v26);
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(a4, &v28, a9, a13, v26, v27);
  if ((result & 1) != 0)
  {
    v22 = *a3 + v25;
    v23 = __OFADD__(*a3, v25);
    goto LABEL_11;
  }
  result = 0;
  *a5 = 0;
  return result;
}

uint64_t ForEach<>.Generator.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (uint64_t *)(v3 + *(int *)(v9 + 68));
  v12 = *((_DWORD *)v11 + 2);
  v13 = v11[2];
  v14 = *((_DWORD *)v11 + 14);
  v21 = *v11;
  LODWORD(v22) = v12;
  v23 = v13;
  v24 = *(_OWORD *)(v11 + 3);
  v25 = *(_OWORD *)(v11 + 5);
  v26 = v14;
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v9 + 56) + 32))(&v21, v10);
  if ((v16 & 1) == 0)
  {
    v17 = result;
    v18 = *(_QWORD *)(a1 + 24);
    v21 = v5;
    v22 = v18;
    v23 = v10;
    v20 = *(_OWORD *)(a1 + 40);
    v24 = v20;
    type metadata accessor for ForEach();
    ForEach.data.getter();
    v19 = dispatch thunk of Collection.count.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    result = v19 * v17;
    if ((unsigned __int128)(v19 * (__int128)v17) >> 64 == (v19 * v17) >> 63)
      return result;
    __break(1u);
  }
  v21 = 0;
  MEMORY[0x1E0C80A78](result, v16);
  *((_QWORD *)&v20 - 2) = &v21;
  ForEach<>.Generator.forEachContentList(_:)((uint64_t)partial apply for closure #1 in ForEach<>.Generator.count.getter, (uint64_t)(&v20 - 2), (_QWORD *)a1);
  return v21;
}

{
  return TableRowForEachState.count()(a1, a2);
}

uint64_t closure #1 in ForEach<>.Generator.count.getter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  if (__OFADD__(*a2, result))
  {
    __break(1u);
  }
  else
  {
    *a2 += result;
    return 1;
  }
  return result;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.visitEntries<A>(applying:from:) in conformance ForEach<A, B, C><>.Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ForEach<>.Generator.visitEntries<A>(applying:from:)(a1, a2, a5, a3, a4);
}

void protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance <> ForEach<A, B, C>()
{
  static ForEach<>._makeEntries(content:inputs:)();
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance <> ForEach<A, B, C>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ForEach<>.init(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[10];

  v20[0] = a2;
  v20[1] = a3;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18, v16);
  v20[2] = a4;
  v20[3] = a5;
  v20[4] = a6;
  v20[5] = a7;
  v20[6] = a8;
  v20[7] = a9;
  v20[9] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a4);
}

void AccessibilityRotorEntry.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static AccessibilityRotorEntry._makeEntries(content:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  _BYTE v19[16];
  uint64_t List;
  uint64_t v21;
  _DWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 40);
  v22[0] = *a1;
  type metadata accessor for AccessibilityRotorEntry(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v22[2] = v9;
  v23 = v10;
  v24 = v12;
  v25 = v13;
  v26 = v11;
  v22[0] = _GraphValue.value.getter();
  v22[1] = _GraphInputs.environment.getter();
  List = type metadata accessor for AccessibilityRotorEntry.MakeList(0, a3, a4, v14);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorEntry<A>.MakeList, List);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v22, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v19, List, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  *a5 = v18;
  return result;
}

uint64_t static AccessibilityRotorEntry._entryCount(inputs:)()
{
  return 1;
}

double AccessibilityRotorEntry.MakeList.value.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Value;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v7 = type metadata accessor for AccessibilityRotorEntry(0, a1, a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v19 - v10;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, Value, v7);
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(&v21);
  v20 = v21;
  AccessibilityRotorEntry.resolveForList(in:)(&v20, v7, (uint64_t)v22);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  a4[3] = type metadata accessor for AccessibilityRotorEntry.Generator(0, a1, a2, v13);
  a4[4] = (uint64_t)&protocol witness table for AccessibilityRotorEntry<A>.Generator;
  v14 = swift_allocObject();
  *a4 = v14;
  v15 = v26;
  *(_OWORD *)(v14 + 80) = v25;
  *(_OWORD *)(v14 + 96) = v15;
  *(_OWORD *)(v14 + 112) = v27;
  *(_BYTE *)(v14 + 128) = v28;
  v16 = v22[1];
  *(_OWORD *)(v14 + 16) = v22[0];
  *(_OWORD *)(v14 + 32) = v16;
  result = *(double *)&v23;
  v18 = v24;
  *(_OWORD *)(v14 + 48) = v23;
  *(_OWORD *)(v14 + 64) = v18;
  return result;
}

double protocol witness for Rule.value.getter in conformance AccessibilityRotorEntry<A>.MakeList@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  return AccessibilityRotorEntry.MakeList.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t AccessibilityRotorEntry.Generator.visitEntries<A>(applying:from:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 8))(v5, a4, a5);
  if (__OFADD__(*a2, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a2;
    return result & 1;
  }
  return result;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.visitEntries<A>(applying:from:) in conformance AccessibilityRotorEntry<A>.Generator(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AccessibilityRotorEntry.Generator.visitEntries<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance AccessibilityRotorEntry<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  return static AccessibilityRotorEntry._makeEntries(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance AccessibilityRotorEntry<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AccessibilityOptionalRotorContent.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AccessibilityOptionalRotorContent.content.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AccessibilityOptionalRotorContent.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void AccessibilityOptionalRotorContent.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static AccessibilityOptionalRotorContent._makeEntries(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t List;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v14 = a2[5];
  v13 = a2[6];
  v15 = *((_DWORD *)a2 + 14);
  v28 = *a1;
  type metadata accessor for AccessibilityOptionalRotorContent(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v16 = _GraphValue.value.getter();
  v17 = (id)AGSubgraphGetCurrent();
  if (!v17)
    __break(1u);
  v28 = v16;
  v29 = v8;
  v30 = v9;
  v31 = v10;
  v32 = v11;
  v33 = v12;
  v34 = v14;
  v35 = v13;
  v36 = v15;
  v37 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  List = type metadata accessor for AccessibilityOptionalRotorContent.MakeList(0, a3, a4, v19);
  v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityOptionalRotorContent<A>.MakeList, List);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v21 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v28, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v24, List, MEMORY[0x1E0DEDCE8], v21, MEMORY[0x1E0DEDD18], v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *a5 = v27;
  return result;
}

uint64_t AccessibilityOptionalRotorContent.MakeList.optionalContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for AccessibilityOptionalRotorContent(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

id AccessibilityOptionalRotorContent.MakeList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v25[20];
  int v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  id v45;

  v4 = *(_QWORD *)(a1 + 24);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = a3;
  v30 = a1;
  v31 = v4;
  v5 = type metadata accessor for AccessibilityOptionalRotorContent(0, v32, v4, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  v29 = *(_DWORD *)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v26 = *(_DWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_DWORD *)(v3 + 32);
  v10 = *(_DWORD *)(v3 + 36);
  v11 = *(_DWORD *)(v3 + 40);
  v12 = *(_DWORD *)(v3 + 44);
  v14 = *(_QWORD *)(v3 + 48);
  v13 = *(_QWORD *)(v3 + 56);
  v15 = *(_DWORD *)(v3 + 64);
  v34 = *(id *)(v3 + 72);
  LODWORD(v35) = v29;
  v36 = v7;
  v27 = &v25[-v16];
  v28 = v7;
  LODWORD(v37) = v26;
  v38 = v8;
  v39 = v9;
  v40 = v10;
  v41 = __PAIR64__(v12, v11);
  v42 = v14;
  v43 = v13;
  v44 = v15;
  v45 = v34;
  AccessibilityOptionalRotorContent.MakeList.optionalContent.getter(v30, v17, (uint64_t)&v25[-v16]);
  v35 = v7;
  LODWORD(v36) = v26;
  v37 = v8;
  v38 = __PAIR64__(v10, v9);
  v39 = v11;
  v40 = v12;
  v41 = v14;
  v42 = v13;
  LODWORD(v43) = v15;
  v19 = v31;
  v18 = v32;
  v21 = type metadata accessor for AccessibilityOptionalRotorContent.Generator(0, v32, v31, v20);
  v22 = v33;
  v33[3] = v21;
  v22[4] = (uint64_t)&protocol witness table for AccessibilityOptionalRotorContent<A>.Generator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  AccessibilityOptionalRotorContent.Generator.init(optionalContent:inputs:attribute:parentSubgraph:)((uint64_t)v27, &v35, v29, (uint64_t)v34, v18, v19, (uint64_t)boxed_opaque_existential_1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v34;
}

__n128 AccessibilityOptionalRotorContent.Generator.init(optionalContent:inputs:attribute:parentSubgraph:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  __n128 result;
  __n128 v24;

  v13 = *a2;
  v14 = *((_DWORD *)a2 + 2);
  v15 = a2[2];
  v16 = *((_DWORD *)a2 + 14);
  v17 = type metadata accessor for AccessibilityOptionalRotorContent(0, a5, a6, a4);
  v24 = *(__n128 *)(a2 + 5);
  v18 = a2[3];
  v19 = a2[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a7, a1, v17);
  v21 = (int *)type metadata accessor for AccessibilityOptionalRotorContent.Generator(0, a5, a6, v20);
  v22 = a7 + v21[9];
  *(_QWORD *)v22 = v13;
  *(_DWORD *)(v22 + 8) = v14;
  *(_QWORD *)(v22 + 16) = v15;
  *(_QWORD *)(v22 + 24) = v18;
  *(_QWORD *)(v22 + 32) = v19;
  result = v24;
  *(__n128 *)(v22 + 40) = v24;
  *(_DWORD *)(v22 + 56) = v16;
  *(_DWORD *)(a7 + v21[10]) = a3;
  *(_QWORD *)(a7 + v21[11]) = a4;
  return result;
}

uint64_t AccessibilityOptionalRotorContent.Generator.someContentList.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  _OWORD *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  v3 = v2;
  v30 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v29 - v9;
  v11 = *(_QWORD *)(a1 + 24);
  v13 = type metadata accessor for AccessibilityOptionalRotorContent(0, v5, v11, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v29 - v15;
  v17 = *(_QWORD *)(v5 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v23 + 16))(v16, v3, v20);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v16, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v5) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v25 = (_OWORD *)v30;
    *(_QWORD *)(v30 + 32) = 0;
    *v25 = 0u;
    v25[1] = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v10, v5);
    v26 = (id)AGSubgraphGetGraph();
    v27 = (void *)AGSubgraphCreate2();

    AGGraphClearUpdate();
    v28 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in AccessibilityOptionalRotorContent.Generator.someContentList.getter((uint64_t)v22, v3, v5, v11, v30);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v5);
  }
  return result;
}

uint64_t closure #1 in AccessibilityOptionalRotorContent.Generator.someContentList.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t Value;
  _BYTE v24[16];
  _DWORD v25[7];
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a1);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 4];
  (*(void (**)(char *, double))(v9 + 16))(v12, v10);
  *(_QWORD *)&v25[5] = a3;
  v13 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)closure #1 in Attribute.init(value:)partial apply, (uint64_t)&v25[1], a3, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a3);
  _GraphValue.init(_:)();
  v16 = (uint64_t *)(a2
                  + *(int *)(type metadata accessor for AccessibilityOptionalRotorContent.Generator(0, a3, a4, v15)
                           + 36));
  v17 = *((_DWORD *)v16 + 2);
  v18 = v16[2];
  v19 = *((_DWORD *)v16 + 14);
  v26 = *v16;
  v27 = v17;
  v28 = v18;
  v20 = *(_OWORD *)(v16 + 5);
  v29 = *(_OWORD *)(v16 + 3);
  v30 = v20;
  v31 = v19;
  (*(void (**)(_DWORD *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(v25, v24, &v26, a3, a4);
  Value = AGGraphGetValue();
  return outlined init with copy of DropInfo(Value, a5);
}

uint64_t AccessibilityOptionalRotorContent.Generator.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  uint64_t v9;

  AccessibilityOptionalRotorContent.Generator.someContentList.getter(a1, (uint64_t)v8);
  if (v9)
  {
    outlined init with copy of TableColumnList((uint64_t)v8, (uint64_t)v5);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v8);
    v1 = v6;
    v2 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    outlined destroy of AccessibilityRotorEntryList?((uint64_t)v8);
    return 0;
  }
  return v3;
}

uint64_t AccessibilityOptionalRotorContent.Generator.visitEntries<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;

  AccessibilityOptionalRotorContent.Generator.someContentList.getter(a3, (uint64_t)v16);
  if (v17)
  {
    outlined init with copy of TableColumnList((uint64_t)v16, (uint64_t)v13);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v16);
    v9 = v14;
    v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, a2, a4, a5, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    outlined destroy of AccessibilityRotorEntryList?((uint64_t)v16);
    v11 = 1;
  }
  return v11 & 1;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.visitEntries<A>(applying:from:) in conformance AccessibilityOptionalRotorContent<A>.Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AccessibilityOptionalRotorContent.Generator.visitEntries<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance AccessibilityOptionalRotorContent<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  return static AccessibilityOptionalRotorContent._makeEntries(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance AccessibilityOptionalRotorContent<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Group<A>.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t Group<A>.init(content:)(uint64_t a1, uint64_t a2)
{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

uint64_t static Group<A>._makeEntries(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  _BYTE v22[4];

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 14);
  LODWORD(v15) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  v14 = *(_OWORD *)(a2 + 5);
  v11 = a2[3];
  v12 = a2[4];
  _GraphValue.subscript.getter();
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = v11;
  v19 = v12;
  v20 = v14;
  v21 = v10;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(v22, &v15, a3, a4);
}

uint64_t closure #1 in static Group<A>._makeEntries(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v7[2] = type metadata accessor for Group();
  v7[3] = a2;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[5];
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeEntries(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance <A> Group<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t CombineGenerator.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    v3 = 0;
    while (1)
    {
      outlined init with copy of DropInfo(v2, (uint64_t)v8);
      v4 = v9;
      v5 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      v7 = __OFADD__(v3, result);
      v3 += result;
      if (v7)
        break;
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v8);
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t CombineGenerator.visitEntries<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return 1;
  v9 = a3 + 32;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    outlined init with copy of DropInfo(v9, (uint64_t)v22);
    v11 = v23;
    v12 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
    v14 = v10 + result;
    if (__OFADD__(v10, result))
      break;
    v15 = *a2;
    if (*a2 < v14)
    {
      v16 = __OFSUB__(v15, v10);
      v17 = v15 - v10;
      if (v16)
        goto LABEL_13;
      v21 = v17 & ~(v17 >> 63);
      v18 = v23;
      v19 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8))(a1, &v21, a4, a5, v18, v19) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
        return 0;
      }
    }
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
    v9 += 40;
    v10 = v14;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.visitEntries<A>(applying:from:) in conformance CombineGenerator(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return CombineGenerator.visitEntries<A>(applying:from:)(a1, a2, *v4, a3, a4);
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.count.getter in conformance CombineGenerator()
{
  uint64_t *v0;

  return CombineGenerator.count.getter(*v0);
}

void partial apply for closure #1 in static AccessibilityTupleRotorContent._entryCount(inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = type metadata accessor for AccessibilityTupleRotorContent.CountEntries(0, *(_QWORD *)(v4 + 16), a3, a4);
  AccessibilityTupleRotorContent.CountEntries.visit<A>(type:)(v5, v7, v5, v6);
}

uint64_t partial apply for closure #1 in static AccessibilityTupleRotorContent._makeEntries(content:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Lists;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(*(_QWORD *)(v4 + 24) + 80) = a1;
  Lists = type metadata accessor for AccessibilityTupleRotorContent.MakeLists(0, v5, a3, a4);
  return AccessibilityTupleRotorContent.MakeLists.visit<A>(type:)(v6, Lists, v6, v7);
}

uint64_t type metadata accessor for AccessibilityTupleRotorContent.MergeLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityTupleRotorContent.MergeLists);
}

void type metadata accessor for ForEach<>.MakeList()
{
  JUMPOUT(0x18D75FF28);
}

{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_1873DFB24()
{
  return 48;
}

__n128 sub_1873DFB30(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t type metadata accessor for AccessibilityRotorEntry.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRotorEntry.MakeList);
}

uint64_t type metadata accessor for AccessibilityOptionalRotorContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityOptionalRotorContent);
}

uint64_t type metadata accessor for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityOptionalRotorContent.MakeList);
}

uint64_t partial apply for closure #1 in static Group<A>._makeEntries(content:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static Group<A>._makeEntries(content:inputs:)(a1, *(_QWORD *)(v1 + 16));
}

_UNKNOWN **associated type witness table accessor for AccessibilityRotorContent.Body : AccessibilityRotorContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of static AccessibilityRotorContent._makeEntries(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static AccessibilityRotorContent._entryCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AccessibilityRotorContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

ValueMetadata *type metadata accessor for _AccessibilityRotorEntryInputs()
{
  return &type metadata for _AccessibilityRotorEntryInputs;
}

ValueMetadata *type metadata accessor for _AccessibilityRotorEntryOutputs()
{
  return &type metadata for _AccessibilityRotorEntryOutputs;
}

ValueMetadata *type metadata accessor for AccessibilityRotorContentBuilder()
{
  return &type metadata for AccessibilityRotorContentBuilder;
}

uint64_t getEnumTagSinglePayload for AccessibilityTupleRotorContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1873DFC94 + 4 * byte_187C2B850[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityTupleRotorContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AccessibilityTupleRotorContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityTupleRotorContent);
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityOptionalRotorContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *initializeWithTake for AccessibilityOptionalRotorContent(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for AccessibilityOptionalRotorContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityOptionalRotorContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for AccessibilityOptionalRotorContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1873E03D8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1873E03E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void destroy for AccessibilityOptionalRotorContent.MakeList(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(void **)(a2 + 72);
  v5 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityOptionalRotorContent.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRotorEntryList()
{
  return &type metadata for AccessibilityRotorEntryList;
}

void base witness table accessor for _AttributeBody in AccessibilityOptionalRotorContent<A>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityRotorEntry<A>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ForEach<A, B, C><>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityTupleRotorContent<A>.MergeLists()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for ForEach<>.Generator()
{
  JUMPOUT(0x18D75FF28);
}

{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for AccessibilityRotorEntry.Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRotorEntry.Generator);
}

uint64_t sub_1873E0754()
{
  uint64_t v0;
  int v1;

  if (*(unsigned __int8 *)(v0 + 64) <= 1u)
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 != 255)
    outlined consume of AccessibilityRotorEntryRange(*(id *)(v0 + 80), *(_QWORD *)(v0 + 88), v1);
  swift_release();
  return swift_deallocObject();
}

void outlined consume of AccessibilityRotorEntryRange(id a1, uint64_t a2, char a3)
{
  if (a3 == 2)

}

uint64_t type metadata accessor for AccessibilityOptionalRotorContent.Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityOptionalRotorContent.Generator);
}

unint64_t lazy protocol witness table accessor for type Focus<Never, Never> and conformance Focus<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Focus<Never, Never> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<Never, Never> and conformance Focus<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDCE8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CFECD8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<Never, Never> and conformance Focus<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityTupleRotorContent.MakeLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityTupleRotorContent.MakeLists);
}

unint64_t lazy protocol witness table accessor for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor;
  if (!lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorContentDescriptor, &type metadata for AccessibilityRotorContentDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor;
  if (!lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorContentDescriptor, &type metadata for AccessibilityRotorContentDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityTupleRotorContent.CountEntries);
}

uint64_t initializeWithCopy for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  return a1;
}

uint64_t assignWithTake for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityTupleRotorContent.CountEntries(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRotorContentDescriptor()
{
  return &type metadata for AccessibilityRotorContentDescriptor;
}

uint64_t destroy for AccessibilityTupleRotorContent.MakeLists()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityTupleRotorContent.MakeLists(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityTupleRotorContent.MakeLists(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for AccessibilityTupleRotorContent.MakeLists(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for EmptyGenerator()
{
  return &type metadata for EmptyGenerator;
}

uint64_t type metadata completion function for AccessibilityOptionalRotorContent.Generator()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityOptionalRotorContent.Generator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  void **v15;
  void *v16;
  id v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if ((v7 & 0x1000F8) != 0
    || ((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v11 = ((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
    *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v11 + 28) = *(_DWORD *)(v12 + 28);
    *(_DWORD *)(v11 + 32) = *(_DWORD *)(v12 + 32);
    *(_DWORD *)(v11 + 36) = *(_DWORD *)(v12 + 36);
    *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
    *(_DWORD *)(v11 + 56) = *(_DWORD *)(v12 + 56);
    v13 = (_DWORD *)((v11 + 63) & 0xFFFFFFFFFFFFFCLL);
    v14 = (_DWORD *)((v12 + 63) & 0xFFFFFFFFFFFFFCLL);
    *v13 = *v14;
    v15 = (void **)(((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFF8);
    v16 = *v15;
    *(_QWORD *)(((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFF8) = *v15;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v16;
  }
  return a1;
}

void destroy for AccessibilityOptionalRotorContent.Generator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  v5 = a1 + *(_QWORD *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84))
    ++v5;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void *initializeWithCopy for AccessibilityOptionalRotorContent.Generator(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  void **v16;
  void *v17;
  id v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = v10 + 7;
  v12 = ((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
  *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
  *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(v13 + 36);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
  *(_DWORD *)(v12 + 56) = *(_DWORD *)(v13 + 56);
  v14 = (_DWORD *)((v12 + 63) & 0xFFFFFFFFFFFFFCLL);
  v15 = (_DWORD *)((v13 + 63) & 0xFFFFFFFFFFFFFCLL);
  *v14 = *v15;
  v16 = (void **)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFF8);
  v17 = *v16;
  *(_QWORD *)(((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFF8) = *v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v17;
  return a1;
}

void *assignWithCopy for AccessibilityOptionalRotorContent.Generator(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  void **v17;
  void *v18;
  void *v19;
  id v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = v11 + 7;
  v13 = ((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_retain();
  swift_release();
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
  *(_DWORD *)(v13 + 28) = *(_DWORD *)(v14 + 28);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(v14 + 36);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v14 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v13 + 56) = *(_DWORD *)(v14 + 56);
  v15 = (_DWORD *)((v13 + 63) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)((v14 + 63) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (void **)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8);
  v18 = *(void **)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFF8);
  v19 = *v17;
  *v17 = v18;
  v20 = v18;

  return a1;
}

void *initializeWithTake for AccessibilityOptionalRotorContent.Generator(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = v10 + 7;
  v12 = (_OWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (__int128 *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  *(_OWORD *)((char *)v12 + 44) = *(__int128 *)((char *)v13 + 44);
  v12[1] = v15;
  v12[2] = v16;
  *v12 = v14;
  v17 = (_DWORD *)(((unint64_t)v12 + 63) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v13 + 63) & 0xFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  *(_QWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for AccessibilityOptionalRotorContent.Generator(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  void **v17;
  void *v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = v11 + 7;
  v13 = ((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_release();
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  swift_release();
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
  *(_DWORD *)(v13 + 28) = *(_DWORD *)(v14 + 28);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(v14 + 36);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v14 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v13 + 56) = *(_DWORD *)(v14 + 56);
  v15 = (_DWORD *)((v13 + 63) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)((v14 + 63) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (void **)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v17;
  *v17 = *(void **)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityOptionalRotorContent.Generator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X16 }
  }
  if (v6 < 0x7FFFFFFF)
  {
    v14 = *(_QWORD *)(((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
  else
  {
    v13 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for AccessibilityOptionalRotorContent.Generator(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((((_DWORD)v11 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((_DWORD)v11 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1873E184C@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t result;

  v12[v13] = 0;
  if (a1)
  {
    if (v10 < 0x7FFFFFFF)
    {
      v15 = (unint64_t)&v12[a2 + 7] & 0xFFFFFFFFFFFFFFF8;
      if ((a1 & 0x80000000) != 0)
      {
        *(_OWORD *)(v15 + 40) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 8) = 0u;
        *(_DWORD *)(v15 + 56) = 0;
        *(_QWORD *)v15 = a1 ^ 0x80000000;
      }
      else
      {
        *(_QWORD *)(v15 + 16) = a1 - 1;
      }
    }
    else if (v10 >= a1)
    {
      return (*(uint64_t (**)(_BYTE *, _QWORD))(v11 + 56))(v12, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v14 = a2;
      else
        v14 = 4;
      bzero(v12, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_1873E195C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1873E196C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1873E1974()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

id outlined copy of AccessibilityRotorEntryRange(id result, uint64_t a2, char a3)
{
  if (a3 == 2)
    return result;
  return result;
}

uint64_t destroy for AccessibilityRotorEntry.Generator(uint64_t a1)
{
  int v2;

  if (*(unsigned __int8 *)(a1 + 48) <= 1u)
    __swift_destroy_boxed_opaque_existential_1(a1);

  v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 != 255)
    outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 64), *(_QWORD *)(a1 + 72), v2);
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityRotorEntry.Generator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  void *v8;
  int v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 48) == 1)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v6 = 1;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 48) = 0;
      goto LABEL_7;
    }
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v6 = *(_BYTE *)(a2 + 48);
  }
  *(_BYTE *)(a1 + 48) = v6;
LABEL_7:
  v8 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(unsigned __int8 *)(a2 + 80);
  v10 = v8;
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }
  else
  {
    v11 = *(void **)(a2 + 64);
    v12 = *(_QWORD *)(a2 + 72);
    outlined copy of AccessibilityRotorEntryRange(v11, v12, v9);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 80) = v9;
  }
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorEntry.Generator(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  void *v10;
  id v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
    if (*((_BYTE *)a2 + 48) == 1)
    {
      v5 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else if (*((_BYTE *)a2 + 48))
    {
      v6 = *a2;
      v7 = a2[1];
      v8 = a2[2];
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v4 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 48) = 0;
    }
  }
  v9 = *(void **)(a1 + 56);
  v10 = (void *)*((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = v10;

  v12 = (__int128 *)(a1 + 64);
  v13 = a2 + 4;
  v14 = *((unsigned __int8 *)a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v14 == 255)
    {
      v23 = *v13;
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *v12 = v23;
    }
    else
    {
      v20 = (void *)*((_QWORD *)a2 + 8);
      v21 = *((_QWORD *)a2 + 9);
      outlined copy of AccessibilityRotorEntryRange(v20, v21, *((_BYTE *)a2 + 80));
      *(_QWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 72) = v21;
      *(_BYTE *)(a1 + 80) = v14;
    }
  }
  else if (v14 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
    v22 = *((_BYTE *)a2 + 80);
    *v12 = *v13;
    *(_BYTE *)(a1 + 80) = v22;
  }
  else
  {
    v15 = (void *)*((_QWORD *)a2 + 8);
    v16 = *((_QWORD *)a2 + 9);
    outlined copy of AccessibilityRotorEntryRange(v15, v16, *((_BYTE *)a2 + 80));
    v17 = *(void **)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v16;
    v19 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v14;
    outlined consume of AccessibilityRotorEntryRange(v17, v18, v19);
  }
  v24 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = v24;
  swift_retain();
  swift_release();
  v25 = *((_QWORD *)a2 + 13);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 104) = v25;
  return a1;
}

uint64_t outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AccessibilityRotorEntryElementSpecifier<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntryElementSpecifier);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of AccessibilityRotorEntryRange(uint64_t a1)
{
  destroy for AccessibilityRotorEntryRange(a1);
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityRotorEntry.Generator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  _OWORD *v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  }
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  v6 = (_OWORD *)(a2 + 64);
  v7 = *(unsigned __int8 *)(a1 + 80);
  if (v7 == 255)
    goto LABEL_7;
  v8 = *(unsigned __int8 *)(a2 + 80);
  if (v8 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
LABEL_7:
    *(_OWORD *)(a1 + 64) = *v6;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    goto LABEL_8;
  }
  v9 = *(void **)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *v6;
  *(_BYTE *)(a1 + 80) = v8;
  outlined consume of AccessibilityRotorEntryRange(v9, v10, v7);
LABEL_8:
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorEntry.Generator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityRotorEntry.Generator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata completion function for ForEach<>.Generator()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ForEach();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForEach<>.Generator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  void **v21;
  void *v22;
  id v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x1000F8) != 0
    || (v7 = *(_QWORD *)(v5 + 64),
        v8 = (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8,
        ((((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18))
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v24 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v9 = v8 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
    *v15 = *v16;
    *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
    v17 = ((unint64_t)v4 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_DWORD *)(v17 + 8) = *(_DWORD *)(v18 + 8);
    *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
    *(_DWORD *)(v17 + 24) = *(_DWORD *)(v18 + 24);
    *(_DWORD *)(v17 + 28) = *(_DWORD *)(v18 + 28);
    *(_DWORD *)(v17 + 32) = *(_DWORD *)(v18 + 32);
    *(_DWORD *)(v17 + 36) = *(_DWORD *)(v18 + 36);
    *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
    *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
    *(_DWORD *)(v17 + 56) = *(_DWORD *)(v18 + 56);
    v19 = (_DWORD *)((v17 + 63) & 0xFFFFFFFFFFFFFCLL);
    v20 = (_DWORD *)((v18 + 63) & 0xFFFFFFFFFFFFFCLL);
    *v19 = *v20;
    v21 = (void **)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFF8);
    v22 = *v21;
    *(_QWORD *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFF8) = *v21;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v22;
  }
  return v4;
}

void destroy for ForEach<>.Generator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + 7;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_release(*(id *)((((((a1
                          + (((((((v4 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 63) & 0xFFFFFFFFFFFFFCLL)
                      + 11) & 0xFFFFFFFFFFFFF8));
}

uint64_t initializeWithCopy for ForEach<>.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  void **v19;
  void *v20;
  id v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v15 = (a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(v16 + 32);
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(v16 + 36);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(v16 + 56);
  v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)((v16 + 63) & 0xFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (void **)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFF8);
  v20 = *v19;
  *(_QWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8) = *v19;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v20;
  return a1;
}

uint64_t assignWithCopy for ForEach<>.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  void **v19;
  void *v20;
  void *v21;
  id v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_retain();
  swift_release();
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v15 = (a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  swift_retain();
  swift_release();
  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(v16 + 32);
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(v16 + 36);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v16 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(v16 + 56);
  v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)((v16 + 63) & 0xFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (void **)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  v20 = *(void **)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFF8);
  v21 = *v19;
  *v19 = v20;
  v22 = v20;

  return a1;
}

uint64_t initializeWithTake for ForEach<>.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  _DWORD *v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v14 = (_OWORD *)((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((a2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = *(_OWORD *)((char *)v15 + 44);
  v18 = v15[1];
  v17 = v15[2];
  *v14 = *v15;
  v14[1] = v18;
  v14[2] = v17;
  *(_OWORD *)((char *)v14 + 44) = v16;
  v19 = (_DWORD *)(((unint64_t)v14 + 63) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_DWORD *)(((unint64_t)v15 + 63) & 0xFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  *(_QWORD *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ForEach<>.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  void **v18;
  void *v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v14 = (a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (a2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  swift_release();
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  swift_release();
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 + 28);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 + 36);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 + 56);
  v16 = (_DWORD *)((v14 + 63) & 0xFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = (void **)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  *v18 = *(void **)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ForEach<>.Generator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 63) & 0xFFFFFFFFFFFFFFFCLL)
           + 11) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1873E28C4 + 4 * byte_187C2B87F[v10]))();
  }
}

void storeEnumTagSinglePayload for ForEach<>.Generator(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 63) & 0xFFFFFFFC)
         + 11) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 63) & 0xFFFFFFFC)
       + 11) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 63) & 0xFFFFFFFFFFFFFFFCLL)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1873E2A6C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1873E2AE4);
}

void sub_1873E2A74(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1873E2A7CLL);
  JUMPOUT(0x1873E2AE4);
}

void sub_1873E2ABC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1873E2AE4);
}

void sub_1873E2AC4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1873E2AE4);
}

uint64_t sub_1873E2ACC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1873E2AE4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1873E2AE0);
    JUMPOUT(0x1873E2AD8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void *type metadata accessor for CombineGenerator()
{
  return &unk_1E1ABEB68;
}

uint64_t partial apply for closure #1 in ForEach<>.Generator.count.getter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in ForEach<>.Generator.count.getter(a1, *(_QWORD **)(v1 + 16));
}

uint64_t specialized ForEach.content.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 60));
}

uint64_t partial apply for closure #1 in ForEach<>.Generator.visitEntries<A>(applying:from:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in ForEach<>.Generator.visitEntries<A>(applying:from:)(a1, *(uint64_t **)(v1 + 80), *(_QWORD **)(v1 + 88), *(_QWORD *)(v1 + 96), *(_BYTE **)(v1 + 104), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72)) & 1;
}

uint64_t outlined destroy of AccessibilityRotorEntryList?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityRotorEntryList?, (uint64_t)&type metadata for AccessibilityRotorEntryList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in Attribute.init(value:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in Attribute.init(value:)(a1);
}

void DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v13;

  *(_BYTE *)a5 = 1;
  *(_QWORD *)(a5 + 8) = a7;
  *(_QWORD *)(a5 + 16) = a11;
  outlined init with copy of TableColumnList(a1, a5 + 24);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a6;
  v13[3] = a7;
  v13[4] = a8;
  v13[5] = a9;
  v13[6] = a10;
  v13[7] = a11;
  v13[8] = a12;
  v13[9] = a2;
  v13[10] = a3;
  v13[11] = a4;
  type metadata accessor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer();
}

void sub_1873E2CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v29 = type metadata accessor for ModifiedContent();
  v30 = type metadata accessor for ModifiedContent();
  v31 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>, a1);
  v32 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  a21 = v31;
  a22 = v32;
  v33 = MEMORY[0x1E0CE2E70];
  v34 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v29, &a21);
  v35 = *(_QWORD *)(a11 + 8);
  a19 = v34;
  a20 = v35;
  v36 = MEMORY[0x18D75FFDC](v33, v30, &a19);
  ObservableDocumentBoxInputView.init(modelType:content:)(v27, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:));
  swift_retain();
  a23 = v27;
  a24 = v30;
  a27 = v36;
  type metadata accessor for ObservableDocumentBoxInputView();
}

uint64_t sub_1873E2DC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0[8] = AnyView.init<A>(_:)();
  v0[9] = v6;
  v0[10] = v7;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = type metadata accessor for UTType();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_187BF9830;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v4 + v3, v9, v1);
  v0[11] = v4;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v9, v1);
  v0[12] = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, void (*a2)(_BYTE *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[2];
  char *v49;
  void (*v50)(_BYTE *);
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  uint64_t v67;

  v55 = a7;
  v61 = a6;
  v51 = a3;
  v50 = a2;
  v48[1] = a1;
  v62 = a8;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v53 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLDocumentConfiguration();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v49 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  v54 = a4;
  v21 = type metadata accessor for ModifiedContent();
  v56 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v57 = (char *)v48 - v27;
  v28 = type metadata accessor for _ConditionalContent();
  v59 = *(_QWORD *)(v28 - 8);
  v60 = v28;
  MEMORY[0x1E0C80A78](v28, v29);
  v58 = (char *)v48 - v30;
  v31 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 24);
  swift_unknownObjectRetain();
  LOBYTE(a4) = v31(a5, a9);
  swift_unknownObjectRelease();
  if ((a4 & 1) != 0)
  {
    v32 = *(void (**)(uint64_t, uint64_t))(a9 + 56);
    swift_unknownObjectRetain();
    v33 = a5;
    v32(a5, a9);
    swift_unknownObjectRelease();
    *v17 = 0;
    v34 = v49;
    v50(v17);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for URLDocumentConfiguration);
    swift_getKeyPath();
    v35 = v53;
    v36 = v54;
    v37 = v61;
    DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.configuration.getter(v33, v53, a9, (void (*)(_QWORD))type metadata accessor for DocumentConfiguration);
    v38 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v35, 0, 1, v38);
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v36);
    v39 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
    v63[0] = v37;
    v63[1] = v39;
    v40 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v21, v63);
    v41 = (uint64_t)v57;
    static ViewBuilder.buildExpression<A>(_:)(v24, v21, v40);
    v42 = *(void (**)(char *, uint64_t))(v56 + 8);
    v42(v24, v21);
    static ViewBuilder.buildBlock<A>(_:)(v41, v21, (uint64_t)v24);
    v43 = (uint64_t)v58;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v24, v21);
    v42(v24, v21);
    v42((char *)v41, v21);
  }
  else
  {
    v67 = static Color.clear.getter();
    v44 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
    v37 = v61;
    v66[0] = v61;
    v66[1] = v44;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v21, v66);
    v43 = (uint64_t)v58;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v67, v21, MEMORY[0x1E0CE7170]);
    swift_release();
  }
  v45 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
  v65[0] = v37;
  v65[1] = v45;
  v64[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v21, v65);
  v64[1] = MEMORY[0x1E0CE7140];
  v46 = v60;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v60, v64);
  static ViewBuilder.buildBlock<A>(_:)(v43, v46, v62);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v43, v46);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>(_QWORD *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.body.getter);
}

uint64_t DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 56);
  type metadata accessor for DocumentConfiguration();
  v6 = *(_QWORD *)(a1 + 24);
  swift_unknownObjectRetain();
  v5(v6, v4);
  result = swift_unknownObjectRelease();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EagerViewerManagedDocumentContainer<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.body.getter(a1, (void (*)(uint64_t))DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.configuration.getter, a2);
}

void DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v13;

  *(_BYTE *)a5 = 0;
  *(_QWORD *)(a5 + 8) = a7;
  *(_QWORD *)(a5 + 16) = a11;
  outlined init with copy of TableColumnList(a4, a5 + 24);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a6;
  v13[3] = a7;
  v13[4] = a8;
  v13[5] = a9;
  v13[6] = a10;
  v13[7] = a11;
  v13[8] = a12;
  v13[9] = a1;
  v13[10] = a2;
  v13[11] = a3;
  type metadata accessor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer();
}

void sub_1873E34D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v31 = type metadata accessor for ModifiedContent();
  v32 = type metadata accessor for ModifiedContent();
  v33 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>, a1);
  v34 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  a23 = v33;
  a24 = v34;
  v35 = MEMORY[0x1E0CE2E70];
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v31, &a23);
  v37 = *(_QWORD *)(a12 + 8);
  a21 = v36;
  a22 = v37;
  v38 = MEMORY[0x18D75FFDC](v35, v32, &a21);
  ObservableDocumentBoxInputView.init(modelType:content:)(v29, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:));
  swift_retain();
  a25 = v29;
  a26 = v32;
  a29 = v38;
  type metadata accessor for ObservableDocumentBoxInputView();
}

uint64_t sub_1873E35C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(unint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0[8] = AnyView.init<A>(_:)();
  v0[9] = v8;
  v0[10] = v9;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = type metadata accessor for UTType();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_187BF9830;
  v5 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16);
  v5(v4 + v3, v10, v1);
  v0[11] = v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  v5(v6 + v3, v10, v1);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v11);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v10, v1);
  v0[12] = v6;
  return result;
}

uint64_t closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(_QWORD, uint64_t *), uint64_t a14)
{
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v35 = a7;
  v36 = a4;
  v38 = a9;
  v32 = a8;
  v33 = a14;
  v34 = a12;
  v37 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain();
  swift_retain();
  v44 = ObservedObject.init(wrappedValue:)();
  *(_QWORD *)&v45 = v20;
  *((_QWORD *)&v45 + 1) = a2;
  v46 = a3;
  v40 = a5;
  *(_QWORD *)&v41 = a6;
  *((_QWORD *)&v41 + 1) = v32;
  v42 = a10;
  v43 = a11;
  v21 = a13(0, &v40);
  v22 = MEMORY[0x18D75FFDC](v33, v21);
  View.styleContext<A>(_:)();
  swift_release();
  swift_unknownObjectRelease();
  v44 = v40;
  v45 = v41;
  v46 = v42;
  v23 = v34;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 16);
  v25 = swift_unknownObjectRetain();
  v26 = v35;
  v24(v25, a11, v35, v23);
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v27 = type metadata accessor for ModifiedContent();
  v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  v39[0] = v22;
  v39[1] = v28;
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v27, v39);
  MEMORY[0x18D75B4AC](v19, v27, v26, v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v26);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t DocumentGroupConfiguration.LazyEditorManagedDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, void (*a2)(_BYTE *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(_BYTE *);
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  char *v52;
  uint64_t v53;
  void (*v54)(_BYTE *);
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  uint64_t v71;

  v58 = a7;
  v65 = a6;
  v55 = a3;
  v54 = a2;
  v53 = a1;
  v66 = a8;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v56 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLDocumentConfiguration();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v61 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  v21 = a4;
  v22 = type metadata accessor for ModifiedContent();
  v59 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v60 = (char *)&v49 - v28;
  v29 = type metadata accessor for _ConditionalContent();
  v63 = *(_QWORD *)(v29 - 8);
  v64 = v29;
  MEMORY[0x1E0C80A78](v29, v30);
  v62 = (char *)&v49 - v31;
  v32 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 24);
  swift_unknownObjectRetain();
  LOBYTE(a4) = v32(a5, a9);
  swift_unknownObjectRelease();
  if ((a4 & 1) != 0)
  {
    v50 = a9;
    v52 = v25;
    v33 = v54;
    v34 = v65;
    DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.configuration.getter(a5, v17, a9, (void (*)(_QWORD))type metadata accessor for URLDocumentConfiguration);
    v33(v17);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for URLDocumentConfiguration);
    KeyPath = swift_getKeyPath();
    v35 = v56;
    DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.configuration.getter(a5, v56, v50, (void (*)(_QWORD))type metadata accessor for DocumentConfiguration);
    v36 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 0, 1, v36);
    v37 = (uint64_t)v52;
    v38 = v61;
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v21);
    v39 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
    v67[0] = v34;
    v67[1] = v39;
    v40 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, v67);
    v41 = (uint64_t)v60;
    v42 = v37;
    static ViewBuilder.buildExpression<A>(_:)(v37, v22, v40);
    v43 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v43(v37, v22);
    static ViewBuilder.buildBlock<A>(_:)(v41, v22, v37);
    v44 = (uint64_t)v62;
    static ViewBuilder.buildEither<A, B>(first:)(v42, v22);
    v43(v42, v22);
    v43(v41, v22);
  }
  else
  {
    v71 = static Color.clear.getter();
    v45 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
    v34 = v65;
    v70[0] = v65;
    v70[1] = v45;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, v70);
    v44 = (uint64_t)v62;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v71, v22, MEMORY[0x1E0CE7170]);
    swift_release();
  }
  v46 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
  v69[0] = v34;
  v69[1] = v46;
  v68[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, v69);
  v68[1] = MEMORY[0x1E0CE7140];
  v47 = v64;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v64, v68);
  static ViewBuilder.buildBlock<A>(_:)(v44, v47, v66);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v44, v47);
}

uint64_t DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X5>, _BYTE *a2@<X8>, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);
  uint64_t result;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 80);
  swift_unknownObjectRetain();
  LOBYTE(v6) = v6(a1, a3);
  swift_unknownObjectRelease();
  v7 = *(void (**)(uint64_t, uint64_t))(a3 + 56);
  a4(0);
  swift_unknownObjectRetain();
  v7(a1, a3);
  result = swift_unknownObjectRelease();
  *a2 = v6 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>(_QWORD *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))DocumentGroupConfiguration.LazyEditorManagedDocumentContainer.body.getter);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], v3[3], a1[2], a1[3], a1[4], a1[5], a1[6]);
}

uint64_t DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  uint64_t v53;

  v41 = a2;
  v48 = a3;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v42 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v40 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  v13 = type metadata accessor for ModifiedContent();
  v43 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v44 = (char *)&v40 - v19;
  v20 = type metadata accessor for _ConditionalContent();
  v46 = *(_QWORD *)(v20 - 8);
  v47 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v45 = (char *)&v40 - v22;
  v23 = *(_QWORD *)(a1 + 48);
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 24);
  v25 = *(_QWORD *)(a1 + 24);
  swift_unknownObjectRetain();
  LOBYTE(v23) = v24(v25, v23);
  swift_unknownObjectRelease();
  v26 = MEMORY[0x1E0CE7140];
  if ((v23 & 1) != 0)
  {
    v27 = v42;
    v28 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v40, v3 + *(int *)(a1 + 60), v9);
    swift_getKeyPath();
    v41(a1);
    v29 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 0, 1, v29);
    v30 = *(_QWORD *)(a1 + 32);
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v9);
    v31 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
    v49[0] = v30;
    v49[1] = v31;
    v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v49);
    v33 = (uint64_t)v44;
    static ViewBuilder.buildExpression<A>(_:)(v16, v13, v32);
    v34 = *(void (**)(char *, uint64_t))(v43 + 8);
    v34(v16, v13);
    static ViewBuilder.buildBlock<A>(_:)(v33, v13, (uint64_t)v16);
    v35 = (uint64_t)v45;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v16, v13);
    v34(v16, v13);
    v34((char *)v33, v13);
  }
  else
  {
    v53 = static Color.clear.getter();
    v30 = *(_QWORD *)(a1 + 32);
    v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
    v52[0] = v30;
    v52[1] = v36;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v52);
    v35 = (uint64_t)v45;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v53, v13, MEMORY[0x1E0CE7170]);
    swift_release();
  }
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
  v51[0] = v30;
  v51[1] = v37;
  v50[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v51);
  v50[1] = v26;
  v38 = v47;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v47, v50);
  static ViewBuilder.buildBlock<A>(_:)(v35, v38, v48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v35, v38);
}

uint64_t DocumentGroupConfiguration.EagerEditorManagedDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 80);
  v5 = *(_QWORD *)(a1 + 24);
  swift_unknownObjectRetain();
  LOBYTE(v4) = v4(v5, v3);
  swift_unknownObjectRelease();
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 56);
  type metadata accessor for DocumentConfiguration();
  swift_unknownObjectRetain();
  v6(v5, v3);
  result = swift_unknownObjectRelease();
  *a2 = v4 & 1;
  return result;
}

uint64_t DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.init(modelBox:viewer:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t (*a7)(_QWORD, _QWORD *)@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];

  *a8 = ObservedObject.init(wrappedValue:)();
  a8[1] = v16;
  v19[0] = a2;
  v19[1] = a3;
  v19[2] = a4;
  v19[3] = a5;
  v19[4] = a6;
  v17 = a7(0, v19);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))((char *)a8 + *(int *)(v17 + 60), a1, a2);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EagerEditorManagedDocumentContainer<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.body.getter(a1, (void (*)(uint64_t))DocumentGroupConfiguration.EagerEditorManagedDocumentContainer.configuration.getter, a2);
}

uint64_t URLDocumentConfiguration.isEditable.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t URLDocumentConfiguration.isEditable.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*URLDocumentConfiguration.isEditable.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t URLDocumentConfiguration.documentURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for URLDocumentConfiguration() + 20);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t type metadata accessor for URLDocumentConfiguration()
{
  uint64_t result;

  result = type metadata singleton initialization cache for URLDocumentConfiguration;
  if (!type metadata singleton initialization cache for URLDocumentConfiguration)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t URLDocumentConfiguration.documentURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for URLDocumentConfiguration() + 20);
  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*URLDocumentConfiguration.documentURL.modify())(_QWORD)
{
  type metadata accessor for URLDocumentConfiguration();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void DocumentGroup.init<A, B>(editing:newDocumentProvider:documentBoxType:contentModifierType:editor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12)
{
  DocumentGroup.init<A, B>(editing:newDocumentProvider:documentBoxType:contentModifierType:editor:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  _BYTE v28[112];

  v24 = a5;
  v25 = a6;
  v26 = a4;
  v23 = a10;
  v22 = a11;
  v21 = a12;
  v15 = type metadata accessor for UTType();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v20 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v18);
  _typeName(_:qualified:)();
  outlined init with copy of TableColumnList(a2, (uint64_t)v27);
  DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)(v24, v25, v26, (uint64_t)v27, (uint64_t)v28, a8, a9, v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v21);
}

void DocumentGroup.init<A, B>(viewing:newDocumentProvider:documentBoxType:contentModifierType:viewer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12)
{
  DocumentGroup.init<A, B>(viewing:newDocumentProvider:documentBoxType:contentModifierType:viewer:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  _BYTE v26[112];

  v23 = a4;
  v24 = a6;
  v22 = a5;
  v21 = a9;
  v20 = a10;
  v15 = type metadata accessor for UTType();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v20 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v18);
  outlined init with copy of TableColumnList(a2, (uint64_t)v25);
  _typeName(_:qualified:)();
  DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)((uint64_t)v25, v22, v24, v23, (uint64_t)v26, a8, v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), a11, a12);
}

void DocumentGroup.init<A, B>(editing:newDocument:documentBoxType:contentModifierType:editor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12)
{
  DocumentGroup.init<A, B>(editing:newDocumentProvider:documentBoxType:contentModifierType:editor:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

__n128 sub_1873E469C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  __swift_destroy_boxed_opaque_existential_1(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  v6 = *(_OWORD *)(v5 - 112);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v5 - 128);
  *(_OWORD *)(v0 + 80) = v6;
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v5 - 96);
  v7 = *(_OWORD *)(v5 - 176);
  *(_OWORD *)v0 = *(_OWORD *)(v5 - 192);
  *(_OWORD *)(v0 + 16) = v7;
  result = *(__n128 *)(v5 - 144);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v5 - 160);
  *(__n128 *)(v0 + 48) = result;
  return result;
}

void DocumentGroup.init<A, B>(viewing:newDocument:documentBoxType:contentModifierType:viewer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12)
{
  DocumentGroup.init<A, B>(viewing:newDocumentProvider:documentBoxType:contentModifierType:viewer:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

__n128 sub_1873E4820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  __swift_destroy_boxed_opaque_existential_1(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  v6 = *(_OWORD *)(v5 - 112);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v5 - 128);
  *(_OWORD *)(v0 + 80) = v6;
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v5 - 96);
  v7 = *(_OWORD *)(v5 - 176);
  *(_OWORD *)v0 = *(_OWORD *)(v5 - 192);
  *(_OWORD *)(v0 + 16) = v7;
  result = *(__n128 *)(v5 - 144);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v5 - 160);
  *(__n128 *)(v0 + 48) = result;
  return result;
}

void DocumentGroup.init<A, B>(editing:newDocument:documentBoxType:contentModifierType:editor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[40];

  v32 = a8;
  v26[0] = a5;
  v31 = a4;
  v28 = a2;
  v26[1] = a1;
  v30 = a9;
  v29 = a10;
  v27 = a11;
  v14 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UTType();
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v22, a1, v17, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a5, a7);
  v23 = _typeName(_:qualified:)();
  v25 = v24;
  outlined init with copy of TableColumnList(v28, (uint64_t)v33);
  DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)((uint64_t)v22, (uint64_t)v16, v23, v25, v32, v31, (uint64_t)v33, a7, v32, v30, *((uint64_t *)&v30 + 1), v29, *((uint64_t *)&v29 + 1), v27);
}

__n128 sub_1873E49F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v6 - 320), v2);
  __swift_destroy_boxed_opaque_existential_1(v4);
  (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v6 - 312), v5);
  v7 = *(_OWORD *)(v6 - 112);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v6 - 128);
  *(_OWORD *)(v0 + 80) = v7;
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v6 - 96);
  v8 = *(_OWORD *)(v6 - 176);
  *(_OWORD *)v0 = *(_OWORD *)(v6 - 192);
  *(_OWORD *)(v0 + 16) = v8;
  result = *(__n128 *)(v6 - 144);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v6 - 160);
  *(__n128 *)(v0 + 48) = result;
  return result;
}

void DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v43 = a2;
  v44 = a7;
  v38 = a6;
  v42 = a4;
  v40 = a3;
  v45 = a1;
  v35 = a12;
  v37 = a14;
  v33 = a13;
  v34 = a10;
  v16 = *(_QWORD *)(a8 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v19;
  *(_BYTE *)v19 = 0;
  *(_QWORD *)(v19 + 8) = a9;
  *(_QWORD *)(v19 + 16) = v20;
  outlined init with copy of TableColumnList(v21, v19 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a8);
  v22 = *(unsigned __int8 *)(v16 + 80);
  v41 = v16;
  v23 = (v22 + 72) & ~v22;
  v24 = (v17 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (_QWORD *)swift_allocObject();
  v26 = a8;
  v25[2] = a8;
  v25[3] = a9;
  v25[4] = a10;
  v25[5] = a11;
  v27 = v35;
  v28 = v33;
  v25[6] = v35;
  v25[7] = v28;
  v25[8] = a14;
  v29 = (char *)v25 + v23;
  v30 = *(void (**)(char *, char *))(v16 + 32);
  v31 = v26;
  v39 = v26;
  v30(v29, v18);
  *(_QWORD *)((char *)v25 + v24) = v38;
  v46 = v31;
  v47 = a9;
  v48 = a11;
  v49 = v27;
  v50 = v28;
  type metadata accessor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer();
}

void sub_1873E4BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer<A, B>, a1);
  v9 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  *(_QWORD *)(v4 - 144) = v8;
  *(_QWORD *)(v4 - 136) = v9;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v4 - 144);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 - 264) + 8);
  *(_QWORD *)(v4 - 160) = v11;
  *(_QWORD *)(v4 - 152) = v12;
  v13 = MEMORY[0x18D75FFDC](v10, v7, v4 - 160);
  *(_QWORD *)(v4 - 176) = ObservableDocumentBoxInputView.init(modelType:content:)(v3, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:));
  *(_QWORD *)(v4 - 168) = v14;
  *(_QWORD *)(v4 - 128) = v3;
  *(_QWORD *)(v4 - 120) = v7;
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v13;
  type metadata accessor for ObservableDocumentBoxInputView();
}

uint64_t sub_1873E4CC0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v1 = AnyView.init<A>(_:)();
  v2 = *(_QWORD **)(v0 - 272);
  v3 = *(_QWORD *)(v0 - 240);
  v2[8] = v1;
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v0 - 224);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = swift_allocObject();
  *(_OWORD *)(v0 - 224) = xmmword_187BF9830;
  *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16);
  v9 = *(_QWORD *)(v0 - 184);
  v8(v7 + v6, v9, v4);
  v2[11] = v7;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 - 224);
  v8(v10 + v6, v9, v4);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 - 192));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 232) + 8))(*(_QWORD *)(v0 - 200), *(_QWORD *)(v0 - 248));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  v2[12] = v10;
  return result;
}

void DocumentGroup.init<A, B>(viewing:newDocument:documentBoxType:contentModifierType:viewer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[40];
  _OWORD v34[7];

  v31 = a4;
  v32 = a8;
  v30 = a3;
  v29 = a9;
  v28 = a10;
  v27 = a11;
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UTType();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v23, a1, v18, v21);
  outlined init with copy of TableColumnList(a2, (uint64_t)v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a5, a7);
  v24 = _typeName(_:qualified:)();
  DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)((uint64_t)v23, (uint64_t)v33, (uint64_t)v17, v31, v24, v25, a7, (uint64_t)v34, v32, v29, *((uint64_t *)&v29 + 1), v28, *((uint64_t *)&v28 + 1), v27);
}

__n128 sub_1873E4F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  __swift_destroy_boxed_opaque_existential_1(v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v7);
  v9 = *(_OWORD *)(v8 - 112);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v8 - 128);
  *(_OWORD *)(v0 + 80) = v9;
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v8 - 96);
  v10 = *(_OWORD *)(v8 - 176);
  *(_OWORD *)v0 = *(_OWORD *)(v8 - 192);
  *(_OWORD *)(v0 + 16) = v10;
  result = *(__n128 *)(v8 - 144);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v8 - 160);
  *(__n128 *)(v0 + 48) = result;
  return result;
}

void DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v37 = a5;
  v38 = a6;
  v39 = a3;
  v40 = a2;
  v34 = a12;
  v35 = a4;
  v41 = a1;
  v42 = a14;
  v32 = a13;
  v33 = a10;
  v17 = *(_QWORD *)(a7 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)a8 = 1;
  *(_QWORD *)(a8 + 8) = a9;
  *(_QWORD *)(a8 + 16) = v20;
  outlined init with copy of TableColumnList(v21, a8 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a3, a7);
  v22 = *(unsigned __int8 *)(v17 + 80);
  v36 = v17;
  v23 = (v22 + 72) & ~v22;
  v24 = (v18 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (_QWORD *)swift_allocObject();
  v26 = a7;
  v25[2] = a7;
  v25[3] = a9;
  v25[4] = a10;
  v25[5] = a11;
  v27 = v34;
  v28 = v32;
  v25[6] = v34;
  v25[7] = v28;
  v25[8] = v42;
  v29 = (char *)v25 + v23;
  v30 = v26;
  (*(void (**)(char *, char *))(v17 + 32))(v29, v19);
  *(_QWORD *)((char *)v25 + v24) = v35;
  v43 = v30;
  v44 = a9;
  v45 = a11;
  v46 = v27;
  v47 = v28;
  type metadata accessor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer();
}

void sub_1873E50F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer<A, B>, a1);
  v9 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  *(_QWORD *)(v4 - 144) = v8;
  *(_QWORD *)(v4 - 136) = v9;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v4 - 144);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 - 184) + 8);
  *(_QWORD *)(v4 - 160) = v11;
  *(_QWORD *)(v4 - 152) = v12;
  v13 = MEMORY[0x18D75FFDC](v10, v7, v4 - 160);
  *(_QWORD *)(v4 - 176) = ObservableDocumentBoxInputView.init(modelType:content:)(v3, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:));
  *(_QWORD *)(v4 - 168) = v14;
  *(_QWORD *)(v4 - 128) = v3;
  *(_QWORD *)(v4 - 120) = v7;
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v13;
  type metadata accessor for ObservableDocumentBoxInputView();
}

uint64_t sub_1873E51E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = AnyView.init<A>(_:)();
  v4 = *(_QWORD *)(v2 - 224);
  v0[8] = v3;
  v0[9] = v4;
  v0[10] = *(_QWORD *)(v2 - 216);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
  v9 = v8 + v7;
  v10 = *(_QWORD *)(v2 - 192);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  v0[11] = v8;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 - 232) + 8))(*(_QWORD *)(v2 - 208), v1);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v2 - 200));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  v0[12] = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t dispatch thunk of DocumentBoxViewModifier.init(box:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for URLDocumentConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for URL();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for URLDocumentConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

_BYTE *initializeWithCopy for URLDocumentConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_BYTE *assignWithCopy for URLDocumentConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

_BYTE *initializeWithTake for URLDocumentConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_BYTE *assignWithTake for URLDocumentConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLDocumentConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873E5830(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for URLDocumentConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_1873E58D0(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for URLDocumentConfiguration()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer<A, B>);
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(uint64_t a1)
{
  return partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD))closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:));
}

void type metadata accessor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer<A, B>);
}

uint64_t closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t (*a12)(_QWORD, _QWORD *), uint64_t a13)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD, _QWORD *, double);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t (*v49)(_QWORD, _QWORD *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  _QWORD v63[6];

  v52 = a7;
  v53 = a8;
  v58 = a6;
  v59 = a3;
  v60 = a9;
  v54 = a2;
  v55 = a13;
  v49 = a12;
  v57 = a11;
  v50 = a10;
  v51 = a5;
  v61 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63[0] = v23;
  v63[1] = v24;
  v63[2] = v25;
  v63[3] = v26;
  v63[4] = v27;
  v29 = v28(0, v63, v20);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v33 = (uint64_t *)((char *)&v48 - v32);
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v34 = type metadata accessor for ModifiedContent();
  v56 = *(_QWORD *)(v34 - 8);
  v36 = MEMORY[0x1E0C80A78](v34, v35);
  v38 = (char *)&v48 - v37;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v22, v54, a4, v36);
  swift_unknownObjectRetain();
  v39 = v50;
  DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.init(modelBox:viewer:)((uint64_t)v22, a4, v51, v52, v53, v50, v49, v33);
  v40 = MEMORY[0x18D75FFDC](v55, v29);
  View.styleContext<A>(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v33, v29);
  v41 = v57;
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 16);
  v43 = swift_unknownObjectRetain();
  v44 = v58;
  v42(v43, v39, v58, v41);
  v45 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  v62[0] = v40;
  v62[1] = v45;
  v46 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v34, v62);
  MEMORY[0x18D75B4AC](v15, v34, v44, v46);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v15, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v38, v34);
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)(uint64_t a1)
{
  return partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD))closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:));
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return a2(a1, v2 + v4, *(_QWORD *)(v2 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

void type metadata accessor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_1873E5D58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (uint64_t (*)(_QWORD, uint64_t *))type metadata accessor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>, a2);
}

void type metadata accessor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (uint64_t (*)(_QWORD, uint64_t *))type metadata accessor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>, a2);
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, v4[9], v4[10], v4[11], v4[2], v4[3], v4[4], v4[5], a4, v4[6], v4[7], v4[8], a2, a3);
}

void type metadata accessor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t destroy for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t type metadata completion function for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_unknownObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *assignWithCopy for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *assignWithTake for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_unknownObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1873E62F0 + 4 * byte_187C2C030[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.EagerEditorManagedDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.EagerViewerManagedDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>();
}

uint64_t sub_1873E65C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for _ConditionalContent();
  v6[0] = v1;
  v6[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6);
  v5[1] = MEMORY[0x1E0CE7140];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v3, v5);
}

Swift::Void __swiftcall PresentationMode.dismiss()()
{
  _BYTE *v0;

  *v0 = 0;
}

uint64_t EnvironmentValues.presentationMode.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.presentationMode : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.presentationMode : EnvironmentValues()
{
  swift_retain();
  swift_retain();
  specialized EnvironmentValues.subscript.setter();
  swift_release();
  return swift_release();
}

uint64_t PresentationMode.isPresented.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance PresentationModeKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = unk_1EDE26040;
  v3 = byte_1EDE26048;
  *(_QWORD *)a1 = static PresentationModeKey.defaultValue;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_retain();
  return swift_retain();
}

_BYTE *protocol witness for Projection.set(base:newValue:) in conformance PresentationMode.FromIsPresented(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t PresentationMode.FromItem.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 48))(a1, 1, a2);
  *a3 = (_DWORD)result != 1;
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance PresentationMode.FromItem<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return PresentationMode.FromItem.get(base:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance PresentationMode.FromItem<A>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return specialized PresentationMode.FromItem.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t View.presentationMode(isPresented:)()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_retain();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t View.presentationMode<A>(item:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v8 = type metadata accessor for PresentationMode.FromItem(0, a3, a5, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationMode.FromItem<A>, v8);
  Binding.projecting<A>(_:)();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for PresentationMode.FromItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PresentationMode.FromItem);
}

uint64_t storeEnumTagSinglePayload for PresentationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1873E6C28 + 4 * byte_187C2C255[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1873E6C5C + 4 * byte_187C2C250[v4]))();
}

uint64_t sub_1873E6C5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873E6C64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1873E6C6CLL);
  return result;
}

uint64_t sub_1873E6C78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1873E6C80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1873E6C84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873E6C8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873E6C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1873E6D18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for PresentationMode.FromIsPresented()
{
  return &type metadata for PresentationMode.FromIsPresented;
}

ValueMetadata *type metadata accessor for PresentationModeKey()
{
  return &type metadata for PresentationModeKey;
}

void base witness table accessor for Equatable in PresentationMode.FromItem<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in PresentationMode.FromItem<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized PresentationMode.FromItem.set(base:newValue:)(uint64_t result, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if ((*a2 & 1) == 0)
  {
    v4 = result;
    v5 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v4, 1, 1, a3);
  }
  return result;
}

Swift::Void __swiftcall PrimitiveButtonStyleConfiguration.trigger()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  void (*v20)(uint64_t);
  void (*v21)(void *);
  uint64_t v22;
  _BYTE v23[16];

  v1 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0 + *(int *)(v9 + 24), (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v11 = MEMORY[0x1E0CE2E18];
      outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
      LinkDestination.open()();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))v11);
    }
    else
    {
      v16 = *(_QWORD *)v8;
      v17 = *((_QWORD *)v8 + 1);
      v18 = v8[16];
      v19 = (void *)*((_QWORD *)v8 + 3);
      v20 = (void (*)(uint64_t))*((_QWORD *)v8 + 4);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v17, v18, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
      v21 = (void (*)(void *))specialized Environment.wrappedValue.getter(v16, v17, v18, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, 0xD00000000000001BLL, 0x8000000187BDF5C0, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      v22 = outlined consume of Environment<AppIntentExecutor?>.Content(v16, v17, v18, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      if (v21)
      {
        v21(v19);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v21);
      }
      else
      {
        v20(v22);
      }
      outlined consume of Environment<AppIntentExecutor?>.Content(v16, v17, v18, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

      swift_release();
    }
  }
  else
  {
    v13 = *(_QWORD *)v8;
    v12 = *((_QWORD *)v8 + 1);
    v14 = type metadata accessor for MainActor();
    MEMORY[0x1E0C80A78](v14, v15);
    *(_QWORD *)&v23[-16] = v13;
    *(_QWORD *)&v23[-8] = v12;
    specialized static MainActor.assumeIsolated<A>(_:file:line:)((void (*)(void))partial apply for closure #1 in ButtonAction.callAsFunction(), (uint64_t)&v23[-32]);
    swift_release();
  }
}

void View.buttonStyle<A, B>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  v6 = type metadata accessor for PrimitiveButtonStyleContainerModifier(0, v4, v5, v4);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for StyleContextAcceptsPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v8);
  type metadata accessor for StaticIf();
}

uint64_t sub_1873E722C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v7 + 16))(v2, *(_QWORD *)(v9 - 200), v8, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v3, v2, v8);
  v15 = *(_QWORD *)(v9 - 192);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v5, *(_QWORD *)(v9 - 176), v4);
  *(_QWORD *)(v9 - 120) = v4;
  *(_QWORD *)(v9 - 112) = v5;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v6);
  *(_QWORD *)(v9 - 128) = *(_QWORD *)(v9 - 168);
  ViewModifier.requiring<A>(_:)(v9 - 112, 1, v6, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 184) + 8))(v3, v6);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v4);
  MEMORY[0x18D75B4AC](v14, *(_QWORD *)(v9 - 152), a1, *(_QWORD *)(v9 - 144));
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a1);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if ((a2 & 1) != 0)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    v4 = static os_log_type_t.fault.getter();
    v5 = static Log.runtimeIssuesLog.getter();
    v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v9 = v8;
      *(_DWORD *)v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x8000000187BDF410, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v8, -1, -1);
      MEMORY[0x18D760108](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if ((a2 & 1) != 0)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    v4 = static os_log_type_t.fault.getter();
    v5 = static Log.runtimeIssuesLog.getter();
    v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v9 = v8;
      *(_DWORD *)v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BDF220, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v8, -1, -1);
      MEMORY[0x18D760108](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  if ((a2 & 0x100) != 0)
  {
    *(_QWORD *)a3 = a1;
    *(_BYTE *)(a3 + 8) = a2;
    return outlined copy of Environment<ListItemTint?>.Content(a1, a2, 1);
  }
  else
  {
    outlined copy of Environment<ListItemTint?>.Content(a1, a2, 0);
    v5 = static os_log_type_t.fault.getter();
    v6 = static Log.runtimeIssuesLog.getter();
    v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v11 = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000187BDF6C0, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v9, -1, -1);
      MEMORY[0x18D760108](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<ListItemTint?>.Content(a1, a2, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, 0xD00000000000001BLL, 0x8000000187BDF5C0, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

{
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  if ((a3 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    v5 = static os_log_type_t.fault.getter();
    v6 = static Log.runtimeIssuesLog.getter();
    v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v11 = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BDF260, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v9, -1, -1);
      MEMORY[0x18D760108](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<String?>.Content(a1, a2, 0);
    swift_release();
    swift_release();
    return v11;
  }
  return a1;
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, 0xD00000000000001DLL, 0x8000000187BDF070, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of (Color, Color)?, 0xD000000000000018, 0x8000000187BDF350, (uint64_t (*)(void))outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = result;
  if ((a3 & 0x100) != 0)
  {
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = a2;
    *(_BYTE *)(a4 + 16) = a3;
  }
  else
  {
    outlined copy of Environment<PlaybackButton._StyleStorage>.Content(result, a2, a3, 0);
    v7 = static os_log_type_t.fault.getter();
    v8 = static Log.runtimeIssuesLog.getter();
    v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v12 = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7453656C7974535FLL, 0xED0000656761726FLL, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v11, -1, -1);
      MEMORY[0x18D760108](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v6, a2, a3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if ((a2 & 1) != 0)
  {
    *a3 = result & 1;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    v4 = static os_log_type_t.fault.getter();
    v5 = static Log.runtimeIssuesLog.getter();
    v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v9 = v8;
      *(_DWORD *)v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6574617453, 0xE500000000000000, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v8, -1, -1);
      MEMORY[0x18D760108](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if ((a2 & 1) != 0)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    v4 = static os_log_type_t.fault.getter();
    v5 = static Log.runtimeIssuesLog.getter();
    v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v9 = v8;
      *(_DWORD *)v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x8000000187BDF1B0, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v8, -1, -1);
      MEMORY[0x18D760108](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, _WORD *a3@<X8>)
{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if ((a2 & 1) != 0)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    v4 = static os_log_type_t.fault.getter();
    v5 = static Log.runtimeIssuesLog.getter();
    v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v9 = v8;
      *(_DWORD *)v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000187BD8390, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v8, -1, -1);
      MEMORY[0x18D760108](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t specialized Environment.wrappedValue.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  if ((a2 & 0x100000000) != 0)
  {
    *(_QWORD *)a3 = a1;
    *(_DWORD *)(a3 + 8) = a2;
    return outlined copy of Environment<Material?>.Content(a1, a2, 1);
  }
  else
  {
    outlined copy of Environment<Material?>.Content(a1, a2, 0);
    v5 = static os_log_type_t.fault.getter();
    v6 = static Log.runtimeIssuesLog.getter();
    v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v11 = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x8000000187BDF6A0, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v9, -1, -1);
      MEMORY[0x18D760108](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Material?>.Content(a1, a2, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter()
{
  return specialized Environment.wrappedValue.getter((void (*)(uint64_t, _QWORD, _QWORD, _QWORD))outlined copy of Text?, 0x6C616E6F6974704FLL, 0xEE003E747865543CLL, (uint64_t (*)(void))outlined consume of Text?);
}

{
  return specialized Environment.wrappedValue.getter((void (*)(uint64_t, _QWORD, _QWORD, _QWORD))outlined copy of Binding<String>?, 0xD000000000000019, 0x8000000187BDF2F0, (uint64_t (*)(void))outlined consume of Binding<String>?);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    outlined copy of AppIntentExecutor?(v1);
    outlined copy of AppIntentExecutor?(v2);
  }
  else
  {
    swift_retain();
    v3 = static os_log_type_t.fault.getter();
    v4 = static Log.runtimeIssuesLog.getter();
    v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v9 = v7;
      *(_DWORD *)v6 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x8000000187BDF780, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v7, -1, -1);
      MEMORY[0x18D760108](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined retain of TableColumnCustomizationID.Base(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<NavigationEventHandlers>.Content);
    swift_release();
    swift_release();
    return v9;
  }
  return v1;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;

  if ((a4 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    v7 = static os_log_type_t.fault.getter();
    v8 = static Log.runtimeIssuesLog.getter();
    v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x8000000187BDF0F0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v11, -1, -1);
      MEMORY[0x18D760108](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(a1, a2, a3, 0);
    swift_release();
    swift_release();
    return v13;
  }
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = a1;
  if ((a3 & 0x100) != 0)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  }
  else
  {
    swift_retain();
    v6 = static os_log_type_t.fault.getter();
    v7 = static Log.runtimeIssuesLog.getter();
    v8 = v6;
    if (os_log_type_enabled(v7, v6))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v12 = v10;
      *(_DWORD *)v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x8000000187BDF140, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v10, -1, -1);
      MEMORY[0x18D760108](v9, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Binding<Visibility>?>.Content(v5, a2, a3, 0);
    swift_release();
    swift_release();
    return v12;
  }
  return v5;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, unint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v8;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v18;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    a4(a1, a2);
  }
  else
  {
    swift_retain();
    v12 = static os_log_type_t.fault.getter();
    v13 = static Log.runtimeIssuesLog.getter();
    v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v18 = v16;
      *(_DWORD *)v15 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v16, -1, -1);
      MEMORY[0x18D760108](v15, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<AppIntentExecutor?>.Content(v8, a2, 0, a7);
    swift_release();
    swift_release();
    return v18;
  }
  return v8;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;

  if ((a3 & 0x100) != 0)
  {
    *(_QWORD *)a4 = a1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_BYTE *)(a4 + 16) = a3;
    return outlined copy of Environment<Binding<Visibility>?>.Content(a1, a2, a3, 1);
  }
  else
  {
    outlined copy of Environment<Binding<Visibility>?>.Content(a1, a2, a3, 0);
    v7 = static os_log_type_t.fault.getter();
    v8 = static Log.runtimeIssuesLog.getter();
    v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x8000000187BDF530, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v11, -1, -1);
      MEMORY[0x18D760108](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Binding<Visibility>?>.Content(a1, a2, a3, 0);
    swift_release();
    return swift_release();
  }
}

{
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;

  if ((a3 & 0x100) != 0)
  {
    *(_QWORD *)a4 = a1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_BYTE *)(a4 + 16) = a3 & 1;
    return outlined copy of Environment<DismissAction>.Content(a1, a2, a3, 1);
  }
  else
  {
    outlined copy of Environment<DismissAction>.Content(a1, a2, a3, 0);
    v7 = static os_log_type_t.fault.getter();
    v8 = static Log.runtimeIssuesLog.getter();
    v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x417373696D736944, 0xED00006E6F697463, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v11, -1, -1);
      MEMORY[0x18D760108](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<DismissAction>.Content(a1, a2, a3, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  os_log_type_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  if ((a3 & 1) != 0)
  {
    *a4 = a1;
    a4[1] = a2;
    return outlined copy of Environment<AppIntentExecutor?>.Content(a1, a2, 1, (uint64_t (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  }
  else
  {
    outlined copy of Environment<AppIntentExecutor?>.Content(a1, a2, 0, (uint64_t (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    v6 = static os_log_type_t.fault.getter();
    v7 = static Log.runtimeIssuesLog.getter();
    v8 = v6;
    if (os_log_type_enabled(v7, v6))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v12 = v10;
      *(_DWORD *)v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000187BDF4D0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v10, -1, -1);
      MEMORY[0x18D760108](v9, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, 0, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    swift_release();
    return swift_release();
  }
}

{
  os_log_type_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  if ((a3 & 1) != 0)
  {
    *a4 = a1;
    a4[1] = a2;
    return outlined copy of Environment<EnvironmentValues>.Content(a1, a2, 1);
  }
  else
  {
    outlined copy of Environment<EnvironmentValues>.Content(a1, a2, 0);
    v6 = static os_log_type_t.fault.getter();
    v7 = static Log.runtimeIssuesLog.getter();
    v8 = v6;
    if (os_log_type_enabled(v7, v6))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v12 = v10;
      *(_DWORD *)v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000187BDF200, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v10, -1, -1);
      MEMORY[0x18D760108](v9, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<EnvironmentValues>.Content(a1, a2, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  os_log_type_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;

  v10 = v5;
  v12 = a1(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v23 - v14;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v10, (uint64_t)v23 - v14, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a5, v15, v16);
  }
  else
  {
    v18 = static os_log_type_t.fault.getter();
    v19 = static Log.runtimeIssuesLog.getter();
    v20 = v18;
    if (os_log_type_enabled(v19, v18))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24 = v22;
      *(_DWORD *)v21 = 136315138;
      v23[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v19, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v22, -1, -1);
      MEMORY[0x18D760108](v21, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter(void (*a1)(uint64_t, _QWORD, _QWORD, _QWORD), uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD *)v4;
  if (*(_BYTE *)(v4 + 32) == 1)
  {
    a1(v5, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
  }
  else
  {
    swift_retain();
    v9 = static os_log_type_t.fault.getter();
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v15 = v13;
      *(_DWORD *)v12 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v13, -1, -1);
      MEMORY[0x18D760108](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined release of Environment<Text?>(v4, a4);
    swift_release();
    swift_release();
    return v15;
  }
  return v5;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  return specialized Environment.wrappedValue.getter(a1, a2, (uint64_t (*)(uint64_t, uint64_t))outlined copy of ResolvedTableRowIDs.Storage, 0xD00000000000001CLL, 0x8000000187BDF740, (void (*)(uint64_t, _QWORD))outlined consume of ResolvedTableRowIDs.Storage, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, outlined copy of Environment<SceneBridge?>.Content, 0xD000000000000015, 0x8000000187BDF580, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Color?>.Content, a3);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(uint64_t, _QWORD)@<X5>, _QWORD *a7@<X8>)
{
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v17;

  if ((a2 & 1) != 0)
  {
    *a7 = a1;
    return a3(a1, 1);
  }
  else
  {
    a3(a1, 0);
    v11 = static os_log_type_t.fault.getter();
    v12 = static Log.runtimeIssuesLog.getter();
    v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v17 = v15;
      *(_DWORD *)v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v15, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a6(a1, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;

  v8 = result;
  if ((a4 & 0x1000000) != 0)
  {
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = a3;
    *(_WORD *)(a5 + 24) = a4;
    *(_BYTE *)(a5 + 26) = BYTE2(a4);
  }
  else
  {
    outlined copy of Environment<EdgeInsets>.Content(result, a2, a3, a4, 0);
    v9 = static os_log_type_t.fault.getter();
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v14 = v13;
      *(_DWORD *)v12 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000187BDF160, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v13, -1, -1);
      MEMORY[0x18D760108](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<EdgeInsets>.Content(v8, a2, a3, a4, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

void *specialized Environment.wrappedValue.getter(void *a1, char a2)
{
  void *v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1;
  if ((a2 & 1) != 0)
  {
    v10 = a1;
  }
  else
  {
    swift_retain();
    v3 = static os_log_type_t.fault.getter();
    v4 = static Log.runtimeIssuesLog.getter();
    v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136315138;
      type metadata accessor for UISceneSession?();
      v8 = _typeName(_:qualified:)();
      v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v7, -1, -1);
      MEMORY[0x18D760108](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<UISceneSession?>.Content(v2, 0);
    swift_release();
    swift_release();
    return (void *)v13;
  }
  return v2;
}

id specialized Environment.wrappedValue.getter(void *a1, char a2)
{
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  id v12;

  if ((a2 & 1) != 0)
    return a1;
  swift_retain();
  v2 = static os_log_type_t.fault.getter();
  v3 = static Log.runtimeIssuesLog.getter();
  v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136315138;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
    v7 = _typeName(_:qualified:)();
    v12 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_186E48000, v3, v4, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v6, -1, -1);
    MEMORY[0x18D760108](v5, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined consume of Environment<UISceneSession?>.Content(a1, 0);
  swift_release();
  swift_release();
  return v12;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    v7 = static os_log_type_t.fault.getter();
    v8 = static Log.runtimeIssuesLog.getter();
    v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315138;
      v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v11, -1, -1);
      MEMORY[0x18D760108](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of ResolvedTableRowIDs.Storage(a1, 0);
    swift_release();
    swift_release();
    return v14;
  }
  return a1;
}

{
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  swift_retain();
  if ((a2 & 1) == 0)
  {
    v8 = static os_log_type_t.fault.getter();
    v9 = static Log.runtimeIssuesLog.getter();
    v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v14 = v12;
      *(_DWORD *)v11 = 136315138;
      v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v12, -1, -1);
      MEMORY[0x18D760108](v11, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    swift_release();
    swift_release();
    return v15;
  }
  return a1;
}

void PrimitiveButtonStyleConfiguration.role.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t implicit closure #2 in implicit closure #1 in ResolvedButtonStyle.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  void (*v22)(uint64_t);
  void (*v23)(void *);
  uint64_t v24;
  _BYTE v25[16];

  v2 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + *(int *)(v10 + 24), (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v12 = MEMORY[0x1E0CE2E18];
      outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
      LinkDestination.open()();
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))v12);
    }
    else
    {
      v18 = *(_QWORD *)v9;
      v19 = *((_QWORD *)v9 + 1);
      v20 = v9[16];
      v21 = (void *)*((_QWORD *)v9 + 3);
      v22 = (void (*)(uint64_t))*((_QWORD *)v9 + 4);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v19, v20, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
      v23 = (void (*)(void *))specialized Environment.wrappedValue.getter(v18, v19, v20, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, 0xD00000000000001BLL, 0x8000000187BDF5C0, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      v24 = outlined consume of Environment<AppIntentExecutor?>.Content(v18, v19, v20, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      if (v23)
      {
        v23(v21);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v23);
      }
      else
      {
        v22(v24);
      }
      outlined consume of Environment<AppIntentExecutor?>.Content(v18, v19, v20, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

      return swift_release();
    }
  }
  else
  {
    v15 = *(_QWORD *)v9;
    v14 = *((_QWORD *)v9 + 1);
    v16 = type metadata accessor for MainActor();
    MEMORY[0x1E0C80A78](v16, v17);
    *(_QWORD *)&v25[-16] = v15;
    *(_QWORD *)&v25[-8] = v14;
    specialized static MainActor.assumeIsolated<A>(_:file:line:)((void (*)(void))closure #1 in ButtonAction.callAsFunction()partial apply, (uint64_t)&v25[-32]);
    return swift_release();
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ButtonStyleWriter<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ButtonStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t static ButtonStylePredicate.evaluate(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  lazy protocol witness table accessor for type ButtonStyleInput and conformance ButtonStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v6 = type metadata accessor for ButtonStyleTypeBox(0, a2, a3, v5);
  return (*(uint64_t (**)(uint64_t, _UNKNOWN **))(v8 + 8))(v6, &protocol witness table for ButtonStyleTypeBox<A>) & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ButtonStylePredicate<A>(uint64_t a1, uint64_t a2)
{
  return static ButtonStylePredicate.evaluate(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance ButtonStyleInput@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for static PropertyKey.defaultValue.getter in conformance ButtonStyleInput(&one-time initialization token for defaultValue, (__n128 *)&static ButtonStyleInput.defaultValue, a1).n128_u64[0];
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ButtonStyleInput(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 8))(*a2, a2[1]) & 1;
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance EffectiveButtonStyleInput@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for static PropertyKey.defaultValue.getter in conformance ButtonStyleInput(&one-time initialization token for defaultValue, (__n128 *)&static EffectiveButtonStyleInput.defaultValue, a1).n128_u64[0];
  return result;
}

__n128 protocol witness for static PropertyKey.defaultValue.getter in conformance ButtonStyleInput@<Q0>(_QWORD *a1@<X2>, __n128 *a2@<X3>, __n128 *a3@<X8>)
{
  __n128 result;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  *a3 = *a2;
  return result;
}

uint64_t specialized static MainActor.assumeIsolated<A>(_:file:line:)(void (*a1)(_QWORD *__return_ptr), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  _QWORD v12[2];

  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) != 0)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = a2;
    a1(v12);
    if (v2)
    {
      swift_release();
      return v6;
    }
    v6 = v12[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return v6;
    __break(1u);
  }
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v9._object = (void *)0x8000000187BDF4F0;
  v9._countAndFlagsBits = 0xD00000000000003FLL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static MainActor.assumeIsolated<A>(_:file:line:)(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0)
    goto LABEL_6;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  a1();
  if (v2)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v8._object = (void *)0x8000000187BDF4F0;
    v8._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PrimitiveButtonStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleConfiguration.Label, &type metadata for PrimitiveButtonStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleConfiguration.Label, &type metadata for PrimitiveButtonStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in PrimitiveButtonStyleConfiguration.Label()
{
  return &protocol witness table for PrimitiveButtonStyleConfiguration.Label;
}

uint64_t dispatch thunk of PrimitiveButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for PrimitiveButtonStyleConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  id v32;
  uint64_t v33;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v26 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v26 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v27 = *(_QWORD *)v7;
      v28 = *((_QWORD *)v7 + 1);
      v29 = v7[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, v28, v29, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
      *(_QWORD *)v6 = v27;
      *((_QWORD *)v6 + 1) = v28;
      v6[16] = v29;
      v30 = *((_QWORD *)v7 + 5);
      v31 = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v6 + 24) = v31;
      *((_QWORD *)v6 + 5) = v30;
      v32 = (id)v31;
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = *(_QWORD *)v7;
      v10 = *((_QWORD *)v7 + 1);
      v11 = *((_QWORD *)v7 + 2);
      v12 = *((_QWORD *)v7 + 3);
      v13 = v7[34];
      v14 = *((_WORD *)v7 + 16);
      outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v7, v10, v11, v12, v14, v13);
      *(_QWORD *)v6 = v9;
      *((_QWORD *)v6 + 1) = v10;
      *((_QWORD *)v6 + 2) = v11;
      *((_QWORD *)v6 + 3) = v12;
      *((_WORD *)v6 + 16) = v14;
      v6[34] = v13;
      v15 = *((_QWORD *)v7 + 5);
      v16 = *((_QWORD *)v7 + 6);
      v17 = *((_QWORD *)v7 + 7);
      v18 = *((_QWORD *)v7 + 8);
      v19 = v7[74];
      v20 = *((_WORD *)v7 + 36);
      outlined copy of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v20, v19);
      *((_QWORD *)v6 + 5) = v15;
      *((_QWORD *)v6 + 6) = v16;
      *((_QWORD *)v6 + 7) = v17;
      *((_QWORD *)v6 + 8) = v18;
      *((_WORD *)v6 + 36) = v20;
      v6[74] = v19;
      v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v22 = &v6[v21];
      v23 = &v7[v21];
      v24 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      v25 = type metadata accessor for LinkDestination.Configuration();
      v22[*(int *)(v25 + 20)] = v23[*(int *)(v25 + 20)];
    }
    else
    {
      v33 = *((_QWORD *)v7 + 1);
      *(_QWORD *)v6 = *(_QWORD *)v7;
      *((_QWORD *)v6 + 1) = v33;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

_WORD *assignWithCopy for PrimitiveButtonStyleConfiguration(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v4, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v24 = *(_QWORD *)v6;
      v25 = *((_QWORD *)v6 + 1);
      v26 = v6[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v6, v25, v26, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
      *(_QWORD *)v5 = v24;
      *((_QWORD *)v5 + 1) = v25;
      v5[16] = v26;
      v27 = (void *)*((_QWORD *)v6 + 3);
      *((_QWORD *)v5 + 3) = v27;
      v28 = *((_QWORD *)v6 + 5);
      *((_QWORD *)v5 + 4) = *((_QWORD *)v6 + 4);
      *((_QWORD *)v5 + 5) = v28;
      v29 = v27;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v8 = *(_QWORD *)v6;
        v9 = *((_QWORD *)v6 + 1);
        v10 = *((_QWORD *)v6 + 2);
        v11 = *((_QWORD *)v6 + 3);
        v12 = v6[34];
        v13 = *((_WORD *)v6 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v6, v9, v10, v11, v13, v12);
        *(_QWORD *)v5 = v8;
        *((_QWORD *)v5 + 1) = v9;
        *((_QWORD *)v5 + 2) = v10;
        *((_QWORD *)v5 + 3) = v11;
        *((_WORD *)v5 + 16) = v13;
        v5[34] = v12;
        v14 = *((_QWORD *)v6 + 5);
        v15 = *((_QWORD *)v6 + 6);
        v16 = *((_QWORD *)v6 + 7);
        v17 = *((_QWORD *)v6 + 8);
        LOBYTE(v11) = v6[74];
        v18 = *((_WORD *)v6 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v14, v15, v16, v17, v18, v11);
        *((_QWORD *)v5 + 5) = v14;
        *((_QWORD *)v5 + 6) = v15;
        *((_QWORD *)v5 + 7) = v16;
        *((_QWORD *)v5 + 8) = v17;
        *((_WORD *)v5 + 36) = v18;
        v5[74] = v11;
        v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v20 = &v5[v19];
        v21 = &v6[v19];
        v22 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
        v23 = type metadata accessor for LinkDestination.Configuration();
        v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v30 = *((_QWORD *)v6 + 1);
      *(_QWORD *)v5 = *(_QWORD *)v6;
      *((_QWORD *)v5 + 1) = v30;
    }
    swift_retain();
    goto LABEL_8;
  }
  return a1;
}

_WORD *initializeWithTake for PrimitiveButtonStyleConfiguration(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *((_OWORD *)v6 + 1);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v8;
    *(_DWORD *)(v5 + 31) = *(_DWORD *)(v6 + 31);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
    *(_DWORD *)(v5 + 71) = *(_DWORD *)(v6 + 71);
    v9 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v10 = &v5[v9];
    v11 = &v6[v9];
    v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    v13 = type metadata accessor for LinkDestination.Configuration();
    v10[*(int *)(v13 + 20)] = v11[*(int *)(v13 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_WORD *assignWithTake for PrimitiveButtonStyleConfiguration(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v4, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v7 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = *((_OWORD *)v6 + 1);
      *(_OWORD *)v5 = *(_OWORD *)v6;
      *((_OWORD *)v5 + 1) = v8;
      *(_DWORD *)(v5 + 31) = *(_DWORD *)(v6 + 31);
      *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
      *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
      *(_DWORD *)(v5 + 71) = *(_DWORD *)(v6 + 71);
      v9 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v10 = &v5[v9];
      v11 = &v6[v9];
      v12 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      v13 = type metadata accessor for LinkDestination.Configuration();
      v10[*(int *)(v13 + 20)] = v11[*(int *)(v13 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PrimitiveButtonStyleConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873ECA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for ButtonAction();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PrimitiveButtonStyleConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873ECAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for ButtonAction();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1873ECAF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for PrimitiveButtonStyleContainerModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  id v33;
  uint64_t v34;

  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v6 = *(int *)(v4 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v28 = *(_QWORD *)v8;
      v29 = *((_QWORD *)v8 + 1);
      v30 = v8[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v29, v30, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
      *(_QWORD *)v7 = v28;
      *((_QWORD *)v7 + 1) = v29;
      v7[16] = v30;
      v31 = *((_QWORD *)v8 + 5);
      v32 = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 24) = v32;
      *((_QWORD *)v7 + 5) = v31;
      v33 = (id)v32;
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v10 = *(_QWORD *)v8;
      v11 = *((_QWORD *)v8 + 1);
      v12 = *((_QWORD *)v8 + 2);
      v13 = *((_QWORD *)v8 + 3);
      v14 = v8[34];
      v15 = *((_WORD *)v8 + 16);
      outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v8, v11, v12, v13, v15, v14);
      *(_QWORD *)v7 = v10;
      *((_QWORD *)v7 + 1) = v11;
      *((_QWORD *)v7 + 2) = v12;
      *((_QWORD *)v7 + 3) = v13;
      *((_WORD *)v7 + 16) = v15;
      v7[34] = v14;
      v16 = *((_QWORD *)v8 + 5);
      v17 = *((_QWORD *)v8 + 6);
      v18 = *((_QWORD *)v8 + 7);
      v19 = *((_QWORD *)v8 + 8);
      v20 = v8[74];
      v21 = *((_WORD *)v8 + 36);
      outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v21, v20);
      *((_QWORD *)v7 + 5) = v16;
      *((_QWORD *)v7 + 6) = v17;
      *((_QWORD *)v7 + 7) = v18;
      *((_QWORD *)v7 + 8) = v19;
      *((_WORD *)v7 + 36) = v21;
      v7[74] = v20;
      v22 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v23 = &v7[v22];
      v24 = &v8[v22];
      v25 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      v26 = type metadata accessor for LinkDestination.Configuration();
      v23[*(int *)(v26 + 20)] = v24[*(int *)(v26 + 20)];
    }
    else
    {
      v34 = *((_QWORD *)v8 + 1);
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *((_QWORD *)v7 + 1) = v34;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_WORD *initializeWithTake for ResolvedButtonStyle(_WORD *a1, _WORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *((_OWORD *)v6 + 1);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v8;
    *(_DWORD *)(v5 + 31) = *(_DWORD *)(v6 + 31);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
    *(_DWORD *)(v5 + 71) = *(_DWORD *)(v6 + 71);
    v9 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v10 = &v5[v9];
    v11 = &v6[v9];
    v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    v13 = type metadata accessor for LinkDestination.Configuration();
    v10[*(int *)(v13 + 20)] = v11[*(int *)(v13 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_WORD *assignWithTake for ResolvedButtonStyle(_WORD *a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v5 = *(int *)(v4 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v5, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v8 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = *((_OWORD *)v7 + 1);
      *(_OWORD *)v6 = *(_OWORD *)v7;
      *((_OWORD *)v6 + 1) = v9;
      *(_DWORD *)(v6 + 31) = *(_DWORD *)(v7 + 31);
      *(_OWORD *)(v6 + 40) = *(_OWORD *)(v7 + 40);
      *(_OWORD *)(v6 + 56) = *(_OWORD *)(v7 + 56);
      *(_DWORD *)(v6 + 71) = *(_DWORD *)(v7 + 71);
      v10 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v11 = &v6[v10];
      v12 = &v7[v10];
      v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      v14 = type metadata accessor for LinkDestination.Configuration();
      v11[*(int *)(v14 + 20)] = v12[*(int *)(v14 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedButtonStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873ECF94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedButtonStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1873ECFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ButtonStylePredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonStylePredicate);
}

uint64_t getEnumTagSinglePayload for ButtonStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1873ED0E0 + 4 * byte_187C2C460[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ButtonStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ButtonStyleModifier<A>()
{
  return &protocol witness table for ButtonStyleModifier<A>;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for ButtonStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleInput and conformance ButtonStyleInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput;
  if (!lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleInput, &type metadata for ButtonStyleInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput;
  if (!lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleInput, &type metadata for ButtonStyleInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput);
  }
  return result;
}

void type metadata accessor for Environment<Binding<AttributedString>?>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

void type metadata accessor for Binding<AttributedString>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<ToolbarItemPlacement.Role>.Content, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1158]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Environment<TimeZone>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

void type metadata accessor for Environment<Calendar>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

void type metadata accessor for Environment<Locale>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>, ModifiedConte()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<NavigationButtonInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput, (uint64_t)&type metadata for NavigationButtonInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>(255);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>()
{
  uint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>)
  {
    v1 = MEMORY[0x1E0CE6840];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>(255);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>(255);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, v1);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, &lazy cache variable for type metadata for AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityDefaultActionRepresentableStyle);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a4, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, a5);
    v8 = type metadata accessor for ModifiedContent();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>);
}

void type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessibilit, (void (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>, ModifiedConte, (void (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<NavigationButtonInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput, (uint64_t)&type metadata for NavigationButtonInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessibili(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifie, type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>()
{
  uint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>)
  {
    v1 = MEMORY[0x1E0CE6230];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TextInputSuggestionsContext>, MEMORY[0x1E0CE6230], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TextInputSuggestionsContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TextInputSuggestionsContext>, v1);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifi()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityA)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessibili(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<TextSelectionForbidden>, MEMORY[0x1E0CE5518], MEMORY[0x1E0CE5508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityA);
  }
}

uint64_t sub_1873ED8E4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.platformItemButtonRole(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.platformItemButtonRole(_:)(a1, *(unsigned __int8 *)(v1 + 16) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 17) << 8));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)()
{
  return partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)(implicit closure #2 in implicit closure #1 in BorderedButton.body.getter);
}

uint64_t outlined copy of AppIntentAction?(uint64_t result, uint64_t a2, char a3, void *a4)
{
  id v5;

  if (a4)
  {
    outlined copy of Environment<AppIntentExecutor?>.Content(result, a2, a3 & 1, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
    v5 = a4;
    return swift_retain();
  }
  return result;
}

void outlined consume of AppIntentAction?(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  if (a4)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, a3 & 1, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    swift_release();

  }
}

uint64_t objectdestroy_5Tm_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + *(int *)(v1 + 24) + ((v2 + 16) & ~v2);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

LABEL_6:
      swift_release();
      return swift_deallocObject();
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_WORD *)(v3 + 32), *(_BYTE *)(v3 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_WORD *)(v3 + 72), *(_BYTE *)(v3 + 74));
      v5 = v3 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      return swift_deallocObject();
    case 0:
      goto LABEL_6;
  }
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ResolvedButtonStyle.body.getter()
{
  return partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)(implicit closure #2 in implicit closure #1 in ResolvedButtonStyle.body.getter);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t outlined copy of Environment<EnvironmentValues>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    swift_retain();
  return swift_retain();
}

uint64_t outlined consume of Environment<EnvironmentValues>.Content(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = swift_release();
  if ((a3 & 1) != 0)
    return swift_release();
  return result;
}

void type metadata accessor for Environment<URL?>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Environment<URL?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

void type metadata accessor for Environment<Predicate<Pack{URL}>?>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Environment<Predicate<Pack{URL}>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

uint64_t outlined release of Environment<Text?>(uint64_t a1, uint64_t (*a2)(void))
{
  outlined consume of Environment<Text?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32), a2);
  return a1;
}

uint64_t outlined consume of Environment<Text?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t (*a6)(void))
{
  if ((a5 & 1) != 0)
    return a6();
  else
    return swift_release();
}

uint64_t outlined consume of Binding<String>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of Binding<String>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of (Color, Color)?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void outlined consume of Environment<UISceneSession?>.Content(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release();
}

void type metadata accessor for UISceneSession?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UISceneSession?)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UISceneSession);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UISceneSession?);
  }
}

uint64_t outlined copy of Environment<AppIntentExecutor?>.Content(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if ((a3 & 1) != 0)
    return a4();
  else
    return swift_retain();
}

uint64_t sub_1873EDCF8()
{
  return swift_deallocObject();
}

void type metadata accessor for Environment<PresentSharingPickerAction?>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<PresentSharingPickerAction?>.Content)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<PresentSharingPickerAction?>.Content);
  }
}

uint64_t _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t outlined copy of Environment<PresentSharingPickerAction?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) != 0)
    return outlined copy of PresentSharingPickerAction?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  else
    return swift_retain();
}

uint64_t outlined retain of Environment<PresentSharingPickerAction?>(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 144);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4);
  return a1;
}

uint64_t outlined consume of Environment<PresentSharingPickerAction?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) != 0)
    return outlined consume of PresentSharingPickerAction?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  else
    return swift_release();
}

uint64_t outlined init with take of PresentSharingPickerAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1873EDEAC()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ButtonStyleInput()
{
  return &type metadata for ButtonStyleInput;
}

uint64_t sub_1873EDECC()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1873EDF2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for PrimitiveButtonStyleContainerModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ButtonStyleModifier(255, v4, v5, v8);
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for ButtonStyleWriter(255, v4, v5, v10);
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic, (uint64_t)&type metadata for ButtonMenuStyle.Automatic, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomButtonMenuStyleWriter);
  v12 = type metadata accessor for ModifiedContent();
  v17[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v17[1] = &protocol witness table for ButtonStyleModifier<A>;
  v13 = MEMORY[0x1E0CE2E70];
  v16[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v17);
  v16[1] = &protocol witness table for ButtonStyleWriter<A>;
  v15[0] = MEMORY[0x18D75FFDC](v13, v11, v16);
  v15[1] = &protocol witness table for CustomButtonMenuStyleWriter<A>;
  return MEMORY[0x18D75FFDC](v13, v12, v15);
}

uint64_t sub_1873EE080(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for ButtonStyleContainerModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  v9 = type metadata accessor for WrappedButtonStyle(255, v4, v5, v8);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v9);
  type metadata accessor for ButtonStyleModifier(255, v9, v10, v11);
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for ButtonStyleWriter(255, v9, v10, v13);
  v14 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ButtonStyleAdaptorMenuStyle(255, v4, v5, v15);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleAdaptorMenuStyle<A>, v16);
  type metadata accessor for CustomButtonMenuStyleWriter(255, v16, v17, v18);
  v19 = type metadata accessor for ModifiedContent();
  v24[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v24[1] = &protocol witness table for ButtonStyleModifier<A>;
  v20 = MEMORY[0x1E0CE2E70];
  v23[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v24);
  v23[1] = &protocol witness table for ButtonStyleWriter<A>;
  v22[0] = MEMORY[0x18D75FFDC](v20, v14, v23);
  v22[1] = &protocol witness table for CustomButtonMenuStyleWriter<A>;
  return MEMORY[0x18D75FFDC](v20, v19, v22);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, Accessibil()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, Acce;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, Acce)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifi();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachm, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessibili, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessib, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, Acce);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Accessib()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Ac;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Ac)
  {
    type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActi();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, Ac);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActi()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefau;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefau)
  {
    v1 = type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>, ModifiedConte();
    v2[0] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>> and conformance <> StaticIf<A, B, C>();
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefau);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>);
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for AccessibilityLargeContentViewModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = &protocol witness table for ShowsNavigationIndicatorDisclosureIndicatorModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>();
    v2[0] = &protocol witness table for KeyboardShortcutBindingBehavior<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier;
  if (!lazy protocol witness table cache variable for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefinesSearchCompletionModifier, &type metadata for DefinesSearchCompletionModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ButtonStyleWriter<A>()
{
  return &protocol witness table for ButtonStyleWriter<A>;
}

uint64_t outlined copy of Environment<DismissAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_retain();
  return swift_retain();
}

uint64_t outlined consume of Environment<DismissAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_release();
  return swift_release();
}

uint64_t specialized static ButtonStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  type metadata accessor for ButtonStyleTypeBox(0, a2, a3, a4);
  lazy protocol witness table accessor for type ButtonStyleInput and conformance ButtonStyleInput();
  PropertyList.subscript.setter();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  if (swift_dynamicCastMetatype()
    || (type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox), swift_dynamicCastMetatype())|| (type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle, (uint64_t)&type metadata for BorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox), swift_dynamicCastMetatype())|| (type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox),
        swift_dynamicCastMetatype())
    || (type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox), (result = swift_dynamicCastMetatype()) != 0))
  {
    lazy protocol witness table accessor for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput();
    return PropertyList.subscript.setter();
  }
  return result;
}

void type metadata accessor for Environment<CellConfiguration>.Content(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
}

ValueMetadata *type metadata accessor for EffectiveButtonStyleInput()
{
  return &type metadata for EffectiveButtonStyleInput;
}

uint64_t outlined consume of Environment<NavigationEventHandlers>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a1);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
}

uint64_t outlined copy of Environment<HeaderFooterConfiguration>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
    swift_retain();
  return swift_retain();
}

uint64_t outlined retain of Environment<HeaderFooterConfiguration>(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 72);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v4);
  return a1;
}

uint64_t outlined consume of Environment<HeaderFooterConfiguration>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
    swift_release();
  return swift_release();
}

uint64_t withBridgedAnimation<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return withBridgedAnimation<A>(_:_:completion:)(a1, a2, a3, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a4, a5);
}

uint64_t withBridgedAnimation<A>(_:_:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[6];
  _QWORD v19[2];
  uint64_t v20;

  v20 = static Transaction.current.getter();
  swift_retain();
  Transaction.animation.setter();
  v14 = static SemanticFeature.isEnabled.getter();
  if ((v14 & 1) != 0)
  {
    v19[1] = v19;
    MEMORY[0x1E0C80A78](v14, v15);
    v18[2] = a6;
    v18[3] = &v20;
    v18[4] = a2;
    v18[5] = a3;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a4;
    *(_QWORD *)(v16 + 24) = a5;
    swift_retain();
    static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a1, partial apply for closure #1 in withBridgedAnimation<A>(_:_:completion:), (uint64_t)v18, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> (), v16, a6, a7);
    swift_release();
  }
  else
  {
    swift_retain();
    withTransaction<A>(_:_:)();
    swift_release();
  }
  return swift_release();
}

uint64_t closure #1 in withBridgedAnimation<A>(_:_:completion:)()
{
  swift_retain();
  withTransaction<A>(_:_:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in withBridgedAnimation<A>(_:_:completion:)()
{
  return closure #1 in withBridgedAnimation<A>(_:_:completion:)();
}

uint64_t sub_1873EEC7C()
{
  swift_release();
  return swift_deallocObject();
}

void destroy for AnyShareConfiguration(uint64_t a1)
{
  outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  if (*(_QWORD *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 96))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for AnyShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of AnyShareConfiguration.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  if (!v9)
  {
    v17 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v17;
    v13 = *(_QWORD *)(a2 + 96);
    if (v13)
      goto LABEL_3;
LABEL_5:
    v18 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v18;
    return a1;
  }
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  outlined copy of Text.Storage(v10, v11, v12);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain();
  v13 = *(_QWORD *)(a2 + 96);
  if (!v13)
    goto LABEL_5;
LABEL_3:
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_BYTE *)(a2 + 88);
  outlined copy of Text.Storage(v14, v15, v16);
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_BYTE *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of AnyShareConfiguration.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of AnyShareConfiguration.Storage(v9, v10, v11, v12, v13);
  v14 = (_OWORD *)(a1 + 40);
  v15 = (_OWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v16)
    {
      v17 = *(_QWORD *)(a2 + 40);
      v18 = *(_QWORD *)(a2 + 48);
      v19 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v17, v18, v19);
      v20 = *(_QWORD *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 48);
      v22 = *(_BYTE *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v17;
      *(_QWORD *)(a1 + 48) = v18;
      *(_BYTE *)(a1 + 56) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      v26 = *(_OWORD *)(a2 + 56);
      *v14 = *v15;
      *(_OWORD *)(a1 + 56) = v26;
    }
  }
  else if (v16)
  {
    v23 = *(_QWORD *)(a2 + 40);
    v24 = *(_QWORD *)(a2 + 48);
    v25 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v23, v24, v25);
    *(_QWORD *)(a1 + 40) = v23;
    *(_QWORD *)(a1 + 48) = v24;
    *(_BYTE *)(a1 + 56) = v25;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 56);
    *v14 = *v15;
    *(_OWORD *)(a1 + 56) = v27;
  }
  v28 = (_OWORD *)(a1 + 72);
  v29 = (_OWORD *)(a2 + 72);
  v30 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v30)
    {
      v31 = *(_QWORD *)(a2 + 72);
      v32 = *(_QWORD *)(a2 + 80);
      v33 = *(_BYTE *)(a2 + 88);
      outlined copy of Text.Storage(v31, v32, v33);
      v34 = *(_QWORD *)(a1 + 72);
      v35 = *(_QWORD *)(a1 + 80);
      v36 = *(_BYTE *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = v31;
      *(_QWORD *)(a1 + 80) = v32;
      *(_BYTE *)(a1 + 88) = v33;
      outlined consume of Text.Storage(v34, v35, v36);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 72);
      v40 = *(_OWORD *)(a2 + 88);
      *v28 = *v29;
      *(_OWORD *)(a1 + 88) = v40;
    }
  }
  else if (v30)
  {
    v37 = *(_QWORD *)(a2 + 72);
    v38 = *(_QWORD *)(a2 + 80);
    v39 = *(_BYTE *)(a2 + 88);
    outlined copy of Text.Storage(v37, v38, v39);
    *(_QWORD *)(a1 + 72) = v37;
    *(_QWORD *)(a1 + 80) = v38;
    *(_BYTE *)(a1 + 88) = v39;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    v41 = *(_OWORD *)(a2 + 88);
    *v28 = *v29;
    *(_OWORD *)(a1 + 88) = v41;
  }
  return a1;
}

uint64_t assignWithTake for AnyShareConfiguration(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of AnyShareConfiguration.Storage(v5, v6, v7, v8, v10);
  if (*(_QWORD *)(a1 + 64))
  {
    v11 = *(_QWORD *)(a2 + 64);
    if (v11)
    {
      v12 = *(_BYTE *)(a2 + 56);
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(_QWORD *)(a1 + 64) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v16 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v16;
LABEL_6:
  if (!*(_QWORD *)(a1 + 96))
  {
LABEL_10:
    v22 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v22;
    return a1;
  }
  v17 = *(_QWORD *)(a2 + 96);
  if (!v17)
  {
    outlined destroy of Text(a1 + 72);
    goto LABEL_10;
  }
  v18 = *(_BYTE *)(a2 + 88);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v18;
  outlined consume of Text.Storage(v19, v20, v21);
  *(_QWORD *)(a1 + 96) = v17;
  swift_bridgeObjectRelease();
  return a1;
}

void destroy for AnyIdentifiableShareConfiguration(uint64_t a1)
{
  outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  if (*(_QWORD *)(a1 + 72))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 104))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for AnyIdentifiableShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of AnyShareConfiguration.Storage(v4, v5, v6, v7, v8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  if (!v9)
  {
    v17 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v17;
    v13 = *(_QWORD *)(a2 + 104);
    if (v13)
      goto LABEL_3;
LABEL_5:
    v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v18;
    return a1;
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_BYTE *)(a2 + 64);
  outlined copy of Text.Storage(v10, v11, v12);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain();
  v13 = *(_QWORD *)(a2 + 104);
  if (!v13)
    goto LABEL_5;
LABEL_3:
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_BYTE *)(a2 + 96);
  outlined copy of Text.Storage(v14, v15, v16);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_BYTE *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyIdentifiableShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of AnyShareConfiguration.Storage(v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v13 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of AnyShareConfiguration.Storage(v9, v10, v11, v12, v13);
  v14 = (_OWORD *)(a1 + 48);
  v15 = (_OWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v16)
    {
      v17 = *(_QWORD *)(a2 + 48);
      v18 = *(_QWORD *)(a2 + 56);
      v19 = *(_BYTE *)(a2 + 64);
      outlined copy of Text.Storage(v17, v18, v19);
      v20 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_BYTE *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v17;
      *(_QWORD *)(a1 + 56) = v18;
      *(_BYTE *)(a1 + 64) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 48);
      v26 = *(_OWORD *)(a2 + 64);
      *v14 = *v15;
      *(_OWORD *)(a1 + 64) = v26;
    }
  }
  else if (v16)
  {
    v23 = *(_QWORD *)(a2 + 48);
    v24 = *(_QWORD *)(a2 + 56);
    v25 = *(_BYTE *)(a2 + 64);
    outlined copy of Text.Storage(v23, v24, v25);
    *(_QWORD *)(a1 + 48) = v23;
    *(_QWORD *)(a1 + 56) = v24;
    *(_BYTE *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 64);
    *v14 = *v15;
    *(_OWORD *)(a1 + 64) = v27;
  }
  v28 = (_OWORD *)(a1 + 80);
  v29 = (_OWORD *)(a2 + 80);
  v30 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v30)
    {
      v31 = *(_QWORD *)(a2 + 80);
      v32 = *(_QWORD *)(a2 + 88);
      v33 = *(_BYTE *)(a2 + 96);
      outlined copy of Text.Storage(v31, v32, v33);
      v34 = *(_QWORD *)(a1 + 80);
      v35 = *(_QWORD *)(a1 + 88);
      v36 = *(_BYTE *)(a1 + 96);
      *(_QWORD *)(a1 + 80) = v31;
      *(_QWORD *)(a1 + 88) = v32;
      *(_BYTE *)(a1 + 96) = v33;
      outlined consume of Text.Storage(v34, v35, v36);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 80);
      v40 = *(_OWORD *)(a2 + 96);
      *v28 = *v29;
      *(_OWORD *)(a1 + 96) = v40;
    }
  }
  else if (v30)
  {
    v37 = *(_QWORD *)(a2 + 80);
    v38 = *(_QWORD *)(a2 + 88);
    v39 = *(_BYTE *)(a2 + 96);
    outlined copy of Text.Storage(v37, v38, v39);
    *(_QWORD *)(a1 + 80) = v37;
    *(_QWORD *)(a1 + 88) = v38;
    *(_BYTE *)(a1 + 96) = v39;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
  }
  else
  {
    v41 = *(_OWORD *)(a2 + 96);
    *v28 = *v29;
    *(_OWORD *)(a1 + 96) = v41;
  }
  return a1;
}

uint64_t assignWithTake for AnyIdentifiableShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v4;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  outlined consume of AnyShareConfiguration.Storage(v6, v7, v8, v9, v11);
  if (*(_QWORD *)(a1 + 72))
  {
    v12 = *(_QWORD *)(a2 + 72);
    if (v12)
    {
      v13 = *(_BYTE *)(a2 + 64);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_BYTE *)(a1 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 64) = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *(_QWORD *)(a1 + 72) = v12;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 48);
  }
  v17 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v17;
LABEL_6:
  if (!*(_QWORD *)(a1 + 104))
  {
LABEL_10:
    v23 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v23;
    return a1;
  }
  v18 = *(_QWORD *)(a2 + 104);
  if (!v18)
  {
    outlined destroy of Text(a1 + 80);
    goto LABEL_10;
  }
  v19 = *(_BYTE *)(a2 + 96);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_QWORD *)(a1 + 88);
  v22 = *(_BYTE *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = v19;
  outlined consume of Text.Storage(v20, v21, v22);
  *(_QWORD *)(a1 + 104) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyShareConfiguration.Key()
{
  return &type metadata for AnyShareConfiguration.Key;
}

void AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  unint64_t v17;
  char *v18;

  v16 = *(_QWORD *)(a11 - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a11;
  *((_QWORD *)v18 + 3) = a12;
  *((_QWORD *)v18 + 4) = a13;
  *((_QWORD *)v18 + 5) = a14;
  *((_QWORD *)v18 + 6) = a15;
  *((_QWORD *)v18 + 7) = a16;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v18[v17], a1, a11);
  type metadata accessor for SharePreview();
}

uint64_t sub_1873EF624(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (char *)swift_allocObject();
  *((_QWORD *)v10 + 2) = v6;
  *((_QWORD *)v10 + 3) = v5;
  *((_QWORD *)v10 + 4) = v4;
  *((_QWORD *)v10 + 5) = v13;
  *((_QWORD *)v10 + 6) = v3;
  *((_QWORD *)v10 + 7) = v12;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v10[v9], v14, a1);
  *(_QWORD *)v2 = partial apply for closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:);
  *(_QWORD *)(v2 + 8) = v1;
  *(_QWORD *)(v2 + 16) = partial apply for closure #2 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:);
  *(_QWORD *)(v2 + 24) = v10;
  *(_BYTE *)(v2 + 32) = 1;
  *(_QWORD *)(v2 + 40) = v15;
  *(_QWORD *)(v2 + 48) = v16;
  *(_QWORD *)(v2 + 56) = v18;
  *(_QWORD *)(v2 + 64) = v19;
  *(_QWORD *)(v2 + 72) = v20;
  *(_QWORD *)(v2 + 80) = v21;
  *(_QWORD *)(v2 + 88) = v22;
  *(_QWORD *)(v2 + 96) = v17;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AnyShareConfiguration.Key(uint64_t *a1, void (*a2)(_QWORD *__return_ptr))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  a2(v29);
  v3 = v30;
  result = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[8];
  v13 = a1[9];
  v14 = a1[10];
  v15 = a1[11];
  v16 = a1[12];
  if (v30 != 1)
  {
    v27 = v29[1];
    v28 = v29[0];
    v17 = v29[4];
    v25 = v29[3];
    v26 = v29[2];
    v18 = v29[5];
    v19 = v29[6];
    v20 = v29[7];
    v21 = v31;
    v22 = v32;
    v23 = v33;
    v24 = v34;
    outlined consume of AnyShareConfiguration?(result, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
    v5 = v27;
    result = v28;
    v7 = v25;
    v6 = v26;
    v8 = v17;
    v9 = v18;
    v10 = v19;
    v11 = v20;
    v12 = v3;
    v13 = v21;
    v14 = v22;
    v15 = v23;
    v16 = v24;
  }
  *a1 = result;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v12;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  return result;
}

void AnySharePreview.init<A, B>(_:)()
{
  type metadata accessor for SharePreview();
}

uint64_t sub_1873EF824(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, _QWORD *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v25 - v8;
  *(_QWORD *)(v3 + 32) = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_QWORD *)(v3 + 88) = 0;
  v11 = v2[4];
  v10 = v2[5];
  v12 = v2[6];
  v13 = v2[7];
  *(_QWORD *)(v4 - 200) = v13;
  *(_QWORD *)(v4 - 192) = v12;
  *(_QWORD *)v3 = v11;
  *(_QWORD *)(v3 + 8) = v10;
  *(_QWORD *)(v3 + 16) = v12;
  *(_QWORD *)(v3 + 24) = v13;
  v14 = *(void (**)(char *, _QWORD *, uint64_t))(v6 + 16);
  *(_QWORD *)(v4 - 160) = v14;
  *(_QWORD *)(v4 - 152) = v3 + 64;
  v14(v9, v2, a1);
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = (v15 + 48) & ~v15;
  *(_QWORD *)(v4 - 176) = v16 + v7;
  *(_QWORD *)(v4 - 168) = v6;
  *(_QWORD *)(v4 - 184) = v15 | 7;
  v17 = (char *)swift_allocObject();
  v18 = *(_QWORD *)(v4 - 136);
  *((_QWORD *)v17 + 2) = *(_QWORD *)(v4 - 144);
  *((_QWORD *)v17 + 3) = v18;
  v19 = *(_QWORD *)(v4 - 120);
  *((_QWORD *)v17 + 4) = *(_QWORD *)(v4 - 128);
  *((_QWORD *)v17 + 5) = v19;
  v20 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v20(&v17[v16], v9, a1);
  outlined copy of Text?(v11, v10, *(_QWORD *)(v4 - 192), *(_QWORD *)(v4 - 200));
  swift_release();
  *(_QWORD *)(v3 + 48) = partial apply for closure #1 in AnySharePreview.init<A, B>(_:);
  *(_QWORD *)(v3 + 56) = v17;
  (*(void (**)(char *, _QWORD *, uint64_t))(v4 - 160))(v9, v2, a1);
  v21 = (char *)swift_allocObject();
  v22 = *(_QWORD *)(v4 - 136);
  *((_QWORD *)v21 + 2) = *(_QWORD *)(v4 - 144);
  *((_QWORD *)v21 + 3) = v22;
  v23 = *(_QWORD *)(v4 - 120);
  *((_QWORD *)v21 + 4) = *(_QWORD *)(v4 - 128);
  *((_QWORD *)v21 + 5) = v23;
  v20(&v21[v16], v9, a1);
  swift_release();
  *(_QWORD *)(v3 + 32) = partial apply for closure #2 in AnySharePreview.init<A, B>(_:);
  *(_QWORD *)(v3 + 40) = v21;
  outlined init with copy of Any?((uint64_t)v2, v4 - 112);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 168) + 8))(v2, a1);
  return outlined assign with take of Any?(v4 - 112, *(_QWORD *)(v4 - 152));
}

void closure #1 in AnySharePreview.init<A, B>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for SharePreview();
}

uint64_t sub_1873EFA58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6 + *(int *)(a1 + 60), v1);
  *(_QWORD *)(v9 - 144) = v5;
  *(_QWORD *)(v9 - 136) = v4;
  *(_QWORD *)(v9 - 128) = v3;
  *(_QWORD *)(v9 - 120) = v2;
  v10 = type metadata accessor for NSItemProvider();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in AnySharePreview.init<A, B>(_:), v9 - 160, MEMORY[0x1E0DEDCE8], v10, v11, v9 - 96);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
  return *(_QWORD *)(v9 - 96);
}

void partial apply for closure #1 in AnySharePreview.init<A, B>(_:)()
{
  partial apply for closure #1 in AnySharePreview.init<A, B>(_:)();
}

{
  type metadata accessor for SharePreview();
}

uint64_t closure #1 in closure #1 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;

  v15 = a4;
  v16 = a6;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for NSItemProvider();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  *((_QWORD *)v13 + 4) = v15;
  *((_QWORD *)v13 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v12], (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  result = NSItemProvider.init<A>(transferable:)();
  *v16 = result;
  return result;
}

void closure #2 in AnySharePreview.init<A, B>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for SharePreview();
}

uint64_t sub_1873EFC7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6 + *(int *)(a1 + 56), v1);
  *(_QWORD *)(v9 - 144) = v5;
  *(_QWORD *)(v9 - 136) = v4;
  *(_QWORD *)(v9 - 128) = v3;
  *(_QWORD *)(v9 - 120) = v2;
  v10 = type metadata accessor for NSItemProvider();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #2 in AnySharePreview.init<A, B>(_:), v9 - 160, MEMORY[0x1E0DEDCE8], v10, v11, v9 - 96);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
  return *(_QWORD *)(v9 - 96);
}

void partial apply for closure #2 in AnySharePreview.init<A, B>(_:)()
{
  partial apply for closure #1 in AnySharePreview.init<A, B>(_:)();
}

uint64_t sub_1873EFD50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v8(v2 + ((v6 + 48) & ~v6), v1, v3, v4, v5);
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in closure #2 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;

  v16 = a5;
  v17 = a6;
  v10 = *(_QWORD *)(a2 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for NSItemProvider();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  v14 = v16;
  *((_QWORD *)v13 + 4) = a4;
  *((_QWORD *)v13 + 5) = v14;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v12], (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  result = NSItemProvider.init<A>(transferable:)();
  *v17 = result;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #2 in AnySharePreview.init<A, B>(_:)(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1873EFF20()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #2 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80)));
}

uint64_t partial apply for closure #1 in closure #1 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in AnySharePreview.init<A, B>(_:)(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1873EFFBC()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 80)));
}

uint64_t outlined consume of AnyShareConfiguration?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a9 != 1)
  {
    outlined consume of AnyShareConfiguration.Storage(result, a2, a3, a4, a5);
    outlined consume of Text?(a6, a7, a8, a9);
    return outlined consume of Text?(a10, a11, a12, a13);
  }
  return result;
}

uint64_t (*makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a7;
  v25 = a8;
  v23 = a6;
  v14 = *(_QWORD *)(a2 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](a1, a1);
  v17 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v14 + 16))(v17, v16);
  v18 = (*(unsigned __int8 *)(v14 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = a2;
  *((_QWORD *)v19 + 3) = a3;
  *((_QWORD *)v19 + 4) = a4;
  *((_QWORD *)v19 + 5) = a5;
  v20 = v24;
  *((_QWORD *)v19 + 6) = v23;
  *((_QWORD *)v19 + 7) = v20;
  *((_QWORD *)v19 + 8) = v25;
  *((_QWORD *)v19 + 9) = a9;
  *((_QWORD *)v19 + 10) = a10;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[v18], v17, a2);
  return partial apply for closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:);
}

uint64_t closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t AssociatedConformanceWitness;
  void (*v36)(char *, char *, uint64_t);
  id v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a7;
  v56 = a8;
  v52 = a4;
  v53 = a5;
  v51 = a3;
  v58 = a1;
  v54 = a6;
  v57 = *(char **)(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v44 - v18;
  v20 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v44 - v22;
  v24 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v33 = (char *)&v44 - v32;
  v59 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v28, v58, a2, v31);
  dispatch thunk of Sequence.makeIterator()();
  v50 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v57 = v33;
  v58 = v29;
  v48 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v47(v23, 1, AssociatedTypeWitness) != 1)
  {
    v46 = a9;
    v36 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    do
    {
      v36(v19, v23, AssociatedTypeWitness);
      v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36C8]), sel_init);
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, AssociatedTypeWitness);
      v38 = (*(unsigned __int8 *)(v12 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v39 = (char *)swift_allocObject();
      v40 = v51;
      *((_QWORD *)v39 + 2) = v50;
      *((_QWORD *)v39 + 3) = v40;
      v41 = v53;
      *((_QWORD *)v39 + 4) = v52;
      *((_QWORD *)v39 + 5) = v41;
      v42 = v55;
      *((_QWORD *)v39 + 6) = v54;
      *((_QWORD *)v39 + 7) = v42;
      v43 = v46;
      *((_QWORD *)v39 + 8) = v56;
      *((_QWORD *)v39 + 9) = v43;
      *((_QWORD *)v39 + 10) = a10;
      v36(&v39[v38], v15, AssociatedTypeWitness);
      NSItemProvider.register<A>(_:)();

      swift_release();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v47(v23, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v57, v58);
  return v59;
}

void closure #1 in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)()
{
  type metadata accessor for SharePreview();
}

void sub_1873F05BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, _QWORD);

  MEMORY[0x1E0C80A78](a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&a9 - v13;
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&a9 - v18;
  Collection.index(atOffset:)();
  v20 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
  (*(void (**)(char *))(v16 + 16))(v19);
  v20(v9 - 112, 0);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  (*(void (**)(char *))(v9 - 128))(v19);
  AnySharePreview.init<A, B>(_:)();
}

uint64_t sub_1873F0700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a6;
  v22 = a7;
  v12 = *(_QWORD *)(a2 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36C8]), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a2;
  *((_QWORD *)v16 + 3) = a3;
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = a5;
  v17 = v22;
  *((_QWORD *)v16 + 6) = v21;
  *((_QWORD *)v16 + 7) = v17;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  NSItemProvider.register<A>(_:)();
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v18 + 32) = v14;
  v23 = v18;
  specialized Array._endMutation()();
  return v23;
}

void closure #2 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)()
{
  type metadata accessor for SharePreview();
}

void sub_1873F08E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v10 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)&a9 - v12, v9, v10);
  AnySharePreview.init<A, B>(_:)();
}

void specialized AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for ShareLink();
}

uint64_t sub_1873F0A14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;

  v12 = v8 + *(int *)(a1 + 92);
  *(_QWORD *)(v10 - 168) = v4;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v13(v6, v12, v2);
  *(_QWORD *)(v10 - 208) = a1;
  *(_QWORD *)(v10 - 200) = v8;
  v14 = (uint64_t *)(v8 + *(int *)(a1 + 104));
  v15 = *v14;
  v16 = v14[1];
  *(_QWORD *)(v10 - 216) = *v14;
  *(_QWORD *)(v10 - 176) = v16;
  if (v15)
  {
    *(_QWORD *)(v10 - 264) = v3;
    v13(v3, v6, v2);
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 168) + 80);
    v18 = (v17 + 88) & ~v17;
    *(_QWORD *)(v10 - 256) = (v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = (char *)swift_allocObject();
    *((_QWORD *)v19 + 2) = v2;
    *((_QWORD *)v19 + 3) = v9;
    *(_QWORD *)(v10 - 272) = v9;
    v20 = *(_QWORD *)(v10 - 192);
    *((_QWORD *)v19 + 4) = v5;
    *((_QWORD *)v19 + 5) = v20;
    v22 = *(_QWORD *)(v10 - 232);
    v21 = *(_QWORD *)(v10 - 224);
    *((_QWORD *)v19 + 6) = v21;
    *((_QWORD *)v19 + 7) = v22;
    v24 = *(_QWORD *)(v10 - 248);
    v23 = *(_QWORD *)(v10 - 240);
    *((_QWORD *)v19 + 8) = *(_QWORD *)(v10 - 184);
    *((_QWORD *)v19 + 9) = v24;
    *((_QWORD *)v19 + 10) = v23;
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v10 - 168) + 32))(&v19[v18], *(_QWORD *)(v10 - 264), v2);
    v25 = (uint64_t *)&v19[*(_QWORD *)(v10 - 256)];
    v26 = *(_QWORD *)(v10 - 216);
    v27 = *(_QWORD *)(v10 - 176);
    *v25 = v26;
    v25[1] = v27;
    v28 = makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(v6, v2, *(_QWORD *)(v10 - 272), v5, *(_QWORD *)(v10 - 192), v21, v22, *(_QWORD *)(v10 - 184), v24, v23);
    *(_QWORD *)(v10 - 192) = v29;
    *(_QWORD *)(v10 - 184) = v28;
    *(_DWORD *)(v10 - 224) = 1;
    *(_QWORD *)(v10 - 232) = partial apply for closure #1 in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:);
    v30 = v26;
    v31 = v6;
  }
  else
  {
    v31 = v6;
    if ((*(_DWORD *)(v10 - 256) & 1) != 0)
    {
      v13(v3, v6, v2);
      swift_getAssociatedTypeWitness();
      Array.init<A>(_:)();
      *(_QWORD *)(v10 - 184) = _arrayForceCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v10 - 192) = 0;
      *(_QWORD *)(v10 - 232) = 0;
      v19 = 0;
      *(_DWORD *)(v10 - 224) = 0;
    }
    else
    {
      v32 = makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(v6, v2, v9, v5, *(_QWORD *)(v10 - 192), *(_QWORD *)(v10 - 224), *(_QWORD *)(v10 - 232), *(_QWORD *)(v10 - 184), *(_QWORD *)(v10 - 248), *(_QWORD *)(v10 - 240));
      *(_QWORD *)(v10 - 192) = v33;
      *(_QWORD *)(v10 - 184) = v32;
      *(_QWORD *)(v10 - 232) = 0;
      v19 = 0;
      *(_DWORD *)(v10 - 224) = 1;
    }
    v30 = *(_QWORD *)(v10 - 216);
  }
  outlined copy of AppIntentExecutor?(v30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 168) + 8))(v31, v2);
  v34 = *(_QWORD *)(v10 - 208);
  v35 = *(_QWORD *)(v10 - 200);
  v36 = *(int *)(v34 + 96);
  v37 = *(int *)(v34 + 100);
  v38 = (uint64_t *)(v35 + v36);
  v39 = *v38;
  v40 = v38[1];
  v41 = v38[2];
  v42 = v38[3];
  v43 = *(_QWORD *)(v35 + v37);
  v44 = *(_QWORD *)(v35 + v37 + 8);
  v45 = *(_QWORD *)(v35 + v37 + 16);
  v46 = *(_QWORD *)(v35 + v37 + 24);
  outlined copy of Text?(*v38, v40, v41, v42);
  result = outlined copy of Text?(v43, v44, v45, v46);
  v48 = *(_QWORD *)(v10 - 192);
  *(_QWORD *)v1 = *(_QWORD *)(v10 - 184);
  *(_QWORD *)(v1 + 8) = v48;
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v10 - 232);
  *(_QWORD *)(v1 + 24) = v19;
  *(_BYTE *)(v1 + 32) = *(_DWORD *)(v10 - 224);
  *(_QWORD *)(v1 + 40) = v39;
  *(_QWORD *)(v1 + 48) = v40;
  *(_QWORD *)(v1 + 56) = v41;
  *(_QWORD *)(v1 + 64) = v42;
  *(_QWORD *)(v1 + 72) = v43;
  *(_QWORD *)(v1 + 80) = v44;
  *(_QWORD *)(v1 + 88) = v45;
  *(_QWORD *)(v1 + 96) = v46;
  return result;
}

uint64_t sub_1873F0CE4()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)()
{
  closure #1 in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)();
}

uint64_t sub_1873F0DB4()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)((uint64_t)v0 + ((v2 + 88) & ~v2), v1, v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10]);
}

uint64_t sub_1873F0E54()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);
}

void specialized AnyIdentifiableShareConfiguration.init<A, B, C, D>(_:)()
{
  type metadata accessor for ShareLink();
}

void sub_1873F0FA8()
{
  uint64_t v0;

  ShareLink.namespace.getter();
  specialized AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(v0, 1);
}

__n128 sub_1873F0FE0()
{
  uint64_t v0;
  __n128 result;
  uint64_t v2;
  __n128 v3;
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  result = v3;
  *(_QWORD *)v0 = v2;
  *(__n128 *)(v0 + 8) = v3;
  *(_OWORD *)(v0 + 24) = v4;
  *(_BYTE *)(v0 + 40) = v5;
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 64) = v7;
  *(_OWORD *)(v0 + 80) = v8;
  *(_OWORD *)(v0 + 96) = v9;
  return result;
}

uint64_t partial apply for closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)((uint64_t)v0 + ((v2 + 64) & ~v2), v1, v0[3], v0[4], v0[5], v0[6], v0[7]);
}

void sub_1873F105C()
{
  type metadata accessor for SharePreview();
}

uint64_t sub_1873F1098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v6 = (v5 + 64) & ~v5;
  v7 = v2 + v6;
  if (*(_QWORD *)(v2 + v6 + 24))
    __swift_destroy_boxed_opaque_existential_1(v2 + v6);
  if (*(_QWORD *)(v7 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_BYTE *)(v7 + 48));
    swift_bridgeObjectRelease();
  }
  v8 = v7 + *(int *)(a1 + 56);
  v9 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v3);
  v10 = v7 + *(int *)(a1 + 60);
  v11 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)()
{
  type metadata accessor for SharePreview();
}

void sub_1873F11C0()
{
  closure #2 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)();
}

uint64_t objectdestroy_20Tm()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80)));
}

uint64_t destroy for AnySharePreview(uint64_t a1)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  result = swift_release();
  if (*(_QWORD *)(a1 + 88))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  return result;
}

uint64_t initializeWithCopy for AnySharePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = (_OWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_retain();
  if (v11)
  {
    *(_QWORD *)(a1 + 88) = v11;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v11 - 8))(a1 + 64, v10, v11);
  }
  else
  {
    v12 = v10[1];
    *(_OWORD *)(a1 + 64) = *v10;
    *(_OWORD *)(a1 + 80) = v12;
  }
  return a1;
}

uint64_t assignWithCopy for AnySharePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v16;
  swift_retain();
  swift_release();
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v17;
  swift_retain();
  swift_release();
  v18 = *(_QWORD *)(a2 + 88);
  if (!*(_QWORD *)(a1 + 88))
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 88) = v18;
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 64, a2 + 64);
      return a1;
    }
LABEL_14:
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    return a1;
  }
  if (!v18)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  return a1;
}

uint64_t assignWithTake for AnySharePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      v5 = *(_BYTE *)(a2 + 16);
      v6 = *(_QWORD *)a1;
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(_QWORD *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
LABEL_6:
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  if (*(_QWORD *)(a1 + 88))
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySharePreview(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySharePreview(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void destroy for AnyShareConfiguration.Storage(uint64_t a1)
{
  outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of AnyShareConfiguration.Storage(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of AnyShareConfiguration.Storage(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of AnyShareConfiguration.Storage(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of AnyShareConfiguration.Storage(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyShareConfiguration.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyShareConfiguration.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AnyShareConfiguration.Storage(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

void AutomaticControlGroupStyle.makeBody(configuration:)(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in AutomaticControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance AutomaticControlGroupStyle(_WORD *a1@<X8>)
{
  AutomaticControlGroupStyle.makeBody(configuration:)(a1);
}

ValueMetadata *type metadata accessor for AutomaticControlGroupStyle()
{
  return &type metadata for AutomaticControlGroupStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ControlGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>);
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<InternalControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type InternalControlGroupStyle and conformance InternalControlGroupStyle, (uint64_t)&type metadata for InternalControlGroupStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ControlGroup<ControlGroupStyleConfiguration.Content>)
  {
    v4 = type metadata accessor for ControlGroup(0, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (uint64_t)&protocol witness table for ControlGroupStyleConfiguration.Content, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ControlGroup<ControlGroupStyleConfiguration.Content>);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<MenuControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuControlGroupStyle and conformance MenuControlGroupStyle, (uint64_t)&type metadata for MenuControlGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuControlGroupStyle and conformance MenuControlGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuControlGroupStyle and conformance MenuControlGroupStyle;
  if (!lazy protocol witness table cache variable for type MenuControlGroupStyle and conformance MenuControlGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuControlGroupStyle, &type metadata for MenuControlGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuControlGroupStyle and conformance MenuControlGroupStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a3);
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<ListControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListControlGroupStyle and conformance ListControlGroupStyle, (uint64_t)&type metadata for ListControlGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListControlGroupStyle and conformance ListControlGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListControlGroupStyle and conformance ListControlGroupStyle;
  if (!lazy protocol witness table cache variable for type ListControlGroupStyle and conformance ListControlGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListControlGroupStyle, &type metadata for ListControlGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListControlGroupStyle and conformance ListControlGroupStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<ToolbarControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle, (uint64_t)&type metadata for ToolbarControlGroupStyle);
    lazy protocol witness table accessor for type UseToolbarStyle and conformance UseToolbarStyle();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle;
  if (!lazy protocol witness table cache variable for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarControlGroupStyle, &type metadata for ToolbarControlGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UseToolbarStyle and conformance UseToolbarStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseToolbarStyle and conformance UseToolbarStyle;
  if (!lazy protocol witness table cache variable for type UseToolbarStyle and conformance UseToolbarStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseToolbarStyle, &unk_1E1ABDDC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseToolbarStyle and conformance UseToolbarStyle);
  }
  return result;
}

void type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ControlGroupStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type InternalControlGroupStyle and conformance InternalControlGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InternalControlGroupStyle and conformance InternalControlGroupStyle;
  if (!lazy protocol witness table cache variable for type InternalControlGroupStyle and conformance InternalControlGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InternalControlGroupStyle, &type metadata for InternalControlGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InternalControlGroupStyle and conformance InternalControlGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>);
    v2 = v1;
    v6[0] = lazy protocol witness table accessor for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>(v1, v3, v4, v5);
    v6[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>;
  if (!lazy protocol witness table cache variable for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>)
  {
    type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroup<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for ControlGroupStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for ControlGroupStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for ControlGroupStyleModifier<A>;
    v5[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for UseToolbarStyle()
{
  return &unk_1E1ABDDC8;
}

uint64_t specialized static UseToolbarStyle.evaluate(inputs:)()
{
  char v0;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
    v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  else
    v0 = 0;
  return v0 & 1;
}

uint64_t TabItem.resolvedSidebarCustomizationBehavior.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;

  v2 = v1;
  v4 = TabItem.needsCustomizationIDForEnablement.getter();
  outlined init with copy of TabItem(v2, (uint64_t)v12);
  if ((v4 & 1) != 0)
  {
    v5 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v5 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    outlined copy of TabCustomizationID?(v9, v10, v11);
    outlined consume of TabCustomizationID?(v9, v10, v11);
    swift_bridgeObjectRelease();
    if (v11 == 255)
    {
      result = outlined destroy of TabItem((uint64_t)v12);
      v7 = 2;
      goto LABEL_9;
    }
    outlined consume of TabCustomizationID?(v9, v10, v11);
  }
  outlined destroy of TabItem((uint64_t)v12);
  v6 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  v7 = v16;
  outlined consume of TabCustomizationID?(v13, v14, v15);
  result = swift_bridgeObjectRelease();
LABEL_9:
  *a1 = v7;
  return result;
}

uint64_t static AdaptableTabView.makeSelectionCache(items:selectionValueOnlyIncludesTabs:processedTabs:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  unsigned __int8 v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE __dst[264];
  _BYTE __src[264];
  char v38;
  _OWORD v39[17];
  char v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45[3];

  type metadata accessor for (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)();
  v26 = v10;
  v45[0] = Dictionary.init(dictionaryLiteral:)();
  v28 = static AdaptableTabView.makeIDToSelectionCache(items:selectionValueOnlyIncludesTabs:)(a1, a2);
  v11 = *(_QWORD *)(a3 + 16);
  v27 = a3 + 32;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  v14 = 0;
  v15 = v11 == 0;
  if (v11)
    goto LABEL_3;
LABEL_2:
  memset(v39, 0, sizeof(v39));
  v14 = v11;
  v40 = -1;
  while (1)
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v39, (uint64_t)&v41, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry), (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?);
    if (v44 == 255)
      break;
    v16 = v41;
    outlined init with take of TabEntry(v42, v39);
    static AdaptableTabView.updateSelectionCache(_:adding:idToSelectionCache:hostIndex:)((uint64_t)v45, (uint64_t)v39, v28, v13, v16, a4, a5);
    outlined init with copy of TabEntry((uint64_t)v39, (uint64_t)__src);
    if ((v38 & 1) == 0)
    {
      *(_OWORD *)&__dst[64] = *(_OWORD *)&__src[64];
      *(_OWORD *)&__dst[80] = *(_OWORD *)&__src[80];
      *(_QWORD *)&__dst[96] = *(_QWORD *)&__src[96];
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *(_OWORD *)&__dst[16] = *(_OWORD *)&__src[16];
      *(_OWORD *)&__dst[32] = *(_OWORD *)&__src[32];
      *(_OWORD *)&__dst[48] = *(_OWORD *)&__src[48];
      v20 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v20 != -1)
        swift_once();
      v29 = HIBYTE(static TabOptions.TraitKey.defaultValue);
      v30 = *(_OWORD *)&qword_1EDF00118;
      v31 = word_1EDF00128;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      v18 = v32[1];
      outlined consume of TabCustomizationID?(v33, v34, v35);
      swift_bridgeObjectRelease();
      v19 = __dst;
      goto LABEL_14;
    }
    memcpy(__dst, __src, sizeof(__dst));
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&__dst[48], (uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
    if (v35)
    {
      v17 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v17 != -1)
        swift_once();
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      v18 = v29;
      outlined consume of TabCustomizationID?(v30, *((uint64_t *)&v30 + 1), v31);
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)__dst);
      v19 = v32;
LABEL_14:
      outlined destroy of TabItem((uint64_t)v19);
      goto LABEL_15;
    }
    outlined destroy of TabItemGroup((uint64_t)__dst);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v18 = 0;
LABEL_15:
    result = outlined destroy of TabEntry((uint64_t)v39);
    v21 = v18 ^ 1u;
    v22 = __OFADD__(v13, v21);
    v13 += v21;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
    v15 = v14 >= v11;
    if (v14 == v11)
      goto LABEL_2;
LABEL_3:
    if (v15)
      goto LABEL_24;
    outlined init with copy of TabEntry(v27 + 272 * v14, (uint64_t)&__src[8]);
    *(_QWORD *)&v39[0] = v14;
    outlined init with take of TabEntry(&__src[8], (char *)v39 + 8);
    ++v14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v39[0] = 0;
  MEMORY[0x18D75CA24](&v41, v39, v45[0], MEMORY[0x1E0DEB418], v26, MEMORY[0x1E0DEB428]);
  v23 = v43;
  swift_bridgeObjectRelease();
  if (!v23 && v11)
  {
    v24 = TabEntry.platformIdentifier.getter();
    v42[0] = 0;
    v41 = 0;
    v42[1] = v24;
    v43 = v25;
    *(_QWORD *)&v39[0] = 0;
    type metadata accessor for [Int : (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)]();
    Dictionary.subscript.setter();
  }
  return v45[0];
}

uint64_t static AdaptableTabView.extractTabs(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  int v35;
  uint8_t *v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  char v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t result;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint8_t *v64;
  os_log_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  _QWORD v69[2];
  _BYTE v70[264];
  _BYTE v71[264];
  uint64_t v72;
  _QWORD v73[33];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v67 = (char *)v60 - v4;
  v77 = (char *)MEMORY[0x1E0DEE9D8];
  v5 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_26:
    v30 = (uint64_t)v67;
    static Log.tabView.getter();
    v31 = type metadata accessor for Logger();
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
    {
      outlined destroy of TableRowList?(v30, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    else
    {
      v33 = v77;
      swift_bridgeObjectRetain_n();
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, (os_log_type_t)v35))
      {
        v63 = v35;
        v65 = v34;
        v66 = v32;
        v36 = (uint8_t *)swift_slowAlloc();
        v62 = swift_slowAlloc();
        v76 = v62;
        v64 = v36;
        *(_DWORD *)v36 = 136315138;
        v37 = *((_QWORD *)v33 + 2);
        v38 = MEMORY[0x1E0DEE9D8];
        if (v37)
        {
          v61 = v31;
          v75 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
          v60[1] = v33;
          v39 = (uint64_t)(v33 + 32);
          v68 = &v72;
          do
          {
            outlined init with copy of TabEntry(v39, (uint64_t)v73);
            outlined init with copy of TabEntry((uint64_t)v73, (uint64_t)v71);
            if ((*(_BYTE *)v68 & 1) != 0)
            {
              memcpy(v70, v71, sizeof(v70));
              strcpy((char *)v69, "TabItemGroup ");
              HIWORD(v69[1]) = -4864;
              v40._countAndFlagsBits = TabItemGroup.description.getter();
              String.append(_:)(v40);
              swift_bridgeObjectRelease();
              v41 = v69[0];
              v42 = v69[1];
              outlined destroy of TabItemGroup((uint64_t)v70);
            }
            else
            {
              *(_OWORD *)&v70[64] = *(_OWORD *)&v71[64];
              *(_OWORD *)&v70[80] = *(_OWORD *)&v71[80];
              *(_QWORD *)&v70[96] = *(_QWORD *)&v71[96];
              *(_OWORD *)v70 = *(_OWORD *)v71;
              *(_OWORD *)&v70[16] = *(_OWORD *)&v71[16];
              *(_OWORD *)&v70[32] = *(_OWORD *)&v71[32];
              *(_OWORD *)&v70[48] = *(_OWORD *)&v71[48];
              v69[0] = 0;
              v69[1] = 0xE000000000000000;
              _StringGuts.grow(_:)(20);
              swift_bridgeObjectRelease();
              strcpy((char *)v69, "TabItem ");
              BYTE1(v69[1]) = 0;
              WORD1(v69[1]) = 0;
              HIDWORD(v69[1]) = -402653184;
              v43._countAndFlagsBits = TabItem.platformIdentifier.getter();
              String.append(_:)(v43);
              swift_bridgeObjectRelease();
              v44._countAndFlagsBits = 0x3D6E656464696820;
              v44._object = (void *)0xE800000000000000;
              String.append(_:)(v44);
              v45 = TabEntry.hidden.getter();
              v46 = (v45 & 1) == 0;
              if ((v45 & 1) != 0)
                v47 = 1702195828;
              else
                v47 = 0x65736C6166;
              if (v46)
                v48 = 0xE500000000000000;
              else
                v48 = 0xE400000000000000;
              v49 = v48;
              String.append(_:)(*(Swift::String *)&v47);
              swift_bridgeObjectRelease();
              v41 = v69[0];
              v42 = v69[1];
              outlined destroy of TabItem((uint64_t)v70);
            }
            outlined destroy of TabEntry((uint64_t)v73);
            v38 = v75;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v38 + 16) + 1, 1);
              v38 = v75;
            }
            v51 = *(_QWORD *)(v38 + 16);
            v50 = *(_QWORD *)(v38 + 24);
            if (v51 >= v50 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1);
              v38 = v75;
            }
            *(_QWORD *)(v38 + 16) = v51 + 1;
            v52 = v38 + 16 * v51;
            *(_QWORD *)(v52 + 32) = v41;
            *(_QWORD *)(v52 + 40) = v42;
            v39 += 272;
            --v37;
          }
          while (v37);
          swift_bridgeObjectRelease();
          v30 = (uint64_t)v67;
          v31 = v61;
        }
        v53 = v64;
        v73[0] = v38;
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        v54 = BidirectionalCollection<>.joined(separator:)();
        v56 = v55;
        swift_bridgeObjectRelease();
        v73[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v57 = v65;
        _os_log_impl(&dword_186E48000, v65, (os_log_type_t)v63, "Extracted tabs:\n%s", v53, 0xCu);
        v58 = v62;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v58, -1, -1);
        MEMORY[0x18D760108](v53, -1, -1);

        v32 = v66;
      }
      else
      {
        swift_bridgeObjectRelease_n();

      }
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    }
    swift_beginAccess();
    return (uint64_t)v77;
  }
  v7 = a1 + 32;
  v68 = &v74;
  v66 = a1;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TabItem(v7, (uint64_t)v70);
    v73[0] = *(_QWORD *)&v70[88];
    v8 = ViewTraitCollection.isAuxiliaryContent.getter();
    outlined init with copy of TabItem((uint64_t)v70, (uint64_t)v73);
    if ((v8 & 1) != 0)
    {
      outlined destroy of TabItem((uint64_t)v73);
      outlined init with copy of TabItem((uint64_t)v70, (uint64_t)v71);
LABEL_4:
      outlined destroy of TabItem((uint64_t)v71);
LABEL_5:
      outlined destroy of TabItem((uint64_t)v70);
      goto LABEL_6;
    }
    *(_QWORD *)v71 = v73[11];
    LOBYTE(v76) = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v9 = v69[0];
    outlined destroy of TabItem((uint64_t)v73);
    outlined init with copy of TabItem((uint64_t)v70, (uint64_t)v71);
    if ((v9 & 1) != 0)
      goto LABEL_4;
    v69[0] = *(_QWORD *)&v71[88];
    LOBYTE(v75) = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v10 = v76;
    outlined destroy of TabItem((uint64_t)v71);
    if ((v10 & 1) != 0)
      goto LABEL_5;
    outlined init with copy of TabItem((uint64_t)v70, (uint64_t)v73);
    *(_BYTE *)v68 = 0;
    outlined init with copy of TabEntry((uint64_t)v73, (uint64_t)v71);
    v11 = v77;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v13 = *((_QWORD *)v11 + 2);
    v12 = *((_QWORD *)v11 + 3);
    if (v13 >= v12 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v13 + 1;
    outlined init with take of TabEntry(v71, &v11[272 * v13 + 32]);
    v77 = v11;
    v14 = TabItem.platformIdentifier.getter();
    v16 = v15;
    outlined init with copy of TabEntry((uint64_t)v73, (uint64_t)v71);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v69[0] = v5;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v16);
    v20 = v5[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (v5[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v16);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_52;
      v19 = v24;
    }
    v5 = (_QWORD *)v69[0];
    if ((v23 & 1) != 0)
    {
      outlined assign with take of TabEntry((uint64_t)v71, *(_QWORD *)(v69[0] + 56) + 272 * v19);
    }
    else
    {
      *(_QWORD *)(v69[0] + 8 * (v19 >> 6) + 64) |= 1 << v19;
      v26 = (uint64_t *)(v5[6] + 16 * v19);
      *v26 = v14;
      v26[1] = v16;
      outlined init with take of TabEntry(v71, (void *)(v5[7] + 272 * v19));
      v27 = v5[2];
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        goto LABEL_51;
      v5[2] = v29;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of TabEntry((uint64_t)v73);
    outlined destroy of TabItem((uint64_t)v70);
LABEL_6:
    v7 += 104;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *static AdaptableTabView.makeTabGroups(_:)(uint64_t a1, NSObject *a2, uint64_t a3)
{
  return static AdaptableTabView.makeTabGroups(_:depth:maxDepth:)(a1, 0, 2, a2, a3);
}

void UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Bool_optional v29;
  Swift::Bool value;
  int v31;
  id v32;
  unsigned int v33;
  id v34;
  id v35;
  id v36;
  unsigned int v37;
  unsigned int v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  id v47;
  unsigned int v48;
  id v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint8_t *v71;
  char *v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  id v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  Class v103;
  id v104;
  id v105;
  _QWORD *v106;
  void *v107;
  _QWORD *v108;
  id v109;
  _QWORD v110[2];
  uint8_t *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int16 v130;

  v4 = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v110 - v11;
  v13 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, v8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v110 - v19;
  v21 = a1 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration;
  v22 = *(_QWORD *)(a1 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 16);
  if (v22 == 1)
    return;
  v119 = v12;
  v112 = a3;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_QWORD *)(v21 + 24);
  v25 = *(_QWORD *)(v21 + 32);
  v27 = *(_QWORD *)(v21 + 40);
  v26 = *(_QWORD *)(v21 + 48);
  v28 = *(unsigned __int16 *)(v21 + 56);
  v115 = *(_QWORD *)v21;
  v116 = v23;
  LOBYTE(v125) = v115;
  *((_QWORD *)&v125 + 1) = v23;
  *(_QWORD *)&v126 = v22;
  BYTE8(v126) = v24;
  v127 = v25;
  v128 = v27;
  v129 = v26;
  v123 = v28;
  v130 = v28;
  v117 = v24;
  v118 = v22;
  outlined copy of Binding<NavigationSplitViewColumn>?(v23, v22);
  v121 = v25;
  v122 = v27;
  v120 = v26;
  outlined copy of TabSidebarAccessoryViewConfiguration?(v25);
  v29.value = TabSidebarConfiguration.sidebarVisible()().value;
  if (v29.value != 2)
  {
    value = v29.value;
    v31 = v29.value;
    v32 = objc_msgSend(v4, sel__uip_sidebar);
    v33 = objc_msgSend(v32, sel__isVisible);

    if (v31 != v33)
    {
      v34 = objc_msgSend(v4, sel__uip_sidebar);
      objc_msgSend(v34, sel__setVisible_, value);

    }
  }
  v35 = objc_msgSend(v4, sel__uip_preferredSidebarMode);
  v36 = objc_msgSend(v4, sel__uip_sidebar);
  v37 = objc_msgSend(v36, sel__isVisible);

  if (v35 == (id)2)
    v38 = v37;
  else
    v38 = 0;
  v113 = v38;
  *(_BYTE *)(a1 + direct field offset for TabViewCoordinator_Phone.isUIKitSidebarVisible) = v38;
  v39 = (id)qword_187C2CF80[(char)v123];
  v40 = objc_msgSend(v4, sel__uip_sidebar);
  v41 = objc_msgSend(v40, sel__preferredLayout);

  if (v39 != v41)
  {
    v42 = objc_msgSend(v4, sel__uip_sidebar);
    objc_msgSend(v42, sel__setPreferredLayout_, v39);

  }
  type metadata accessor for Binding<TabViewCustomization>(0);
  v44 = v43;
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48);
  v46 = v45(a2, 1, v43);
  v47 = objc_msgSend(v4, sel__uip_sidebar);
  v48 = objc_msgSend(v47, sel__isEditable);

  if ((v46 != 1) != v48)
  {
    v49 = objc_msgSend(v4, sel__uip_sidebar);
    objc_msgSend(v49, sel__setEditable_, v46 != 1);

  }
  outlined init with copy of Binding<TabViewCustomization>?(a2, (uint64_t)v20);
  v50 = v45((uint64_t)v20, 1, v44);
  v51 = v121;
  if (v50 == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t)type metadata accessor for Binding<TabViewCustomization>, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v114 = 0;
    v52 = 0;
  }
  else
  {
    MEMORY[0x18D75B9C8](v44);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
    v114 = UUID.uuidString.getter();
    v52 = v53;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
  }
  v54 = v122;
  v55 = (uint64_t)v119;
  v56 = objc_msgSend(v4, sel__uip_sidebar);
  v57 = objc_msgSend(v56, sel__customizationIdentifier);

  if (!v57)
  {
    if (!v52)
      goto LABEL_38;
LABEL_22:
    v61 = 0;
    goto LABEL_27;
  }
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v60 = v59;

  if (!v52)
  {
    if (!v60)
      goto LABEL_38;
    swift_bridgeObjectRelease();
    v61 = 1;
    goto LABEL_27;
  }
  if (!v60)
    goto LABEL_22;
  if (v114 != v58 || v52 != v60)
  {
    v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v61 = 0;
    if ((v62 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_37:
      v54 = v122;
      goto LABEL_38;
    }
LABEL_27:
    static Log.tabView.getter();
    v63 = type metadata accessor for Logger();
    v64 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v55, 1, v63) == 1)
    {
      outlined destroy of TableRowList?(v55, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      v65 = Logger.logObject.getter();
      v66 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc();
        v68 = swift_slowAlloc();
        v119 = (char *)v68;
        v111 = v67;
        *(_DWORD *)v67 = 136315138;
        v110[1] = v67 + 4;
        v124 = v68;
        *(_QWORD *)&v125 = v114;
        *((_QWORD *)&v125 + 1) = v52;
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        swift_bridgeObjectRetain();
        v69 = String.init<A>(describing:)();
        *(_QWORD *)&v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v124);
        v51 = v121;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v71 = v111;
        _os_log_impl(&dword_186E48000, v65, v66, "Updating sidebar customization id to\n%s", v111, 0xCu);
        v72 = v119;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v72, -1, -1);
        MEMORY[0x18D760108](v71, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v55, v63);
    }
    v73 = objc_msgSend(v4, sel__uip_sidebar);
    if ((v61 & 1) != 0)
    {
      v74 = 0;
    }
    else
    {
      v74 = (void *)MEMORY[0x18D75CC88](v114, v52);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v73, sel__setCustomizationIdentifier_, v74);

    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_38:
  if (v51 == 1)
  {
    v75 = 0;
  }
  else
  {
    swift_retain();
    v75 = v51;
  }
  v76 = v120;
  v77 = objc_msgSend(v4, sel__uip_sidebar);
  if (v75)
  {
    *((_QWORD *)&v126 + 1) = type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>();
    v127 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type UIHostingConfiguration<AnyView, EmptyView> and conformance UIHostingConfiguration<A, B>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
    v78 = swift_allocObject();
    *(_QWORD *)&v125 = v78;
    OptionalEdgeInsets.init()();
    *(_QWORD *)(v78 + 96) = 0;
    *(_BYTE *)(v78 + 104) = 1;
    *(_QWORD *)(v78 + 112) = 0;
    *(_BYTE *)(v78 + 120) = 1;
    *(_WORD *)(v78 + 121) = 1;
    *(_QWORD *)(v78 + 16) = v75;
    *(_BYTE *)(v78 + 24) = 0;
  }
  else
  {
    v127 = 0;
    v125 = 0u;
    v126 = 0u;
  }
  swift_retain();
  _UITabBarControllerSidebar._headerContentConfiguration.setter();

  if (v51 == 1)
  {
    v79 = 0;
  }
  else
  {
    swift_retain();
    v79 = v54;
  }
  v80 = objc_msgSend(v4, sel__uip_sidebar);
  if (v79)
  {
    *((_QWORD *)&v126 + 1) = type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>();
    v127 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type UIHostingConfiguration<AnyView, EmptyView> and conformance UIHostingConfiguration<A, B>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
    v81 = swift_allocObject();
    *(_QWORD *)&v125 = v81;
    OptionalEdgeInsets.init()();
    *(_QWORD *)(v81 + 96) = 0;
    *(_BYTE *)(v81 + 104) = 1;
    *(_QWORD *)(v81 + 112) = 0;
    *(_BYTE *)(v81 + 120) = 1;
    *(_WORD *)(v81 + 121) = 1;
    *(_QWORD *)(v81 + 16) = v79;
    *(_BYTE *)(v81 + 24) = 0;
  }
  else
  {
    v127 = 0;
    v125 = 0u;
    v126 = 0u;
  }
  swift_retain();
  _UITabBarControllerSidebar._footerContentConfiguration.setter();

  if (v51 == 1)
  {
    swift_release();
    swift_release();
    v82 = v115;
    v83 = v116;
    v85 = v117;
    v84 = v118;
    v86 = 1;
LABEL_58:
    outlined consume of TabSidebarConfiguration?(v82, v83, v84, v85, v86);
    return;
  }
  outlined copy of TabSidebarAccessoryViewConfiguration?(v51);
  swift_release();
  swift_release();
  if (!v76)
  {
    swift_release();
    swift_release();
    v82 = v115;
    v83 = v116;
    v85 = v117;
    v84 = v118;
    v86 = v51;
    goto LABEL_58;
  }
  type metadata accessor for UIKitTabBarController();
  v87 = swift_dynamicCastClass();
  if (!v87)
  {
    swift_release();
    swift_release();
    v97 = v115;
    v98 = v116;
    v100 = v117;
    v99 = v118;
    v101 = v51;
    goto LABEL_60;
  }
  if (v113)
  {
    v91 = (char *)v87;
    v92 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_sidebarBottomBarHost;
    v93 = *(_QWORD **)(v87 + OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_sidebarBottomBarHost);
    if (v93)
    {
      v94 = (_QWORD *)((char *)v93 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v93) + 0x60));
      swift_beginAccess();
      *v94 = v76;
      swift_retain();
      v95 = v4;
      v96 = v93;
      swift_release();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
      GraphHost.asyncTransaction(_:id:_:)();

      swift_release();
      swift_release();
      swift_release_n();
      v97 = v115;
      v98 = v116;
      v100 = v117;
      v99 = v118;
      v101 = v121;
LABEL_60:
      outlined consume of TabSidebarConfiguration?(v97, v98, v99, v100, v101);
      swift_release();
      return;
    }
    type metadata accessor for _UIHostingView<AnyView>(0, v88, v89, v90);
    v104 = objc_allocWithZone(v103);
    swift_retain();
    v105 = v4;
    v106 = specialized _UIHostingView.init(rootView:)(v76);
    swift_release();
    v107 = *(void **)&v91[v92];
    *(_QWORD *)&v91[v92] = v106;
    v108 = v106;

    v109 = objc_msgSend(v91, (SEL)&selRef_loadViewIfNeeded + 3);
    objc_msgSend(v109, sel__setBottomBarView_, *(_QWORD *)&v91[v92]);

    swift_release();
    swift_release();
    swift_release();

    outlined consume of TabSidebarConfiguration?(v115, v116, v118, v117, v121);
  }
  else
  {
    v102 = v4;
    swift_release();
    swift_release();
    outlined consume of TabSidebarConfiguration?(v115, v116, v118, v117, v51);
    swift_release();

  }
}

uint64_t TabItemGroup.updateChildSelection(in:selectedID:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;

  if (!result)
    return result;
  v5 = (void *)result;
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (!result)
    return result;
  v6 = (void *)result;
  v7 = v5;
  v8 = objc_msgSend(v6, sel__children);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_5;
LABEL_27:

LABEL_28:
    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
    goto LABEL_27;
LABEL_5:
  v25 = v6;
  v26 = (void *)v7;
  v11 = 4;
  while (1)
  {
    if ((v9 & 0xC000000000000001) != 0)
      v12 = (id)MEMORY[0x18D75E3BC](v11 - 4, v9);
    else
      v12 = *(id *)(v9 + 8 * v11);
    v13 = v12;
    v6 = (void *)(v11 - 3);
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    v7 = (uint64_t)objc_msgSend(v12, sel__identifier);
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v15;

    if (v14 == a2 && v16 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
        goto LABEL_18;
    }
    objc_opt_self();
    v18 = swift_dynamicCastObjCClass();
    if (v18)
    {
      v23 = v18;
      v24 = v13;
      swift_bridgeObjectRelease();
      objc_msgSend(v25, sel__setSelectedElement_, v23);

      return 1;
    }
LABEL_18:
    objc_opt_self();
    v19 = swift_dynamicCastObjCClass();
    if (v19)
      break;

    ++v11;
    if (v6 == (void *)v10)
    {

      goto LABEL_28;
    }
  }
  v20 = v19;
  v21 = v13;
  swift_bridgeObjectRelease();
  v22 = v21;
  LOBYTE(v21) = TabItemGroup.updateChildSelection(in:selectedID:)(v20, a2, a3);

  if ((v21 & 1) != 0)
  {
    objc_msgSend(v25, sel__setSelectedElement_, v20);

    return 1;
  }

  return 0;
}

void UITabBarController.updateColorScheme(selectedHostVC:environment:)(char *a1, __int128 *a2)
{
  void *v2;
  void *v3;
  __int128 v5;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v3 = v2;
  v5 = *a2;
  if (one-time initialization token for clientNeedsTabViewPreferredColorSchemeSupport != -1)
  {
    v11 = *a2;
    swift_once();
    v5 = v11;
  }
  if (!clientNeedsTabViewPreferredColorSchemeSupport)
    goto LABEL_5;
  v6 = *(void **)&a1[direct field offset for UIHostingController.host];
  v11 = v5;
  type metadata accessor for _UIHostingView<TabItem.RootView>(0);
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TabItem.RootView>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v7 = v6;
  ViewRendererHost.preferenceValue<A>(_:)();

  v5 = v11;
  if (v12 != 2)
  {
    v8 = v12 & 1;
    if ((v12 & 1) != 0)
      v9 = 2;
    else
      v9 = 1;
    objc_msgSend(a1, sel_setOverrideUserInterfaceStyle_, v9, *(double *)&v11, v11);
  }
  else
  {
LABEL_5:
    v12 = v5;
    EnvironmentValues.colorScheme.getter();
    v8 = v13;
  }
  v10 = objc_msgSend(v3, sel_tabBar, v11, v12);
  objc_msgSend(v10, sel_setBarStyle_, v8 & 1);

}

id TabItem.swipeActionsConfiguration(for:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  if ((a1 & 1) != 0)
  {
    *(_QWORD *)&v23 = *(_QWORD *)(v1 + 88);
    v17 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v17 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    static SwipeActions.TraitKey.resolvedValue(attributeValues:)(v37, (uint64_t)&v23);
    swift_bridgeObjectRelease();
    v47 = v33;
    v48 = v34;
    v49 = v35;
    v50 = v36;
    v43 = v29;
    v44 = v30;
    v45 = v31;
    v46 = v32;
    v39 = v25;
    v40 = v26;
    v41 = v27;
    v42 = v28;
    v37 = v23;
    v38 = v24;
    v3 = *((_QWORD *)&v30 + 1);
    v4 = v30;
    v6 = *((_QWORD *)&v31 + 1);
    v5 = v31;
    v8 = *((_QWORD *)&v32 + 1);
    v7 = v32;
    v10 = *((_QWORD *)&v33 + 1);
    v9 = v33;
    v12 = *((_QWORD *)&v34 + 1);
    v11 = v34;
    v14 = *((_QWORD *)&v35 + 1);
    v13 = v35;
    v16 = *((_QWORD *)&v36 + 1);
    v15 = v36;
  }
  else
  {
    *(_QWORD *)&v23 = *(_QWORD *)(v1 + 88);
    v2 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v2 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    static SwipeActions.TraitKey.resolvedValue(attributeValues:)(v37, (uint64_t)&v23);
    swift_bridgeObjectRelease();
    v47 = v33;
    v48 = v34;
    v49 = v35;
    v50 = v36;
    v43 = v29;
    v44 = v30;
    v45 = v31;
    v46 = v32;
    v39 = v25;
    v40 = v26;
    v41 = v27;
    v42 = v28;
    v37 = v23;
    v38 = v24;
    v3 = *((_QWORD *)&v23 + 1);
    v4 = v23;
    v6 = *((_QWORD *)&v24 + 1);
    v5 = v24;
    v8 = *((_QWORD *)&v25 + 1);
    v7 = v25;
    v10 = *((_QWORD *)&v26 + 1);
    v9 = v26;
    v12 = *((_QWORD *)&v27 + 1);
    v11 = v27;
    v14 = *((_QWORD *)&v28 + 1);
    v13 = v28;
    v16 = *((_QWORD *)&v29 + 1);
    v15 = v29;
  }
  v21 = v7;
  v22 = v3;
  v19 = v9;
  v20 = v8;
  outlined copy of SwipeActions.Configuration?(v4, v3, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  outlined release of SwipeActions.Value((uint64_t)&v37);
  if (!v6)
    return 0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  LOWORD(v37) = v4 & 0x101;
  *((_QWORD *)&v37 + 1) = v22;
  LOWORD(v38) = v5 & 0x1FF;
  *((_QWORD *)&v38 + 1) = v6;
  *(_QWORD *)&v39 = v21;
  *((_QWORD *)&v39 + 1) = v20;
  LOBYTE(v40) = v19;
  *((_QWORD *)&v40 + 1) = v10;
  *(_QWORD *)&v41 = v11;
  *((_QWORD *)&v41 + 1) = v12;
  *(_QWORD *)&v42 = v13;
  *((_QWORD *)&v42 + 1) = v14;
  *(_QWORD *)&v43 = v15;
  *((_QWORD *)&v43 + 1) = v16;
  return UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)&v37, (uint64_t)closure #1 in closure #1 in TabItem.swipeActionsConfiguration(for:), 0);
}

UIContextMenuConfiguration_optional __swiftcall TabItem.menuConfiguration()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Bool v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  objc_class *v27;
  _QWORD aBlock[6];
  UIContextMenuConfiguration_optional result;

  v1 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, type metadata accessor for TabContextMenuKey.Storage, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)aBlock - v9;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v5);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)aBlock - v13;
  v15 = type metadata accessor for PlatformItemList.Item();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)aBlock - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = *(_QWORD *)(v0 + 88);
  v20 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v20 != -1)
    swift_once();
  __swift_project_value_buffer(v7, (uint64_t)static TabContextMenuKey.defaultValue);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  v21 = type metadata accessor for TabContextMenuKey.Storage(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v10, 1, v21) == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for TabContextMenuKey.Storage?, (uint64_t)type metadata accessor for TabContextMenuKey.Storage, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_9:
    outlined destroy of TableRowList?((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v23 = 0;
    goto LABEL_13;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)v4, type metadata accessor for TabContextMenuKey.Storage.Guts);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, type metadata accessor for TabContextMenuKey.Storage.Guts);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  }
  else
  {
    outlined init with take of PlatformItemList.Item?((uint64_t)v4, (uint64_t)v14);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for TabContextMenuKey.Storage);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    goto LABEL_9;
  outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  v23 = (id)*((_QWORD *)v19 + 77);
  if (v23)
  {
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v23;
    v25 = (void *)objc_opt_self();
    aBlock[4] = partial apply for closure #1 in TabItem.menuConfiguration();
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
    aBlock[3] = &block_descriptor_26;
    v26 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    v23 = objc_msgSend(v25, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v26);
    swift_release();
    _Block_release(v26);
    objc_msgSend(v23, sel_setPreferredMenuElementOrder_, qword_187C2CFA0[v19[*(int *)(v15 + 128)]]);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
LABEL_13:
  v27 = (objc_class *)v23;
  result.value.super.isa = v27;
  result.is_nil = v22;
  return result;
}

BOOL TabItem.pinned.getter()
{
  uint64_t v0;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  char v6;
  char v7;

  v0 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v0 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v3, v4, v5);
  swift_bridgeObjectRelease();
  if (v7 == 1 && (v6 & 1) != 0)
    return v2 == 1;
  else
    return v2 < 2u;
}

BOOL TabItem.sidebarOnly.getter()
{
  uint64_t v0;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v0 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v0 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v3, v4, v5);
  swift_bridgeObjectRelease();
  return v2 == 2;
}

uint64_t TabItem.isGroupChild.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD v5[13];
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v7 = *(_QWORD *)(v0 + 88);
  v6 = MEMORY[0x1E0DEE9D8];
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v2 = *(_QWORD *)(v5[0] + 16);
  swift_bridgeObjectRelease();
  outlined init with copy of TabItem(v1, (uint64_t)v5);
  if (v2)
  {
    v7 = v5[11];
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v3 = v6 ^ 1;
  }
  else
  {
    v3 = 0;
  }
  outlined destroy of TabItem((uint64_t)v5);
  return v3 & 1;
}

uint64_t TabItem.resolvedCustomizationID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0)
    return TabItem.platformIdentifier.getter();
  v0 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v0 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  v1 = v3;
  outlined copy of TabCustomizationID?(v3, v4, v5);
  outlined consume of TabCustomizationID?(v3, v4, v5);
  swift_bridgeObjectRelease();
  if (v5 == 255)
    return TabItem.platformIdentifier.getter();
  return v1;
}

uint64_t TabItem.needsCustomizationIDForEnablement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  char v5;
  __int16 v7;
  __int128 v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int128 v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;

  v1 = v0;
  v13 = *(_QWORD *)(v0 + 88);
  v2 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v7 = static TabOptions.TraitKey.defaultValue;
  v8 = *(_OWORD *)&qword_1EDF00118;
  v9 = word_1EDF00128;
  v10 = byte_1EDF0012A;
  v11 = qword_1EDF00130;
  v12 = word_1EDF00138;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  v3 = v24;
  outlined consume of TabCustomizationID?(v21, v22, v23);
  swift_bridgeObjectRelease();
  outlined init with copy of TabItem(v1, (uint64_t)v20);
  if (!v3)
  {
    outlined destroy of TabItem((uint64_t)v20);
    outlined init with copy of TabItem(v1, (uint64_t)&v7);
    goto LABEL_7;
  }
  v19 = v25;
  LOWORD(v13) = static TabOptions.TraitKey.defaultValue;
  v14 = *(_OWORD *)&qword_1EDF00118;
  v15 = word_1EDF00128;
  v16 = byte_1EDF0012A;
  v17 = qword_1EDF00130;
  v18 = word_1EDF00138;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v4 = HIBYTE(v9);
  outlined consume of TabCustomizationID?(v8, *((uint64_t *)&v8 + 1), v9);
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v20);
  outlined init with copy of TabItem(v1, (uint64_t)&v7);
  if (!v4)
  {
LABEL_7:
    v5 = 1;
    goto LABEL_8;
  }
  v5 = TabItem.alwaysRequiresCustomizationID.getter();
LABEL_8:
  outlined destroy of TabItem((uint64_t)&v7);
  return v5 & 1;
}

uint64_t TabItem.canBridgeClientProvidedCustomization.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  _BYTE v8[88];

  v1 = TabItem.needsCustomizationIDForEnablement.getter();
  outlined init with copy of TabItem(v0, (uint64_t)v8);
  if ((v1 & 1) != 0)
  {
    v2 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v2 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    outlined copy of TabCustomizationID?(v5, v6, v7);
    outlined consume of TabCustomizationID?(v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v7 == 255)
    {
      v3 = 0;
      goto LABEL_7;
    }
    outlined consume of TabCustomizationID?(v5, v6, v7);
  }
  v3 = 1;
LABEL_7:
  outlined destroy of TabItem((uint64_t)v8);
  return v3;
}

uint64_t TabItem.alwaysRequiresCustomizationID.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  char v12;
  _BYTE v13[88];
  _BYTE v14[104];

  v1 = v0;
  v2 = TabItem.sidebarOnly.getter();
  outlined init with copy of TabItem(v1, (uint64_t)v14);
  if (v2)
  {
    outlined destroy of TabItem((uint64_t)v14);
    outlined init with copy of TabItem(v1, (uint64_t)v13);
LABEL_4:
    v4 = 0;
    goto LABEL_8;
  }
  v3 = TabItem.pinned.getter();
  outlined destroy of TabItem((uint64_t)v14);
  outlined init with copy of TabItem(v1, (uint64_t)v13);
  if (v3)
    goto LABEL_4;
  v5 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v5 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v8, v9, v10);
  swift_bridgeObjectRelease();
  v4 = v12 == 1;
LABEL_8:
  outlined destroy of TabItem((uint64_t)v13);
  v6 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v8, v9, v10);
  swift_bridgeObjectRelease();
  return v11 == 1 || v4;
}

SwiftUI::TabCustomizationBehavior __swiftcall TabItem.resolvedUIKitTopBarCustomizationBehavior(customizationEnabled:)(Swift::Bool customizationEnabled)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v4;
  uint64_t v5;
  SwiftUI::TabCustomizationBehavior result;
  char v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  char v12;

  v4 = v1;
  if ((TabItem.canBridgeClientProvidedCustomization.getter() & 1) != 0)
  {
    v5 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v5 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID?(v9, v10, v11);
    result.role = swift_bridgeObjectRelease();
    *v4 = v12;
  }
  else
  {
    outlined init with copy of TabItem(v2, (uint64_t)v8);
    if (customizationEnabled)
    {
      v7 = TabItem.isGroupChild.getter();
      result.role = outlined destroy of TabItem((uint64_t)v8);
      if ((v7 & 1) != 0)
        *v4 = 0;
      else
        *v4 = 2;
    }
    else
    {
      result.role = outlined destroy of TabItem((uint64_t)v8);
      *v4 = 0;
    }
  }
  return result;
}

SwiftUI::SpringLoadingBehavior __swiftcall TabItem.resolvedSpringLoadingBehavior(environmentBehavior:)(SwiftUI::SpringLoadingBehavior environmentBehavior)
{
  _BYTE *v1;
  _BYTE *v2;
  char v3;
  SwiftUI::SpringLoadingBehavior result;
  char v5;

  v2 = v1;
  v3 = *(_BYTE *)environmentBehavior.guts;
  result.guts = ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v5)
  {
    result.guts = ViewTraitCollection.value<A>(for:defaultValue:)();
    v3 = v5;
  }
  *v2 = v3;
  return result;
}

Swift::Bool __swiftcall TabItem.defaultVisibility(for:)(SwiftUI::AdaptableTabBarPlacement a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  char v12;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  __int16 v24;

  v2 = v1;
  v3 = *(_BYTE *)a1.placement;
  v4 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v19 = static TabOptions.TraitKey.defaultValue;
  v20 = *(_OWORD *)&qword_1EDF00118;
  v21 = word_1EDF00128;
  v22 = byte_1EDF0012A;
  v23 = qword_1EDF00130;
  v24 = word_1EDF00138;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined consume of TabCustomizationID?(v15, v16, v17);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v18 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3), (v6 & 1) != 0))
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v18 + 56) + v5);
    swift_bridgeObjectRelease();
    outlined init with copy of TabItem(v2, (uint64_t)v14);
    if (v7 != 3)
      goto LABEL_11;
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of TabItem(v2, (uint64_t)v14);
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v8 = v20;
  v9 = v23;
  v10 = v21;
  swift_bridgeObjectRetain();
  outlined consume of TabCustomizationID?(v8, *((uint64_t *)&v8 + 1), v10);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v9 + 16))
  {
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
    if ((v12 & 1) != 0)
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 56) + v11);
      swift_bridgeObjectRelease();
LABEL_11:
      outlined destroy of TabItem((uint64_t)v14);
      return v7 < 2;
    }
  }
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v14);
  return 1;
}

Swift::Bool_optional __swiftcall TabSidebarConfiguration.sidebarVisible()()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  if (*((_QWORD *)v0 + 2)
    && (type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]), v3 = v2, swift_retain(), swift_retain(), MEMORY[0x18D75B9C8](&v5, v3), swift_release(), swift_release(), (_BYTE)v5))
  {
    LOBYTE(v1) = v5 == 1;
  }
  else if (v1 != 1 && v1 != 2)
  {
    LOBYTE(v1) = 0;
  }
  return (Swift::Bool_optional)v1;
}

Swift::Int_optional __swiftcall TabItem.sectionID(at:)(Swift::Int at)
{
  Swift::Int v2;
  Swift::Bool v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int_optional result;

  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (at < 0 || *(_QWORD *)(v5 + 16) <= (unint64_t)at)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
    v3 = 1;
  }
  else
  {
    v2 = *(_QWORD *)(v5 + 8 * at + 32);
    swift_bridgeObjectRelease();
    v3 = 0;
  }
  v4 = v2;
  result.value = v4;
  result.is_nil = v3;
  return result;
}

char *static AdaptableTabView.makeTabGroups(_:depth:maxDepth:)(uint64_t a1, unint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  int v41;
  uint8_t *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  uint8_t *v71;
  os_log_t v72;
  uint64_t *v73;
  _QWORD v74[2];
  _BYTE v75[264];
  _BYTE v76[264];
  uint64_t v77;
  _OWORD v78[5];
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86[3];

  v72 = a4;
  v73 = (uint64_t *)a5;
  v71 = (uint8_t *)a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v65 - v9;
  v11 = MEMORY[0x1E0DEE9D8];
  v86[0] = (char *)MEMORY[0x1E0DEE9D8];
  v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v84 = v11;
  v85 = v12;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = a1 + 32;
    v69 = v10;
    v70 = &v81;
    v68 = a1;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TabItem(v14, (uint64_t)v75);
      *(_QWORD *)v76 = *(_QWORD *)&v75[88];
      v74[0] = v11;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      v21 = *(_QWORD *)(*(_QWORD *)&v78[0] + 16);
      swift_bridgeObjectRelease();
      outlined init with copy of TabItem((uint64_t)v75, (uint64_t)v78);
      if (v21)
      {
        outlined destroy of TabItem((uint64_t)v78);
      }
      else
      {
        *(_QWORD *)v76 = *((_QWORD *)&v79 + 1);
        v22 = ViewTraitCollection.isAuxiliaryContent.getter();
        outlined destroy of TabItem((uint64_t)v78);
        if ((v22 & 1) == 0)
        {
          static AdaptableTabView.makeGroup(from:depth:maxDepth:result:cache:)(&v84, a2, (uint64_t)v71, v86, &v85, (uint64_t)v72, (uint64_t)v73);
          outlined init with copy of TabItem((uint64_t)v75, (uint64_t)v78);
          *(_BYTE *)v70 = 0;
          outlined init with copy of TabEntry((uint64_t)v78, (uint64_t)v76);
          v26 = v86[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
          v28 = *((_QWORD *)v26 + 2);
          v27 = *((_QWORD *)v26 + 3);
          if (v28 >= v27 >> 1)
            v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v26);
          *((_QWORD *)v26 + 2) = v28 + 1;
          outlined init with take of TabEntry(v76, &v26[272 * v28 + 32]);
          v86[0] = v26;
          v29 = TabItem.platformIdentifier.getter();
          v31 = v30;
          outlined init with copy of TabEntry((uint64_t)v78, (uint64_t)v76);
          v32 = v85;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v74[0] = v32;
          v85 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v76, v29, v31, isUniquelyReferenced_nonNull_native);
          v85 = v74[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of TabEntry((uint64_t)v78);
          goto LABEL_4;
        }
      }
      v74[0] = *(_QWORD *)&v75[88];
      v83 = v11;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      if ((a2 & 0x8000000000000000) != 0 || *(_QWORD *)(*(_QWORD *)v76 + 16) <= a2)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v23 = *(_QWORD *)(*(_QWORD *)v76 + 8 * a2 + 32);
        swift_bridgeObjectRelease();
        v24 = *(_QWORD *)(v84 + 16);
        if (v24)
        {
          outlined init with copy of TabItem(v84 + 104 * v24 - 72, (uint64_t)v76);
          v82 = v11;
          v83 = *(_QWORD *)&v76[88];
          ViewTraitCollection.value<A>(for:defaultValue:)();
          if (*(_QWORD *)(v74[0] + 16) <= a2)
          {
            swift_bridgeObjectRelease();
            outlined destroy of TabItem((uint64_t)v76);
          }
          else
          {
            v25 = *(_QWORD *)(v74[0] + 8 * a2 + 32);
            swift_bridgeObjectRelease();
            outlined destroy of TabItem((uint64_t)v76);
            if (v25 == v23)
              goto LABEL_22;
          }
        }
        static AdaptableTabView.makeGroup(from:depth:maxDepth:result:cache:)(&v84, a2, (uint64_t)v71, v86, &v85, (uint64_t)v72, (uint64_t)v73);
      }
LABEL_22:
      outlined init with copy of TabItem((uint64_t)v75, (uint64_t)v78);
      v34 = (char *)v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
      v36 = *((_QWORD *)v34 + 2);
      v35 = *((_QWORD *)v34 + 3);
      if (v36 >= v35 >> 1)
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v34);
      *((_QWORD *)v34 + 2) = v36 + 1;
      v15 = &v34[104 * v36];
      v16 = v78[0];
      v17 = v78[2];
      *((_OWORD *)v15 + 3) = v78[1];
      *((_OWORD *)v15 + 4) = v17;
      *((_OWORD *)v15 + 2) = v16;
      v18 = v78[3];
      v19 = v78[4];
      v20 = v79;
      *((_QWORD *)v15 + 16) = v80;
      *((_OWORD *)v15 + 6) = v19;
      *((_OWORD *)v15 + 7) = v20;
      *((_OWORD *)v15 + 5) = v18;
      v84 = (uint64_t)v34;
LABEL_4:
      outlined destroy of TabItem((uint64_t)v75);
      v14 += 104;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        v10 = v69;
        break;
      }
    }
  }
  static AdaptableTabView.makeGroup(from:depth:maxDepth:result:cache:)(&v84, a2, (uint64_t)v71, v86, &v85, (uint64_t)v72, (uint64_t)v73);
  swift_bridgeObjectRelease();
  static Log.tabView.getter();
  v37 = type metadata accessor for Logger();
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v10, 1, v37) == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  else
  {
    v39 = v86[0];
    swift_bridgeObjectRetain_n();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, (os_log_type_t)v41))
    {
      LODWORD(v70) = v41;
      v72 = v40;
      v42 = (uint8_t *)swift_slowAlloc();
      v68 = swift_slowAlloc();
      v83 = v68;
      v71 = v42;
      *(_DWORD *)v42 = 136315138;
      v43 = *((_QWORD *)v39 + 2);
      v44 = MEMORY[0x1E0DEE9D8];
      if (v43)
      {
        v66 = v38;
        v67 = v37;
        v69 = v10;
        v82 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
        v65[1] = v39;
        v45 = (uint64_t)(v39 + 32);
        v73 = &v77;
        do
        {
          outlined init with copy of TabEntry(v45, (uint64_t)v78);
          outlined init with copy of TabEntry((uint64_t)v78, (uint64_t)v76);
          if ((*(_BYTE *)v73 & 1) != 0)
          {
            memcpy(v75, v76, sizeof(v75));
            strcpy((char *)v74, "TabItemGroup ");
            HIWORD(v74[1]) = -4864;
            v46._countAndFlagsBits = TabItemGroup.description.getter();
            String.append(_:)(v46);
            swift_bridgeObjectRelease();
            v47 = v74[0];
            v48 = v74[1];
            outlined destroy of TabItemGroup((uint64_t)v75);
          }
          else
          {
            *(_OWORD *)&v75[64] = *(_OWORD *)&v76[64];
            *(_OWORD *)&v75[80] = *(_OWORD *)&v76[80];
            *(_QWORD *)&v75[96] = *(_QWORD *)&v76[96];
            *(_OWORD *)v75 = *(_OWORD *)v76;
            *(_OWORD *)&v75[16] = *(_OWORD *)&v76[16];
            *(_OWORD *)&v75[32] = *(_OWORD *)&v76[32];
            *(_OWORD *)&v75[48] = *(_OWORD *)&v76[48];
            v74[0] = 0;
            v74[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            strcpy((char *)v74, "TabItem ");
            BYTE1(v74[1]) = 0;
            WORD1(v74[1]) = 0;
            HIDWORD(v74[1]) = -402653184;
            v49._countAndFlagsBits = TabItem.platformIdentifier.getter();
            String.append(_:)(v49);
            swift_bridgeObjectRelease();
            v50._countAndFlagsBits = 0x3D6E656464696820;
            v50._object = (void *)0xE800000000000000;
            String.append(_:)(v50);
            v51 = TabEntry.hidden.getter();
            v52 = (v51 & 1) == 0;
            if ((v51 & 1) != 0)
              v53 = 1702195828;
            else
              v53 = 0x65736C6166;
            if (v52)
              v54 = 0xE500000000000000;
            else
              v54 = 0xE400000000000000;
            v55 = v54;
            String.append(_:)(*(Swift::String *)&v53);
            swift_bridgeObjectRelease();
            v47 = v74[0];
            v48 = v74[1];
            outlined destroy of TabItem((uint64_t)v75);
          }
          outlined destroy of TabEntry((uint64_t)v78);
          v44 = v82;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v44 + 16) + 1, 1);
            v44 = v82;
          }
          v57 = *(_QWORD *)(v44 + 16);
          v56 = *(_QWORD *)(v44 + 24);
          if (v57 >= v56 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1);
            v44 = v82;
          }
          *(_QWORD *)(v44 + 16) = v57 + 1;
          v58 = v44 + 16 * v57;
          *(_QWORD *)(v58 + 32) = v47;
          *(_QWORD *)(v58 + 40) = v48;
          v45 += 272;
          --v43;
        }
        while (v43);
        swift_bridgeObjectRelease();
        v10 = v69;
        v38 = v66;
        v37 = v67;
      }
      v59 = v71;
      *(_QWORD *)&v78[0] = v44;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v60 = BidirectionalCollection<>.joined(separator:)();
      v62 = v61;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v78[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v40 = v72;
      _os_log_impl(&dword_186E48000, v72, (os_log_type_t)v70, "Made groups:\n%s", v59, 0xCu);
      v63 = v68;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v63, -1, -1);
      MEMORY[0x18D760108](v59, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v37);
  }
  swift_beginAccess();
  return v86[0];
}

uint64_t static AdaptableTabView.makeGroup(from:depth:maxDepth:result:cache:)(uint64_t *a1, uint64_t a2, uint64_t a3, char **a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  Swift::Int value;
  Swift::Bool is_nil;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(void);
  uint64_t (*v24)(void);
  uint64_t result;
  _QWORD v30[15];
  _BYTE v31[152];
  _BYTE v32[104];
  _BYTE v33[264];
  _BYTE v34[104];
  _BYTE v35[104];
  _BYTE v36[104];
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[112];
  Swift::Int_optional v40;

  v9 = *a1;
  v10 = static AdaptableTabView.parseItems(from:depth:maxDepth:)((uint64_t)v36, (uint64_t)v39, *a1, a2, a3, a6, a7);
  v12 = v11;
  v37 = v10;
  v38 = v11;
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v36, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v39, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  v13 = MEMORY[0x1E0DEB940];
  outlined init with take of Binding<SearchFieldState>((uint64_t)v30, (uint64_t)v35, (uint64_t)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v31, (uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t)v13, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (!*(_QWORD *)(v10 + 16) || !*(_QWORD *)(v9 + 16))
    goto LABEL_10;
  outlined init with copy of TabItem(v9 + 32, (uint64_t)v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40 = TabItem.sectionID(at:)(a2);
  value = v40.value;
  is_nil = v40.is_nil;
  outlined destroy of TabItem((uint64_t)v30);
  if (is_nil)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_10:
    v24 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v34, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v24);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?));
    v20 = a1;
    goto LABEL_11;
  }
  v30[0] = value;
  v16 = dispatch thunk of CustomStringConvertible.description.getter();
  v18 = v17;
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v35, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v34, (uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  TabItemGroup.init(childEntries:actions:transientIdentifier:header:compactRepresentation:)(v10, v12, v16, v18, (uint64_t)v30, (uint64_t)v32, (int64_t)v33);
  static AdaptableTabView.updateEntryCache(_:adding:)(a5, (uint64_t)v33, a6, a7);
  outlined init with copy of TabItemGroup((uint64_t)v33, (uint64_t)v30);
  v31[144] = 1;
  v19 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
  v20 = a1;
  v22 = *((_QWORD *)v19 + 2);
  v21 = *((_QWORD *)v19 + 3);
  if (v22 >= v21 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v19);
  *((_QWORD *)v19 + 2) = v22 + 1;
  outlined init with take of TabEntry(v30, &v19[272 * v22 + 32]);
  *a4 = v19;
  outlined destroy of TabItemGroup((uint64_t)v33);
  v23 = MEMORY[0x1E0DEB940];
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v34, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v23);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?));
LABEL_11:
  result = swift_bridgeObjectRelease();
  *v20 = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t static AdaptableTabView.parseItems(from:depth:maxDepth:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v47;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v8 = result;
  v72 = 0;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  v65 = (char *)MEMORY[0x1E0DEE9D8];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_QWORD *)(a3 + 16);
  if (!v10)
  {
LABEL_44:
    outlined init with take of Binding<SearchFieldState>((uint64_t)&v66, v8, (uint64_t)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    return (uint64_t)v9;
  }
  v11 = a4 + 1;
  if (__OFADD__(a4, 1))
    goto LABEL_48;
  v13 = a3 + 32;
  v43 = result;
  swift_bridgeObjectRetain();
  v14 = v9;
  v15 = v9;
  v44 = a5;
  v47 = v11;
  while (1)
  {
    outlined init with copy of TabItem(v13, (uint64_t)&v58);
    if (v11 >= a5)
      goto LABEL_19;
    v22 = BYTE8(v63);
    *(_QWORD *)&v50 = *((_QWORD *)&v63 + 1);
    if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) != 0)
      break;
    v49 = v22;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v25 = *(_QWORD *)(v50 + 16);
    result = swift_bridgeObjectRelease();
    v24 = v25 - a4;
    if (__OFSUB__(v25, a4))
      goto LABEL_45;
LABEL_13:
    if (v24 >= 2)
    {
      outlined init with copy of TabItem((uint64_t)&v58, (uint64_t)&v50);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
      v27 = *((_QWORD *)v15 + 2);
      v26 = *((_QWORD *)v15 + 3);
      if (v27 >= v26 >> 1)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v15);
      *((_QWORD *)v15 + 2) = v27 + 1;
      v16 = &v15[104 * v27];
      goto LABEL_5;
    }
LABEL_19:
    if (*((_QWORD *)v15 + 2))
    {
      v28 = static AdaptableTabView.makeTabGroups(_:depth:maxDepth:)(v15, v11, a5, a6, a7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v28);
      v15 = v9;
    }
    v29 = *((_QWORD *)&v63 + 1);
    *(_QWORD *)&v50 = *((_QWORD *)&v63 + 1);
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if (v49 == 1)
    {
      *(_QWORD *)&v50 = v29;
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) != 0)
      {
        v49 = v29;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        v30 = *(_QWORD *)(v50 + 16);
        result = swift_bridgeObjectRelease();
        v31 = v30 + 1 - a4;
        if (__OFSUB__(v30 + 1, a4))
          goto LABEL_46;
      }
      else
      {
        v49 = v29;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        v32 = *(_QWORD *)(v50 + 16);
        result = swift_bridgeObjectRelease();
        v31 = v32 - a4;
        if (__OFSUB__(v32, a4))
          goto LABEL_47;
      }
      if (v31 <= 1)
      {
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v66, (uint64_t)&v50, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
        v33 = *((_QWORD *)&v51 + 1);
        v11 = v47;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v50, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        if (!v33)
        {
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v66, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          v70 = v62;
          v71 = v63;
          v72 = v64;
          v66 = v58;
          v67 = v59;
          v68 = v60;
          v69 = v61;
          goto LABEL_6;
        }
      }
    }
    *(_QWORD *)&v50 = *((_QWORD *)&v63 + 1);
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if (v49 == 1)
    {
      outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)&v50, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      v34 = *((_QWORD *)&v51 + 1);
      v11 = v47;
      outlined destroy of AccessibilityScrollableContext?((uint64_t)&v50, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      if (!v34)
      {
        outlined destroy of AccessibilityScrollableContext?(a2, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v40 = v63;
        *(_OWORD *)(a2 + 64) = v62;
        *(_OWORD *)(a2 + 80) = v40;
        *(_QWORD *)(a2 + 96) = v64;
        v41 = v59;
        *(_OWORD *)a2 = v58;
        *(_OWORD *)(a2 + 16) = v41;
        v42 = v61;
        *(_OWORD *)(a2 + 32) = v60;
        *(_OWORD *)(a2 + 48) = v42;
        goto LABEL_6;
      }
    }
    *(_QWORD *)&v50 = *((_QWORD *)&v63 + 1);
    if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0)
    {
      outlined init with copy of TabItem((uint64_t)&v58, (uint64_t)&v50);
      v57 = 0;
      v37 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
      v39 = *((_QWORD *)v37 + 2);
      v38 = *((_QWORD *)v37 + 3);
      if (v39 >= v38 >> 1)
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v37);
      *((_QWORD *)v37 + 2) = v39 + 1;
      outlined init with take of TabEntry(&v50, &v37[272 * v39 + 32]);
      v65 = v37;
      outlined destroy of TabItem((uint64_t)&v58);
      a5 = v44;
      goto LABEL_6;
    }
    outlined init with copy of TabItem((uint64_t)&v58, (uint64_t)&v50);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v36 = *((_QWORD *)v14 + 2);
    v35 = *((_QWORD *)v14 + 3);
    if (v36 >= v35 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v36 + 1;
    v16 = &v14[104 * v36];
LABEL_5:
    v17 = v50;
    v18 = v52;
    *((_OWORD *)v16 + 3) = v51;
    *((_OWORD *)v16 + 4) = v18;
    *((_OWORD *)v16 + 2) = v17;
    v19 = v53;
    v20 = v54;
    v21 = v55;
    *((_QWORD *)v16 + 16) = v56;
    *((_OWORD *)v16 + 6) = v20;
    *((_OWORD *)v16 + 7) = v21;
    *((_OWORD *)v16 + 5) = v19;
    outlined destroy of TabItem((uint64_t)&v58);
LABEL_6:
    v13 += 104;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v65;
      v8 = v43;
      goto LABEL_44;
    }
  }
  v49 = v22;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v23 = *(_QWORD *)(v50 + 16);
  result = swift_bridgeObjectRelease();
  v24 = v23 + 1 - a4;
  if (!__OFSUB__(v23 + 1, a4))
    goto LABEL_13;
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t static AdaptableTabView.updateEntryCache(_:adding:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v64;
  __int128 v65;
  __int16 v66;
  char v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _OWORD v73[5];
  __int128 v74;
  uint64_t v75;
  _QWORD __dst[33];
  char v77;
  _BYTE __src[264];
  char v79;

  v4 = a2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  outlined init with copy of TabItemGroup(a2, (uint64_t)__src);
  v79 = 1;
  outlined copy of TabCustomizationID.Base();
  specialized Dictionary.subscript.setter(__src, v6, v7);
  v8 = *(_QWORD *)(v4 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v61 = v4;
    v10 = v8 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TabEntry(v10, (uint64_t)__src);
      if ((v79 & 1) == 0)
        break;
      memcpy(__dst, __src, sizeof(__dst));
      static AdaptableTabView.updateEntryCache(_:adding:)(a1, __dst, a3, a4);
      outlined destroy of TabItemGroup((uint64_t)__dst);
LABEL_4:
      v10 += 272;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        v4 = v61;
        goto LABEL_29;
      }
    }
    v73[4] = *(_OWORD *)&__src[64];
    v74 = *(_OWORD *)&__src[80];
    v75 = *(_QWORD *)&__src[96];
    v73[0] = *(_OWORD *)__src;
    v73[1] = *(_OWORD *)&__src[16];
    v73[2] = *(_OWORD *)&__src[32];
    v73[3] = *(_OWORD *)&__src[48];
    __dst[0] = *(_QWORD *)&__src[96];
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v13 = v12;
    v14 = (_QWORD *)*((_QWORD *)&v74 + 1);
    v72 = (_QWORD *)*((_QWORD *)&v74 + 1);
    v15 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v15 != -1)
      swift_once();
    v64 = static TabOptions.TraitKey.defaultValue;
    v65 = *(_OWORD *)&qword_1EDF00118;
    v66 = word_1EDF00128;
    v67 = byte_1EDF0012A;
    v68 = qword_1EDF00130;
    v69 = word_1EDF00138;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v16 = __dst[5];
    outlined consume of TabCustomizationID?(__dst[1], __dst[2], __dst[3]);
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      __dst[0] = v14;
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
        && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
      {
        v72 = v14;
        v64 = static TabOptions.TraitKey.defaultValue;
        v65 = *(_OWORD *)&qword_1EDF00118;
        v66 = word_1EDF00128;
        v67 = byte_1EDF0012A;
        v68 = qword_1EDF00130;
        v69 = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        v17 = __dst[1];
        v18 = __dst[2];
        v19 = LOBYTE(__dst[3]);
        outlined copy of TabCustomizationID?(__dst[1], __dst[2], __dst[3]);
        outlined consume of TabCustomizationID?(v17, v18, v19);
        swift_bridgeObjectRelease();
        if (v19 != 255)
        {
          swift_bridgeObjectRelease();
          v11 = v17;
          v13 = v18;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for searchPlatformIdentifier != -1)
        swift_once();
      v11 = static TabItem.searchPlatformIdentifier;
      v13 = *(_QWORD *)algn_1EDF00098;
      swift_bridgeObjectRetain();
    }
    outlined init with copy of TabItem((uint64_t)v73, (uint64_t)__dst);
    v77 = 0;
    outlined init with take of TabEntry(__dst, &v64);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v72 = (_QWORD *)*a1;
    v21 = v72;
    *a1 = 0x8000000000000000;
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13);
    v24 = v21[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      goto LABEL_57;
    v27 = v22;
    if (v21[3] < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_60;
      v23 = v28;
      v30 = v72;
      if ((v27 & 1) == 0)
        goto LABEL_25;
LABEL_23:
      outlined assign with take of TabEntry((uint64_t)&v64, v30[7] + 272 * v23);
LABEL_27:
      *a1 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of TabItem((uint64_t)v73);
      goto LABEL_4;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v30 = v72;
      if ((v22 & 1) != 0)
        goto LABEL_23;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v30 = v72;
      if ((v27 & 1) != 0)
        goto LABEL_23;
    }
LABEL_25:
    v30[(v23 >> 6) + 8] |= 1 << v23;
    v31 = (uint64_t *)(v30[6] + 16 * v23);
    *v31 = v11;
    v31[1] = v13;
    outlined init with take of TabEntry(&v64, (void *)(v30[7] + 272 * v23));
    v32 = v30[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_59;
    v30[2] = v34;
    swift_bridgeObjectRetain();
    goto LABEL_27;
  }
LABEL_29:
  result = *(_QWORD *)(v4 + 16);
  v36 = *(_QWORD *)(result + 16);
  if (!v36)
    return result;
  v37 = result + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TabItem(v37, (uint64_t)&v64);
    *(_QWORD *)__src = v71;
    v38 = dispatch thunk of CustomStringConvertible.description.getter();
    v40 = v39;
    v41 = v70;
    *(_QWORD *)&v73[0] = v70;
    v42 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v42 != -1)
      swift_once();
    LOWORD(__dst[0]) = static TabOptions.TraitKey.defaultValue;
    *(_OWORD *)&__dst[1] = *(_OWORD *)&qword_1EDF00118;
    LOWORD(__dst[3]) = word_1EDF00128;
    BYTE2(__dst[3]) = byte_1EDF0012A;
    __dst[4] = qword_1EDF00130;
    LOWORD(__dst[5]) = word_1EDF00138;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v43 = __src[40];
    outlined consume of TabCustomizationID?(*(uint64_t *)&__src[8], *(uint64_t *)&__src[16], __src[24]);
    swift_bridgeObjectRelease();
    if ((v43 & 1) != 0)
    {
      *(_QWORD *)__src = v41;
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
        && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
      {
        *(_QWORD *)&v73[0] = v41;
        LOWORD(__dst[0]) = static TabOptions.TraitKey.defaultValue;
        *(_OWORD *)&__dst[1] = *(_OWORD *)&qword_1EDF00118;
        LOWORD(__dst[3]) = word_1EDF00128;
        BYTE2(__dst[3]) = byte_1EDF0012A;
        __dst[4] = qword_1EDF00130;
        LOWORD(__dst[5]) = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        v44 = *(_QWORD *)&__src[8];
        v45 = *(_QWORD *)&__src[16];
        v46 = __src[24];
        outlined copy of TabCustomizationID?(*(uint64_t *)&__src[8], *(uint64_t *)&__src[16], __src[24]);
        outlined consume of TabCustomizationID?(v44, v45, v46);
        swift_bridgeObjectRelease();
        if (v46 != 255)
        {
          swift_bridgeObjectRelease();
          v38 = v44;
          v40 = v45;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for searchPlatformIdentifier != -1)
        swift_once();
      v38 = static TabItem.searchPlatformIdentifier;
      v40 = *(_QWORD *)algn_1EDF00098;
      swift_bridgeObjectRetain();
    }
    outlined init with copy of TabItem((uint64_t)&v64, (uint64_t)__src);
    v79 = 0;
    outlined init with take of TabEntry(__src, __dst);
    v47 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v73[0] = *a1;
    v48 = *(_QWORD *)&v73[0];
    *a1 = 0x8000000000000000;
    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v40);
    v51 = *(_QWORD *)(v48 + 16);
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
      break;
    v54 = v49;
    if (*(_QWORD *)(v48 + 24) >= v53)
    {
      if ((v47 & 1) != 0)
      {
        v57 = *(_QWORD **)&v73[0];
        if ((v49 & 1) == 0)
          goto LABEL_50;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v57 = *(_QWORD **)&v73[0];
        if ((v54 & 1) == 0)
          goto LABEL_50;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, v47);
      v55 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v40);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_60;
      v50 = v55;
      v57 = *(_QWORD **)&v73[0];
      if ((v54 & 1) == 0)
      {
LABEL_50:
        v57[(v50 >> 6) + 8] |= 1 << v50;
        v58 = (uint64_t *)(v57[6] + 16 * v50);
        *v58 = v38;
        v58[1] = v40;
        outlined init with take of TabEntry(__dst, (void *)(v57[7] + 272 * v50));
        v59 = v57[2];
        v33 = __OFADD__(v59, 1);
        v60 = v59 + 1;
        if (v33)
          goto LABEL_58;
        v57[2] = v60;
        swift_bridgeObjectRetain();
        goto LABEL_32;
      }
    }
    outlined assign with take of TabEntry((uint64_t)__dst, v57[7] + 272 * v50);
LABEL_32:
    *a1 = v57;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)&v64);
    v37 += 104;
    if (!--v36)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t IndexUniqueIDProjection.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[104];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TabItem(v3, (uint64_t)v6);
      _ViewList_View.viewID.getter();
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)&v5);
      outlined destroy of TabItem((uint64_t)v6);
      v3 += 104;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Int __swiftcall IndexUniqueIDProjection.get(base:)(Swift::Int base)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 <= base)
  {
    if (v3)
      return *(_QWORD *)(v2 + 128);
    else
      return 0;
  }
  else if (base < 0)
  {
    __break(1u);
  }
  else
  {
    return *(_QWORD *)(v2 + 104 * base + 128);
  }
  return base;
}

Swift::Void __swiftcall IndexUniqueIDProjection.set(base:newValue:)(Swift::Int *base, Swift::Int newValue)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  _BYTE v11[112];
  _OWORD v12[7];

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = 0;
    v8 = v5 + 32;
    while (v7 < *(_QWORD *)(v5 + 16))
    {
      outlined init with copy of TabItem(v8, (uint64_t)v12 + 8);
      *(_OWORD *)&v11[72] = *(_OWORD *)((char *)&v12[4] + 8);
      *(_OWORD *)&v11[88] = *(_OWORD *)((char *)&v12[5] + 8);
      *(_QWORD *)&v11[104] = *((_QWORD *)&v12[6] + 1);
      *(_OWORD *)&v11[8] = *(_OWORD *)((char *)v12 + 8);
      *(_OWORD *)&v11[24] = *(_OWORD *)((char *)&v12[1] + 8);
      *(_OWORD *)&v11[40] = *(_OWORD *)((char *)&v12[2] + 8);
      *(_OWORD *)&v11[56] = *(_OWORD *)((char *)&v12[3] + 8);
      *(_QWORD *)v11 = v7;
      *(_QWORD *)&v12[0] = v7;
      outlined init with copy of TabItem((uint64_t)&v11[8], (uint64_t)v12 + 8);
      v9 = *((_QWORD *)&v12[6] + 1);
      outlined destroy of TabItem((uint64_t)v12 + 8);
      if (v9 == newValue)
      {
        v12[4] = *(_OWORD *)&v11[64];
        v12[5] = *(_OWORD *)&v11[80];
        v12[6] = *(_OWORD *)&v11[96];
        v12[0] = *(_OWORD *)v11;
        v12[1] = *(_OWORD *)&v11[16];
        v12[2] = *(_OWORD *)&v11[32];
        v12[3] = *(_OWORD *)&v11[48];
        goto LABEL_8;
      }
      ++v7;
      outlined destroy of (offset: Int, element: TabItem)((uint64_t)v11);
      v8 += 104;
      if (v6 == v7)
        goto LABEL_6;
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    memset(v12, 0, sizeof(v12));
LABEL_8:
    swift_bridgeObjectRelease();
    outlined init with take of Binding<SearchFieldState>((uint64_t)v12, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem), (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?);
    if (*(_QWORD *)&v11[32])
    {
      v10 = *(_QWORD *)v11;
      outlined destroy of TabItem((uint64_t)&v11[8]);
    }
    else
    {
      outlined destroy of TableRowList?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem), (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?);
      v10 = 0;
    }
    *base = v10;
  }
}

uint64_t type metadata accessor for IndexUniqueIDProjection()
{
  return objc_opt_self();
}

Swift::Int protocol witness for Projection.get(base:) in conformance IndexUniqueIDProjection@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result;

  result = IndexUniqueIDProjection.get(base:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance IndexUniqueIDProjection(Swift::Int *a1, Swift::Int *a2)
{
  IndexUniqueIDProjection.set(base:newValue:)(a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IndexUniqueIDProjection()
{
  Hasher.init(_seed:)();
  IndexUniqueIDProjection.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IndexUniqueIDProjection()
{
  return IndexUniqueIDProjection.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IndexUniqueIDProjection()
{
  Hasher.init(_seed:)();
  IndexUniqueIDProjection.hash(into:)();
  return Hasher._finalize()();
}

Swift::Void __swiftcall ItemIndexTabsOnlyIndexProjection.set(base:newValue:)(Swift::Int *base, Swift::Int newValue)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  Swift::Int v8;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(newValue), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
    swift_endAccess();
    *base = v8;
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t type metadata accessor for ItemIndexTabsOnlyIndexProjection()
{
  return objc_opt_self();
}

uint64_t destroy for TabSidebarConfiguration(uint64_t a1)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_release();
    swift_release();
  }
  result = *(_QWORD *)(a1 + 32);
  if (result != 1)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for TabSidebarConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for TabSidebarConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?(a1 + 8, &lazy cache variable for type metadata for Binding<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v7 = *((_BYTE *)v5 + 16);
      *(_OWORD *)v4 = *v5;
      *(_BYTE *)(v4 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = *v5;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_OWORD *)v4 = v8;
  }
  v9 = (__int128 *)(a1 + 32);
  v11 = (__int128 *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) == 1)
  {
    if (v10 == 1)
    {
      v12 = *v11;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *v9 = v12;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_retain();
      swift_retain();
      swift_retain();
    }
  }
  else if (v10 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration(a1 + 32);
    v13 = *(_QWORD *)(a2 + 48);
    *v9 = *v11;
    *(_QWORD *)(a1 + 48) = v13;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v10;
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_retain();
    swift_release();
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TabSidebarConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_release();
      *(_QWORD *)(a1 + 16) = v6;
      swift_release();
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      goto LABEL_6;
    }
    outlined destroy of AccessibilityScrollableContext?(a1 + 8, &lazy cache variable for type metadata for Binding<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  }
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
LABEL_6:
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) != 1)
  {
    if (v7 != 1)
    {
      *(_QWORD *)(a1 + 32) = v7;
      swift_release();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_release();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_release();
      goto LABEL_11;
    }
    outlined destroy of TabSidebarAccessoryViewConfiguration(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
LABEL_11:
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabSidebarConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TabSidebarConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabSidebarConfiguration()
{
  return &type metadata for TabSidebarConfiguration;
}

ValueMetadata *type metadata accessor for IsInAdaptableTabViewContextInput()
{
  return &type metadata for IsInAdaptableTabViewContextInput;
}

Swift::Int ItemIndexTabsOnlyIndexProjection.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[40];
  _BYTE v6[104];

  Hasher.init(_seed:)();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TabItem(v3, (uint64_t)v6);
      _ViewList_View.viewID.getter();
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v5);
      outlined destroy of TabItem((uint64_t)v6);
      v3 += 104;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance ItemIndexTabsOnlyIndexProjection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;

  v4 = *a1;
  v5 = *v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v8 & 1) != 0))
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  else
    v9 = 0;
  result = swift_endAccess();
  *a2 = v9;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance ItemIndexTabsOnlyIndexProjection(Swift::Int *a1, Swift::Int *a2)
{
  ItemIndexTabsOnlyIndexProjection.set(base:newValue:)(a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ItemIndexTabsOnlyIndexProjection()
{
  return ItemIndexTabsOnlyIndexProjection.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ItemIndexTabsOnlyIndexProjection()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[40];

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      _ViewList_View.viewID.getter();
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v5);
      v3 += 104;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ItemIndexTabsOnlyIndexProjection()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[40];
  _BYTE v7[104];

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TabItem(v4, (uint64_t)v7);
      _ViewList_View.viewID.getter();
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v6);
      outlined destroy of TabItem((uint64_t)v7);
      v4 += 104;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInAdaptableTabViewContextInput()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInAdaptableTabViewContextInput()
{
  lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  return PropertyList.subscript.setter();
}

uint64_t base witness table accessor for Equatable in ItemIndexTabsOnlyIndexProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection, a2, (uint64_t (*)(uint64_t))type metadata accessor for ItemIndexTabsOnlyIndexProjection, (uint64_t)&protocol conformance descriptor for ItemIndexTabsOnlyIndexProjection);
}

uint64_t base witness table accessor for Hashable in ItemIndexTabsOnlyIndexProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection, a2, (uint64_t (*)(uint64_t))type metadata accessor for ItemIndexTabsOnlyIndexProjection, (uint64_t)&protocol conformance descriptor for ItemIndexTabsOnlyIndexProjection);
}

uint64_t base witness table accessor for Equatable in IndexUniqueIDProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type IndexUniqueIDProjection and conformance IndexUniqueIDProjection, a2, (uint64_t (*)(uint64_t))type metadata accessor for IndexUniqueIDProjection, (uint64_t)&protocol conformance descriptor for IndexUniqueIDProjection);
}

uint64_t base witness table accessor for Hashable in IndexUniqueIDProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type IndexUniqueIDProjection and conformance IndexUniqueIDProjection, a2, (uint64_t (*)(uint64_t))type metadata accessor for IndexUniqueIDProjection, (uint64_t)&protocol conformance descriptor for IndexUniqueIDProjection);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInAdaptableTabViewContextInput()
{
  return &protocol witness table for IsInAdaptableTabViewContextInput;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance InAdaptableTabViewContext()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t static AdaptableTabView.makeIDToSelectionCache(items:selectionValueOnlyIncludesTabs:)(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  char v35;
  _QWORD v36[11];
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int16 v41;
  char v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  char v50;
  uint64_t v51;
  _BYTE v52[88];
  _QWORD *v53;
  _QWORD *v54;

  v3 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (uint64_t)v3;
  v5 = a1 + 32;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    outlined init with copy of TabItem(v5, (uint64_t)v52);
    outlined init with copy of TabItem((uint64_t)v52, (uint64_t)&v46);
    if ((a2 & 1) != 0)
    {
      v39 = v51;
      v8 = ViewTraitCollection.isAuxiliaryContent.getter();
      outlined init with copy of TabItem((uint64_t)&v46, (uint64_t)&v39);
      if ((v8 & 1) != 0)
      {
        outlined destroy of TabItem((uint64_t)&v39);
        outlined init with copy of TabItem((uint64_t)&v46, (uint64_t)v36);
LABEL_21:
        outlined destroy of TabItem((uint64_t)v36);
        outlined destroy of TabItem((uint64_t)&v46);
LABEL_22:
        outlined destroy of TabItem((uint64_t)v52);
        goto LABEL_5;
      }
      v36[0] = v45;
      v38 = 0;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      outlined destroy of TabItem((uint64_t)&v39);
      outlined init with copy of TabItem((uint64_t)&v46, (uint64_t)v36);
      if ((v35 & 1) != 0)
        goto LABEL_21;
      v35 = v37;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      v31 = v38;
      outlined destroy of TabItem((uint64_t)v36);
      outlined destroy of TabItem((uint64_t)&v46);
      if ((v31 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      outlined destroy of TabItem((uint64_t)&v46);
    }
    v46 = v54;
    v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v11 = v10;
    v12 = v53;
    v36[0] = v53;
    v13 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v13 != -1)
      swift_once();
    LOWORD(v39) = static TabOptions.TraitKey.defaultValue;
    v40 = *(_OWORD *)&qword_1EDF00118;
    v41 = word_1EDF00128;
    v42 = byte_1EDF0012A;
    v43 = qword_1EDF00130;
    v44 = word_1EDF00138;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v14 = v50;
    outlined consume of TabCustomizationID?(v47, v48, v49);
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
      v46 = v12;
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
        && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
      {
        v33 = v9;
        v36[0] = v12;
        LOWORD(v39) = static TabOptions.TraitKey.defaultValue;
        v40 = *(_OWORD *)&qword_1EDF00118;
        v41 = word_1EDF00128;
        v42 = byte_1EDF0012A;
        v43 = qword_1EDF00130;
        v44 = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        v15 = v47;
        v16 = v48;
        v17 = v49;
        outlined copy of TabCustomizationID?(v47, v48, v49);
        outlined consume of TabCustomizationID?(v15, v16, v17);
        swift_bridgeObjectRelease();
        if (v17 == 255)
        {
          v9 = v33;
        }
        else
        {
          swift_bridgeObjectRelease();
          v9 = v15;
          v11 = v16;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for searchPlatformIdentifier != -1)
        swift_once();
      v9 = static TabItem.searchPlatformIdentifier;
      v11 = *(_QWORD *)algn_1EDF00098;
      swift_bridgeObjectRetain();
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46 = v3;
    v19 = v9;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
    v22 = v3[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = v20;
    if (v3[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
      v3 = v46;
      if ((v25 & 1) != 0)
        goto LABEL_3;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v11);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_41;
      v21 = v26;
      v3 = v46;
      if ((v25 & 1) != 0)
      {
LABEL_3:
        *(_QWORD *)(v3[7] + 8 * v21) = v6;
        goto LABEL_4;
      }
    }
    v3[(v21 >> 6) + 8] |= 1 << v21;
    v28 = (uint64_t *)(v3[6] + 16 * v21);
    *v28 = v19;
    v28[1] = v11;
    *(_QWORD *)(v3[7] + 8 * v21) = v6;
    v29 = v3[2];
    v7 = __OFADD__(v29, 1);
    v30 = v29 + 1;
    if (v7)
      goto LABEL_40;
    v3[2] = v30;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)v52);
    v7 = __OFADD__(v6++, 1);
    if (v7)
      goto LABEL_39;
LABEL_5:
    v5 += 104;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static AdaptableTabView.updateSelectionCache(_:adding:idToSelectionCache:hostIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _OWORD v21[6];
  uint64_t v22;
  _QWORD __dst[33];
  _BYTE __src[264];
  char v25;

  outlined init with copy of TabEntry(a2, (uint64_t)__src);
  if ((v25 & 1) == 0)
  {
    v21[4] = *(_OWORD *)&__src[64];
    v21[5] = *(_OWORD *)&__src[80];
    v22 = *(_QWORD *)&__src[96];
    v21[0] = *(_OWORD *)__src;
    v21[1] = *(_OWORD *)&__src[16];
    v21[2] = *(_OWORD *)&__src[32];
    v21[3] = *(_OWORD *)&__src[48];
    v16 = TabItem.platformIdentifier.getter();
    v18 = v17;
    if (*(_QWORD *)(a3 + 16))
    {
      v19 = v16;
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
      if ((v20 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        __dst[0] = a4;
        __dst[1] = a5;
        __dst[2] = v19;
        __dst[3] = v18;
        type metadata accessor for [Int : (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)]();
        Dictionary.subscript.setter();
        return outlined destroy of TabItem((uint64_t)v21);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return outlined destroy of TabItem((uint64_t)v21);
  }
  memcpy(__dst, __src, sizeof(__dst));
  v13 = *(_QWORD *)(__dst[1] + 16);
  if (v13)
  {
    v14 = __dst[1] + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TabEntry(v14, (uint64_t)v21);
      static AdaptableTabView.updateSelectionCache(_:adding:idToSelectionCache:hostIndex:)(a1, v21, a3, a4, a5, a6, a7);
      outlined destroy of TabEntry((uint64_t)v21);
      v14 += 272;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  return outlined destroy of TabItemGroup((uint64_t)__dst);
}

void one-time initialization function for searchPlatformIdentifier()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel__searchElement);
  v1 = objc_msgSend(v0, sel__identifier);

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  static TabItem.searchPlatformIdentifier = v2;
  *(_QWORD *)algn_1EDF00098 = v4;
}

uint64_t closure #1 in closure #1 in TabItem.swipeActionsConfiguration(for:)(uint64_t (*a1)(uint64_t))
{
  return a1(1);
}

void closure #1 in TabItem.menuConfiguration()(uint64_t a1, uint64_t a2)
{
  UIMenuElementSize preferredElementSize;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  UIMenu *v10;
  uint64_t v11;
  UIImage_optional v12;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  preferredElementSize = MEMORY[0x1E0DEE9D8];
  v11 = MEMORY[0x1E0DEE9D8];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
  if (one-time initialization token for empty != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
  MenuVisitor.visit(_:uniqueNames:)(a2, &v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v12.value.super.isa = 0;
  v12.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v10, v9, (Swift::String_optional)0, v12, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0);
}

BOOL TabItem.visibleInSidebar(customization:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  int v25;
  _BYTE v27[14];
  char v28;
  char v29;

  v2 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v27[-v8];
  type metadata accessor for Binding<TabViewCustomization>(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Binding<TabViewCustomization>?(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) != 1)
  {
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
    v17 = TabItem.resolvedCustomizationID.getter();
    v19 = v18;
    v21 = v20 & 1;
    MEMORY[0x18D75B9C8](v11);
    v22 = *(_QWORD *)&v5[*(int *)(v2 + 20)];
    if (*(_QWORD *)(v22 + 16))
    {
      outlined copy of TabCustomizationID.Base();
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19, v21);
      if ((v24 & 1) != 0)
      {
        v25 = *(unsigned __int8 *)(*(_QWORD *)(v22 + 56) + v23);
        outlined consume of TabCustomizationID.Base();
        outlined consume of TabCustomizationID.Base();
        if (v25)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
          return v25 == 1;
        }
LABEL_9:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
        v28 = 1;
        v16 = TabItem.defaultVisibility(for:)((SwiftUI::AdaptableTabBarPlacement)&v28);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
        return v16;
      }
      outlined consume of TabCustomizationID.Base();
    }
    outlined consume of TabCustomizationID.Base();
    goto LABEL_9;
  }
  outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t)type metadata accessor for Binding<TabViewCustomization>, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v29 = 1;
  return TabItem.defaultVisibility(for:)((SwiftUI::AdaptableTabBarPlacement)&v29);
}

uint64_t TabItem.tabPlacement(customization:)(uint64_t a1)
{
  BOOL v2;
  Swift::Bool v3;
  uint64_t v4;
  Swift::Bool v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v10;
  char v11;

  v2 = TabItem.sidebarOnly.getter();
  v11 = 0;
  v3 = TabItem.defaultVisibility(for:)((SwiftUI::AdaptableTabBarPlacement)&v11);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v5 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4) != 1;
  TabItem.resolvedUIKitTopBarCustomizationBehavior(customizationEnabled:)(v5);
  v6 = qword_187C2CFB8[v10];
  v7 = TabItem.pinned.getter();
  v8 = 5;
  if (v3)
    v8 = v6;
  if (v7)
    v8 = 1;
  if (v2)
    return 4;
  else
    return v8;
}

uint64_t one-time initialization function for clientNeedsTabViewPreferredColorSchemeSupport()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of clientNeedsTabViewPreferredColorSchemeSupport();
  clientNeedsTabViewPreferredColorSchemeSupport = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of clientNeedsTabViewPreferredColorSchemeSupport()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2 == 0xD000000000000013 && v4 == 0x8000000187BDF8D0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

uint64_t implicit closure #6 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t implicit closure #10 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(uint64_t a1)
{
  uint64_t v1;
  _OWORD v3[17];
  _BYTE __src[264];
  char v5;

  outlined init with copy of TabEntry(a1, (uint64_t)__src);
  if ((v5 & 1) != 0)
  {
    memcpy(v3, __src, 0x108uLL);
    v1 = *((_QWORD *)&v3[1] + 1);
    outlined copy of TabCustomizationID.Base();
    outlined destroy of TabItemGroup((uint64_t)v3);
  }
  else
  {
    v3[4] = *(_OWORD *)&__src[64];
    v3[5] = *(_OWORD *)&__src[80];
    *(_QWORD *)&v3[6] = *(_QWORD *)&__src[96];
    v3[0] = *(_OWORD *)__src;
    v3[1] = *(_OWORD *)&__src[16];
    v3[2] = *(_OWORD *)&__src[32];
    v3[3] = *(_OWORD *)&__src[48];
    v1 = TabItem.platformIdentifier.getter();
    outlined destroy of TabItem((uint64_t)v3);
  }
  return v1;
}

uint64_t closure #5 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  outlined copy of TabCustomizationID.Base();
  return v1;
}

uint64_t implicit closure #13 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t implicit closure #14 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(uint64_t a1)
{
  uint64_t v1;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v1 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t closure #1 in UIHostingController.createBridgedTab(using:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[48];
  uint64_t v5;

  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v4, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
  if (v5 == 1)
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)v4, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = AGGraphClearUpdate();
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for ()?, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  return outlined destroy of PlatformItem.SelectionContent((uint64_t)v4);
}

uint64_t outlined destroy of (offset: Int, element: TabItem)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)(0, &lazy cache variable for type metadata for (offset: Int, element: TabItem));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for InAdaptableTabViewContext()
{
  return &type metadata for InAdaptableTabViewContext;
}

uint64_t storeEnumTagSinglePayload for TabViewAdaptationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1873F9240 + 4 * byte_187C2CB25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1873F9274 + 4 * byte_187C2CB20[v4]))();
}

uint64_t sub_1873F9274(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873F927C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1873F9284);
  return result;
}

uint64_t sub_1873F9290(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1873F9298);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1873F929C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873F92A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabViewAdaptationMode()
{
  return &type metadata for TabViewAdaptationMode;
}

unint64_t lazy protocol witness table accessor for type TabViewAdaptationMode and conformance TabViewAdaptationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewAdaptationMode and conformance TabViewAdaptationMode;
  if (!lazy protocol witness table cache variable for type TabViewAdaptationMode and conformance TabViewAdaptationMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewAdaptationMode, &type metadata for TabViewAdaptationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewAdaptationMode and conformance TabViewAdaptationMode);
  }
  return result;
}

void type metadata accessor for (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String));
  }
}

uint64_t specialized ItemIndexTabsOnlyIndexProjection.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  char v37;
  char v38;
  char v39;
  char v40;
  char isUniquelyReferenced_nonNull_native;
  char v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  _QWORD v50[11];
  uint64_t v51;
  char v52;
  uint64_t v53;
  _OWORD v54[5];
  __int128 v55;
  uint64_t v56;
  _OWORD v57[7];
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v3 = MEMORY[0x1E0DEE9D8];
  v1[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v46 = v1 + 3;
  v47 = v1;
  v1[4] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v45 = v1 + 4;
  v1[2] = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v48 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v6 == v4)
    {
      v6 = v4;
      memset(v57, 0, sizeof(v57));
      goto LABEL_9;
    }
    if (v6 >= v4)
      break;
    outlined init with copy of TabItem(v48 + 104 * v6, (uint64_t)v54);
    *(_QWORD *)&v57[0] = v6;
    *(_OWORD *)((char *)&v57[4] + 8) = v54[4];
    *(_OWORD *)((char *)&v57[5] + 8) = v55;
    *((_QWORD *)&v57[6] + 1) = v56;
    *(_OWORD *)((char *)v57 + 8) = v54[0];
    *(_OWORD *)((char *)&v57[1] + 8) = v54[1];
    ++v6;
    *(_OWORD *)((char *)&v57[2] + 8) = v54[2];
    *(_OWORD *)((char *)&v57[3] + 8) = v54[3];
LABEL_9:
    outlined init with take of Binding<SearchFieldState>((uint64_t)v57, (uint64_t)&v58, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem), (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?);
    if (!*((_QWORD *)&v60 + 1))
      return (uint64_t)v47;
    v7 = v58;
    v57[4] = v63;
    v57[5] = v64;
    *(_QWORD *)&v57[6] = v65;
    v57[0] = v59;
    v57[1] = v60;
    v57[2] = v61;
    v57[3] = v62;
    v53 = *((_QWORD *)&v64 + 1);
    v8 = ViewTraitCollection.isAuxiliaryContent.getter();
    outlined init with copy of TabItem((uint64_t)v57, (uint64_t)&v53);
    if ((v8 & 1) != 0)
    {
      outlined destroy of TabItem((uint64_t)&v53);
      outlined init with copy of TabItem((uint64_t)v57, (uint64_t)v50);
LABEL_3:
      outlined destroy of TabItem((uint64_t)v50);
      goto LABEL_4;
    }
    v50[0] = v55;
    v52 = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    outlined destroy of TabItem((uint64_t)&v53);
    outlined init with copy of TabItem((uint64_t)v57, (uint64_t)v50);
    if ((v49 & 1) != 0)
      goto LABEL_3;
    v49 = v51;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v9 = v52;
    outlined destroy of TabItem((uint64_t)v50);
    if ((v9 & 1) != 0)
    {
LABEL_4:
      outlined destroy of TabItem((uint64_t)v57);
    }
    else
    {
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v50[0] = *v46;
      v10 = v50[0];
      *v46 = 0x8000000000000000;
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      v13 = *(_QWORD *)(v10 + 16);
      v14 = (v11 & 1) == 0;
      v15 = v13 + v14;
      if (__OFADD__(v13, v14))
        goto LABEL_39;
      if (*(_QWORD *)(v10 + 24) >= v15)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v43 = v12;
          v39 = v11;
          specialized _NativeDictionary.copy()();
          v11 = v39;
          v12 = v43;
        }
      }
      else
      {
        v37 = v11;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
        v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
        v18 = v17 & 1;
        v11 = v37;
        if ((v37 & 1) != v18)
          goto LABEL_43;
        v12 = v16;
      }
      v19 = (_QWORD *)v50[0];
      if ((v11 & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(v50[0] + 56) + 8 * v12) = v5;
      }
      else
      {
        *(_QWORD *)(v50[0] + 8 * (v12 >> 6) + 64) |= 1 << v12;
        v20 = 8 * v12;
        *(_QWORD *)(v19[6] + v20) = v7;
        *(_QWORD *)(v19[7] + v20) = v5;
        v21 = v19[2];
        v22 = __OFADD__(v21, 1);
        v23 = v21 + 1;
        if (v22)
          goto LABEL_41;
        v19[2] = v23;
      }
      *v46 = v19;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_beginAccess();
      v42 = swift_isUniquelyReferenced_nonNull_native();
      v50[0] = *v45;
      v24 = v50[0];
      *v45 = 0x8000000000000000;
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      v27 = *(_QWORD *)(v24 + 16);
      v28 = (v25 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
        goto LABEL_40;
      if (*(_QWORD *)(v24 + 24) >= v29)
      {
        if ((v42 & 1) != 0)
        {
          v32 = (_QWORD *)v50[0];
          if ((v25 & 1) != 0)
            goto LABEL_30;
        }
        else
        {
          v40 = v25;
          v44 = v26;
          specialized _NativeDictionary.copy()();
          v26 = v44;
          v32 = (_QWORD *)v50[0];
          if ((v40 & 1) != 0)
            goto LABEL_30;
        }
      }
      else
      {
        v38 = v25;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, v42);
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
        if ((v38 & 1) != (v31 & 1))
          goto LABEL_43;
        v26 = v30;
        v32 = (_QWORD *)v50[0];
        if ((v38 & 1) != 0)
        {
LABEL_30:
          *(_QWORD *)(v32[7] + 8 * v26) = v7;
          goto LABEL_34;
        }
      }
      v32[(v26 >> 6) + 8] |= 1 << v26;
      v33 = 8 * v26;
      *(_QWORD *)(v32[6] + v33) = v5;
      *(_QWORD *)(v32[7] + v33) = v7;
      v34 = v32[2];
      v22 = __OFADD__(v34, 1);
      v35 = v34 + 1;
      if (v22)
        goto LABEL_42;
      v32[2] = v35;
LABEL_34:
      *v45 = v32;
      swift_bridgeObjectRelease();
      swift_endAccess();
      outlined destroy of TabItem((uint64_t)v57);
      v22 = __OFADD__(v5++, 1);
      if (v22)
      {
        __break(1u);
        return (uint64_t)v47;
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void type metadata accessor for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(void);
  unint64_t TupleTypeMetadata;
  uint64_t v4;

  if (!lazy cache variable for type metadata for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?))
  {
    MEMORY[0x1E0C80A78](0, a2);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DEAEC8];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [TabEntry], (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [TabItem], (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v2);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v4)
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?));
  }
}

uint64_t outlined init with copy of Binding<TabViewCustomization>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _UIHostingView<TabItem.RootView>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>)
  {
    v2 = lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    v4 = type metadata accessor for _UIHostingView(a1, (uint64_t)&type metadata for TabItem.RootView, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>);
  }
}

void type metadata accessor for _UIHostingView<AnyView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _UIHostingView<AnyView>)
  {
    v4 = type metadata accessor for _UIHostingView(0, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>);
  }
}

uint64_t sub_1873F9B38()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for UIHostingConfiguration<AnyView, EmptyView>;
  if (!lazy cache variable for type metadata for UIHostingConfiguration<AnyView, EmptyView>)
    type metadata accessor for UIHostingConfiguration();
  return result;
}

uint64_t sub_1873F9BD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1873F9BF4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in TabItem.menuConfiguration()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in TabItem.menuConfiguration()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined release of SwipeActions.Value(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v11 = *(_OWORD *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + 208);
  outlined consume of SwipeActions.Configuration?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  outlined consume of SwipeActions.Configuration?(v13, v2, v3, v4, v5, v6, v7, v8, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v9);
  return a1;
}

Swift::Bool __swiftcall DragReorderableDelegate.isReorderingAllowed(at:)(Swift::Int at)
{
  return 1;
}

Swift::Bool __swiftcall DragReorderableDelegate.hasDragSourceProxy(at:)(Swift::Int at)
{
  return 0;
}

Swift::Int __swiftcall DragReorderableDelegate.targetDropDestinationIndex(from:destinationIndex:)(Swift::Int_optional from, Swift::Int destinationIndex)
{
  return destinationIndex;
}

{
  return destinationIndex;
}

uint64_t dispatch thunk of DragReorderableDelegate.onDropTargeted(itemProviders:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of DragReorderableDelegate.onItemInserted(at:itemProviders:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of DragReorderableDelegate.onDropEnded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DragReorderableDelegate.isReorderingAllowed(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DragReorderableDelegate.hasDragSourceProxy(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of DragReorderableDelegate.itemProvider(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DragReorderableDelegate.onDragBegan(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of DragReorderableDelegate.targetDropDestinationIndex(from:destinationIndex:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a5 + 64))(a1, a2 & 1);
}

uint64_t dispatch thunk of DragReorderableDelegate.onDropUpdated(location:sourceIndex:destinationIndex:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a5 + 72))(a1, a2 & 1);
}

uint64_t dispatch thunk of DragReorderableDelegate.onItemMoved(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of DragReorderableDelegate.onDragEnded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t type metadata accessor for DragReorderableChildResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DragReorderableChildResponder;
  if (!type metadata singleton initialization cache for DragReorderableChildResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for DragReorderableChildResponder()
{
  return swift_initClassMetadata2();
}

void DragReorderableLayoutAdaptor.init(root:content:padding:contentTypes:spacing:delegate:containerID:placeholderID:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1, a3);
  type metadata accessor for DragReorderableLayoutAdaptor();
}

uint64_t sub_1873F9F14(int *a1)
{
  __int128 *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v2 + a1[17], v6, v7);
  v13 = (_QWORD *)(v2 + a1[18]);
  *v13 = v11;
  v13[1] = v10;
  v13[2] = v9;
  v13[3] = v8;
  *(_QWORD *)(v2 + a1[19]) = v5;
  v14 = v2 + a1[20];
  *(_QWORD *)v14 = v4;
  *(_BYTE *)(v14 + 8) = v3 & 1;
  result = outlined init with take of OptionalBinaryInteger(v1, v2 + a1[21]);
  *(_QWORD *)(v2 + a1[22]) = v16;
  *(_QWORD *)(v2 + a1[23]) = v17;
  return result;
}

uint64_t static DragReorderableLayoutView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Core;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v39;
  uint64_t v41;
  int v42;
  int v43;
  _BYTE v44[16];
  uint64_t Coordinator;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  v5 = *(_QWORD *)(a2 + 16);
  v34 = *(_DWORD *)(a2 + 24);
  v35 = *(_DWORD *)(a2 + 8);
  v32 = *(_DWORD *)(a2 + 32);
  v33 = *(_DWORD *)(a2 + 28);
  v36 = *(_DWORD *)(a2 + 36);
  v7 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v8 = *(_DWORD *)(a2 + 56);
  v9 = *(_DWORD *)(a2 + 60);
  v10 = *(_DWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 72);
  v30 = *(_DWORD *)(a2 + 76);
  v31 = *(_DWORD *)(a2 + 68);
  v29 = *(_DWORD *)(a2 + 80);
  v60 = *(_QWORD *)a2;
  v62 = v5;
  v61 = v35;
  *(_QWORD *)&v63 = __PAIR64__(v33, v34);
  *(_QWORD *)&v64 = v7;
  *((_QWORD *)&v64 + 1) = v6;
  *((_QWORD *)&v63 + 1) = __PAIR64__(v36, v32);
  *(_QWORD *)&v65 = __PAIR64__(v9, v8);
  *((_QWORD *)&v65 + 1) = __PAIR64__(v31, v10);
  v66 = __PAIR64__(v30, v11);
  v67 = v29;
  LODWORD(v52) = _ViewInputs.transform.getter();
  v50 = type metadata accessor for DragReorderableLayoutView.ChildTransform(0, a3, a4, v12);
  v51 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableLayoutView<A>.ChildTransform, v50);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<ViewTransform>, MEMORY[0x1E0CE2248], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v14 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x1E0DEDCE8];
  v16 = MEMORY[0x1E0DEDD18];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v52, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_16, (uint64_t)v49, v50, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v17);
  _ViewInputs.transform.setter();
  v47 = a3;
  v48 = a4;
  LODWORD(v52) = v39;
  type metadata accessor for DragReorderableLayoutView(255, a3, a4, v18);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  LODWORD(v14) = _GraphValue.value.getter();
  v52 = v60;
  v54 = v62;
  v55 = v63;
  v56 = v64;
  v57 = v65;
  v58 = v66;
  v53 = v61;
  v59 = v67;
  v19 = _ViewInputs.transform.getter();
  v20 = *MEMORY[0x1E0CFED28];
  v52 = __PAIR64__(v19, v14);
  v53 = v20;
  Coordinator = type metadata accessor for DragReorderableLayoutView.MakeCoordinator(0, a3, a4, v21);
  v46 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableLayoutView<A>.MakeCoordinator, Coordinator);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<DragReorderableLayoutCoordinator>, (uint64_t (*)(uint64_t))type metadata accessor for DragReorderableLayoutCoordinator, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v52, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_17, (uint64_t)v44, Coordinator, v15, v22, v16, v23);
  v25 = type metadata accessor for DragReorderableLayoutCore(0, a3, a4, v24);
  v52 = __PAIR64__(v41, v14);
  Core = type metadata accessor for DragReorderableLayoutView.MakeCore(0, a3, a4, v26);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableLayoutView<A>.MakeCore, Core);
  _GraphValue.init<A>(_:)();
  v52 = v60;
  v54 = v62;
  v55 = v63;
  v56 = v64;
  v57 = v65;
  v58 = v66;
  v53 = v61;
  v59 = v67;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableLayoutCore<A>, v25);
  static View.makeDebuggableView(view:inputs:)();
  AGGraphMutateAttribute();
  *(_QWORD *)a5 = v41;
  *(_DWORD *)(a5 + 8) = v42;
  *(_DWORD *)(a5 + 12) = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in static DragReorderableLayoutView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  uint64_t result;

  v8 = _ViewOutputs.viewResponders()();
  result = type metadata accessor for DragReorderableLayoutView.MakeCoordinator(0, a4, a5, v9);
  *(_DWORD *)(a1 + 8) = v8;
  return result;
}

void DragReorderableLayoutView.MakeCoordinator.updateValue()()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for DragReorderableLayoutAdaptor();
}

_QWORD *sub_1873FA59C(int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t *OutputValue;
  uint64_t v39;
  uint64_t Value;
  void (*v41)(_BYTE *, uint64_t, uint64_t);
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(_BYTE *, int *);
  _QWORD *result;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t);
  void (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t, uint64_t);
  void (*v60)(_BYTE *, int *);
  uint64_t v61;
  void (*v62)(_BYTE *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(uint64_t, int *);
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  _BYTE *v76;
  _BYTE v77[96];

  *(_QWORD *)(v4 - 216) = *((_QWORD *)a1 - 1);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v4 - 224) = &v77[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v4 - 240) = &v77[-v9];
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v77[-v12];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v77[-v16];
  v18 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v4 - 232) = &v77[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = &v77[-v24];
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (unint64_t)&v77[-v28];
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = &v77[-v32];
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = &v77[-v36];
  *(_QWORD *)(v4 - 200) = type metadata accessor for DragReorderableLayoutCoordinator();
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
    goto LABEL_13;
  v39 = *OutputValue;
  Value = AGGraphGetValue();
  v41 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16);
  *(_QWORD *)(v4 - 224) = v41;
  v41(v37, Value, v2);
  v42 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
  swift_retain();
  v42(v2, v3);
  v33 = *(_BYTE **)(v18 + 8);
  ((void (*)(_BYTE *, uint64_t))v33)(v37, v2);
  v43 = *(_QWORD *)&v17[a1[22]];
  v44 = *(void (**)(_BYTE *, int *))(*(_QWORD *)(v4 - 216) + 8);
  *(_QWORD *)(v4 - 216) = v44;
  v44(v17, a1);
  *(_QWORD *)(v39 + 16) = v43;
  swift_release();
  result = (_QWORD *)AGGraphGetOutputValue();
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v46 = (_BYTE *)*result;
  v18 = *(_QWORD *)(v4 - 208);
  v47 = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 - 224))(v37, v47, v2);
  swift_retain();
  *(_QWORD *)(v4 - 232) = v42;
  v42(v2, v3);
  ((void (*)(_BYTE *, uint64_t))v33)(v37, v2);
  v48 = *(_QWORD *)&v17[a1[19]];
  swift_bridgeObjectRetain();
  (*(void (**)(_BYTE *, int *))(v4 - 216))(v17, a1);
  *((_QWORD *)v46 + 3) = v48;
  swift_release();
  swift_bridgeObjectRelease();
  result = (_QWORD *)AGGraphGetOutputValue();
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v49 = (_BYTE *)*result;
  v50 = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 - 224))(v37, v50, v2);
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(v4 - 232))(v2, v3);
  ((void (*)(_BYTE *, uint64_t))v33)(v37, v2);
  v51 = &v17[a1[20]];
  v13 = *(_BYTE **)v51;
  v29 = v51[8];
  (*(void (**)(_BYTE *, int *))(v4 - 216))(v17, a1);
  *((_QWORD *)v49 + 4) = v13;
  v49[40] = v29;
  swift_release();
  result = (_QWORD *)AGGraphGetOutputValue();
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v52 = (_BYTE *)*result;
  v53 = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 - 224))(v37, v53, v2);
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(v4 - 232))(v2, v3);
  ((void (*)(_BYTE *, uint64_t))v33)(v37, v2);
  outlined init with copy of TableColumnList((uint64_t)&v17[a1[21]], v4 - 144);
  (*(void (**)(_BYTE *, int *))(v4 - 216))(v17, a1);
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v52 + 48));
  outlined init with take of OptionalBinaryInteger((__int128 *)(v4 - 144), (uint64_t)(v52 + 48));
  swift_endAccess();
  swift_release();
  result = (_QWORD *)AGGraphGetOutputValue();
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v37 = (_BYTE *)*result;
  v25 = (_BYTE *)*(unsigned int *)(v18 + 4);
  v54 = *(_DWORD *)(v18 + 8);
  v55 = *MEMORY[0x1E0CFED28] == v54;
  if (*MEMORY[0x1E0CFED28] == v54)
    v54 = 0;
  if (v55)
    v2 = *MEMORY[0x1E0CFED28];
  else
    v2 = v54;
  swift_retain();
  *((_QWORD *)v37 + 11) = AGCreateWeakAttribute();
  swift_release();
  result = (_QWORD *)AGGraphGetOutputValue();
  if (result)
    goto LABEL_14;
  __break(1u);
LABEL_13:
  v56 = AGGraphGetValue();
  *(_QWORD *)(v4 - 264) = v25;
  v57 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16);
  *(_QWORD *)(v4 - 288) = v57;
  v57(v37, v56, v2);
  v58 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
  v58(v2, v3);
  v59 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v59((uint64_t)v37, v2);
  *(_QWORD *)(v4 - 248) = *(_QWORD *)&v17[a1[22]];
  v60 = *(void (**)(_BYTE *, int *))(*(_QWORD *)(v4 - 216) + 8);
  *(_QWORD *)(v4 - 216) = v60;
  v60(v17, a1);
  v61 = AGGraphGetValue();
  v62 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 - 288);
  v62(v33, v61, v2);
  *(_QWORD *)(v4 - 296) = v58;
  v58(v2, v3);
  v59((uint64_t)v33, v2);
  *(_QWORD *)(v4 - 256) = *(_QWORD *)&v13[a1[19]];
  swift_bridgeObjectRetain();
  (*(void (**)(_BYTE *, int *))(v4 - 216))(v13, a1);
  v63 = AGGraphGetValue();
  v62((_BYTE *)v29, v63, v2);
  v64 = *(_QWORD *)(v4 - 240);
  v58(v2, v3);
  v65 = v59;
  v59(v29, v2);
  v66 = v64 + a1[20];
  *(_QWORD *)(v4 - 280) = *(_QWORD *)v66;
  *(_DWORD *)(v4 - 268) = *(unsigned __int8 *)(v66 + 8);
  v67 = *(void (**)(uint64_t, int *))(v4 - 216);
  v67(v64, a1);
  v68 = AGGraphGetValue();
  v69 = *(_BYTE **)(v4 - 264);
  v62(v69, v68, v2);
  v70 = *(_QWORD *)(v4 - 224);
  (*(void (**)(uint64_t, uint64_t))(v4 - 296))(v2, v3);
  v65((uint64_t)v69, v2);
  outlined init with copy of TableColumnList(v70 + a1[21], v4 - 184);
  v67(v70, a1);
  v71 = AGGraphGetValue();
  v72 = *(_BYTE **)(v4 - 232);
  v62(v72, v71, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  v65((uint64_t)v72, v2);
  v73 = swift_allocObject();
  *(_QWORD *)(v73 + 32) = 0;
  *(_BYTE *)(v73 + 40) = 1;
  *(_QWORD *)(v73 + 152) = 0;
  *(_BYTE *)(v73 + 160) = 1;
  *(_OWORD *)(v73 + 168) = 0u;
  *(_OWORD *)(v73 + 184) = 0u;
  *(_OWORD *)(v73 + 200) = 0u;
  *(_BYTE *)(v73 + 216) = 1;
  *(_QWORD *)(v73 + 224) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v73 + 232) = 0;
  v74 = *(_QWORD *)(v4 - 256);
  *(_QWORD *)(v73 + 16) = *(_QWORD *)(v4 - 248);
  *(_QWORD *)(v73 + 24) = v74;
  *(_QWORD *)(v73 + 32) = *(_QWORD *)(v4 - 280);
  *(_BYTE *)(v73 + 40) = *(_DWORD *)(v4 - 268);
  outlined init with copy of TableColumnList(v4 - 184, v73 + 48);
  v75 = *(_OWORD *)(v4 - 128);
  *(_OWORD *)(v73 + 104) = *(_OWORD *)(v4 - 144);
  *(_OWORD *)(v73 + 120) = v75;
  *(_OWORD *)(v73 + 129) = *(_OWORD *)(v4 - 119);
  *(_QWORD *)(v73 + 88) = 0;
  __swift_destroy_boxed_opaque_existential_1(v4 - 184);
  *(_QWORD *)(v73 + 96) = 0;
  *(_QWORD *)(v4 - 184) = v73;
  AGGraphSetOutputValue();
  swift_release();
  result = (_QWORD *)AGGraphGetOutputValue();
  if (result)
  {
LABEL_14:
    v76 = (_BYTE *)*result;
    swift_retain();
    *((_QWORD *)v76 + 12) = AGCreateWeakAttribute();
    return (_QWORD *)swift_release();
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t DragReorderableLayoutView.ChildTransform.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  return swift_retain();
}

uint64_t DragReorderableLayoutView.ChildTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE v2[40];

  DragReorderableLayoutView.ChildTransform.transform.getter(a1);
  lazy protocol witness table accessor for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)();
  return outlined destroy of AnyHashable((uint64_t)v2);
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableLayoutView<A>.ChildTransform@<X0>(uint64_t a1@<X8>)
{
  return DragReorderableLayoutView.ChildTransform.value.getter(a1);
}

void DragReorderableLayoutView.MakeCore.value.getter(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[8];

  v10[1] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v2, v3);
  v10[0] = (char *)v10 - v4;
  v5 = swift_getAssociatedTypeWitness();
  v6 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  v10[2] = v5;
  v10[3] = v6;
  v10[4] = AssociatedTypeWitness;
  v10[5] = AssociatedConformanceWitness;
  v10[6] = v8;
  v10[7] = v9;
  type metadata accessor for DragReorderableLayoutAdaptor();
}

void sub_1873FAF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t Value;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  MEMORY[0x1E0C80A78](a1, a2);
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&a9 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&a9 - v23;
  Value = AGGraphGetValue();
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v26(v24, Value, v10);
  v9[8](v10, v9);
  v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v24, v10);
  AGGraphClearUpdate();
  closure #1 in DragReorderableLayoutView.MakeCore.value.getter((_QWORD *)(v11 - 128));
  AGGraphSetUpdate();
  v28 = AGGraphGetValue();
  v26(v20, v28, v10);
  v9[9](v10, v9);
  v27(v20, v10);
  v29 = AGGraphGetValue();
  v26(v16, v29, v10);
  v9[10](v10, v9);
  v27(v16, v10);
  DragReorderableLayoutCore.init(adaptor:coordinator:state:placeholder:)();
}

uint64_t closure #1 in DragReorderableLayoutView.MakeCore.value.getter@<X0>(_QWORD *a1@<X8>)
{
  type metadata accessor for DragReorderableLayoutCoordinator();
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

void DragReorderableLayoutCore.init(adaptor:coordinator:state:placeholder:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for DragReorderableLayoutAdaptor();
}

uint64_t sub_1873FB21C(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v12, a1);
  v6 = (int *)type metadata accessor for DragReorderableLayoutCore(0, v4, v3, v5);
  *(_QWORD *)(v1 + v6[9]) = v13;
  v7 = (_OWORD *)(v1 + v6[10]);
  v8 = v2[1];
  *v7 = *v2;
  v7[1] = v8;
  *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v2 + 25);
  v9 = v1 + v6[11];
  v10 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v14, v10);
}

uint64_t DragReorderableLayoutCore.state.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DragReorderableLayoutView<A>.MakeCore@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for DragReorderableLayoutCore(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

void protocol witness for Rule.value.getter in conformance DragReorderableLayoutView<A>.MakeCore(uint64_t a1@<X8>)
{
  DragReorderableLayoutView.MakeCore.value.getter(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DragReorderableLayoutView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static DragReorderableLayoutView._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DragReorderableLayoutView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableLayoutView<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DragReorderableLayoutView<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableLayoutView<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance DragReorderableLayoutView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableLayoutView<A>, a1);
  specialized PrimitiveView.body.getter();
}

void DragReorderableLayoutCore.body.getter()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t)&type metadata for MappedViewElement.Placeholder, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>();
  type metadata accessor for MappedViews();
}

void sub_1873FB554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v9 - 336) = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v9 - 344) = AssociatedConformanceWitness;
  v12 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v9 - 176) = AssociatedTypeWitness;
  *(_QWORD *)(v9 - 168) = v12;
  v13 = MEMORY[0x1E0DEB428];
  *(_QWORD *)(v9 - 160) = AssociatedConformanceWitness;
  *(_QWORD *)(v9 - 152) = v13;
  v14 = type metadata accessor for IDView();
  v15 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  v17 = type metadata accessor for Optional();
  *(_QWORD *)(v9 - 104) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73F0], v14);
  *(_QWORD *)(v9 - 96) = &protocol witness table for HiddenModifierAllowingViewResponders;
  v18 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v9 - 120) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v9 - 104);
  *(_QWORD *)(v9 - 112) = &protocol witness table for DragReorderableChildModifier;
  *(_QWORD *)(v9 - 128) = MEMORY[0x18D75FFDC](v18, v16, v9 - 120);
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v17, v9 - 128);
  type metadata accessor for DropPlaceholderListModifier(255, v17, v19, v20);
  v21 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 472) = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&a9 - v23;
  v25 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v9 - 456) = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&a9 - v27;
  v29 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v9 - 440) = v29;
  v30 = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v9 - 408) = v30;
  *(_QWORD *)(v9 - 464) = *(_QWORD *)(v30 + 8);
  v31 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v9 - 400) = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v33 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 392) = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  *(_QWORD *)(v9 - 448) = (char *)&a9 - v35;
  v36 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 376) = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v37);
  *(_QWORD *)(v9 - 432) = (char *)&a9 - v38;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
  v39 = type metadata accessor for ModifiedContent();
  v40 = *(_QWORD *)(v39 - 8);
  *(_QWORD *)(v9 - 416) = v39;
  *(_QWORD *)(v9 - 360) = v40;
  MEMORY[0x1E0C80A78](v39, v39);
  *(_QWORD *)(v9 - 424) = (char *)&a9 - v41;
  v42 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 352) = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v43);
  *(_QWORD *)(v9 - 384) = (char *)&a9 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v45, v46);
  *(_QWORD *)(v9 - 368) = (char *)&a9 - v48;
  (*(void (**)(char *, _QWORD, uint64_t, double))(*(_QWORD *)(v9 - 456) + 16))(v28, *(_QWORD *)(v9 - 296), v25, v47);
  DragReorderableLayoutCore.children.getter(*(_QWORD *)(v9 - 280), (uint64_t)v24);
}

void sub_1873FB960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  _VariadicView.Tree.init(root:content:)();
  v2 = *(_QWORD *)(v1 - 328);
  *(_QWORD *)(v1 - 176) = v0;
  *(_QWORD *)(v1 - 168) = v2;
  v3 = *(_QWORD *)(v1 - 440);
  *(_QWORD *)(v1 - 160) = *(_QWORD *)(v1 - 336);
  *(_QWORD *)(v1 - 152) = v3;
  v4 = *(_QWORD *)(v1 - 344);
  *(_QWORD *)(v1 - 144) = *(_QWORD *)(v1 - 320);
  *(_QWORD *)(v1 - 136) = v4;
  type metadata accessor for DragReorderableLayoutAdaptor();
}

uint64_t sub_1873FB9C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);

  v9 = v3 + *(int *)(a1 + 72);
  *(_OWORD *)(v8 - 320) = *(_OWORD *)v9;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  *(_BYTE *)(v8 - 176) = static Edge.Set.all.getter();
  *(_OWORD *)(v8 - 168) = *(_OWORD *)(v8 - 320);
  *(_QWORD *)(v8 - 152) = v10;
  *(_QWORD *)(v8 - 144) = v11;
  *(_BYTE *)(v8 - 136) = 0;
  *(_QWORD *)(v8 - 192) = &protocol witness table for MappedViews<A, B>;
  *(_QWORD *)(v8 - 184) = &protocol witness table for DropPlaceholderListModifier<A>;
  v12 = MEMORY[0x1E0CE2E70];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8 - 192);
  *(_QWORD *)(v8 - 208) = *(_QWORD *)(v8 - 408);
  *(_QWORD *)(v8 - 200) = v13;
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v1, v8 - 208);
  v15 = *(_QWORD *)(v8 - 448);
  MEMORY[0x18D75B4AC](v8 - 176, v1, MEMORY[0x1E0CE2BD0], v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 400) + 8))(v6, v1);
  v16 = MEMORY[0x1E0CE2BC0];
  *(_QWORD *)(v8 - 224) = v14;
  *(_QWORD *)(v8 - 216) = v16;
  v17 = MEMORY[0x18D75FFDC](v12, v5, v8 - 224);
  v18 = *(_QWORD *)(v8 - 432);
  MEMORY[0x18D75B4AC](v17, v5, &unk_1E1AC6408, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 392) + 8))(v15, v5);
  *(_QWORD *)(v8 - 176) = 1;
  *(_QWORD *)(v8 - 240) = v17;
  *(_QWORD *)(v8 - 232) = &protocol witness table for ReorderableLayout;
  v19 = v12;
  v20 = MEMORY[0x18D75FFDC](v12, v2, v8 - 240);
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  v21 = *(_QWORD *)(v8 - 424);
  View.contentShape<A>(_:_:eoFill:)((uint64_t *)(v8 - 176), v22, 0, v2, MEMORY[0x1E0CE7E28], v20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 376) + 8))(v18, v2);
  v23 = *(_QWORD *)(v3 + *(int *)(*(_QWORD *)(v8 - 280) + 36));
  v24 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v8 - 152) = type metadata accessor for DragReorderableLayoutCoordinator();
  *(_QWORD *)(v8 - 144) = &protocol witness table for DragReorderableLayoutCoordinator;
  *(_QWORD *)(v8 - 176) = v23;
  *(_QWORD *)(v8 - 256) = v20;
  *(_QWORD *)(v8 - 248) = &protocol witness table for _ContentShapeKindModifier<A>;
  swift_bridgeObjectRetain();
  swift_retain();
  v25 = *(_QWORD *)(v8 - 416);
  v26 = MEMORY[0x18D75FFDC](v19, v25, v8 - 256);
  v27 = *(_QWORD *)(v8 - 384);
  View.onDrop(of:delegate:)(v24, v8 - 176, v25, v26);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 360) + 8))(v21, v25);
  __swift_destroy_boxed_opaque_existential_1(v8 - 176);
  *(_QWORD *)(v8 - 272) = v26;
  *(_QWORD *)(v8 - 264) = &protocol witness table for DropModifier;
  v28 = MEMORY[0x18D75FFDC](v19, v7, v8 - 272);
  v29 = *(_QWORD *)(v8 - 368);
  static ViewBuilder.buildExpression<A>(_:)(v27, v7, v28);
  v30 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 352) + 8);
  v30(v27, v7);
  static ViewBuilder.buildBlock<A>(_:)(v29, v7, *(_QWORD *)(v8 - 288));
  return v30(v29, v7);
}

void DragReorderableLayoutCore.children.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  _QWORD v43[3];

  v36 = a2;
  v26 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v37 = AssociatedTypeWitness;
  v38 = MEMORY[0x1E0DEB418];
  v39 = AssociatedConformanceWitness;
  v40 = MEMORY[0x1E0DEB428];
  v3 = type metadata accessor for IDView();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for Optional();
  v35 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v34 = (char *)v23 - v9;
  v43[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73F0], v3, v8);
  v43[1] = &protocol witness table for HiddenModifierAllowingViewResponders;
  v10 = MEMORY[0x1E0CE2E70];
  v42[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v43);
  v42[1] = &protocol witness table for DragReorderableChildModifier;
  v41 = MEMORY[0x18D75FFDC](v10, v5, v42);
  v32 = v6;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v6, &v41);
  v31 = type metadata accessor for DropPlaceholderListModifier(0, v6, v11, v12);
  v33 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v13);
  v28 = (char *)v23 - v14;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = swift_getAssociatedTypeWitness();
  v23[1] = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v23[0] = (char *)v23 - v19;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t)&type metadata for MappedViewElement.Placeholder, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  v21 = v20;
  v25 = v20;
  v22 = swift_getAssociatedConformanceWitness();
  v24 = lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>();
  v37 = v17;
  v38 = v21;
  v39 = v22;
  v40 = v24;
  type metadata accessor for MappedViews();
}

void sub_1873FBF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;

  *(_QWORD *)(v11 - 280) = a1;
  *(_QWORD *)(v11 - 272) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v11 - 320) = (char *)&a9 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v11 - 176) = AssociatedTypeWitness;
  *(_QWORD *)(v11 - 168) = v10;
  *(_QWORD *)(v11 - 160) = *(_QWORD *)(v11 - 248);
  *(_QWORD *)(v11 - 152) = AssociatedConformanceWitness;
  v15 = *(_QWORD *)(v11 - 256);
  *(_QWORD *)(v11 - 144) = v9;
  *(_QWORD *)(v11 - 136) = v15;
  type metadata accessor for DragReorderableLayoutAdaptor();
}

void sub_1873FC038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v10 = *(_QWORD *)(v9 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v6, v10 + *(int *)(a1 + 68), v8);
  v11 = v4;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v13 = v7;
  v14 = v10;
  v15 = *(_QWORD *)(v9 - 296);
  v12(v7, v14, v15);
  v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v2;
  *(_QWORD *)(v17 + 24) = v3;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v17 + v16, v13, v15);
  View.map<A>(_:)((uint64_t)partial apply for closure #1 in DragReorderableLayoutCore.children.getter, v17, v8, *(_QWORD *)(v9 - 304), v5, *(_QWORD *)(v9 - 312), *(_QWORD *)(v9 - 320));
}

uint64_t sub_1873FC100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 328) + 8))(v0, v3);
  v5 = *(_QWORD *)(v4 - 208);
  DragReorderableLayoutCore.insertionPlaceholder.getter(v1, v5);
  v6 = DragReorderableLayoutCore.state.getter();
  v8 = v7;
  v10 = v9 & 1;
  *(_BYTE *)(v4 - 176) = v11 & 1;
  v12 = v11 & 1;
  v13 = *(_QWORD *)(v4 - 264);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4 - 200) + 32))(v13, v5, *(_QWORD *)(v4 - 232));
  v14 = *(_QWORD *)(v4 - 240);
  v15 = v13 + *(int *)(v14 + 36);
  *(_QWORD *)v15 = v6;
  *(_BYTE *)(v15 + 8) = v10;
  *(_QWORD *)(v15 + 16) = v8;
  *(_BYTE *)(v15 + 24) = v12 & 1;
  v16 = *(_QWORD *)(v4 - 280);
  v17 = v14;
  MEMORY[0x18D75B4AC](v13, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 216) + 8))(v13, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 272) + 8))(v2, v16);
}

uint64_t closure #1 in DragReorderableLayoutCore.children.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *(_QWORD *)(a1 + 16);
  v12 = 0;
  v13 = 1;
  result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v11 != 1)
  {
    v9 = type metadata accessor for DragReorderableLayoutCore(0, a2, a3, v8);
    DragReorderableLayoutCore.draggableView<A>(_:offset:)(v9, v10, v9, (uint64_t)&type metadata for MappedViewElement.Placeholder, (uint64_t)&protocol witness table for MappedViewElement.Placeholder, (uint64_t)&v10);
  }
  *(_BYTE *)(a4 + 154) = 1;
  return result;
}

void DragReorderableLayoutCore.draggableView<A>(_:offset:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t AssociatedTypeWitness;
  uint64_t v46;
  uint64_t v47;
  uint64_t AssociatedConformanceWitness;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  char *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  int v56;
  int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v63 = a6;
  v70 = a5;
  v71 = a2;
  v68 = a4;
  v60 = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v8 = type metadata accessor for ModifiedContent();
  v9 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  v62 = v9;
  MEMORY[0x1E0C80A78](v8, v10);
  v59 = (char *)v51 - v11;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v14, v15);
  v58 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v52 = (char *)v51 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v51 - v21;
  v51[0] = (char *)v51 - v21;
  v23 = *(_QWORD *)(v6 + *(int *)(a3 + 36)) + 48;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v23, (uint64_t)v72);
  v24 = v73;
  v25 = v74;
  __swift_project_boxed_opaque_existential_1(v72, v73);
  v26 = v71;
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v71, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  swift_beginAccess();
  outlined init with copy of TableColumnList(v23, (uint64_t)v72);
  v27 = v73;
  v28 = v74;
  __swift_project_boxed_opaque_existential_1(v72, v73);
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 40))(v26, v27, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  v69 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v29 = v22;
  v30 = v64;
  v69(v29, v64, a3);
  v31 = *(unsigned __int8 *)(v12 + 80);
  v32 = v12;
  v33 = (v31 + 48) & ~v31;
  v51[1] = v33 + v13;
  v66 = v33;
  v67 = v31 | 7;
  v34 = (v33 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = v34;
  v54 = v34 + 8;
  v35 = (_QWORD *)swift_allocObject();
  v36 = a3;
  v37 = *(_QWORD *)(a3 + 16);
  v38 = *(_QWORD *)(a3 + 24);
  v39 = v68;
  v35[2] = v37;
  v35[3] = v39;
  v40 = v70;
  v35[4] = v38;
  v35[5] = v40;
  v41 = (char *)v35 + v33;
  v55 = v35;
  v65 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v42 = v36;
  ((void (*)(char *, _QWORD))v65)(v41, v51[0]);
  *(_QWORD *)((char *)v35 + v34) = v71;
  v43 = v52;
  v51[2] = v42;
  v69(v52, v30, v42);
  v44 = (char *)swift_allocObject();
  *((_QWORD *)v44 + 2) = v37;
  *((_QWORD *)v44 + 3) = v39;
  *((_QWORD *)v44 + 4) = v38;
  *((_QWORD *)v44 + 5) = v40;
  v65(&v44[v66], v43, v42);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = swift_getAssociatedTypeWitness();
  v47 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v49 = swift_getAssociatedConformanceWitness();
  v50 = swift_getAssociatedConformanceWitness();
  v72[0] = AssociatedTypeWitness;
  v72[1] = v46;
  v72[2] = v47;
  v73 = AssociatedConformanceWitness;
  v74 = v49;
  v75 = v50;
  type metadata accessor for DragReorderableLayoutAdaptor();
}

_QWORD *sub_1873FC688(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + *(int *)(a1 + 88));
  *(_QWORD *)(v1 + 216) = &unk_1E1ADB7B0;
  v7 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 192) = v6;
  *(_QWORD *)(v1 + 200) = v7;
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 16);
  (*(void (**)(uint64_t))(v1 + 152))(v8);
  v10 = (char *)swift_allocObject();
  v11 = *(_QWORD *)(v1 + 144);
  *((_QWORD *)v10 + 2) = v2;
  *((_QWORD *)v10 + 3) = v11;
  *((_QWORD *)v10 + 4) = v4;
  v12 = *(_QWORD *)(v1 + 160);
  *((_QWORD *)v10 + 5) = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 120))(&v10[*(_QWORD *)(v1 + 128)], v8, v9);
  *(_QWORD *)&v10[*(_QWORD *)(v1 + 32)] = v7;
  *(_BYTE *)(v5 - 256) = *(_DWORD *)(v1 + 56) & 1;
  *(_QWORD *)(v5 - 248) = 0;
  *(_QWORD *)(v5 - 240) = 0;
  v13 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v5 - 232) = partial apply for closure #1 in DragReorderableLayoutCore.draggableView<A>(_:offset:);
  *(_QWORD *)(v5 - 224) = v13;
  *(_QWORD *)(v5 - 216) = partial apply for closure #2 in DragReorderableLayoutCore.draggableView<A>(_:offset:);
  *(_QWORD *)(v5 - 208) = v3;
  *(_QWORD *)(v5 - 200) = 0;
  *(_QWORD *)(v5 - 192) = 0;
  outlined init with take of Image.Resolved?(v1 + 192, v5 - 184, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  *(_QWORD *)(v5 - 152) = partial apply for closure #3 in DragReorderableLayoutCore.draggableView<A>(_:offset:);
  *(_QWORD *)(v5 - 144) = v10;
  swift_getKeyPath();
  *(_BYTE *)(v1 + 192) = 1;
  v14 = *(_QWORD *)(v1 + 72);
  View.environment<A>(_:_:)();
  swift_release();
  outlined init with copy of _DraggingModifier(v5 - 256, v1 + 200);
  *(_BYTE *)(v1 + 192) = *(_DWORD *)(v1 + 60) & 1;
  *(_QWORD *)(v1 + 320) = v7;
  *(_WORD *)(v1 + 328) = 0;
  v15 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  *(_QWORD *)(v1 + 176) = v12;
  *(_QWORD *)(v1 + 184) = v15;
  v16 = *(_QWORD *)(v1 + 88);
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v1 + 176);
  MEMORY[0x18D75B4AC](v1 + 192, v16, &type metadata for DragReorderableChildModifier, v17);
  outlined destroy of DragReorderableChildModifier(v1 + 192);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 96) + 8))(v14, v16);
  return outlined destroy of _DraggingModifier((_QWORD *)(v5 - 256));
}

uint64_t DragReorderableLayoutCore.insertionPlaceholder.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];

  v65 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v67 = AssociatedTypeWitness;
  v68 = MEMORY[0x1E0DEB418];
  v51 = AssociatedConformanceWitness;
  v69 = AssociatedConformanceWitness;
  v70 = MEMORY[0x1E0DEB428];
  v5 = type metadata accessor for IDView();
  v52 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v5);
  v50[1] = (char *)v50 - v6;
  v64 = v7;
  v8 = type metadata accessor for ModifiedContent();
  v54 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v8);
  v53 = (char *)v50 - v9;
  v63 = v10;
  v11 = type metadata accessor for ModifiedContent();
  v60 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v55 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v56 = (char *)v50 - v16;
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v50 - v20;
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v57 = (char *)v50 - v29;
  v62 = type metadata accessor for Optional();
  v59 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v30);
  v58 = (char *)v50 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32, v33);
  v61 = (uint64_t)v50 - v35;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v66 + *(int *)(a1 + 44), v17, v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, AssociatedTypeWitness) != 1)
  {
    v40 = v57;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v57, v21, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v26, v40, AssociatedTypeWitness);
    v41 = swift_getAssociatedTypeWitness();
    v42 = swift_getAssociatedTypeWitness();
    v43 = swift_getAssociatedConformanceWitness();
    v44 = swift_getAssociatedConformanceWitness();
    v67 = v41;
    v68 = v42;
    v69 = AssociatedTypeWitness;
    v70 = v43;
    v71 = v44;
    v72 = v51;
    type metadata accessor for DragReorderableLayoutAdaptor();
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v36 = (uint64_t)v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v58, 1, 1, v11);
  v37 = v64;
  v77[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73F0], v64);
  v77[1] = &protocol witness table for HiddenModifierAllowingViewResponders;
  v38 = MEMORY[0x1E0CE2E70];
  v39 = v63;
  v76[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v63, v77);
  v76[1] = &protocol witness table for DragReorderableChildModifier;
  MEMORY[0x18D75FFDC](v38, v11, v76);
  v45 = v61;
  static ToolbarContentBuilder.buildIf<A>(_:)(v36, v61);
  v46 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v47 = v62;
  v46(v36, v62);
  v75[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73F0], v37);
  v75[1] = &protocol witness table for HiddenModifierAllowingViewResponders;
  v48 = MEMORY[0x1E0CE2E70];
  v74[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v39, v75);
  v74[1] = &protocol witness table for DragReorderableChildModifier;
  v73 = MEMORY[0x18D75FFDC](v48, v11, v74);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v47, &v73);
  static ViewBuilder.buildBlock<A>(_:)(v45, v47, v65);
  return ((uint64_t (*)(uint64_t, uint64_t))v46)(v45, v47);
}

uint64_t DragReorderableLayoutCoordinator.dragBegan(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v6);
  if ((v7 & 1) != 0 || v6 != a1)
  {
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 168) = 0u;
    *(_BYTE *)(v1 + 216) = 1;
  }
  static Transaction.current.getter();
  v3 = Transaction.disablesAnimations.setter();
  MEMORY[0x1E0C80A78](v3, v4);
  swift_retain();
  withTransaction<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t DragReorderableLayoutCoordinator.dragEnded()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_BYTE *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 112);
  v14 = v1;
  v15 = v2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v4 = v3;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v16, v4);
  v10 = 0;
  LOBYTE(v11) = 1;
  v12 = v18;
  LOBYTE(v13) = v19;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_BYTE *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 112);
  v14 = v5;
  v15 = v6;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v16, v4);
  v10 = v16;
  LOBYTE(v11) = v17;
  v12 = 0;
  LOBYTE(v13) = 1;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 152) = 0;
  *(_BYTE *)(v0 + 160) = 1;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_BYTE *)(v0 + 216) = 1;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v0 + 48, (uint64_t)&v10);
  v7 = v13;
  v8 = v14;
  __swift_project_boxed_opaque_existential_1(&v10, v13);
  (*(void (**)(uint64_t, uint64_t))(v8 + 88))(v7, v8);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
}

uint64_t closure #3 in DragReorderableLayoutCore.draggableView<A>(_:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DraggingItem>, (uint64_t)&type metadata for DraggingItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
  v11 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for DragReorderableLayoutCore(0, a3, a5, v10) + 36)) + 48;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v11, (uint64_t)v16);
  v12 = v17;
  v13 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2, v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  *(_QWORD *)(v9 + 32) = v14;
  v16[0] = v9;
  specialized Array._endMutation()();
  return v16[0];
}

_QWORD *ConditionalDraggingModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  _OWORD v4[6];
  __int128 v5;
  uint64_t v6;
  _OWORD v7[7];
  uint64_t v8;

  outlined init with copy of _DraggingModifier?(v1, (uint64_t)v4);
  if (*((_QWORD *)&v5 + 1))
  {
    v7[5] = v4[5];
    v7[6] = v5;
    v7[0] = v4[0];
    v7[1] = v4[1];
    v7[2] = v4[2];
    v8 = v6;
    v7[3] = v4[3];
    v7[4] = v4[4];
    outlined init with copy of _DraggingModifier((uint64_t)v7, (uint64_t)v4);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v4, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>);
    *(_BYTE *)(a1 + 120) = 0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>);
    return outlined destroy of _DraggingModifier(v7);
  }
  else
  {
    result = (_QWORD *)outlined destroy of AccessibilityTableContext?((uint64_t)v4, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
    *(_BYTE *)(a1 + 120) = 1;
  }
  return result;
}

uint64_t static DragSourceProxyModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int v5;

  lazy protocol witness table accessor for type DragSourceProxyInput and conformance DragSourceProxyInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v5 == *MEMORY[0x1E0CFED28])
    return a3();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier();
  return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance DragSourceProxyModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance ReorderableLayout()
{
  return LayoutProxy.spacing()();
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance ReorderableLayout()
{
  PlacementContext.proposedSize.getter();
  return _Placement.init(proposedSize:at:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ReorderableLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v23 = *a1;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v12 = *(_OWORD *)(a2 + 5);
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v12;
  v20 = *(_OWORD *)(a2 + 7);
  v21 = a2[9];
  v22 = v11;
  v13 = lazy protocol witness table accessor for type ReorderableLayout and conformance ReorderableLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 80))(&v23, &v15, a3, a4, a5, v13);
}

void protocol witness for ViewModifier.body(content:) in conformance ReorderableLayout()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

double static DragReorderableChildModifier._makeView(modifier:inputs:body:)@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  double v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<DragReorderableChildModifier>, (uint64_t)&type metadata for DragReorderableChildModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy();
  Attribute.init<A>(body:value:flags:update:)();
  lazy protocol witness table accessor for type DragSourceProxyInput and conformance DragSourceProxyInput();
  PropertyList.subscript.setter();
  _ViewInputs.transform.getter();
  _ViewInputs.animatedPosition()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    _GraphValue.value.getter();
    _ViewInputs.animatedPosition()();
    _ViewOutputs.viewResponders()();
    type metadata accessor for DragReorderableChildResponder();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 208) = 0;
    *(_BYTE *)(v1 + 216) = 1;
    *(_QWORD *)(v1 + 224) = 0;
    *(_QWORD *)(v1 + 232) = 0;
    *(_BYTE *)(v1 + 240) = 0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultLayoutViewResponder.init(inputs:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _ViewOutputs.subscript.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a1 = v4;
  result = v5;
  a1[1] = v5;
  return result;
}

uint64_t DragReorderableChildResponder.__allocating_init(inputs:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = 0;
  *(_BYTE *)(v0 + 240) = 0;
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableChildModifier.MakeDragSource@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[7];
  uint64_t v7;

  if ((*(_BYTE *)AGGraphGetValue() & 1) != 0)
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
  }
  else
  {
    Value = AGGraphGetValue();
    outlined init with copy of DragReorderableChildModifier(Value, (uint64_t)&v4);
    outlined init with take of Image.Resolved?((uint64_t)&v5, (uint64_t)v6, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  }
  return outlined init with take of Image.Resolved?((uint64_t)v6, a1, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
}

double protocol witness for static Rule.initialValue.getter in conformance DragReorderableChildModifier.MakeDragSourceProxy@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 104) = xmmword_187BFE310;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableChildModifier.MakeDragSourceProxy@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[7];
  uint64_t v7;

  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    Value = AGGraphGetValue();
    outlined init with copy of DragReorderableChildModifier(Value, (uint64_t)&v4);
    outlined init with take of Image.Resolved?((uint64_t)&v5, (uint64_t)v6, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  }
  else
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
  }
  return outlined init with take of Image.Resolved?((uint64_t)v6, a1, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
}

uint64_t DragReorderableChildModifier.ResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  Value = AGGraphGetValue();
  v3 = *(_BYTE *)(Value + 136);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)(Value + 128);
  *(_BYTE *)(v1 + 216) = v3;
  v4 = AGGraphGetValue();
  *(double *)(v1 + 224) = MEMORY[0x18D755E9C](v4, v5);
  *(_QWORD *)(v1 + 232) = v6;
  *(_BYTE *)(v1 + 240) = *(_BYTE *)(AGGraphGetValue() + 137);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphGetValue();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v9 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DragReorderableChildModifier.ChildCoordinateSpace.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _OWORD v7[3];

  Value = AGGraphGetValue();
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  v7[0] = *(_OWORD *)AGGraphGetValue();
  v3 = swift_retain();
  *(double *)&v4 = MEMORY[0x18D755E9C](v3);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v5, v4));
  lazy protocol witness table accessor for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)();
  return outlined destroy of AnyHashable((uint64_t)v7);
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableChildModifier.ChildCoordinateSpace@<X0>(uint64_t a1@<X8>)
{
  return DragReorderableChildModifier.ChildCoordinateSpace.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DragReorderableChildModifier.ChildCoordinateSpace()
{
  lazy protocol witness table accessor for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace();
  return static AsyncAttribute.flags.getter();
}

void protocol witness for ViewModifier.body(content:) in conformance DragReorderableChildModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t DragReorderableChildResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = 0;
  *(_BYTE *)(v0 + 240) = 0;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t DragReorderableChildResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DragReorderableChildResponder()
{
  return type metadata accessor for DragReorderableChildResponder();
}

uint64_t type metadata completion function for DropPlaceholderListModifier.PlaceholderViews()
{
  return swift_initClassMetadata2();
}

uint64_t static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  unsigned int v26;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v36;
  _BYTE v37[16];
  uint64_t List;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[72];
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char v57;
  _QWORD v58[11];

  v58[9] = *MEMORY[0x1E0C80C00];
  v28 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v30 = *(_DWORD *)(a2 + 24);
  v32 = *a1;
  v33 = *(_DWORD *)(a2 + 28);
  v8 = *(_DWORD *)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 36);
  v9 = *(_QWORD *)(a2 + 48);
  v29 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_BYTE *)(a2 + 80);
  v45 = *(_QWORD *)a2;
  v14 = v45;
  v31 = v45;
  v46 = v28;
  v47 = v6;
  v15 = v6;
  v48 = v30;
  v49 = v33;
  v50 = v8;
  v51 = v7;
  v16 = v7;
  v25 = v7;
  v52 = v29;
  v53 = v9;
  v17 = v9;
  v54 = v10;
  v55 = v11;
  v56 = v12;
  v57 = v13;
  a3(v58);
  v45 = v14;
  v46 = v28;
  v47 = v15;
  v48 = v30;
  v49 = v33;
  v50 = v8;
  v51 = v16;
  v52 = v29;
  v53 = v17;
  v54 = v10;
  v55 = v11;
  v56 = v12;
  v57 = v13;
  v26 = _ViewListOutputs.makeAttribute(inputs:)();
  v42 = a4;
  v43 = a5;
  LODWORD(v45) = v32;
  type metadata accessor for DropPlaceholderListModifier(255, a4, a5, v18);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v45 = v31;
  v46 = v28;
  v47 = v15;
  v48 = v30;
  v49 = v33;
  v50 = v8;
  v51 = v25;
  v52 = v29;
  v53 = v17;
  v54 = v10;
  v55 = v11;
  v56 = v12;
  v57 = v13;
  static View.makeDebuggableViewList(view:inputs:)();
  v45 = v31;
  v46 = v28;
  v47 = v15;
  v48 = v30;
  v49 = v33;
  v50 = v8;
  v51 = v25;
  v52 = v29;
  v53 = v17;
  v54 = v10;
  v55 = v11;
  v56 = v12;
  v57 = v13;
  v19 = _ViewListOutputs.makeAttribute(inputs:)();
  v40 = a4;
  v41 = a5;
  LODWORD(v45) = v32;
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v20 = _GraphValue.value.getter();
  v45 = __PAIR64__(v19, v26);
  v46 = v20;
  List = type metadata accessor for DropPlaceholderListModifier.MakeList(0, a4, a5, v21);
  v39 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DropPlaceholderListModifier<A>.MakeList, List);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (uint64_t (*)(uint64_t))type metadata accessor for ViewList, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v37, List, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
  *(_DWORD *)a6 = v36;
  *(_QWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 40) = 1;
  *(_QWORD *)(a6 + 48) = v58[6];
  *(_QWORD *)(a6 + 56) = 0;
  *(_BYTE *)(a6 + 64) = 1;
  outlined destroy of _ViewListOutputs((uint64_t)v44);
  return outlined destroy of _ViewListOutputs((uint64_t)v58);
}

uint64_t closure #1 in static DragReorderableLayoutView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[2] = a4(0);
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t closure #2 in static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for DropPlaceholderListModifier(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t DropPlaceholderListModifier.MakeList.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[2];
  __int128 v18[2];
  char v19;

  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v18);
  v7 = AGGraphGetValue();
  outlined init with copy of TableColumnList(v7, (uint64_t)v17);
  v8 = AGGraphGetValue();
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  v11 = *(_QWORD *)(v8 + 16);
  v19 = *(_BYTE *)(v8 + 24);
  v12 = v19;
  v14 = type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList(0, a1, a2, v13);
  a3[3] = v14;
  a3[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DropPlaceholderListModifier<A>.DropPlaceholderList, v14);
  v15 = swift_allocObject();
  *a3 = v15;
  v19 = v12 & 1;
  outlined init with take of OptionalBinaryInteger(v18, v15 + 16);
  result = outlined init with take of OptionalBinaryInteger(v17, v15 + 56);
  *(_QWORD *)(v15 + 96) = v9;
  *(_BYTE *)(v15 + 104) = v10;
  *(_QWORD *)(v15 + 112) = v11;
  *(_BYTE *)(v15 + 120) = v12 & 1;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance DropPlaceholderListModifier<A>.MakeList@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return DropPlaceholderListModifier.MakeList.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.viewIDs.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 40), v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  if (v6)
  {
    v7 = v6;
  }
  else
  {
    type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>();
    v7 = swift_allocObject();
    *(_BYTE *)(v7 + 16) = 0;
  }
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v1, v8);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  if (v11 && (*(_BYTE *)(v1 + 104) & 1) == 0)
  {
    v12 = *(_QWORD *)(v1 + 96);
    v13 = *(_BYTE *)(v2 + 88);
    v14 = *(_QWORD *)(v2 + 80);
    type metadata accessor for DropPlaceholderListModifier.PlaceholderViews(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v10);
    v15 = specialized DropPlaceholderListModifier.PlaceholderViews.__allocating_init(base:placeholder:sourceIndex:destinationIndex:)(v11, v7, v14, v13, v12);
    swift_release();
    swift_release();
    return v15;
  }
  else
  {
    swift_release();
  }
  return v11;
}

void DropPlaceholderListModifier.DropPlaceholderList.traitKeys.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.count(style:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v1, v3);
  v10 = v2;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 8))(&v10, v3, v4);
  v6 = result;
  if ((*(_BYTE *)(v1 + 104) & 1) == 0
    && (v7 = *(_QWORD *)(v1 + 64),
        v8 = *(_QWORD *)(v1 + 72),
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 40), v7),
        v10 = v2,
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8),
        v9 = __OFADD__(v6, result),
        v6 += result,
        v9))
  {
    __break(1u);
  }
  else
  {
    if ((*(_BYTE *)(v1 + 88) & 1) != 0)
      return v6;
    v9 = __OFSUB__(v6--, 1);
    if (!v9)
      return v6;
  }
  __break(1u);
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.estimatedCount(style:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v1, v3);
  v10 = v2;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(&v10, v3, v4);
  v6 = result;
  if ((*(_BYTE *)(v1 + 104) & 1) == 0
    && (v7 = *(_QWORD *)(v1 + 64),
        v8 = *(_QWORD *)(v1 + 72),
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 40), v7),
        v10 = v2,
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v10, v7, v8),
        v9 = __OFADD__(v6, result),
        v6 += result,
        v9))
  {
    __break(1u);
  }
  else
  {
    if ((*(_BYTE *)(v1 + 88) & 1) != 0)
      return v6;
    v9 = __OFSUB__(v6--, 1);
    if (!v9)
      return v6;
  }
  __break(1u);
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.applyNodes(from:style:list:transform:to:)(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Bool IsNativeType;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;

  v11 = *a2;
  v12 = DropPlaceholderListModifier.DropPlaceholderList.indexRanges(from:)(*a1, a7, a3, a4);
  v14 = type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(0, *(_QWORD *)(a7 + 16), *(_QWORD *)(a7 + 24), v13);
  if (MEMORY[0x18D75D06C](v12, v14))
  {
    v15 = 0;
    v16 = (char *)(v12 + 49);
    v24 = HIDWORD(a3) & 1;
    v25 = a3;
    v23 = a3 | (unint64_t)(v24 << 32);
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (!IsNativeType)
        break;
      v19 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_13;
      v20 = *(_QWORD *)(v16 - 9);
      v21 = *(v16 - 1);
      v22 = *v16;
      *a1 = *(_QWORD *)(v16 - 17);
      if ((v22 & 1) != 0)
      {
        v28 = v11;
        if ((DropPlaceholderListModifier.DropPlaceholderList.applyToPlaceholder(start:style:list:transform:body:)((uint64_t)a1, &v28, v23, a4, a5, a6) & 1) == 0)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        v28 = v11;
        if ((DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(a1, v20, v21, &v28, v25 | (v24 << 32), a4) & 1) == 0)goto LABEL_9;
      }
      ++v15;
      v16 += 24;
      if (v19 == MEMORY[0x18D75D06C](v12, v14))
        goto LABEL_10;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.indexRanges(from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = result;
  v6 = *(_BYTE *)(v4 + 104);
  if (v6)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v4 + 96);
  if ((*(_BYTE *)(v4 + 88) & 1) != 0)
  {
LABEL_5:
    if (v7 < result)
      v6 = 1;
    if ((v6 & 1) != 0)
      goto LABEL_8;
    goto LABEL_33;
  }
  v9 = *(_QWORD *)(v4 + 80);
  if (v9 == v7)
    v10 = 1;
  else
    v10 = *(unsigned __int8 *)(v4 + 104);
  if (v10 == 1)
  {
    if (v9 >= result)
    {
      type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
      type metadata accessor for _ContiguousArrayStorage();
      swift_allocObject();
      result = static Array._adoptStorage(_:count:)();
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
        v15 = 0;
      else
        v15 = v9;
      *(_QWORD *)v14 = v5;
      *(_QWORD *)(v14 + 8) = v15;
      *(_BYTE *)(v14 + 16) = v9 == 0x7FFFFFFFFFFFFFFFLL;
      *(_BYTE *)(v14 + 17) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_WORD *)(v14 + 40) = 257;
      if (!__OFADD__(v9, 1))
      {
        *(_QWORD *)(v14 + 48) = v9 + 1;
        *(_QWORD *)(v14 + 56) = 0;
LABEL_38:
        *(_WORD *)(v14 + 64) = 1;
        goto LABEL_39;
      }
      __break(1u);
      goto LABEL_56;
    }
    if ((*(_BYTE *)(v4 + 104) & 1) != 0)
      goto LABEL_8;
  }
  if (v9 >= v7)
    goto LABEL_19;
  if (v9 >= result)
  {
    type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
    type metadata accessor for _ContiguousArrayStorage();
    swift_allocObject();
    result = static Array._adoptStorage(_:count:)();
    *(_QWORD *)v17 = v5;
    *(_QWORD *)(v17 + 8) = v9;
    *(_WORD *)(v17 + 16) = 0;
    v18 = v7 + 1;
    if (!__OFADD__(v7, 1))
    {
      if (v18 > v9)
      {
        if (v7 == 0x7FFFFFFFFFFFFFFELL)
          v19 = 0;
        else
          v19 = v7 + 1;
        *(_QWORD *)(v17 + 24) = v9 + 1;
        *(_QWORD *)(v17 + 32) = v19;
        *(_BYTE *)(v17 + 40) = v7 == 0x7FFFFFFFFFFFFFFELL;
        *(_BYTE *)(v17 + 41) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_WORD *)(v17 + 64) = 257;
        *(_QWORD *)(v17 + 72) = v18;
        *(_QWORD *)(v17 + 80) = 0;
        *(_WORD *)(v17 + 88) = 1;
        goto LABEL_39;
      }
      goto LABEL_58;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v11 >= result)
  {
    type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
    type metadata accessor for _ContiguousArrayStorage();
    swift_allocObject();
    result = static Array._adoptStorage(_:count:)();
    if (v7 == 0x7FFFFFFFFFFFFFFELL)
      v22 = 0;
    else
      v22 = v7 + 1;
    *(_QWORD *)v14 = v5;
    *(_QWORD *)(v14 + 8) = v22;
    *(_BYTE *)(v14 + 16) = v7 == 0x7FFFFFFFFFFFFFFELL;
    *(_BYTE *)(v14 + 17) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_WORD *)(v14 + 40) = 257;
    *(_QWORD *)(v14 + 48) = v11;
    goto LABEL_37;
  }
LABEL_19:
  if (v7 >= v9)
  {
    if (v7 >= result)
    {
LABEL_33:
      type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
      type metadata accessor for _ContiguousArrayStorage();
      swift_allocObject();
      result = static Array._adoptStorage(_:count:)();
      if (v7 == 0x7FFFFFFFFFFFFFFFLL)
        v16 = 0;
      else
        v16 = v7;
      *(_QWORD *)v14 = v5;
      *(_QWORD *)(v14 + 8) = v16;
      *(_BYTE *)(v14 + 16) = v7 == 0x7FFFFFFFFFFFFFFFLL;
      *(_BYTE *)(v14 + 17) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_WORD *)(v14 + 40) = 257;
      *(_QWORD *)(v14 + 48) = v7;
LABEL_37:
      *(_QWORD *)(v14 + 56) = 0;
      goto LABEL_38;
    }
LABEL_8:
    type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
    type metadata accessor for _ContiguousArrayStorage();
    swift_allocObject();
    result = static Array._adoptStorage(_:count:)();
    *(_QWORD *)v8 = v5;
    *(_QWORD *)(v8 + 8) = 0;
    *(_WORD *)(v8 + 16) = 1;
LABEL_39:
    _finalizeUninitializedArray<A>(_:)();
    return result;
  }
  if (v7 >= result)
  {
    type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
    type metadata accessor for _ContiguousArrayStorage();
    swift_allocObject();
    result = static Array._adoptStorage(_:count:)();
    *(_QWORD *)v20 = v5;
    *(_QWORD *)(v20 + 8) = v7;
    *(_WORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    *(_WORD *)(v20 + 40) = 257;
    if (v9 == 0x7FFFFFFFFFFFFFFFLL)
      v21 = 0;
    else
      v21 = v9;
    *(_QWORD *)(v20 + 48) = v7;
    *(_QWORD *)(v20 + 56) = v21;
    *(_BYTE *)(v20 + 64) = v9 == 0x7FFFFFFFFFFFFFFFLL;
    *(_BYTE *)(v20 + 65) = 0;
    if (!__OFADD__(v9, 1))
    {
      *(_QWORD *)(v20 + 72) = v9 + 1;
      *(_QWORD *)(v20 + 80) = 0;
      *(_WORD *)(v20 + 88) = 1;
      goto LABEL_39;
    }
    goto LABEL_59;
  }
  if (v9 < result)
    goto LABEL_5;
  type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  result = static Array._adoptStorage(_:count:)();
  if (v9 == 0x7FFFFFFFFFFFFFFFLL)
    v13 = 0;
  else
    v13 = v9;
  *(_QWORD *)v12 = v5;
  *(_QWORD *)(v12 + 8) = v13;
  *(_BYTE *)(v12 + 16) = v9 == 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(v12 + 17) = 0;
  if (!__OFADD__(v9, 1))
  {
    *(_QWORD *)(v12 + 24) = v9 + 1;
    *(_QWORD *)(v12 + 32) = 0;
    *(_WORD *)(v12 + 40) = 1;
    goto LABEL_39;
  }
LABEL_60:
  __break(1u);
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.applyToPlaceholder(start:style:list:transform:body:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v12 = *a2;
  v13 = v6[8];
  v14 = v6[9];
  __swift_project_boxed_opaque_existential_1(v6 + 5, v13);
  v16 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 48))(a1, &v16, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v13, v14) & 1;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(uint64_t *a1, uint64_t a2, char a3, uint64_t *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  unsigned __int8 v20;
  uint64_t v21;

  v9 = *a1;
  result = 1;
  if ((a3 & 1) != 0 || v9 < a2)
  {
    v11 = *a4;
    v21 = v9;
    v20 = 1;
    v17 = a6;
    outlined init with copy of TableColumnList(v6, (uint64_t)v19);
    v12 = v19[4];
    v13 = __swift_project_boxed_opaque_existential_1(v19, v19[3]);
    v16[1] = v16;
    v18 = v11;
    v15 = MEMORY[0x1E0C80A78](v13, v14);
    (*(void (**)(uint64_t *, uint64_t *, unint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), double))(v12 + 48))(a1, &v18, a5 | ((HIDWORD(a5) & 1) << 32), v17, partial apply for closure #1 in DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:), v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return v20;
  }
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.edit(forID:since:)(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];

  v4 = a1[1];
  v5 = *a2;
  v6 = v2[3];
  v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v10[0] = *a1;
  v10[1] = v4;
  v9 = v5;
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(v7 + 56))(v10, &v9, v6, v7);
}

_QWORD *DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = v5;
  v40 = a3;
  v10 = *a2;
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *(_QWORD *)(v5 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v5, v11);
  v41 = v10;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 64))(a1, &v41, a4, a5, v11, v12);
  v15 = v14 & 1;
  v16 = *(_QWORD *)(v5 + 64);
  v17 = *(_QWORD *)(v5 + 72);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 64));
  v41 = v10;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 64))(a1, &v41, a4, a5, v16, v17);
  if ((*(_BYTE *)(v5 + 104) & 1) != 0)
    return (_QWORD *)v13;
  v20 = result;
  v21 = v19;
  v22 = *(_QWORD *)(v6 + 96);
  if ((*(_BYTE *)(v6 + 88) & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, v19);
    v23 = *(_QWORD *)(v40 + 24);
    v32 = *(_QWORD *)(v40 + 16);
    v33 = a4;
    v34 = v23;
    v35 = a5;
    v36 = v22;
    v37 = v6;
    v38 = v10;
    v24 = v15;
    v15 = 0;
    result = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOSiSgTg5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #3 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:), (uint64_t)v31, v13, v24);
    if ((v19 & 0x100) == 0)
      return result;
    if ((v21 & 1) != 0)
      return v20;
    v25 = __OFADD__(v20, v22);
    v20 = (_QWORD *)((char *)v20 + v22);
    if (!v25)
      return v20;
    __break(1u);
  }
  MEMORY[0x1E0C80A78](result, v19);
  v26 = *(_QWORD *)(v40 + 24);
  v32 = *(_QWORD *)(v40 + 16);
  v33 = a4;
  v34 = v26;
  v35 = a5;
  v28 = v27;
  v36 = v27;
  v37 = v22;
  v38 = v6;
  v39 = v10;
  result = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOSiSgTg5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:), (uint64_t)v31, v13, v15);
  if ((v29 & 0x100) == 0)
    return result;
  if ((v21 & 1) != 0)
    return v20;
  v30 = v22 - (v28 < v22);
  v25 = __OFADD__(v20, v30);
  v20 = (_QWORD *)((char *)v20 + v30);
  if (!v25)
    return v20;
  __break(1u);
  return result;
}

uint64_t closure #1 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v7 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a2)
    v8 = 0;
  else
    v8 = -1;
  if (v7 <= a3
    || (v10 = a4[8],
        v11 = a4[9],
        __swift_project_boxed_opaque_existential_1(a4 + 5, v10),
        v13 = a5,
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 8))(&v13, v10, v11),
        v12 = __OFADD__(v8, result),
        v8 += result,
        !v12))
  {
    if (!__OFADD__(v7, v8))
    {
      *(_QWORD *)a6 = v7 + v8;
      *(_BYTE *)(a6 + 8) = 0;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *a1;
  if (*a1 >= a2)
  {
    result = 0;
  }
  else
  {
    v8 = a3[8];
    v9 = a3[9];
    __swift_project_boxed_opaque_existential_1(a3 + 5, v8);
    v11 = a4;
    result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v9 + 8))(&v11, v8, v9);
  }
  if (__OFADD__(v6, result))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a5 = v6 + result;
    *(_BYTE *)(a5 + 8) = 0;
  }
  return result;
}

uint64_t closure #1 in DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10)
{
  uint64_t result;
  uint64_t v13;

  result = _ViewList_Node.applyNodes(from:style:transform:to:)();
  *a5 = result & 1;
  if ((result & 1) == 0 || (a9 & 1) != 0)
    return result & 1;
  v13 = *a10 + 1;
  if (!__OFADD__(*a10, 1))
  {
    *a10 = v13;
    LOBYTE(result) = v13 < a8;
    return result & 1;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance DropPlaceholderListModifier<A>.DropPlaceholderList(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return DropPlaceholderListModifier.DropPlaceholderList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, a7);
}

_QWORD *protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance DropPlaceholderListModifier<A>.DropPlaceholderList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)(a1, a2, a5, a3, a4);
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.subscript.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 64);
  if (v2 > result)
    return dispatch thunk of _ViewList_ID_Views.subscript.getter();
  v3 = *(_QWORD *)(v1 + 40);
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v5 < result)
  {
    v4 = __OFSUB__(result, v3);
    result -= v3;
    if (!v4)
      return dispatch thunk of _ViewList_ID_Views.subscript.getter();
    goto LABEL_10;
  }
  v4 = __OFSUB__(result, v3);
  v6 = result - v3;
  if (v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = v6 - 1;
  if (!__OFSUB__(v6, 1))
    return dispatch thunk of _ViewList_ID_Views.subscript.getter();
LABEL_12:
  __break(1u);
  return result;
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;

  v1 = swift_dynamicCastClass();
  if (!v1 || *(_QWORD *)(v0 + 72) != *(_QWORD *)(v1 + 72))
    goto LABEL_12;
  v2 = *(_BYTE *)(v1 + 56);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(v1 + 56))
      goto LABEL_12;
  }
  else
  {
    if (*(_QWORD *)(v0 + 48) != *(_QWORD *)(v1 + 48))
      v2 = 1;
    if ((v2 & 1) != 0)
      goto LABEL_12;
  }
  if (*(_QWORD *)(v0 + 64) != *(_QWORD *)(v1 + 64))
  {
LABEL_12:
    v4 = 0;
    return v4 & 1;
  }
  swift_retain();
  swift_retain();
  v3 = dispatch thunk of _ViewList_ID_Views.isEqual(to:)();
  swift_release();
  if ((v3 & 1) != 0)
  {
    swift_retain();
    v4 = dispatch thunk of _ViewList_ID_Views.isEqual(to:)();
    swift_release();
  }
  else
  {
    v4 = 0;
  }
  swift_release();
  return v4 & 1;
}

void DropPlaceholderListModifier.PlaceholderViews.__allocating_init(isDataDependent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.__ivar_destroyer()
{
  swift_release();
  return swift_release();
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DropPlaceholderListModifier.PlaceholderViews(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPlaceholderListModifier.PlaceholderViews);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DropPlaceholderListModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t one-time initialization function for coordinateSpace()
{
  uint64_t result;

  lazy protocol witness table accessor for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace();
  result = AnyHashable.init<A>(_:)();
  byte_1EDE26210 = 0;
  return result;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.dragBegan(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_BYTE *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 112);
  v17 = v4;
  v18 = v5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = v6;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v19, v7);
  v13 = a2;
  LOBYTE(v14) = 0;
  v15 = v21;
  LOBYTE(v16) = v22;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(_BYTE *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 112);
  v17 = v8;
  v18 = v9;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v19, v7);
  v13 = v19;
  LOBYTE(v14) = v20;
  v15 = a2;
  LOBYTE(v16) = 0;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  outlined init with copy of TableColumnList(a1 + 48, (uint64_t)&v13);
  v10 = v16;
  v11 = v17;
  __swift_project_boxed_opaque_existential_1(&v13, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, v10, v11);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
}

uint64_t DragReorderableLayoutCoordinator.validateDrop(info:)(_QWORD *a1)
{
  uint64_t v1;
  char v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  if ((v3 & 1) != 0)
  {
    v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (MEMORY[0x18D760234](v5))
    {
      swift_getObjectType();
      v6 = swift_bridgeObjectRetain();
      v7 = UIDropSession.itemProviders(for:)(v6);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      v7 = MEMORY[0x1E0DEE9D8];
    }
    swift_beginAccess();
    outlined init with copy of TableColumnList(v1 + 48, (uint64_t)v11);
    v8 = v12;
    v9 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v7, v8, v9);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v4 = 1;
  }
  return v4 & 1;
}

uint64_t DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  _QWORD v12[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v2 = DropInfoAdaptor.localDragContexts.getter();
  if (!*(_QWORD *)(v2 + 16))
  {
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined init with copy of Any(v2 + 32, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_7:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) != 0 && v12[0] == *(_QWORD *)(v1 + 16))
    return v12[1];
LABEL_8:
  v4 = *(_QWORD *)(v1 + 120);
  v5 = *(_BYTE *)(v1 + 128);
  v6 = *(_QWORD *)(v1 + 136);
  v7 = *(_BYTE *)(v1 + 144);
  v8 = *(_OWORD *)(v1 + 104);
  *(_QWORD *)&v9 = v4;
  BYTE8(v9) = v5;
  v10 = v6;
  v11 = v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v12);
  return v12[0];
}

uint64_t DragReorderableLayoutCoordinator.dropEntered(info:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  char v11;

  v3 = DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  v5 = v4;
  DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(a1, v3, v4 & 1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = MEMORY[0x18D75B9C8](&v10);
  v8 = v11;
  if ((v5 & 1) != 0)
  {
    if ((v11 & 1) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v3 != v10)
    v8 = 1;
  if ((v8 & 1) != 0)
  {
LABEL_7:
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 168) = 0u;
    *(_BYTE *)(v1 + 216) = 1;
  }
LABEL_8:
  MEMORY[0x1E0C80A78](v6, v7);
  return DragReorderableLayoutCoordinator.withStateAnimation(_:)();
}

uint64_t DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  char v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v55;
  __int128 v57;
  __int128 v58;
  _BYTE v59[24];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char v64;
  _BYTE v65[40];
  _BYTE v66[40];
  _OWORD v67[2];
  unsigned __int8 v68;

  v4 = v3;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  if (*(_DWORD *)(v3 + 232))
  {
    swift_beginAccess();
    v7 = *(_QWORD *)(v3 + 224);
    v8 = *(_QWORD *)(v3 + 120);
    v9 = *(_BYTE *)(v3 + 128);
    v10 = *(_QWORD *)(v3 + 136);
    v11 = *(_BYTE *)(v3 + 144);
    *(_OWORD *)v59 = *(_OWORD *)(v3 + 104);
    *(_QWORD *)&v59[16] = v8;
    LOBYTE(v60) = v9;
    *((_QWORD *)&v60 + 1) = v10;
    LOBYTE(v61) = v11;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v13 = v12;
    swift_bridgeObjectRetain();
    MEMORY[0x18D75B9C8](v65, v13);
    if ((v65[8] & 1) != 0)
    {
      v14 = *(_QWORD *)(v3 + 168);
      v55 = *(_QWORD *)(v3 + 176);
      v57 = *(_OWORD *)(v3 + 200);
      v58 = *(_OWORD *)(v3 + 184);
      v15 = 1;
      v16 = 0.0;
      v17 = *(_BYTE *)(v3 + 216);
    }
    else
    {
      v16 = 0.0;
      if (*(_QWORD *)(v7 + 16)
        && (v19 = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)v65), (v20 & 1) != 0))
      {
        v17 = 0;
        v21 = *(_QWORD *)(v7 + 56) + 48 * v19;
        v14 = *(_QWORD *)v21;
        v55 = *(_QWORD *)(v21 + 8);
        v57 = *(_OWORD *)(v21 + 32);
        v58 = *(_OWORD *)(v21 + 16);
      }
      else
      {
        v55 = 0;
        v14 = 0;
        v57 = 0u;
        v58 = 0u;
        v17 = 1;
      }
      v15 = 1;
    }
  }
  else
  {
    DragReorderableLayoutCoordinator.childFrames()((uint64_t)v59);
    v16 = *(double *)&v59[8];
    v18 = *(_QWORD *)v59;
    v15 = v59[16];
    v55 = *((_QWORD *)&v60 + 1);
    v14 = v60;
    v57 = v62;
    v58 = v61;
    v17 = v63;
    swift_beginAccess();
    *(_QWORD *)(v3 + 224) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  static Update.ensure<A>(_:)();
  *(_QWORD *)v65 = *(_QWORD *)v59;
  *(_OWORD *)&v65[8] = *(_OWORD *)&v59[8];
  *(_OWORD *)&v65[24] = v60;
  if (one-time initialization token for coordinateSpace != -1)
    swift_once();
  outlined init with copy of CoordinateSpace((uint64_t)&static DragReorderableLayoutCoordinator.coordinateSpace, (uint64_t)v59);
  v64 = 2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  ViewTransform.convert(_:point:)();
  v23 = v22;
  outlined destroy of ViewTransform.Conversion((uint64_t)v59);
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
  {
    defaultSpacingValue.getter();
    v25 = v24;
    if ((*(_BYTE *)(v3 + 160) & 1) == 0)
    {
LABEL_14:
      v16 = *(double *)(v3 + 152);
      goto LABEL_18;
    }
  }
  else
  {
    v25 = *(double *)(v3 + 32);
    if ((*(_BYTE *)(v3 + 160) & 1) == 0)
      goto LABEL_14;
  }
  if ((v15 & 1) != 0)
  {
    v26 = 1;
    v27 = 0.0;
    goto LABEL_19;
  }
LABEL_18:
  v26 = 0;
  v27 = v16;
LABEL_19:
  v28 = swift_bridgeObjectRetain();
  v29 = specialized _copyCollectionToContiguousArray<A>(_:)(v28);
  swift_bridgeObjectRelease();
  *(_QWORD *)v59 = v29;
  specialized MutableCollection<>.sort(by:)((char **)v59);
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(*(_QWORD *)v59 + 16);
  if (v30)
  {
    v31 = (double *)(*(_QWORD *)v59 + 80);
    v32 = *(_QWORD *)(*(_QWORD *)v59 + 16);
    do
    {
      v27 = v27 + v25 + *v31;
      if (v23 < v27)
      {
        v34 = *((_QWORD *)v31 - 6);
        goto LABEL_28;
      }
      v31 += 7;
      --v32;
    }
    while (v32);
    v33 = *(_QWORD *)(*(_QWORD *)v59 + 32 + 56 * v30 - 56);
    swift_release();
    v34 = v33 + 1;
    if (!__OFADD__(v33, 1))
      goto LABEL_29;
    __break(1u);
  }
  v34 = 0;
LABEL_28:
  swift_release();
LABEL_29:
  *(double *)(v4 + 152) = v16;
  *(_BYTE *)(v4 + 160) = v26;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  DropInfoAdaptor.originContentPath.getter((uint64_t)v66);
  outlined init with take of Image.Resolved?((uint64_t)v66, (uint64_t)v67, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18]);
  v35 = v57;
  v37 = *((_QWORD *)&v58 + 1);
  v36 = v58;
  v38 = *((_QWORD *)&v57 + 1);
  if (v68 == 255)
  {
    v47 = a3;
    v48 = v55;
  }
  else
  {
    *(_OWORD *)v65 = v67[0];
    *(_OWORD *)&v65[16] = v67[1];
    v65[32] = v68;
    Path.boundingRect.getter();
    v40 = v39;
    v42 = v41;
    v44 = v43;
    v46 = v45;
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
    v37 = *((_QWORD *)&v58 + 1);
    v38 = *((_QWORD *)&v57 + 1);
    v35 = v57;
    v36 = v58;
    v47 = a3;
    v48 = v55;
    if ((v17 & 1) == 0)
    {
      v38 = v46;
      v35 = v44;
      v37 = v42;
      v36 = v40;
    }
  }
  *(_QWORD *)(v4 + 168) = v14;
  *(_QWORD *)(v4 + 176) = v48;
  *(_QWORD *)(v4 + 184) = v36;
  *(_QWORD *)(v4 + 192) = v37;
  *(_QWORD *)(v4 + 200) = v35;
  *(_QWORD *)(v4 + 208) = v38;
  v49 = v47 & 1;
  if ((v47 & 1) != 0)
    v50 = 0;
  else
    v50 = a2;
  if (v30)
    v51 = v34;
  else
    v51 = v50;
  *(_BYTE *)(v4 + 216) = v17;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v4 + 48, (uint64_t)v59);
  v52 = v60;
  __swift_project_boxed_opaque_existential_1(v59, v60);
  v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v52 + 1) + 64))(a2, v49, v51, v52, *((_QWORD *)&v52 + 1));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  return v53;
}

uint64_t DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  uint64_t v0;

  swift_allocObject();
  swift_weakInit();
  swift_retain();
  Transaction.addAnimationListener(allFinished:)();
  swift_release_n();
  static Animation.default.getter();
  Transaction.animation.setter();
  ++*(_DWORD *)(v0 + 232);
  swift_retain();
  withTransaction<A>(_:_:)();
  return swift_release_n();
}

uint64_t DragReorderableLayoutCoordinator.dropUpdated(info:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v5 = DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  v7 = v6 & 1;
  v12 = DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(a1, v5, v6 & 1);
  DragReorderableLayoutCoordinator.withStateAnimation(_:)();
  swift_beginAccess();
  outlined init with copy of TableColumnList(v2 + 48, (uint64_t)v13);
  v8 = v14;
  v9 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  v10 = (double *)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double))(v9 + 72))(v5, v7, v12, v8, v9, v10[2], v10[3]);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  *a2 = v7 ^ 3;
  return result;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.dropEntered(info:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v1 = v0;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v3, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v3, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.dropExited(info:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v1 = v0;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v3, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t DragReorderableLayoutCoordinator.performDrop(info:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;

  v2 = v1;
  v4 = *(_DWORD *)(v1 + 232);
  *(_DWORD *)(v1 + 232) = 0;
  v5 = DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  v7 = DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(a1, v5, v6 & 1);
  *(_DWORD *)(v1 + 232) = v4;
  if (v4)
  {
    v8 = *(_QWORD *)(v1 + 120);
    v9 = *(_BYTE *)(v1 + 128);
    v10 = *(_QWORD *)(v1 + 136);
    v11 = *(_BYTE *)(v1 + 144);
    v53 = *(_OWORD *)(v1 + 104);
    v54 = v8;
    LOBYTE(v55) = v9;
    v56 = v10;
    v57 = v11;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v13 = v12;
    MEMORY[0x18D75B9C8](&v58);
    v14 = v60;
    if (v61)
      v14 = 0;
    if ((v61 & 1) != 0 || v7 != v14)
    {
      v15 = *(_QWORD *)(v1 + 120);
      v16 = *(_BYTE *)(v1 + 128);
      v17 = *(_QWORD *)(v1 + 136);
      v18 = *(_BYTE *)(v1 + 144);
      v53 = *(_OWORD *)(v1 + 104);
      v54 = v15;
      LOBYTE(v55) = v16;
      v56 = v17;
      v57 = v18;
      MEMORY[0x18D75B9C8](&v58, v13);
      if ((v61 & 1) == 0)
      {
        v19 = v60;
        swift_beginAccess();
        v20 = *(_QWORD *)(v1 + 224);
        if (*(_QWORD *)(v20 + 16) && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19), (v22 & 1) != 0))
        {
          v23 = 0;
          v24 = *(_QWORD *)(v20 + 56) + 48 * v21;
          v25 = *(_QWORD *)v24;
          v26 = *(_QWORD *)(v24 + 8);
          v27 = *(_QWORD *)(v24 + 16);
          v52 = *(_OWORD *)(v24 + 24);
          v28 = *(_QWORD *)(v24 + 40);
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v23 = 1;
          v52 = 0u;
        }
        swift_endAccess();
        *(_QWORD *)(v2 + 168) = v25;
        *(_QWORD *)(v2 + 176) = v26;
        *(_QWORD *)(v2 + 184) = v27;
        *(_OWORD *)(v2 + 192) = v52;
        *(_QWORD *)(v2 + 208) = v28;
        *(_BYTE *)(v2 + 216) = v23;
      }
    }
  }
  v29 = DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  if ((v30 & 1) != 0)
  {
    v37 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (MEMORY[0x18D760234](v37))
    {
      swift_getObjectType();
      v38 = swift_bridgeObjectRetain();
      v39 = UIDropSession.itemProviders(for:)(v38);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      v39 = MEMORY[0x1E0DEE9D8];
    }
    swift_beginAccess();
    outlined init with copy of TableColumnList(v2 + 48, (uint64_t)&v53);
    v42 = v55;
    v43 = v56;
    __swift_project_boxed_opaque_existential_1(&v53, v55);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 16))(v7, v39, v42, v43);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v31 = v29;
  if (v29 != v7)
  {
    swift_beginAccess();
    outlined init with copy of TableColumnList(v2 + 48, (uint64_t)&v53);
    v40 = v55;
    v41 = v56;
    __swift_project_boxed_opaque_existential_1(&v53, v55);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 80))(v31, v7, v40, v41);
LABEL_20:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    v44 = *(_QWORD *)(v2 + 112);
    v45 = *(_QWORD *)(v2 + 120);
    v46 = *(_BYTE *)(v2 + 128);
    v47 = *(_QWORD *)(v2 + 136);
    v48 = *(_BYTE *)(v2 + 144);
    *(_QWORD *)&v53 = *(_QWORD *)(v2 + 104);
    *((_QWORD *)&v53 + 1) = v44;
    v54 = v45;
    LOBYTE(v55) = v46;
    v56 = v47;
    v57 = v48;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v50 = v49;
    swift_retain();
    swift_retain();
    MEMORY[0x18D75B9C8](&v58, v50);
    *(_QWORD *)&v53 = v58;
    BYTE8(v53) = v59;
    v54 = 0;
    LOBYTE(v55) = 1;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    return v36 & 1;
  }
  v32 = *(_QWORD *)(v2 + 136);
  v33 = *(_BYTE *)(v2 + 144);
  *((_QWORD *)&v53 + 1) = *(_QWORD *)(v2 + 112);
  v56 = v32;
  v57 = v33;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v35 = v34;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v58, v35);
  *(_QWORD *)&v53 = v58;
  BYTE8(v53) = v59;
  v54 = 0;
  LOBYTE(v55) = 1;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  v36 = 0;
  return v36 & 1;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  swift_retain();
  static Update.enqueueAction(_:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    --*(_DWORD *)(result + 232);
    return swift_release();
  }
  return result;
}

uint64_t DragReorderableLayoutCoordinator.childFrames()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;

  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = static Update.ensure<A>(_:)();
  if (!(v7 >> 62))
  {
    v2 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_BYTE *)(a1 + 72) = 1;
    return result;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v4 = MEMORY[0x18D75E3BC](v3);
      else
        v4 = swift_retain();
      ++v3;
      MEMORY[0x1E0C80A78](v4, v5);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
    while (v2 != v3);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.childFrames()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (AGGraphGetWeakValue())
    result = swift_bridgeObjectRetain();
  else
    result = MEMORY[0x1E0DEE9D8];
  *a1 = result;
  return result;
}

uint64_t closure #2 in DragReorderableLayoutCoordinator.childFrames()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 v28;
  __int128 v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  char v35;
  _BYTE v36[40];

  type metadata accessor for DragReorderableChildResponder();
  result = swift_dynamicCastClass();
  if (result)
  {
    v9 = result;
    v26 = 0u;
    v27 = 0u;
    v28 = 6;
    lazy protocol witness table accessor for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace();
    swift_retain();
    AnyHashable.init<A>(_:)();
    LOBYTE(v33) = 0;
    MultiViewResponder.addContentPath(to:kind:in:observer:)();
    outlined destroy of CoordinateSpace((uint64_t)&v29);
    v10 = *(_QWORD *)(v9 + 224);
    v11 = *(double *)(v9 + 232);
    memset(v34, 0, sizeof(v34));
    v35 = 6;
    outlined init with take of Path.Storage((uint64_t)v34, (uint64_t)v36);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    Path.boundingRect.getter();
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    *(_QWORD *)&v29 = v10;
    *((double *)&v29 + 1) = v11;
    v30 = v13;
    v31 = v15;
    v32 = v17;
    v33 = v19;
    v20 = v11 + v15;
    if (!(*(_BYTE *)(a1 + 8) & 1 | (v11 + v15 < *(double *)a1)))
      v20 = *(double *)a1;
    *(double *)a1 = v20;
    *(_BYTE *)(a1 + 8) = 0;
    if (*(_BYTE *)(v9 + 240) != 1)
      goto LABEL_6;
    *(_QWORD *)a2 = v10;
    *(double *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v13;
    *(double *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_QWORD *)(a2 + 40) = v19;
    *(_BYTE *)(a2 + 48) = 0;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v24);
    if ((v25 & 1) == 0)
    {
      v21 = v24;
    }
    else
    {
LABEL_6:
      if (*(_BYTE *)(v9 + 216) == 1)
      {
        outlined retain of TableColumnCustomizationID.Base((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
        result = swift_release();
        goto LABEL_11;
      }
      v21 = *(_QWORD *)(v9 + 208);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *a3;
    *a3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v29, v21, isUniquelyReferenced_nonNull_native);
    *a3 = v23;
    swift_release();
    swift_bridgeObjectRelease();
    result = outlined consume of Path.Storage(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28);
  }
LABEL_11:
  *a4 = 0;
  return result;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.destination(at:sourceIndex:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = AGGraphGetWeakValue();
  if (result)
  {
    *(_QWORD *)a1 = *(_QWORD *)result;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(result + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(result + 24);
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DragReorderableLayoutCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DragReorderableLayoutCoordinator()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for DragReorderableLayoutCoordinator.ChildFrame()
{
  return &type metadata for DragReorderableLayoutCoordinator.ChildFrame;
}

ValueMetadata *type metadata accessor for _DragReorderableView_DragState()
{
  return &type metadata for _DragReorderableView_DragState;
}

uint64_t getEnumTagSinglePayload for DragReorderableLayoutView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187401434 + 4 * byte_187C2CFD0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for DragReorderableLayoutView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for DragReorderableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DragReorderableLayoutView);
}

ValueMetadata *type metadata accessor for DragSourceProxyModifier()
{
  return &type metadata for DragSourceProxyModifier;
}

uint64_t type metadata completion function for DragReorderableLayoutAdaptor()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DragReorderableLayoutAdaptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, unint64_t, uint64_t);
  _QWORD *v29;
  _QWORD *v30;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((((((((((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    v17 = (_OWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_OWORD *)((v10 + v16) & 0xFFFFFFFFFFFFFFF8);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v20;
    v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)v23;
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
    *(_QWORD *)v22 = v24;
    v25 = ((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v25 + 24) = v27;
    *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
    v28 = **(void (***)(unint64_t, unint64_t, uint64_t))(v27 - 8);
    swift_bridgeObjectRetain();
    v28(v25, v26, v27);
    v29 = (_QWORD *)((v25 + 47) & 0xFFFFFFFFFFFFF8);
    v30 = (_QWORD *)((v26 + 47) & 0xFFFFFFFFFFFFF8);
    *v29 = *v30;
    *(_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = ((((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v8 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t initializeWithCopy for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(unint64_t, unint64_t, uint64_t);
  _QWORD *v26;
  _QWORD *v27;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v17;
  v19 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v21;
  v22 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v22 + 24) = v24;
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
  v25 = **(void (***)(unint64_t, unint64_t, uint64_t))(v24 - 8);
  swift_bridgeObjectRetain();
  v25(v22, v23, v24);
  v26 = (_QWORD *)((v22 + 47) & 0xFFFFFFFFFFFFF8);
  v27 = (_QWORD *)((v23 + 47) & 0xFFFFFFFFFFFFF8);
  *v26 = *v27;
  *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v14 = *v15;
  *(_QWORD *)(v14 + 8) = v15[1];
  *(_QWORD *)(v14 + 16) = v15[2];
  *(_QWORD *)(v14 + 24) = v15[3];
  v14 += 39;
  v16 = (_QWORD *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) = *v16;
  v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = v21;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8), (uint64_t *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8));
  v22 = (_QWORD *)(((v18 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  *(_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v21;
  v22 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_OWORD *)v23;
  v24 = *(_OWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
  *(_OWORD *)v22 = v25;
  *(_OWORD *)(v22 + 16) = v24;
  v26 = (_QWORD *)((v22 + 47) & 0xFFFFFFFFFFFFF8);
  v27 = (_QWORD *)((v23 + 47) & 0xFFFFFFFFFFFFF8);
  *v26 = *v27;
  *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v14 = *v15;
  *(_QWORD *)(v14 + 8) = v15[1];
  *(_QWORD *)(v14 + 16) = v15[2];
  *(_QWORD *)(v14 + 24) = v15[3];
  v14 += 39;
  v16 = (_QWORD *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16;
  v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) = *v16;
  v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = v22;
  v23 = v19 & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v19 & 0xFFFFFFFFFFFFFFF8);
  v25 = *(_OWORD *)v24;
  v26 = *(_OWORD *)(v24 + 16);
  *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
  *(_OWORD *)v23 = v25;
  *(_OWORD *)(v23 + 16) = v26;
  v27 = (_QWORD *)(((v19 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v24 + 47) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  *(_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragReorderableLayoutAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)((((v12 + v17) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  else
  {
    if (((((((((((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
             + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187401ED8 + 4 * byte_187C2CFDE[v15]))();
  }
}

void storeEnumTagSinglePayload for DragReorderableLayoutAdaptor(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((((((((((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8)
             + 31) & 0xFFFFFFF8)
           + 47) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((((((((((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8)
           + 31) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((((((((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)+ 31) & 0xFFFFFFFFFFFFFFF8)+ 47) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1874020C4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187402158);
}

void sub_1874020CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1874020D4);
  JUMPOUT(0x187402158);
}

void sub_187402118()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187402158);
}

void sub_187402120()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187402158);
}

uint64_t sub_187402128(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x187402158);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x187402134);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void type metadata accessor for DragReorderableLayoutAdaptor()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for ViewModifier in DragSourceProxyModifier()
{
  return &protocol witness table for DragSourceProxyModifier;
}

_UNKNOWN **base witness table accessor for View in DragReorderableLayoutView<A>()
{
  return &protocol witness table for DragReorderableLayoutView<A>;
}

uint64_t protocol witness for DropDelegate.validateDrop(info:) in conformance DragReorderableLayoutCoordinator(_QWORD *a1)
{
  return DragReorderableLayoutCoordinator.validateDrop(info:)(a1) & 1;
}

uint64_t protocol witness for DropDelegate.performDrop(info:) in conformance DragReorderableLayoutCoordinator(_QWORD *a1)
{
  return DragReorderableLayoutCoordinator.performDrop(info:)(a1) & 1;
}

uint64_t protocol witness for DropDelegate.dropEntered(info:) in conformance DragReorderableLayoutCoordinator(_QWORD *a1)
{
  return DragReorderableLayoutCoordinator.dropEntered(info:)(a1);
}

uint64_t protocol witness for DropDelegate.dropUpdated(info:) in conformance DragReorderableLayoutCoordinator@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DragReorderableLayoutCoordinator.dropUpdated(info:)(a1, a2);
}

uint64_t protocol witness for DropDelegate.dropExited(info:) in conformance DragReorderableLayoutCoordinator()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  DragReorderableLayoutCoordinator.withStateAnimation(_:)();
  *(_QWORD *)(v1 + 152) = 0;
  *(_BYTE *)(v1 + 160) = 1;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v1 + 48, (uint64_t)v5);
  v2 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.dropExited(info:)()
{
  return closure #1 in DragReorderableLayoutCoordinator.dropExited(info:)();
}

uint64_t sub_1874022BC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  return closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@error @owned Error)()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> (@error @owned Error)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  return closure #1 in closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)();
}

uint64_t specialized DropPlaceholderListModifier.PlaceholderViews.init(base:placeholder:sourceIndex:destinationIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;

  *(_QWORD *)(a6 + 24) = a1;
  *(_QWORD *)(a6 + 32) = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (v10 < 0 || result < v10)
    goto LABEL_11;
  *(_QWORD *)(a6 + 40) = v10;
  *(_QWORD *)(a6 + 48) = a3;
  *(_BYTE *)(a6 + 56) = a4 & 1;
  *(_QWORD *)(a6 + 64) = a5;
  swift_retain();
  v12 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (result < 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v13 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  result = swift_release();
  if (v12 < 0 || v13 < v12)
    goto LABEL_13;
  v14 = *(_QWORD *)(a6 + 40);
  v15 = __OFADD__(v12, v14);
  v16 = v12 + v14;
  if (v15)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = (a4 & 1) == 0;
  v15 = __OFSUB__(v16, v17);
  v18 = v16 - v17;
  if (!v15)
  {
    *(_QWORD *)(a6 + 72) = v18;
    *(_BYTE *)(a6 + 16) = 0;
    return a6;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized DropPlaceholderListModifier.PlaceholderViews.__allocating_init(base:placeholder:sourceIndex:destinationIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a4 & 1;
  v10 = swift_allocObject();
  v11 = specialized DropPlaceholderListModifier.PlaceholderViews.init(base:placeholder:sourceIndex:destinationIndex:)(a1, a2, a3, v9, a5, v10);
  swift_release();
  return v11;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.destination(at:sourceIndex:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(a1);
}

unint64_t lazy protocol witness table accessor for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace;
  if (!lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReorderableLayoutCoordinateSpace, &unk_1E1B017E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace;
  if (!lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReorderableLayoutCoordinateSpace, &unk_1E1B017E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace);
  }
  return result;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.childFrames()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in DragReorderableLayoutCoordinator.childFrames()(a1);
}

uint64_t partial apply for closure #2 in DragReorderableLayoutCoordinator.childFrames()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #2 in DragReorderableLayoutCoordinator.childFrames()(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 40), a1);
}

unint64_t lazy protocol witness table accessor for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace;
  if (!lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReorderableChildCoordinateSpace, &type metadata for ReorderableChildCoordinateSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace;
  if (!lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReorderableChildCoordinateSpace, &type metadata for ReorderableChildCoordinateSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace);
  }
  return result;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.dropUpdated(info:)()
{
  return closure #1 in DragReorderableLayoutCoordinator.dropEntered(info:)();
}

uint64_t type metadata accessor for DragReorderableLayoutView.ChildTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DragReorderableLayoutView.ChildTransform);
}

uint64_t partial apply for closure #1 in static DragReorderableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static DragReorderableLayoutView._makeView(view:inputs:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD))type metadata accessor for DragReorderableLayoutView, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata accessor for DragReorderableLayoutView.MakeCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DragReorderableLayoutView.MakeCoordinator);
}

uint64_t type metadata accessor for DragReorderableLayoutCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DragReorderableLayoutCore);
}

uint64_t type metadata accessor for DragReorderableLayoutView.MakeCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DragReorderableLayoutView.MakeCore);
}

uint64_t partial apply for closure #2 in static DragReorderableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in static DragReorderableLayoutView._makeView(view:inputs:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

unint64_t lazy protocol witness table accessor for type DragSourceProxyInput and conformance DragSourceProxyInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput;
  if (!lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragSourceProxyInput, &unk_1E1AD2970);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput;
  if (!lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragSourceProxyInput, &unk_1E1AD2970);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier;
  if (!lazy protocol witness table cache variable for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConditionalDraggingModifier, &type metadata for ConditionalDraggingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier);
  }
  return result;
}

double specialized ReorderableLayout.sizeThatFits(in:context:child:)()
{
  double v0;
  double v1;
  char v2;
  double v3;

  LayoutProxy.size(in:)();
  v1 = v0;
  v3 = COERCE_DOUBLE(_ProposedSize.width.getter());
  if (v1 >= v3)
    v3 = v1;
  if ((v2 & 1) == 0)
    v1 = v3;
  _ProposedSize.height.getter();
  return v1;
}

uint64_t destroy for ConditionalDraggingModifier(uint64_t result)
{
  _QWORD *v1;

  if (*(_QWORD *)(result + 104))
  {
    v1 = (_QWORD *)result;
    if (*(_QWORD *)(result + 8))
      swift_release();
    if (v1[3])
      swift_release();
    if (v1[5])
      swift_release();
    if (v1[7])
      swift_release();
    if (v1[12])
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 9));
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ConditionalDraggingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 104);
  if (v4)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v6;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    }
    v10 = *(_QWORD *)(a2 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    v12 = *(_QWORD *)(a2 + 40);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v13;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    }
    v14 = *(_QWORD *)(a2 + 56);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v14;
      *(_QWORD *)(a1 + 64) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    }
    v16 = (_OWORD *)(a1 + 72);
    v17 = (_OWORD *)(a2 + 72);
    v18 = *(_QWORD *)(a2 + 96);
    if (v18)
    {
      *(_QWORD *)(a1 + 96) = v18;
      (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v16, v17);
      v4 = *(_QWORD *)(a2 + 104);
    }
    else
    {
      v19 = *(_OWORD *)(a2 + 88);
      *v16 = *v17;
      *(_OWORD *)(a1 + 88) = v19;
    }
    v20 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v4;
    *(_QWORD *)(a1 + 112) = v20;
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  return a1;
}

uint64_t assignWithCopy for ConditionalDraggingModifier(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v4 = *((_QWORD *)a2 + 13);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v4)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v6 = (__int128 *)((char *)a2 + 8);
      v5 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)(a1 + 8))
      {
        if (v5)
        {
          v7 = *((_QWORD *)a2 + 2);
          *(_QWORD *)(a1 + 8) = v5;
          *(_QWORD *)(a1 + 16) = v7;
          swift_retain();
          swift_release();
          goto LABEL_15;
        }
        swift_release();
      }
      else if (v5)
      {
        v16 = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 8) = v5;
        *(_QWORD *)(a1 + 16) = v16;
        swift_retain();
        goto LABEL_15;
      }
      *(_OWORD *)(a1 + 8) = *v6;
LABEL_15:
      v23 = *((_QWORD *)a2 + 3);
      if (*(_QWORD *)(a1 + 24))
      {
        if (v23)
        {
          v24 = *((_QWORD *)a2 + 4);
          *(_QWORD *)(a1 + 24) = v23;
          *(_QWORD *)(a1 + 32) = v24;
          swift_retain();
          swift_release();
          goto LABEL_25;
        }
        swift_release();
      }
      else if (v23)
      {
        v25 = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 24) = v23;
        *(_QWORD *)(a1 + 32) = v25;
        swift_retain();
        goto LABEL_25;
      }
      *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
LABEL_25:
      v28 = *((_QWORD *)a2 + 5);
      if (*(_QWORD *)(a1 + 40))
      {
        if (v28)
        {
          v29 = *((_QWORD *)a2 + 6);
          *(_QWORD *)(a1 + 40) = v28;
          *(_QWORD *)(a1 + 48) = v29;
          swift_retain();
          swift_release();
          goto LABEL_35;
        }
        swift_release();
      }
      else if (v28)
      {
        v30 = *((_QWORD *)a2 + 6);
        *(_QWORD *)(a1 + 40) = v28;
        *(_QWORD *)(a1 + 48) = v30;
        swift_retain();
        goto LABEL_35;
      }
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
LABEL_35:
      v33 = *((_QWORD *)a2 + 7);
      if (*(_QWORD *)(a1 + 56))
      {
        if (v33)
        {
          v34 = *((_QWORD *)a2 + 8);
          *(_QWORD *)(a1 + 56) = v33;
          *(_QWORD *)(a1 + 64) = v34;
          swift_retain();
          swift_release();
          goto LABEL_45;
        }
        swift_release();
      }
      else if (v33)
      {
        v35 = *((_QWORD *)a2 + 8);
        *(_QWORD *)(a1 + 56) = v33;
        *(_QWORD *)(a1 + 64) = v35;
        swift_retain();
        goto LABEL_45;
      }
      *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
LABEL_45:
      v38 = *((_QWORD *)a2 + 12);
      if (*(_QWORD *)(a1 + 96))
      {
        if (v38)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 72), (uint64_t *)a2 + 9);
LABEL_55:
          v43 = *((_QWORD *)a2 + 14);
          *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
          *(_QWORD *)(a1 + 112) = v43;
          swift_retain();
          swift_release();
          return a1;
        }
        __swift_destroy_boxed_opaque_existential_1(a1 + 72);
      }
      else if (v38)
      {
        *(_QWORD *)(a1 + 96) = v38;
        (**(void (***)(uint64_t, uint64_t))(v38 - 8))(a1 + 72, (uint64_t)a2 + 72);
        goto LABEL_55;
      }
      v42 = *(__int128 *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
      *(_OWORD *)(a1 + 88) = v42;
      goto LABEL_55;
    }
    outlined destroy of _DraggingModifier((_QWORD *)a1);
    v10 = a2[3];
    v12 = *a2;
    v11 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v11;
    v14 = a2[5];
    v13 = a2[6];
    v15 = a2[4];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 64) = v15;
  }
  else if (v4)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v8 = *((_QWORD *)a2 + 1);
    if (v8)
    {
      v9 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v9;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
    }
    v26 = *((_QWORD *)a2 + 3);
    if (v26)
    {
      v27 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 24) = v26;
      *(_QWORD *)(a1 + 32) = v27;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
    }
    v31 = *((_QWORD *)a2 + 5);
    if (v31)
    {
      v32 = *((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 40) = v31;
      *(_QWORD *)(a1 + 48) = v32;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
    }
    v36 = *((_QWORD *)a2 + 7);
    if (v36)
    {
      v37 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 56) = v36;
      *(_QWORD *)(a1 + 64) = v37;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
    }
    v39 = (_OWORD *)(a1 + 72);
    v40 = (__int128 *)((char *)a2 + 72);
    v41 = *((_QWORD *)a2 + 12);
    if (v41)
    {
      *(_QWORD *)(a1 + 96) = v41;
      (**(void (***)(_OWORD *, _OWORD *))(v41 - 8))(v39, v40);
    }
    else
    {
      v44 = *(__int128 *)((char *)a2 + 88);
      *v39 = *v40;
      *(_OWORD *)(a1 + 88) = v44;
    }
    v45 = *((_QWORD *)a2 + 14);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_QWORD *)(a1 + 112) = v45;
    swift_retain();
  }
  else
  {
    v17 = *a2;
    v18 = a2[1];
    v19 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v19;
    *(_OWORD *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v18;
    v20 = a2[4];
    v21 = a2[5];
    v22 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)(a1 + 96) = v22;
    *(_OWORD *)(a1 + 64) = v20;
  }
  return a1;
}

uint64_t assignWithTake for ConditionalDraggingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 104))
    goto LABEL_7;
  v4 = *(_QWORD *)(a2 + 104);
  if (!v4)
  {
    outlined destroy of _DraggingModifier((_QWORD *)a1);
LABEL_7:
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    return a1;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v5)
  {
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v11;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 8) = *v6;
LABEL_12:
  v12 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      swift_release();
      goto LABEL_19;
    }
    swift_release();
  }
  else if (v12)
  {
    v14 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v14;
    goto LABEL_19;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_19:
  v15 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v15)
    {
      v16 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v16;
      swift_release();
      goto LABEL_26;
    }
    swift_release();
  }
  else if (v15)
  {
    v17 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v17;
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_26:
  v18 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v18)
    {
      v20 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v18;
      *(_QWORD *)(a1 + 64) = v20;
      goto LABEL_33;
    }
LABEL_32:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_33;
  }
  if (!v18)
  {
    swift_release();
    goto LABEL_32;
  }
  v19 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  swift_release();
LABEL_33:
  if (*(_QWORD *)(a1 + 96))
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  v21 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v21;
  v22 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = v22;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalDraggingModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 120))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 104);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalDraggingModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 0;
    if (a2)
      *(_QWORD *)(result + 104) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionalDraggingModifier()
{
  return &type metadata for ConditionalDraggingModifier;
}

void *type metadata accessor for DragSourceProxyInput()
{
  return &unk_1E1AD2970;
}

void type metadata completion function for DragReorderableLayoutCore()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for DragReorderableLayoutAdaptor();
}

uint64_t *initializeBufferWithCopyOfBuffer for DragReorderableLayoutCore(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t *, uint64_t *, uint64_t);
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(unint64_t, unint64_t, uint64_t);
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  void *v41;
  const void *v42;
  unsigned int (*v43)(const void *, uint64_t, uint64_t);
  uint64_t v44;
  size_t __n;
  uint64_t AssociatedTypeWitness;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v50 = *(_QWORD *)(v2 + 64);
  v3 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v49 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v49 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v7 + 64) + 1;
  v10 = v8 | *(_DWORD *)(v2 + 80) & 0xF8 | v5;
  v11 = v10 <= 7 && ((*(_DWORD *)(v7 + 80) | v5 | *(_DWORD *)(v2 + 80)) & 0x100000) == 0;
  if (v11
    && (v12 = v50 + v5,
        v13 = v6 + 7,
        v14 = ((((((((((v6 + 7 + (v12 & ~(unint64_t)v5)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                  + 31) & 0xFFFFFFFFFFFFFFF8)
                + 47) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15,
        v15 = v8 + 41,
        ((v8 + 41 + (((v14 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8) + v9 <= 0x18))
  {
    v16 = ~(unint64_t)v5;
    v51 = ~v8;
    v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 16);
    v18 = a1;
    v19 = AssociatedTypeWitness;
    __n = v9;
    v48 = v15;
    v17(a1, a2, v19);
    v20 = ((unint64_t)a1 + v12) & v16;
    v21 = ((unint64_t)a2 + v12) & v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v20, v21, v3);
    v22 = (_OWORD *)((v13 + v20) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_OWORD *)((v13 + v21) & 0xFFFFFFFFFFFFFFF8);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (_QWORD *)(((unint64_t)v23 + 39) & 0xFFFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v25;
    v27 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
    v28 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)v28;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    *(_QWORD *)v27 = v29;
    v30 = ((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFF8;
    v31 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
    v32 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v30 + 24) = v32;
    *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 32);
    v33 = **(void (***)(unint64_t, unint64_t, uint64_t))(v32 - 8);
    swift_bridgeObjectRetain();
    v33(v30, v31, v32);
    v34 = (_QWORD *)((v31 + 47) & 0xFFFFFFFFFFFFF8);
    v35 = (_QWORD *)((v30 + 47) & 0xFFFFFFFFFFFFF8);
    *v35 = *v34;
    *(_QWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFF8);
    v36 = (_QWORD *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFF8);
    v37 = (_QWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFF8);
    *v37 = *v36;
    v38 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    v39 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *(_QWORD *)(v38 + 8) = *(_QWORD *)(v39 + 8);
    v40 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)(v38 + 25) = *(_OWORD *)(v39 + 25);
    *(_OWORD *)(v38 + 16) = v40;
    v41 = (void *)((v48 + v38) & v51);
    v42 = (const void *)((v48 + v39) & v51);
    v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    if (v43(v42, 1, v49))
    {
      memcpy(v41, v42, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v41, v42, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v41, 0, 1, v49);
    }
  }
  else
  {
    v44 = *a2;
    *a1 = *a2;
    v18 = (uint64_t *)(v44 + (((v10 | 7) + 16) & ~(unint64_t)(v10 | 7)));
    swift_retain();
  }
  return v18;
}

uint64_t destroy for DragReorderableLayoutCore(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v4 + v7;
  v9 = (v4 + v7 + a1) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((((((v10 + v9) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  swift_release();
  swift_release();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80)
       + ((((a1
           + ((((((((((v10 + (v8 & ~v7)) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8)
               + 47) & 0xFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 41) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v12 + 8))(v13, v11);
  return result;
}

uint64_t initializeWithCopy for DragReorderableLayoutCore(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t, unint64_t, uint64_t);
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  size_t v41;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, (v10 + a2) & ~v9, v7);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_OWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v12 + ((v10 + a2) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v16;
  v18 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  v21 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 24) = v23;
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
  v24 = **(void (***)(unint64_t, unint64_t, uint64_t))(v23 - 8);
  swift_bridgeObjectRetain();
  v24(v21, v22, v23);
  v25 = (_QWORD *)((v21 + 47) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v22 + 47) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
  v27 = v10 & ~v9;
  v28 = a1;
  v29 = ((((((((((v12 + v27) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  v30 = (_QWORD *)((v29 + a1) & 0xFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v29 + a2) & 0xFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  v34 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)(v32 + 25) = *(_OWORD *)(v33 + 25);
  *(_OWORD *)(v32 + 16) = v34;
  v35 = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = (void *)((v37 + 41 + v32) & ~v37);
  v39 = (const void *)((v37 + 41 + v33) & ~v37);
  v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v40(v39, 1, v35))
  {
    if (*(_DWORD *)(v36 + 84))
      v41 = *(_QWORD *)(v36 + 64);
    else
      v41 = *(_QWORD *)(v36 + 64) + 1;
    memcpy(v38, v39, v41);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v38, v39, v35);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v38, 0, 1, v35);
  }
  return v28;
}

uint64_t assignWithCopy for DragReorderableLayoutCore(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  size_t v39;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, (v10 + a2) & ~v9, v7);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)((v12 + ((v10 + a2) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v13 = *v14;
  *(_QWORD *)(v13 + 8) = v14[1];
  *(_QWORD *)(v13 + 16) = v14[2];
  *(_QWORD *)(v13 + 24) = v14[3];
  v13 += 39;
  v15 = (_QWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8) = *v15;
  v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = v20;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8), (uint64_t *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8));
  v21 = (_QWORD *)(((v17 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  v22 = a1;
  v23 = (_QWORD *)(((((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  *v21 = *v23;
  *(_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8);
  v24 = ((((((((((v12 + (v10 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  v25 = (_QWORD *)((v24 + a1) & 0xFFFFFFFFFFFFFFF8);
  v26 = v24 + a2;
  v27 = (v26 & 0xFFFFFFFFFFFFF8) + 15;
  *v25 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v28 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = v27 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v28 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v28 + 8) = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  v30 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v28 + 24) = *(_BYTE *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v28 + 16) = v30;
  v31 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_BYTE *)(v28 + 40) = *(_BYTE *)((v27 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_QWORD *)(v28 + 32) = v31;
  v32 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = (void *)((v34 + 41 + v28) & ~v34);
  v36 = (void *)((v34 + 41 + v29) & ~v34);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  LODWORD(a2) = v37(v35, 1, v32);
  v38 = v37(v36, 1, v32);
  if ((_DWORD)a2)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 16))(v35, v36, v32);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
      return v22;
    }
  }
  else
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 24))(v35, v36, v32);
      return v22;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v35, v32);
  }
  if (*(_DWORD *)(v33 + 84))
    v39 = *(_QWORD *)(v33 + 64);
  else
    v39 = *(_QWORD *)(v33 + 64) + 1;
  memcpy(v35, v36, v39);
  return v22;
}

uint64_t initializeWithTake for DragReorderableLayoutCore(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _OWORD *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  size_t v39;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, (v10 + a2) & ~v9, v7);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_OWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v12 + ((v10 + a2) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  v21 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_OWORD *)v22;
  v23 = *(_OWORD *)(v22 + 16);
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
  *(_OWORD *)v21 = v24;
  *(_OWORD *)(v21 + 16) = v23;
  v25 = (_QWORD *)((v21 + 47) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v22 + 47) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
  v27 = ((((((((((v12 + (v10 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  v28 = (_QWORD *)((v27 + a1) & 0xFFFFFFFFFFFFF8);
  v29 = (_QWORD *)((v27 + a2) & 0xFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = (_OWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = (__int128 *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v33 = *v31;
  v32 = v31[1];
  *(_OWORD *)((char *)v30 + 25) = *(__int128 *)((char *)v31 + 25);
  *v30 = v33;
  v30[1] = v32;
  v34 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = (void *)(((unint64_t)v30 + v36 + 41) & ~v36);
  v38 = (const void *)(((unint64_t)v31 + v36 + 41) & ~v36);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v38, 1, v34))
  {
    if (*(_DWORD *)(v35 + 84))
      v39 = *(_QWORD *)(v35 + 64);
    else
      v39 = *(_QWORD *)(v35 + 64) + 1;
    memcpy(v37, v38, v39);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v37, v38, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v34);
  }
  return a1;
}

uint64_t assignWithTake for DragReorderableLayoutCore(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  size_t v43;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, (v10 + a2) & ~v9, v7);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)((v12 + ((v10 + a2) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v13 = *v14;
  *(_QWORD *)(v13 + 8) = v14[1];
  *(_QWORD *)(v13 + 16) = v14[2];
  *(_QWORD *)(v13 + 24) = v14[3];
  v13 += 39;
  v15 = (_QWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15;
  v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8) = *v15;
  v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = v21;
  v22 = v18 & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = a1;
  __swift_destroy_boxed_opaque_existential_1(v18 & 0xFFFFFFFFFFFFFFF8);
  v25 = *(_OWORD *)v23;
  v26 = *(_OWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
  *(_OWORD *)v22 = v25;
  *(_OWORD *)(v22 + 16) = v26;
  v27 = (_QWORD *)(((v18 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v23 + 47) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  *(_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  v29 = ((((((((((v12 + (v10 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  v30 = (_QWORD *)((v29 + a1) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v29 + a2) & 0xFFFFFFFFFFFFF8);
  *v30 = *v31;
  swift_release();
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  swift_release();
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  swift_release();
  v34 = *(_QWORD *)(v33 + 16);
  *(_BYTE *)(v32 + 24) = *(_BYTE *)(v33 + 24);
  *(_QWORD *)(v32 + 16) = v34;
  v35 = *(_QWORD *)(v33 + 32);
  *(_BYTE *)(v32 + 40) = *(_BYTE *)(v33 + 40);
  *(_QWORD *)(v32 + 32) = v35;
  v36 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = (void *)((v38 + 41 + v32) & ~v38);
  v40 = (void *)((v38 + 41 + v33) & ~v38);
  v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
  LODWORD(a2) = v41(v39, 1, v36);
  v42 = v41(v40, 1, v36);
  if ((_DWORD)a2)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 32))(v39, v40, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v39, 0, 1, v36);
      return v24;
    }
  }
  else
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 40))(v39, v40, v36);
      return v24;
    }
    (*(void (**)(void *, uint64_t))(v37 + 8))(v39, v36);
  }
  if (*(_DWORD *)(v37 + 84))
    v43 = *(_QWORD *)(v37 + 64);
  else
    v43 = *(_QWORD *)(v37 + 64) + 1;
  memcpy(v39, v40, v43);
  return v24;
}

uint64_t getEnumTagSinglePayload for DragReorderableLayoutCore(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  int v23;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v35 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v35 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= v5)
    v8 = v5;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = v8;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v9)
    v13 = v9;
  else
    v13 = v12;
  if (v11)
    v14 = *(_QWORD *)(v10 + 64);
  else
    v14 = *(_QWORD *)(v10 + 64) + 1;
  if (!a2)
    return 0;
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = *(_QWORD *)(v4 + 64) + v15;
  v17 = *(_QWORD *)(v6 + 64) + 7;
  v18 = (((((((((v17 + (v16 & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = v19 + 41;
  if (a2 <= v13)
    goto LABEL_36;
  v21 = v14 + ((v20 + ((((v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v19);
  v22 = 8 * v21;
  if (v21 <= 3)
  {
    v25 = ((a2 - v13 + ~(-1 << v22)) >> v22) + 1;
    if (HIWORD(v25))
    {
      v23 = *(_DWORD *)(a1 + v21);
      if (!v23)
        goto LABEL_36;
      goto LABEL_27;
    }
    if (v25 > 0xFF)
    {
      v23 = *(unsigned __int16 *)(a1 + v21);
      if (!*(_WORD *)(a1 + v21))
        goto LABEL_36;
      goto LABEL_27;
    }
    if (v25 < 2)
    {
LABEL_36:
      if (v9 < v12)
      {
        v28 = (unint64_t *)((a1 + v18 + 15) & 0xFFFFFFFFFFFFFFF8);
        if (v13 != 0x7FFFFFFF)
        {
          v34 = (*(uint64_t (**)(unint64_t))(v10 + 48))((v20
                                                                        + (((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v19);
          if (v34 >= 2)
            return v34 - 1;
          else
            return 0;
        }
        v29 = *v28;
        goto LABEL_48;
      }
      if ((_DWORD)v5 == v9)
      {
        v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
        v31 = a1;
        v32 = v5;
        v33 = AssociatedTypeWitness;
      }
      else
      {
        v31 = (v16 + a1) & ~v15;
        if ((_DWORD)v7 != v9)
        {
          v29 = *(_QWORD *)((((v17 + v31) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
LABEL_48:
          if (v29 >= 0xFFFFFFFF)
            LODWORD(v29) = -1;
          return (v29 + 1);
        }
        v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
        v32 = v7;
        v33 = v35;
      }
      return v30(v31, v32, v33);
    }
  }
  v23 = *(unsigned __int8 *)(a1 + v21);
  if (!*(_BYTE *)(a1 + v21))
    goto LABEL_36;
LABEL_27:
  v26 = (v23 - 1) << v22;
  if (v21 > 3)
    v26 = 0;
  if ((_DWORD)v21)
  {
    if (v21 <= 3)
      v27 = v21;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  return v13 + v26 + 1;
}

void storeEnumTagSinglePayload for DragReorderableLayoutCore(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v7 + 84) <= v6)
    v8 = v6;
  else
    v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = v8;
  v10 = 0u;
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_DWORD *)(v11 + 84);
  if (v12)
    v13 = v12 - 1;
  else
    v13 = 0;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  if (v12)
    v15 = *(_QWORD *)(v11 + 64);
  else
    v15 = *(_QWORD *)(v11 + 64) + 1;
  v16 = ((*(unsigned __int8 *)(v11 + 80)
        + 41
        + ((((((((((((((*(_QWORD *)(v7 + 64)
                      + 7
                      + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)
                    + 39) & 0xFFFFFFFFFFFFFFF8)
                  + 31) & 0xFFFFFFFFFFFFFFF8)
                + 47) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
      + v15;
  if (a3 > v14)
  {
    if (v16 > 3)
    {
      v10 = 1u;
      if (v14 >= a2)
        goto LABEL_19;
LABEL_25:
      v18 = ~v14 + a2;
      if (v16 < 4)
      {
        if ((_DWORD)v16)
        {
          v19 = v18 & ~(-1 << (8 * v16));
          bzero(a1, v16);
          if ((_DWORD)v16 == 3)
          {
            *(_WORD *)a1 = v19;
            a1[2] = BYTE2(v19);
          }
          else if ((_DWORD)v16 == 2)
          {
            *(_WORD *)a1 = v19;
          }
          else
          {
            *a1 = v19;
          }
        }
      }
      else
      {
        bzero(a1, v16);
        *(_DWORD *)a1 = v18;
      }
      __asm { BR              X10 }
    }
    v17 = ((a3 - v14 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v17))
    {
      v10 = 4u;
      if (v14 < a2)
        goto LABEL_25;
LABEL_19:
      __asm { BR              X4 }
    }
    if (v17 >= 0x100)
      v10 = 2;
    else
      v10 = v17 > 1;
  }
  if (v14 < a2)
    goto LABEL_25;
  goto LABEL_19;
}

void sub_1874052C4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1874052A4);
}

void sub_1874052D4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1874052A4);
}

void sub_1874052DC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1874052A4);
}

void *type metadata accessor for DragReorderableContext()
{
  return &unk_1E1ADB7B0;
}

ValueMetadata *type metadata accessor for ReorderableChildCoordinateSpace()
{
  return &type metadata for ReorderableChildCoordinateSpace;
}

void *type metadata accessor for ReorderableLayoutCoordinateSpace()
{
  return &unk_1E1B017E8;
}

ValueMetadata *type metadata accessor for _DragReorderableView_DropDestination()
{
  return &type metadata for _DragReorderableView_DropDestination;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ConditionalDraggingModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DragReorderableLayoutCore<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in DragReorderableLayoutView<A>.MakeCore()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in DragReorderableLayoutView<A>.MakeCoordinator()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in DragReorderableLayoutView<A>.ChildTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, (uint64_t)&type metadata for DragReorderableChildModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t)&type metadata for MappedViewElement.Placeholder, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for DragReorderableChildModifier);
    v3[1] = &protocol witness table for MappedViewElement.Placeholder;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>();
    v2 = v1;
    v3[0] = &protocol witness table for MappedViewElement.Placeholder;
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPlaceholderListModifier);
}

void sub_18740562C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)(type metadata accessor for DragReorderableLayoutCore(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4)- 8);
  v6 = v4 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for DragReorderableLayoutAdaptor();
}

uint64_t sub_187405774(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2 + *(int *)(a1 + 68), v4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(a1 + 84));
  swift_release();
  swift_release();
  swift_release();
  v6 = v2 + *(int *)(v1 + 44);
  v7 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCore.children.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  type metadata accessor for DragReorderableLayoutCore(0, v6, v7, a2);
  return closure #1 in DragReorderableLayoutCore.children.getter(a1, v6, v7, a3);
}

uint64_t outlined destroy of DragReorderableChildModifier(uint64_t a1)
{
  destroy for DragReorderableChildModifier(a1);
  return a1;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCore.draggableView<A>(_:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for DragReorderableLayoutCore(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4);
  return DragReorderableLayoutCoordinator.dragBegan(at:)(*(_QWORD *)(v4
                                                                   + ((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)
                                                                     + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)
                                                                       + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
                                                                     + 7) & 0xFFFFFFFFFFFFF8)));
}

void sub_18740592C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)(type metadata accessor for DragReorderableLayoutCore(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4)- 8);
  v6 = v4 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for DragReorderableLayoutAdaptor();
}

uint64_t sub_187405A78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2 + *(int *)(a1 + 68), v4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(a1 + 84));
  swift_release();
  swift_release();
  swift_release();
  v6 = v2 + *(int *)(v1 + 44);
  v7 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DragReorderableLayoutCore.draggableView<A>(_:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for DragReorderableLayoutCore(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4);
  return DragReorderableLayoutCoordinator.dragEnded()();
}

void objectdestroy_5Tm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)(type metadata accessor for DragReorderableLayoutCore(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4)- 8);
  v6 = v4 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for DragReorderableLayoutAdaptor();
}

uint64_t sub_187405CD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2 + *(int *)(a1 + 68), v4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(a1 + 84));
  swift_release();
  swift_release();
  swift_release();
  v6 = v2 + *(int *)(v1 + 44);
  v7 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in DragReorderableLayoutCore.draggableView<A>(_:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = *(_QWORD *)(type metadata accessor for DragReorderableLayoutCore(0, v5, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return closure #3 in DragReorderableLayoutCore.draggableView<A>(_:offset:)((uint64_t)v4 + v9, *(_QWORD *)((char *)v4 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v5, v6, v7);
}

uint64_t outlined init with copy of _DraggingModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _DraggingModifier(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.dragBegan(at:)()
{
  uint64_t v0;

  return closure #1 in DragReorderableLayoutCoordinator.dragBegan(at:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t outlined init with copy of _DraggingModifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ConditionalDraggingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier, (uint64_t)&type metadata for ConditionalDraggingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>);
  }
}

void *type metadata accessor for ReorderableLayout()
{
  return &unk_1E1AC6408;
}

uint64_t type metadata completion function for DropPlaceholderListModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DropPlaceholderListModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = *(_OWORD *)((char *)v10 + 9);
    v12 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    *(_OWORD *)((char *)v12 + 9) = v11;
  }
  else
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_OWORD *)((char *)v8 + 9);
  *v7 = *v8;
  *(_OWORD *)((char *)v7 + 9) = v9;
  return a1;
}

uint64_t assignWithCopy for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = v10;
  return a1;
}

uint64_t initializeWithTake for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_OWORD *)((char *)v8 + 9);
  *v7 = *v8;
  *(_OWORD *)((char *)v7 + 9) = v9;
  return a1;
}

uint64_t assignWithTake for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for DropPlaceholderListModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v6 = ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 25;
  v7 = (a2 - v5 + 255) >> (8 * v6);
  if (v6 < 4)
    v8 = v7 + 1;
  else
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v9 = 1;
  if (v8 >= 2)
    v10 = v9;
  else
    v10 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1874062AC + 4 * byte_187C2CFFF[v10]))();
}

void storeEnumTagSinglePayload for DropPlaceholderListModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 25;
  if (v7 >= a3)
  {
    v12 = 0u;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_187406424()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18740642C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187406434);
}

void sub_187406450()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_187406458()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_187406460(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x187406468);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t destroy for DragReorderableChildModifier(uint64_t result)
{
  _QWORD *v1;

  if (*(_QWORD *)(result + 112))
  {
    v1 = (_QWORD *)result;
    if (*(_QWORD *)(result + 16))
      swift_release();
    if (v1[4])
      swift_release();
    if (v1[6])
      swift_release();
    if (v1[8])
      swift_release();
    if (v1[13])
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 10));
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for DragReorderableChildModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 112);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v6;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
    v10 = *(_QWORD *)(a2 + 32);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    v12 = *(_QWORD *)(a2 + 48);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v12;
      *(_QWORD *)(a1 + 56) = v13;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    }
    v14 = *(_QWORD *)(a2 + 64);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v14;
      *(_QWORD *)(a1 + 72) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    }
    v16 = (_OWORD *)(a1 + 80);
    v17 = (_OWORD *)(a2 + 80);
    v18 = *(_QWORD *)(a2 + 104);
    if (v18)
    {
      *(_QWORD *)(a1 + 104) = v18;
      (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v16, v17);
      v4 = *(_QWORD *)(a2 + 112);
    }
    else
    {
      v19 = *(_OWORD *)(a2 + 96);
      *v16 = *v17;
      *(_OWORD *)(a1 + 96) = v19;
    }
    v20 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v4;
    *(_QWORD *)(a1 + 120) = v20;
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v8;
    v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t assignWithCopy for DragReorderableChildModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 16);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v9 = (_OWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a2 + 16);
      if (v7)
      {
        if (v8)
        {
          v10 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 16) = v8;
          *(_QWORD *)(a1 + 24) = v10;
          swift_retain();
          swift_release();
          goto LABEL_15;
        }
        swift_release();
      }
      else if (v8)
      {
        v19 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v19;
        swift_retain();
        goto LABEL_15;
      }
      *(_OWORD *)(a1 + 16) = *v9;
LABEL_15:
      v26 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(a1 + 32))
      {
        if (v26)
        {
          v27 = *(_QWORD *)(a2 + 40);
          *(_QWORD *)(a1 + 32) = v26;
          *(_QWORD *)(a1 + 40) = v27;
          swift_retain();
          swift_release();
          goto LABEL_25;
        }
        swift_release();
      }
      else if (v26)
      {
        v28 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 32) = v26;
        *(_QWORD *)(a1 + 40) = v28;
        swift_retain();
        goto LABEL_25;
      }
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_25:
      v31 = *(_QWORD *)(a2 + 48);
      if (*(_QWORD *)(a1 + 48))
      {
        if (v31)
        {
          v32 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 48) = v31;
          *(_QWORD *)(a1 + 56) = v32;
          swift_retain();
          swift_release();
          goto LABEL_35;
        }
        swift_release();
      }
      else if (v31)
      {
        v33 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 48) = v31;
        *(_QWORD *)(a1 + 56) = v33;
        swift_retain();
        goto LABEL_35;
      }
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_35:
      v36 = *(_QWORD *)(a2 + 64);
      if (*(_QWORD *)(a1 + 64))
      {
        if (v36)
        {
          v37 = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a1 + 64) = v36;
          *(_QWORD *)(a1 + 72) = v37;
          swift_retain();
          swift_release();
          goto LABEL_45;
        }
        swift_release();
      }
      else if (v36)
      {
        v38 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 64) = v36;
        *(_QWORD *)(a1 + 72) = v38;
        swift_retain();
        goto LABEL_45;
      }
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
LABEL_45:
      v41 = *(_QWORD *)(a2 + 104);
      if (*(_QWORD *)(a1 + 104))
      {
        if (v41)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
LABEL_55:
          v46 = *(_QWORD *)(a2 + 120);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
          *(_QWORD *)(a1 + 120) = v46;
          swift_retain();
          swift_release();
          goto LABEL_58;
        }
        __swift_destroy_boxed_opaque_existential_1(a1 + 80);
      }
      else if (v41)
      {
        *(_QWORD *)(a1 + 104) = v41;
        (**(void (***)(uint64_t, uint64_t))(v41 - 8))(a1 + 80, a2 + 80);
        goto LABEL_55;
      }
      v45 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v45;
      goto LABEL_55;
    }
    outlined destroy of _DraggingModifier((_QWORD *)(a1 + 8));
    v13 = v5[3];
    v15 = *v5;
    v14 = v5[1];
    *(_OWORD *)(v4 + 32) = v5[2];
    *(_OWORD *)(v4 + 48) = v13;
    *(_OWORD *)v4 = v15;
    *(_OWORD *)(v4 + 16) = v14;
    v17 = v5[5];
    v16 = v5[6];
    v18 = v5[4];
    *(_QWORD *)(v4 + 112) = *((_QWORD *)v5 + 14);
    *(_OWORD *)(v4 + 80) = v17;
    *(_OWORD *)(v4 + 96) = v16;
    *(_OWORD *)(v4 + 64) = v18;
  }
  else if (v6)
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v12;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
    v29 = *(_QWORD *)(a2 + 32);
    if (v29)
    {
      v30 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v29;
      *(_QWORD *)(a1 + 40) = v30;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    v34 = *(_QWORD *)(a2 + 48);
    if (v34)
    {
      v35 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v34;
      *(_QWORD *)(a1 + 56) = v35;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    }
    v39 = *(_QWORD *)(a2 + 64);
    if (v39)
    {
      v40 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v39;
      *(_QWORD *)(a1 + 72) = v40;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    }
    v42 = (_OWORD *)(a1 + 80);
    v43 = (_OWORD *)(a2 + 80);
    v44 = *(_QWORD *)(a2 + 104);
    if (v44)
    {
      *(_QWORD *)(a1 + 104) = v44;
      (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v42, v43);
    }
    else
    {
      v47 = *(_OWORD *)(a2 + 96);
      *v42 = *v43;
      *(_OWORD *)(a1 + 96) = v47;
    }
    v48 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v48;
    swift_retain();
  }
  else
  {
    v20 = *v5;
    v21 = *(_OWORD *)(a2 + 24);
    v22 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v22;
    *(_OWORD *)v4 = v20;
    *(_OWORD *)(a1 + 24) = v21;
    v23 = *(_OWORD *)(a2 + 72);
    v24 = *(_OWORD *)(a2 + 88);
    v25 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 88) = v24;
    *(_OWORD *)(a1 + 104) = v25;
    *(_OWORD *)(a1 + 72) = v23;
  }
LABEL_58:
  v49 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v49;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  return a1;
}

__n128 __swift_memcpy138_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 122) = *(_OWORD *)(a2 + 122);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for DragReorderableChildModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  if (!*(_QWORD *)(a1 + 112))
    goto LABEL_7;
  v6 = *(_QWORD *)(a2 + 112);
  if (!v6)
  {
    outlined destroy of _DraggingModifier((_QWORD *)(a1 + 8));
LABEL_7:
    v11 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v4 + 80) = v11;
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(v5 + 96);
    *(_QWORD *)(v4 + 112) = *(_QWORD *)(v5 + 112);
    v12 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v12;
    v13 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v4 + 48) = v13;
    goto LABEL_36;
  }
  v8 = (_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  if (v9)
  {
    if (v7)
    {
      v10 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v10;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v7)
  {
    v14 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v14;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 16) = *v8;
LABEL_12:
  v15 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v15)
    {
      v16 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v16;
      swift_release();
      goto LABEL_19;
    }
    swift_release();
  }
  else if (v15)
  {
    v17 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v17;
    goto LABEL_19;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_19:
  v18 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v18)
    {
      v19 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v18;
      *(_QWORD *)(a1 + 56) = v19;
      swift_release();
      goto LABEL_26;
    }
    swift_release();
  }
  else if (v18)
  {
    v20 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v18;
    *(_QWORD *)(a1 + 56) = v20;
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_26:
  v21 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 64))
  {
    if (v21)
    {
      v23 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v21;
      *(_QWORD *)(a1 + 72) = v23;
      goto LABEL_33;
    }
LABEL_32:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    goto LABEL_33;
  }
  if (!v21)
  {
    swift_release();
    goto LABEL_32;
  }
  v22 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 72) = v22;
  swift_release();
LABEL_33:
  if (*(_QWORD *)(a1 + 104))
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  v24 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v24;
  v25 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = v25;
  swift_release();
LABEL_36:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragReorderableChildModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 138))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DragReorderableChildModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 136) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 138) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 138) = 0;
    if (a2)
      *(_QWORD *)(result + 112) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DragReorderableChildModifier()
{
  return &type metadata for DragReorderableChildModifier;
}

void sub_187406D0C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t)&type metadata for MappedViewElement.Placeholder, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>();
  type metadata accessor for MappedViews();
}

uint64_t sub_187406DDC()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[18];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v0 - 112) = AssociatedTypeWitness;
  *(_QWORD *)(v0 - 104) = v3;
  v4 = MEMORY[0x1E0DEB428];
  *(_QWORD *)(v0 - 96) = AssociatedConformanceWitness;
  *(_QWORD *)(v0 - 88) = v4;
  v5 = type metadata accessor for IDView();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for Optional();
  v28[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73F0], v5);
  v28[1] = &protocol witness table for HiddenModifierAllowingViewResponders;
  v9 = MEMORY[0x1E0CE2E70];
  v27[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v28);
  v27[1] = &protocol witness table for DragReorderableChildModifier;
  v26 = MEMORY[0x18D75FFDC](v9, v7, v27);
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v8, &v26);
  type metadata accessor for DropPlaceholderListModifier(255, v8, v10, v11);
  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v14 = type metadata accessor for _VariadicView.Tree();
  v15 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
  v17 = type metadata accessor for ModifiedContent();
  v18 = type metadata accessor for ModifiedContent();
  v25[0] = &protocol witness table for MappedViews<A, B>;
  v25[1] = &protocol witness table for DropPlaceholderListModifier<A>;
  v24[0] = v13;
  v24[1] = MEMORY[0x18D75FFDC](v9, v12, v25);
  v23[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v14, v24);
  v23[1] = MEMORY[0x1E0CE2BC0];
  v22[0] = MEMORY[0x18D75FFDC](v9, v15, v23);
  v22[1] = &protocol witness table for ReorderableLayout;
  v21[0] = MEMORY[0x18D75FFDC](v9, v16, v22);
  v21[1] = &protocol witness table for _ContentShapeKindModifier<A>;
  v20[0] = MEMORY[0x18D75FFDC](v9, v17, v21);
  v20[1] = &protocol witness table for DropModifier;
  return MEMORY[0x18D75FFDC](v9, v18, v20);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for _DraggingModifier);
    v3[1] = lazy protocol witness table accessor for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ConditionalDraggingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier, (uint64_t)&type metadata for ConditionalDraggingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ConditionalDraggingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier, (uint64_t)&type metadata for ConditionalDraggingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in DragReorderableChildModifier()
{
  return &protocol witness table for DragReorderableChildModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DropPlaceholderListModifier<A>()
{
  return &protocol witness table for DropPlaceholderListModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in ReorderableLayout()
{
  return &protocol witness table for ReorderableLayout;
}

unint64_t lazy protocol witness table accessor for type ReorderableLayout and conformance ReorderableLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout;
  if (!lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReorderableLayout, &unk_1E1AC6408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout;
  if (!lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReorderableLayout, &unk_1E1AC6408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout;
  if (!lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReorderableLayout, &unk_1E1AC6408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout;
  if (!lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReorderableLayout, &unk_1E1AC6408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableChildModifier.MakeDragSourceProxy, &unk_1E1AF6788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableChildModifier.ChildCoordinateSpace, &unk_1E1AF67D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableChildModifier.ChildCoordinateSpace, &unk_1E1AF67D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableChildModifier.MakeDragSource, &unk_1E1AF67B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragReorderableChildModifier.ResponderFilter, &unk_1E1AF6858);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter);
  }
  return result;
}

uint64_t outlined init with copy of DragReorderableChildModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DragReorderableChildModifier(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static DragReorderableLayoutView._makeView(view:inputs:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD))type metadata accessor for DropPlaceholderListModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #2 in static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for DropPlaceholderListModifier.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPlaceholderListModifier.MakeList);
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewList, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t initializeBufferWithCopyOfBuffer for DragReorderableChildModifier.ResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DragReorderableChildModifier.ResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DragReorderableChildModifier.ResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for DragReorderableChildModifier.ResponderFilter()
{
  return &unk_1E1AF6858;
}

void *type metadata accessor for DragReorderableChildModifier.MakeDragSource()
{
  return &unk_1E1AF67B0;
}

void *type metadata accessor for DragReorderableChildModifier.ChildCoordinateSpace()
{
  return &unk_1E1AF67D8;
}

void *type metadata accessor for DragReorderableChildModifier.MakeDragSourceProxy()
{
  return &unk_1E1AF6788;
}

void base witness table accessor for _AttributeBody in DropPlaceholderListModifier<A>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPlaceholderListModifier.DropPlaceholderList);
}

uint64_t sub_187407698()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

uint64_t destroy for DropPlaceholderListModifier.DropPlaceholderList(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

_OWORD *initializeWithCopy for DropPlaceholderListModifier.DropPlaceholderList(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  a1[5] = a2[5];
  *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)((char *)a2 + 89);
  return a1;
}

uint64_t assignWithCopy for DropPlaceholderListModifier.DropPlaceholderList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  v4 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  v5 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v5;
  return a1;
}

uint64_t assignWithTake for DropPlaceholderListModifier.DropPlaceholderList(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t partial apply for closure #3 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #3 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)(a1, *(_QWORD *)(v2 + 48), *(_QWORD **)(v2 + 56), *(_QWORD *)(v2 + 64), a2);
}

uint64_t partial apply for closure #1 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD **)(v2 + 64), *(_QWORD *)(v2 + 72), a2);
}

uint64_t type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange);
}

uint64_t partial apply for closure #1 in DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(a1, a2, a3, a4, *(_BYTE **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_BYTE *)(v4 + 48), *(uint64_t **)(v4 + 56)) & 1;
}

void type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, MEMORY[0x1E0CE1C98], MEMORY[0x1E0DEC758]);
    lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>, MEMORY[0x1E0DEC770]);
    lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>, MEMORY[0x1E0DEC780]);
    v0 = type metadata accessor for _ViewList_ID._Views();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>);
  }
}

uint64_t lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, MEMORY[0x1E0CE1C98], MEMORY[0x1E0DEC758]);
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 1;
  }
  return result;
}

uint64_t DefaultGroupBoxStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for GroupBoxStyle.makeBody(configuration:) in conformance DefaultGroupBoxStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t EnvironmentValues.disableGroupBoxPadding.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisableGroupBoxPaddingKey>, (uint64_t)&unk_1E1AE9230, (uint64_t)&protocol witness table for DisableGroupBoxPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisableGroupBoxPaddingKey>, (uint64_t)&unk_1E1AE9230, (uint64_t)&protocol witness table for DisableGroupBoxPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.disableGroupBoxPadding.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisableGroupBoxPaddingKey>, (uint64_t)&unk_1E1AE9230, (uint64_t)&protocol witness table for DisableGroupBoxPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.disableGroupBoxPadding(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_187407D2C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.disableGroupBoxPadding.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187407D68()
{
  return EnvironmentValues.disableGroupBoxPadding.setter();
}

uint64_t View.sectionBackground(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t associated type witness table accessor for GroupBoxStyle.Body : View in DefaultGroupBoxStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultGroupBoxStyle()
{
  return &type metadata for DefaultGroupBoxStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>> and conformance GroupBox<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, (uint64_t)&protocol conformance descriptor for GroupBox<A, B>);
    v3[1] = &protocol witness table for GroupBoxStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>>)
  {
    type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>();
    type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>(255, &lazy cache variable for type metadata for GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle, (uint64_t)&type metadata for PhoneIdiomGroupBoxStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>>);
  }
}

uint64_t type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>;
  if (!lazy cache variable for type metadata for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>)
  {
    type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for GroupBox();
  }
  return result;
}

void type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>)
  {
    type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>(255, (unint64_t *)&lazy cache variable for type metadata for GroupBoxStyleModifier<DefaultGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle, (uint64_t)&type metadata for DefaultGroupBoxStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultGroupBoxStyle, &type metadata for DefaultGroupBoxStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>();
    v2[0] = &protocol witness table for GroupBoxStyleConfiguration.Content;
    v2[1] = &protocol witness table for GroupBoxStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for GroupBoxStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PhoneIdiomGroupBoxStyle, &type metadata for PhoneIdiomGroupBoxStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle);
  }
  return result;
}

uint64_t sub_187408128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1874081A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormBorderlessSectionTraitKey>, (uint64_t)&type metadata for FormBorderlessSectionTraitKey, (uint64_t)&protocol witness table for FormBorderlessSectionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormBorderlessSectionTraitKey>, (uint64_t)&type metadata for FormBorderlessSectionTraitKey, (uint64_t)&protocol witness table for FormBorderlessSectionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormBorderlessSectionTraitKey()
{
  return &type metadata for FormBorderlessSectionTraitKey;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisableGroupBoxPaddingKey>, (uint64_t)&unk_1E1AE9230, (uint64_t)&protocol witness table for DisableGroupBoxPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for DisableGroupBoxPaddingKey()
{
  return &unk_1E1AE9230;
}

void one-time initialization function for appRootViewWrappers()
{
  appRootViewWrappers._rawValue = (void *)MEMORY[0x1E0DEE9D8];
}

uint64_t registerAppRootModifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *rawValue;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for appRootViewWrappers != -1)
    swift_once();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, v8, a2);
  swift_beginAccess();
  rawValue = appRootViewWrappers._rawValue;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  appRootViewWrappers._rawValue = rawValue;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
    appRootViewWrappers._rawValue = rawValue;
  }
  v14 = rawValue[2];
  v13 = rawValue[3];
  if (v14 >= v13 >> 1)
  {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, rawValue);
    appRootViewWrappers._rawValue = rawValue;
  }
  rawValue[2] = v14 + 1;
  v15 = &rawValue[2 * v14];
  v15[4] = partial apply for closure #1 in registerAppRootModifier<A>(_:);
  v15[5] = v10;
  return swift_endAccess();
}

uint64_t closure #1 in registerAppRootModifier<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[3];

  v10 = MEMORY[0x1E0CE7518];
  v11 = type metadata accessor for ModifiedContent();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v16[2] = *a1;
  v14 = MEMORY[0x1E0CE7508];
  MEMORY[0x18D75B4AC](a2, v10, a3, MEMORY[0x1E0CE7508], v13);
  v16[0] = v14;
  v16[1] = a4;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v16);
  result = AnyView.init<A>(_:)();
  *a5 = result;
  return result;
}

uint64_t sub_1874085A0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in registerAppRootModifier<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return closure #1 in registerAppRootModifier<A>(_:)(a1, v2 + ((v4 + 32) & ~v4), v3, *(_QWORD *)(v2 + 24), a2);
}

uint64_t dispatch thunk of App.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of App.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

SwiftUI::FrameResizePosition_optional __swiftcall FrameResizePosition.init(rawValue:)(Swift::Int8 rawValue)
{
  SwiftUI::FrameResizePosition_optional result;

  result.value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static FrameResizePosition.allCases.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void FrameResizePosition.rawValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance FrameResizePosition()
{
  _diagnoseUnavailableCodeReached()();
}

void protocol witness for Hashable.hashValue.getter in conformance FrameResizePosition()
{
  Hasher.init(_seed:)();
  _diagnoseUnavailableCodeReached()();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance FrameResizePosition()
{
  Hasher.init(_seed:)();
  _diagnoseUnavailableCodeReached()();
}

void FrameResizeDirection.Set.rawValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

void FrameResizeDirection.Set.init(rawValue:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void FrameResizeDirection.Set.init(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static FrameResizeDirection.Set.all.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

SwiftUI::FrameResizeDirection_optional __swiftcall FrameResizeDirection.init(rawValue:)(Swift::Int8 rawValue)
{
  SwiftUI::FrameResizeDirection_optional result;

  result.value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type FrameResizePosition and conformance FrameResizePosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FrameResizePosition and conformance FrameResizePosition;
  if (!lazy protocol witness table cache variable for type FrameResizePosition and conformance FrameResizePosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FrameResizePosition, &type metadata for FrameResizePosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizePosition and conformance FrameResizePosition);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in FrameResizePosition()
{
  return lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](&lazy protocol witness table cache variable for type [FrameResizePosition] and conformance [A], &lazy cache variable for type metadata for [FrameResizePosition]);
}

unint64_t lazy protocol witness table accessor for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FrameResizeDirection.Set, &type metadata for FrameResizeDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FrameResizeDirection.Set, &type metadata for FrameResizeDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FrameResizeDirection.Set, &type metadata for FrameResizeDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FrameResizeDirection.Set, &type metadata for FrameResizeDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FrameResizeDirection and conformance FrameResizeDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FrameResizeDirection and conformance FrameResizeDirection;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection and conformance FrameResizeDirection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FrameResizeDirection, &type metadata for FrameResizeDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection and conformance FrameResizeDirection);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in FrameResizeDirection()
{
  return lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](&lazy protocol witness table cache variable for type [FrameResizeDirection] and conformance [A], &lazy cache variable for type metadata for [FrameResizeDirection]);
}

uint64_t lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for [FrameResizePosition](255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FrameResizePosition(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FrameResizePosition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_187408A14 + 4 * byte_187C2E025[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_187408A48 + 4 * asc_187C2E020[v4]))();
}

uint64_t sub_187408A48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187408A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187408A58);
  return result;
}

uint64_t sub_187408A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187408A6CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_187408A70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187408A78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FrameResizePosition()
{
  return &type metadata for FrameResizePosition;
}

uint64_t storeEnumTagSinglePayload for FrameResizeDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187408AE0 + 4 * byte_187C2E02F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187408B14 + 4 * byte_187C2E02A[v4]))();
}

uint64_t sub_187408B14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187408B1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187408B24);
  return result;
}

uint64_t sub_187408B30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187408B38);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187408B3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187408B44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FrameResizeDirection()
{
  return &type metadata for FrameResizeDirection;
}

ValueMetadata *type metadata accessor for FrameResizeDirection.Set()
{
  return &type metadata for FrameResizeDirection.Set;
}

void static FrameResizeDirection.Set.outward.getter()
{
  static FrameResizeDirection.Set.all.getter();
}

void static FrameResizeDirection.Set.inward.getter()
{
  static FrameResizeDirection.Set.all.getter();
}

void static FrameResizeDirection.allCases.getter()
{
  static FrameResizePosition.allCases.getter();
}

void FrameResizeDirection.rawValue.getter()
{
  FrameResizePosition.rawValue.getter();
}

uint64_t View.transformPlatformItemList<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v9 = type metadata accessor for PlatformItemListTransformModifier(0, a5, a7, a4);
  swift_retain();
  MEMORY[0x18D75B4AC](v11, a4, v9, a6);
  return swift_release();
}

void PlatformItemListReader.init(flags:content:source:)(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  swift_retain();
  static Alignment.center.getter();
  type metadata accessor for PlatformItemListReader();
}

uint64_t sub_187408CA4()
{
  ZStack.init(alignment:content:)();
  return swift_release();
}

__n128 PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v26[192];

  outlined init with take of Image.Resolved?(a2, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v23 = a3[1];
  v24 = *a3;
  v13 = *((_QWORD *)a3 + 6);
  v12 = *((_QWORD *)a3 + 7);
  v14 = *((_BYTE *)a3 + 64);
  v21 = *a4;
  v22 = a3[2];
  v15 = a4[1].n128_u64[0];
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_BYTE *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 40) = -1;
  *(_BYTE *)(a7 + 56) = 1;
  *(_OWORD *)(a7 + 248) = 0u;
  *(_OWORD *)(a7 + 296) = 0u;
  *(_OWORD *)(a7 + 312) = 0u;
  *(_OWORD *)(a7 + 264) = 0u;
  *(_OWORD *)(a7 + 280) = 0u;
  *(_QWORD *)(a7 + 328) = 0x3FFFFFFFCLL;
  *(_OWORD *)(a7 + 336) = 0u;
  *(_OWORD *)(a7 + 352) = 0u;
  *(_OWORD *)(a7 + 368) = 0u;
  *(_OWORD *)(a7 + 384) = 0u;
  *(_QWORD *)(a7 + 480) = 0;
  *(_QWORD *)(a7 + 488) = 0;
  *(_QWORD *)(a7 + 472) = 0;
  *(_BYTE *)(a7 + 496) = 0;
  *(_QWORD *)(a7 + 504) = 0;
  *(_QWORD *)(a7 + 512) = 0;
  *(_WORD *)(a7 + 520) = 256;
  *(_QWORD *)(a7 + 552) = 1;
  *(_OWORD *)(a7 + 560) = 0u;
  *(_OWORD *)(a7 + 576) = 0u;
  *(_OWORD *)(a7 + 592) = 0u;
  *(_OWORD *)(a7 + 608) = 0u;
  *(_QWORD *)(a7 + 624) = 0;
  *(_WORD *)(a7 + 632) = 1283;
  *(_BYTE *)(a7 + 634) = 3;
  v16 = (int *)type metadata accessor for PlatformItemList.Item();
  v17 = a7 + v16[28];
  v18 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_BYTE *)(a7 + v16[29]) = 0;
  *(_BYTE *)(a7 + v16[30]) = 0;
  *(_BYTE *)(a7 + v16[31]) = 2;
  *(_BYTE *)(a7 + v16[32]) = 0;
  v19 = v16[33];
  *(_QWORD *)a7 = a1;
  outlined init with take of Image.Resolved?((uint64_t)v26, a7 + 64, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  *(_OWORD *)(a7 + 400) = v24;
  *(_OWORD *)(a7 + 416) = v23;
  *(_OWORD *)(a7 + 432) = v22;
  *(_QWORD *)(a7 + 448) = v13;
  *(_QWORD *)(a7 + 456) = v12;
  *(_BYTE *)(a7 + 464) = v14;
  result = v21;
  *(__n128 *)(a7 + 528) = v21;
  *(_QWORD *)(a7 + 544) = v15;
  *(_QWORD *)(a7 + v19) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t PlatformItemList.Item.image.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  id v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;
  char v22;
  __int16 v23;
  _BYTE v24[184];
  id v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  __int16 v36;
  uint64_t v37;

  v1 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0CE7280];
  outlined init with take of Image.Resolved?(v0 + 64, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  outlined init with take of Image.Resolved?((uint64_t)v24, (uint64_t)&v25, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v5);
  v6 = 0;
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v25) != 1)
  {
    if (v37)
    {
      outlined retain of Image.Resolved?((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      objc_opt_self();
      v6 = swift_dynamicCastObjCClassUnconditional();
      outlined init with copy of PlatformItemList.Item(v0, (uint64_t)v4);
      if (v6)
      {
        outlined retain of Image.Resolved?((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
LABEL_7:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        return v6;
      }
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v24, (uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
      outlined retain of Image.Resolved((uint64_t)&v12);
      outlined init with copy of PlatformItemList.Item(v0, (uint64_t)v4);
    }
    v7 = v25;
    v8 = v26;
    v12 = v25;
    v13 = v26;
    v14 = v27;
    v15 = v28;
    v16 = v29;
    v17 = v30;
    v18 = v31;
    v19 = v32;
    v20 = v33;
    v21 = v34;
    v22 = v35;
    v23 = v36;
    v9 = *((_QWORD *)v4 + 6);
    outlined copy of GraphicsImage.Contents?(v25, v26);
    v6 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v9);
    outlined retain of Image.Resolved?((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v7, v8);
    goto LABEL_7;
  }
  return v6;
}

uint64_t View.mergePlatformItems()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, v3);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, a1);
}

uint64_t _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t result;

  v6 = a2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  result = PropertyList.subscript.setter();
  if (v6 != 2)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if ((v6 & 1) != 0)
      PropertyList.subscript.getter();
    return PropertyList.subscript.setter();
  }
  return result;
}

uint64_t View.transformPlatformItemSelectionBehavior(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_retain();
  View.transformPlatformItemList<A>(_:_:)(v9, (uint64_t)partial apply for closure #1 in View.transformPlatformItemSelectionBehavior(_:), v8, a3, (uint64_t)&type metadata for SelectionPlatformItemListFlags, a4, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags);
  return swift_release();
}

uint64_t View.platformItemSystemType(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD v8[13];

  outlined init with take of Image.Resolved?(a1, (uint64_t)v8, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  v5 = swift_allocObject();
  outlined init with take of Image.Resolved?((uint64_t)v8, v5 + 16, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  v6 = outlined retain of PlatformItemList.Item.SystemItem?(v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PlatformItemList.Item.SystemItem?);
  View.transformPlatformItemList<A>(_:_:)((uint64_t)v6, (uint64_t)partial apply for closure #1 in View.platformItemSystemType(_:), v5, a2, (uint64_t)&type metadata for LayoutPlatformItemListFlags, a3, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags);
  return swift_release();
}

uint64_t specialized closure #1 in PlatformItemList.containerSelectionBehavior.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = swift_bridgeObjectRetain() + 40;
    do
    {
      v3 = *(void (**)(uint64_t))(v2 - 8);
      v4 = swift_retain();
      v3(v4);
      swift_release();
      v2 += 16;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized closure #3 in PlatformItemList.containerSelectionBehavior.getter(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t *__return_ptr, char *);
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 1;
  swift_bridgeObjectRetain();
  v5 = a2 + 40;
  LOBYTE(v6) = 1;
  v7 = a1 & 1;
  do
  {
    if ((v6 & 1) != 0)
    {
      v8 = *(void (**)(uint64_t *__return_ptr, char *))(v5 - 8);
      BYTE1(v10) = v7;
      swift_retain();
      v8(&v10, (char *)&v10 + 1);
      swift_release();
      v6 = v10;
    }
    else
    {
      v6 = 0;
    }
    v5 += 16;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PlatformItemList.Key@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static PlatformItemList.Key.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PlatformItemList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

__n128 PlatformItemList.Item.init(systemItem:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[184];

  v12 = a1[1];
  v13 = *a1;
  v10 = a1[3];
  v11 = a1[2];
  v8 = (__n128)a1[5];
  v9 = a1[4];
  v3 = *((_QWORD *)a1 + 12);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 40) = xmmword_187C2E400;
  *(_BYTE *)(a2 + 56) = 1;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v14);
  outlined init with take of Image.Resolved?((uint64_t)v14, a2 + 64, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 400) = xmmword_187BF9840;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_BYTE *)(a2 + 464) = 0;
  *(_QWORD *)(a2 + 472) = 0;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_BYTE *)(a2 + 496) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_WORD *)(a2 + 520) = 256;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_QWORD *)(a2 + 544) = 0;
  *(_QWORD *)(a2 + 552) = 1;
  *(_QWORD *)(a2 + 624) = 0;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_WORD *)(a2 + 632) = 1283;
  *(_BYTE *)(a2 + 634) = 3;
  v4 = (int *)type metadata accessor for PlatformItemList.Item();
  v5 = a2 + v4[28];
  v6 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_BYTE *)(a2 + v4[29]) = 0;
  *(_BYTE *)(a2 + v4[30]) = 0;
  *(_BYTE *)(a2 + v4[31]) = 2;
  *(_BYTE *)(a2 + v4[32]) = 0;
  *(_QWORD *)(a2 + v4[33]) = 0;
  *(_OWORD *)(a2 + 296) = v13;
  *(_OWORD *)(a2 + 312) = v12;
  *(_OWORD *)(a2 + 328) = v11;
  *(_OWORD *)(a2 + 344) = v10;
  result = v8;
  *(_OWORD *)(a2 + 360) = v9;
  *(__n128 *)(a2 + 376) = v8;
  *(_QWORD *)(a2 + 392) = v3;
  return result;
}

void UIItemHostingView.__allocating_init(rootView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized _UIHostingView.init(rootView:)();
}

uint64_t sub_1874098A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 2448) - 8) + 8))(v2);
  return a1;
}

id UIItemHostingView.init(coder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  id v7;
  objc_super v9;

  v6 = (objc_class *)type metadata accessor for UIItemHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x990), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x998), a4);
  v9.receiver = v4;
  v9.super_class = v6;
  v7 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);

  return v7;
}

id @objc UIItemHostingView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  return UIItemHostingView.init(coder:)(v3, v4, v5, v6);
}

id UIItemHostingView.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for UIItemHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x990), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x998), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t vtable thunk for _UIHostingView.modifyViewInputs(_:) dispatching to UIItemHostingView.modifyViewInputs(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9A0))();
}

uint64_t closure #1 in View.transformPlatformItemSelectionBehavior(_:)(uint64_t result, void (*a2)(__int16 *))
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  __int16 v32;
  char v33;
  char v34;
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[24];
  char v39;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    v30 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
      v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    for (i = 0; i != v3; ++i)
    {
      if (i >= v2[2])
      {
        __break(1u);
        goto LABEL_17;
      }
      v5 = type metadata accessor for PlatformItemList.Item();
      v6 = (unint64_t)v2
         + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * i;
      result = *(_QWORD *)(v6 + 408);
      if (result != 1)
      {
        v7 = *(_BYTE *)(v6 + 464);
        v8 = *(_QWORD *)(v6 + 440);
        v9 = *(_QWORD *)(v6 + 432);
        v10 = *(_QWORD *)(v6 + 424);
        v11 = *(_QWORD *)(v6 + 416);
        v12 = *(_QWORD *)(v6 + 400);
        v32 = v12 & 0x101;
        v33 = BYTE2(v12) & 1;
        v34 = BYTE3(v12) & 1;
        v35 = BYTE4(v12);
        *(_QWORD *)&v36 = result;
        *((_QWORD *)&v36 + 1) = v11;
        *(_QWORD *)&v37 = v10;
        *((_QWORD *)&v37 + 1) = v9;
        *(_QWORD *)v38 = v8;
        *(_OWORD *)&v38[8] = *(_OWORD *)(v6 + 448);
        v39 = v7;
        outlined copy of AppIntentExecutor?(result);
        outlined copy of AppIntentExecutor?(v10);
        outlined copy of AppIntentExecutor?(v8);
        a2(&v32);
        v13 = *(_QWORD *)&v38[16];
        v14 = v39;
        v15 = 256;
        if (!HIBYTE(v32))
          v15 = 0;
        v16 = v15 | v32;
        v17 = 0x10000;
        if (!v33)
          v17 = 0;
        v18 = 0x1000000;
        if (!v34)
          v18 = 0;
        v19 = v16 | v17 | v18 | ((unint64_t)v35 << 32);
        v20 = *(_QWORD *)(v6 + 400);
        v21 = *(_QWORD *)(v6 + 408);
        v22 = *(_QWORD *)(v6 + 416);
        v23 = *(_QWORD *)(v6 + 424);
        v24 = *(_QWORD *)(v6 + 432);
        v25 = *(_QWORD *)(v6 + 440);
        v26 = *(_QWORD *)(v6 + 448);
        v27 = *(_QWORD *)(v6 + 456);
        v28 = *(_BYTE *)(v6 + 464);
        *(_QWORD *)(v6 + 400) = v19;
        *(_OWORD *)(v6 + 408) = v36;
        *(_OWORD *)(v6 + 424) = v37;
        *(_OWORD *)(v6 + 440) = *(_OWORD *)v38;
        *(_QWORD *)(v6 + 456) = v13;
        *(_BYTE *)(v6 + 464) = v14;
        LOBYTE(v29) = v28;
        result = outlined consume of PlatformItemList.Item.SelectionBehavior?(v20, v21, v22, v23, v24, v25, v26, v27, v29, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      }
    }
    *v30 = v2;
  }
  return result;
}

void closure #1 in View.forcePlatformItem()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __int128 v17[4];
  char v18;
  _BYTE v19[184];
  _BYTE v20[184];

  v2 = type metadata accessor for PlatformItemList.Item();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v14 - v9;
  v11 = *(_QWORD **)a1;
  if (!*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v20);
    outlined init with take of Image.Resolved?((uint64_t)v20, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
    v17[0] = xmmword_187BF9840;
    memset(&v17[1], 0, 48);
    v18 = 0;
    v15 = 0uLL;
    v16 = 0;
    PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v19, v17, &v15, 0, 0, (uint64_t)v10);
    outlined init with copy of PlatformItemList.Item((uint64_t)v10, (uint64_t)v6);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v13 = v11[2];
    v12 = v11[3];
    if (v13 >= v12 >> 1)
      v11 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v11);
    v11[2] = v13 + 1;
    outlined init with take of PlatformItemList.Item((uint64_t)v6, (uint64_t)v11+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13);
    *(_QWORD *)a1 = v11;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
}

uint64_t closure #1 in View.platformItemToggleState(_:)(uint64_t result, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t i;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    v5 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    for (i = 0; i != v3; ++i)
    {
      if (i >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      result = type metadata accessor for PlatformItemList.Item();
      *((_BYTE *)v2
      + ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * i
      + 634) = a2;
    }
    *v5 = v2;
  }
  return result;
}

uint64_t closure #1 in View.platformItemButtonRole(_:)(uint64_t result, unsigned __int16 a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  char v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    v4 = (_QWORD *)result;
    v5 = a2;
    v6 = a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v7 = 0;
    v5 = (v5 >> 8) & 1;
    do
    {
      if (v7 >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      result = type metadata accessor for PlatformItemList.Item();
      v8 = (unint64_t)v2
         + ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v7;
      *(_BYTE *)(v8 + 520) = v6;
      *(_BYTE *)(v8 + 521) = v5;
      ++v7;
    }
    while (v3 != v7);
    *v4 = v2;
  }
  return result;
}

int *closure #1 in View.platformItemTint(_:)(int *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v5;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_11:
      v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    for (i = 0; i != v3; ++i)
    {
      if (i >= v2[2])
      {
        __break(1u);
        goto LABEL_11;
      }
      result = (int *)type metadata accessor for PlatformItemList.Item();
      v7 = (unint64_t)v2
         + ((*(unsigned __int8 *)(*((_QWORD *)result - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)result - 1) + 80))
         + *(_QWORD *)(*((_QWORD *)result - 1) + 72) * i;
      v8 = result[33];
      if (!*(_QWORD *)(v7 + v8))
      {
        *(_QWORD *)(v7 + v8) = a2;
        result = (int *)swift_retain();
      }
    }
    *(_QWORD *)v5 = v2;
  }
  return result;
}

uint64_t View.platformItemSelector(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.platformItemSelector(_:)(a1, a2, a3, (uint64_t)&unk_1E1B30F18, (uint64_t)partial apply for closure #1 in View.platformItemSelector(_:), (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags);
}

uint64_t closure #1 in View.platformItemSelector(_:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;

  if (a2)
  {
    v2 = (_QWORD *)result;
    v3 = *(_QWORD **)result;
    v4 = *(_QWORD *)(*(_QWORD *)result + 16);
    if (v4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_12:
        v3 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      for (i = 0; i != v4; ++i)
      {
        if (i >= v3[2])
        {
          __break(1u);
          goto LABEL_12;
        }
        result = type metadata accessor for PlatformItemList.Item();
        v7 = (unint64_t)v3
           + ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
           + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * i;
        if (*(_QWORD *)(v7 + 408) != 1)
          *(_QWORD *)(v7 + 456) = a2;
      }
      *v2 = v3;
    }
  }
  return result;
}

int *closure #1 in View.platformItemKeepsMenuPresented(_:)(int *result, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v5;
  unint64_t v6;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v6 = 0;
    a2 &= 1u;
    do
    {
      if (v6 >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      result = (int *)type metadata accessor for PlatformItemList.Item();
      *((_BYTE *)v2
      + ((*(unsigned __int8 *)(*((_QWORD *)result - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)result - 1) + 80))
      + *(_QWORD *)(*((_QWORD *)result - 1) + 72) * v6++
      + result[30]) = a2;
    }
    while (v3 != v6);
    *(_QWORD *)v5 = v2;
  }
  return result;
}

uint64_t closure #1 in View.platformItemIdentifier(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD **)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v4)
  {
    v7 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v3 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    for (i = 0; i != v4; ++i)
    {
      if (i >= v3[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      v9 = type metadata accessor for PlatformItemList.Item();
      v10 = (unint64_t)v3
          + ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * i;
      *(_QWORD *)(v10 + 16) = a2;
      *(_QWORD *)(v10 + 24) = a3;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
    }
    *v7 = v3;
  }
  return result;
}

void View.platformItemLabel<A, B>(_:flags:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[4];

  v29[1] = a6;
  v29[2] = a8;
  v29[3] = a7;
  v14 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v28 + 16))(v27, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, a1, a4);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 16))(v16, v29[0], a3);
  PlatformItemLabelView.init(flags:label:content:)((uint64_t)v27, a5, a9);
}

void PlatformItemLabelView.init(flags:label:content:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for PlatformItemLabelView();
}

uint64_t sub_18740A3BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 68), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 72), v3, v1);
}

uint64_t closure #1 in View.platformItemSystemType(_:)(uint64_t a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[7];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[4];
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  outlined init with take of Image.Resolved?((uint64_t)a2, (uint64_t)v48, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  v3 = (void *)v48[0];
  v4 = v48[1];
  v40 = v48[3];
  v42 = v48[2];
  v36 = v48[5];
  v38 = v48[4];
  v5 = v50;
  v32 = v49;
  v34 = v48[6];
  v6 = v51;
  v7 = v52;
  v8 = v53;
  v9 = v54;
  result = outlined init with take of Image.Resolved?((uint64_t)a2, (uint64_t)v55, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  v25 = v56;
  if (v56 >> 2 != 0xFFFFFFFF)
  {
    v11 = *(_QWORD **)a1;
    v24 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v24)
    {
      v21 = v55[1];
      v22 = (void *)v55[0];
      v19 = v55[3];
      v20 = v55[2];
      v17 = v58;
      v18 = v57;
      v16 = v59;
      v46 = v61;
      v47 = v60;
      v44 = v63;
      v45 = v62;
      v43 = v64;
      outlined copy of PlatformItemList.Item.SystemItem(v3, v4, v42, v40, v38, v36, v34, v32, v5, v6, v7, v8, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_10:
        v11 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      v12 = 0;
      v23 = v11;
      do
      {
        if (v12 >= v11[2])
        {
          __break(1u);
          goto LABEL_10;
        }
        v13 = type metadata accessor for PlatformItemList.Item();
        v14 = (unint64_t)v11
            + ((*(unsigned __int8 *)(*(_QWORD *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v13 - 8) + 80))
            + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v12;
        v39 = *(_QWORD *)(v14 + 304);
        v41 = *(void **)(v14 + 296);
        v35 = *(_QWORD *)(v14 + 320);
        v37 = *(_QWORD *)(v14 + 312);
        v31 = *(_QWORD *)(v14 + 336);
        v33 = *(_QWORD *)(v14 + 328);
        v29 = *(_QWORD *)(v14 + 352);
        v30 = *(_QWORD *)(v14 + 344);
        v27 = *(_OWORD *)(v14 + 376);
        v28 = *(_OWORD *)(v14 + 360);
        v26 = *(_QWORD *)(v14 + 392);
        outlined copy of PlatformItemList.Item.SystemItem(v22, v21, v20, v19, v25, v18, v17, v16, v47, v46, v45, v44, v43);
        outlined consume of PlatformItemList.Item.SystemItem?(v41, v39, v37, v35, v33, v31, v30, v29, v28, *((uint64_t *)&v28 + 1), v27, SBYTE8(v27), v26);
        *(_QWORD *)(v14 + 296) = v22;
        *(_QWORD *)(v14 + 304) = v21;
        *(_QWORD *)(v14 + 312) = v20;
        *(_QWORD *)(v14 + 320) = v19;
        *(_QWORD *)(v14 + 328) = v25;
        *(_QWORD *)(v14 + 336) = v18;
        *(_QWORD *)(v14 + 344) = v17;
        *(_QWORD *)(v14 + 352) = v16;
        *(_QWORD *)(v14 + 360) = v47;
        *(_QWORD *)(v14 + 368) = v46;
        *(_QWORD *)(v14 + 376) = v45;
        ++v12;
        *(_QWORD *)(v14 + 384) = v44;
        *(_QWORD *)(v14 + 392) = v43;
        v11 = v23;
      }
      while (v24 != v12);
      result = (uint64_t)outlined retain of PlatformItemList.Item.SystemItem?(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PlatformItemList.Item.SystemItem?);
      *(_QWORD *)a1 = v23;
    }
  }
  return result;
}

uint64_t View.platformItemHierarchicalLevel(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.platformItemSelector(_:)(a1, a2, a3, (uint64_t)&unk_1E1B31030, (uint64_t)partial apply for closure #1 in View.platformItemHierarchicalLevel(_:), (uint64_t)&type metadata for LabelPlatformItemListFlags, (uint64_t)&protocol witness table for LabelPlatformItemListFlags);
}

uint64_t View.platformItemSelector(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  View.transformPlatformItemList<A>(_:_:)(v13, a5, v13, a2, a6, a3, a7);
  return swift_release();
}

uint64_t closure #1 in View.platformItemHierarchicalLevel(_:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t i;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    v5 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    for (i = 0; i != v3; ++i)
    {
      if (i >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      result = type metadata accessor for PlatformItemList.Item();
      *(_QWORD *)((char *)v2
                + ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
                + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * i
                + 40) = a2;
    }
    *v5 = v2;
  }
  return result;
}

double protocol witness for ViewModifier.body(content:) in conformance PlatformItemListContentModifier@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(a1 + 32) = v7;
  return result;
}

__n128 specialized View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  __n128 result;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;

  v31 = *(_QWORD *)(a6 + 8);
  v32 = *(_QWORD *)a6;
  v30 = *(_BYTE *)(a6 + 16);
  v33 = *(__n128 *)(a6 + 24);
  v18 = swift_allocObject();
  outlined init with take of Image.Resolved?((uint64_t)a1, v18 + 16, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  *(_QWORD *)(v18 + 120) = a2;
  *(_QWORD *)(v18 + 128) = a3;
  *(_BYTE *)(v18 + 136) = a4;
  *(_BYTE *)(v18 + 137) = a5;
  if (!a8)
  {
    outlined retain of PlatformItemList.Item.SystemItem?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PlatformItemList.Item.SystemItem?);
    v19 = a2;
    v23 = a2;
    v21 = a3;
    outlined copy of AppIntentExecutor?(v23);
    goto LABEL_5;
  }
  outlined retain of PlatformItemList.Item.SystemItem?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PlatformItemList.Item.SystemItem?);
  v19 = a2;
  v20 = a2;
  v21 = a3;
  outlined copy of AppIntentExecutor?(v20);
  outlined copy of Binding<NavigationSplitViewColumn>?(a7, a8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v34);
  swift_release();
  swift_release();
  if ((v34 & 1) != 0)
  {
LABEL_5:
    v22 = a7;
    v28 = 0;
    goto LABEL_6;
  }
  v22 = a7;
  v28 = 1;
LABEL_6:
  KeyPath = swift_getKeyPath();
  v29 = swift_getKeyPath();
  v25 = swift_getKeyPath();
  v26 = swift_getKeyPath();
  outlined copy of AppIntentExecutor?(v19);
  outlined retain of CoreGlue2.LinkURLParameters(a6);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  outlined consume of Binding<NavigationSplitViewColumn>?(v22, a8);
  *(_QWORD *)a9 = v32;
  *(_QWORD *)(a9 + 8) = v31;
  *(_BYTE *)(a9 + 16) = v30 & 1;
  result = v33;
  *(__n128 *)(a9 + 24) = v33;
  *(_BYTE *)(a9 + 40) = v28;
  *(_QWORD *)(a9 + 48) = 0;
  *(_QWORD *)(a9 + 56) = KeyPath;
  *(_BYTE *)(a9 + 64) = 0;
  *(_QWORD *)(a9 + 72) = partial apply for closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:);
  *(_QWORD *)(a9 + 80) = v18;
  *(_QWORD *)(a9 + 88) = v19;
  *(_QWORD *)(a9 + 96) = v21;
  *(_BYTE *)(a9 + 104) = 1;
  *(_QWORD *)(a9 + 112) = v29;
  *(_BYTE *)(a9 + 120) = 0;
  *(_QWORD *)(a9 + 136) = 0;
  *(_QWORD *)(a9 + 144) = 0;
  *(_QWORD *)(a9 + 128) = v25;
  *(_WORD *)(a9 + 152) = 0;
  *(_QWORD *)(a9 + 160) = v26;
  *(_BYTE *)(a9 + 168) = 0;
  return result;
}

uint64_t closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __int128 v26[4];
  char v27;
  _BYTE v28[184];
  _BYTE v29[192];

  v10 = type metadata accessor for PlatformItemList.Item();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v23 - v17;
  v19 = *a1;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v29);
  outlined init with take of Image.Resolved?((uint64_t)v29, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v26[0] = xmmword_187BF9840;
  memset(&v26[1], 0, 48);
  v27 = 0;
  v24 = 0uLL;
  v25 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v28, v26, &v24, 0, 0, (uint64_t)v18);
  outlined retain of PlatformItemList.Item.SystemItem?(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PlatformItemList.Item.SystemItem?);
  swift_bridgeObjectRelease();
  *((_QWORD *)v18 + 77) = v19;
  v18[632] = a5;
  outlined assign with take of PlatformItemList.Item.SystemItem?((uint64_t)a2, (uint64_t)(v18 + 296));
  v18[633] = a6;
  outlined init with copy of PlatformItemList.Item((uint64_t)v18, (uint64_t)v14);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v20 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v14, v21 + v20);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  *a1 = v21;
  return result;
}

id PlatformItemList.Item.resolvedMenuItemImage.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  char v48;
  char v49;
  __int16 v50;
  _BYTE v51[184];
  id v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  char v58;
  __int128 v59;
  __int128 v60;
  char v61;
  char v62;
  __int16 v63;
  uint64_t v64;

  v1 = v0;
  v2 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v0[41];
  if (v7 >> 62 || (v7 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL)
  {
LABEL_7:
    v26 = MEMORY[0x1E0CE7280];
    outlined init with take of Image.Resolved?((uint64_t)(v1 + 8), (uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
    outlined init with take of Image.Resolved?((uint64_t)v51, (uint64_t)&v52, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v26);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v52) == 1)
      return 0;
    if (v64)
    {
      outlined retain of Image.Resolved?((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      objc_opt_self();
      v25 = (id)swift_dynamicCastObjCClassUnconditional();
      outlined init with copy of PlatformItemList.Item((uint64_t)v1, (uint64_t)v6);
      if (v25)
      {
        outlined retain of Image.Resolved?((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
LABEL_15:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        return v25;
      }
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v51, (uint64_t)&v39, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
      outlined retain of Image.Resolved((uint64_t)&v39);
      outlined init with copy of PlatformItemList.Item((uint64_t)v1, (uint64_t)v6);
    }
    v27 = v52;
    v28 = v53;
    v39 = v52;
    v40 = v53;
    v41 = v54;
    v42 = v55;
    v43 = v56;
    v44 = v57;
    v45 = v58;
    v46 = v59;
    v47 = v60;
    v48 = v61;
    v49 = v62;
    v50 = v63;
    v29 = *((_QWORD *)v6 + 6);
    outlined copy of GraphicsImage.Contents?(v52, v53);
    v25 = (id)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v29);
    outlined retain of Image.Resolved?((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v27, v28);
    goto LABEL_15;
  }
  v9 = (void *)v1[37];
  v8 = v1[38];
  v10 = v1[39];
  v11 = v1[42];
  v12 = v1[43];
  v13 = v1[44];
  v14 = v1[45];
  v15 = v1[46];
  v16 = v1[47];
  v18 = v1[48];
  v17 = v1[49];
  if (!*(_QWORD *)((char *)v1 + *(int *)(v4 + 132)))
  {
    outlined copy of PlatformItemList.Item.SystemItem(v9, v8, v10, v1[40], v7, v11, v12, v13, v14, v15, v16, v1[48], v17);
    goto LABEL_7;
  }
  v37 = v1[40];
  v38 = v10;
  v36 = v8;
  v33 = v11;
  v34 = v12;
  v35 = v13;
  v31 = v14;
  v32 = v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
  type metadata accessor for UIColor();
  swift_retain();
  outlined copy of PlatformItemList.Item.SystemItem?(v32, v36, v38, v37, v7, v33, v34, v35, v31, v15, v16, v18, v17);
  v20 = swift_retain();
  *(_QWORD *)(v19 + 32) = UIColor.init(_:)(v20);
  v52 = (id)v19;
  specialized Array._endMutation()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPaletteColors_, isa);

  v23 = (void *)PlatformItemList.Item.image.getter();
  if (v23)
  {
    v24 = v23;
    v25 = objc_msgSend(v23, sel_imageWithSymbolConfiguration_, v22);

    swift_release();
  }
  else
  {

    swift_release();
    return 0;
  }
  return v25;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnPlatformContainerSelectionModifier@<X0>(uint64_t (**a1)(uint64_t *a1)@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  char v10;

  v3 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v3;
  v9[4] = *(_OWORD *)(v1 + 64);
  v10 = *(_BYTE *)(v1 + 80);
  v4 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v4;
  v5 = swift_allocObject();
  v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(v1 + 64);
  *(_BYTE *)(v5 + 96) = *(_BYTE *)(v1 + 80);
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  *a1 = partial apply for closure #1 in OnPlatformContainerSelectionModifier.body(content:);
  a1[1] = (uint64_t (*)(uint64_t *))v5;
  return outlined retain of OnPlatformContainerSelectionModifier((uint64_t)v9);
}

uint64_t static MergePlatformItemsView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t *v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v31 = a5;
  v48 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_DWORD *)(a2 + 80);
  v35 = a3;
  v36 = a4;
  v30 = v8;
  LODWORD(v37) = v8;
  type metadata accessor for MergePlatformItemsView(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)&v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  v32 = v15;
  v17 = *(_QWORD *)(a2 + 72);
  _GraphValue.subscript.getter();
  v39 = v9;
  v40 = v13;
  v41 = v14;
  v42 = v10;
  v43 = v11;
  v44 = v32;
  v45 = v16;
  v46 = v17;
  v47 = v12;
  static View.makeDebuggableView(view:inputs:)();
  v37 = v11;
  LODWORD(v38) = v32;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    v19 = _GraphValue.value.getter();
    v37 = v33;
    v38 = v34;
    v20 = _ViewOutputs.subscript.getter();
    v22 = *MEMORY[0x1E0CFED28];
    if ((v20 & 0x100000000) == 0)
      v22 = v20;
    v37 = __PAIR64__(v22, v19);
    MEMORY[0x1E0C80A78](v20, v21);
    v28 = type metadata accessor for MergePlatformItemsView.Transform(0, a3, a4, v23);
    v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MergePlatformItemsView<A>.Transform, v28);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v37, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v27, v28, MEMORY[0x1E0DEDCE8], v24, MEMORY[0x1E0DEDD18], v25);
    LOBYTE(v37) = 0;
    result = _ViewOutputs.subscript.setter();
  }
  v26 = v31;
  *v31 = v33;
  v26[1] = v34;
  return result;
}

uint64_t closure #1 in static MergePlatformItemsView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for MergePlatformItemsView(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t MergePlatformItemsView.Transform.list.getter(uint64_t a1)
{
  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
    return 0;
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t MergePlatformItemsView.Transform.value.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for PlatformItemList.Item();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MergePlatformItemsView.Transform.list.getter(a1);
  if (v7)
    v8 = v7;
  else
    v8 = MEMORY[0x1E0DEE9D8];
  PlatformItemList.mergedContentItem.getter(v8, (uint64_t)v6);
  swift_bridgeObjectRelease();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v6, v10 + v9);
  return v10;
}

uint64_t protocol witness for Rule.value.getter in conformance MergePlatformItemsView<A>.Transform@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = MergePlatformItemsView.Transform.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MergePlatformItemsView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return static MergePlatformItemsView._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MergePlatformItemsView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MergePlatformItemsView<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MergePlatformItemsView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for MergePlatformItemsView<A>);
}

void protocol witness for View.body.getter in conformance MergePlatformItemsView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MergePlatformItemsView<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t closure #1 in OnPlatformContainerSecondaryNavigationModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (uint64_t *)((char *)&v22 - v11);
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v22 - v11);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<ControlSize>.Content(v14, v15);
  v16 = specialized Environment.wrappedValue.getter(v14, v15);
  outlined consume of Environment<ControlSize>.Content(v14, v15);
  v17 = 0;
  v18 = 0;
  if ((v16 & 1) != 0)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a2 + 16);
    outlined copy of AppIntentExecutor?(v17);
  }
  outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(v12[69], v12[70]);
  v12[69] = v13;
  v12[70] = v17;
  v12[71] = v18;
  outlined init with copy of PlatformItemList.Item((uint64_t)v12, (uint64_t)v8);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v8, v20 + v19);
  *a1 = v20;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnPlatformContainerSecondaryNavigationModifier@<X0>(uint64_t (**a1)(uint64_t *a1)@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  char v10;
  _BYTE v11[8];
  uint64_t v12;
  char v13;

  v3 = v1[1];
  v8 = *v1;
  v9 = v3;
  v10 = *((_BYTE *)v1 + 32);
  outlined init with take of Image.Resolved?((uint64_t)&v8, (uint64_t)v11, &lazy cache variable for type metadata for AnyNavigationLinkPresentedValue?, (uint64_t)&type metadata for AnyNavigationLinkPresentedValue);
  v4 = *((_QWORD *)&v8 + 1);
  v12 = *((_QWORD *)&v9 + 1);
  v13 = v10;
  v5 = swift_allocObject();
  v6 = v9;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v6;
  *(_BYTE *)(v5 + 48) = v10;
  *a1 = partial apply for closure #1 in OnPlatformContainerSecondaryNavigationModifier.body(content:);
  a1[1] = (uint64_t (*)(uint64_t *))v5;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v11);
  outlined copy of AppIntentExecutor?(v4);
  return outlined retain of Environment<Bool>((uint64_t)&v12);
}

void PlatformItemLabelView.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[25];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  _QWORD v19[3];

  v14[20] = a2;
  v14[18] = a1[3];
  v3 = type metadata accessor for ModifiedContent();
  v14[19] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v14[12] = (char *)v14 - v5;
  v6 = a1[6];
  v7 = lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
  v19[0] = v6;
  v19[1] = v7;
  v14[14] = v3;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v19);
  v10 = type metadata accessor for MergePlatformItemsView(0, v3, v8, v9);
  v14[16] = *(_QWORD *)(v10 - 8);
  v14[11] = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = a1[5];
  v15 = a1[2];
  v16 = v13;
  v14[4] = v15;
  v17 = v12;
  v18 = &protocol witness table for MergePlatformItemsView<A>;
  v14[6] = v12;
  type metadata accessor for PlatformItemListGeneratingViewModifier();
}

void sub_18740B9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v15 - 256) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 312) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v15 - 280) = (char *)&a9 - v16;
  v17 = *(_QWORD *)(v12 + 32);
  v18 = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v15 - 232) = v18;
  *(_QWORD *)(v15 - 328) = v17;
  v20 = type metadata accessor for MergePlatformItemsView(0, v17, v18, v19);
  *(_QWORD *)(v15 - 272) = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&a9 - v22;
  v24 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 200) = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  *(_QWORD *)(v15 - 320) = (char *)&a9 - v26;
  type metadata accessor for PlatformItemListTransformModifier(255, v9, v11, v27);
  v28 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 216) = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  *(_QWORD *)(v15 - 296) = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  *(_QWORD *)(v15 - 264) = (char *)&a9 - v33;
  *(_QWORD *)(v15 - 336) = v10;
  v34 = View.mergePlatformItems()(v17, (uint64_t)v23);
  v35 = *(_QWORD *)(v15 - 240);
  MEMORY[0x18D75B4AC](v34, *(_QWORD *)(v15 - 192), &type metadata for PlatformItemListContentModifier, v14);
  v36 = v13;
  v37 = v13;
  v38 = *(_QWORD *)(v15 - 224);
  View.mergePlatformItems()(v38, v37);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 184) + 8))(v35, v38);
  v39 = *(_QWORD *)(v15 - 280);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v15 - 208) + 32))(v39, v36, *(_QWORD *)(v15 - 248));
  v40 = *(_QWORD *)(v15 - 312);
  MEMORY[0x18D75B4AC](v39, v20, v40, &protocol witness table for MergePlatformItemsView<A>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 256) + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 272) + 8))(v23, v20);
  implicit closure #1 in PlatformItemLabelView.body.getter();
}

uint64_t sub_18740BC88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);

  *(_QWORD *)(v7 - 152) = &protocol witness table for MergePlatformItemsView<A>;
  *(_QWORD *)(v7 - 144) = &protocol witness table for PlatformItemListGeneratingViewModifier<A, B>;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v7 - 152);
  v12 = *(_QWORD *)(v7 - 296);
  View.transformPlatformItemList<A>(_:_:)(v11, a1, a2, v4, v2, v11, v5);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 200) + 8))(v6, v4);
  *(_QWORD *)(v7 - 168) = v11;
  *(_QWORD *)(v7 - 160) = &protocol witness table for PlatformItemListTransformModifier<A>;
  v13 = MEMORY[0x18D75FFDC](v10, v3, v7 - 168);
  v14 = *(_QWORD *)(v7 - 264);
  static ViewBuilder.buildExpression<A>(_:)(v12, v3, v13);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 216) + 8);
  v15(v12, v3);
  static ViewBuilder.buildBlock<A>(_:)(v14, v3, *(_QWORD *)(v7 - 176));
  return v15(v14, v3);
}

void implicit closure #1 in PlatformItemLabelView.body.getter()
{
  type metadata accessor for PlatformItemLabelView();
}

