uint64_t outlined init with copy of FocusItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FocusItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FocusItem?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for FocusItem?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for FocusItem?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?);
  }
}

void TooltipBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  int v3;

  v1 = *a1;
  PreferenceList.subscript.getter();
  LOBYTE(v1) = v2;
  HIDWORD(v1) = v3;
  TooltipBridge.updateState(hasTooltip:)((unsigned __int8 *)&v1);
}

void TooltipBridge.updateState(hasTooltip:)(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 1);
  if (v3 == -1
    || ((v4 = *(_DWORD *)(v1 + direct field offset for TooltipBridge.hasTooltipSeed), v4 != -1)
      ? (v5 = v3 == v4)
      : (v5 = 0),
        !v5))
  {
    v6 = v1 + direct field offset for TooltipBridge.host;
    v7 = (void *)MEMORY[0x18D760234](v1 + direct field offset for TooltipBridge.host);
    if (v7)
    {
      v8 = v7;
      v9 = direct field offset for TooltipBridge.tooltipInteraction;
      if (!*(_QWORD *)(v1 + direct field offset for TooltipBridge.tooltipInteraction))
      {
        if (v2)
        {
          v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E60]), sel_init);
          objc_msgSend(v16, sel_setDelegate_, v1);
          v17 = v16;
          objc_msgSend(v8, sel_addInteraction_, v17);

          v15 = *(void **)(v1 + v9);
          *(_QWORD *)(v1 + v9) = v17;
LABEL_18:

LABEL_19:
          *(_DWORD *)(v1 + direct field offset for TooltipBridge.hasTooltipSeed) = v3;
          return;
        }

        v10 = (void **)(v1 + direct field offset for TooltipBridge.tooltipInteraction);
        v11 = *(_QWORD *)(v1 + direct field offset for TooltipBridge.tooltipInteraction);
        if (!v11)
          goto LABEL_19;
LABEL_13:
        v13 = (void *)MEMORY[0x18D760234](v6);
        if (v13)
        {
          v14 = v13;
          objc_msgSend(v13, sel_removeInteraction_, v11);

        }
        v15 = *v10;
        *v10 = 0;
        goto LABEL_18;
      }

    }
    v10 = (void **)(v1 + direct field offset for TooltipBridge.tooltipInteraction);
    v11 = *(_QWORD *)(v1 + direct field offset for TooltipBridge.tooltipInteraction);
    if (v11)
      v12 = v2;
    else
      v12 = 1;
    if ((v12 & 1) != 0)
      goto LABEL_19;
    goto LABEL_13;
  }
}

void FocusBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void *v6;
  void (**v7)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t v20;
  uint64_t v21;
  const double *v22;
  int64x2_t v23;
  unint64_t v24;
  int64x2_t v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int8x16_t v29;
  uint64_t v30;
  unint64_t v31;
  int8x8_t *v32;
  int8x8_t v33;
  int8x8_t v34;
  uint64_t ObjectType;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int8x8_t v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  const double *v44;
  int64x2_t v45;
  unint64_t v46;
  int64x2_t v47;
  const double *v48;
  unsigned __int128 v49;
  unsigned __int128 v50;
  int8x16_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t *);
  void (*v57)(uint64_t *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int8x8_t v62;
  uint64_t v63;
  uint64_t *v64;
  int64x2_t v65;
  unint64_t v66;
  int64x2_t v67;
  uint64_t *v68;
  int64x2_t v69;
  uint64_t v70;
  int64x2_t v71;
  int8x16_t v72;
  uint64_t v73;
  unint64_t v74;
  int8x8_t *v75;
  int8x8_t v76;
  int8x8_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;

  v2 = v1;
  v3 = *a1;
  v4 = FocusBridge.host.getter();
  if (v4)
  {
    v6 = (void *)v4;
    v7 = v5;
    v80 = v3;
    PreferenceList.subscript.getter();
    v8 = v78;
    v9 = *(_QWORD *)(v78 + 16);
    if (v9)
    {
      v10 = v78 + 32;
      swift_bridgeObjectRetain();
      v11 = 0;
      do
      {
        outlined init with copy of FocusStoreList.Item(v10, (uint64_t)&v78);
        if (v78 > v11)
          v11 = v78;
        outlined destroy of FocusStoreList.Item((uint64_t)&v78);
        v10 += 72;
        --v9;
      }
      while (v9);
      if (HIDWORD(v11))
        goto LABEL_71;
    }
    else
    {
      swift_bridgeObjectRetain();
      LODWORD(v11) = 0;
    }
    swift_bridgeObjectRelease();
    v12 = *(_DWORD *)(v2 + 48);
    if (v12 != -1 && ((_DWORD)v11 != -1 ? (v13 = v12 == (_DWORD)v11) : (v13 = 0), v13))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      swift_getObjectType();
      ViewRendererHost.responderNode.getter();
      swift_release();
      LODWORD(v78) = 0;
      *(_QWORD *)&v79 = v14;
      *((_QWORD *)&v79 + 1) = specialized Dictionary.init(dictionaryLiteral:)(v14);
      FocusStore.makeStoreContent(_:)(v8);
      swift_bridgeObjectRelease();
      v15 = v79;
      *(_DWORD *)(v2 + 48) = v78;
      *(_OWORD *)(v2 + 56) = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = (void *)FocusBridge.host.getter();
      if (v16)
      {
        swift_getObjectType();
        LOWORD(v78) = 128;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      }
    }
    v80 = v3;
    PreferenceList.subscript.getter();
    v17 = v78;
    v18 = *(_QWORD *)(v78 + 16);
    if (v18)
    {
      if (v18 >= 5)
      {
        v21 = *(_QWORD *)(v78 + 16) & 3;
        if ((v18 & 3) == 0)
          v21 = 4;
        v19 = v18 - v21;
        v22 = (const double *)(v78 + 96);
        v23 = 0uLL;
        v24 = v19;
        v25 = 0uLL;
        do
        {
          v26 = v22 - 8;
          v27 = (unsigned __int128)vld4q_f64(v26);
          v28 = (unsigned __int128)vld4q_f64(v22);
          v23 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v27, v23), (int8x16_t)v27, (int8x16_t)v23);
          v25 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v28, v25), (int8x16_t)v28, (int8x16_t)v25);
          v22 += 16;
          v24 -= 4;
        }
        while (v24);
        v29 = vbslq_s8((int8x16_t)vcgtq_s64(v23, v25), (int8x16_t)v23, (int8x16_t)v25);
        v30 = vextq_s8(v29, v29, 8uLL).u64[0];
        v20 = vbsl_s8((int8x8_t)vcgtd_s64(v29.i64[0], v30), *(int8x8_t *)v29.i8, (int8x8_t)v30);
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v31 = v18 - v19;
      v32 = (int8x8_t *)(v78 + 32 * v19 + 32);
      do
      {
        v34 = *v32;
        v32 += 4;
        v33 = v34;
        if (*(_QWORD *)&v34 > *(_QWORD *)&v20)
          v20 = v33;
        --v31;
      }
      while (v31);
      if (HIDWORD(*(_QWORD *)&v20))
        goto LABEL_71;
    }
    else
    {
      v20.i32[0] = 0;
    }
    ObjectType = swift_getObjectType();
    v7[3](&v78, ObjectType, (uint64_t)v7);
    v36 = DWORD1(v79);
    swift_release();
    if (v36 != -1 && v20.i32[0] != -1 && v36 == v20.i32[0])
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    v78 = 0;
    LOBYTE(v79) = 0;
    v37 = *(_QWORD *)(v17 + 16);
    if (!v37)
    {
      swift_bridgeObjectRelease();
      v40 = 0;
      v41 = 0;
      v42 = 0;
LABEL_53:
      v78 = v42;
      LOBYTE(v79) = v41;
      DWORD1(v79) = v40;
      v57 = v7[4];
      swift_retain();
      v57(&v78, ObjectType, (uint64_t)v7);
      ViewRendererHost.isRootHost.getter();
      swift_release();
LABEL_54:
      v80 = v3;
      PreferenceList.subscript.getter();
      v58 = v78;
      v7[6](&v78, ObjectType, (uint64_t)v7);
      v59 = v78;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v60 = *(_QWORD *)(v58 + 16);
      if (v60)
      {
        if (v60 >= 5)
        {
          v63 = *(_QWORD *)(v58 + 16) & 3;
          if ((v60 & 3) == 0)
            v63 = 4;
          v61 = v60 - v63;
          v64 = (uint64_t *)(v58 + 144);
          v65 = 0uLL;
          v66 = v61;
          v67 = 0uLL;
          do
          {
            v68 = v64 + 7;
            v69.i64[0] = *(v64 - 14);
            v69.i64[1] = *(v64 - 7);
            v70 = *v64;
            v64 += 28;
            v71.i64[0] = v70;
            v71.i64[1] = *v68;
            v65 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v69, v65), (int8x16_t)v69, (int8x16_t)v65);
            v67 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v71, v67), (int8x16_t)v71, (int8x16_t)v67);
            v66 -= 4;
          }
          while (v66);
          v72 = vbslq_s8((int8x16_t)vcgtq_s64(v65, v67), (int8x16_t)v65, (int8x16_t)v67);
          v73 = vextq_s8(v72, v72, 8uLL).u64[0];
          v62 = vbsl_s8((int8x8_t)vcgtd_s64(v72.i64[0], v73), *(int8x8_t *)v72.i8, (int8x8_t)v73);
        }
        else
        {
          v61 = 0;
          v62 = 0;
        }
        v74 = v60 - v61;
        v75 = (int8x8_t *)(v58 + 56 * v61 + 32);
        do
        {
          v77 = *v75;
          v75 += 7;
          v76 = v77;
          if (*(_QWORD *)&v77 > *(_QWORD *)&v62)
            v62 = v76;
          --v74;
        }
        while (v74);
        if (v59 == *(_QWORD *)&v62)
          goto LABEL_69;
      }
      else if (!v59)
      {
LABEL_69:

        swift_bridgeObjectRelease();
        return;
      }
      v78 = 0;
      *(_QWORD *)&v79 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      *((_QWORD *)&v79 + 1) = MEMORY[0x1E0DEE9E0];
      AccessibilityFocusStore.makeStoreContent(_:)(v58);
      swift_bridgeObjectRelease();
      v7[7](&v78, ObjectType, (uint64_t)v7);

      return;
    }
    if (v37 >= 5)
    {
      v43 = *(_QWORD *)(v17 + 16) & 3;
      if ((v37 & 3) == 0)
        v43 = 4;
      v38 = v37 - v43;
      v44 = (const double *)(v17 + 96);
      v45 = 0uLL;
      v46 = v38;
      v47 = 0uLL;
      do
      {
        v48 = v44 - 8;
        v49 = (unsigned __int128)vld4q_f64(v48);
        v50 = (unsigned __int128)vld4q_f64(v44);
        v45 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v49, v45), (int8x16_t)v49, (int8x16_t)v45);
        v47 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v50, v47), (int8x16_t)v50, (int8x16_t)v47);
        v44 += 16;
        v46 -= 4;
      }
      while (v46);
      v51 = vbslq_s8((int8x16_t)vcgtq_s64(v45, v47), (int8x16_t)v45, (int8x16_t)v47);
      v52 = vextq_s8(v51, v51, 8uLL).u64[0];
      v39 = vbsl_s8((int8x8_t)vcgtd_s64(v51.i64[0], v52), *(int8x8_t *)v51.i8, (int8x8_t)v52);
    }
    else
    {
      v38 = 0;
      v39 = 0;
    }
    v53 = v37 - v38;
    v54 = 32 * v38 + 32;
    do
    {
      if (*(_QWORD *)(v17 + v54) > *(_QWORD *)&v39)
        v39 = *(int8x8_t *)(v17 + v54);
      v54 += 32;
      --v53;
    }
    while (v53);
    if (!HIDWORD(*(_QWORD *)&v39))
    {
      DWORD1(v79) = v39.i32[0];
      swift_bridgeObjectRetain();
      v55 = v17 + 56;
      do
      {
        v56 = *(void (**)(uint64_t *))(v55 - 8);
        swift_retain();
        v56(&v78);
        swift_release();
        v55 += 32;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease_n();
      v42 = v78;
      v41 = v79;
      v40 = DWORD1(v79);
      goto LABEL_53;
    }
LABEL_71:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t _UIHostingView.focusedValues.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  char v4;

  v2 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x250);
  v3 = *(_QWORD *)v2;
  v4 = v2[8];
  LODWORD(v2) = *((_DWORD *)v2 + 3);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = (_DWORD)v2;
  return swift_retain();
}

uint64_t protocol witness for ViewGraphDelegate.modifyViewInputs(_:) in conformance _UIHostingView<A>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x860))();
}

uint64_t specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(a1, a2, a3);
}

{
  uint64_t v5;
  int v6;

  v5 = a1;
  if ((a1 & 0x100000000) != 0)
  {
    v5 = _ViewOutputs.subscript.getter();
    if ((v5 & 0x100000000) != 0)
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<AccessibilityNodeList> and conformance External<A>();
      swift_bridgeObjectRetain();
      v5 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
    }
  }
  v6 = *(_DWORD *)(a3 + 36);
  if ((v6 & 0x20) != 0)
  {
    if ((v6 & 0x80) != 0)
    {
      swift_getKeyPath();
      _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      _ViewOutputs.subscript.getter();
      if ((a1 & 0x100000000) == 0)
        AccessibilityAttachmentToken.init<A>(_:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type ViewResponderTransform and conformance ViewResponderTransform();
      v5 = Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
    }
    if ((v6 & 0x40) != 0)
    {
      swift_getKeyPath();
      _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      _ViewInputs.size.getter();
      _ViewInputs.position.getter();
      _ViewInputs.transform.getter();
      if ((a1 & 0x100000000) == 0)
        AccessibilityAttachmentToken.init<A>(_:)();
      UniqueID.init()();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type GeometryTransform and conformance GeometryTransform();
      v5 = Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
    }
  }
  return v5;
}

uint64_t _UIHostingView.pendingPreferencesUpdate.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x160)) = result;
  return result;
}

uint64_t closure #1 in _UIHostingView.presentationModeLocation.getter(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, void (*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v7 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50);
  v8 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58);
  v9 = a2(255, v7, v8);
  MEMORY[0x18D75FFDC](a3, v9);
  type metadata accessor for LocationBox();
  v10 = a1;
  a4(&v12, a1, v7, v8);
  return LocationBox.__allocating_init(_:)();
}

void UIKitPresentationModeLocation.init(host:)(void *a1)
{
  swift_unknownObjectWeakInit();

}

uint64_t type metadata accessor for UIKitScenePresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitScenePresentationModeLocation);
}

uint64_t type metadata accessor for UIKitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitPresentationModeLocation);
}

void type metadata accessor for _ContiguousArrayStorage<Text>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0CE6CF8]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

char *_UIHostingView._hostSafeAreaElements.getter()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  double v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double MaxY;
  double MinY;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  double v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  CGRect v80;
  CGRect v81;

  v1 = v0;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  GraphHost.environment.getter();
  EnvironmentValues.pixelLength.getter();
  v9 = v8;
  objc_msgSend(v0, sel_safeAreaInsets);
  v78 = v11;
  v79 = v10;
  v76 = v13;
  v77 = v12;
  v14 = *MEMORY[0x1E0DED4F0];
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v15(v6, v14, v2);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, v9);
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v6, v2);
  static EdgeInsets.zero.getter();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  if ((_UIHostingView.safeAreaRegions.getter() & 1) != 0)
  {
    v20 = v78;
    v18 = v79;
    v24 = v76;
    v73 = v77;
  }
  else
  {
    v73 = v22;
  }
  v25 = _UIHostingView.safeAreaRegions.getter();
  v26 = 0.0;
  v74 = v24;
  if ((v25 & 2) != 0)
  {
    v27 = (double *)((char *)v0 + *(_QWORD *)((*v7 & *v0) + 0xE0));
    if (((_BYTE)v27[4] & 1) == 0)
    {
      v28 = v18;
      v30 = v27[2];
      v29 = v27[3];
      v31 = *v27;
      v32 = v27[1];
      v33 = objc_msgSend(v0, sel_window);
      if (v33)
      {
        v34 = v33;
        v35 = objc_msgSend(v33, sel_screen);

        v36 = objc_msgSend(v35, sel_coordinateSpace);
        if (v36)
        {
          if (v30 <= 0.0 || v29 <= 0.0)
          {
            swift_unknownObjectRelease();
          }
          else
          {
            objc_msgSend(v1, sel_convertRect_fromCoordinateSpace_, v36, v31, v32, v30, v29);
            v38 = v37;
            v40 = v39;
            v42 = v41;
            v44 = v43;
            objc_msgSend(v1, sel_bounds);
            MaxY = CGRectGetMaxY(v80);
            v81.origin.x = v38;
            v81.origin.y = v40;
            v81.size.width = v42;
            v81.size.height = v44;
            MinY = CGRectGetMinY(v81);
            swift_unknownObjectRelease();
            v26 = MaxY - MinY;
          }
        }
      }
      v18 = v28;
    }
  }
  static EdgeInsets.zero.getter();
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v54 = v53;
  if ((_UIHostingView.safeAreaRegions.getter() & 2) != 0)
  {
    v55 = v26 - v77;
    v15(v6, v14, v2);
    v75 = v55;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, v9);
    v16(v6, v2);
    EdgeInsets.init(_:edges:)();
    v48 = v56;
    v50 = v57;
    v52 = v58;
    v54 = v59;
  }
  if (v52 >= 0.0)
  {
    v60 = 2;
    v61 = 1;
    v62 = v18;
    v63 = v20;
    v26 = v73;
    v64 = v74;
  }
  else
  {
    v60 = 1;
    v52 = -v52;
    v61 = 3;
    v62 = v48;
    v48 = v18;
    v63 = v50;
    v50 = v20;
    v64 = v54;
    v54 = v74;
  }
  if ((EdgeInsets.isEmpty.getter() & 1) != 0)
  {
    v65 = (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v67 = *((_QWORD *)v65 + 2);
    v66 = *((_QWORD *)v65 + 3);
    if (v67 >= v66 >> 1)
      v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v65);
    *((_QWORD *)v65 + 2) = v67 + 1;
    v68 = &v65[40 * v67];
    *((_QWORD *)v68 + 4) = v61;
    *((_QWORD *)v68 + 5) = v62;
    *((_QWORD *)v68 + 6) = v63;
    *((double *)v68 + 7) = v26;
    *((_QWORD *)v68 + 8) = v64;
  }
  if ((EdgeInsets.isEmpty.getter() & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v65 + 2) + 1, 1, v65);
    v70 = *((_QWORD *)v65 + 2);
    v69 = *((_QWORD *)v65 + 3);
    if (v70 >= v69 >> 1)
      v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v65);
    *((_QWORD *)v65 + 2) = v70 + 1;
    v71 = &v65[40 * v70];
    *((_QWORD *)v71 + 4) = v60;
    *((_QWORD *)v71 + 5) = v48;
    *((_QWORD *)v71 + 6) = v50;
    *((double *)v71 + 7) = v52;
    *((_QWORD *)v71 + 8) = v54;
  }
  swift_release();
  swift_release();
  return v65;
}

uint64_t _UIHostingView.safeAreaRegions.getter()
{
  _QWORD *v0;
  char *v1;

  v1 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108);
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ResolvedButtonStyleBody<A>.StyleBodyAccessor(uint64_t a1, char a2, uint64_t a3)
{
  int *v3;

  return ResolvedButtonStyleBody.StyleBodyAccessor.updateBody(of:changed:)(a1, a2, *v3, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t HostingViewRegistry.add<A>(_:)(uint64_t a1)
{
  _BYTE v3[24];
  _BYTE v4[16];

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v3, (uint64_t)v4);
  v4[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v4, a1);
  return swift_endAccess();
}

uint64_t DragAndDropBridge.addPreferences(to:)()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  uint64_t ObjectType;

  result = MEMORY[0x18D760234](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    v2 = (void *)result;
    ObjectType = swift_getObjectType();

    result = (*(uint64_t (**)(void))(ObjectType + 1784))();
    if ((result & 1) != 0)
    {
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      return GraphHost.addPreference<A>(_:)();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined release of _ViewListInputs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of _ViewListInputs(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for static AnySourceFormula.makeViewList<A>(view:source:inputs:) in conformance SourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return static SourceFormula.makeViewList<A>(view:source:inputs:)(a1, a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6, *(_QWORD *)(a9 + 16), a7, *(_QWORD *)(a9 + 24));
}

uint64_t static SourceFormula.makeViewList<A>(view:source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v19;
  char v20;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;

  v9 = *a6;
  v10 = a6[2];
  v11 = *((_DWORD *)a6 + 7);
  v22 = *((_DWORD *)a6 + 2);
  v23 = *((_DWORD *)a6 + 6);
  v12 = *((_DWORD *)a6 + 9);
  v24 = *((_DWORD *)a6 + 8);
  v14 = a6[5];
  v13 = a6[6];
  v15 = a6[7];
  v16 = *((_DWORD *)a6 + 16);
  v25 = a6[9];
  v17 = *((_BYTE *)a6 + 80);
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
  {
    v27 = v9;
    v28 = v22;
    v29 = v10;
    v30 = v23;
    v31 = v11;
    v32 = v24;
    v33 = v12;
    v34 = v14;
    v35 = v13;
    v36 = v15;
    v37 = v16;
    v38 = v25;
    v39 = v17;
    return static _ViewListOutputs.emptyViewList(inputs:)();
  }
  else
  {
    v20 = v17;
    if ((a5 & 0x100000000) != 0)
    {
      _GraphValue.init(_:)();
      v27 = v9;
      v28 = v22;
      v29 = v10;
      v30 = v23;
      v31 = v11;
      v32 = v24;
      v33 = v12;
      v34 = v14;
      v35 = v13;
      v36 = v15;
      v37 = v16;
      v38 = v25;
      v39 = v17;
    }
    else
    {
      v19 = type metadata accessor for Optional();
      _GraphValue.init(_:)();
      v27 = v9;
      v28 = v22;
      v29 = v10;
      v30 = v23;
      v31 = v11;
      v32 = v24;
      v33 = v12;
      v34 = v14;
      v35 = v13;
      v36 = v15;
      v37 = v16;
      v38 = v25;
      v39 = v20;
      v26 = a9;
      MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v19, &v26);
    }
    return static View.makeDebuggableViewList(view:inputs:)();
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PrimitiveButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<PrimitiveButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<PrimitiveButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static AnyStyleModifierType.makeViewList<A>(view:modifier:inputs:) in conformance StyleModifierType<A>(int *a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static StyleModifierType.makeViewList<A>(view:modifier:inputs:)(a1, a2, a3, a4, *(_QWORD *)(a7 + 16), a5, *(_QWORD *)(a7 + 24));
}

uint64_t static StyleModifierType.makeViewList<A>(view:modifier:inputs:)(int *a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  int v23;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  char v43;
  _BYTE v44[4];
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  char v57;

  v8 = *a1;
  v9 = *a4;
  v10 = *((_DWORD *)a4 + 2);
  v11 = a4[2];
  v12 = a4[5];
  v13 = a4[6];
  v32 = a4[7];
  v14 = *((_DWORD *)a4 + 16);
  v15 = a4[9];
  v16 = *((_BYTE *)a4 + 80);
  swift_getAssociatedTypeWitness();
  v30 = *(_OWORD *)(a4 + 3);
  static DynamicPropertyCache.fields(of:)();
  v17 = v49;
  v18 = v50;
  v19 = v51;
  v20 = HIDWORD(v51);
  v49 = v9;
  LODWORD(v50) = v10;
  v52 = v30;
  v51 = v11;
  v53 = v12;
  *(_QWORD *)&v54 = v13;
  *((_QWORD *)&v54 + 1) = v32;
  v55 = v14;
  v56 = v15;
  v57 = v16;
  v23 = v20;
  v45 = v8;
  v29 = v18;
  v31 = v17;
  v35 = v17;
  v36 = v18;
  v33 = v19;
  LOBYTE(v37) = v19;
  HIDWORD(v37) = v20;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)((uint64_t)v44, (uint64_t)&v46, (uint64_t)&v45, a2, a3, (uint64_t)&v49, (uint64_t)&v35, a5, a6, a7);
  v21 = v47;
  v28 = v46;
  LOBYTE(v10) = v48;
  swift_getAssociatedTypeWitness();
  v35 = v49;
  LODWORD(v36) = v50;
  v37 = v51;
  v38 = v52;
  v39 = v53;
  v40 = v54;
  v41 = v55;
  v42 = v56;
  v43 = v57;
  swift_getAssociatedConformanceWitness();
  static View.makeDebuggableViewList(view:inputs:)();
  if ((v10 & 1) == 0)
  {
    v46 = v28;
    v47 = v21;
    v45 = v8;
    v35 = v31;
    v36 = v29;
    LOBYTE(v37) = v33;
    HIDWORD(v37) = v23;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v11;
  uint64_t AssociatedTypeWitness;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t result;

  v11 = static SemanticFeature.isEnabled.getter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if ((v11 & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64))
      closure #1 in static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)(1, a8, a9, a10);
    AGGraphCreateOffsetAttribute2();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    _GraphValue.init(_:)();
    type metadata accessor for StyleBodyAccessor();
  }
  _StringGuts.grow(_:)(71);
  v13._object = (void *)0x8000000187BE1E40;
  v13._countAndFlagsBits = 0xD000000000000039;
  String.append(_:)(v13);
  v14._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6C63206120736920;
  v15._object = (void *)0xEC0000002E737361;
  String.append(_:)(v15);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AccessibilityRelationshipScope()
{
  return objc_opt_self();
}

void type metadata accessor for WeakBox<AnyUIKitSensoryFeedbackCache>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<AnyUIKitSensoryFeedbackCache>)
  {
    type metadata accessor for AnyUIKitSensoryFeedbackCache();
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<AnyUIKitSensoryFeedbackCache>);
  }
}

void type metadata accessor for WeakBox<FocusBridge>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

void type metadata accessor for WeakBox<UISceneSession>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<UISceneSession>?)
  {
    type metadata accessor for FallbackDelegateBox<NSObject>(255, &lazy cache variable for type metadata for WeakBox<UISceneSession>, &lazy cache variable for type metadata for UISceneSession, 0x1E0DC3BF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UISceneSession>?);
  }
}

uint64_t closure #1 in static StyleModifierType.makeStyleBody<A>(view:modifier:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(_BYTE *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  _BYTE v15[32];

  v5 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 80))(v15, a2, a4);
  v7 = v6;
  v12[2] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  v10 = v14;
  v5(v15, 0);
  return v10;
}

uint64_t (*protocol witness for StyleModifier.style.modify in conformance UIKitButtonStyleModifier<A>())()
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void type metadata accessor for MakeResolvedRepresentation<ResolvedButtonStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ResolvedRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedButtonStyle>)
  {
    v2 = type metadata accessor for ResolvedButtonStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, type metadata accessor for ResolvedButtonStyle, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
    ResolvedRepresentation = type metadata accessor for MakeResolvedRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(ResolvedRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedButtonStyle>);
  }
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance InsetGroupedListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

uint64_t outlined init with copy of ResolvedScrollBehavior?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvedScrollBehavior?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized AccessibilityStaticTextModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  __int128 v38[6];
  _OWORD v39[2];
  _OWORD v40[8];
  _OWORD v41[6];
  _OWORD v42[2];
  _QWORD v43[2];
  char v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[56];

  v5 = v4;
  v9 = *(_QWORD *)v4;
  v10 = *(_QWORD *)(v4 + 8);
  v11 = *(_BYTE *)(v4 + 16);
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *(_BYTE *)(v5 + 153);
  if ((*(_BYTE *)(v5 + 154) & 1) != 0)
    v14 = 0x800000008;
  else
    v14 = 0x100000001;
  specialized View.accessibility<A>(_:_:isEnabled:)(v14, 1, a1, a2, a3, (uint64_t)v47);
  specialized ModifiedContent<>.accessibilityLabel(_:)(v9, v10, v11 & 1, v12, (uint64_t)v43);
  outlined release of ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>((uint64_t)v47);
  v15 = *(_OWORD *)(v5 + 112);
  v35 = *(_OWORD *)(v5 + 96);
  v36 = v15;
  v37[0] = *(_OWORD *)(v5 + 128);
  v16 = v37[0];
  *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)(v5 + 137);
  v17 = *(_OWORD *)(v5 + 48);
  v32[0] = *(_OWORD *)(v5 + 32);
  v32[1] = v17;
  v18 = *(_OWORD *)(v5 + 80);
  v33 = *(_OWORD *)(v5 + 64);
  v34 = v18;
  *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v37 + 9);
  v38[5] = v15;
  v39[0] = v16;
  v38[3] = v18;
  v38[4] = v35;
  v38[1] = v17;
  v38[2] = v33;
  v38[0] = v32[0];
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v38);
  v29 = v43[1];
  v30 = v43[0];
  v28 = v44;
  v19 = v45;
  v20 = v46;
  outlined init with take of AccessibilityTextLayoutProperties(v38, v40);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v40);
  swift_beginAccess();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  v31[3] = v21;
  v31[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  v22 = (_OWORD *)swift_allocObject();
  v31[0] = v22;
  outlined init with take of AccessibilityTextLayoutProperties?((uint64_t)v40, (uint64_t)v41);
  v23 = v41[5];
  v22[5] = v41[4];
  v22[6] = v23;
  v22[7] = v42[0];
  *(_OWORD *)((char *)v22 + 121) = *(_OWORD *)((char *)v42 + 9);
  v24 = v41[1];
  v22[1] = v41[0];
  v22[2] = v24;
  v25 = v41[3];
  v22[3] = v41[2];
  v22[4] = v25;
  outlined retain of TextLayoutProperties((uint64_t)v32);
  outlined retain of TextLayoutProperties((uint64_t)v32);
  swift_retain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)v31, (uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined release of TextLayoutProperties((uint64_t)v32);
  if ((v13 & 1) != 0)
    v26 = 1280;
  else
    v26 = 256;
  v31[0] = v26;
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v19 + 16);
  swift_endAccess();
  swift_release();
  result = swift_release();
  *(_QWORD *)a4 = v30;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  *(_QWORD *)(a4 + 24) = v19;
  *(_QWORD *)(a4 + 32) = v20;
  return result;
}

void type metadata accessor for EdgeInsets?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0CE0B90]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t type metadata accessor for AnyAccessibilityPropertiesEntry()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry;
  if (!lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  return result;
}

uint64_t outlined retain of [Text.Modifier](uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of Text.Storage(uint64_t a1)
{
  outlined copy of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined init with take of Text.Storage(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE6BB8] - 8) + 32))(a2, a1);
  return a2;
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance <> StaticIf<A, B, C>(int *a1, uint64_t *a2, uint64_t a3)
{
  static StaticIf<>._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40));
}

void static StaticIf<>._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;

  v10 = *a1;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v13 = *((_DWORD *)a2 + 6);
  v14 = *((_DWORD *)a2 + 7);
  v16 = *((_DWORD *)a2 + 8);
  v15 = *((_DWORD *)a2 + 9);
  v17 = a2[5];
  v18 = *a2;
  LODWORD(v19) = v11;
  v20 = v12;
  v21 = __PAIR64__(v14, v13);
  v22 = v16;
  v23 = v15;
  v24 = v17;
  if (((*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a6 + 8))(&v18, a3, a6) & 1) != 0)
  {
    v25 = v10;
    v18 = a3;
    v19 = a4;
    v20 = a5;
    v21 = a6;
    type metadata accessor for StaticIf();
  }
  v25 = v10;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  type metadata accessor for StaticIf();
}

void sub_186EE04FC()
{
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  JUMPOUT(0x186EE0590);
}

uint64_t static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(71);
    v14._object = (void *)0x8000000187BE1E40;
    v14._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v14);
    v15._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0x6C63206120736920;
    v16._object = (void *)0xEC0000002E737361;
    String.append(_:)(v16);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for ResolvedButtonStyleBody(255, a6, a7, v9);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(_QWORD *)(*(_QWORD *)(a6 - 8) + 64))
      closure #1 in static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)(1, a6, a7, v10);
    AGGraphCreateOffsetAttribute2();
    _GraphValue.value.getter();
    _GraphValue.init(_:)();
    v12 = type metadata accessor for ResolvedButtonStyleBody.StyleBodyAccessor(0, a6, a7, v11);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedButtonStyleBody<A>.StyleBodyAccessor, v12);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  return result;
}

uint64_t ResolvedButtonStyleBody.StyleBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD v23[4];

  v10 = type metadata accessor for ResolvedButtonStyleBody(0, a4, a5, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v23 - v13;
  Value = AGGraphGetValue();
  v17 = v16;
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, Value, v10);
  if ((a2 & 1) != 0 || (v17 & 1) != 0)
  {
    v23[3] = a3;
    MEMORY[0x1E0C80A78](v18, v19);
    *(_QWORD *)&v23[-8] = a4;
    *(_QWORD *)&v23[-6] = a5;
    *(_QWORD *)&v23[-4] = a1;
    *(_QWORD *)&v23[-2] = v14;
    v21 = type metadata accessor for ResolvedButtonStyleBody.StyleBodyAccessor(0, a4, a5, v20);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedButtonStyleBody<A>.StyleBodyAccessor, v21);
    BodyAccessor.setBody(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t type metadata accessor for ResolvedButtonStyleBody.StyleBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedButtonStyleBody.StyleBodyAccessor);
}

uint64_t closure #1 in static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for ResolvedButtonStyleBody(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance WrappedButtonStyleBody<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyleBody<A>, a3);
  return static ConditionallyArchivableView._makeViewList(view:inputs:)();
}

void _UIHostingView.modifyViewInputs(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *MEMORY[0x1E0DEEDD8];
  lazy protocol witness table accessor for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory();
  PropertyList.subscript.setter();
  v14[0] = &type metadata for UIKitGestureContainerFactory;
  v14[1] = lazy protocol witness table accessor for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory();
  PropertyList.subscript.setter();
  v6 = (char *)v1 + *(_QWORD *)((*v4 & *v1) + 0x240);
  if (MEMORY[0x18D760234](v6))
  {
    v7 = *((_QWORD *)v6 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v7 + 48))(v1, a1, *(_QWORD *)((v5 & v3) + 0x50), *(_QWORD *)((v5 & v3) + 0x58), ObjectType, v7);
    swift_unknownObjectRelease();
  }
  v9 = PropertyList.subscript.getter();
  if (!v14[0])
  {
    v14[0] = 0;
    v11 = MEMORY[0x1E0C80A78](v9, v10);
    MEMORY[0x18D75B938](partial apply for closure #1 in _UIHostingView.modifyViewInputs(_:), v11);
  }
  swift_unknownObjectWeakInit();
  v12 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<UIView>(v12, (uint64_t)v14);
  type metadata accessor for WeakBox<UIView>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  type metadata accessor for External<WeakBox<UIView>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<WeakBox<UIView>> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<WeakBox<UIView>>, MEMORY[0x1E0CFED00]);
  v13 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of WeakBox<UIView>((uint64_t)v14);
  LODWORD(v14[0]) = v13;
  lazy protocol witness table accessor for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider();
  _ViewInputs.textAlwaysOnProvider.setter();
  _UIHostingView.navigationBridge.getter();
}

uint64_t sub_186EE0C58(uint64_t result)
{
  if (result)
  {
    UIKitNavigationBridge.updateViewInputs(_:)();
    return swift_release();
  }
  return result;
}

void _UIHostingView.navigationBridge.getter()
{
  _UIHostingView.viewController.getter();
}

uint64_t sub_186EE0CB4(void *a1)
{
  uint64_t v2;

  if (!a1)
    return 0;
  v2 = specialized UIHostingController.navigationBridge.getter();
  swift_retain();

  return v2;
}

void type metadata accessor for WeakBox<UIView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<UIView>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>);
  }
}

uint64_t outlined init with copy of ResolvedButtonStyle(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for ResolvedButtonStyle);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier>)
  {
    type metadata accessor for _ViewModifier_Content<EditModeScopeModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier>);
  }
}

double closure #1 in IncrementalLayoutComputer.Engine.sizeThatFits(_:)()
{
  double v1;

  type metadata accessor for CGSize(0);
  SizeAndSpacingContext.update<A>(_:)();
  return v1;
}

void DragAndDropBridge.updateSpringLoadedInteraction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD aBlock[6];

  v5 = v4;
  v6 = *(_QWORD *)v4;
  v7 = *(_DWORD *)(a1 + 4);
  if (v7 == -1
    || ((v8 = *(_DWORD *)&v4[direct field offset for DragAndDropBridge.canSpringLoadSeed], v8 != -1)
      ? (v9 = v7 == v8)
      : (v9 = 0),
        !v9))
  {
    v10 = direct field offset for DragAndDropBridge.springLoadedInteraction;
    v11 = *(_QWORD *)&v4[direct field offset for DragAndDropBridge.springLoadedInteraction];
    if (v11)
    {
      if ((*(_BYTE *)a1 & 1) == 0)
      {
        v12 = (void *)MEMORY[0x18D760234](&v5[direct field offset for DragAndDropBridge.host]);
        if (v12)
        {
          v13 = v12;
          objc_msgSend(v12, sel_removeInteraction_, v11);

          v14 = *(void **)&v5[v10];
          *(_QWORD *)&v5[v10] = 0;
LABEL_13:

          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_17;
      }
    }
    else if (*(_BYTE *)a1)
    {
      v15 = *MEMORY[0x1E0DEEDD8] & v6;
      v16 = *(_QWORD *)(v15 + 96);
      v17 = *(_QWORD *)(v15 + 104);
      type metadata accessor for DragAndDropBridge.SpringLoadedBehavior(0, v16, v17, a4);
      v18 = v5;
      v29 = (void *)specialized DragAndDropBridge.SpringLoadedBehavior.__allocating_init(bridge:)((uint64_t)v18, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for DragAndDropBridge.SpringLoadedBehavior, (uint64_t (*)(uint64_t))specialized DragAndDropBridge.SpringLoadedBehavior.init(bridge:));

      type metadata accessor for DragAndDropBridge.SpringLoadedEffect(0, v16, v17, v19);
      v20 = v18;
      v21 = (void *)specialized DragAndDropBridge.SpringLoadedBehavior.__allocating_init(bridge:)((uint64_t)v20, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for DragAndDropBridge.SpringLoadedEffect, (uint64_t (*)(uint64_t))specialized DragAndDropBridge.SpringLoadedEffect.init(bridge:));

      v22 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v23 = (_QWORD *)swift_allocObject();
      v23[2] = v16;
      v23[3] = v17;
      v23[4] = v22;
      v24 = objc_allocWithZone(MEMORY[0x1E0DC3C98]);
      aBlock[4] = partial apply for closure #1 in DragAndDropBridge.updateSpringLoadedInteraction(_:);
      aBlock[5] = v23;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UISpringLoadedInteraction, @guaranteed UISpringLoadedInteractionContext) -> ();
      aBlock[3] = &block_descriptor_60;
      v25 = _Block_copy(aBlock);
      swift_retain();
      v26 = objc_msgSend(v24, sel_initWithInteractionBehavior_interactionEffect_activationHandler_, v29, v21, v25);

      _Block_release(v25);
      swift_release();
      swift_release();
      v27 = (void *)MEMORY[0x18D760234](&v20[direct field offset for DragAndDropBridge.host]);
      if (v27)
      {
        v28 = v27;
        objc_msgSend(v27, sel_addInteraction_, v26);

        v14 = *(void **)&v5[v10];
        *(_QWORD *)&v5[v10] = v26;
        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_14:
    *(_DWORD *)&v5[direct field offset for DragAndDropBridge.canSpringLoadSeed] = v7;
  }
}

void DragAndDropBridge.updateDropInteraction(_:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = *(_DWORD *)(a1 + 4);
  if (v2 == -1
    || ((v3 = *(_DWORD *)(v1 + direct field offset for DragAndDropBridge.canDropSeed), v3 != -1)
      ? (v4 = v2 == v3)
      : (v4 = 0),
        !v4))
  {
    v5 = direct field offset for DragAndDropBridge.dropInteraction;
    v6 = *(_QWORD *)(v1 + direct field offset for DragAndDropBridge.dropInteraction);
    if (v6)
    {
      if ((*(_BYTE *)a1 & 1) == 0)
      {
        v7 = (void *)MEMORY[0x18D760234](v1 + direct field offset for DragAndDropBridge.host);
        if (v7)
        {
          v8 = v7;
          objc_msgSend(v7, sel_removeInteraction_, v6);

          v9 = 0;
LABEL_13:
          v12 = *(void **)(v1 + v5);
          *(_QWORD *)(v1 + v5) = v9;

          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_17;
      }
    }
    else if (*(_BYTE *)a1)
    {
      v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3780]), sel_initWithDelegate_, v1);
      v10 = (void *)MEMORY[0x18D760234](v1 + direct field offset for DragAndDropBridge.host);
      if (v10)
      {
        v11 = v10;
        objc_msgSend(v10, sel_addInteraction_, v9);

        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_14:
    *(_DWORD *)(v1 + direct field offset for DragAndDropBridge.canDropSeed) = v2;
  }
}

void DragAndDropBridge.updateDragInteraction(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  id v21;

  v3 = v2;
  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a2 + 92);
  v6 = direct field offset for DragAndDropBridge.hasDragItemsSeed;
  if (v4 == -1
    || ((v7 = *(_DWORD *)(v2 + direct field offset for DragAndDropBridge.hasDragItemsSeed), v7 != -1)
      ? (v8 = v4 == v7)
      : (v8 = 0),
        !v8))
  {
    v9 = direct field offset for DragAndDropBridge.dragInteraction;
    v10 = *(_QWORD *)(v2 + direct field offset for DragAndDropBridge.dragInteraction);
    if (v10)
    {
      if ((*(_BYTE *)a1 & 1) == 0)
      {
        v11 = (void *)MEMORY[0x18D760234](v3 + direct field offset for DragAndDropBridge.host);
        if (v11)
        {
          v12 = v11;
          objc_msgSend(v11, sel_removeInteraction_, v10);

          v13 = 0;
LABEL_13:
          v16 = *(void **)(v3 + v9);
          *(_QWORD *)(v3 + v9) = v13;

          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_24;
      }
    }
    else if (*(_BYTE *)a1)
    {
      v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3750]), sel_initWithDelegate_, v3);
      objc_msgSend(v13, sel_setEnabled_, 1);
      v14 = (void *)MEMORY[0x18D760234](v3 + direct field offset for DragAndDropBridge.host);
      if (v14)
      {
        v15 = v14;
        objc_msgSend(v14, sel_addInteraction_, v13);

        goto LABEL_13;
      }
LABEL_24:
      __break(1u);
      return;
    }
LABEL_14:
    *(_DWORD *)(v3 + v6) = v4;
  }
  v17 = *(void **)(v3 + direct field offset for DragAndDropBridge.dragInteraction);
  if (v17)
  {
    v18 = direct field offset for DragAndDropBridge.dragTimingsSeed;
    if (v5 == -1
      || ((v19 = *(_DWORD *)(v3 + direct field offset for DragAndDropBridge.dragTimingsSeed), v19 != -1)
        ? (v20 = v5 == v19)
        : (v20 = 0),
          !v20))
    {
      v21 = v17;
      DragItemTimings.apply(to:)((UIDragInteraction)v21);

      *(_DWORD *)(v3 + v18) = v5;
    }
  }
}

uint64_t _UIHostingView.initialInheritedEnvironment.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x110));
  v3 = *v2;
  v4 = v2[1];
  *a1 = *v2;
  a1[1] = v4;
  return outlined copy of EnvironmentValues?(v3);
}

uint64_t OutsetByRowInsetsIfNecessary.OutsetLayout.sizeThatFits(in:context:child:)()
{
  double *v0;
  char v1;
  uint64_t result;
  double v3;
  double v4;
  double v5;

  v1 = *(_BYTE *)v0;
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    EdgeInsets.negatedInsets.getter();
    static Edge.Set.vertical.getter();
    EdgeInsets.in(_:)();
    _ProposedSize.inset(by:)();
  }
  result = LayoutProxy.size(in:)();
  if ((v1 & 1) != 0)
  {
    v4 = v3 - v0[1];
    if (v4 > 0.0)
    {
      result = EdgeInsets.vertical.getter();
      if (v5 >= v4)
      {
        static Edge.Set.vertical.getter();
        EdgeInsets.in(_:)();
        return CGSize.inset(by:)();
      }
    }
  }
  return result;
}

uint64_t OutsetByRowInsetsIfNecessary.OutsetLayout.placement(of:in:)()
{
  char v0;
  double v1;
  double v2;
  double v3;
  double *v5;

  PlacementContext.proposedSize.getter();
  PlacementContext.size.getter();
  v0 = *(_BYTE *)v5;
  if ((*(_BYTE *)v5 & 1) != 0)
  {
    EdgeInsets.negatedInsets.getter();
    static Edge.Set.vertical.getter();
    EdgeInsets.in(_:)();
    _ProposedSize.inset(by:)();
  }
  LayoutProxy.size(in:)();
  if ((v0 & 1) != 0 && (v2 = v1 - v5[1], v2 > 0.0) && (EdgeInsets.vertical.getter(), v3 >= v2))
  {
    static UnitPoint.topTrailing.getter();
    return _Placement.init(proposedSize:anchoring:at:)();
  }
  else
  {
    static UnitPoint.topTrailing.getter();
    return _Placement.init(proposedSize:aligning:in:)();
  }
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CGPoint);
}

void closure #1 in _UIHostingView.modifyViewInputs(_:)(_QWORD *a1, id a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = objc_msgSend(a2, sel_traitCollection);
  v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

  UIUserInterfaceIdiom.idiom.getter((uint64_t)v4, (uint64_t)&v10);
  v5 = v10;
  if (v10)
  {
    v6 = &v11;
  }
  else
  {
    v6 = &v13;
    v7 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
    v8 = objc_msgSend(v7, sel_userInterfaceIdiom);

    UIUserInterfaceIdiom.idiom.getter((uint64_t)v8, (uint64_t)&v12);
    v5 = v12;
  }
  v9 = *v6;
  *a1 = v5;
  a1[1] = v9;
}

double UIUserInterfaceIdiom.idiom.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;

  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      AnyInterfaceIdiom.init<A>(_:)();
      result = *(double *)&v4;
      *(_OWORD *)a2 = v4;
      break;
    default:
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      break;
  }
  return result;
}

double closure #1 in ScrollViewLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  _QWORD v20[2];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v12 = a2 & 1;
  v13 = a4 & 1;
  _ProposedSize.inset(by:)();
  v20[1] = a6;
  v21 = v25;
  v22 = v26;
  v23 = v27;
  v24 = v28;
  v20[0] = a5;
  v14 = specialized static ScrollViewUtilities.sizeThatFits(in:contentComputer:axes:)((uint64_t)&v21, v20, a7);
  if ((v15 & 1) != 0)
  {
    v25 = a1;
    v26 = v12;
    v27 = a3;
    v28 = v13;
    *(_QWORD *)&v16 = *(_OWORD *)&_ProposedSize.fixingUnspecifiedDimensions()();
  }
  else
  {
    v16 = *(double *)&v14;
  }
  EdgeInsets.horizontal.getter();
  v18 = v16 + v17;
  EdgeInsets.vertical.getter();
  return v18;
}

void type metadata accessor for [DispatchWorkItemFlags]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [DispatchWorkItemFlags])
  {
    type metadata accessor for DispatchWorkItemFlags();
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags]);
  }
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance ListCollectionViewCellBase<A>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t CellHostingView.hostSafeAreaElements.getter()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  static Semantics.v4.getter();
  v0 = isLinkedOnOrAfter(_:)();
  v1 = MEMORY[0x1E0DEE9D8];
  if ((v0 & 1) == 0)
  {
    v2 = _UIHostingView.hostSafeAreaElements.getter();
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
      v4 = 0;
      v5 = *(_QWORD *)(v1 + 16);
      v6 = 40 * v5;
      do
      {
        v7 = *(_QWORD *)(v2 + v4 + 32);
        v8 = *(_QWORD *)(v2 + v4 + 48);
        v9 = *(_QWORD *)(v2 + v4 + 64);
        v10 = *(_QWORD *)(v1 + 24);
        v11 = v5 + 1;
        if (v5 >= v10 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v5 + 1, 1);
        *(_QWORD *)(v1 + 16) = v11;
        v12 = (_QWORD *)(v1 + v6 + v4);
        v12[4] = v7;
        v12[5] = 0;
        v12[6] = v8;
        v12[7] = 0;
        v12[8] = v9;
        v4 += 40;
        v5 = v11;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t outlined release of Path(uint64_t a1)
{
  outlined consume of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t initializeWithCopy for ListRepresentable(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  v4 = v3;
  return a1;
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void type metadata accessor for Date?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
  }
}

void protocol witness for ColorProvider.resolve(in:) in conformance UIColor(uint64_t *a1)
{
  void **v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  int v7;

  v2 = *v1;
  v3 = *a1;
  v4 = a1[1];
  if (_UIColorDependsOnTraitCollection(v2))
  {
    v5 = (void *)MEMORY[0x18D75F7B4]();
    closure #1 in UIColor.resolve(in:)(v3, v4, v2, &v7);
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    v6 = objc_msgSend(v2, sel_CGColor);
    Color.Resolved.init(_:)();
  }
}

void UIColor.resolve(in:)(uint64_t *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  int v6;

  v2 = *a1;
  v3 = a1[1];
  if (_UIColorDependsOnTraitCollection(v1))
  {
    v4 = (void *)MEMORY[0x18D75F7B4]();
    closure #1 in UIColor.resolve(in:)(v2, v3, v1, &v6);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    v5 = objc_msgSend(v1, sel_CGColor);
    Color.Resolved.init(_:)();
  }
}

uint64_t outlined consume of _ShapeStyle_Shape.Result(uint64_t a1, char a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      result = swift_release();
      break;
    case 1:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of _ShapeStyle_Shape.Result(uint64_t a1, char a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      result = swift_retain();
      break;
    case 1:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags))
  {
    type metadata accessor for Locale.Language();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags));
  }
}

void *outlined consume of ResolvedTextSuffix(void *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    outlined consume of Text.Layout.Line.Line(result, a2, a3 & 1);
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for Text.Style?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Text.Style?)
  {
    type metadata accessor for Text.Style();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?);
  }
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for NSAttributedStringKey);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v7;

    return swift_bridgeObjectRelease();
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9B8] + 8;
    outlined destroy of AccessibilityTableContext?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a2, v8);

    return outlined destroy of AccessibilityTableContext?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Any?, v6);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  type metadata accessor for CommandOperation?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CommandOperation();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, double))(v15 + 48))(a1, 1, v12) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation?);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a2, (uint64_t)v9);

    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation?);
  }
  else
  {
    outlined init with take of TableCellFormula(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v19;

    return swift_bridgeObjectRelease();
  }
}

void type metadata accessor for CTFontRef(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CTFontRef);
}

uint64_t outlined copy of _ViewList_ID.Canonical?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_retain();
  return result;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, MEMORY[0x1E0CE5210], (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>>);
  }
}

uint64_t outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for Button(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined destroy of LocationBasedSensoryFeedback?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t type metadata accessor for ResolvedButtonStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedButtonStyle);
}

uint64_t outlined init with copy of TableRowList?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with copy of ScrollableCollection?(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v7;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t initializeWithCopy for ButtonAction(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  id v27;
  uint64_t v28;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v22 = *(_QWORD *)a2;
    v23 = *(_QWORD *)(a2 + 8);
    v24 = *(_BYTE *)(a2 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v23, v24);
    *(_QWORD *)a1 = v22;
    *(_QWORD *)(a1 + 8) = v23;
    *(_BYTE *)(a1 + 16) = v24;
    v25 = *(_QWORD *)(a2 + 40);
    v26 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 40) = v25;
    v27 = (id)v26;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v28 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v28;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 34);
  v10 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v6, v7, v8, v10, v9);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 34) = v9;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_BYTE *)(a2 + 74);
  v16 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v11, v12, v13, v14, v16, v15);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  *(_WORD *)(a1 + 72) = v16;
  *(_BYTE *)(a1 + 74) = v15;
  v17 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v18 + *(int *)(v21 + 20)) = *(_BYTE *)(v19 + *(int *)(v21 + 20));
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t type metadata accessor for _TaskModifier.InnerModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _TaskModifier.InnerModifier);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return outlined init with take of Any(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for NSAttributedStringKey(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void type metadata accessor for _DictionaryStorage<AnyHashable, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  }
}

void type metadata accessor for ViewList?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ViewList?)
  {
    type metadata accessor for ViewList();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewList?);
  }
}

void UIKitInspectorV3Bridge.update(environment:)(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v2)
  {
    if (*(_BYTE *)(v1 + direct field offset for UIKitInspectorV3Bridge.wasBackgrounded) == 1)
    {
      *(_BYTE *)(v1 + direct field offset for UIKitInspectorV3Bridge.wasBackgrounded) = 0;
      UIKitInspectorV3Bridge.updateTransform()();
    }
  }
  else
  {
    *(_BYTE *)(v1 + direct field offset for UIKitInspectorV3Bridge.wasBackgrounded) = 1;
  }
}

uint64_t key path getter for EnvironmentValues.scenePhase : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.scenePhase.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t type metadata accessor for _UIInheritedView()
{
  return objc_opt_self();
}

void destroy for ForEach<>.PreferenceTransform.Item(id *a1)
{

}

uint64_t protocol witness for PlatformViewRepresentable.overrideSizeThatFits(_:in:platformView:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return PlatformViewRepresentableAdaptor.overrideSizeThatFits(_:in:platformView:)(a1, a2, *a3, a4);
}

uint64_t PlatformViewRepresentableAdaptor.overrideSizeThatFits(_:in:platformView:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = *((_BYTE *)a2 + 8);
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  v8 = *a2;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)(a4 + 24) + 88))(a1, &v8, a3, *(_QWORD *)(a4 + 16));
}

uint64_t ViewLeafView.layoutTraits()@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  AGGraphClearUpdate();
  closure #1 in ViewLeafView.layoutTraits()(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return AGGraphSetUpdate();
}

double closure #1 in ViewLeafView.layoutTraits()@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  double result;
  _OWORD v15[2];
  __int128 v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)v15 - v9;
  v12 = type metadata accessor for ViewLeafView(0, a1, a2, v11);
  PlatformViewHost.layoutTraits()(v15);
  ViewLeafView.representedViewProvider.getter(v12, (uint64_t)v10);
  (*(void (**)(_OWORD *, char *, uint64_t, uint64_t))(a2 + 112))(v15, v10, a1, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  v13 = v15[1];
  *a3 = v15[0];
  a3[1] = v13;
  result = *(double *)&v16;
  a3[2] = v16;
  return result;
}

uint64_t protocol witness for PlatformViewRepresentable.overrideLayoutTraits(_:for:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return PlatformViewRepresentableAdaptor.overrideLayoutTraits(_:for:)(a1, *a2, a3);
}

uint64_t PlatformViewRepresentableAdaptor.overrideLayoutTraits(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 96))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t PlatformViewHost.layoutTraits()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD0);
  if ((v3[48] & 1) != 0)
  {
    result = PlatformViewHost.intrinsicLayoutTraits()();
    v6 = v11;
    v5 = v12;
    v8 = v13;
    v7 = v14;
    v10 = v15;
    v9 = v16;
    *(_QWORD *)v3 = v11;
    *((_QWORD *)v3 + 1) = v12;
    *((_QWORD *)v3 + 2) = v13;
    *((_QWORD *)v3 + 3) = v14;
    *((_QWORD *)v3 + 4) = v15;
    *((_QWORD *)v3 + 5) = v16;
    v3[48] = 0;
  }
  else
  {
    v10 = *((_QWORD *)v3 + 4);
    v9 = *((_QWORD *)v3 + 5);
    v8 = *((_QWORD *)v3 + 2);
    v7 = *((_QWORD *)v3 + 3);
    v6 = *(_QWORD *)v3;
    v5 = *((_QWORD *)v3 + 1);
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v8;
  a1[3] = v7;
  a1[4] = v10;
  a1[5] = v9;
  return result;
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance PlainButtonStyleBase@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  double v8;
  double v9;
  uint64_t result;

  v4 = *(_QWORD *)v2;
  v5 = *(_BYTE *)(v2 + 8);
  v6 = *(unsigned __int8 *)(a1 + 2);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v7 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  v8 = 1.0;
  if (v6)
    v8 = 0.75;
  if ((v7 & 1) != 0)
    v9 = v8;
  else
    v9 = 0.5;
  result = static VerticalAlignment.center.getter();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(double *)(a2 + 24) = v9;
  return result;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;

  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain();
  v3 = static os_log_type_t.fault.getter();
  v4 = static Log.runtimeIssuesLog.getter();
  v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v10 = v7;
    *(_DWORD *)v6 = 136315138;
    v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1819242306, 0xE400000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v7, -1, -1);
    MEMORY[0x18D760108](v6, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined consume of Environment<Bool>.Content(a1, 0);
  swift_release();
  swift_release();
  return v9;
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0x6C616E6F6974704FLL, 0xEE003E6C6F6F423CLL, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000017, 0x8000000187BDF330, (void (*)(uint64_t, _QWORD))outlined consume of Environment<AnyShapeStyle?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000015, 0x8000000187BDF240, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Color?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0x6C616E6F6974704FLL, 0xEF3E726F6C6F433CLL, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Color?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD00000000000001ELL, 0x8000000187BDF720, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0x696C696269736956, 0xEA00000000007974, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 1701605202, 0xE400000000000000, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
}

{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if ((a2 & 1) == 0)
  {
    swift_retain();
    v3 = static os_log_type_t.fault.getter();
    v4 = static Log.runtimeIssuesLog.getter();
    v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v9 = v7;
      *(_DWORD *)v6 = 136315138;
      v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x8000000187BDF4B0, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v7, -1, -1);
      MEMORY[0x18D760108](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(a1, 0);
    swift_release();
    swift_release();
    return v10;
  }
  return a1;
}

{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if ((a2 & 1) == 0)
  {
    swift_retain();
    v3 = static os_log_type_t.fault.getter();
    v4 = static Log.runtimeIssuesLog.getter();
    v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v10 = v7;
      *(_DWORD *)v6 = 136315138;
      v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x8000000187BDF620, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v7, -1, -1);
      MEMORY[0x18D760108](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(a1, 0);
    swift_release();
    swift_release();
    LODWORD(a1) = (unsigned __int16)v9 | (BYTE2(v9) << 16);
  }
  return a1 & 0xFFFFFF;
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000018, 0x8000000187BDF760);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000016, 0x8000000187BDF600);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000011, 0x8000000187BDF5E0, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content);
}

{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;

  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain();
  v3 = static os_log_type_t.fault.getter();
  v4 = static Log.runtimeIssuesLog.getter();
  v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v10 = v7;
    *(_DWORD *)v6 = 136315138;
    v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x8000000187BDF370, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v7, -1, -1);
    MEMORY[0x18D760108](v6, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined consume of Environment<Bool>.Content(a1, 0);
  swift_release();
  swift_release();
  return v9;
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000014, 0x8000000187BDF460, (void (*)(uint64_t, _QWORD))outlined consume of Environment<ControlSize>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000028, 0x8000000187BDF480);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 1953394502, 0xE400000000000000);
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePlatformItemList:) in conformance ListCollectionViewCellBase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)(a2, a3, a4);
}

uint64_t ListCollectionViewCellBase.selectionBehavior.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior);
  v3 = *(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 8);
  v4 = *(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 16);
  v5 = *(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 24);
  v6 = *(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 32);
  v7 = *(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 40);
  v8 = *(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 48);
  v9 = *(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 56);
  v10 = *(_BYTE *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 64);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  LOBYTE(v12) = v10;
  return outlined consume of PlatformItemList.Item.SelectionBehavior?(v2, v3, v4, v5, v6, v7, v8, v9, v12, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

uint64_t outlined consume of PlatformItemList.Item.SelectionBehavior?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t), uint64_t (*a11)(uint64_t, uint64_t))
{
  uint64_t result;

  if (a2 != 1)
  {
    a10(a2, a3);
    a10(a4, a5);
    return a11(a6, a7);
  }
  return result;
}

uint64_t PlatformItemList.containerSelectionBehavior.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)();
  uint64_t result;
  uint64_t (*v55)(char);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v56 = 0;
    v50 = 0;
    v53 = 0;
    v52 = 0;
    v55 = 0;
    result = 0;
    v51 = 1;
    goto LABEL_51;
  }
  v62 = a2;
  v63 = a1;
  v73 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  swift_bridgeObjectRetain();
  v64 = 0;
  v67 = 0;
  LODWORD(v66) = 0;
  v10 = 0;
  v71 = -(uint64_t)v9;
  v69 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v70 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v68 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v72 = v5;
  v65 = v9;
LABEL_3:
  if (v10 <= v9)
    v11 = v9;
  else
    v11 = v10;
  v12 = -(uint64_t)v11;
  ++v10;
  do
  {
    if (v12 + v10 == 1)
    {
      __break(1u);
LABEL_53:
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    outlined init with copy of PlatformItemList.Item(v73 + *(_QWORD *)(v5 + 72) * (v10 - 1), (uint64_t)v8);
    v14 = *((_QWORD *)v8 + 50);
    v13 = *((_QWORD *)v8 + 51);
    v16 = *((_QWORD *)v8 + 52);
    v15 = *((_QWORD *)v8 + 53);
    v18 = *((_QWORD *)v8 + 54);
    v17 = *((_QWORD *)v8 + 55);
    v19 = *((_QWORD *)v8 + 56);
    v20 = v8[464];
    LOBYTE(v59) = v20;
    v74 = *((_QWORD *)v8 + 57);
    v75 = v19;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v14, v13, v16, v15, v18, v17, v19, v74, v59, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    if (v13 != 1)
    {
      if ((v14 & 0x100) != 0)
      {
        if (v13)
        {
          v21 = swift_allocObject();
          *(_QWORD *)(v21 + 16) = v13;
          *(_QWORD *)(v21 + 24) = v16;
          v66 = v21;
          swift_retain_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
          v23 = v68[2];
          v22 = v68[3];
          v24 = v23 + 1;
          if (v23 >= v22 >> 1)
          {
            v61 = v23 + 1;
            v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v68);
            v24 = v61;
            v68 = v44;
          }
          v25 = v68;
          v68[2] = v24;
          v26 = &v25[2 * v23];
          v27 = v66;
          v26[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
          v26[5] = v27;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
        }
        v9 = v65;
        if (v15)
        {
          v28 = swift_allocObject();
          *(_QWORD *)(v28 + 16) = v15;
          *(_QWORD *)(v28 + 24) = v18;
          v66 = v28;
          swift_retain_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
          v30 = v69[2];
          v29 = v69[3];
          v31 = v30 + 1;
          if (v30 >= v29 >> 1)
          {
            v61 = v30 + 1;
            v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v69);
            v31 = v61;
            v69 = v45;
          }
          v32 = v69;
          v69[2] = v31;
          v33 = &v32[2 * v30];
          v34 = v66;
          v33[4] = partial apply for thunk for @callee_guaranteed () -> ();
          v33[5] = v34;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
          v9 = v65;
        }
        if (v17)
        {
          v35 = swift_allocObject();
          *(_QWORD *)(v35 + 16) = v17;
          v66 = v35;
          *(_QWORD *)(v35 + 24) = v75;
          swift_retain_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70[2] + 1, 1, v70);
          v37 = v70[2];
          v36 = v70[3];
          v38 = v37 + 1;
          if (v37 >= v36 >> 1)
          {
            v61 = v37 + 1;
            v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v70);
            v38 = v61;
            v70 = v46;
          }
          v39 = v70;
          v70[2] = v38;
          v40 = &v39[2 * v37];
          v41 = v66;
          v40[4] = partial apply for thunk for @escaping @callee_guaranteed (@unowned ()?) -> (@unowned Bool);
          v40[5] = v41;
          v42 = v75;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
          v43 = v42;
          v9 = v65;
        }
        else
        {
          v43 = v75;
        }
        LODWORD(v67) = v67 | v14;
        HIDWORD(v67) |= (v14 >> 16) & 1;
        LOBYTE(v59) = v20;
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v14, v13, v16, v15, v18, v17, v43, v74, v59, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
        if ((_DWORD)v64)
        {
          LODWORD(v66) = 1;
          v5 = v72;
          if (v71 + v10)
            goto LABEL_3;
        }
        else
        {
          v64 = BYTE4(v14);
          LODWORD(v66) = 1;
          v5 = v72;
          if (v71 + v10)
            goto LABEL_3;
        }
        goto LABEL_53;
      }
      LOBYTE(v59) = v20;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v14, v13, v16, v15, v18, v17, v75, v74, v59, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    }
    ++v10;
    v5 = v72;
  }
  while (v71 + v10 != 1);
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v56 = 0;
    v50 = 0;
    v53 = 0;
    v52 = 0;
    v55 = 0;
    result = 0;
    v51 = 1;
    a2 = v62;
    goto LABEL_51;
  }
LABEL_37:
  a2 = v62;
  v47 = v69;
  v48 = v70;
  v49 = v68;
  if (v68[2])
  {
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = v49;
    v51 = (uint64_t)partial apply for specialized closure #1 in PlatformItemList.containerSelectionBehavior.getter;
    if (v47[2])
      goto LABEL_39;
LABEL_44:
    swift_bridgeObjectRelease();
    v53 = 0;
    v52 = 0;
    if (v48[2])
      goto LABEL_40;
LABEL_45:
    swift_bridgeObjectRelease();
    v55 = 0;
    result = 0;
    goto LABEL_46;
  }
  swift_bridgeObjectRelease();
  v51 = 0;
  v50 = 0;
  if (!v47[2])
    goto LABEL_44;
LABEL_39:
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v47;
  v53 = partial apply for specialized closure #2 in PlatformItemList.containerSelectionBehavior.getter;
  if (!v48[2])
    goto LABEL_45;
LABEL_40:
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v48;
  v55 = partial apply for specialized closure #3 in PlatformItemList.containerSelectionBehavior.getter;
LABEL_46:
  v57 = 256;
  if ((v67 & 1) != 0)
    v57 = 257;
  v58 = 0x10000;
  if ((v67 & 0x100000000) == 0)
    v58 = 0;
  v56 = v57 | (v64 << 32) | v58;
LABEL_51:
  *(_QWORD *)a2 = v56;
  *(_QWORD *)(a2 + 8) = v51;
  *(_QWORD *)(a2 + 16) = v50;
  *(_QWORD *)(a2 + 24) = v53;
  *(_QWORD *)(a2 + 32) = v52;
  *(_QWORD *)(a2 + 40) = v55;
  *(_QWORD *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  return result;
}

void type metadata accessor for UIEdgeInsets?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIEdgeInsets?)
  {
    type metadata accessor for UIEdgeInsets(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIEdgeInsets?);
  }
}

uint64_t destroy for _TaskModifier.InnerModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release();
  v2 = a1 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for _TaskModifier.InnerModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for TaskPriority();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for _TaskModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _TaskModifier);
}

uint64_t lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<FocusItem?> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<FocusItem?> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<FocusItem?> and conformance External<A>)
  {
    type metadata accessor for External<FocusItem?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<FocusItem?> and conformance External<A>);
  }
  return result;
}

unint64_t type metadata accessor for EventType()
{
  unint64_t result;

  result = lazy cache variable for type metadata for EventType;
  if (!lazy cache variable for type metadata for EventType)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventType);
  }
  return result;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePreferences:) in conformance ListCollectionViewCellBase<A>()
{
  return specialized ListCollectionViewCellBase.hostingView<A>(_:didChangePreferences:)();
}

void closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePreferences:)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(_QWORD);
  void *v4;
  _BYTE v5[16];

  v3 = (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>?;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>?);
  if ((v5[8] & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v4 = (void *)MEMORY[0x18D760234](v5);
    v3 = (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, v3);
  objc_msgSend(a2, sel__setPopupMenuButton_, v4);

}

uint64_t type metadata accessor for CollectionViewCellModifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CollectionViewCellModifier;
  if (!type metadata singleton initialization cache for CollectionViewCellModifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v2 = v1;
  type metadata accessor for Environment<UIListContentConfiguration?>.Content(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of TableCellFormula((uint64_t)v7, a1, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  v10 = static os_log_type_t.fault.getter();
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136315138;
    v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x8000000187BDF430, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v2 = v1;
  type metadata accessor for Environment<URL?>.Content(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of TableCellFormula((uint64_t)v7, a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  v10 = static os_log_type_t.fault.getter();
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136315138;
    v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6C616E6F6974704FLL, 0xED00003E4C52553CLL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v2 = v1;
  type metadata accessor for Environment<Predicate<Pack{URL}>?>.Content(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of TableCellFormula((uint64_t)v7, a1, (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>?);
  v10 = static os_log_type_t.fault.getter();
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136315138;
    v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x8000000187BDF280, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v2 = v1;
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of TableCellFormula((uint64_t)v7, a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  v10 = static os_log_type_t.fault.getter();
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136315138;
    v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x8000000187BDF670, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  return specialized Environment.wrappedValue.getter((uint64_t (*)(_QWORD))type metadata accessor for Environment<Locale>.Content, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0E38], 0x656C61636F4CLL, 0xE600000000000000, a1);
}

{
  return specialized Environment.wrappedValue.getter((uint64_t (*)(_QWORD))type metadata accessor for Environment<Calendar>.Content, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB11F0], 0x7261646E656C6143, 0xE800000000000000, a1);
}

{
  return specialized Environment.wrappedValue.getter((uint64_t (*)(_QWORD))type metadata accessor for Environment<TimeZone>.Content, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB1470], 0x656E6F5A656D6954, 0xE800000000000000, a1);
}

{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 72) == 1)
  {
    v4 = *(_DWORD *)(v1 + 16);
    v5 = *(_QWORD *)(v1 + 8);
    *(_BYTE *)a1 = v3 & 1;
    *(_BYTE *)(a1 + 1) = BYTE1(v3);
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = v4 & 1;
    *(_BYTE *)(a1 + 17) = BYTE1(v4) & 1;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
    return outlined retain of Environment<HeaderFooterConfiguration>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  }
  else
  {
    outlined retain of Environment<HeaderFooterConfiguration>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    v7 = static os_log_type_t.fault.getter();
    v8 = static Log.runtimeIssuesLog.getter();
    v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v12 = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x8000000187BDF7A0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v11, -1, -1);
      MEMORY[0x18D760108](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined retain of Environment<HeaderFooterConfiguration>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    swift_release();
    return swift_release();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v2 = v1;
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of TableCellFormula((uint64_t)v7, a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
  v10 = static os_log_type_t.fault.getter();
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136315138;
    v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x8000000187BDF180, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v2 = v1;
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of TableCellFormula((uint64_t)v7, a1, type metadata accessor for DismissSearchAccessoryAction);
  v10 = static os_log_type_t.fault.getter();
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136315138;
    v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000187BDF050, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v2 = v1;
  type metadata accessor for Environment<CellConfiguration>.Content(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of TableCellFormula((uint64_t)v7, a1, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
  v10 = static os_log_type_t.fault.getter();
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136315138;
    v15[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000187BDF700, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v3;
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10[19];
  _BYTE v11[152];
  _BYTE v12[160];

  outlined init with take of TableCellFormula(v1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  if (_s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOg((uint64_t)v12) == 1)
  {
    outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
    v3 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v10);
    outlined init with take of PresentSharingPickerAction?(v3, a1);
    return outlined retain of Environment<PresentSharingPickerAction?>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<PresentSharingPickerAction?>.Content);
  }
  else
  {
    outlined retain of Environment<PresentSharingPickerAction?>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<PresentSharingPickerAction?>.Content);
    v5 = static os_log_type_t.fault.getter();
    v6 = static Log.runtimeIssuesLog.getter();
    v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10[0] = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x8000000187BDF550, v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v9, -1, -1);
      MEMORY[0x18D760108](v8, -1, -1);
    }

    outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v10);
    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined retain of Environment<PresentSharingPickerAction?>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<PresentSharingPickerAction?>.Content);
    swift_release();
    return swift_release();
  }
}

{
  uint64_t v1;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  char v11;

  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v1, (uint64_t)v10);
  if (v11 == 1)
    return outlined init with take of ToolbarItemPlacement.Role((uint64_t)v10, a1);
  v4 = static os_log_type_t.fault.getter();
  v5 = static Log.runtimeIssuesLog.getter();
  v6 = v4;
  if (os_log_type_enabled(v5, v4))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v9 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1701605202, 0xE400000000000000, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v8, -1, -1);
    MEMORY[0x18D760108](v7, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t outlined init with copy of AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AccessibilityScrollableContext(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;

  v4 = *(unsigned __int8 *)(a2 + 70);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    LOBYTE(v4) = 2;
  }
  else if (v4 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    LOBYTE(v4) = 0;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  }
  *(_BYTE *)(a1 + 70) = v4;
  swift_retain();
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, AccessibilityScrollableContextModifier>, type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>);
}

uint64_t ListCollectionViewCellBase.hostingView<A>(_:willUpdate:)(uint64_t a1, uint64_t a2)
{
  return specialized ListCollectionViewCellBase.hostingView<A>(_:willUpdate:)(a2);
}

uint64_t outlined destroy of IntelligenceElement?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for UIListContentConfiguration?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for UIListContentConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC23A0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for WeakBox<UIButton>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WeakBox<UIButton>?, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<UIButton>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t EnvironmentValues.listCellState.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListCellStateKey>, (uint64_t)&unk_1E1ABF7B8, (uint64_t)&protocol witness table for ListCellStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListCellStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListCellStateKey>, (uint64_t)&unk_1E1ABF7B8, (uint64_t)&protocol witness table for ListCellStateKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t outlined destroy of AccessibilityScrollableContextModifier(uint64_t a1)
{
  destroy for AccessibilityScrollableContextModifier(a1);
  return a1;
}

uint64_t outlined init with copy of AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AccessibilityScrollableContextModifier(a2, a1);
  return a2;
}

void type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityListCoreCellModifier<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AccessibilityListCoreCellModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityListCoreCellModifier<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>>);
  }
}

uint64_t destroy for AccessibilityListCoreCellModifier(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = a1 + 8;
  v3 = *(unsigned __int8 *)(a1 + 78);
  if (v3 == 2)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(result);
    return swift_release();
  }
  if (v3 != 1)
  {
    if (*(_BYTE *)(a1 + 78))
      return result;
    goto LABEL_4;
  }
  return swift_release();
}

void type metadata accessor for _AnyPreferenceKey<ViewRespondersKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>)
  {
    v0 = type metadata accessor for _AnyPreferenceKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>);
  }
}

void CellHostingView.modifyViewInputs(_:)(uint64_t a1)
{
  UIItemHostingView.modifyViewInputs(_:)(a1);
}

uint64_t sub_186EE4440()
{
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  return PropertyList.subscript.setter();
}

void UIItemHostingView.modifyViewInputs(_:)(uint64_t a1)
{
  _UIHostingView.modifyViewInputs(_:)(a1);
}

uint64_t sub_186EE4494()
{
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  return PropertyList.subscript.setter();
}

float specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  if ((a3 & 1) != 0)
    return *(float *)&a1;
  swift_retain();
  v5 = static os_log_type_t.fault.getter();
  v6 = static Log.runtimeIssuesLog.getter();
  v7 = v5;
  if (os_log_type_enabled(v6, v5))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v11 = v9;
    *(_DWORD *)v8 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6465766C6F736552, 0xE800000000000000, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v9, -1, -1);
    MEMORY[0x18D760108](v8, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined consume of Environment<CGFloat?>.Content(a1, a2, 0);
  swift_release();
  swift_release();
  return *(float *)&v11;
}

void type metadata accessor for DropDelegate?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = type metadata accessor for ContainerBackgroundHost(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = a4(a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

double static ScrollViewUtilities.contentFrame(in:contentComputer:axes:)@<D0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v5 = *a1;
  v9 = a1[1];
  _ProposedSize.init(_:)();
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    *(_QWORD *)&v10 = v14;
    BYTE8(v10) = v15;
    *(_QWORD *)&v11 = v16;
    BYTE8(v11) = v17;
    _ProposedSize.width.getter();
  }
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    *(_QWORD *)&v10 = v14;
    BYTE8(v10) = v15;
    *(_QWORD *)&v11 = v16;
    BYTE8(v11) = v17;
    _ProposedSize.height.getter();
  }
  _ProposedSize.init(width:height:)();
  if (a2)
  {
    if (v5)
    {
      v6 = v5;
      v7 = v9;
    }
    else
    {
      static LayoutComputer.defaultValue.getter();
      v6 = v14;
      v7 = v15;
    }
    v12 = v6;
    v13 = v7;
    swift_retain();
    LayoutComputer.sizeThatFits(_:)();
    swift_release();
    Axis.Set.contains(_:)();
    Axis.Set.contains(_:)();
  }
  if ((Axis.Set.contains(_:)() & 1) == 0 || (Axis.Set.contains(_:)() & 1) == 0)
  {
    Axis.Set.contains(_:)();
    Axis.Set.contains(_:)();
  }
  ViewOrigin.init(_:)();
  ViewSize.init(_:proposal:)();
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v13;
  result = *(double *)&v10;
  *(_OWORD *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 32) = v11;
  return result;
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t UINavigationItem.hasContent.getter()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  char v25;
  uint64_t result;
  int v27;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_leftBarButtonItems);
  if (!v2)
    goto LABEL_6;
  v3 = v2;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v5)
  {
    v6 = 1;
  }
  else
  {
LABEL_6:
    v7 = objc_msgSend(v1, sel_leadingItemGroups);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v6 = v9 != 0;
  }
  v10 = objc_msgSend(v1, sel_rightBarButtonItems);
  if (!v10)
    goto LABEL_14;
  v11 = v10;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v13)
  {
    v14 = 1;
  }
  else
  {
LABEL_14:
    v15 = objc_msgSend(v1, sel_trailingItemGroups);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v14 = v17 != 0;
  }
  v18 = objc_msgSend(v1, sel__bottomPalette);

  v19 = objc_msgSend(v1, sel_searchController);
  v20 = v19;
  if (v19)

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v21 = objc_msgSend(v1, sel_centerItemGroups);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v24 = v23 != 0;
  }
  else
  {
    v24 = 0;
  }
  v25 = UINavigationItem.hasLargeContent.getter() | v6;
  result = 1;
  if ((v25 & 1) == 0 && !v18)
  {
    if (v20)
      v27 = 1;
    else
      v27 = v24;
    return v14 | v27;
  }
  return result;
}

uint64_t UINavigationItem.hasLargeContent.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  id v8;

  v1 = objc_msgSend(v0, sel_title);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    swift_bridgeObjectRelease();
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v3 & 0xFFFFFFFFFFFFLL;
    v7 = v6 == 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = objc_msgSend(v0, sel_titleView);
  if (v8)
  {

  }
  else if (v7)
  {
    return 0;
  }
  return 1;
}

void SharingActivityPickerBridge.preferencesDidChange(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[9];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[10];
  _BYTE v41[152];
  _QWORD v42[19];
  _OWORD v43[8];
  __int128 v44;
  int v45;
  _BYTE v46[136];
  _BYTE v47[136];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v2 = v1;
  v42[0] = *a1;
  PreferenceList.subscript.getter();
  v3 = *(_QWORD *)&v43[0];
  if (*(_QWORD *)(*(_QWORD *)&v43[0] + 16) > 1uLL)
    goto LABEL_7;
  v4 = (void *)SharingActivityPickerBridge.presenter.getter();
  if (!v4)
    goto LABEL_7;
  v5 = v4;
  if (DWORD2(v43[0]) != -1)
  {
    v6 = *(_DWORD *)(v1 + 216);
    if (v6 != -1 && DWORD2(v43[0]) == v6)
    {

LABEL_7:
      swift_bridgeObjectRelease();
      return;
    }
  }
  *(_DWORD *)(v1 + 216) = DWORD2(v43[0]);
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = *(_OWORD *)(v3 + 144);
    v43[6] = *(_OWORD *)(v3 + 128);
    v43[7] = v7;
    v44 = *(_OWORD *)(v3 + 160);
    v45 = *(_DWORD *)(v3 + 176);
    v8 = *(_OWORD *)(v3 + 80);
    v43[2] = *(_OWORD *)(v3 + 64);
    v43[3] = v8;
    v9 = *(_OWORD *)(v3 + 112);
    v43[4] = *(_OWORD *)(v3 + 96);
    v43[5] = v9;
    v10 = *(_OWORD *)(v3 + 48);
    v43[0] = *(_OWORD *)(v3 + 32);
    v43[1] = v10;
    outlined retain of SharingActivityPickerPresentation((uint64_t *)v43);
    swift_bridgeObjectRelease();
    outlined init with take of SharingActivityPickerPresentation?(v1 + 56, (uint64_t)v41);
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)v41, (uint64_t)v42);
    if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v42) == 1)
    {
      SharingActivityPickerBridge.present(_:presenter:)((uint64_t)v43, v5);

LABEL_27:
      outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>((uint64_t *)v43);
      return;
    }
    outlined init with take of SharingPickerSource((uint64_t)v43, (uint64_t)v46);
    outlined init with take of SharingPickerSource((uint64_t)v46, (uint64_t)v47);
    if (_s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v47) == 1)
    {
      v11 = *(_QWORD *)(_s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v47) + 24);
      outlined init with take of SharingActivityPickerPresentation?((uint64_t)v41, (uint64_t)v40);
      outlined retain of SharingActivityPickerPresentation((uint64_t *)v40);
    }
    else
    {
      v12 = (__int128 *)_s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v47);
      v13 = v12[5];
      v52 = v12[4];
      v53 = v13;
      v14 = v12[7];
      v54 = v12[6];
      v55 = v14;
      v15 = v12[1];
      v48 = *v12;
      v49 = v15;
      v16 = v12[3];
      v50 = v12[2];
      v51 = v16;
      v30 = v52;
      v31 = v53;
      v32 = v54;
      v33 = v55;
      v26 = v48;
      v27 = v49;
      v28 = v50;
      v29 = v16;
      outlined init with take of SharingActivityPickerPresentation?((uint64_t)v41, (uint64_t)v40);
      outlined retain of SharingActivityPickerPresentation((uint64_t *)v40);
      type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>();
      MEMORY[0x18D75B9C8](v34);
      if (v35 == 1)
      {
LABEL_26:

        outlined release of SharingActivityPickerPresentation?((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of SharingActivityPickerPresentation?);
        goto LABEL_27;
      }
      v11 = v34[0];
      outlined consume of AnyIdentifiableShareConfiguration?(v34[0], v34[1], v34[2], v34[3], v34[4], v34[5], v34[6], v34[7], v34[8], v35, v36, v37, v38, v39, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    }
    outlined init with take of SharingPickerSource((uint64_t)v42, (uint64_t)v34);
    v17 = _s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v34);
    v18 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v34);
    if (v17 == 1)
    {
      if (v11 != *(_QWORD *)(v18 + 24))
        goto LABEL_26;
    }
    else
    {
      v19 = *(_OWORD *)v18;
      v20 = *(_OWORD *)(v18 + 16);
      v21 = *(_OWORD *)(v18 + 48);
      v40[2] = *(_OWORD *)(v18 + 32);
      v40[3] = v21;
      v40[0] = v19;
      v40[1] = v20;
      v22 = *(_OWORD *)(v18 + 64);
      v23 = *(_OWORD *)(v18 + 80);
      v24 = *(_OWORD *)(v18 + 112);
      v40[6] = *(_OWORD *)(v18 + 96);
      v40[7] = v24;
      v40[4] = v22;
      v40[5] = v23;
      type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>();
      MEMORY[0x18D75B9C8](&v26);
      if (*((_QWORD *)&v30 + 1) == 1)
        goto LABEL_26;
      v25 = v26;
      outlined consume of AnyIdentifiableShareConfiguration?(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
      if (v11 != v25)
        goto LABEL_26;
    }
    outlined init with take of SharingActivityPickerPresentation?(v2 + 56, (uint64_t)&v26);
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)&v26, (uint64_t)v40);
    if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v40) == 1)
    {
      __break(1u);
      return;
    }
    *(_QWORD *)(v2 + 192) = *((_QWORD *)&v44 + 1);
    swift_retain();
    swift_release();
    SharingActivityPickerBridge.updateAnchor(deferred:)(0);
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  outlined init with take of SharingActivityPickerPresentation?(v1 + 56, (uint64_t)v42);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v42, (uint64_t)v43);
  if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v43) != 1)
    SharingActivityPickerBridge.reset()();

}

uint64_t SharingActivityPickerBridge.presenter.getter()
{
  uint64_t v0;
  uint64_t result;

  result = MEMORY[0x18D760234](v0 + 40);
  if (!result)
  {
    result = MEMORY[0x18D760234](v0 + 16);
    if (result)
      _UIHostingView.presenterViewController.getter();
    __break(1u);
  }
  return result;
}

uint64_t ShareConfigurationBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  swift_retain();
  swift_beginAccess();
  specialized VersionSeedTracker.didChange(_:action:)(v2, (_DWORD *)(v1 + 24), (void (*)(uint64_t *))partial apply for implicit closure #2 in implicit closure #1 in ShareConfigurationBridge.preferencesDidChange(_:));
  swift_endAccess();
  return swift_release();
}

uint64_t UIKitInspectorV3Bridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  _DWORD v3[2];
  uint64_t v4;
  uint64_t v5[18];
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v5[0] = *a1;
  v1 = v5[0];
  UIKitInspectorV3Bridge.updateInspectorIfNeeded(_:)(v5);
  v5[0] = v1;
  PreferenceList.subscript.getter();
  v6 = v8;
  v7 = v9;
  v4 = v1;
  PreferenceList.subscript.getter();
  v3[0] = v1;
  PreferenceList.subscript.getter();
  LOBYTE(v3[0]) = v1;
  v3[1] = HIDWORD(v1);
  UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(&v6, v5, (unsigned __int8 *)v3);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v5, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
  return swift_bridgeObjectRelease();
}

uint64_t UIKitInspectorV3Bridge.updateInspectorIfNeeded(_:)(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[7];
  uint64_t v46;

  v2 = v1;
  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  v5 = *a1;
  v44 = *a1;
  PreferenceList.subscript.getter();
  v6 = v35;
  v7 = v36;
  v8 = direct field offset for UIKitInspectorV3Bridge.anchorSeed;
  v9 = *(_DWORD *)((char *)v1 + direct field offset for UIKitInspectorV3Bridge.anchorSeed);
  v11 = v9 != -1 && (_DWORD)v36 != -1 && v9 == (_DWORD)v36;
  v33 = v4;
  if (v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = (_QWORD *)((char *)v1 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
    v13 = 1;
    swift_beginAccess();
    *v12 = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)((char *)v2 + v8) = v7;
  }
  v44 = v5;
  PreferenceList.subscript.getter();
  v14 = v35;
  v15 = v36;
  v16 = direct field offset for UIKitInspectorV3Bridge.inspectorSeed;
  v17 = *(_DWORD *)((char *)v2 + direct field offset for UIKitInspectorV3Bridge.inspectorSeed);
  v19 = v17 != -1 && (_DWORD)v36 != -1 && v17 == (_DWORD)v36;
  v20 = (_QWORD *)&lazy cache variable for type metadata for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>;
  if (v19)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (!v13)
      return result;
  }
  else
  {
    v21 = (_QWORD *)((char *)v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
    swift_beginAccess();
    *v21 = v35;
    swift_bridgeObjectRetain();
    v20 = &lazy cache variable for type metadata for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>;
    swift_bridgeObjectRelease();
    *(_DWORD *)((char *)v2 + v16) = v15;
    if (*(_QWORD *)((char *)v2 + direct field offset for UIKitInspectorV3Bridge.presentedVC))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Sequence.first(where:)(v14, (uint64_t)&v35);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v36 + 1) == 1)
      {
        swift_bridgeObjectRelease();
        result = outlined destroy of IntelligenceElement?((uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage)?, (void (*)(uint64_t))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
        if (!v13)
          return result;
      }
      else
      {
        v23 = v35;
        LODWORD(v44) = v35;
        v45[4] = v40;
        v45[5] = v41;
        v45[6] = v42;
        v46 = v43;
        v45[0] = v36;
        v45[1] = v37;
        v45[2] = v38;
        v45[3] = v39;
        v34[1] = v5;
        PreferenceList.subscript.getter();
        v34[0] = v5;
        PreferenceList.subscript.getter();
        LOBYTE(v34[0]) = v5;
        v20 = &lazy cache variable for type metadata for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>;
        UIKitInspectorV3Bridge.presentNewInspector(_:id:anchors:presentationOptionsPreference:backgroundPreference:)(v45, v23, v6, &v35, (char *)v34);
        swift_bridgeObjectRelease();
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v35, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
        result = outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)&v44);
        if (!v13)
          return result;
      }
    }
  }
  v24 = (char *)v2 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v26 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)((v33 & v3) + 0x50), *(_QWORD *)((v33 & v3) + 0x58), v25);
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(&v35, v24, v26);
  UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v26);
  LOBYTE(v24) = v28;
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v27 + 8))(&v35, v26);
  if ((v24 & 1) != 0)
  {
    v29 = *(void **)((char *)v2 + v20[428]);
    if (v29)
    {
      v30 = (_QWORD *)((char *)v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
      swift_beginAccess();
      v31 = *v30;
      v32 = v29;
      swift_bridgeObjectRetain();
      UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(v32, v31);

      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t UIHostingController.preferencesDidChange(_:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  int v6;
  char *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v15;
  int v16;

  v2 = v1;
  v15 = *a1;
  v3 = v15;
  ModernNavigationBridge.preferencesDidChange(_:)(&v15);
  v15 = v3;
  UIKitDialogBridge.preferencesDidChange(_:)(&v15);
  v15 = v3;
  FileImportExportBridge.preferencesDidChange(_:)(&v15);
  v4 = (void *)specialized UIHostingController.keyboardShortcutBridge.getter();
  if (v4 && *((_BYTE *)v4 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences) == 1)
  {
    v5 = v4;
    PreferenceList.subscript.getter();
    v6 = v16;
    v7 = &v5[OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings];
    *(_QWORD *)v7 = v15;
    *((_DWORD *)v7 + 2) = v6;

    swift_bridgeObjectRelease();
  }
  v15 = v3;
  UIHostingController.screenEdgesSystemGesturePreferencesDidChange(_:)(&v15);
  v15 = v3;
  UIHostingController.persistentSystemOverlaysPreferencesDidChange(_:)(&v15);
  if (specialized UIHostingController.navigationBridge.getter())
  {
    v15 = v3;
    swift_retain();
    UIKitNavigationBridge.preferencesDidChange(_:)();
    swift_release();
  }
  if (specialized UIHostingController.contentScrollViewBridge.getter())
  {
    v15 = v3;
    swift_retain();
    UIKitContentScrollViewBridge.preferencesDidChange(_:)(&v15);
    swift_release();
  }
  v8 = (void *)specialized UIHostingController.toolbarBridge.getter();
  if (v8)
  {
    v15 = v3;
    v9 = v8;
    ToolbarBridge.preferencesDidChange<A>(_:hostingController:)(&v15, v2);

  }
  v10 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v10)
  {
    v15 = v3;
    v11 = v10;
    BarAppearanceBridge.preferencesDidChange<A>(_:hostingController:)(&v15, (uint64_t *)v2);

  }
  v12 = (void *)specialized UIHostingController.inspectorBridgeV5.getter();
  if (v12)
  {
    v15 = v3;
    v13 = v12;
    SheetBridge.preferencesDidChange(_:)(&v15);

  }
  if (specialized UIHostingController.alwaysOnBridge.getter())
  {
    v15 = v3;
    swift_retain();
    AlwaysOnBridge.preferencesDidChange(_:)();
    swift_release();
  }
  v15 = v3;
  return ContainerBackgroundBridge.preferencesDidChange(_:)(&v15);
}

uint64_t UIKitContentScrollViewBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  CGRect v25;
  CGRect v26;

  v2 = v1;
  v24 = *a1;
  PreferenceList.subscript.getter();
  v3 = v22;
  v4 = v23;
  v5 = *(_DWORD *)(v1 + 24);
  if (v5 == -1 || v23 == -1 || v5 != v23)
  {
    v8 = (void *)MEMORY[0x18D760234](v1 + 16);
    if (v8)
    {

      v9 = *(_QWORD *)(v22 + 16);
      if (v9)
      {
        v10 = v22 + 32;
        swift_bridgeObjectRetain();
        do
        {
          outlined init with copy of ContentScrollViewBox(v10, (uint64_t)&v22);
          v11 = (void *)MEMORY[0x18D760234](&v22);
          if (v11)
          {
            v12 = v11;
            objc_msgSend(v11, sel_frame);
            v26.origin.x = 0.0;
            v26.origin.y = 0.0;
            v26.size.width = 0.0;
            v26.size.height = 0.0;
            v13 = CGRectEqualToRect(v25, v26);

            outlined destroy of ContentScrollViewBox((uint64_t)&v22);
            if (v13)
            {
              swift_bridgeObjectRelease();
              v14 = 0;
              goto LABEL_18;
            }
          }
          else
          {
            outlined destroy of ContentScrollViewBox((uint64_t)&v22);
          }
          v10 += 48;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
      }
      v14 = 1;
LABEL_18:
      *(_QWORD *)(v1 + 40) = v3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v14)
      {
        if (*(_QWORD *)(v1 + 40))
        {
          v15 = MEMORY[0x18D760234](v1 + 16);
          if (v15)
          {
            v16 = (void *)v15;
            v17 = swift_bridgeObjectRetain();
            v18 = (void *)UIKitContentScrollViewBridge.findBestCandidates(in:)(v17);
            v20 = v19;
            swift_bridgeObjectRelease();
            if (v18 != (void *)1)
            {
              *(_QWORD *)(v2 + 40) = 0;
              swift_bridgeObjectRelease();
              update #1 (edge:) in UIKitContentScrollViewBridge.update()(4, v16, v2, v18, v20);
              update #1 (edge:) in UIKitContentScrollViewBridge.update()(1, v16, v2, v18, v20);
              outlined consume of UIKitContentScrollViewBridge.Candidates?(v18, v20);
            }

          }
        }
      }
    }
  }
  *(_DWORD *)(v2 + 24) = v4;
  return swift_bridgeObjectRelease();
}

uint64_t ModernNavigationBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 v20[8];
  uint64_t v21;
  _BYTE v22[136];
  _BYTE v23[136];
  _OWORD v24[8];
  uint64_t v25;
  _BYTE v26[8];
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];
  uint64_t v30;
  _QWORD v31[20];
  uint64_t v32;
  int v33;

  v2 = v1;
  v3 = *a1;
  swift_beginAccess();
  v31[0] = v3;
  PreferenceList.subscript.getter();
  v4 = *(_DWORD *)(v2 + 16);
  if (v4 != -1 && v33 != -1 && v4 == v33)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  *(_DWORD *)(v2 + 16) = v33;
  v7 = v32;
  v8 = v32 + 64;
  v9 = 1 << *(_BYTE *)(v32 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v32 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_31;
    }
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v14);
      if (!v18)
      {
        v14 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v14);
        if (!v18)
        {
          v14 = v17 + 3;
          if (v17 + 3 >= v12)
            goto LABEL_36;
          v18 = *(_QWORD *)(v8 + 8 * v14);
          if (!v18)
            break;
        }
      }
    }
LABEL_30:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_31:
    outlined init with copy of UpdateViewDestinationRequest(*(_QWORD *)(v7 + 56) + 160 * v16, (uint64_t)v31);
    outlined init with take of UpdateViewDestinationRequest((uint64_t)v31, (uint64_t)v29);
    outlined init with copy of NavigationAuthority?((uint64_t)v29, (uint64_t)v26);
    if (v27 == 1)
    {
      outlined destroy of NavigationAuthority?((uint64_t)v26);
    }
    else
    {
      outlined init with take of NavigationAuthority((uint64_t)v26, (uint64_t)v28);
      outlined init with take of NavigationRequest?((uint64_t)&v30, (uint64_t)v23);
      outlined init with take of NavigationRequest?((uint64_t)v23, (uint64_t)v24);
      if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v24) == 1)
      {
        outlined destroy of NavigationAuthority((uint64_t)v28);
      }
      else
      {
        v20[6] = v24[6];
        v20[7] = v24[7];
        v21 = v25;
        v20[2] = v24[2];
        v20[3] = v24[3];
        v20[4] = v24[4];
        v20[5] = v24[5];
        v20[0] = v24[0];
        v20[1] = v24[1];
        outlined init with take of NavigationRequest?((uint64_t)v23, (uint64_t)v22);
        outlined retain of NavigationRequest((uint64_t)v22);
        NavigationAuthority.enqueueRequest(_:)(v20);
        outlined destroy of NavigationAuthority((uint64_t)v28);
        outlined release of NavigationRequest?((uint64_t)v23);
      }
    }
    result = outlined destroy of UpdateViewDestinationRequest((uint64_t)v29);
  }
  v19 = v17 + 4;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_30;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_30;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t FileImportExportBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t updated;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  id v26;
  _BYTE v28[24];
  uint64_t v29;

  v2 = v1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v28[-v6];
  type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  updated = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
  v13 = *(_QWORD *)(updated - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](updated, v15);
  v16 = &v28[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = &v28[-v19];
  v29 = *a1;
  swift_beginAccess();
  FileImportExportBridge.PresentationState.update(preferences:)(&v29, (uint64_t)v11);
  swift_endAccess();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, updated) == 1)
  {
    v21 = (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?;
    v22 = (uint64_t)v11;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v20, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    static TaskPriority.userInitiated.getter();
    v23 = type metadata accessor for TaskPriority();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 0, 1, v23);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, (uint64_t)v16, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    v24 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = 0;
    v25[3] = 0;
    v25[4] = v2;
    outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v25 + v24, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    v26 = v2;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in FileImportExportBridge.preferencesDidChange(_:), (uint64_t)v25);
    swift_release();
    v22 = (uint64_t)v20;
    v21 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v22, v21);
}

uint64_t type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportExportBridge.PresentationState.UpdateEffect);
}

uint64_t $defer #1 <A>() in UIHostingController.screenEdgesSystemGesturePreferencesDidChange(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  swift_beginAccess();
  VersionSeedSetTracker.updateSeeds(to:)(&v3);
  return swift_endAccess();
}

uint64_t UIHostingController.screenEdgesSystemGesturePreferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;

  v2 = v1;
  v3 = *a1;
  v4 = specialized UIHostingController.screenEdgesSystemGestureSeedTracker.getter();
  v7 = v3;
  swift_bridgeObjectRetain();
  v5 = VersionSeedSetTracker.hasChanges(in:)(&v7, v4);
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    PreferenceList.subscript.getter();
    UIHostingController.deferredEdges.setter(v7 | (BYTE1(v7) << 8));
    PreferenceList.subscript.getter();
    UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController.setter(v7);
    specialized UIHostingController.host.getter();
    _UIHostingView.viewController.getter();
  }
  return $defer #1 <A>() in UIHostingController.screenEdgesSystemGesturePreferencesDidChange(_:)(v2, v3);
}

uint64_t $defer #1 <A>() in UIHostingController.persistentSystemOverlaysPreferencesDidChange(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  swift_beginAccess();
  VersionSeedSetTracker.updateSeeds(to:)(&v3);
  return swift_endAccess();
}

uint64_t UIHostingController.persistentSystemOverlaysPreferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;

  v2 = v1;
  v3 = *a1;
  v4 = specialized UIHostingController.persistentSystemOverlaysSeedTracker.getter();
  v7 = v3;
  swift_bridgeObjectRetain();
  v5 = VersionSeedSetTracker.hasChanges(in:)(&v7, v4);
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    PreferenceList.subscript.getter();
    *(_WORD *)(v2 + direct field offset for UIHostingController.persistentSystemOverlays) = v7;
    UIHostingController.persistentSystemOverlays.getter(&v7);
    PreferenceList.subscript.getter();
    UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController.setter(v7);
    UIHostingController.updateHomeIndicator(animated:)();
  }
  return $defer #1 <A>() in UIHostingController.persistentSystemOverlaysPreferencesDidChange(_:)(v2, v3);
}

uint64_t BarAppearanceBridge.preferencesDidChange<A>(_:hostingController:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  _QWORD v11[11];

  v2 = *a2;
  v3 = *MEMORY[0x1E0DEEDD8];
  v4 = *a1;
  BarAppearanceBridge.UpdateContext.init<A>(hostingController:)(a2, v11);
  v10 = v4;
  if ((BarAppearanceBridge.preferencesDidChange(_:updateContext:)(&v10, (uint64_t)v11) & 1) != 0)
  {
    v5 = (void *)specialized UIHostingController.host.getter();
    LOWORD(v10) = 2;
    v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v3 & v2) + 0x50), *(_QWORD *)((v3 & v2) + 0x58), v6);
    v8 = v5;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  swift_unknownObjectWeakAssign();
  return outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v11);
}

uint64_t UIKitDialogBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  Swift::UInt32 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::UInt32 v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v2 = v1;
  v3 = *a1;
  *(_QWORD *)&v48 = *a1;
  PreferenceList.subscript.getter();
  v4 = v63;
  v5 = *(_DWORD *)(v1 + 56);
  if (v5 == -1 || DWORD2(v63) == -1 || v5 != DWORD2(v63))
  {
    *(_DWORD *)(v1 + 56) = DWORD2(v63);
    if (*(_BYTE *)(v1 + 44))
    {
      if (*(_BYTE *)(v1 + 44) == 1)
      {
        v8 = *(_DWORD *)(v1 + 40);
        v9 = swift_bridgeObjectRetain();
        UIKitDialogBridge.updateExistingDialog(allDialogs:id:)(v9, v8);
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = swift_bridgeObjectRetain();
        specialized Sequence.first(where:)(v13, (uint64_t)&v48);
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v49 + 1))
        {
          v14 = v48;
          LODWORD(v63) = v48;
          outlined init with take of ConfirmationDialog((uint64_t)&v48 + 8, (uint64_t)&v63 + 8);
          UIKitDialogBridge.showNewDialog(_:id:)((uint64_t)&v63 + 8, v14);
          outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v63, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
        }
        else
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v48, (uint64_t (*)(_QWORD))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)?);
        }
      }
    }
    else
    {
      v10 = swift_bridgeObjectRetain();
      v11 = specialized Dictionary.optimisticFilter(_:)(v10);
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v11 + 16);
      swift_bridgeObjectRelease();
      if (v12)
        MEMORY[0x18D75AC90](0xD000000000000067, 0x8000000187BED970);
    }
  }
  *(_QWORD *)&v48 = v3;
  result = PreferenceList.subscript.getter();
  v16 = v63;
  v17 = *(_DWORD *)(v2 + 72);
  if (v17 != -1 && DWORD2(v63) != -1 && v17 == DWORD2(v63))
    goto LABEL_50;
  *(_DWORD *)(v2 + 72) = DWORD2(v63);
  if (!*(_BYTE *)(v2 + 44))
  {
    v21 = *(_DWORD *)(v2 + 40);
    v22 = swift_bridgeObjectRetain();
    UIKitDialogBridge.updateExistingAlert(allAlerts:id:)(v22, v21);
    swift_bridgeObjectRelease();
LABEL_50:
    swift_beginAccess();
    *(_QWORD *)(v2 + 80) = v16;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v2 + 64) = v4;
    return swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v2 + 44) == 1)
  {
    v18 = swift_bridgeObjectRetain();
    v19 = specialized Dictionary.optimisticFilter(_:)(v18);
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v19 + 16);
    swift_bridgeObjectRelease();
    if (v20)
      MEMORY[0x18D75AC90](0xD000000000000067, 0x8000000187BED900);
    goto LABEL_50;
  }
  v23 = 0;
  v24 = v16 + 64;
  v25 = 1 << *(_BYTE *)(v16 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & *(_QWORD *)(v16 + 64);
  v28 = (unint64_t)(v25 + 63) >> 6;
  while (v27)
  {
    v29 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    v30 = v29 | (v23 << 6);
LABEL_28:
    v31 = *(_DWORD *)(*(_QWORD *)(v16 + 48) + 4 * v30);
    v32 = (__int128 *)(*(_QWORD *)(v16 + 56) + 240 * v30);
    v34 = v32[1];
    v33 = v32[2];
    v63 = *v32;
    v64 = v34;
    v65 = v33;
    v35 = v32[6];
    v37 = v32[3];
    v36 = v32[4];
    v68 = v32[5];
    v69 = v35;
    v66 = v37;
    v67 = v36;
    v38 = v32[10];
    v40 = v32[7];
    v39 = v32[8];
    v72 = v32[9];
    v73 = v38;
    v70 = v40;
    v71 = v39;
    v41 = v32[14];
    v43 = v32[11];
    v42 = v32[12];
    v76 = v32[13];
    v77 = v41;
    v74 = v43;
    v75 = v42;
    if ((v63 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      outlined retain of AlertStorage(&v63);
      swift_release();
      v60 = v75;
      v61 = v76;
      v62 = v77;
      v56 = v71;
      v57 = v72;
      v58 = v73;
      v59 = v74;
      v52 = v67;
      v53 = v68;
      v54 = v69;
      v55 = v70;
      v48 = v63;
      v49 = v64;
      v50 = v65;
      v51 = v66;
      UIKitDialogBridge.showNewAlert(_:id:)(&v48, v31);
      outlined release of AlertStorage(&v63);
      goto LABEL_50;
    }
  }
  if (__OFADD__(v23++, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v23 >= v28)
    goto LABEL_50;
  v45 = *(_QWORD *)(v24 + 8 * v23);
  if (v45)
  {
LABEL_44:
    v47 = __clz(__rbit64(v45));
    v27 = (v45 - 1) & v45;
    v30 = v47 + (v23 << 6);
    goto LABEL_28;
  }
  v46 = v23 + 1;
  if (v23 + 1 >= v28)
    goto LABEL_50;
  v45 = *(_QWORD *)(v24 + 8 * v46);
  if (v45)
    goto LABEL_43;
  v46 = v23 + 2;
  if (v23 + 2 >= v28)
    goto LABEL_50;
  v45 = *(_QWORD *)(v24 + 8 * v46);
  if (v45)
    goto LABEL_43;
  v46 = v23 + 3;
  if (v23 + 3 >= v28)
    goto LABEL_50;
  v45 = *(_QWORD *)(v24 + 8 * v46);
  if (v45)
    goto LABEL_43;
  v46 = v23 + 4;
  if (v23 + 4 >= v28)
    goto LABEL_50;
  v45 = *(_QWORD *)(v24 + 8 * v46);
  if (v45)
    goto LABEL_43;
  v46 = v23 + 5;
  if (v23 + 5 >= v28)
    goto LABEL_50;
  v45 = *(_QWORD *)(v24 + 8 * v46);
  if (v45)
  {
LABEL_43:
    v23 = v46;
    goto LABEL_44;
  }
  while (1)
  {
    v23 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v23 >= v28)
      goto LABEL_50;
    v45 = *(_QWORD *)(v24 + 8 * v23);
    ++v46;
    if (v45)
      goto LABEL_44;
  }
LABEL_52:
  __break(1u);
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>)
  {
    type metadata accessor for ResolvedButtonStyle(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>);
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SectionStyleConfiguration.Footer(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Footer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Footer> and conformance SourceInput<A>);
}

void UIHostingContentView.frame.setter()
{
  void *v0;

  objc_msgSend(v0, sel_bounds);
  type metadata accessor for UIHostingContentView();
}

id sub_186EE6B14(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id result;
  double v35;
  double v36;
  objc_super v38;

  v38.receiver = v26;
  v38.super_class = a1;
  -[objc_class setFrame:](&v38, sel_setFrame_, v31, v30, v29, v28);
  result = objc_msgSend(v26, *(SEL *)(v27 + 1832));
  if (v32 != v36 || v33 != v35)
    *((_BYTE *)v26 + *(_QWORD *)((*v25 & *v26) + 0xB8)) = 1;
  return result;
}

double @objc UIHostingBackgroundView.frame.getter(void *a1, uint64_t a2, uint64_t a3, double (*a4)(uint64_t))
{
  id v6;
  double v7;

  v6 = a1;
  v7 = a4(a3);

  return v7;
}

double @objc UIHostingContentView.bounds.getter(void *a1, uint64_t a2)
{
  return @objc UIHostingBackgroundView.frame.getter(a1, a2, (uint64_t)&selRef_bounds, (double (*)(uint64_t))UIHostingContentView.frame.getter);
}

SEL *_UIHostingView.frame.setter(SEL *result, SEL *a2, double a3, double a4, double a5, double a6)
{
  _QWORD *v6;
  uint64_t *v7;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  objc_class *v18;
  double v19;
  double v20;
  objc_super v21;

  v7 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v6);
  if (*((_BYTE *)v6 + v7[25]) == 1)
  {
    objc_msgSend(v6, *result);
    v14 = v13;
    v16 = v15;
    v18 = (objc_class *)type metadata accessor for _UIHostingView(0, v7[10], v7[11], v17);
    v21.receiver = v6;
    v21.super_class = v18;
    objc_msgSendSuper2(&v21, *a2, a3, a4, a5, a6);
    return (SEL *)_UIHostingView.frameDidChange(oldValue:)(v19, v20, v14, v16);
  }
  return result;
}

double @objc _UIHostingView.frame.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.frame.getter(a1, a2, (SEL *)&selRef_frame);
}

id _UIHostingView.frameDidChange(oldValue:)(double a1, double a2, double a3, double a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v14;

  v7 = *v4;
  v8 = *MEMORY[0x1E0DEEDD8];
  result = objc_msgSend(v4, sel_bounds);
  if (v12 != a3 || v11 != a4)
  {
    v14 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v8 & v7) + 0x50), *(_QWORD *)((v8 & v7) + 0x58), v10);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v14);
    return (id)ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

void UIHostingContentView.frame.getter()
{
  type metadata accessor for UIHostingContentView();
}

id sub_186EE6DD8(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  SEL *v17;
  void *v18;
  objc_super v20;

  v20.receiver = v18;
  v20.super_class = a1;
  return objc_msgSendSuper2(&v20, *v17);
}

double @objc _UIHostingView.bounds.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.frame.getter(a1, a2, (SEL *)&selRef_bounds);
}

double @objc _UIHostingView.safeAreaInsets.getter(void *a1)
{
  id v1;
  double v2;

  v1 = a1;
  v2 = _UIHostingView.safeAreaInsets.getter();

  return v2;
}

double _UIHostingView.safeAreaInsets.getter()
{
  _QWORD *v0;
  uint64_t *v1;
  char *v2;
  char v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  double v9;
  double v10;
  objc_super v12;
  _OWORD v13[2];
  char v14;
  double v15;
  char v16;

  v1 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = (char *)v0 + v1[27];
  v3 = v2[32];
  v4 = *((_OWORD *)v2 + 1);
  v13[0] = *(_OWORD *)v2;
  v13[1] = v4;
  v14 = v3;
  v5 = outlined init with take of EdgeInsets?((uint64_t)v13, (uint64_t)&v15);
  if ((v16 & 1) != 0)
  {
    v8 = (objc_class *)type metadata accessor for _UIHostingView(0, v1[10], v1[11], v7);
    v12.receiver = v0;
    v12.super_class = v8;
    objc_msgSendSuper2(&v12, sel_safeAreaInsets);
    return v9;
  }
  else
  {
    v10 = v15;
    MEMORY[0x1E0C80A78](v5, v6);
    static Update.ensure<A>(_:)();
  }
  return v10;
}

double @objc _UIHostingView.frame.getter(void *a1, uint64_t a2, SEL *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  v4 = a1;
  _UIHostingView.frame.getter(a3, v5, v6, v7);
  v9 = v8;

  return v9;
}

id _UIHostingView.frame.getter(SEL *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  objc_super v8;

  v6 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v8.receiver = v4;
  v8.super_class = v6;
  return objc_msgSendSuper2(&v8, *a1);
}

uint64_t type metadata accessor for _UIHostingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _UIHostingView);
}

uint64_t outlined init with take of EdgeInsets?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EdgeInsets?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 _UIHostingView.explicitSafeAreaInsets.getter@<Q0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD8);
  v3 = v2[32];
  result = *(__n128 *)v2;
  v5 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v3;
  return result;
}

void type metadata accessor for UIHostingContentView()
{
  JUMPOUT(0x18D75FF28);
}

double @objc UIHostingContentView.frame.getter(void *a1, uint64_t a2)
{
  return @objc UIHostingBackgroundView.frame.getter(a1, a2, (uint64_t)&selRef_frame, (double (*)(uint64_t))UIHostingContentView.frame.getter);
}

void type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PlacementProperties<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlacementProperties);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>));
  }
}

uint64_t static StyledView._makeViewList(view:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<StyledView>, (uint64_t)&type metadata for StyledView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>();
  lazy protocol witness table accessor for type SectionBody and conformance SectionBody();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  type metadata accessor for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>();
  lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>();
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)();
}

void type metadata accessor for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E0CE7C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>);
  }
}

unint64_t lazy protocol witness table accessor for type SectionBody and conformance SectionBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionBody and conformance SectionBody;
  if (!lazy protocol witness table cache variable for type SectionBody and conformance SectionBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionBody, &unk_1E1AB02E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionBody and conformance SectionBody);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DepthTrait and conformance DepthTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait;
  if (!lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0AE8], MEMORY[0x1E0CE0B00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait);
  }
  return result;
}

Swift::Void __swiftcall SharingActivityPickerBridge.transformDidChange()()
{
  SharingActivityPickerBridge.updateAnchor(deferred:)(1);
}

void SharingActivityPickerBridge.updateAnchor(deferred:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id v14;
  id v15;
  uint64_t v16[6];
  _BYTE v17[9];
  _OWORD v18[9];
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;

  if ((v1[29] & 1) == 0)
  {
    v3 = *v1;
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)(v1 + 7), (uint64_t)v17);
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)v17, (uint64_t)v18);
    if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v18) != 1)
    {
      v26 = v18[6];
      v27 = v18[7];
      v28 = v18[8];
      v29 = v19;
      v22 = v18[2];
      v23 = v18[3];
      v24 = v18[4];
      v25 = v18[5];
      v20 = v18[0];
      v21 = v18[1];
      v4 = (void *)v1[26];
      if (v4)
      {
        outlined init with take of SharingActivityPickerPresentation?((uint64_t)v17, (uint64_t)v16);
        outlined retain of SharingActivityPickerPresentation(v16);
        v5 = objc_msgSend(v4, sel_popoverPresentationController);
        if (v5)
        {
          v6 = v5;
          if ((a1 & 1) != 0)
          {
            *((_BYTE *)v1 + 232) = 1;
            v7 = swift_allocObject();
            swift_weakInit();
            v8 = swift_allocObject();
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v3 + 80);
            v9 = *(_QWORD *)(v3 + 88);
            v10 = v27;
            *(_OWORD *)(v8 + 136) = v26;
            *(_OWORD *)(v8 + 152) = v10;
            *(_OWORD *)(v8 + 168) = v28;
            v11 = v23;
            *(_OWORD *)(v8 + 72) = v22;
            *(_OWORD *)(v8 + 88) = v11;
            v12 = v25;
            *(_OWORD *)(v8 + 104) = v24;
            *(_OWORD *)(v8 + 120) = v12;
            v13 = v21;
            *(_OWORD *)(v8 + 40) = v20;
            *(_QWORD *)(v8 + 24) = v9;
            *(_QWORD *)(v8 + 32) = v7;
            *(_DWORD *)(v8 + 184) = v29;
            *(_OWORD *)(v8 + 56) = v13;
            *(_QWORD *)(v8 + 192) = v6;
            outlined release of SharingActivityPickerPresentation?((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of SharingActivityPickerPresentation?);
            swift_retain();
            v14 = v6;
            onNextMainRunLoop(do:)();

            outlined release of SharingActivityPickerPresentation?((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of SharingActivityPickerPresentation?);
            swift_release();
            swift_release();
          }
          else
          {
            v15 = SharingActivityPickerBridge.popoverPresentationDelegate.getter();
            specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v6);

            outlined release of SharingActivityPickerPresentation?((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of SharingActivityPickerPresentation?);
          }
        }
        else
        {
          outlined release of SharingActivityPickerPresentation?((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of SharingActivityPickerPresentation?);
        }
      }
    }
  }
}

uint64_t @objc UIKitInspectorV3Bridge.__ivar_destroyer(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *MEMORY[0x1E0DEEDD8] & *a1;
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  outlined consume of Transaction?(*(_QWORD *)((char *)a1
                                             + direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences));
  v3 = (char *)a1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  v5 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  swift_release();
  objc_release(*(id *)((char *)a1
                     + direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined destroy of AccessibilityScrollableContext?((uint64_t)a1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(_DWORD *a1, uint64_t *a2, unsigned __int8 *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(__int128 *, uint64_t, uint64_t);
  char v14;
  char v15;
  uint64_t v16;
  UIViewController *v17;
  int v18;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  void *v31;
  id v32;
  uint64_t (*v33)(void);
  __int128 *v34;
  uint64_t result;
  uint64_t v36;
  int v37;
  id v38;
  uint64_t (*v39)(void);
  id v40;
  uint64_t (*v41)(void);
  id v42;
  uint64_t v43;
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[2];
  __int128 v57;
  _OWORD v58[3];
  uint64_t v59;
  _OWORD v60[6];
  uint64_t v61;

  v4 = (uint64_t)v3;
  v5 = *MEMORY[0x1E0DEEDD8] & *v3;
  v6 = a1[2];
  v43 = *a3;
  v7 = *((unsigned int *)a3 + 1);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v8)
  {
    outlined init with copy of PopoverPresentation(*(_QWORD *)a1 + 104 * v8 - 72, (uint64_t)v60);
    if (v8 != 1)
      goto LABEL_18;
  }
  else
  {
    v61 = 0;
    memset(v60, 0, sizeof(v60));
  }
  v9 = v4 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v11 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(__int128 *, uint64_t, uint64_t))(v12 + 16);
  v13(v56, v9, v11);
  UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v11);
  v15 = v14;
  (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(v56, v11);
  if ((v15 & 1) != 0 || (v16 = UIKitInspectorV3Bridge.presenter.getter()) == 0)
  {
LABEL_18:
    v25 = v4 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
    swift_beginAccess();
    v27 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v26);
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v28 + 16))(v56, v25, v27);
    UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v27);
    v30 = v29;
    (*(void (**)(_OWORD *, uint64_t))(v28 + 8))(v56, v27);
    if (!*(_QWORD *)&v60[0] && (v30 & 1) == 0)
    {
      v31 = *(void **)(v4 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
      if (v31)
      {
        v32 = v31;
        UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v32);

      }
    }
    goto LABEL_22;
  }
  v17 = (UIViewController *)v16;
  v18 = *(_DWORD *)(v4 + direct field offset for UIKitInspectorV3Bridge.popoverSeed);
  if (v18 != -1 && v6 != -1 && v18 == v6)
    UIKitInspectorV3Bridge.isParentPresentationFromLikeKindBridge.getter();
  *(_DWORD *)(v4 + direct field offset for UIKitInspectorV3Bridge.popoverSeed) = v6;
  v21 = v4 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
  swift_beginAccess();
  outlined assign with copy of PopoverPresentation?((uint64_t)v60, v21);
  swift_endAccess();
  v22 = *(void **)(v4 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
  if (!v22)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v60, (uint64_t)&v49, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
    if (!(_QWORD)v49)
    {

      v39 = MEMORY[0x1E0DEB940];
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v60, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v34 = &v49;
      v33 = v39;
      return outlined destroy of AccessibilityScrollableContext?((uint64_t)v34, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))v33);
    }
    v58[1] = v53;
    v58[2] = v54;
    v59 = v55;
    v56[0] = v49;
    v56[1] = v50;
    v57 = v51;
    v58[0] = v52;
    UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)((uint64_t)v56, v17, a2, v43);

    outlined destroy of PopoverPresentation((uint64_t)v56);
LABEL_22:
    v33 = MEMORY[0x1E0DEB940];
    v34 = v60;
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)v34, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))v33);
  }
  v13(&v49, v9, v11);
  if (!BYTE8(v51))
  {
    v47[0] = v49;
    v47[1] = v50;
    v48 = v51;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v60, (uint64_t)v56, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
    v23 = MEMORY[0x1E0DEC198];
    if (*(_QWORD *)&v56[0])
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v58, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
      v24 = v22;
      outlined destroy of PopoverPresentation((uint64_t)v56);
    }
    else
    {
      v40 = v22;
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v56, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      memset(v45, 0, sizeof(v45));
      v46 = 0;
    }
    compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)((uint64_t)v47, (char *)v45, (char *)v22, v4, (uint64_t)v60, v17, (uint64_t)a2, v43 | (v7 << 32), v23);

    v41 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v23, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AnyHashable((uint64_t)v47);
    v34 = v60;
    v33 = v41;
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)v34, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))v33);
  }
  if (BYTE8(v51) == 1)
  {
    LODWORD(v47[0]) = v49;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v60, (uint64_t)v56, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
    v36 = *(_QWORD *)&v56[0];
    if (*(_QWORD *)&v56[0])
    {
      v37 = HIDWORD(v57);
      v38 = v22;
      outlined destroy of PopoverPresentation((uint64_t)v56);
    }
    else
    {
      v42 = v22;
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v56, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v37 = 0;
    }
    LODWORD(v56[0]) = v37;
    BYTE4(v56[0]) = v36 == 0;
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)((uint64_t)v47, (char *)v56, (char *)v22, v4, (uint64_t)v60, v17, (uint64_t)a2, v43 | (v7 << 32), (uint64_t)&type metadata for ViewIdentity);

    goto LABEL_22;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitInspectorV3Bridge.PresentationKind);
}

uint64_t destroy for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (!v1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t UIKitInspectorV3Bridge.presenter.getter()
{
  uint64_t v0;
  uint64_t result;

  result = MEMORY[0x18D760234](v0 + direct field offset for UIKitInspectorV3Bridge.presenterOverride);
  if (!result)
  {
    if (MEMORY[0x18D760234](v0 + direct field offset for UIKitInspectorV3Bridge.host))
      _UIHostingView.viewController.getter();
    __break(1u);
    JUMPOUT(0x186EE7F6CLL);
  }
  return result;
}

void UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[48];

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
  __asm { BR              X10 }
}

uint64_t sub_186EE7FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(&v3, v0);
  return 0;
}

uint64_t initializeWithCopy for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

void UIHostingController.updateHomeIndicator(animated:)()
{
  specialized UIHostingController.host.getter();
  _UIHostingView.viewController.getter();
}

void sub_186EE80A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t aBlock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  _QWORD v28[12];

  if ((v22 & 1) != 0)
  {
    v23 = (void *)objc_opt_self();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = a1;
    v28[4] = partial apply for closure #1 in setNeedsHomeIndicatorUpdate #1 <A>(from:animated:) in UIHostingController.updateHomeIndicator(animated:);
    v28[5] = v24;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 1107296256;
    v28[2] = thunk for @escaping @callee_guaranteed () -> ();
    v28[3] = &block_descriptor_54;
    v25 = _Block_copy(v28);
    v26 = a1;
    swift_release();
    objc_msgSend(v23, sel_animateWithDuration_animations_, v25, 0.3);
    _Block_release(v25);

  }
  else
  {
    objc_msgSend(a1, sel_setNeedsUpdateOfHomeIndicatorAutoHidden);

  }
}

uint64_t UIHostingController.deferredEdges.setter(uint64_t result)
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + direct field offset for UIHostingController.deferredEdges);
  *v2 = result;
  v2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController) = result;
  return result;
}

uint64_t UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController) = result;
  return result;
}

Swift::Void __swiftcall UIKitDialogBridge.transformDidChange()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt32 v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  void *v6;
  id v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[25];
  _BYTE v19[176];

  if (*(_BYTE *)(v0 + 44) != 1)
    return;
  v1 = v0;
  v2 = *(_DWORD *)(v0 + 40);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 64);
  if (!v3)
  {
    swift_endAccess();
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    memset(v18, 0, sizeof(v18));
LABEL_13:
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
    return;
  }
  if (*(_QWORD *)(v3 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(v3 + 56) + 176 * v4, (uint64_t)&v9);
  }
  else
  {
    v17 = 0u;
    memset(v18, 0, sizeof(v18));
    v16 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
  }
  swift_endAccess();
  if (!(_QWORD)v10)
    goto LABEL_13;
  outlined init with take of ConfirmationDialog((uint64_t)&v9, (uint64_t)v19);
  v6 = *(void **)(v1 + 48);
  if (v6)
  {
    v7 = objc_msgSend(v6, sel_popoverPresentationController);
    if (v7)
    {
      v8 = v7;
      UIKitDialogBridge.updateAnchor(dialog:presentationController:)((uint64_t)v19, v7);

    }
  }
  outlined destroy of ConfirmationDialog((uint64_t)v19);
}

void partial apply for closure #1 in closure #1 in SubscriptionView.Subscriber.updateValue()()
{
  type metadata accessor for SubscriptionView();
}

void sub_186EE8360()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for SubscriptionView();
}

uint64_t sub_186EE83C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(v1 + *(int *)(a1 + 56) + v3))(v2);
}

uint64_t AlwaysOnBridge.preferencesDidChange(_:)()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  unint64_t v3;
  uint64_t v5;
  int v6;

  PreferenceList.subscript.getter();
  if (v6 == -1 || ((v1 = *(_DWORD *)(v0 + 44), v1 != -1) ? (v2 = v6 == v1) : (v2 = 0), !v2))
  {
    *(_DWORD *)(v0 + 44) = v6;
    v3 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 48) = v5;
    AlwaysOnBridge.timelineRegistrations.didset(v3);
  }
  return swift_bridgeObjectRelease();
}

void UIHostingController.init(rootView:)(uint64_t a1)
{
  specialized UIHostingController.init(rootView:)(a1);
}

uint64_t sub_186EE84B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(v1);
  return a1;
}

uint64_t outlined init with take of HostingControllerOverrides(uint64_t a1, uint64_t a2)
{
  initializeWithTake for HostingControllerOverrides(a2, a1, (uint64_t)&type metadata for HostingControllerOverrides);
  return a2;
}

uint64_t initializeWithTake for HostingControllerOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for HostingControllerOverrides(a1, a2, a3, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF58]);
}

uint64_t type metadata accessor for ModernNavigationBridge()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FileImportExportBridge(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportExportBridge);
}

uint64_t type metadata accessor for FileImportExportBridge.Presentation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportExportBridge.Presentation);
}

uint64_t type metadata accessor for UIKitDialogBridge()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UIKitDialogBridge;
  if (!type metadata singleton initialization cache for UIKitDialogBridge)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t storeEnumTagSinglePayload for DialogActionContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for DialogActionContext(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DialogActionContext);
}

void _UIHostingView.__allocating_init(rootView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _UIHostingView.__allocating_init(rootView:)(a1, a2, a3, a4);
}

uint64_t sub_186EE86A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(v1);
  return a1;
}

uint64_t FileImportExportBridge.PresentationState.update(preferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  BOOL v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t updated;
  uint64_t result;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  int EnumCaseMultiPayload;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;

  v110 = a2;
  type metadata accessor for (FileImportExportBridge.Presentation?, FileImportExportBridge.Presentation?)();
  v109 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v113 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileExportOperation?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v106 = (uint64_t)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FileExportOperation(0);
  v104 = *(_QWORD *)(v9 - 8);
  v105 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v102 = (uint64_t)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PreferenceList.Value<FileExportOperation?>(0);
  v112 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v114 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportOperation?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FileImportOperation(0);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PreferenceList.Value<FileImportOperation?>(0);
  v25 = v24;
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  MEMORY[0x1E0C80A78](v29, v30);
  v103 = (uint64_t)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v99 = (uint64_t)&v97 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v100 = (uint64_t)&v97 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v98 = (uint64_t)&v97 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v101 = (uint64_t)&v97 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v47 = (char *)&v97 - v46;
  v48 = *a1;
  v49 = type metadata accessor for FileImportExportBridge.Presentation(0);
  v108 = *(_QWORD *)(v49 - 8);
  v50 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56);
  v115 = v47;
  v107 = v50;
  v50((uint64_t)v47, 1, 1, v49);
  v117 = v48;
  PreferenceList.subscript.getter();
  v51 = type metadata accessor for FileImportExportBridge.PresentationState(0);
  v52 = *(int *)(v51 + 20);
  v53 = *(_DWORD *)(v111 + v52);
  v54 = *(int *)(v25 + 28);
  v116 = v28;
  v55 = *(_DWORD *)&v28[v54];
  if (v53 == -1 || v55 == -1 || v53 != v55)
  {
    v57 = v111;
    *(_DWORD *)(v111 + v52) = v55;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v116, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FileImportOperation?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FileImportOperation?);
    }
    else
    {
      v58 = (uint64_t)v115;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
      outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v23, type metadata accessor for FileImportOperation);
      outlined init with take of TableCellFormula((uint64_t)v23, v58, type metadata accessor for FileImportOperation);
      swift_storeEnumTagMultiPayload();
      v107(v58, 0, 1, v49);
    }
    v56 = 0;
  }
  else
  {
    v56 = 1;
    v57 = v111;
  }
  v59 = (uint64_t)v114;
  v60 = v112;
  v117 = v48;
  PreferenceList.subscript.getter();
  v61 = *(int *)(v51 + 24);
  v62 = *(_DWORD *)(v57 + v61);
  v63 = *(_DWORD *)(v59 + *(int *)(v60 + 28));
  v65 = v62 != -1 && v63 != -1 && v62 == v63;
  v66 = v65;
  if (v65)
  {
    v67 = (uint64_t)v115;
    v68 = (uint64_t)v113;
    if ((v56 & 1) != 0)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, (uint64_t (*)(_QWORD))type metadata accessor for PreferenceList.Value<FileExportOperation?>);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for PreferenceList.Value<FileImportOperation?>);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
      updated = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 56))(v110, 1, 1, updated);
    }
  }
  else
  {
    *(_DWORD *)(v57 + v61) = v63;
    v71 = v106;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v59, v106, (uint64_t (*)(_QWORD))type metadata accessor for FileExportOperation?);
    v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v71, 1, v105);
    v67 = (uint64_t)v115;
    v68 = (uint64_t)v113;
    if (v72 == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v71, (uint64_t (*)(_QWORD))type metadata accessor for FileExportOperation?);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
      v73 = v71;
      v74 = v102;
      outlined init with take of TableCellFormula(v73, v102, type metadata accessor for FileExportOperation);
      outlined init with take of TableCellFormula(v74, v67, type metadata accessor for FileExportOperation);
      swift_storeEnumTagMultiPayload();
      v107(v67, 0, 1, v49);
    }
  }
  v75 = v68 + *(int *)(v109 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v57, v68, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v75, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
  v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
  if (v76(v75, 1, v49) == 1)
  {
    if (v76(v68, 1, v49) == 1)
    {
      v77 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v110, 1, 1, v77);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v68, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
      v82 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
      v83 = v110;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v83, 0, 1, v82);
    }
    goto LABEL_49;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v79 = v76(v68, 1, v49);
  if (EnumCaseMultiPayload == 1)
  {
    if (v79 != 1)
    {
      v80 = v101;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v68, v101, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        if ((v66 & 1) != 0)
        {
          v81 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v110, 1, 1, v81);
LABEL_44:
          v93 = v80;
LABEL_48:
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v93, type metadata accessor for FileImportExportBridge.Presentation);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v75, type metadata accessor for FileImportExportBridge.Presentation);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v68, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
          goto LABEL_49;
        }
        v90 = v98;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v98, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
        result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v76)(v90, 1, v49);
        if ((_DWORD)result != 1)
        {
          v91 = v110;
          outlined init with take of TableCellFormula(v90, v110, type metadata accessor for FileImportExportBridge.Presentation);
          v92 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v91, 0, 1, v92);
          v80 = v101;
          goto LABEL_44;
        }
        goto LABEL_51;
      }
      v84 = v80;
      goto LABEL_39;
    }
LABEL_40:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v75, type metadata accessor for FileImportExportBridge.Presentation);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v68, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
    v86 = v103;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v103, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v76)(v86, 1, v49);
    if ((_DWORD)result != 1)
    {
      v87 = v86;
      v88 = v110;
      outlined init with take of TableCellFormula(v87, v110, type metadata accessor for FileImportExportBridge.Presentation);
      v89 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v88, 0, 1, v89);
LABEL_49:
      outlined assign with copy of FileImportExportBridge.Presentation?(v67, v57);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, (uint64_t (*)(_QWORD))type metadata accessor for PreferenceList.Value<FileExportOperation?>);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for PreferenceList.Value<FileImportOperation?>);
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
    }
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v79 == 1)
    goto LABEL_40;
  v84 = v100;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v68, v100, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
LABEL_39:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v84, type metadata accessor for FileImportExportBridge.Presentation);
    goto LABEL_40;
  }
  if ((v56 & 1) != 0)
  {
    v85 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v110, 1, 1, v85);
LABEL_47:
    v93 = v84;
    goto LABEL_48;
  }
  v94 = v99;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v99, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v76)(v94, 1, v49);
  if ((_DWORD)result != 1)
  {
    v95 = v110;
    outlined init with take of TableCellFormula(v94, v110, type metadata accessor for FileImportExportBridge.Presentation);
    v96 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v95, 0, 1, v96);
    goto LABEL_47;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for FileImportExportBridge.PresentationState(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportExportBridge.PresentationState);
}

uint64_t storeEnumTagSinglePayload for FileImportOperation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FileExportOperation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for FileImportExportBridge.PresentationState.UpdateEffect?, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for FileImportExportBridge.Presentation?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for FileImportExportBridge.Presentation?, type metadata accessor for FileImportExportBridge.Presentation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for PreferenceList.Value<FileImportOperation?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for PreferenceList.Value<FileImportOperation?>, (uint64_t (*)(uint64_t))type metadata accessor for FileImportOperation?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
}

void type metadata accessor for PreferenceList.Value<FileExportOperation?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for PreferenceList.Value<FileExportOperation?>, (uint64_t (*)(uint64_t))type metadata accessor for FileExportOperation?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
}

uint64_t type metadata accessor for FileImportOperation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportOperation);
}

uint64_t type metadata accessor for FileExportOperation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation);
}

void type metadata accessor for (FileImportExportBridge.Presentation?, FileImportExportBridge.Presentation?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (FileImportExportBridge.Presentation?, FileImportExportBridge.Presentation?))
  {
    type metadata accessor for FileImportExportBridge.Presentation?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (FileImportExportBridge.Presentation?, FileImportExportBridge.Presentation?));
  }
}

void type metadata accessor for FileImportOperation?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for FileImportOperation?, type metadata accessor for FileImportOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for FileExportOperation?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for FileExportOperation?, type metadata accessor for FileExportOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t destroy for FileImportExportBridge.PresentationState(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for FileImportExportBridge.Presentation(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v4 = type metadata accessor for URL();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
          type metadata accessor for FileExportOperation.Move(0);
          swift_release();
          goto LABEL_20;
        case 1u:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_20;
        case 2u:
          outlined consume of FileExportOperation.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_20;
        case 3u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_20:
          swift_release();
          break;
        default:
          break;
      }
      v16 = (int *)type metadata accessor for FileExportOperation(0);
      swift_bridgeObjectRelease();
      v17 = a1 + v16[6];
      v18 = type metadata accessor for URL();
      v19 = *(_QWORD *)(v18 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
      v20 = a1 + v16[7];
      if (*(_QWORD *)(v20 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
        swift_bridgeObjectRelease();
      }
      v21 = a1 + v16[8];
      if (*(_QWORD *)(v21 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
        swift_bridgeObjectRelease();
      }
      v22 = a1 + v16[9];
      if (*(_QWORD *)(v22 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
        swift_bridgeObjectRelease();
      }
      v23 = a1 + v16[10];
      type metadata accessor for Predicate<Pack{URL}>();
      v25 = v24;
      v26 = *(_QWORD *)(v24 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v23, 1, v24);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v23, v25);
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = (int *)type metadata accessor for FileImportOperation(0);
      v6 = a1 + v5[5];
      v7 = type metadata accessor for URL();
      v8 = *(_QWORD *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      v9 = a1 + v5[6];
      if (*(_QWORD *)(v9 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
        swift_bridgeObjectRelease();
      }
      v10 = a1 + v5[7];
      if (*(_QWORD *)(v10 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
        swift_bridgeObjectRelease();
      }
      v11 = a1 + v5[8];
      if (*(_QWORD *)(v11 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v12 = a1 + v5[11];
      type metadata accessor for Predicate<Pack{URL}>();
      v14 = v13;
      v15 = *(_QWORD *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size_1(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  if ((a1 & 1) != 0)
  {
    if (v16 < a4
      || (v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80),
          (char *)v16 + v20 >= (char *)a4 + v20 + *(_QWORD *)(v19 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v10 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_8;
  v11 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v11 + 8 * v9) == a2)
    goto LABEL_7;
  v12 = ~v8;
  v9 = (v9 + 1) & v12;
  if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_9;
  }
  while (*(_QWORD *)(v11 + 8 * v9) != a2)
  {
    v9 = (v9 + 1) & v12;
    if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_8;
  }
LABEL_7:
  result = 0;
LABEL_9:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 result;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v9 = ~v5;
  v10 = (v6 + 1) & v9;
  if (((*(_QWORD *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return 0;
  if (*(_QWORD *)(v8 + 8 * v10) == a1)
    return 1;
  v11 = (v10 + 1) & v9;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v9;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t protocol witness for static GraphInput.tryToReuse(_:by:indirectMap:testOnly:) in conformance SourceInput<A>()
{
  lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>();
  return static GraphInput<>.tryToReuse(_:by:indirectMap:testOnly:)();
}

uint64_t protocol witness for static GraphInput.tryToReuse(_:by:indirectMap:testOnly:) in conformance StyleInput<A>()
{
  lazy protocol witness table accessor for type Stack<AnyStyleModifier> and conformance <A> Stack<A>();
  return static GraphInput<>.tryToReuse(_:by:indirectMap:testOnly:)();
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance AnyStyleModifier(unsigned int *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return AnyStyleModifier.tryToReuse(by:indirectMap:testOnly:)(*a1, *((_QWORD *)a1 + 1), a2, a3, *(_DWORD *)v3, *(_QWORD *)(v3 + 8));
}

uint64_t AnyStyleModifier.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int a5, uint64_t a6)
{
  char v9;

  if (a6 != a2)
    return 0;
  if (*(_QWORD *)(IndirectAttributeMap.map.getter() + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(a5), (v9 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    if ((a4 & 1) == 0)
      AGGraphSetIndirectAttribute();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

id UIImage.resizingInfo.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id result;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  result = objc_msgSend(v1, sel_capInsets);
  if (v7 == *MEMORY[0x1E0DC49E8]
    && v4 == *(double *)(MEMORY[0x1E0DC49E8] + 8)
    && v5 == *(double *)(MEMORY[0x1E0DC49E8] + 16)
    && v6 == *(double *)(MEMORY[0x1E0DC49E8] + 24))
  {
    v19 = 2;
    v12 = 0;
    v14 = 0;
    v16 = 0;
    v18 = 0;
  }
  else
  {
    objc_msgSend(v1, sel_capInsets);
    v12 = v11;
    objc_msgSend(v1, sel_capInsets);
    v14 = v13;
    objc_msgSend(v1, sel_capInsets);
    v16 = v15;
    objc_msgSend(v1, sel_capInsets);
    v18 = v17;
    result = objc_msgSend(v1, sel_resizingMode);
    v19 = result != 0;
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v18;
  *(_BYTE *)(a1 + 32) = v19;
  return result;
}

uint64_t ToolbarBridge.preferencesDidChange<A>(_:hostingController:)(uint64_t *a1, void *a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  _BYTE v8[96];

  v2 = *a1;
  v3 = a2;
  Toolbar.UpdateContext.init<A>(hostingController:)(v3, (uint64_t)v8);
  v7 = v2;
  v4 = ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)&v7, (uint64_t)v8);
  ToolbarBridge.adoptUpdates<A>(_:hostingController:)(v4, v5 & 0xFF0101, v3);
  swift_bridgeObjectRelease();
  return outlined destroy of Toolbar.UpdateContext((uint64_t)v8);
}

uint64_t ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[88];
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;

  v3 = v2;
  v14 = MEMORY[0x1E0DEE9E8];
  v15 = 0;
  v16 = 0;
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v12);
  swift_beginAccess();
  EnvironmentValues.horizontalSizeClass.getter();
  v12[80] = v11;
  EnvironmentValues.verticalSizeClass.getter();
  swift_endAccess();
  v12[81] = v11;
  PreferenceList.subscript.getter();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v4 = MEMORY[0x1E0DEE9D8];
  specialized Set.formUnion<A>(_:)(MEMORY[0x1E0DEE9D8]);
  swift_endAccess();
  swift_bridgeObjectRelease();
  v13 = v4;
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v12, (uint64_t)v8);
  v5 = (uint64_t)v2 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v8, v5);
  swift_endAccess();
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v12, (uint64_t)v8);
  static ToolbarStrategy.withUpdater<A>(_:_:body:)(v3, (uint64_t)v8, (void (*)(char *))partial apply for closure #1 in ToolbarBridge.preferencesDidChange(_:context:));
  outlined destroy of Toolbar.UpdateContext((uint64_t)v8);
  v6 = v14;
  swift_bridgeObjectRetain();
  $defer #1 <A>() in ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)v3);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static ToolbarStrategy.withUpdater<A>(_:_:body:)(_QWORD *a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v15;
  void (*v16)(char *);
  _BYTE v17[96];

  v16 = a3;
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v15 - v8;
  v11 = *(_QWORD *)(v10 + 88);
  (*(void (**)(uint64_t, uint64_t, double))(v11 + 64))(v5, v11, v7);
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 24);
  v13 = a1;
  v12(a1, v5, v11);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v17);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v17, v5, v11);
  v16(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void destroy for UIKitToolbarStrategy(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 96))
  {
    if (*(_BYTE *)(a1 + 16) != 2)
      swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_bridgeObjectRelease();
  }
}

double protocol witness for ToolbarStrategy.init() in conformance UIKitToolbarStrategy@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void protocol witness for ToolbarStrategy.updater.setter in conformance UIKitToolbarStrategy(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t protocol witness for ToolbarStrategy.updateContext.setter in conformance UIKitToolbarStrategy(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Toolbar.UpdateContext?(a1, v1 + 8);
}

uint64_t partial apply for closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t $defer #1 <A>() in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1)
{
  uint64_t v1;
  _OWORD v3[6];

  memset(v3, 0, sizeof(v3));
  v1 = a1 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v3, v1);
  return swift_endAccess();
}

uint64_t outlined assign with take of Toolbar.UpdateContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for EnvironmentValues.headerProminence : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.headerProminence.getter();
  *a1 = v3;
  return result;
}

void type metadata accessor for WeakBox<InputAccessoryGenerator>(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, 255, (uint64_t (*)(uint64_t))type metadata accessor for InputAccessoryGenerator, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

uint64_t outlined destroy of AccessibilityRelationshipScope.Key(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t outlined init with copy of ResolvedScrollBehavior(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(_WORD *)(a2 + 44) = *(_WORD *)(a1 + 44);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  return a2;
}

uint64_t initializeWithCopy for ResolvedScrollBehavior(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t Transaction.animationFrameInterval.setter()
{
  return Transaction._animationFrameInterval.setter();
}

void ToolbarBridge.adoptUpdates<A>(_:hostingController:)(uint64_t a1, int a2, id a3)
{
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  char v19;
  Class isa;
  char v21;
  char v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  id v34;

  v4 = v3;
  v5 = a3;
  v25 = *MEMORY[0x1E0DEEDD8];
  v26 = *v3;
  if ((a2 & 0x100) != 0)
  {
    v10 = *(_QWORD *)((char *)v3 + direct field offset for ToolbarBridge.navigationAdaptor);
    v11 = *(_QWORD *)(v10 + 16);
    if (!v11)
      goto LABEL_7;
    v12 = v10 + 32;
    swift_bridgeObjectRetain();
    v13 = 0;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v12, (uint64_t)&v31);
      outlined init with copy of TableColumnList((uint64_t)&v31, (uint64_t)v28);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)&v31);
      v14 = v29;
      v15 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(&v27, v14, v15);
      v13 |= v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      v12 += 48;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    if ((v13 & 2) != 0)
    {
      ToolbarBridge.resetPlatform()();
      v9 = 1;
    }
    else
    {
LABEL_7:
      v9 = 0;
    }
    v8 = 256;
    v5 = a3;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v16 = objc_msgSend(v5, sel_navigationItem);
  v17 = *(id *)((char *)v4 + direct field offset for ToolbarBridge.platformVended + 8);
  UINavigationItem.adoptNavigationItem(_:updates:forceUpdate:)(v17, a1, a2 & 0xFF0001 | v8, v9);

  if ((a2 & 0x100) != 0)
  {
    v18 = *(_QWORD *)((char *)v4 + direct field offset for ToolbarBridge.navigationAdaptor);
    if (*(_QWORD *)(v18 + 16))
    {
      swift_bridgeObjectRetain();
      *(_OWORD *)v33 = *(_OWORD *)((v25 & v26) + 0x50);
      *(_QWORD *)&v33[16] = v18;
      v34 = v5;
      static Update.ensure<A>(_:)();
      swift_bridgeObjectRelease();
    }
  }
  v31 = 0;
  v32 = 0;
  *(_QWORD *)v33 = 0;
  *(_OWORD *)&v33[8] = xmmword_187C39040;
  v19 = specialized Set.contains(_:)((uint64_t)&v31, a1);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v31);
  if ((v19 & 1) != 0)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setToolbarItems_, isa);

  }
  if ((a2 & 1) != 0)
    ToolbarBridge.updateToolbarVisibility<A>(hostingController:)(v5);
  v31 = 0;
  v32 = 0;
  *(_QWORD *)v33 = 0;
  *(_OWORD *)&v33[8] = xmmword_187C304C0;
  v21 = specialized Set.contains(_:)((uint64_t)&v31, a1);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v31);
  if ((v21 & 1) != 0)
    goto LABEL_20;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)v33 = 0;
  *(_OWORD *)&v33[8] = xmmword_187C304E0;
  v22 = specialized Set.contains(_:)((uint64_t)&v31, a1);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v31);
  if ((v22 & 1) != 0
    || (v31 = 0,
        v32 = 0,
        *(_QWORD *)v33 = 0,
        *(_OWORD *)&v33[8] = xmmword_187C39050,
        v23 = specialized Set.contains(_:)((uint64_t)&v31, a1),
        outlined destroy of Toolbar.BarLocation((uint64_t)&v31),
        (v23 & 1) != 0))
  {
LABEL_20:
    ToolbarBridge.updateTabBar<A>(hostingController:)(v5);
  }
}

void UINavigationItem.updateSearchControllerIfNeeded(_:)(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned int v11;

  v3 = objc_msgSend(v1, sel_searchController);
  if (v3)
  {
    v4 = v3;
    swift_getObjectType();
    v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

    if ((v5 & 1) == 0)
      return;
  }
  v6 = objc_msgSend(v1, sel_searchController);
  v7 = objc_msgSend(a1, sel_searchController);
  v8 = v7;
  if (v6)
  {

    if (v8)
    {

      if (v6 == v8)
        goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v7)
  {

LABEL_9:
    v9 = objc_msgSend(a1, sel_searchController);
    objc_msgSend(v1, sel_setSearchController_, v9);

  }
LABEL_10:
  v10 = objc_msgSend(v1, sel_preferredSearchBarPlacement);
  if (v10 != objc_msgSend(a1, sel_preferredSearchBarPlacement))
    objc_msgSend(v1, sel_setPreferredSearchBarPlacement_, objc_msgSend(a1, sel_preferredSearchBarPlacement));
  v11 = objc_msgSend(v1, sel_hidesSearchBarWhenScrolling);
  if (v11 != objc_msgSend(a1, sel_hidesSearchBarWhenScrolling))
    objc_msgSend(v1, sel_setHidesSearchBarWhenScrolling_, objc_msgSend(a1, sel_hidesSearchBarWhenScrolling));
}

void UINavigationItem.updateTrailingItemsIfNeeded(_:)(void *a1, SEL *a2, SEL *a3, SEL *a4)
{
  void *v4;
  void *v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  Class v24;
  uint64_t v25;
  void *v26;
  SEL *v27;
  Class isa;
  uint64_t v29;

  v8 = v4;
  v9 = objc_msgSend(a1, *a2);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = objc_msgSend(v8, *a2);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v12 = specialized _ArrayProtocol.filter(_:)(v11);
  swift_bridgeObjectRelease();
  specialized Array.replaceSubrange<A>(_:with:)(0, 0, v12);
  v13 = objc_msgSend(v8, *a3);
  if (!v13)
    goto LABEL_14;
  v14 = v13;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = specialized _ArrayProtocol.filter(_:)(v15);
  swift_bridgeObjectRelease();
  if (!(v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x1E0DEE9D8];
LABEL_13:
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v25);
LABEL_14:
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, *a4, isa);

    return;
  }
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v17)
    goto LABEL_12;
LABEL_4:
  v29 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v17 & 0x8000000000000000) == 0)
  {
    v26 = v8;
    v27 = a4;
    v18 = 0;
    v19 = MEMORY[0x1E0DEE9B0] + 8;
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x18D75E3BC](v18, v16);
      else
        v20 = *(id *)(v16 + 8 * v18 + 32);
      v21 = v20;
      ++v18;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, v19, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_187BFF9C0;
      *(_QWORD *)(v22 + 32) = v21;
      specialized Array._endMutation()();
      v23 = objc_allocWithZone(MEMORY[0x1E0DC3500]);
      v24 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v23, sel_initWithBarButtonItems_representativeItem_, v24, 0);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v17 != v18);
    v25 = v29;
    swift_bridgeObjectRelease();
    v8 = v26;
    a4 = v27;
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a6;
    v9 = a3;
    v10 = a2;
    v11 = a1;
    v8 = *v7;
    if (!((unint64_t)*v7 >> 62))
    {
      v13 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13 >= a2)
        goto LABEL_4;
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v13 < v10)
    goto LABEL_37;
LABEL_4:
  v12 = v10 - v11;
  if (__OFSUB__(v10, v11))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v13 = (unint64_t)v9 >> 62;
  if (!((unint64_t)v9 >> 62))
  {
    v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v15 = v14 - v12;
    if (!__OFSUB__(v14, v12))
      goto LABEL_7;
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v17 = v32 + v38;
    if (!__OFADD__(v32, v38))
      goto LABEL_9;
LABEL_47:
    __break(1u);
LABEL_48:
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_39:
  if (v9 < 0)
    v8 = v9;
  else
    v8 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v15 = v14 - v12;
  if (__OFSUB__(v14, v12))
    goto LABEL_44;
LABEL_7:
  v8 = *v7;
  v38 = v15;
  v36 = v13;
  if ((unint64_t)*v7 >> 62)
    goto LABEL_45;
  v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  v17 = v16 + v15;
  if (__OFADD__(v16, v15))
    goto LABEL_47;
LABEL_9:
  v40 = v14;
  v35 = v6;
  v14 = *v7;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v7 = v14;
  v37 = v9;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v14 & 0x8000000000000000) == 0
    && (v14 & 0x4000000000000000) == 0)
  {
    v19 = v14 & 0xFFFFFFFFFFFFFF8;
    if (v17 <= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v8 = 1;
  }
  if (v14 >> 62)
    goto LABEL_48;
  v20 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v20 <= v17)
    v20 = v17;
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x18D75E3C8](v8, v20, 1, v14);
  swift_bridgeObjectRelease();
  *v7 = v14;
  v19 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  v21 = v19 + 32 + 8 * v11;
  type metadata accessor for NSObject(0, a4);
  swift_arrayDestroy();
  v22 = v38;
  if (!v38)
  {
LABEL_29:
    if (v40 < 1)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      return specialized Array._endMutation()();
    }
    if (v36)
    {
      v29 = swift_bridgeObjectRetain();
      v30 = v35(v29);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(v30 + 32, *(_QWORD *)(v30 + 16), v40, v21, a4);
      swift_release();
      goto LABEL_34;
    }
    if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) == v40)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_55;
  }
  if (!(v14 >> 62))
  {
    v23 = *(_QWORD *)(v19 + 16);
    v24 = v23 - v10;
    if (!__OFSUB__(v23, v10))
      goto LABEL_22;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  swift_bridgeObjectRetain();
  v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v22 = v38;
  v24 = v33 - v10;
  if (__OFSUB__(v33, v10))
    goto LABEL_51;
LABEL_22:
  if ((v24 & 0x8000000000000000) == 0)
  {
    v25 = (char *)(v21 + 8 * v40);
    v26 = (char *)(v19 + 32 + 8 * v10);
    if (v25 != v26 || v25 >= &v26[8 * v24])
    {
      memmove(v25, v26, 8 * v24);
      v22 = v38;
    }
    if (!(v14 >> 62))
    {
      v27 = *(_QWORD *)(v19 + 16);
      v28 = v27 + v22;
      if (!__OFADD__(v27, v22))
      {
LABEL_28:
        *(_QWORD *)(v19 + 16) = v28;
        goto LABEL_29;
      }
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
LABEL_52:
    swift_bridgeObjectRetain();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v28 = v34 + v38;
    if (!__OFADD__(v34, v38))
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_56:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, &lazy cache variable for type metadata for UIBarButtonItemGroup, 0x1E0DC3500, (uint64_t (*)(uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 < v5)
    goto LABEL_31;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x18D75E3C8](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  type metadata accessor for AccessibilityNode();
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()();
  }
  if (!(v7 >> 62))
  {
    v16 = *(_QWORD *)(v13 + 16);
    v17 = v16 - v5;
    if (!__OFSUB__(v16, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v17 = v24 - v5;
  if (__OFSUB__(v24, v5))
    goto LABEL_40;
LABEL_21:
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v15 + 1);
    v19 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v19 || v18 >= &v19[8 * v17])
      memmove(v18, v19, 8 * v17);
    if (!(v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v21 = v25 + v8;
    if (!__OFADD__(v25, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v7 = a1;
    v6 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 < v5)
    goto LABEL_31;
LABEL_4:
  v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v6 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v6 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v6;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v6 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x18D75E3C8](v10, v14, 1, v6);
  swift_bridgeObjectRelease();
  *v4 = v6;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v7);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()();
  }
  if (!(v6 >> 62))
  {
    v16 = *(_QWORD *)(v13 + 16);
    v17 = v16 - v5;
    if (!__OFSUB__(v16, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v17 = v24 - v5;
  if (__OFSUB__(v24, v5))
    goto LABEL_40;
LABEL_21:
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v15 + 1);
    v19 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v19 || v18 >= &v19[8 * v17])
      memmove(v18, v19, 8 * v17);
    if (!(v6 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v21 = v25 + v8;
    if (!__OFADD__(v25, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement, 0x1E0DC39E0, (uint64_t (*)(uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t closure #1 in OnPlatformContainerSelectionModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  __int128 v55;
  uint64_t v56;
  char v57;

  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v40 - v11;
  v13 = *a1;
  if (*(_QWORD *)(*a1 + 16) == 1)
  {
    v14 = *(unsigned __int8 *)(v5 + 80);
    v15 = (v14 + 32) & ~v14;
    outlined init with copy of PlatformItemList.Item(v13 + v15, (uint64_t)&v40 - v11);
    v16 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v49 = v14;
      v50 = (v14 + 32) & ~v14;
      v52 = v13;
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(_QWORD *)(a2 + 72);
      v19 = *(unsigned __int8 *)(a2 + 80);
      outlined copy of Environment<ControlSize>.Content(v18, v19);
      specialized Environment.wrappedValue.getter(v18, v19, &v55);
      outlined consume of Environment<ControlSize>.Content(v18, v19);
      LODWORD(v48) = v55;
      v20 = *(_QWORD *)(a2 + 24);
      v21 = *(unsigned __int8 *)(a2 + 32);
      outlined copy of Environment<ControlSize>.Content(v20, v21);
      v22 = specialized Environment.wrappedValue.getter(v20, v21);
      outlined consume of Environment<ControlSize>.Content(v20, v21);
      v53 = v8;
      v54 = a1;
      v51 = v5;
      if ((v22 & 1) != 0)
      {
        v23 = v17;
        swift_retain();
      }
      else
      {
        v16 = 0;
        v23 = 0;
      }
      v24 = *(unsigned __int8 *)(a2 + 16) | 0x100;
      v46 = *((_QWORD *)v12 + 50);
      v47 = v24;
      v25 = *((_QWORD *)v12 + 51);
      v44 = *((_QWORD *)v12 + 52);
      v45 = v25;
      v26 = *((_QWORD *)v12 + 53);
      v27 = *((_QWORD *)v12 + 54);
      v28 = *((_QWORD *)v12 + 55);
      v42 = *((_QWORD *)v12 + 56);
      v43 = v28;
      v41 = *((_QWORD *)v12 + 57);
      v29 = v12[464];
      outlined copy of AppIntentExecutor?(v16);
      outlined copy of AppIntentExecutor?(0);
      outlined copy of AppIntentExecutor?(0);
      LOBYTE(v39) = v29;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v46, v45, v44, v26, v27, v43, v42, v41, v39, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      *((_QWORD *)v12 + 50) = v47;
      *((_QWORD *)v12 + 51) = v16;
      *((_QWORD *)v12 + 52) = v23;
      *(_OWORD *)(v12 + 424) = 0u;
      *(_OWORD *)(v12 + 440) = 0u;
      *((_QWORD *)v12 + 57) = 0;
      v12[464] = v48;
      outlined copy of Environment<ControlSize>.Content(v20, v21);
      v30 = specialized Environment.wrappedValue.getter(v20, v21);
      outlined consume of Environment<ControlSize>.Content(v20, v21);
      v12[56] = v30 & 1;
      v31 = *(_QWORD *)(a2 + 40);
      v32 = *(_QWORD *)(a2 + 48);
      v33 = *(_QWORD *)(a2 + 56);
      v34 = *(unsigned __int8 *)(a2 + 64);
      v35 = *(unsigned __int8 *)(a2 + 65);
      outlined copy of Environment<KeyboardShortcut?>.Content(v31, v32, v33, v34, v35);
      specialized Environment.wrappedValue.getter(v31, v32, v33, v34 | (v35 << 8), (uint64_t)&v55);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
      outlined consume of Environment<KeyboardShortcut?>.Content(v31, v32, v33, v34, v35);
      v48 = v55;
      v36 = v56;
      LOBYTE(v32) = v57;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v12 + 472) = v48;
      *((_QWORD *)v12 + 61) = v36;
      v12[496] = v32;
      v8 = v53;
      a1 = v54;
      v15 = v50;
    }
    outlined init with copy of PlatformItemList.Item((uint64_t)v12, (uint64_t)v8);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_187BF9830;
    outlined init with take of PlatformItemList.Item((uint64_t)v8, v37 + v15);
    swift_bridgeObjectRelease();
    *a1 = v37;
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of PlatformItemList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for PlatformItemList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  swift_release();
  v4 = *(_QWORD *)(a1 + 184);
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v6);
      v4 = *(_QWORD *)(a1 + 184);
      v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v5 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v4);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    v7 = *(void **)(a1 + 264);
    if ((unint64_t)v7 >= 2)

    swift_release();
    swift_release();
  }
  v8 = *(_QWORD *)(a1 + 328);
  if (v8 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v8, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
  v9 = *(_QWORD *)(a1 + 408);
  if (v9)
  {
    if (v9 == 1)
      goto LABEL_20;
    swift_release();
  }
  if (*(_QWORD *)(a1 + 424))
    swift_release();
  if (*(_QWORD *)(a1 + 440))
    swift_release();
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 504))
    swift_release();
  if (*(_QWORD *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(a2 + 112);
  v11 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = v10 + *(int *)(v11 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
    v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    if (*(_QWORD *)(v10 + *(int *)(v11 + 24)))
      swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for PlatformItemList.Item(uint64_t a1, uint64_t a2, int *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  void (*v79)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(_BYTE *, uint64_t, uint64_t);
  uint64_t v92;
  void *__dsta;
  _BYTE *__dst;

  v5 = *(void **)a2;
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = a1 + 64;
  v10 = a2 + 64;
  v11 = *(_QWORD *)(a2 + 184);
  v12 = v5;
  v13 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v11 >> 1 != 4294967294)
  {
    v23 = *(unsigned __int8 *)(a2 + 72);
    if (v23 == 255)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
    }
    else
    {
      v24 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v24, *(_BYTE *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v24;
      *(_BYTE *)(a1 + 72) = v23;
      v11 = *(_QWORD *)(a2 + 184);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    v25 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v25;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    if (v11 >> 1 == 0xFFFFFFFF)
    {
      v26 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v26;
    }
    else
    {
      v27 = *(_QWORD *)(a2 + 168);
      v28 = *(_QWORD *)(a2 + 176);
      v29 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v27, v28, v11);
      *(_QWORD *)(a1 + 168) = v27;
      *(_QWORD *)(a1 + 176) = v28;
      *(_QWORD *)(a1 + 184) = v11;
      *(_QWORD *)(a1 + 192) = v29;
    }
    v30 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v30;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    v31 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v31;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v32 = v31;
    v19 = *(_QWORD *)(a2 + 256);
    if (v19)
      goto LABEL_3;
LABEL_13:
    v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_14;
  }
  v14 = *(_OWORD *)(v10 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v9 + 144) = v14;
  *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
  *(_DWORD *)(v9 + 175) = *(_DWORD *)(v10 + 175);
  v15 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v15;
  v16 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v9 + 112) = v16;
  v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  v18 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v18;
  v19 = *(_QWORD *)(a2 + 256);
  if (!v19)
    goto LABEL_13;
LABEL_3:
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v19;
  v20 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v20 >= 2)
    v21 = v20;
  *(_QWORD *)(a1 + 264) = v20;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  v22 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v22;
  swift_retain();
  swift_retain();
LABEL_14:
  v34 = *(_QWORD *)(a2 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
    v35 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v35;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v36 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v36;
    v37 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v37;
  }
  else
  {
    v38 = *(void **)(a2 + 296);
    v39 = *(_QWORD *)(a2 + 304);
    v40 = *(_QWORD *)(a2 + 312);
    v41 = *(_QWORD *)(a2 + 320);
    v42 = *(_QWORD *)(a2 + 336);
    v43 = *(_QWORD *)(a2 + 344);
    v44 = *(_QWORD *)(a2 + 352);
    v87 = *(_QWORD *)(a2 + 360);
    v88 = *(_QWORD *)(a2 + 368);
    v89 = *(_QWORD *)(a2 + 376);
    v90 = *(_QWORD *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v38, v39, v40, v41, v34, v42, v43, v44, v87, v88, v89, v90, (uint64_t)__dsta);
    *(_QWORD *)(a1 + 296) = v38;
    *(_QWORD *)(a1 + 304) = v39;
    *(_QWORD *)(a1 + 312) = v40;
    *(_QWORD *)(a1 + 320) = v41;
    *(_QWORD *)(a1 + 328) = v34;
    *(_QWORD *)(a1 + 336) = v42;
    *(_QWORD *)(a1 + 344) = v43;
    *(_QWORD *)(a1 + 352) = v44;
    *(_QWORD *)(a1 + 360) = v87;
    *(_QWORD *)(a1 + 368) = v88;
    *(_QWORD *)(a1 + 376) = v89;
    *(_QWORD *)(a1 + 384) = v90;
    *(_QWORD *)(a1 + 392) = __dsta;
  }
  v45 = *(_QWORD *)(a2 + 408);
  if (v45 == 1)
  {
    v46 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v46;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
    v47 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v47;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  if (v45)
  {
    v48 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v45;
    *(_QWORD *)(a1 + 416) = v48;
    swift_retain();
    v49 = *(_QWORD *)(a2 + 424);
    if (v49)
      goto LABEL_21;
LABEL_24:
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    v51 = *(_QWORD *)(a2 + 440);
    if (v51)
      goto LABEL_22;
LABEL_25:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  v49 = *(_QWORD *)(a2 + 424);
  if (!v49)
    goto LABEL_24;
LABEL_21:
  v50 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v49;
  *(_QWORD *)(a1 + 432) = v50;
  swift_retain();
  v51 = *(_QWORD *)(a2 + 440);
  if (!v51)
    goto LABEL_25;
LABEL_22:
  v52 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v51;
  *(_QWORD *)(a1 + 448) = v52;
  swift_retain();
LABEL_26:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_27:
  v53 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v53;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v54 = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v54)
  {
    v55 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v54;
    *(_QWORD *)(a1 + 512) = v55;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v56 = *(_QWORD *)(a2 + 528);
  if (v56)
  {
    *(_QWORD *)(a1 + 528) = v56;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  }
  v57 = *(_QWORD *)(a2 + 552);
  if (v57 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  }
  else
  {
    *(_QWORD *)(a1 + 552) = v57;
    v58 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (v58)
    {
      v59 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v58;
      *(_QWORD *)(a1 + 568) = v59;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  v60 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v60;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  v61 = *(_QWORD *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v62 = a3[28];
  __dst = (_BYTE *)(a1 + v62);
  v63 = (_BYTE *)(a2 + v62);
  *(_QWORD *)(a1 + 624) = v61;
  v64 = type metadata accessor for CommandOperation();
  v65 = *(_QWORD *)(v64 - 8);
  v91 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48);
  v66 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v91(v63, 1, v64))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    v92 = v65;
    *__dst = *v63;
    v68 = v64;
    v69 = *(int *)(v64 + 20);
    v70 = &__dst[v69];
    v71 = &v63[v69];
    v72 = *(_QWORD *)&v63[v69];
    v73 = *(_QWORD *)&v63[v69 + 8];
    v74 = v63[v69 + 16];
    outlined copy of Text.Storage(v72, *((_QWORD *)v71 + 1), v71[16]);
    *(_QWORD *)v70 = v72;
    *((_QWORD *)v70 + 1) = v73;
    v70[16] = v74;
    *((_QWORD *)v70 + 3) = *((_QWORD *)v71 + 3);
    v75 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v76 = &v70[v75];
    v77 = &v71[v75];
    v78 = type metadata accessor for UUID();
    v79 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
    swift_bridgeObjectRetain();
    v79(v76, v77, v78);
    v80 = *(int *)(v68 + 24);
    v81 = &__dst[v80];
    v82 = &v63[v80];
    if (*v82)
    {
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v81 = *(_OWORD *)v82;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v68);
  }
  v84 = a3[30];
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v84) = *(_BYTE *)(a2 + v84);
  v85 = a3[32];
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v85) = *(_BYTE *)(a2 + v85);
  *(_QWORD *)(a1 + a3[33]) = *(_QWORD *)(a2 + a3[33]);
  swift_retain();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandGroupPlacement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CommandOperation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for CommandOperation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CommandOperation;
  if (!type metadata singleton initialization cache for CommandOperation)
    return swift_getSingletonMetadata();
  return result;
}

void UICollectionViewListCoordinatorBase.listCollectionViewCell<A>(_:platformItemIsSelected:)(char *a1, int a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  id v55;
  id v56;
  char *v57;
  char *v58;
  id v59;
  void *v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  void (*v63)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  _BYTE *v68;
  char *v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  void (*v72)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t);
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t);
  uint64_t (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t);
  void (*v93)(uint64_t, uint64_t);
  uint64_t (*v94)(uint64_t, uint64_t);
  Class isa;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  Class v104;
  uint64_t v105;
  void (*v106)(_BYTE *, uint64_t);
  unsigned int (*v107)(uint64_t, uint64_t, uint64_t);
  char v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t (*v111)(void);
  uint64_t (*v112)(uint64_t);
  uint64_t (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  _BYTE v115[12];
  int v116;
  void (*v117)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v118)(_BYTE *, _BYTE *, uint64_t);
  id v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  int v124;
  _QWORD *v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  unsigned int (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  _BYTE *v141;
  _BYTE *v142;
  _BYTE *v143;
  void (*v144)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t);
  unsigned int (*v145)(uint64_t, uint64_t, uint64_t);
  id v146;

  type metadata accessor for (IndexPath?, IndexPath?)();
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v142 = &v115[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v115[-v11];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v115[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = &v115[-v19];
  MEMORY[0x1E0C80A78](v21, v22);
  v141 = &v115[-v23];
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = &v115[-v26];
  MEMORY[0x1E0C80A78](v28, v29);
  v143 = &v115[-v30];
  MEMORY[0x1E0C80A78](v31, v32);
  v144 = (void (*)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))&v115[-v33];
  MEMORY[0x1E0C80A78](v34, v35);
  v145 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))&v115[-v36];
  v37 = type metadata accessor for IndexPath();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v39);
  MEMORY[0x1E0C80A78](v40, v41);
  v146 = a1;
  v45 = &a1[direct field offset for ListCollectionViewCellBase.selectionBehavior];
  v46 = *(_QWORD *)&a1[direct field offset for ListCollectionViewCellBase.selectionBehavior + 8];
  if (v46 == 1)
    return;
  v47 = *(_QWORD *)v45;
  if ((*(_QWORD *)v45 & 0x101) != 0x100)
    return;
  v126 = v27;
  v127 = v12;
  v124 = a2;
  v129 = v44;
  v128 = v6;
  v125 = v2;
  v123 = v20;
  v122 = v16;
  v140 = v47;
  v135 = &v115[-v43];
  v138 = v42;
  v49 = *((_QWORD *)v45 + 2);
  v48 = *((_QWORD *)v45 + 3);
  v51 = *((_QWORD *)v45 + 4);
  v50 = *((_QWORD *)v45 + 5);
  v53 = *((_QWORD *)v45 + 6);
  v52 = *((_QWORD *)v45 + 7);
  v54 = v45[64];
  outlined copy of AppIntentExecutor?(v46);
  outlined copy of AppIntentExecutor?(v48);
  outlined copy of AppIntentExecutor?(v50);
  v55 = v146;
  v56 = objc_msgSend(v146, sel__collectionView);
  if (!v56)
  {
    v79 = v140;
    v80 = v46;
    v81 = v49;
    v82 = v48;
    v83 = v51;
    v84 = v50;
LABEL_11:
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v79, v80, v81, v82, v83, v84);
    return;
  }
  v137 = v54;
  v130 = v49;
  v131 = v46;
  v136 = v48;
  v132 = v51;
  v133 = v50;
  v134 = v53;
  v139 = v56;
  type metadata accessor for UpdateCoalescingCollectionView(0);
  v57 = (char *)swift_dynamicCastClass();
  if (!v57)
  {
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v140, v131, v130, v136, v132, v133);

    return;
  }
  v58 = v57;
  v121 = v52;
  v59 = objc_msgSend(v57, sel_indexPathForCell_, v55);
  if (!v59)
  {
    v64 = (uint64_t)v145;
    (*(void (**)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v38 + 56))(v145, 1, 1, v138);
    goto LABEL_14;
  }
  v60 = v59;
  v61 = v129;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  v62 = v38;
  v63 = *(void (**)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))(v38 + 32);
  v64 = (uint64_t)v145;
  v65 = v138;
  v63(v145, (uint64_t)v61, v138);
  v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
  v66(v64, 0, 1, v65);
  v120 = v62;
  v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  if (v67(v64, 1, v65) == 1)
  {
LABEL_14:
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v140, v131, v130, v136, v132, v133);

    outlined destroy of Binding<AttributedString>(v64, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return;
  }
  v68 = v135;
  v63((unsigned int (*)(uint64_t, uint64_t, uint64_t))v135, v64, v65);
  v119 = v58;
  v145 = v67;
  v69 = &v58[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem];
  swift_beginAccess();
  v70 = (uint64_t)v69;
  v72 = v144;
  v71 = v145;
  outlined init with copy of IndexPath?(v70, (uint64_t)v144);
  v73 = v143;
  v118 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v120 + 16);
  v118(v143, v68, v65);
  v66((uint64_t)v73, 0, 1, v65);
  v74 = (uint64_t)v127;
  v75 = (uint64_t)&v127[*(int *)(v128 + 48)];
  outlined init with copy of IndexPath?((uint64_t)v72, (uint64_t)v127);
  outlined init with copy of IndexPath?((uint64_t)v73, v75);
  if (v71(v74, 1, v65) == 1)
  {
    v76 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
    outlined destroy of Binding<AttributedString>((uint64_t)v73, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of Binding<AttributedString>((uint64_t)v72, &lazy cache variable for type metadata for IndexPath?, v76, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v71(v75, 1, v65) == 1)
    {
      outlined destroy of Binding<AttributedString>(v74, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v77 = v133;
      v78 = v136;
      (*(void (**)(_BYTE *, uint64_t))(v120 + 8))(v135, v138);
LABEL_27:

      v79 = v140;
      v80 = v131;
      v81 = v130;
      v82 = v78;
      v83 = v132;
      v84 = v77;
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  v85 = (uint64_t)v126;
  outlined init with copy of IndexPath?(v74, (uint64_t)v126);
  if (v71(v75, 1, v65) == 1)
  {
    v86 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
    v87 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    outlined destroy of Binding<AttributedString>((uint64_t)v143, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of Binding<AttributedString>((uint64_t)v144, &lazy cache variable for type metadata for IndexPath?, v86, v87);
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v85, v65);
LABEL_18:
    v117 = v66;
    outlined destroy of (IndexPath?, IndexPath?)(v74);
    v77 = v133;
    v78 = v136;
    goto LABEL_19;
  }
  v117 = v66;
  v63(v61, v75, v65);
  v92 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
  v116 = dispatch thunk of static Equatable.== infix(_:_:)();
  v93 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
  v93((uint64_t)v61, v65);
  v94 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined destroy of Binding<AttributedString>((uint64_t)v143, &lazy cache variable for type metadata for IndexPath?, v92, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined destroy of Binding<AttributedString>((uint64_t)v144, &lazy cache variable for type metadata for IndexPath?, v92, v94);
  v93(v85, v65);
  outlined destroy of Binding<AttributedString>(v74, &lazy cache variable for type metadata for IndexPath?, v92, v94);
  v77 = v133;
  v78 = v136;
  if ((v116 & 1) != 0)
  {
    v93((uint64_t)v135, v138);
    goto LABEL_27;
  }
LABEL_19:
  if ((objc_msgSend(v119, sel_isEditing) & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v120 + 8))(v135, v138);
    goto LABEL_27;
  }
  if ((v124 & 1) == 0)
  {
    v144 = v63;
    if (objc_msgSend(v146, sel_isSelected))
    {
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v119, sel_deselectItemAtIndexPath_animated_, isa, 0);

    }
    v96 = (uint64_t)v125 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v125) + 0xD8);
    swift_beginAccess();
    v97 = (uint64_t)v123;
    v98 = v135;
    v99 = v138;
    v118(v123, v135, v138);
    v117(v97, 0, 1, v99);
    v100 = v142;
    v101 = (uint64_t)&v142[*(int *)(v128 + 48)];
    outlined init with copy of IndexPath?(v96, (uint64_t)v142);
    outlined init with copy of IndexPath?(v97, v101);
    v102 = v145;
    if (v145((uint64_t)v100, 1, v99) == 1)
    {
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v140, v131, v130, v136, v132, v77);

      outlined destroy of Binding<AttributedString>(v97, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      (*(void (**)(_BYTE *, uint64_t))(v120 + 8))(v98, v99);
      if (v102(v101, 1, v99) == 1)
      {
        outlined destroy of Binding<AttributedString>((uint64_t)v142, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        v103 = v138;
        goto LABEL_38;
      }
    }
    else
    {
      v105 = (uint64_t)v122;
      outlined init with copy of IndexPath?((uint64_t)v100, (uint64_t)v122);
      if (v102(v101, 1, v99) != 1)
      {
        v107 = v129;
        v144(v129, v101, v99);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
        v108 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v140, v131, v130, v136, v132, v77);

        v109 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
        v109((uint64_t)v107, v99);
        v110 = v96;
        v111 = MEMORY[0x1E0DEB940];
        v112 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
        outlined destroy of Binding<AttributedString>((uint64_t)v123, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        v109((uint64_t)v135, v99);
        v109(v105, v99);
        v113 = (uint64_t (*)(uint64_t, uint64_t))v111;
        v96 = v110;
        outlined destroy of Binding<AttributedString>((uint64_t)v100, &lazy cache variable for type metadata for IndexPath?, v112, v113);
        v103 = v99;
        if ((v108 & 1) == 0)
          return;
LABEL_38:
        v114 = (uint64_t)v141;
        v117((uint64_t)v141, 1, 1, v103);
        swift_beginAccess();
        outlined assign with take of IndexPath?(v114, v96);
        swift_endAccess();
        return;
      }
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v140, v131, v130, v136, v132, v77);

      outlined destroy of Binding<AttributedString>((uint64_t)v123, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v106 = *(void (**)(_BYTE *, uint64_t))(v120 + 8);
      v106(v135, v99);
      v106((_BYTE *)v105, v99);
    }
    outlined destroy of (IndexPath?, IndexPath?)((uint64_t)v142);
    return;
  }
  v88 = (uint64_t)v141;
  v89 = v135;
  v90 = v138;
  v118(v141, v135, v138);
  v117(v88, 0, 1, v90);
  v91 = (uint64_t)v125 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v125) + 0xD8);
  swift_beginAccess();
  outlined assign with take of IndexPath?(v88, v91);
  swift_endAccess();
  if ((objc_msgSend(v146, sel_isSelected) & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v120 + 8))(v89, v90);
    goto LABEL_27;
  }
  v104 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v119, sel_selectItemAtIndexPath_animated_scrollPosition_, v104, 0, 0);

  outlined consume of PlatformItemList.Item.SelectionBehavior?(v140, v131, v130, v78, v132, v77);
  (*(void (**)(_BYTE *, uint64_t))(v120 + 8))(v89, v90);
}

uint64_t BorderlessButtonLabelShapeStyle.apply(to:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;

  if (v2[2] != 1)
    return HierarchicalShapeStyle._apply(to:)();
  if ((v2[1] & 1) != 0 || *v2 != 1)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 32))(a1, *(_QWORD *)(a2 + 16));
  static Color.red.getter();
  Color._apply(to:)();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutsetByRowInsetsIfNecessary.OutsetLayout, &type metadata for OutsetByRowInsetsIfNecessary.OutsetLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutsetByRowInsetsIfNecessary.OutsetLayout, &type metadata for OutsetByRowInsetsIfNecessary.OutsetLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutsetByRowInsetsIfNecessary.OutsetLayout, &type metadata for OutsetByRowInsetsIfNecessary.OutsetLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutsetByRowInsetsIfNecessary.OutsetLayout, &type metadata for OutsetByRowInsetsIfNecessary.OutsetLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout);
  }
  return result;
}

void type metadata accessor for MakeDefaultRepresentation<ResolvedButtonStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t DefaultRepresentation;
  uint64_t v6;

  if (!lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedButtonStyle>)
  {
    v2 = type metadata accessor for ResolvedButtonStyle(255);
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, type metadata accessor for ResolvedButtonStyle, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
    DefaultRepresentation = type metadata accessor for MakeDefaultRepresentation(a1, v2, v3, v4);
    if (!v6)
      atomic_store(DefaultRepresentation, (unint64_t *)&lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedButtonStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator;
  if (!lazy protocol witness table cache variable for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlwaysNavigationIndicator, &unk_1E1AE8670);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator);
  }
  return result;
}

uint64_t DefaultListButtonStyle.ListButton.body.getter@<X0>(void *a1@<X8>)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  char v21;
  char v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v36[11];
  __int128 v37;
  _QWORD v38[20];
  char v39;
  uint64_t v40;
  char v41;
  _OWORD v42[25];
  _BYTE v43[64];
  uint64_t (*v44)();
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  char v54;

  v2 = v1;
  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v42[2] = &type metadata for FocusableOptions;
  *((_QWORD *)&v42[2] + 1) = &protocol witness table for FocusableOptions;
  *((_QWORD *)&v42[0] + 1) = 8;
  LOBYTE(v42[0]) = 1;
  *(_QWORD *)&v42[3] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *((_QWORD *)&v42[3] + 1) = 0;
  outlined init with copy of _FocusableModifier((uint64_t)v42, (uint64_t)v36);
  outlined destroy of _FocusableModifier((uint64_t)v42);
  outlined init with copy of ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>((uint64_t)v36, (uint64_t)v42);
  outlined destroy of ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>((uint64_t)v36);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v2, (uint64_t)v8, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v8, v10 + v9, type metadata accessor for PrimitiveButtonStyleConfiguration);
  KeyPath = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v42, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
  swift_release();
  v44 = partial apply for implicit closure #2 in implicit closure #1 in BorderedButton.body.getter;
  v45 = v10;
  v46 = 1;
  v47 = KeyPath;
  v48 = 0;
  v50 = 0;
  v51 = 0;
  v49 = v12;
  v52 = 0;
  v53 = v13;
  v54 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
  v14 = swift_getKeyPath();
  v15 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v43, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>);
  v38[19] = v14;
  v39 = 0;
  v40 = v15;
  v41 = 0;
  v16 = *v2;
  v17 = v2[1];
  v18 = type metadata accessor for DefaultListButtonStyle.ListButton();
  v19 = &v2[*(int *)(v18 + 20)];
  v20 = *(_QWORD *)v19;
  v21 = v19[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v19, v21);
  v22 = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool>.Content(v20, v21);
  v23 = &v2[*(int *)(v18 + 24)];
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  outlined copy of Environment<SceneBridge?>.Content(*(_QWORD *)v23, v25);
  v26 = specialized Environment.wrappedValue.getter(v24, v25);
  outlined consume of Environment<AnyShapeStyle?>.Content(v24, v25);
  if (!v26)
    v26 = static HierarchicalShapeStyle.sharedPrimary.getter();
  v27 = 256;
  if (!v17)
    v27 = 0;
  v28 = v27 | v16;
  if ((v22 & 1) != 0)
    v29 = 0x10000;
  else
    v29 = 0;
  v30 = v29 | v28;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v38, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>);
  *((_QWORD *)&v37 + 1) = v30;
  *(_QWORD *)&v42[12] = v26;
  v42[6] = v36[6];
  v42[7] = v36[7];
  v42[8] = v36[8];
  v42[9] = v36[9];
  v42[2] = v36[2];
  v42[3] = v36[3];
  v42[4] = v36[4];
  v42[5] = v36[5];
  v42[0] = v36[0];
  v42[1] = v36[1];
  v42[10] = v36[10];
  v42[11] = v37;
  outlined copy of Environment<Bool>.Content(v20, v21);
  v31 = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool>.Content(v20, v21);
  v32 = AnyShapeStyle.init<A>(_:)();
  if ((v31 & 1) != 0)
    v33 = 0x10000;
  else
    v33 = 0;
  v34 = v33 | v28;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v38, (uint64_t)&v42[12] + 8, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>);
  *(_QWORD *)&v42[24] = v34;
  *((_QWORD *)&v42[24] + 1) = v32;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>);
  memcpy(a1, v42, 0x190uLL);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>);
}

uint64_t outlined destroy of _FocusableModifier(uint64_t a1)
{
  destroy for OnCommandModifier(a1);
  return a1;
}

uint64_t DefaultListButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t IsToggle;
  uint64_t v28;

  v4 = (int *)type metadata accessor for DefaultListButtonStyle.ListButton();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v16, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v21 = v16[1];
  *v12 = *v16;
  v12[1] = v21;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v16[*(int *)(v13 + 24)], (uint64_t)&v12[*(int *)(v9 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v12, (uint64_t)v20);
  v22 = (uint64_t)&v20[*(int *)(type metadata accessor for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>()
                             + 52)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v23 = &v7[v4[5]];
  *(_QWORD *)v23 = swift_getKeyPath();
  v23[8] = 0;
  v24 = &v7[v4[6]];
  *(_QWORD *)v24 = swift_getKeyPath();
  v24[8] = 0;
  v25 = &v7[v4[7]];
  *(_QWORD *)v25 = swift_getKeyPath();
  v25[8] = 0;
  outlined init with take of TableCellFormula((uint64_t)v7, v22, (uint64_t (*)(_QWORD))type metadata accessor for DefaultListButtonStyle.ListButton);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, a2, (uint64_t (*)(_QWORD))type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>);
  IsToggle = type metadata accessor for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>();
  return outlined init with take of TableCellFormula((uint64_t)v20, a2 + *(int *)(IsToggle + 52), (uint64_t (*)(_QWORD))type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>);
}

uint64_t type metadata accessor for DefaultListButtonStyle.ListButton()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DefaultListButtonStyle.ListButton;
  if (!type metadata singleton initialization cache for DefaultListButtonStyle.ListButton)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for _FocusableModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
  }
}

uint64_t UIKitNavigationBridge.preferencesDidChange(_:)()
{
  uint64_t v1;

  PreferenceList.subscript.getter();
  UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)((uint64_t)&v1);
  return swift_bridgeObjectRelease();
}

uint64_t UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD v13[5];
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;
  unsigned __int8 v19;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 != -1 && ((v4 = *(_DWORD *)(v1 + 136), v4 != -1) ? (v5 = v3 == v4) : (v5 = 0), v5))
  {
    *(_DWORD *)(v1 + 136) = v3;
    *(_QWORD *)(v1 + 144) = v2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_beginAccess();
    v6 = *(_QWORD *)(v1 + 48);
    if (v6)
      v7 = *(_QWORD *)(v1 + 32);
    else
      v7 = 0;
    v9 = v6 == 0;
    swift_bridgeObjectRetain();
    nextNavigationDestination(activePresentationID:destinations:)(v7, v9, v2, (uint64_t)v17);
    if (v19 == 255)
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)v17, &lazy cache variable for type metadata for NavigationDestinationPresentation?);
      outlined init with copy of BridgedPresentation?(v1 + 32, (uint64_t)v15);
      v10 = v16;
      outlined destroy of AccessibilityValueStorage?((uint64_t)v15, &lazy cache variable for type metadata for BridgedPresentation?);
      if (v10)
      {
        v11 = static Transaction.current.getter();
        popCurrentView #1 <A>(transaction:) in UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)(v11, v1);
        swift_release();
      }
    }
    else
    {
      outlined init with take of NavigationDestinationPresentation((uint64_t)v17, (uint64_t)v15);
      outlined init with copy of NavigationDestinationPresentation((uint64_t)v15, (uint64_t)v17);
      if ((v19 & 1) != 0)
      {
        popCurrentView #1 <A>(transaction:) in UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)(*((uint64_t *)&v17[0] + 1), v1);
        swift_release();
      }
      else
      {
        v13[2] = v17[2];
        v13[3] = v17[3];
        v13[4] = v17[4];
        v14 = v18;
        v13[0] = v17[0];
        v13[1] = v17[1];
        swift_retain();
        v12 = Transaction.disablesAnimations.getter();
        swift_release();
        UIKitNavigationBridge.updatePresentedContent(_:animated:)((uint64_t)v13, (v12 & 1) == 0);
        outlined destroy of NavigationDestinationContent((uint64_t)v13);
      }
      outlined destroy of NavigationDestinationPresentation((uint64_t)v15);
    }
    *(_DWORD *)(v1 + 136) = v3;
    *(_QWORD *)(v1 + 144) = v2;
    return swift_bridgeObjectRelease();
  }
}

uint64_t UIKitToolbarStrategy.updateLocations()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v35)();
  _QWORD v36[3];
  __int128 v37;
  uint64_t (*v38)();
  uint64_t v39;
  _BYTE v40[40];
  _QWORD v41[3];
  __int128 v42;
  uint64_t (*v43)();
  uint64_t v44;
  _BYTE v45[40];
  _QWORD v46[3];
  __int128 v47;
  uint64_t (*v48)();
  uint64_t v49;
  _BYTE v50[40];
  _QWORD v51[3];
  __int128 v52;
  uint64_t (*v53)();
  uint64_t v54;
  _BYTE v55[40];
  _QWORD v56[3];
  __int128 v57;
  uint64_t (*v58)();
  uint64_t v59;
  _BYTE v60[40];
  _QWORD v61[3];
  __int128 v62;
  uint64_t (*v63)();
  uint64_t v64;
  _BYTE v65[40];
  _QWORD v66[3];
  __int128 v67;
  uint64_t (*v68)();
  uint64_t v69;
  _BYTE v70[40];
  _QWORD v71[3];
  __int128 v72;
  uint64_t (*v73)();
  uint64_t v74;
  _BYTE v75[40];
  _QWORD v76[3];
  __int128 v77;
  _QWORD v78[2];
  _BYTE v79[40];
  _QWORD v80[3];
  __int128 v81;
  __int128 v82;
  _OWORD v83[2];
  uint64_t v84;
  _QWORD v85[3];
  __int128 v86;
  __int128 v87;
  _BYTE v88[32];
  uint64_t v89;
  _BYTE v90[32];
  uint64_t v91;
  uint64_t v92[2];
  _BYTE v93[104];

  type metadata accessor for _ContiguousArrayStorage<((), Toolbar.BarLocation)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<((), Toolbar.BarLocation)>, (unint64_t *)&lazy cache variable for type metadata for ((), Toolbar.BarLocation), (void (*)(uint64_t))type metadata accessor for (), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_187C39060;
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v2 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v2 + 16);
  v91 = 0;
  memset(v90, 0, sizeof(v90));
  *(_QWORD *)&v87 = partial apply for implicit closure #2 in implicit closure #1 in UIKitToolbarStrategy.updateLocations();
  *((_QWORD *)&v87 + 1) = v2;
  outlined init with take of Toolbar.BarLocation((uint64_t)v90, (uint64_t)v88);
  v3 = swift_allocObject();
  *(_QWORD *)(v1 + 32) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AnyHashable) -> (@unowned Bool);
  *(_QWORD *)(v3 + 16) = partial apply for implicit closure #2 in implicit closure #1 in UIKitToolbarStrategy.updateLocations();
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  outlined init with take of Toolbar.BarLocation((uint64_t)v88, v1 + 48);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v4 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v4 + 16);
  memset(v85, 0, sizeof(v85));
  v86 = xmmword_187BFE310;
  *(_QWORD *)&v82 = partial apply for implicit closure #4 in implicit closure #3 in UIKitToolbarStrategy.updateLocations();
  *((_QWORD *)&v82 + 1) = v4;
  outlined init with take of Toolbar.BarLocation((uint64_t)v85, (uint64_t)v83);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for implicit closure #4 in implicit closure #3 in UIKitToolbarStrategy.updateLocations();
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v1 + 88) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 96) = v5;
  outlined init with take of Toolbar.BarLocation((uint64_t)v83, v1 + 104);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v6 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v6 + 16);
  memset(v80, 0, sizeof(v80));
  v81 = xmmword_187C0CDF0;
  v78[0] = partial apply for implicit closure #6 in implicit closure #5 in UIKitToolbarStrategy.updateLocations();
  v78[1] = v6;
  outlined init with take of Toolbar.BarLocation((uint64_t)v80, (uint64_t)v79);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for implicit closure #6 in implicit closure #5 in UIKitToolbarStrategy.updateLocations();
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v1 + 144) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 152) = v7;
  outlined init with take of Toolbar.BarLocation((uint64_t)v79, v1 + 160);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v8 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v8 + 16);
  memset(v76, 0, sizeof(v76));
  v77 = xmmword_187C39070;
  v73 = partial apply for implicit closure #8 in implicit closure #7 in UIKitToolbarStrategy.updateLocations();
  v74 = v8;
  outlined init with take of Toolbar.BarLocation((uint64_t)v76, (uint64_t)v75);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #8 in implicit closure #7 in UIKitToolbarStrategy.updateLocations();
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v1 + 200) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 208) = v9;
  outlined init with take of Toolbar.BarLocation((uint64_t)v75, v1 + 216);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v10 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v10 + 16);
  memset(v71, 0, sizeof(v71));
  v72 = xmmword_187C304D0;
  v68 = partial apply for implicit closure #10 in implicit closure #9 in UIKitToolbarStrategy.updateLocations();
  v69 = v10;
  outlined init with take of Toolbar.BarLocation((uint64_t)v71, (uint64_t)v70);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for implicit closure #10 in implicit closure #9 in UIKitToolbarStrategy.updateLocations();
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v1 + 256) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 264) = v11;
  outlined init with take of Toolbar.BarLocation((uint64_t)v70, v1 + 272);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v12 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v12 + 16);
  memset(v66, 0, sizeof(v66));
  v67 = xmmword_187C39080;
  v63 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  v64 = v12;
  outlined init with take of Toolbar.BarLocation((uint64_t)v66, (uint64_t)v65);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v1 + 312) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 320) = v13;
  outlined init with take of Toolbar.BarLocation((uint64_t)v65, v1 + 328);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v14 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v14 + 16);
  memset(v61, 0, sizeof(v61));
  v62 = xmmword_187C304E0;
  v58 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  v59 = v14;
  outlined init with take of Toolbar.BarLocation((uint64_t)v61, (uint64_t)v60);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(_QWORD *)(v15 + 24) = v14;
  *(_QWORD *)(v1 + 368) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 376) = v15;
  outlined init with take of Toolbar.BarLocation((uint64_t)v60, v1 + 384);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v16 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v16 + 16);
  memset(v56, 0, sizeof(v56));
  v57 = xmmword_187C304C0;
  v53 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  v54 = v16;
  outlined init with take of Toolbar.BarLocation((uint64_t)v56, (uint64_t)v55);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v1 + 424) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 432) = v17;
  outlined init with take of Toolbar.BarLocation((uint64_t)v55, v1 + 440);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v18 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v18 + 16);
  memset(v51, 0, sizeof(v51));
  v52 = xmmword_187C39040;
  v48 = partial apply for implicit closure #18 in implicit closure #17 in UIKitToolbarStrategy.updateLocations();
  v49 = v18;
  outlined init with take of Toolbar.BarLocation((uint64_t)v51, (uint64_t)v50);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = partial apply for implicit closure #18 in implicit closure #17 in UIKitToolbarStrategy.updateLocations();
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v1 + 480) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 488) = v19;
  outlined init with take of Toolbar.BarLocation((uint64_t)v50, v1 + 496);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v20 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v20 + 16);
  memset(v46, 0, sizeof(v46));
  v47 = xmmword_187C39090;
  v43 = partial apply for implicit closure #20 in implicit closure #19 in UIKitToolbarStrategy.updateLocations();
  v44 = v20;
  outlined init with take of Toolbar.BarLocation((uint64_t)v46, (uint64_t)v45);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for implicit closure #20 in implicit closure #19 in UIKitToolbarStrategy.updateLocations();
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v1 + 536) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 544) = v21;
  outlined init with take of Toolbar.BarLocation((uint64_t)v45, v1 + 552);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v22 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v22 + 16);
  memset(v41, 0, sizeof(v41));
  v42 = xmmword_187C390A0;
  v38 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  v39 = v22;
  outlined init with take of Toolbar.BarLocation((uint64_t)v41, (uint64_t)v40);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v1 + 592) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 600) = v23;
  outlined init with take of Toolbar.BarLocation((uint64_t)v40, v1 + 608);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  v24 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v24 + 16);
  memset(v36, 0, sizeof(v36));
  v37 = xmmword_187C39050;
  v92[0] = (uint64_t)partial apply for implicit closure #24 in implicit closure #23 in UIKitToolbarStrategy.updateLocations();
  v92[1] = v24;
  outlined init with take of Toolbar.BarLocation((uint64_t)v36, (uint64_t)v93);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #24 in implicit closure #23 in UIKitToolbarStrategy.updateLocations();
  *(_QWORD *)(v25 + 24) = v24;
  *(_QWORD *)(v1 + 648) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(_QWORD *)(v1 + 656) = v25;
  result = outlined init with take of Toolbar.BarLocation((uint64_t)v93, v1 + 664);
  v27 = 0;
  v35 = (uint64_t (*)())MEMORY[0x1E0DEE9E8];
  while (1)
  {
    v28 = 0uLL;
    if (v27 == 12)
    {
      v89 = 0;
      memset(v88, 0, sizeof(v88));
      v87 = 0uLL;
      goto LABEL_9;
    }
    if ((v27 & 0x8000000000000000) != 0)
      break;
    if (v27 >= *(_QWORD *)(v1 + 16))
      goto LABEL_16;
    _sxRi_zRi0_zlySbIsegr__7SwiftUI7ToolbarO11BarLocationOtWOc(v1 + 32 + 56 * v27++, (uint64_t)&v87);
    v29 = v87;
    if ((_QWORD)v87)
    {
      v30 = *((_QWORD *)&v87 + 1);
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v29;
      *(_QWORD *)(v31 + 24) = v30;
      outlined init with take of Toolbar.BarLocation((uint64_t)v88, (uint64_t)v79);
      *(_QWORD *)&v82 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out Bool);
      *((_QWORD *)&v82 + 1) = v31;
      outlined init with take of Toolbar.BarLocation((uint64_t)v79, (uint64_t)v83);
      goto LABEL_10;
    }
    v28 = 0uLL;
LABEL_9:
    v84 = 0;
    v83[1] = v28;
    v83[0] = v28;
    v82 = v28;
LABEL_10:
    outlined init with take of (@escaping @callee_guaranteed () -> (@unowned Bool), Toolbar.BarLocation)?((uint64_t)&v82, (uint64_t)v92);
    v32 = (uint64_t (*)(uint64_t))v92[0];
    if (!v92[0])
    {
      swift_setDeallocating();
      type metadata accessor for ((), Toolbar.BarLocation)(0, &lazy cache variable for type metadata for ((), Toolbar.BarLocation), (void (*)(uint64_t))type metadata accessor for ());
      swift_arrayDestroy();
      swift_deallocClassInstance();
      return (uint64_t)v35;
    }
    v33 = outlined init with take of Toolbar.BarLocation((uint64_t)v93, (uint64_t)&v87);
    if ((v32(v33) & 1) != 0)
    {
      outlined init with copy of Toolbar.BarLocation((uint64_t)&v87, (uint64_t)v78);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v73 = v35;
      specialized _NativeSet.update(with:isUnique:)((uint64_t)v78, isUniquelyReferenced_nonNull_native, (uint64_t)&v82);
      v35 = v73;
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityTableContext?((uint64_t)&v82, &lazy cache variable for type metadata for Toolbar.BarLocation?, (uint64_t)&type metadata for Toolbar.BarLocation);
      result = outlined destroy of Toolbar.BarLocation((uint64_t)&v87);
    }
    else
    {
      outlined destroy of Toolbar.BarLocation((uint64_t)&v87);
      result = swift_release();
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t outlined init with take of Toolbar.BarLocation(uint64_t a1, uint64_t a2)
{
  __swift_memcpy40_8(a2, a1);
  return a2;
}

uint64_t outlined init with take of (@escaping @callee_guaranteed () -> (@unowned Bool), Toolbar.BarLocation)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ContiguousArrayStorage<((), Toolbar.BarLocation)>(0, &lazy cache variable for type metadata for ((), Toolbar.BarLocation)?, &lazy cache variable for type metadata for ((), Toolbar.BarLocation), (void (*)(uint64_t))type metadata accessor for (), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<((), Toolbar.BarLocation)>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ((), Toolbar.BarLocation)(255, a3, a4);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ((), Toolbar.BarLocation)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out Bool)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AnyHashable) -> (@unowned Bool)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t outlined init with copy of UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UIKitToolbarStrategy(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 96);
  v8 = v4;
  if (v7)
  {
    if (*(_BYTE *)(a2 + 16) == 2)
    {
      *v5 = *v6;
      *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)v6 + 9);
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    }
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = v6[3];
    v5[2] = v6[2];
    v5[3] = v9;
    v10 = v6[5];
    v5[4] = v6[4];
    v5[5] = v10;
    v11 = v6[1];
    *v5 = *v6;
    v5[1] = v11;
  }
  return a1;
}

uint64_t outlined init with take of UIKitToolbarStrategy(uint64_t *a1, uint64_t a2)
{
  initializeWithTake for UIKitToolbarStrategy(a2, a1);
  return a2;
}

uint64_t initializeWithTake for UIKitToolbarStrategy(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v5 = *a2;
  v4 = a2 + 1;
  *(_QWORD *)a1 = v5;
  v6 = (_OWORD *)(a1 + 8);
  if (a2[12])
  {
    if (*((_BYTE *)a2 + 16) == 2)
    {
      *v6 = *v4;
      *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v4 + 9);
    }
    else
    {
      swift_unknownObjectWeakTakeInit();
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    }
    swift_unknownObjectWeakTakeInit();
    swift_unknownObjectWeakTakeInit();
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    swift_unknownObjectWeakTakeInit();
    swift_unknownObjectWeakTakeInit();
    swift_unknownObjectWeakTakeInit();
    *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
    *(_QWORD *)(a1 + 96) = a2[12];
  }
  else
  {
    v7 = v4[3];
    v6[2] = v4[2];
    v6[3] = v7;
    v8 = v4[5];
    v6[4] = v4[4];
    v6[5] = v8;
    v9 = v4[1];
    *v6 = *v4;
    v6[1] = v9;
  }
  return a1;
}

uint64_t ToolbarBridge.makeStorage(in:from:strategy:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t *v40;
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char v59;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  id v79;
  unint64_t v80;
  char v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t *v101;
  _BOOL4 v102;
  int v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  void (*v117)(id, uint64_t, uint64_t, uint64_t);
  unint64_t v118;
  char v119;
  char v120;
  unint64_t v121;
  uint64_t v122;
  _BOOL8 v123;
  uint64_t v124;
  char v125;
  unint64_t v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  int v135;
  char v136;
  unint64_t v137;
  uint64_t v138;
  _BOOL8 v139;
  uint64_t v140;
  char v141;
  unint64_t v142;
  char v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t result;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  id v154;
  id v155;
  int v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _OWORD v183[2];
  uint64_t v184;
  char v185[8];
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  char v190;
  unint64_t v191;
  _QWORD v192[3];
  __int128 v193;
  uint64_t v194;

  v169 = a3;
  v175 = a2;
  v5 = *v3;
  v6 = *MEMORY[0x1E0DEEDD8];
  v174 = type metadata accessor for ToolbarStorage.Entry(0);
  v173 = *(_QWORD *)(v174 - 8);
  MEMORY[0x1E0C80A78](v174, v7);
  v162 = (uint64_t)&v150 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v164 = (uint64_t)&v150 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v181 = (uint64_t)&v150 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v150 - v17;
  v176 = a1;
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v186);
  v19 = (char *)v3 + direct field offset for ToolbarBridge.storageByLocation;
  swift_beginAccess();
  v20 = *(_QWORD *)v19;
  if (*(_QWORD *)(*(_QWORD *)v19 + 16)
    && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v186), (v22 & 1) != 0))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 24 * v21);
    v25 = *v23;
    v24 = v23[1];
    v26 = v23[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = MEMORY[0x1E0DEE9D8];
    v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v26 = specialized Dictionary.init(dictionaryLiteral:)(v25);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)&v186);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = specialized Sequence.compactMap<A>(_:)(v25, v24);
  swift_bridgeObjectRelease();
  v153 = v26;
  swift_bridgeObjectRelease();
  v152 = v24;
  swift_bridgeObjectRelease();
  v186 = v175;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v29 = v28;
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v28);
  v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))specialized implicit closure #2 in ToolbarBridge.makeStorage(in:from:strategy:), 0, v29, (char *)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E0DEDCE8], v30, MEMORY[0x1E0DEDD18], v31);
  v33 = MEMORY[0x1E0DEE9D8];
  v186 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v27, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = v186;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v189 = xmmword_187C304D0;
  v35 = specialized static Toolbar.BarLocation.== infix(_:_:)(v176, (uint64_t)&v186);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v186);
  v36 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  v179 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  v194 = v33;
  v37 = v34[2];
  if (v37)
  {
    v182 = (_QWORD *)v36;
    v170 = v6 & v5;
    if ((v35 & 1) != 0)
      v38 = 0;
    else
      v38 = 2;
    v159 = v34 + 4;
    v163 = v37 - 1;
    v167 = &v190;
    swift_bridgeObjectRetain();
    v39 = 0;
    v151 = v25 + 40;
    v172 = xmmword_187C39070;
    v168 = v18;
    v160 = v25;
    v158 = v34;
    v157 = v37;
    while (v39 < v34[2])
    {
      v40 = &v159[5 * v39];
      v41 = *((unsigned __int8 *)v40 + 32);
      v171 = v39;
      if (v41)
      {
        v43 = *v40;
        v42 = (char *)v40[1];
        v178 = *v40;
        v177 = v42;
        if (v41 == 1)
        {
          if ((char *)v43 != v42)
          {
            if ((uint64_t)v42 < v43)
              goto LABEL_158;
            if (v43 >= (uint64_t)v42)
              goto LABEL_160;
            v166 = *(char **)(v170 + 88);
            v165 = (char *)*((_QWORD *)v166 + 9);
            v44 = -v43;
            v45 = 16 * v43 + 32;
            v161 = v42 - 1;
            while (v43 < (uint64_t)v42)
            {
              memset(v192, 0, sizeof(v192));
              v193 = v172;
              outlined init with copy of Toolbar.BarLocation(v176, (uint64_t)&v186);
              outlined init with copy of Toolbar.BarLocation((uint64_t)v192, (uint64_t)v167);
              switch((uint64_t)v189)
              {
                case 0:
                  if (v191)
                    goto LABEL_54;
                  goto LABEL_57;
                case 1:
                  if (v191 == 1)
                    goto LABEL_57;
                  goto LABEL_54;
                case 2:
                  if (v191 == 2)
                    goto LABEL_57;
                  goto LABEL_54;
                case 3:
                  if (v191 == 3)
                    goto LABEL_57;
                  goto LABEL_54;
                case 4:
                  if (v191 == 4)
                    goto LABEL_57;
                  goto LABEL_54;
                case 5:
                  if (v191 == 5)
                    goto LABEL_57;
                  goto LABEL_54;
                case 6:
                  if (v191 == 6)
                    goto LABEL_57;
                  goto LABEL_54;
                case 7:
                  if (v191 == 7)
                    goto LABEL_57;
                  goto LABEL_54;
                case 8:
                  if (v191 == 8)
                    goto LABEL_57;
                  goto LABEL_54;
                case 9:
                  if (v191 == 9)
                    goto LABEL_57;
                  goto LABEL_54;
                case 10:
                  if (v191 == 10)
                    goto LABEL_57;
                  goto LABEL_54;
                case 11:
                  if (v191 == 11)
                    goto LABEL_57;
                  goto LABEL_54;
                case 12:
                  if (v191 == 12)
                    goto LABEL_57;
                  goto LABEL_54;
                case 13:
                  if (v191 != 13)
                    goto LABEL_54;
                  goto LABEL_57;
                case 14:
                  if (v191 == 14)
                    goto LABEL_57;
                  goto LABEL_54;
                default:
                  outlined init with copy of Toolbar.BarLocation((uint64_t)&v186, (uint64_t)v185);
                  if (v191 < 0xF)
                  {
                    outlined destroy of AnyHashable((uint64_t)v185);
LABEL_54:
                    outlined destroy of UIBackgroundConfiguration?((uint64_t)&v186, (uint64_t)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation), (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(_QWORD))type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation));
                    goto LABEL_55;
                  }
                  v46 = *((_OWORD *)v167 + 1);
                  v183[0] = *(_OWORD *)v167;
                  v183[1] = v46;
                  v184 = *((_QWORD *)v167 + 4);
                  v47 = MEMORY[0x18D75E284](v185, v183);
                  outlined destroy of AnyHashable((uint64_t)v183);
                  outlined destroy of AnyHashable((uint64_t)v185);
                  if ((v47 & 1) == 0)
                  {
                    outlined destroy of Toolbar.BarLocation((uint64_t)&v186);
LABEL_55:
                    outlined destroy of Toolbar.BarLocation((uint64_t)v192);
                    goto LABEL_62;
                  }
LABEL_57:
                  outlined destroy of Toolbar.BarLocation((uint64_t)&v186);
                  outlined destroy of Toolbar.BarLocation((uint64_t)v192);
                  if (v161 == (char *)v43)
                    v48 = 1;
                  else
                    v48 = v38;
                  if (v171 == v163)
                    v38 = v48;
LABEL_62:
                  v49 = v174;
                  Array.subscript.getter();
                  v18[*(int *)(v49 + 20)] = v38;
                  v50 = ((uint64_t (*)(char *, _QWORD, char *))v165)(v18, *(_QWORD *)(v170 + 80), v166);
                  v54 = (char *)v194;
                  v55 = *(_QWORD *)(v194 + 16);
                  if ((uint64_t)v55 < v43)
                    goto LABEL_140;
                  if (v178 < 0)
                    goto LABEL_141;
                  v56 = v50;
                  v57 = v51;
                  v58 = v52;
                  v59 = v53;
                  swift_bridgeObjectRetain();
                  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
                  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v55 >= *((_QWORD *)v54 + 3) >> 1)
                    v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v55 + 1, 1, v54);
                  v180 = v45;
                  v61 = (uint64_t *)&v54[v45];
                  swift_arrayDestroy();
                  v62 = v44 + *((_QWORD *)v54 + 2);
                  if (v62 < 0)
                    goto LABEL_163;
                  v63 = v44;
                  memmove(v61 + 2, v61, 16 * v62);
                  ++*((_QWORD *)v54 + 2);
                  *v61 = v56;
                  v61[1] = v57;
                  v194 = (uint64_t)v54;
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v181, type metadata accessor for ToolbarStorage.Entry);
                  swift_bridgeObjectRetain();
                  v64 = v182;
                  v65 = swift_isUniquelyReferenced_nonNull_native();
                  v186 = v64;
                  v67 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v57);
                  v68 = v64[2];
                  v69 = (v66 & 1) == 0;
                  v70 = v68 + v69;
                  if (__OFADD__(v68, v69))
                    goto LABEL_142;
                  v71 = v66;
                  if (v64[3] >= v70)
                  {
                    if ((v65 & 1) != 0)
                    {
                      v74 = v186;
                      if ((v66 & 1) != 0)
                        goto LABEL_75;
                    }
                    else
                    {
                      specialized _NativeDictionary.copy()();
                      v74 = v186;
                      if ((v71 & 1) != 0)
                        goto LABEL_75;
                    }
                  }
                  else
                  {
                    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v70, v65);
                    v72 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v57);
                    if ((v71 & 1) != (v73 & 1))
                      goto LABEL_164;
                    v67 = v72;
                    v74 = v186;
                    if ((v71 & 1) != 0)
                    {
LABEL_75:
                      outlined assign with take of ToolbarStorage.Entry(v181, v74[7] + *(_QWORD *)(v173 + 72) * v67);
                      goto LABEL_80;
                    }
                  }
                  v74[(v67 >> 6) + 8] |= 1 << v67;
                  v75 = (uint64_t *)(v74[6] + 16 * v67);
                  *v75 = v56;
                  v75[1] = v57;
                  outlined init with take of TableCellFormula(v181, v74[7] + *(_QWORD *)(v173 + 72) * v67, type metadata accessor for ToolbarStorage.Entry);
                  v76 = v74[2];
                  v77 = __OFADD__(v76, 1);
                  v78 = v76 + 1;
                  if (v77)
                    goto LABEL_144;
                  v74[2] = v78;
                  swift_bridgeObjectRetain();
LABEL_80:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v182 = v74;
                  if (v59 == -1)
                  {
                    v18 = v168;
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v168, type metadata accessor for ToolbarStorage.Entry);
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v79 = v58;
                    v80 = v179;
                    v81 = swift_isUniquelyReferenced_nonNull_native();
                    v186 = (_QWORD *)v80;
                    v83 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v57);
                    v84 = *(_QWORD *)(v80 + 16);
                    v85 = (v82 & 1) == 0;
                    v86 = v84 + v85;
                    if (__OFADD__(v84, v85))
                      goto LABEL_143;
                    v87 = v82;
                    if (*(_QWORD *)(v80 + 24) >= v86)
                    {
                      if ((v81 & 1) == 0)
                        specialized _NativeDictionary.copy()();
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v86, v81);
                      v88 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v57);
                      if ((v87 & 1) != (v89 & 1))
                        goto LABEL_164;
                      v83 = v88;
                    }
                    v90 = v186;
                    v179 = (unint64_t)v186;
                    if ((v87 & 1) != 0)
                    {
                      v91 = v186[7] + 16 * v83;

                      *(_QWORD *)v91 = v58;
                      *(_BYTE *)(v91 + 8) = v59;
                    }
                    else
                    {
                      v186[(v83 >> 6) + 8] |= 1 << v83;
                      v92 = (uint64_t *)(v90[6] + 16 * v83);
                      *v92 = v56;
                      v92[1] = v57;
                      v93 = v90[7] + 16 * v83;
                      *(_QWORD *)v93 = v58;
                      *(_BYTE *)(v93 + 8) = v59;
                      v94 = v90[2];
                      v77 = __OFADD__(v94, 1);
                      v95 = v94 + 1;
                      if (v77)
                        goto LABEL_145;
                      v90[2] = v95;
                      swift_bridgeObjectRetain();
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined consume of Toolbar.VendedItem?(v58, v59);
                    outlined consume of Toolbar.VendedItem?(v58, v59);
                    v18 = v168;
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v168, type metadata accessor for ToolbarStorage.Entry);
                  }
                  v42 = v177;
                  ++v43;
                  v44 = v63 - 1;
                  v45 = v180 + 16;
                  v38 = 2;
                  if (v177 == (char *)v43)
                    goto LABEL_11;
                  break;
              }
            }
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
            goto LABEL_146;
          }
        }
        else
        {
          v97 = v40[2];
          v96 = v40[3];
          v180 = v97;
          LOBYTE(v192[0]) = 0;
          if ((char *)v43 != v42)
          {
            v98 = v153;
            if ((uint64_t)v42 < v43)
              goto LABEL_159;
            if (v43 >= (uint64_t)v42)
              goto LABEL_161;
            v99 = (char *)(v96 - v180);
            if (v96 != v180)
            {
              if (v96 <= v180)
                goto LABEL_162;
              v100 = 0;
              v165 = v42 - 1;
              v166 = v99 - 1;
              v101 = (uint64_t *)(v151 + 16 * v43);
              v161 = (char *)(v96 - v180);
              while (v99 != v100)
              {
                v102 = v39 == v163;
                v186 = 0;
                v187 = 0;
                v188 = 0;
                v189 = v172;
                v103 = specialized static Toolbar.BarLocation.== infix(_:_:)(v176, (uint64_t)&v186);
                outlined destroy of Toolbar.BarLocation((uint64_t)&v186);
                if ((v103 & v102 & (v166 == v100)) != 0)
                  v38 = 1;
                if (v43 < 0)
                  goto LABEL_147;
                v104 = &v100[v43];
                if ((unint64_t)&v100[v43] >= *(_QWORD *)(v160 + 16))
                  goto LABEL_148;
                v105 = (uint64_t)&v100[v180];
                v106 = *(v101 - 1);
                v107 = *v101;
                swift_bridgeObjectRetain();
                v108 = v164;
                v109 = v174;
                Array.subscript.getter();
                *(_BYTE *)(v108 + *(int *)(v109 + 20)) = v38;
                if (*(_QWORD *)(v98 + 16))
                {
                  swift_bridgeObjectRetain();
                  v110 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
                  if ((v111 & 1) != 0)
                  {
                    v112 = *(_QWORD *)(v98 + 56) + 16 * v110;
                    v113 = *(id *)v112;
                    v114 = *(unsigned __int8 *)(v112 + 8);
                    v115 = *(id *)v112;
                    swift_bridgeObjectRelease();
                    v116 = *(_QWORD *)(v170 + 80);
                    v117 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v170 + 88) + 80);
                    v155 = v113;
                    v156 = v114;
                    v117(v113, v114, v164, v116);
                    swift_bridgeObjectRetain();
                    v154 = v115;
                    v118 = v179;
                    v119 = swift_isUniquelyReferenced_nonNull_native();
                    v186 = (_QWORD *)v118;
                    v121 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
                    v122 = *(_QWORD *)(v118 + 16);
                    v123 = (v120 & 1) == 0;
                    v124 = v122 + v123;
                    if (__OFADD__(v122, v123))
                      goto LABEL_156;
                    v125 = v120;
                    if (*(_QWORD *)(v118 + 24) >= v124)
                    {
                      if ((v119 & 1) == 0)
                        specialized _NativeDictionary.copy()();
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v124, v119);
                      v126 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
                      if ((v125 & 1) != (v127 & 1))
                        goto LABEL_164;
                      v121 = v126;
                    }
                    v98 = v153;
                    v128 = v186;
                    v179 = (unint64_t)v186;
                    if ((v125 & 1) != 0)
                    {
                      v129 = v186[7] + 16 * v121;

                      *(_QWORD *)v129 = v155;
                      *(_BYTE *)(v129 + 8) = v156;
                    }
                    else
                    {
                      v186[(v121 >> 6) + 8] |= 1 << v121;
                      v130 = (uint64_t *)(v128[6] + 16 * v121);
                      *v130 = v106;
                      v130[1] = v107;
                      v131 = v128[7] + 16 * v121;
                      *(_QWORD *)v131 = v155;
                      *(_BYTE *)(v131 + 8) = v156;
                      v132 = v128[2];
                      v77 = __OFADD__(v132, 1);
                      v133 = v132 + 1;
                      if (v77)
                        goto LABEL_157;
                      v128[2] = v133;
                      swift_bridgeObjectRetain();
                    }

                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                }
                if (*(_QWORD *)(v194 + 16) < v105)
                  goto LABEL_149;
                if (v180 < 0)
                  goto LABEL_150;
                swift_bridgeObjectRetain();
                specialized Array.replaceSubrange<A>(_:with:)(v105, v105, v106, v107);
                outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v164, v162, type metadata accessor for ToolbarStorage.Entry);
                v134 = v182;
                v135 = swift_isUniquelyReferenced_nonNull_native();
                v186 = v134;
                v137 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
                v138 = v134[2];
                v139 = (v136 & 1) == 0;
                v140 = v138 + v139;
                if (__OFADD__(v138, v139))
                  goto LABEL_151;
                v141 = v136;
                if (v134[3] >= v140)
                {
                  if ((v135 & 1) == 0)
                    specialized _NativeDictionary.copy()();
                }
                else
                {
                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v140, v135);
                  v142 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
                  if ((v141 & 1) != (v143 & 1))
                    goto LABEL_164;
                  v137 = v142;
                }
                v144 = v186;
                v182 = v186;
                if ((v141 & 1) != 0)
                {
                  outlined assign with take of ToolbarStorage.Entry(v162, v186[7] + *(_QWORD *)(v173 + 72) * v137);
                }
                else
                {
                  v186[(v137 >> 6) + 8] |= 1 << v137;
                  v145 = (uint64_t *)(v144[6] + 16 * v137);
                  *v145 = v106;
                  v145[1] = v107;
                  outlined init with take of TableCellFormula(v162, v144[7] + *(_QWORD *)(v173 + 72) * v137, type metadata accessor for ToolbarStorage.Entry);
                  v146 = v144[2];
                  v77 = __OFADD__(v146, 1);
                  v147 = v146 + 1;
                  if (v77)
                    goto LABEL_155;
                  v144[2] = v147;
                  swift_bridgeObjectRetain();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v164, type metadata accessor for ToolbarStorage.Entry);
                v38 = 2;
                v39 = v171;
                v43 = v178;
                if ((v192[0] & 1) != 0 || v104 + 1 == v177)
                  goto LABEL_10;
                if ((uint64_t)(v104 + 1) < v178)
                  goto LABEL_152;
                if (v104 == v165)
                  goto LABEL_153;
                ++v100;
                v101 += 2;
                v99 = v161;
                if (v161 == v100)
                  goto LABEL_10;
              }
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
              break;
            }
          }
LABEL_10:
          v18 = v168;
        }
      }
LABEL_11:
      v39 = v171 + 1;
      v34 = v158;
      if (v171 + 1 == v157)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v148 = v194;
        goto LABEL_138;
      }
    }
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_164:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v148 = MEMORY[0x1E0DEE9D8];
LABEL_138:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v148;
  }
  return result;
}

void type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
  }
}

uint64_t outlined destroy of Toolbar.BarLocation(uint64_t a1)
{
  destroy for _PresentationTransitionOutputs.Content(a1);
  return a1;
}

void Toolbar.BarLocation.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  _OWORD v2[2];
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  outlined init with copy of Toolbar.BarLocation(v0, (uint64_t)&v4);
  switch(*((_QWORD *)&v5 + 1))
  {
    case 0:
      v1 = 0;
      goto LABEL_18;
    case 1:
      v1 = 1;
      goto LABEL_18;
    case 2:
      v1 = 2;
      goto LABEL_18;
    case 3:
      v1 = 3;
      goto LABEL_18;
    case 4:
      v1 = 4;
      goto LABEL_18;
    case 5:
      v1 = 5;
      goto LABEL_18;
    case 6:
      v1 = 6;
      goto LABEL_18;
    case 7:
      v1 = 7;
      goto LABEL_18;
    case 8:
      v1 = 8;
      goto LABEL_18;
    case 9:
      v1 = 9;
      goto LABEL_18;
    case 0xALL:
      v1 = 10;
      goto LABEL_18;
    case 0xBLL:
      v1 = 11;
      goto LABEL_18;
    case 0xCLL:
      v1 = 12;
      goto LABEL_18;
    case 0xDLL:
      v1 = 13;
      goto LABEL_18;
    case 0xELL:
      v1 = 15;
LABEL_18:
      Hasher._combine(_:)(v1);
      break;
    default:
      v2[0] = v4;
      v2[1] = v5;
      v3 = v6;
      Hasher._combine(_:)(0xEuLL);
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v2);
      break;
  }
}

uint64_t outlined init with copy of Toolbar.BarLocation(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _PresentationTransitionOutputs.Content(a2, a1);
  return a2;
}

char *convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  unint64_t v9;
  char v10;
  char *v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;

  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a1 + 2) + 1, 1, a1);
  v3 = *((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 3);
  v4 = v3 + 1;
  if (v3 >= v2 >> 1)
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, a1);
  v5 = 0;
  v6 = 0;
  *((_QWORD *)a1 + 2) = v4;
  *(_QWORD *)&a1[8 * v3 + 32] = 0x7FFFFFFFFFFFFFFFLL;
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  v8 = 1;
  v9 = 0x8000000000000000;
  do
  {
    v13 = v9;
    v9 = *(_QWORD *)&a1[8 * v6 + 32];
    if (v13 < (uint64_t)(v9 - 1))
      v12 = *(_QWORD *)&a1[8 * v6 + 32];
    else
      v12 = v5;
    v10 = (v13 >= (uint64_t)(v9 - 1)) & v8;
    if (v13 < (uint64_t)(v9 - 1) && (v8 & 1) == 0)
    {
      v14 = v13 + 1;
      if (v13 + 1 < v5)
      {
        __break(1u);
        goto LABEL_19;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v16 = *((_QWORD *)v7 + 2);
      v15 = *((_QWORD *)v7 + 3);
      if (v16 >= v15 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v7);
      v10 = 0;
      *((_QWORD *)v7 + 2) = v16 + 1;
      v11 = &v7[16 * v16];
      *((_QWORD *)v11 + 4) = v5;
      *((_QWORD *)v11 + 5) = v14;
      v12 = v9;
    }
    ++v6;
    v5 = v12;
    v8 = v10;
  }
  while (v4 != v6);
  swift_bridgeObjectRelease();
  return v7;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E0DEB418]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Toolbar.BarLocation>, (uint64_t)&type metadata for Toolbar.BarLocation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UITraitBridgedEnvironmentKey.Type>, &lazy cache variable for type metadata for UITraitBridgedEnvironmentKey.Type, &lazy cache variable for type metadata for UITraitBridgedEnvironmentKey);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_TableColumnOutputs>, (uint64_t)&type metadata for _TableColumnOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRotorInfo>, (uint64_t)&type metadata for AccessibilityRotorInfo);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomContentEntry>, MEMORY[0x1E0CE6600]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_TableRowOutputs>, (uint64_t)&type metadata for _TableRowOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<VersionSeedSetTracker.Value>, (uint64_t)&type metadata for VersionSeedSetTracker.Value);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarItemPlacement.Role>, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment.Tree>, (uint64_t)&type metadata for AccessibilityAttachment.Tree);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UINavigationItemAdaptorStorage.Adaptor>, (uint64_t)&type metadata for UINavigationItemAdaptorStorage.Adaptor);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UISceneConnectionOptionDefinition.Type>, (unint64_t *)&lazy cache variable for type metadata for UISceneConnectionOptionDefinition.Type, (unint64_t *)&lazy cache variable for type metadata for UISceneConnectionOptionDefinition);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_CommandsOutputs>, (uint64_t)&type metadata for _CommandsOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SceneOutputs>, (uint64_t)&type metadata for _SceneOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>, MEMORY[0x1E0DEA520]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachmentStorage>, (uint64_t)&type metadata for AccessibilityAttachmentStorage);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Path>, MEMORY[0x1E0CE6B18]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationDestinationOutputs>, (uint64_t)&type metadata for NavigationDestinationOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(seed: Int, removeIndex: Int)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<CollectionChanges<Int, Int>.Element>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabCustomizationID>, (uint64_t)&type metadata for TabCustomizationID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<Namespace.ID>, MEMORY[0x1E0CE7DD0], (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(Int, Int)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuBuilderInstruction>, (uint64_t)&type metadata for MenuBuilderInstruction);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect.Identified>, MEMORY[0x1E0CE2420]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AdaptableTabBarPlacement>, (uint64_t)&type metadata for AdaptableTabBarPlacement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_WidgetOutputs>, (uint64_t)&type metadata for _WidgetOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityListRotorEntry>, (uint64_t)&type metadata for AccessibilityListRotorEntry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<AXSwiftUITraits>, (uint64_t)type metadata accessor for AXSwiftUITraits, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect>, MEMORY[0x1E0CE25A0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<ListUpdate<Int, Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>, (unint64_t *)&lazy cache variable for type metadata for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ListUpdate);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<CollectionChanges<CountingIndex<Int>, CountingIndex<Int>>.Element>, &lazy cache variable for type metadata for CollectionChanges<CountingIndex<Int>, CountingIndex<Int>>.Element, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for CollectionChanges.Element);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridMetadata>, (uint64_t)&type metadata for GridMetadata);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRole>, (uint64_t)&type metadata for AccessibilityRole);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewTransform.Item>, MEMORY[0x1E0CE2208]);
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(uint64_t a1, Swift::Int a2, uint64_t a3, Swift::Int a4, uint64_t a5, uint64_t a6)
{
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  Swift::Int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t (*v54)(void);
  char v55;
  _QWORD *v56;
  unint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  Swift::Int v68;
  Swift::Int v69;
  unint64_t v70;
  unint64_t v71;
  int64_t v72;
  Swift::Int v73;
  Swift::Int v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  Swift::Int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  Swift::Int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[48];
  _BYTE v97[48];
  _QWORD v98[5];
  unsigned __int8 v99;
  uint64_t v100;
  unsigned __int8 v101;
  _BYTE v102[40];
  uint64_t v103;
  _QWORD v104[5];
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;

  v94 = a3;
  v95 = a6;
  v92 = a5;
  v93 = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionDifference<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DECDE0]);
  v90 = *(_QWORD *)(v8 - 8);
  v91 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v89 = (char *)&v85 - v10;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v107 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  type metadata accessor for [TableRowID : Int](0, &lazy cache variable for type metadata for [ToolbarStorage.Entry.ID : Int], (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  v13 = v12;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    v106 = v11;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0)
        goto LABEL_121;
      v29 = 0;
      v30 = v106;
      v31 = v93;
      while (1)
      {
        if (a2 == v29)
          goto LABEL_116;
        outlined init with copy of ToolbarStorage.Entry.ID(v31, (uint64_t)v98);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v104[0] = v30;
        v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v98);
        v35 = v30[2];
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_117;
        v38 = v33;
        if (v30[3] >= v37)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v30 = (_QWORD *)v104[0];
            if ((v33 & 1) == 0)
              goto LABEL_32;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v30 = (_QWORD *)v104[0];
            if ((v38 & 1) == 0)
              goto LABEL_32;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
          v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v98);
          if ((v38 & 1) != (v40 & 1))
            goto LABEL_122;
          v34 = v39;
          v30 = (_QWORD *)v104[0];
          if ((v38 & 1) == 0)
          {
LABEL_32:
            v30[(v34 >> 6) + 8] |= 1 << v34;
            outlined init with copy of ToolbarStorage.Entry.ID((uint64_t)v98, v30[6] + 88 * v34);
            *(_QWORD *)(v30[7] + 8 * v34) = v29;
            v41 = v30[2];
            v27 = __OFADD__(v41, 1);
            v42 = v41 + 1;
            if (v27)
              goto LABEL_119;
            v30[2] = v42;
            goto LABEL_23;
          }
        }
        *(_QWORD *)(v30[7] + 8 * v34) = v29;
LABEL_23:
        ++v29;
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v98);
        v31 += 88;
        if (a2 == v29)
        {
          v106 = v30;
          break;
        }
      }
    }
    if (v107[2] == a4 && v106[2] == a2)
    {
      LODWORD(v92) = a2 != 0;
      if (a4 | a2)
      {
        v43 = 0;
        v44 = 0;
        v86 = &v103;
        v87 = &v105;
        v88 = &v100;
        v45 = MEMORY[0x1E0DEE9D8];
        v46 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_41:
        v89 = v46;
LABEL_42:
        v90 = v93 + 88 * v44;
        v91 = v44;
        v47 = v94 + 88 * v43;
        while (1)
        {
          v48 = *(_QWORD *)(v45 + 16);
          v49 = *((_QWORD *)v46 + 2);
          if (v49 + v48 > v95)
            goto LABEL_110;
          if (v44 == a2)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48 + 1, 1, (char *)v45);
            v51 = *(_QWORD *)(v45 + 16);
            v50 = *(_QWORD *)(v45 + 24);
            v52 = v51 + 1;
            v44 = v91;
            if (v51 >= v50 >> 1)
            {
              v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, (char *)v45);
              v44 = v91;
              v45 = (uint64_t)v53;
            }
            goto LABEL_44;
          }
          if (a4 == v43)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 + 1, 1, v46);
            v67 = *((_QWORD *)v46 + 2);
            v66 = *((_QWORD *)v46 + 3);
            v68 = v91;
            if (v67 >= v66 >> 1)
            {
              v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v46);
              v68 = v91;
              v46 = v78;
            }
            *((_QWORD *)v46 + 2) = v67 + 1;
            *(_QWORD *)&v46[8 * v67 + 32] = v68;
            v44 = v68 + 1;
            v43 = a4;
            goto LABEL_87;
          }
          outlined init with copy of ToolbarStorage.Entry.ID(v47, (uint64_t)v104);
          outlined init with copy of ToolbarStorage.Entry.ID(v90, (uint64_t)v102);
          if ((MEMORY[0x18D75E284](v104, v102) & 1) != 0)
          {
            v54 = MEMORY[0x1E0DEB940];
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)v87, (uint64_t)v98, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)v86, (uint64_t)v88, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v54);
            if (v99 == 255)
            {
              if (v101 == 255)
              {
                outlined destroy of AccessibilityScrollableContext?((uint64_t)v98, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                v46 = v89;
LABEL_74:
                outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v102);
                outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v104);
                ++v43;
                v44 = v91 + 1;
                LODWORD(v92) = v91 + 1 < a2;
                if (v43 < a4 || v44 < a2)
                  goto LABEL_42;
                goto LABEL_110;
              }
            }
            else
            {
              outlined init with copy of AccessibilityScrollableContext?((uint64_t)v98, (uint64_t)v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v54);
              if (v101 != 255)
              {
                outlined init with take of ToolbarItemPlacement.Role((uint64_t)v88, (uint64_t)v96);
                v55 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v97, (uint64_t)v96);
                outlined destroy of ToolbarItemPlacement.Role((uint64_t)v96);
                outlined destroy of ToolbarItemPlacement.Role((uint64_t)v97);
                outlined destroy of AccessibilityScrollableContext?((uint64_t)v98, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v54);
                v46 = v89;
                if ((v55 & 1) != 0)
                  goto LABEL_74;
                goto LABEL_61;
              }
              outlined destroy of ToolbarItemPlacement.Role((uint64_t)v97);
            }
            outlined destroy of TableRowList?((uint64_t)v98, (uint64_t)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?), (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?));
          }
LABEL_61:
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v102);
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v104);
          outlined init with copy of ToolbarStorage.Entry.ID(v47, (uint64_t)v98);
          v56 = v106;
          if (v106[2] && (v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v98), (v58 & 1) != 0))
          {
            v59 = 0;
            v60 = *(_QWORD *)(v56[7] + 8 * v57);
          }
          else
          {
            v60 = 0;
            v59 = 1;
          }
          outlined init with copy of ToolbarStorage.Entry.ID(v90, (uint64_t)v104);
          v61 = v107;
          if (v107[2] && (v62 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v104), (v63 & 1) != 0))
          {
            if (!v59)
            {
              v73 = *(_QWORD *)(v61[7] + 8 * v62);
              outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v104);
              outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v98);
              v74 = v60 - v91;
              if (v60 >= v91)
              {
                if (v73 < v43)
                {
                  v46 = v89;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
                  v71 = *((_QWORD *)v46 + 2);
                  v70 = *((_QWORD *)v46 + 3);
                  v72 = v71 + 1;
                  v69 = v91;
                  if (v71 < v70 >> 1)
                    goto LABEL_86;
                  goto LABEL_101;
                }
                v46 = v89;
                if (v73 - v43 >= v74)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
                  v69 = v91;
                  goto LABEL_85;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
              }
              else
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
                v46 = v89;
              }
              v76 = *(_QWORD *)(v45 + 16);
              v75 = *(_QWORD *)(v45 + 24);
              v44 = v91;
              if (v76 >= v75 >> 1)
              {
                v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, (char *)v45);
                v44 = v91;
                v45 = (uint64_t)v79;
              }
              *(_QWORD *)(v45 + 16) = v76 + 1;
              *(_QWORD *)(v45 + 8 * v76 + 32) = v43++;
LABEL_87:
              LODWORD(v92) = v44 < a2;
              if (v43 < a4 || v44 < a2)
                goto LABEL_41;
              goto LABEL_110;
            }
          }
          else if ((v59 & 1) == 0)
          {
            outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v104);
            outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v98);
            v46 = v89;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
            v69 = v91;
LABEL_85:
            v71 = *((_QWORD *)v46 + 2);
            v70 = *((_QWORD *)v46 + 3);
            v72 = v71 + 1;
            if (v71 < v70 >> 1)
            {
LABEL_86:
              *((_QWORD *)v46 + 2) = v72;
              *(_QWORD *)&v46[8 * v71 + 32] = v69;
              v44 = v69 + 1;
              goto LABEL_87;
            }
LABEL_101:
            v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v72, 1, v46);
            v69 = v91;
            v46 = v77;
            goto LABEL_86;
          }
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v104);
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v98);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
          v51 = *(_QWORD *)(v45 + 16);
          v64 = *(_QWORD *)(v45 + 24);
          v52 = v51 + 1;
          v44 = v91;
          if (v51 >= v64 >> 1)
          {
            v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v51 + 1, 1, (char *)v45);
            v44 = v91;
            v45 = (uint64_t)v65;
          }
          v46 = v89;
LABEL_44:
          *(_QWORD *)(v45 + 16) = v52;
          *(_QWORD *)(v45 + 8 * v51 + 32) = v43++;
          v47 += 88;
          if (!((v43 < a4) | v92 & 1))
            goto LABEL_110;
        }
      }
      v46 = (char *)MEMORY[0x1E0DEE9D8];
      v45 = MEMORY[0x1E0DEE9D8];
LABEL_110:
      if (*((_QWORD *)v46 + 2) + *(_QWORD *)(v45 + 16) <= v95)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = 0;
      }
    }
    else
    {
      v98[0] = v93;
      v98[1] = a2;
      v104[0] = v94;
      v104[1] = a4;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>();
      lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
      v80 = v89;
      BidirectionalCollection<>.difference<A>(from:)();
      v81 = v91;
      v82 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV5EntryV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f23OyAL_GXEfU_Si_SiSayAA14ij2V5K11V2IDVGAZTG5AJ0dP0VyS2iGTf1cn_nTf4nd_nTm(v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v83 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV5EntryV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f23OyAL_GXEfU_Si_SiSayAA14ij2V5K11V2IDVGAZTG5AJ0dP0VyS2iGTf1cn_nTf4nd_nTm(v83);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, Swift::Int))(v90 + 8))(v80, v81);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v45;
  }
  if (a4 < 0)
    goto LABEL_120;
  v88 = (uint64_t *)v13;
  v14 = 0;
  v15 = v107;
  v16 = v94;
  while (a4 != v14)
  {
    outlined init with copy of ToolbarStorage.Entry.ID(v16, (uint64_t)v98);
    v17 = swift_isUniquelyReferenced_nonNull_native();
    v104[0] = v15;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v98);
    v20 = v15[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_115;
    v23 = v18;
    if (v15[3] >= v22)
    {
      if ((v17 & 1) != 0)
      {
        v15 = (_QWORD *)v104[0];
        if ((v18 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v15 = (_QWORD *)v104[0];
        if ((v23 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, v17);
      v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v98);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_122;
      v19 = v24;
      v15 = (_QWORD *)v104[0];
      if ((v23 & 1) == 0)
      {
LABEL_14:
        v15[(v19 >> 6) + 8] |= 1 << v19;
        outlined init with copy of ToolbarStorage.Entry.ID((uint64_t)v98, v15[6] + 88 * v19);
        *(_QWORD *)(v15[7] + 8 * v19) = v14;
        v26 = v15[2];
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_118;
        v15[2] = v28;
        goto LABEL_5;
      }
    }
    *(_QWORD *)(v15[7] + 8 * v19) = v14;
LABEL_5:
    ++v14;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v98);
    v16 += 88;
    if (a4 == v14)
    {
      v107 = v15;
      v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  Swift::Int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char v55;
  _QWORD *v56;
  unint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  Swift::Int v68;
  Swift::Int v69;
  unint64_t v70;
  unint64_t v71;
  int64_t v72;
  Swift::Int v73;
  Swift::Int v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  Swift::Int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  _QWORD v85[2];
  char *v86;
  char *v87;
  Swift::Int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[5];
  _QWORD *v94;
  _QWORD v95[6];
  _QWORD *v96;

  v91 = a3;
  v92 = a6;
  v89 = a5;
  v90 = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionDifference<AnyHashable>, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DECDE0]);
  v88 = v8;
  v87 = *(char **)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v86 = (char *)v85 - v10;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v96 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  type metadata accessor for [Int : Int](0, &lazy cache variable for type metadata for [AnyHashable : Int]);
  v13 = v12;
  Dictionary.reserveCapacity(_:)(a4);
  if (a4)
  {
    if (a4 < 0)
      goto LABEL_112;
    v85[1] = v13;
    v14 = 0;
    v15 = v96;
    v16 = v91;
    while (1)
    {
      if (a4 == v14)
      {
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      outlined init with copy of AnyHashable(v16, (uint64_t)v95);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v93[0] = v15;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v95);
      v20 = v15[2];
      v21 = (v18 & 1) == 0;
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
        goto LABEL_107;
      v23 = v18;
      if (v15[3] >= v22)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v15 = (_QWORD *)v93[0];
          if ((v18 & 1) == 0)
            goto LABEL_14;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v15 = (_QWORD *)v93[0];
          if ((v23 & 1) == 0)
            goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
        v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v95);
        if ((v23 & 1) != (v25 & 1))
          goto LABEL_114;
        v19 = v24;
        v15 = (_QWORD *)v93[0];
        if ((v23 & 1) == 0)
        {
LABEL_14:
          v15[(v19 >> 6) + 8] |= 1 << v19;
          outlined init with copy of AnyHashable((uint64_t)v95, v15[6] + 40 * v19);
          *(_QWORD *)(v15[7] + 8 * v19) = v14;
          v26 = v15[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
            goto LABEL_110;
          v15[2] = v28;
          goto LABEL_5;
        }
      }
      *(_QWORD *)(v15[7] + 8 * v19) = v14;
LABEL_5:
      ++v14;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v95);
      v16 += 40;
      if (a4 == v14)
      {
        v96 = v15;
        v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        break;
      }
    }
  }
  v94 = v11;
  Dictionary.reserveCapacity(_:)(a2);
  if (a2)
  {
    if (a2 < 0)
      goto LABEL_113;
    v29 = 0;
    v30 = v94;
    v31 = v90;
    while (1)
    {
      if (a2 == v29)
        goto LABEL_108;
      outlined init with copy of AnyHashable(v31, (uint64_t)v95);
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v93[0] = v30;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v95);
      v35 = v30[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        goto LABEL_109;
      v38 = v33;
      if (v30[3] >= v37)
      {
        if ((v32 & 1) != 0)
        {
          v30 = (_QWORD *)v93[0];
          if ((v33 & 1) == 0)
            goto LABEL_32;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v30 = (_QWORD *)v93[0];
          if ((v38 & 1) == 0)
            goto LABEL_32;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v32);
        v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v95);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_114;
        v34 = v39;
        v30 = (_QWORD *)v93[0];
        if ((v38 & 1) == 0)
        {
LABEL_32:
          v30[(v34 >> 6) + 8] |= 1 << v34;
          outlined init with copy of AnyHashable((uint64_t)v95, v30[6] + 40 * v34);
          *(_QWORD *)(v30[7] + 8 * v34) = v29;
          v41 = v30[2];
          v27 = __OFADD__(v41, 1);
          v42 = v41 + 1;
          if (v27)
            goto LABEL_111;
          v30[2] = v42;
          goto LABEL_23;
        }
      }
      *(_QWORD *)(v30[7] + 8 * v34) = v29;
LABEL_23:
      ++v29;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v95);
      v31 += 40;
      if (a2 == v29)
      {
        v94 = v30;
        break;
      }
    }
  }
  if (v96[2] != a4 || v94[2] != a2)
  {
    v95[0] = v90;
    v95[1] = a2;
    v93[0] = v91;
    v93[1] = a4;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<AnyHashable>, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
    lazy protocol witness table accessor for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>();
    v80 = v86;
    BidirectionalCollection<>.difference<A>(from:)();
    v81 = v88;
    v82 = CollectionDifference.removals.getter();
    swift_bridgeObjectRetain();
    v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOys11AnyHashableV_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_y1_y6Says11gH7VGAVTG50K2UI0dM0VyS2iGTf1cn_nTf4nd_nTm(v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v83 = CollectionDifference.insertions.getter();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOys11AnyHashableV_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_y1_y6Says11gH7VGAVTG50K2UI0dM0VyS2iGTf1cn_nTf4nd_nTm(v83);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*((void (**)(char *, Swift::Int))v87 + 1))(v80, v81);
    swift_bridgeObjectRelease();
    goto LABEL_105;
  }
  LODWORD(v89) = a2 != 0;
  if (!(a4 | a2))
  {
    v46 = (char *)MEMORY[0x1E0DEE9D8];
    v45 = MEMORY[0x1E0DEE9D8];
    goto LABEL_102;
  }
  v43 = 0;
  v44 = 0;
  v45 = MEMORY[0x1E0DEE9D8];
  v46 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_41:
  v87 = v46;
  while (2)
  {
    v47 = v90 + 40 * v44;
    v48 = v91 + 40 * v43;
    v88 = v44;
    while (1)
    {
      v49 = *(_QWORD *)(v45 + 16);
      v50 = *((_QWORD *)v46 + 2);
      if (v50 + v49 > v92)
        goto LABEL_102;
      if (v44 == a2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 + 1, 1, (char *)v45);
        v52 = *(_QWORD *)(v45 + 16);
        v51 = *(_QWORD *)(v45 + 24);
        v53 = v52 + 1;
        v44 = v88;
        if (v52 >= v51 >> 1)
        {
          v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, (char *)v45);
          v44 = v88;
          v45 = (uint64_t)v54;
        }
        goto LABEL_44;
      }
      if (a4 == v43)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 + 1, 1, v46);
        v67 = *((_QWORD *)v46 + 2);
        v66 = *((_QWORD *)v46 + 3);
        v68 = v88;
        if (v67 >= v66 >> 1)
        {
          v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v46);
          v68 = v88;
          v46 = v78;
        }
        *((_QWORD *)v46 + 2) = v67 + 1;
        *(_QWORD *)&v46[8 * v67 + 32] = v68;
        v44 = v68 + 1;
        v43 = a4;
        goto LABEL_79;
      }
      outlined init with copy of AnyHashable(v48, (uint64_t)v95);
      outlined init with copy of AnyHashable(v47, (uint64_t)v93);
      v55 = MEMORY[0x18D75E284](v95, v93);
      outlined destroy of AnyHashable((uint64_t)v93);
      outlined destroy of AnyHashable((uint64_t)v95);
      if ((v55 & 1) != 0)
        break;
      outlined init with copy of AnyHashable(v48, (uint64_t)v95);
      v56 = v94;
      if (v94[2] && (v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v95), (v58 & 1) != 0))
      {
        v59 = 0;
        v60 = *(_QWORD *)(v56[7] + 8 * v57);
      }
      else
      {
        v60 = 0;
        v59 = 1;
      }
      outlined init with copy of AnyHashable(v47, (uint64_t)v93);
      v61 = v96;
      if (v96[2] && (v62 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v93), (v63 & 1) != 0))
      {
        if (!v59)
        {
          v73 = *(_QWORD *)(v61[7] + 8 * v62);
          outlined destroy of AnyHashable((uint64_t)v93);
          outlined destroy of AnyHashable((uint64_t)v95);
          v74 = v60 - v88;
          if (v60 >= v88)
          {
            if (v73 < v43)
            {
              v46 = v87;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
              v71 = *((_QWORD *)v46 + 2);
              v70 = *((_QWORD *)v46 + 3);
              v72 = v71 + 1;
              v69 = v88;
              if (v71 < v70 >> 1)
                goto LABEL_78;
              goto LABEL_93;
            }
            v46 = v87;
            if (v73 - v43 >= v74)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
              v69 = v88;
              goto LABEL_77;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
            v46 = v87;
          }
          v76 = *(_QWORD *)(v45 + 16);
          v75 = *(_QWORD *)(v45 + 24);
          v44 = v88;
          if (v76 >= v75 >> 1)
          {
            v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, (char *)v45);
            v44 = v88;
            v45 = (uint64_t)v79;
          }
          *(_QWORD *)(v45 + 16) = v76 + 1;
          *(_QWORD *)(v45 + 8 * v76 + 32) = v43++;
LABEL_79:
          LODWORD(v89) = v44 < a2;
          if (v43 < a4 || v44 < a2)
            goto LABEL_41;
          goto LABEL_102;
        }
      }
      else if ((v59 & 1) == 0)
      {
        outlined destroy of AnyHashable((uint64_t)v93);
        outlined destroy of AnyHashable((uint64_t)v95);
        v46 = v87;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
        v69 = v88;
LABEL_77:
        v71 = *((_QWORD *)v46 + 2);
        v70 = *((_QWORD *)v46 + 3);
        v72 = v71 + 1;
        if (v71 < v70 >> 1)
        {
LABEL_78:
          *((_QWORD *)v46 + 2) = v72;
          *(_QWORD *)&v46[8 * v71 + 32] = v69;
          v44 = v69 + 1;
          goto LABEL_79;
        }
LABEL_93:
        v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v72, 1, v46);
        v69 = v88;
        v46 = v77;
        goto LABEL_78;
      }
      outlined destroy of AnyHashable((uint64_t)v93);
      outlined destroy of AnyHashable((uint64_t)v95);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
      v52 = *(_QWORD *)(v45 + 16);
      v64 = *(_QWORD *)(v45 + 24);
      v53 = v52 + 1;
      v44 = v88;
      if (v52 >= v64 >> 1)
      {
        v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v52 + 1, 1, (char *)v45);
        v44 = v88;
        v45 = (uint64_t)v65;
      }
      v46 = v87;
LABEL_44:
      *(_QWORD *)(v45 + 16) = v53;
      *(_QWORD *)(v45 + 8 * v52 + 32) = v43++;
      v48 += 40;
      if (!((v43 < a4) | v89 & 1))
        goto LABEL_102;
    }
    ++v43;
    v44 = v88 + 1;
    LODWORD(v89) = v88 + 1 < a2;
    if (v43 < a4 || v44 < a2)
      continue;
    break;
  }
LABEL_102:
  if (*((_QWORD *)v46 + 2) + *(_QWORD *)(v45 + 16) <= v92)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = 0;
  }
LABEL_105:
  swift_bridgeObjectRelease();
  return v45;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)();
  uint64_t (*v38)();
  int isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t (*v54)();
  Swift::Int v55;
  uint64_t (*v56)();
  int v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  Swift::Int v69;
  uint64_t v70;
  uint64_t (*v71)();
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)();
  char *v76;
  uint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  id *v80;
  Swift::Int v81;
  uint64_t v82;
  void **v83;
  char v84;
  void **v85;
  uint64_t (*v86)();
  unint64_t v87;
  unint64_t v88;
  char v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  Swift::Int v101;
  unint64_t v102;
  unint64_t v103;
  Swift::Int v104;
  uint64_t v105;
  Swift::Int v106;
  Swift::Int v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t result;
  _QWORD v116[2];
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  id *v122;
  void **v123;
  void **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  Swift::Int v129;
  Swift::Int v130;
  Swift::Int v131;
  uint64_t v132;
  Swift::Int v133;
  _QWORD *v134;
  Swift::Int v135;
  unint64_t v136;
  unint64_t v137;

  v126 = a6;
  v127 = a1;
  v120 = a5;
  v128 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CollectionDifference<SystemSegmentItem>, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DECDE0]);
  v119 = v8;
  v118 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v117 = (char *)v116 - v10;
  v116[0] = type metadata accessor for SystemSegmentItem();
  v125 = *(_QWORD *)(v116[0] - 8);
  MEMORY[0x1E0C80A78](v116[0], v11);
  v121 = (void **)((char *)v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (void **)((char *)v116 - v15);
  MEMORY[0x1E0C80A78](v17, v18);
  v123 = (void **)((char *)v116 - v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v122 = (id *)((char *)v116 - v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (void **)((char *)v116 - v25);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (void **)((char *)v116 - v29);
  v31 = MEMORY[0x1E0DEE9E0];
  v137 = MEMORY[0x1E0DEE9E0];
  type metadata accessor for [SystemSegmentItem : Int]();
  v33 = v32;
  Dictionary.reserveCapacity(_:)(a4);
  v130 = a4;
  v124 = v16;
  if (a4)
  {
    if (a4 < 0)
    {
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    v116[1] = v33;
    v129 = a2;
    v34 = 0;
    v35 = (_QWORD *)v137;
    v131 = *(_QWORD *)(v125 + 72);
    v36 = v128;
    v37 = type metadata accessor for SystemSegmentItem;
    while (a4 != v34)
    {
      v38 = v37;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v36, (uint64_t)v30, (uint64_t (*)(_QWORD))v37);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v134 = v35;
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
      v42 = v35[2];
      v43 = (v40 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
        goto LABEL_95;
      v45 = v40;
      if (v35[3] >= v44)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
        v46 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        if ((v45 & 1) != (v47 & 1))
          goto LABEL_102;
        v41 = v46;
      }
      v37 = v38;
      v35 = v134;
      if ((v45 & 1) != 0)
      {
        *(_QWORD *)(v134[7] + 8 * v41) = v34;
      }
      else
      {
        v134[(v41 >> 6) + 8] |= 1 << v41;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, v35[6] + v41 * v131, (uint64_t (*)(_QWORD))v38);
        *(_QWORD *)(v35[7] + 8 * v41) = v34;
        v48 = v35[2];
        v49 = __OFADD__(v48, 1);
        v50 = v48 + 1;
        if (v49)
          goto LABEL_98;
        v35[2] = v50;
      }
      ++v34;
      swift_bridgeObjectRelease();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))v38);
      a4 = v130;
      v36 += v131;
      if (v130 == v34)
      {
        v137 = (unint64_t)v35;
        a2 = v129;
        v31 = MEMORY[0x1E0DEE9E0];
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
LABEL_17:
  v136 = v31;
  Dictionary.reserveCapacity(_:)(a2);
  if (!a2)
  {
LABEL_33:
    if (*(_QWORD *)(v137 + 16) == a4 && *(_QWORD *)(v136 + 16) == a2)
    {
      v68 = a2 != 0;
      if (a4 | a2)
      {
        v129 = a2;
        v69 = 0;
        v131 = 0;
        v70 = MEMORY[0x1E0DEE9D8];
        v71 = type metadata accessor for SystemSegmentItem;
        v72 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_37:
        LODWORD(v119) = v68;
        while (1)
        {
          v73 = *(_QWORD *)(v70 + 16);
          v74 = *((_QWORD *)v72 + 2);
          if (v74 + v73 > v126)
            goto LABEL_90;
          if (v131 == v129)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v70 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73 + 1, 1, (char *)v70);
          }
          else
          {
            if (a4 == v69)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74 + 1, 1, v72);
              v100 = *((_QWORD *)v72 + 2);
              v99 = *((_QWORD *)v72 + 3);
              if (v100 >= v99 >> 1)
                v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v100 + 1, 1, v72);
              *((_QWORD *)v72 + 2) = v100 + 1;
              v101 = v131;
              *(_QWORD *)&v72[8 * v100 + 32] = v131;
              v131 = v101 + 1;
              v69 = a4;
              goto LABEL_74;
            }
            v120 = v70;
            v75 = v71;
            v76 = v72;
            v77 = *(_QWORD *)(v125 + 72);
            v78 = v69;
            v79 = v128 + v77 * v69;
            v80 = v122;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, (uint64_t)v122, (uint64_t (*)(_QWORD))v75);
            v81 = v131;
            v82 = v127 + v77 * v131;
            v83 = v123;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v82, (uint64_t)v123, (uint64_t (*)(_QWORD))v75);
            v84 = specialized static SystemSegmentItem.== infix(_:_:)(v80, v83);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v83, (uint64_t (*)(_QWORD))v75);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v80, (uint64_t (*)(_QWORD))v75);
            if ((v84 & 1) != 0)
            {
              v69 = v78 + 1;
              a4 = v130;
              v131 = v81 + 1;
              v68 = v81 + 1 < v129;
              v72 = v76;
              v70 = v120;
              v71 = v75;
              if (v69 < v130)
                goto LABEL_37;
              goto LABEL_75;
            }
            v85 = v124;
            v86 = v75;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, (uint64_t)v124, (uint64_t (*)(_QWORD))v75);
            v87 = v136;
            if (*(_QWORD *)(v136 + 16))
            {
              v88 = specialized __RawDictionaryStorage.find<A>(_:)(v85);
              v72 = v76;
              if ((v89 & 1) != 0)
              {
                v90 = 0;
                v91 = *(_QWORD *)(*(_QWORD *)(v87 + 56) + 8 * v88);
              }
              else
              {
                v91 = 0;
                v90 = 1;
              }
            }
            else
            {
              v91 = 0;
              v90 = 1;
              v72 = v76;
            }
            v71 = v86;
            v92 = v82;
            v70 = v120;
            v93 = v121;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v92, (uint64_t)v121, (uint64_t (*)(_QWORD))v86);
            v94 = v137;
            v69 = v78;
            if (*(_QWORD *)(v137 + 16) && (v95 = specialized __RawDictionaryStorage.find<A>(_:)(v93), (v96 & 1) != 0))
            {
              LOBYTE(v68) = v119;
              if (!v90)
              {
                v105 = (uint64_t)v93;
                v106 = *(_QWORD *)(*(_QWORD *)(v94 + 56) + 8 * v95);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v105, (uint64_t (*)(_QWORD))v71);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v124, (uint64_t (*)(_QWORD))v71);
                v107 = v91 - v131;
                if (v91 >= v131)
                {
                  a4 = v130;
                  if (v106 < v69 || v106 - v69 >= v107)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v72 + 2) + 1, 1, v72);
                    goto LABEL_71;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                    goto LABEL_79;
                }
                else
                {
                  v108 = swift_isUniquelyReferenced_nonNull_native();
                  a4 = v130;
                  if ((v108 & 1) != 0)
                  {
LABEL_79:
                    v110 = *(_QWORD *)(v70 + 16);
                    v109 = *(_QWORD *)(v70 + 24);
                    if (v110 >= v109 >> 1)
                      v70 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v109 > 1), v110 + 1, 1, (char *)v70);
                    *(_QWORD *)(v70 + 16) = v110 + 1;
                    *(_QWORD *)(v70 + 8 * v110 + 32) = v69++;
LABEL_74:
                    v68 = v131 < v129;
                    if (v69 < a4)
                      goto LABEL_37;
LABEL_75:
                    if (v131 < v129)
                      goto LABEL_37;
                    goto LABEL_90;
                  }
                }
                v70 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v70 + 16) + 1, 1, (char *)v70);
                goto LABEL_79;
              }
            }
            else
            {
              LOBYTE(v68) = v119;
              if ((v90 & 1) == 0)
              {
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v93, (uint64_t (*)(_QWORD))v71);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v124, (uint64_t (*)(_QWORD))v71);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v72 + 2) + 1, 1, v72);
                a4 = v130;
LABEL_71:
                v103 = *((_QWORD *)v72 + 2);
                v102 = *((_QWORD *)v72 + 3);
                if (v103 >= v102 >> 1)
                  v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v102 > 1), v103 + 1, 1, v72);
                *((_QWORD *)v72 + 2) = v103 + 1;
                v104 = v131;
                *(_QWORD *)&v72[8 * v103 + 32] = v131;
                v131 = v104 + 1;
                goto LABEL_74;
              }
            }
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v93, (uint64_t (*)(_QWORD))v71);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v124, (uint64_t (*)(_QWORD))v71);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v70 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v70 + 16) + 1, 1, (char *)v70);
            a4 = v130;
          }
          v98 = *(_QWORD *)(v70 + 16);
          v97 = *(_QWORD *)(v70 + 24);
          if (v98 >= v97 >> 1)
            v70 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v97 > 1), v98 + 1, 1, (char *)v70);
          *(_QWORD *)(v70 + 16) = v98 + 1;
          *(_QWORD *)(v70 + 8 * v98 + 32) = v69++;
          if (v69 >= a4 && !v68)
            goto LABEL_90;
        }
      }
      v72 = (char *)MEMORY[0x1E0DEE9D8];
      v70 = MEMORY[0x1E0DEE9D8];
LABEL_90:
      if (*((_QWORD *)v72 + 2) + *(_QWORD *)(v70 + 16) <= v126)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70 = 0;
      }
    }
    else
    {
      v134 = (_QWORD *)v127;
      v135 = a2;
      v132 = v128;
      v133 = a4;
      type metadata accessor for UnsafeBufferPointer<SystemSegmentItem>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnsafeBufferPointer<SystemSegmentItem> and conformance UnsafeBufferPointer<A>, (uint64_t (*)(uint64_t))type metadata accessor for UnsafeBufferPointer<SystemSegmentItem>, MEMORY[0x1E0DEA5D0]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentItem, (uint64_t)&protocol conformance descriptor for SystemSegmentItem);
      v111 = v117;
      BidirectionalCollection<>.difference<A>(from:)();
      v112 = v119;
      v113 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      v70 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI17SystemSegmentItemV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA17ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v113);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v114 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI17SystemSegmentItemV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA17ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v114);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v111, v112);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v70;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    v51 = 0;
    v52 = (_QWORD *)v136;
    v131 = *(_QWORD *)(v125 + 72);
    v53 = v127;
    v54 = type metadata accessor for SystemSegmentItem;
    while (a2 != v51)
    {
      v55 = a2;
      v56 = v54;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v53, (uint64_t)v26, (uint64_t (*)(_QWORD))v54);
      v57 = swift_isUniquelyReferenced_nonNull_native();
      v134 = v52;
      v59 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      v60 = v52[2];
      v61 = (v58 & 1) == 0;
      v62 = v60 + v61;
      if (__OFADD__(v60, v61))
        goto LABEL_97;
      v63 = v58;
      if (v52[3] >= v62)
      {
        if ((v57 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v62, v57);
        v64 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
        if ((v63 & 1) != (v65 & 1))
        {
          v136 = 0x8000000000000000;
          goto LABEL_104;
        }
        v59 = v64;
      }
      v54 = v56;
      v52 = v134;
      if ((v63 & 1) != 0)
      {
        *(_QWORD *)(v134[7] + 8 * v59) = v51;
      }
      else
      {
        v134[(v59 >> 6) + 8] |= 1 << v59;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, v52[6] + v59 * v131, (uint64_t (*)(_QWORD))v56);
        *(_QWORD *)(v52[7] + 8 * v59) = v51;
        v66 = v52[2];
        v49 = __OFADD__(v66, 1);
        v67 = v66 + 1;
        if (v49)
          goto LABEL_99;
        v52[2] = v67;
      }
      ++v51;
      swift_bridgeObjectRelease();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))v56);
      v53 += v131;
      a2 = v55;
      if (v55 == v51)
      {
        v136 = (unint64_t)v52;
        a4 = v130;
        goto LABEL_33;
      }
    }
    goto LABEL_96;
  }
LABEL_101:
  __break(1u);
LABEL_102:
  v137 = 0x8000000000000000;
LABEL_104:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  Swift::Int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  char v55;
  _QWORD *v56;
  unint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  Swift::Int v68;
  Swift::Int v69;
  unint64_t v70;
  unint64_t v71;
  int64_t v72;
  Swift::Int v73;
  Swift::Int v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  Swift::Int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD v94[2];
  uint64_t v95;
  _QWORD v96[6];
  _QWORD v97[5];
  char v98;
  uint64_t v99;
  char v100;
  _BYTE v101[48];
  _QWORD v102[6];
  _QWORD *v103;
  _QWORD *v104;

  v92 = a3;
  v93 = a6;
  v90 = a5;
  v91 = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionDifference<TableRowID>, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DECDE0]);
  v88 = *(_QWORD *)(v8 - 8);
  v89 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v87 = (uint64_t *)((char *)&v85 - v10);
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v104 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  type metadata accessor for [TableRowID : Int](0, &lazy cache variable for type metadata for [TableRowID : Int], (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  v13 = v12;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    v103 = v11;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0)
        goto LABEL_121;
      v29 = 0;
      v30 = v103;
      v31 = v91;
      while (1)
      {
        if (a2 == v29)
          goto LABEL_116;
        outlined init with copy of TableRowID(v31, (uint64_t)v97);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v102[0] = v30;
        v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97);
        v35 = v30[2];
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_117;
        v38 = v33;
        if (v30[3] >= v37)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v30 = (_QWORD *)v102[0];
            if ((v33 & 1) == 0)
              goto LABEL_32;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v30 = (_QWORD *)v102[0];
            if ((v38 & 1) == 0)
              goto LABEL_32;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
          v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97);
          if ((v38 & 1) != (v40 & 1))
            goto LABEL_122;
          v34 = v39;
          v30 = (_QWORD *)v102[0];
          if ((v38 & 1) == 0)
          {
LABEL_32:
            v30[(v34 >> 6) + 8] |= 1 << v34;
            outlined init with copy of TableRowID((uint64_t)v97, v30[6] + 48 * v34);
            *(_QWORD *)(v30[7] + 8 * v34) = v29;
            v41 = v30[2];
            v27 = __OFADD__(v41, 1);
            v42 = v41 + 1;
            if (v27)
              goto LABEL_119;
            v30[2] = v42;
            goto LABEL_23;
          }
        }
        *(_QWORD *)(v30[7] + 8 * v34) = v29;
LABEL_23:
        ++v29;
        swift_bridgeObjectRelease();
        outlined destroy of TableRowID((uint64_t)v97);
        v31 += 48;
        if (a2 == v29)
        {
          v103 = v30;
          break;
        }
      }
    }
    if (v104[2] == a4 && v103[2] == a2)
    {
      LODWORD(v90) = a2 != 0;
      if (a4 | a2)
      {
        v43 = 0;
        v44 = 0;
        v87 = &v99;
        v45 = MEMORY[0x1E0DEE9D8];
        v46 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_41:
        v86 = v46;
LABEL_42:
        v88 = v91 + 48 * v44;
        v89 = v44;
        v47 = v92 + 48 * v43;
        while (1)
        {
          v48 = *(_QWORD *)(v45 + 16);
          v49 = *((_QWORD *)v46 + 2);
          if (v49 + v48 > v93)
            goto LABEL_110;
          if (v44 == a2)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48 + 1, 1, (char *)v45);
            v51 = *(_QWORD *)(v45 + 16);
            v50 = *(_QWORD *)(v45 + 24);
            v52 = v51 + 1;
            v44 = v89;
            if (v51 >= v50 >> 1)
            {
              v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, (char *)v45);
              v44 = v89;
              v45 = (uint64_t)v53;
            }
            goto LABEL_44;
          }
          if (a4 == v43)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 + 1, 1, v46);
            v67 = *((_QWORD *)v46 + 2);
            v66 = *((_QWORD *)v46 + 3);
            v68 = v89;
            if (v67 >= v66 >> 1)
            {
              v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v46);
              v68 = v89;
              v46 = v78;
            }
            *((_QWORD *)v46 + 2) = v67 + 1;
            *(_QWORD *)&v46[8 * v67 + 32] = v68;
            v44 = v68 + 1;
            v43 = a4;
            goto LABEL_87;
          }
          outlined init with copy of TableRowID(v47, (uint64_t)v102);
          outlined init with copy of TableRowID(v88, (uint64_t)v101);
          outlined init with copy of TableRowID((uint64_t)v102, (uint64_t)v97);
          outlined init with copy of TableRowID((uint64_t)v101, (uint64_t)v87);
          if ((v98 & 1) != 0)
          {
            outlined init with copy of TableRowID((uint64_t)v97, (uint64_t)v96);
            if ((v100 & 1) != 0)
            {
              v54 = *((_OWORD *)v87 + 1);
              v94[0] = *(_OWORD *)v87;
              v94[1] = v54;
              v95 = v87[4];
              v55 = MEMORY[0x18D75E284](v96, v94);
              outlined destroy of AnyHashable((uint64_t)v94);
              outlined destroy of AnyHashable((uint64_t)v96);
              if ((v55 & 1) != 0)
                goto LABEL_74;
LABEL_58:
              outlined destroy of TableRowID((uint64_t)v97);
              goto LABEL_61;
            }
            outlined destroy of AnyHashable((uint64_t)v96);
          }
          else
          {
            outlined init with copy of TableRowID((uint64_t)v97, (uint64_t)v96);
            if ((v100 & 1) == 0)
            {
              if (v96[0] == v99)
              {
LABEL_74:
                outlined destroy of TableRowID((uint64_t)v97);
                outlined destroy of TableRowID((uint64_t)v101);
                outlined destroy of TableRowID((uint64_t)v102);
                ++v43;
                v44 = v89 + 1;
                LODWORD(v90) = v89 + 1 < a2;
                if (v43 < a4 || v44 < a2)
                  goto LABEL_42;
                goto LABEL_110;
              }
              goto LABEL_58;
            }
          }
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for (TableRowID, TableRowID));
LABEL_61:
          outlined destroy of TableRowID((uint64_t)v101);
          outlined destroy of TableRowID((uint64_t)v102);
          outlined init with copy of TableRowID(v47, (uint64_t)v97);
          v56 = v103;
          if (v103[2] && (v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97), (v58 & 1) != 0))
          {
            v59 = 0;
            v60 = *(_QWORD *)(v56[7] + 8 * v57);
          }
          else
          {
            v60 = 0;
            v59 = 1;
          }
          outlined init with copy of TableRowID(v88, (uint64_t)v102);
          v61 = v104;
          if (v104[2] && (v62 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v102), (v63 & 1) != 0))
          {
            if (!v59)
            {
              v73 = *(_QWORD *)(v61[7] + 8 * v62);
              outlined destroy of TableRowID((uint64_t)v102);
              outlined destroy of TableRowID((uint64_t)v97);
              v74 = v60 - v89;
              if (v60 >= v89)
              {
                if (v73 < v43)
                {
                  v46 = v86;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
                  v71 = *((_QWORD *)v46 + 2);
                  v70 = *((_QWORD *)v46 + 3);
                  v72 = v71 + 1;
                  v69 = v89;
                  if (v71 < v70 >> 1)
                    goto LABEL_86;
                  goto LABEL_101;
                }
                v46 = v86;
                if (v73 - v43 >= v74)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
                  v69 = v89;
                  goto LABEL_85;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
              }
              else
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
                v46 = v86;
              }
              v76 = *(_QWORD *)(v45 + 16);
              v75 = *(_QWORD *)(v45 + 24);
              v44 = v89;
              if (v76 >= v75 >> 1)
              {
                v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, (char *)v45);
                v44 = v89;
                v45 = (uint64_t)v79;
              }
              *(_QWORD *)(v45 + 16) = v76 + 1;
              *(_QWORD *)(v45 + 8 * v76 + 32) = v43++;
LABEL_87:
              LODWORD(v90) = v44 < a2;
              if (v43 < a4 || v44 < a2)
                goto LABEL_41;
              goto LABEL_110;
            }
          }
          else if ((v59 & 1) == 0)
          {
            outlined destroy of TableRowID((uint64_t)v102);
            outlined destroy of TableRowID((uint64_t)v97);
            v46 = v86;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
            v69 = v89;
LABEL_85:
            v71 = *((_QWORD *)v46 + 2);
            v70 = *((_QWORD *)v46 + 3);
            v72 = v71 + 1;
            if (v71 < v70 >> 1)
            {
LABEL_86:
              *((_QWORD *)v46 + 2) = v72;
              *(_QWORD *)&v46[8 * v71 + 32] = v69;
              v44 = v69 + 1;
              goto LABEL_87;
            }
LABEL_101:
            v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v72, 1, v46);
            v69 = v89;
            v46 = v77;
            goto LABEL_86;
          }
          outlined destroy of TableRowID((uint64_t)v102);
          outlined destroy of TableRowID((uint64_t)v97);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v45 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, (char *)v45);
          v51 = *(_QWORD *)(v45 + 16);
          v64 = *(_QWORD *)(v45 + 24);
          v52 = v51 + 1;
          v44 = v89;
          if (v51 >= v64 >> 1)
          {
            v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v51 + 1, 1, (char *)v45);
            v44 = v89;
            v45 = (uint64_t)v65;
          }
          v46 = v86;
LABEL_44:
          *(_QWORD *)(v45 + 16) = v52;
          *(_QWORD *)(v45 + 8 * v51 + 32) = v43++;
          v47 += 48;
          if (!((v43 < a4) | v90 & 1))
            goto LABEL_110;
        }
      }
      v46 = (char *)MEMORY[0x1E0DEE9D8];
      v45 = MEMORY[0x1E0DEE9D8];
LABEL_110:
      if (*((_QWORD *)v46 + 2) + *(_QWORD *)(v45 + 16) <= v93)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = 0;
      }
    }
    else
    {
      v97[0] = v91;
      v97[1] = a2;
      v102[0] = v92;
      v102[1] = a4;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<TableRowID>, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>();
      lazy protocol witness table accessor for type TableRowID and conformance TableRowID();
      v80 = (uint64_t)v87;
      BidirectionalCollection<>.difference<A>(from:)();
      v81 = v89;
      v82 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI10TableRowIDO_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f54OyAL_GXEfU_AA13CountingIndexVySiG_AvA0tuC0VyAA09Shadowj8C0VyAA22I46DataSourceAdaptorVGGAXyAA08ResolvedxW3IDsVGTG5AJ0dO0VyAJ13CountingIndexVySiGAVGTf1cn_nTf4nd_nTm(v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v83 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI10TableRowIDO_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f54OyAL_GXEfU_AA13CountingIndexVySiG_AvA0tuC0VyAA09Shadowj8C0VyAA22I46DataSourceAdaptorVGGAXyAA08ResolvedxW3IDsVGTG5AJ0dO0VyAJ13CountingIndexVySiGAVGTf1cn_nTf4nd_nTm(v83);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, Swift::Int))(v88 + 8))(v80, v81);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v45;
  }
  if (a4 < 0)
    goto LABEL_120;
  v86 = v13;
  v14 = 0;
  v15 = v104;
  v16 = v92;
  while (a4 != v14)
  {
    outlined init with copy of TableRowID(v16, (uint64_t)v97);
    v17 = swift_isUniquelyReferenced_nonNull_native();
    v102[0] = v15;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97);
    v20 = v15[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_115;
    v23 = v18;
    if (v15[3] >= v22)
    {
      if ((v17 & 1) != 0)
      {
        v15 = (_QWORD *)v102[0];
        if ((v18 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v15 = (_QWORD *)v102[0];
        if ((v23 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, v17);
      v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_122;
      v19 = v24;
      v15 = (_QWORD *)v102[0];
      if ((v23 & 1) == 0)
      {
LABEL_14:
        v15[(v19 >> 6) + 8] |= 1 << v19;
        outlined init with copy of TableRowID((uint64_t)v97, v15[6] + 48 * v19);
        *(_QWORD *)(v15[7] + 8 * v19) = v14;
        v26 = v15[2];
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_118;
        v15[2] = v28;
        goto LABEL_5;
      }
    }
    *(_QWORD *)(v15[7] + 8 * v19) = v14;
LABEL_5:
    ++v14;
    swift_bridgeObjectRelease();
    outlined destroy of TableRowID((uint64_t)v97);
    v16 += 48;
    if (a4 == v14)
    {
      v104 = v15;
      v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, uint64_t a2)
{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;

  v5 = *v2;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SystemSegmentItem() - 8) + 80);
  result = specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(a2 + ((v6 + 32) & ~v6), *(_QWORD *)(a2 + 16), a1 + ((v6 + 32) & ~v6), *(_QWORD *)(a1 + 16), v5, 0x7FFFFFFFFFFFFFFFLL);
  if (!result)
  {
LABEL_95:
    __break(1u);
    return result;
  }
  v9 = v8;
  v69 = v2;
  v10 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)((char *)result);
  swift_bridgeObjectRelease();
  v11 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v9);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a2 + 16);
  result = swift_bridgeObjectRelease();
  v76 = v11;
  if (!(v12 | v13))
  {
    v20 = MEMORY[0x1E0DEE9D8];
    goto LABEL_84;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v67 = v11 + 32;
  v68 = v10 + 32;
  v20 = MEMORY[0x1E0DEE9D8];
  v71 = v10;
  v75 = v13;
LABEL_4:
  v21 = v14;
  v22 = v15;
  v77 = v18;
  v73 = &v67[16 * v19];
  v74 = v18;
  v72 = v19;
  while (2)
  {
    v70 = &v68[16 * v77];
    v23 = v21;
    while ((v18 & 0x8000000000000000) != 0 || v77 >= *((_QWORD *)v10 + 2) || *(_QWORD *)v70 != v16)
    {
      v24 = *((_QWORD *)v76 + 2);
      if (v19 < v24 && *(_QWORD *)v73 == v17)
      {
        v55 = *(_QWORD *)&v67[16 * v19 + 8];
        v56 = v55 - v17;
        if (__OFSUB__(v55, v17))
          goto LABEL_89;
        v57 = v13 - v22;
        if (v56 < 1)
        {
          if (v57 > 0)
            goto LABEL_72;
          v15 = v13;
          if (v56 >= v57)
            goto LABEL_72;
        }
        else if (v57 < 0 || (v15 = v13, v57 >= (unint64_t)v56))
        {
LABEL_72:
          v15 = v22 + v56;
          if (__OFADD__(v22, v56))
            goto LABEL_93;
        }
        if (v15 < v22)
          goto LABEL_90;
        v58 = v23;
        v59 = v17;
        v60 = v20;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v20 = v60;
        }
        else
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v60 + 16) + 1, 1, (char *)v60);
          v20 = result;
        }
        v62 = *(_QWORD *)(v20 + 16);
        v61 = *(_QWORD *)(v20 + 24);
        v63 = v62 + 1;
        if (v62 >= v61 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, (char *)v20);
          v63 = v62 + 1;
          v14 = v58;
          v64 = v59;
          v20 = result;
        }
        else
        {
          v64 = v59;
          v14 = v58;
        }
        *(_QWORD *)(v20 + 16) = v63;
        v65 = v20 + 40 * v62;
        *(_QWORD *)(v65 + 32) = v22;
        *(_QWORD *)(v65 + 40) = v15;
        *(_QWORD *)(v65 + 48) = 0;
        *(_QWORD *)(v65 + 56) = 0;
        *(_BYTE *)(v65 + 64) = 1;
        ++v19;
        v17 = v56 + v64;
        v18 = v77;
        v13 = v75;
        if (v16 < v12)
          goto LABEL_4;
        v18 = v77;
        if (v17 < v75)
          goto LABEL_4;
        goto LABEL_84;
      }
      v25 = v12;
      if ((v18 & 0x8000000000000000) == 0)
      {
        v25 = v12;
        if (v77 < *((_QWORD *)v10 + 2))
          v25 = *(_QWORD *)v70;
      }
      v26 = v13;
      if (v19 < v24)
        v26 = *(_QWORD *)v73;
      if (v26 - v17 >= v25 - v16)
        v27 = v25 - v16;
      else
        v27 = v26 - v17;
      v28 = v12 - v23;
      if (v27 < 1)
      {
        if (v28 <= 0 && v27 < v28)
        {
          if (v12 < v23)
            goto LABEL_85;
          v29 = v13 - v22;
          v30 = v12;
LABEL_34:
          if (v29 <= 0)
          {
            v31 = v13;
            if (v27 < v29)
              goto LABEL_37;
          }
          goto LABEL_36;
        }
      }
      else if ((v28 & 0x8000000000000000) == 0 && v28 < (unint64_t)v27)
      {
        if (v12 < v23)
          goto LABEL_85;
        v29 = v13 - v22;
        v30 = v12;
        goto LABEL_31;
      }
      v30 = v23 + v27;
      if (__OFADD__(v23, v27))
        goto LABEL_87;
      if (v30 < v23)
      {
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
      v29 = v13 - v22;
      if (v27 < 1)
        goto LABEL_34;
LABEL_31:
      if ((v29 & 0x8000000000000000) == 0)
      {
        v31 = v13;
        if (v29 < (unint64_t)v27)
          goto LABEL_37;
      }
LABEL_36:
      v31 = v22 + v27;
      if (__OFADD__(v22, v27))
        goto LABEL_88;
LABEL_37:
      if (v31 < v22)
        goto LABEL_86;
      v32 = v22;
      v33 = v23;
      v34 = v12;
      v35 = v16;
      v36 = v17;
      v37 = v20;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v20 = v37;
      }
      else
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v37 + 16) + 1, 1, (char *)v37);
        v20 = result;
      }
      v39 = *(_QWORD *)(v20 + 16);
      v38 = *(_QWORD *)(v20 + 24);
      if (v39 >= v38 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, (char *)v20);
        v41 = v33;
        v40 = v36;
        v20 = result;
      }
      else
      {
        v40 = v36;
        v41 = v33;
      }
      *(_QWORD *)(v20 + 16) = v39 + 1;
      v42 = v20 + 40 * v39;
      *(_QWORD *)(v42 + 32) = v41;
      *(_QWORD *)(v42 + 40) = v30;
      v16 = v27 + v35;
      *(_QWORD *)(v42 + 48) = v32;
      *(_QWORD *)(v42 + 56) = v31;
      *(_BYTE *)(v42 + 64) = 2;
      v17 = v27 + v40;
      v23 = v30;
      v22 = v31;
      v12 = v34;
      v43 = v16 < v34;
      v10 = v71;
      v19 = v72;
      v18 = v74;
      v13 = v75;
      if (!v43)
      {
        v23 = v30;
        v22 = v31;
        if (v17 >= v75)
          goto LABEL_84;
      }
    }
    v44 = *(_QWORD *)&v68[16 * v77 + 8];
    v45 = v44 - v16;
    if (__OFSUB__(v44, v16))
      goto LABEL_91;
    v46 = v12 - v23;
    if (v45 < 1)
    {
      if (v46 > 0)
        goto LABEL_54;
      v21 = v12;
      if (v45 >= v46)
        goto LABEL_54;
    }
    else if (v46 < 0 || (v21 = v12, v46 >= (unint64_t)v45))
    {
LABEL_54:
      v21 = v23 + v45;
      if (__OFADD__(v23, v45))
        goto LABEL_94;
    }
    if (v21 < v23)
      goto LABEL_92;
    v47 = v17;
    v48 = v23;
    v49 = v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v20 = v49;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v49 + 16) + 1, 1, (char *)v49);
      v20 = result;
    }
    v51 = *(_QWORD *)(v20 + 16);
    v50 = *(_QWORD *)(v20 + 24);
    v52 = v51 + 1;
    if (v51 >= v50 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, (char *)v20);
      v52 = v51 + 1;
      v53 = v48;
      v17 = v47;
      v20 = result;
    }
    else
    {
      v17 = v47;
      v53 = v48;
    }
    v18 = v74;
    v13 = v75;
    *(_QWORD *)(v20 + 16) = v52;
    v54 = v20 + 40 * v51;
    *(_QWORD *)(v54 + 32) = v53;
    *(_QWORD *)(v54 + 40) = v21;
    ++v77;
    v16 += v45;
    *(_QWORD *)(v54 + 48) = 0;
    *(_QWORD *)(v54 + 56) = 0;
    *(_BYTE *)(v54 + 64) = 0;
    if (v16 < v12 || v17 < v75)
      continue;
    break;
  }
LABEL_84:
  v66 = v20;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v69 = v66;
  return result;
}

{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in UIKitToolbarStrategy.updateLocations()()
{
  return UIKitToolbarStrategy.updateBarTitle()((void (*)(_QWORD *__return_ptr))closure #1 in UIKitToolbarStrategy.updateBarTitle()) & 1;
}

uint64_t partial apply for implicit closure #10 in implicit closure #9 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(_QWORD *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()) & 1;
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(_QWORD *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateNavigationBarTrailing()) & 1;
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in UIKitToolbarStrategy.updateLocations()()
{
  return UIKitToolbarStrategy.updateBarTitle()((void (*)(_QWORD *__return_ptr))closure #1 in UIKitToolbarStrategy.updateNavigationAccessory()) & 1;
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(_QWORD *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateBarCenter()) & 1;
}

uint64_t partial apply for implicit closure #20 in implicit closure #19 in UIKitToolbarStrategy.updateLocations()()
{
  return UIKitToolbarStrategy.updateBarTitle()((void (*)(_QWORD *__return_ptr))closure #1 in UIKitToolbarStrategy.updateKeyboardBar()) & 1;
}

uint64_t partial apply for implicit closure #18 in implicit closure #17 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(_QWORD *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateBottomBar()) & 1;
}

uint64_t *protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePreferences:) in conformance UIHostingContentView<A, B>(uint64_t a1, uint64_t *a2)
{
  return specialized UIHostingContentView.hostingView<A>(_:didChangePreferences:)(a2);
}

uint64_t UIHostingContentView.hostingView<A>(_:willUpdate:)()
{
  char v0;

  specialized _UIHostingView.focusBridge.getter();
  v0 = _UIHostingView.isHiddenForReuse.getter();
  swift_retain();
  FocusBridge.canAcceptFocus.setter((v0 & 1) == 0);
  return swift_release();
}

void UIHostingContentView.modifyViewInputs(_:)(uint64_t a1)
{
  _UIHostingView.modifyViewInputs(_:)(a1);
}

uint64_t sub_186EF25FC()
{
  return _GraphInputs.pushStyleContext<A>(_:)();
}

uint64_t closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, char *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];

  v41 = a5;
  v42 = a1;
  v8 = *a2;
  v9 = *MEMORY[0x1E0DEEDD8];
  type metadata accessor for PreferenceList.Value<ToolbarStorage.NavigationProperties?>(0);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PreferenceList.Value<ToolbarStorage.SearchItem?>(0);
  v16 = v15;
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a2;
  v44 = a4;
  swift_beginAccess();
  specialized VersionSeedTracker.didChange(_:action:)(a3, (void (*)(_QWORD *))partial apply for closure #1 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:));
  swift_endAccess();
  result = ToolbarBridge.allowsUpdates.getter();
  if ((result & 1) != 0)
  {
    v39 = v11;
    v21 = v41;
    v40 = v9 & v8;
    v22 = (_DWORD *)((char *)a2 + direct field offset for ToolbarBridge.searchTracker);
    swift_beginAccess();
    v45 = a3;
    PreferenceList.subscript.getter();
    v23 = *(_DWORD *)&v19[*(int *)(v16 + 28)];
    v24 = v42;
    if (*v22 == -1 || (v23 != -1 ? (v25 = *v22 == v23) : (v25 = 0), !v25))
    {
      *v22 = v23;
      closure #2 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)v19, a2, v24, (uint64_t *)a4);
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for PreferenceList.Value<ToolbarStorage.SearchItem?>);
    v26 = swift_endAccess();
    MEMORY[0x1E0C80A78](v26, v27);
    *(&v39 - 6) = (uint64_t)a2;
    *(&v39 - 5) = v24;
    *(&v39 - 4) = a3;
    *(&v39 - 3) = v21;
    *(&v39 - 2) = a4;
    swift_beginAccess();
    specialized VersionSeedTracker.didChange(_:action:)(a3, (void (*)(_QWORD *))partial apply for closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:));
    swift_endAccess();
    v28 = (_DWORD *)((char *)a2 + direct field offset for ToolbarBridge.titleTracker);
    swift_beginAccess();
    v45 = a3;
    PreferenceList.subscript.getter();
    v29 = *(_DWORD *)&v14[*(int *)(v39 + 28)];
    if (*v28 == -1 || v29 == -1 || *v28 != v29)
    {
      *v28 = v29;
      closure #4 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)v14, a2, a4);
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PreferenceList.Value<ToolbarStorage.NavigationProperties?>);
    swift_endAccess();
    v30 = *(unsigned __int8 *)(a4 + 8);
    v31 = *(unsigned __int8 *)(a4 + 9);
    v32 = *(unsigned __int8 *)(a4 + 10);
    v34 = *(_QWORD *)(v40 + 80);
    v33 = *(_QWORD *)(v40 + 88);
    v35 = *(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v33 + 128);
    if (v31)
      v36 = 256;
    else
      v36 = 0;
    v37 = v36 | v30 | (v32 << 16);
    v38 = swift_bridgeObjectRetain();
    v35(v38, v37, v46, v34, v33);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for ToolbarStrategy.willReturnUpdates(_:preferences:) in conformance UIKitToolbarStrategy()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void))partial apply for closure #1 in UIKitToolbarStrategy.willReturnUpdates(_:preferences:));
}

void type metadata accessor for ToolbarStorage.NavigationProperties?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for PreferenceList.Value<ToolbarStorage.NavigationProperties?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for PreferenceList.Value<ToolbarStorage.NavigationProperties?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.NavigationProperties?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
}

void type metadata accessor for ToolbarStorage.SearchItem?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for PreferenceList.Value<ToolbarStorage.SearchItem?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for PreferenceList.Value<ToolbarStorage.SearchItem?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.SearchItem?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
}

uint64_t specialized ToolbarStrategy.withUpdate<A>(_:)(void (*a1)(void))
{
  void **v1;
  void *v2;
  id v4;
  uint64_t result;
  _BYTE v6[88];
  uint64_t v7;
  _BYTE v8[96];

  v2 = *v1;
  if (*v1)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)(v1 + 1), (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v7)
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v6, (uint64_t)v8);
      v4 = v2;
      a1();

      return outlined destroy of Toolbar.UpdateContext((uint64_t)v8);
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void partial apply for closure #1 in UIKitToolbarStrategy.willReturnUpdates(_:preferences:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (*(_BYTE *)(v2 + 25))
    v3 = 256;
  else
    v3 = 0;
  closure #1 in UIKitToolbarStrategy.willReturnUpdates(_:preferences:)(a1, a2, *(_QWORD *)(v2 + 16), v3 | *(unsigned __int8 *)(v2 + 24) | (*(unsigned __int8 *)(v2 + 26) << 16), *(void ***)(v2 + 32));
}

void closure #1 in UIKitToolbarStrategy.willReturnUpdates(_:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  void *v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[5];
  _BYTE v22[32];
  uint64_t v23;

  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v22);
  v9 = (void *)MEMORY[0x18D760234](&v23);
  outlined destroy of HostingControllerOverrides((uint64_t)v22);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)&v17);
  if (v9)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)&v17);
  }
  else
  {
    v9 = (void *)MEMORY[0x18D760234](v21);
    outlined destroy of Toolbar.UpdateContext((uint64_t)&v17);
    if (!v9)
    {
      v10 = 0;
      goto LABEL_5;
    }
  }

  v10 = 1;
LABEL_5:
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = xmmword_187C39040;
  v11 = specialized Set.contains(_:)((uint64_t)&v17, a3);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v17);
  if ((v11 & 1) != 0
    || (v17 = 0,
        v18 = 0,
        v19 = 0,
        v20 = xmmword_187C39040,
        v12 = specialized ToolbarBridge.hasEntries(in:)(&v17),
        outlined destroy of Toolbar.BarLocation((uint64_t)&v17),
        (v12 & 1) == 0))
  {
    if (*(_QWORD *)(a1 + direct field offset for ToolbarBridge.platformVended + 32))
      v14 = v10;
    else
      v14 = 1;
    if ((v14 & 1) == 0)
    {
LABEL_8:
      v13 = UIKitToolbarStrategy.makeBarItems()();
      if (v13 >> 62)
      {
        if (!_CocoaArrayWrapper.endIndex.getter())
          goto LABEL_11;
      }
      else if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_11:
        specialized ToolbarStrategy.withUpdate<A>(_:)(a5);
        return;
      }
      UIKitToolbarStrategy.createToolbarIfNeeded()();
      goto LABEL_11;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_8;
  }
  v15 = (char *)*a5;
  if (*a5)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)(a5 + 1), (uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v21[4])
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
      v16 = *(void **)&v15[direct field offset for ToolbarBridge.platformVended + 32];
      *(_QWORD *)&v15[direct field offset for ToolbarBridge.platformVended + 32] = 0;

      return;
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  uint64_t v0;

  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(_QWORD *)(v0 + 16));
}

uint64_t _sIeyB_Ieg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t UIHostingContentView.popUpButton.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x9E0);
  swift_beginAccess();
  outlined assign with take of WeakBox<UIButton>?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of WeakBox<UIButton>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<UIButton>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in AVKitCaptureButtonBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;

  closure #1 in AVKitCaptureButtonBridge.preferencesDidChange(_:)(a1, *(_QWORD *)(v1 + 16));
}

void closure #1 in AVKitCaptureButtonBridge.preferencesDidChange(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;

  v3 = *a1;
  if (*a1)
  {
    v4 = a1[1];
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = (uint64_t (**)())(a2 + direct field offset for AVKitCaptureButtonBridge.dispatch);
    v7 = *(_QWORD *)(a2 + direct field offset for AVKitCaptureButtonBridge.dispatch);
    *v6 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
    v6[1] = (uint64_t (*)())v5;
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v3, v4);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
    if (!*(_QWORD *)(a2 + direct field offset for AVKitCaptureButtonBridge.interaction))
      AVKitCaptureButtonBridge.attachInteraction()();
    swift_release();
  }
  else
  {
    AVKitCaptureButtonBridge.removeInteraction()();
  }
}

void AVKitCaptureButtonBridge.removeInteraction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = direct field offset for AVKitCaptureButtonBridge.interaction;
  v2 = *(_QWORD *)(v0 + direct field offset for AVKitCaptureButtonBridge.interaction);
  if (v2)
  {
    v3 = (void *)MEMORY[0x18D760234](v0 + direct field offset for AVKitCaptureButtonBridge.host);
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, sel_removeInteraction_, v2);

      v5 = *(void **)(v0 + v1);
      *(_QWORD *)(v0 + v1) = 0;

    }
    else
    {
      __break(1u);
    }
  }
}

id @objc PlatformViewHost.__deallocating_deinit(void *a1)
{
  id v1;

  v1 = a1;
  return FileWrapperPlatformDocument.__deallocating_deinit();
}

id FileWrapperPlatformDocument.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t PlatformViewHost.intrinsicLayoutTraits()()
{
  double v0;
  double v1;
  double v2;

  v0 = PlatformViewHost.intrinsicContentSize.getter();
  v1 = *MEMORY[0x1E0DC55F0];
  if (v0 != *MEMORY[0x1E0DC55F0])
  {
    PlatformViewHost.contentCompressionResistancePriority(for:)(0, (SEL *)&selRef_contentCompressionResistancePriorityForAxis_);
    PlatformViewHost.contentCompressionResistancePriority(for:)(0, (SEL *)&selRef_contentHuggingPriorityForAxis_);
  }
  _LayoutTraits.Dimension.init(min:ideal:max:)();
  PlatformViewHost.intrinsicContentSize.getter();
  if (v2 != v1)
  {
    PlatformViewHost.contentCompressionResistancePriority(for:)(1, (SEL *)&selRef_contentCompressionResistancePriorityForAxis_);
    PlatformViewHost.contentCompressionResistancePriority(for:)(1, (SEL *)&selRef_contentHuggingPriorityForAxis_);
  }
  _LayoutTraits.Dimension.init(min:ideal:max:)();
  return _LayoutTraits.init(width:height:)();
}

double PlatformViewHost.intrinsicContentSize.getter()
{
  _QWORD *v0;
  objc_class *ObjectType;
  _QWORD *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (((*(uint64_t (**)(void))(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58) + 128))() & 1) != 0)
  {
    v8.receiver = v0;
    v8.super_class = ObjectType;
    objc_msgSendSuper2(&v8, sel_intrinsicContentSize);
    return v3;
  }
  else
  {
    v5 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)((*v2 & *v0) + 0x58) + 72))((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x78));
    objc_msgSend(v5, sel_intrinsicContentSize);
    v4 = v6;

  }
  return v4;
}

uint64_t outlined init with take of PlatformItemList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of PlatformItemList.Item.SelectionBehavior?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2 != 1)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a6);
  }
  return result;
}

uint64_t partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:)()
{
  return partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:)((uint64_t (*)(uint64_t))closure #1 in _TaskModifier.InnerModifier.body(content:));
}

uint64_t closure #1 in _TaskModifier.InnerModifier.body(content:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)a1 + *(int *)(type metadata accessor for _TaskModifier.InnerModifier(0) + 20);
  v17 = *(_OWORD *)v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<Task<(), Never>?>, (uint64_t (*)(uint64_t))type metadata accessor for Task<(), Never>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v7 = v18;
  result = swift_release();
  if (!v7)
  {
    v10 = *a1;
    v9 = a1[1];
    v11 = (char *)a1 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
    v12 = type metadata accessor for TaskPriority();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v5, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v5, 0, 1, v12);
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = 0;
    v14[3] = 0;
    v14[4] = v10;
    v14[5] = v9;
    swift_retain();
    v15 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in _TaskModifier.InnerModifier.body(content:), (uint64_t)v14);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for TaskPriority?);
    v16 = *((_QWORD *)v6 + 1);
    *(_QWORD *)&v17 = v15;
    if (v16)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t ShareConfigurationBridge.shareConfigurationDidChange(_:)(uint64_t a1)
{
  uint64_t result;
  char *v3;
  uint64_t v4;
  _OWORD v5[4];
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  outlined init with take of AnyShareConfiguration?(a1, (uint64_t)&v4);
  outlined init with take of AnyShareConfiguration?(a1, (uint64_t)v5);
  if ((_QWORD)v6 == 1)
  {
    result = MEMORY[0x18D760234](v3 + 16);
    if (result)
      _UIHostingView.viewController.getter();
  }
  else
  {
    v13 = v6;
    v14 = v7;
    v15 = v8;
    v9 = v5[0];
    v10 = v5[1];
    v11 = v5[2];
    v12 = v5[3];
    result = MEMORY[0x18D760234](v3 + 16);
    if (result)
      _UIHostingView.viewController.getter();
  }
  return result;
}

uint64_t outlined init with take of AnyShareConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyShareConfiguration?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyShareConfiguration?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyShareConfiguration?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyShareConfiguration?);
  }
}

void type metadata accessor for TaskPriority?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t partial apply for closure #2 in _TaskModifier.InnerModifier.body(content:)()
{
  return partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:)(closure #2 in _TaskModifier.InnerModifier.body(content:));
}

uint64_t closure #2 in _TaskModifier.InnerModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for _TaskModifier.InnerModifier(0) + 20) + 8);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<Task<(), Never>?>, (uint64_t (*)(uint64_t))type metadata accessor for Task<(), Never>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  result = State.wrappedValue.getter();
  if (v3)
  {
    MEMORY[0x18D75D204](v3, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    if (v1)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t ToolbarStrategy.makeBarContext(storage:preferences:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t result;
  char v13;
  char v14;
  char v15;
  __int16 v16;
  char v17;
  _QWORD v18[5];
  BOOL v19;
  _BYTE v20[6];
  _BYTE v21[16];
  _BYTE v22[8];
  uint64_t v23;

  v9 = *a2;
  v10 = MEMORY[0x1E0DEA968];
  v11 = MEMORY[0x1E0DEB940];
  outlined init with take of Binding<SearchFieldState>(a1, (uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v21, (uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for String?, v10, (uint64_t)v11, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v19 = v23 != 0;
  *(_DWORD *)v20 = 0x1000000;
  *(_WORD *)&v20[4] = 1;
  v18[2] = &v19;
  v18[3] = v9;
  v18[4] = a1;
  result = ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *, _BYTE *))partial apply for closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:), (uint64_t)v18, a3, MEMORY[0x1E0DEE9C0] + 8, a4);
  v13 = v20[0];
  v14 = v20[1];
  v15 = v20[2];
  v16 = *(_WORD *)&v20[3];
  v17 = v20[5];
  *(_BYTE *)a5 = v19;
  *(_BYTE *)(a5 + 1) = v13;
  *(_BYTE *)(a5 + 2) = v14;
  *(_BYTE *)(a5 + 3) = v15;
  *(_WORD *)(a5 + 4) = v16;
  *(_BYTE *)(a5 + 6) = v17;
  return result;
}

uint64_t ToolbarStrategy.withUpdate<A>(_:)(void (*a1)(void *, _BYTE *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *v9;
  uint64_t result;
  _QWORD v11[12];
  _BYTE v12[96];

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  if (v8)
  {
    v9 = (void *)v8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 40))(v11, a3, a5);
    if (v11[11])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v11, (uint64_t)v12);
      a1(v9, v12);

      return outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
    }

    outlined destroy of UIBackgroundConfiguration?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id protocol witness for ToolbarStrategy.updater.getter in conformance UIKitToolbarStrategy()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t protocol witness for ToolbarStrategy.updateContext.getter in conformance UIKitToolbarStrategy@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SwiftUIAnySortComparator?(v1 + 8, a1, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
}

uint64_t partial apply for closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  char v9;
  id v10;
  id v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  _QWORD v41[6];
  _BYTE v42[64];

  *(_WORD *)(a3 + 4) = *(_WORD *)(a2 + 80);
  v7 = MEMORY[0x18D760234](a2 + 64);
  if (v7)
  {
    v8 = (void *)v7;
    if (UIViewController.hasOrWillHaveBackItem(overrides:)(a2))
    {
      v9 = 1;
LABEL_9:

      goto LABEL_10;
    }
    v10 = objc_msgSend(v8, sel_navigationItem);
    v11 = objc_msgSend(v10, sel_leftBarButtonItems);

    if (!v11)
    {
      v9 = 0;
      goto LABEL_9;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v13 = specialized Sequence.first(where:)(v12);
    swift_bridgeObjectRelease();

    if (v13)
    {
      v9 = 1;
      v8 = v13;
      goto LABEL_9;
    }
  }
  v9 = 0;
LABEL_10:
  *(_BYTE *)(a3 + 2) = v9;
  v41[0] = a4;
  PreferenceList.subscript.getter();
  v32 = a3;
  *(_BYTE *)(a3 + 1) = v42[0];
  v14 = swift_bridgeObjectRetain();
  v15 = specialized Sequence.compactMap<A>(_:)(v14);
  swift_bridgeObjectRelease();
  v16 = specialized Set.init<A>(_:)((uint64_t)v15);
  swift_bridgeObjectRelease();
  v17 = v16 + 56;
  v18 = 1 << *(_BYTE *)(v16 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v16 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  while (1)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_33;
    }
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v26 >= v21)
      goto LABEL_38;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v21)
        goto LABEL_38;
      v27 = *(_QWORD *)(v17 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v21)
          goto LABEL_38;
        v27 = *(_QWORD *)(v17 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v21)
            goto LABEL_38;
          v27 = *(_QWORD *)(v17 + 8 * v23);
          if (!v27)
          {
            v23 = v26 + 4;
            if (v26 + 4 >= v21)
              goto LABEL_38;
            v27 = *(_QWORD *)(v17 + 8 * v23);
            if (!v27)
              break;
          }
        }
      }
    }
LABEL_32:
    v20 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_33:
    outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v16 + 48) + 48 * v25, (uint64_t)v42);
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v42, (uint64_t)v41);
    v37 = 6;
    v38 = 0u;
    v39 = 0u;
    v40 = 2;
    v29 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v41, (uint64_t)&v37);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v41, (uint64_t)&v37);
    if ((v29 & 1) != 0)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v41);
LABEL_37:
      swift_release();
      result = swift_bridgeObjectRelease();
      v31 = 1;
LABEL_39:
      *(_BYTE *)(v32 + 3) = v31;
      return result;
    }
    v33 = 22;
    v34 = 0u;
    v35 = 0u;
    v36 = 2;
    v30 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v37, (uint64_t)&v33);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v33);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
    result = outlined destroy of ToolbarItemPlacement.Role((uint64_t)v41);
    if ((v30 & 1) != 0)
      goto LABEL_37;
  }
  v28 = v26 + 5;
  if (v28 >= v21)
  {
LABEL_38:
    swift_release();
    result = swift_bridgeObjectRelease();
    v31 = 0;
    goto LABEL_39;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_32;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v21)
      goto LABEL_38;
    v27 = *(_QWORD *)(v17 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_32;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role;
  if (!lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemPlacement.Role, &type metadata for ToolbarItemPlacement.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role;
  if (!lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemPlacement.Role, &type metadata for ToolbarItemPlacement.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  }
  return result;
}

uint64_t @objc ToolbarBridge.__ivar_destroyer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  outlined destroy of UIBackgroundConfiguration?(a1 + direct field offset for ToolbarBridge.updateContext, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
  v2 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended);
  v3 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
  v4 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 32);
  v5 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  outlined consume of ToolbarStorage?(*(_QWORD *)(a1 + direct field offset for ToolbarBridge.toolbarStorage), *(_QWORD *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 8), *(_QWORD *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 16), *(_QWORD *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 24), *(_QWORD *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 32), *(_QWORD *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 40));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + direct field offset for ToolbarBridge.searchItem, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + direct field offset for ToolbarBridge.navigationProperties, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of ToolbarStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(a3, a4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined assign with copy of ToolbarStorage.NavigationProperties?(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t protocol witness for ToolbarStrategy.updateProperties() in conformance UIKitToolbarStrategy()
{
  int v0;
  unsigned int v1;

  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
    return 0;
  if ((UIKitToolbarStrategy.updateBarTitle()((void (*)(_QWORD *__return_ptr))closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()) & 1) != 0)
    v0 = 2;
  else
    v0 = 0;
  v1 = v0 & 0xFFFFFFFE | UIKitToolbarStrategy.updateBarTitle()((void (*)(_QWORD *__return_ptr))closure #1 in UIKitToolbarStrategy.updateHeaderProperties()) & 1;
  if ((UIKitToolbarStrategy.updateBarTitle()((void (*)(_QWORD *__return_ptr))closure #1 in UIKitToolbarStrategy.updateRenameDelegate()) & 1) != 0)
    return v1 | 4;
  else
    return v1;
}

Swift::Bool __swiftcall UIKitToolbarStrategy.updateSearch()()
{
  void **v0;
  void *v1;
  id v2;
  Swift::Bool result;
  _BYTE v4[88];
  uint64_t v5;
  _BYTE v6[96];

  v1 = *v0;
  if (*v0)
  {
    outlined init with copy of TableRowList?((uint64_t)(v0 + 1), (uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v5)
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v4, (uint64_t)v6);
      v2 = v1;
      closure #1 in UIKitToolbarStrategy.updateSearch()((uint64_t)v2, (uint64_t)v6, v4);

      outlined destroy of Toolbar.UpdateContext((uint64_t)v6);
      return v4[0];
    }
    outlined destroy of TableRowList?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Toolbar.UpdateContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ToolbarBridge.updateStorage(newStorage:barContext:updateContext:strategy:)(__int128 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t *v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  _QWORD *v40;
  uint64_t v41;
  unsigned __int8 v42[40];
  _QWORD v43[3];
  _BYTE v44[40];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[5];

  v5 = v4;
  v7 = *v5;
  v8 = *MEMORY[0x1E0DEEDD8];
  v37 = a2[1];
  v38 = *a2;
  v35 = a2[3];
  v36 = a2[2];
  v33 = a2[5];
  v34 = a2[4];
  v32 = a2[6];
  lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation();
  v9 = Dictionary.init(dictionaryLiteral:)();
  v49 = v9;
  v10 = a1[1];
  v45 = *a1;
  v46 = v10;
  v11 = a1[3];
  v47 = a1[2];
  v48 = v11;
  outlined retain of ToolbarStorage((uint64_t)a1);
  ToolbarStorage.removeRequestedDefaultItems()();
  *(_QWORD *)&v50[0] = specialized static Toolbar.BarLocation.allCases.getter();
  v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  v13 = *(_QWORD *)(*(_QWORD *)&v50[0] + 16);
  if (v13)
  {
    v31 = v8 & v7;
    v40 = v5;
    v14 = (_QWORD *)((char *)v5 + direct field offset for ToolbarBridge.allowedLocations);
    v15 = *(_QWORD *)&v50[0] + 32;
    swift_beginAccess();
    v30 = v14;
    do
    {
      outlined init with copy of Toolbar.BarLocation(v15, (uint64_t)v44);
      v16 = *v14;
      swift_bridgeObjectRetain();
      v17 = specialized Set.contains(_:)((uint64_t)v44, v16);
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
      {
        v50[0] = v45;
        v50[1] = v46;
        v50[2] = v47;
        v50[3] = v48;
        v42[0] = v38;
        v42[1] = v37;
        v42[2] = v36;
        v42[3] = v35;
        v42[4] = v34;
        v42[5] = v33;
        v42[6] = v32;
        outlined retain of ToolbarStorage((uint64_t)v50);
        v18 = *(_QWORD *)(v31 + 80);
        v19 = *(_QWORD *)(v31 + 88);
        v41 = v18;
        v20 = specialized ToolbarBridge.findAndSortMatchingItems(in:newStorage:context:)((uint64_t)v44, (uint64_t)v50, v42);
        outlined release of ToolbarStorage((uint64_t)v50);
        v21 = (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v19 + 88))(v44, v20, v18, v19);
        v22 = ToolbarBridge.makeStorage(in:from:strategy:)((uint64_t)v44, v21, a4);
        v24 = v23;
        v26 = v25;
        swift_bridgeObjectRelease();
        v43[0] = v22;
        v43[1] = v24;
        v43[2] = v26;
        (*(void (**)(_QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t))(v19 + 120))(v43, v44, v20, v41, v19);
        swift_bridgeObjectRelease();
        outlined init with copy of Toolbar.BarLocation((uint64_t)v44, (uint64_t)v42);
        v14 = v30;
        type metadata accessor for [Toolbar.BarLocation : Toolbar.LocationStorage]();
        Dictionary.subscript.setter();
      }
      outlined destroy of Toolbar.BarLocation((uint64_t)v44);
      v15 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    v9 = v49;
    v5 = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v27 = v46;
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v27, *((uint64_t *)&v27 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = (_QWORD *)((char *)v5 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  *v28 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t outlined retain of ToolbarStorage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for ToolbarStrategy.makeEntries(in:from:) in conformance UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  return specialized ToolbarStrategy.makeEntries(in:from:)(a1, a2);
}

uint64_t specialized ToolbarStrategy.makeEntries(in:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ToolbarStorage.Entry(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v25 = (uint64_t)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v23 - v13;
  v15 = MEMORY[0x1E0DEE9D8];
  v26 = MEMORY[0x1E0DEE9D8];
  v16 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v16)
  {
    v17 = *(unsigned __int8 *)(v8 + 80);
    v18 = *(_QWORD *)(v8 + 72);
    v23[1] = a2;
    v24 = (v17 + 32) & ~v17;
    v19 = a2 + v24;
    v23[2] = v3;
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v19, (uint64_t)v14, type metadata accessor for ToolbarStorage.Entry);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v6, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for ToolbarStorage.Entry);
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for ToolbarStorage.Entry.Kind);
        outlined init with take of TableCellFormula((uint64_t)v14, v25, type metadata accessor for ToolbarStorage.Entry);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v26;
        v21 = *(_QWORD *)(v26 + 16);
        v20 = *(_QWORD *)(v26 + 24);
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          v15 = v26;
        }
        *(_QWORD *)(v15 + 16) = v21 + 1;
        outlined init with take of TableCellFormula(v25, v15 + v24 + v21 * v18, type metadata accessor for ToolbarStorage.Entry);
      }
      v19 += v18;
      --v16;
    }
    while (v16);
    v15 = v26;
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t outlined release of ToolbarStorage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ToolbarStorage.Item(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.Item);
}

uint64_t type metadata accessor for ToolbarStorage.Entry(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.Entry);
}

uint64_t type metadata accessor for ToolbarStorage.Entry.Kind(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.Entry.Kind);
}

uint64_t type metadata accessor for ToolbarStorage.GroupItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.GroupItem);
}

void type metadata accessor for (ToolbarStorage.Entry, Int)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ToolbarStorage.Entry, Int))
  {
    type metadata accessor for ToolbarStorage.Entry(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarStorage.Entry, Int));
  }
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 16);
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 + v3 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = a2();
  v4 = result;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_10:
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_5:
  if ((*(_QWORD *)(v4 + 24) >> 1) - *(_QWORD *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v2 = v4;
    return result;
  }
  v8 = *(_QWORD *)(v4 + 16);
  v9 = __OFADD__(v8, v3);
  v10 = v8 + v3;
  if (!v9)
  {
    *(_QWORD *)(v4 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 16);
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 + v3 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = a2();
  v4 = result;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_10:
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_5:
  if ((*(_QWORD *)(v4 + 24) >> 1) - *(_QWORD *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v2 = v4;
    return result;
  }
  v8 = *(_QWORD *)(v4 + 16);
  v9 = __OFADD__(v8, v3);
  v10 = v8 + v3;
  if (!v9)
  {
    *(_QWORD *)(v4 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 16);
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 + v3 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = a2();
  v4 = result;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_10:
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_5:
  if ((*(_QWORD *)(v4 + 24) >> 1) - *(_QWORD *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v2 = v4;
    return result;
  }
  v8 = *(_QWORD *)(v4 + 16);
  v9 = __OFADD__(v8, v3);
  v10 = v8 + v3;
  if (!v9)
  {
    *(_QWORD *)(v4 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ToolbarStorage.removeRequestedDefaultItems()()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v2 + 56);
  v3 = v2 + 56;
  v4 = v5;
  v6 = 1 << *(_BYTE *)(v3 - 24);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v4;
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (!v8)
    {
      v10 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
        __break(1u);
        goto LABEL_22;
      }
      if (v10 >= v9)
        return;
      v8 = *(_QWORD *)(v3 + 8 * v10);
      ++v1;
      if (!v8)
      {
        v1 = v10 + 1;
        if (v10 + 1 >= v9)
          return;
        v8 = *(_QWORD *)(v3 + 8 * v1);
        if (!v8)
        {
          v1 = v10 + 2;
          if (v10 + 2 >= v9)
            return;
          v8 = *(_QWORD *)(v3 + 8 * v1);
          if (!v8)
            break;
        }
      }
    }
LABEL_5:
    v8 &= v8 - 1;
  }
  v11 = v10 + 3;
  if (v11 >= v9)
    return;
  v8 = *(_QWORD *)(v3 + 8 * v11);
  if (v8)
  {
    v1 = v11;
    goto LABEL_5;
  }
  while (1)
  {
    v1 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v1 >= v9)
      return;
    v8 = *(_QWORD *)(v3 + 8 * v1);
    ++v11;
    if (v8)
      goto LABEL_5;
  }
LABEL_22:
  __break(1u);
}

void partial apply for closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()(a1, (void (*)(_QWORD *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.barButtonGroups(in:), (SEL *)&selRef_setLeadingItemGroups_, a2, (__n128)xmmword_187C304D0);
}

void closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()(uint64_t a1@<X0>, void (*a2)(_QWORD *__return_ptr)@<X3>, SEL *a3@<X4>, _BYTE *a4@<X8>, __n128 a5@<Q0>)
{
  void *v8;
  id v9;
  Class isa;
  _QWORD v11[3];
  __n128 v12;

  memset(v11, 0, sizeof(v11));
  v12 = a5;
  specialized ToolbarStrategy.withUpdate<A>(_:)(a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)v11);
  v8 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
  v9 = v8;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, *a3, isa);

  *a4 = 1;
}

void partial apply for closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(a1, *(_QWORD *)(v2 + 16), (uint64_t)partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:), a2);
}

uint64_t specialized ToolbarBridge.entryCount(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v9);
  v2 = (uint64_t *)(v1 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 24 * v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9D8];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    specialized Dictionary.init(dictionaryLiteral:)(v6);
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Toolbar.BarLocation((uint64_t)v9);
  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t *, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned __int8 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t *, uint64_t);
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned __int8 v72;

  v63 = a3;
  v64 = a4;
  type metadata accessor for ToolbarStorage.Entry?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v65 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolbarStorage.Entry(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v67 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v71);
  v13 = (uint64_t *)(a2 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  v14 = *v13;
  if (*(_QWORD *)(*v13 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71), (v16 & 1) != 0))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 24 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66 = v20;
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = MEMORY[0x1E0DEE9D8];
    v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v66 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)&v71);
  v21 = *(_QWORD *)(v18 + 16);
  if (!v21)
  {
LABEL_36:
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v71);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v56 = v66;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v69 = *v13;
    *v13 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v19, v56, (uint64_t)&v71, isUniquelyReferenced_nonNull_native);
    *v13 = v69;
    swift_bridgeObjectRelease();
    outlined destroy of Toolbar.BarLocation((uint64_t)&v71);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v60 = a1;
  v61 = v13;
  swift_bridgeObjectRetain();
  v59 = v18;
  v22 = (uint64_t *)(v18 + 40);
  v23 = type metadata accessor for ToolbarStorage.Entry?;
  v24 = (uint64_t)v65;
  v62 = v19;
  while (!*(_QWORD *)(v19 + 16))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v24, 1, 1, v9);
LABEL_8:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, (uint64_t (*)(_QWORD))v23);
LABEL_9:
    v22 += 2;
    if (!--v21)
    {
      v18 = v59;
      swift_bridgeObjectRelease();
      a1 = v60;
      v13 = v61;
      goto LABEL_36;
    }
  }
  v25 = *(v22 - 1);
  v26 = *v22;
  swift_bridgeObjectRetain_n();
  v68 = v25;
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
  if ((v28 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v10 + 72) * v27, v24, type metadata accessor for ToolbarStorage.Entry);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v24, v29, 1, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v24, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v30 = v23;
  v31 = v10;
  v32 = v9;
  outlined init with take of TableCellFormula(v24, v67, type metadata accessor for ToolbarStorage.Entry);
  swift_bridgeObjectRetain();
  v33 = v66;
  v34 = swift_isUniquelyReferenced_nonNull_native();
  v70 = (_QWORD *)v33;
  swift_bridgeObjectRetain();
  v36 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v26);
  v37 = *(_QWORD *)(v33 + 16);
  v38 = (v35 & 1) == 0;
  v39 = v37 + v38;
  if (!__OFADD__(v37, v38))
  {
    v40 = v35;
    if (*(_QWORD *)(v33 + 24) >= v39)
    {
      if ((v34 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, v34);
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v26);
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_39;
      v36 = v41;
    }
    v9 = v32;
    v10 = v31;
    if ((v40 & 1) != 0)
    {
      v43 = v70[7] + 16 * v36;
      v44 = *(_QWORD *)v43;
      v45 = *(_BYTE *)(v43 + 8);
    }
    else
    {
      v44 = 0;
      v45 = -1;
    }
    v23 = v30;
    v71 = v44;
    v72 = v45;
    v64(v67, &v71, v63);
    v46 = v72;
    if (v72 == 255)
    {
      if ((v40 & 1) != 0)
      {
        v50 = (uint64_t)v70;
        swift_arrayDestroy();
        v66 = v50;
        specialized _NativeDictionary._delete(at:)(v36, v50);
LABEL_30:
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v66 = (unint64_t)v70;
      }
    }
    else
    {
      v47 = v71;
      v48 = v70;
      v66 = (unint64_t)v70;
      if ((v40 & 1) != 0)
      {
        v49 = v70[7] + 16 * v36;
        *(_QWORD *)v49 = v71;
        *(_BYTE *)(v49 + 8) = v46;
        goto LABEL_30;
      }
      v70[(v36 >> 6) + 8] |= 1 << v36;
      v51 = (_QWORD *)(v48[6] + 16 * v36);
      *v51 = v68;
      v51[1] = v26;
      v52 = v48[7] + 16 * v36;
      *(_QWORD *)v52 = v47;
      *(_BYTE *)(v52 + 8) = v46;
      v53 = v48[2];
      v54 = __OFADD__(v53, 1);
      v55 = v53 + 1;
      if (v54)
        goto LABEL_38;
      v48[2] = v55;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, type metadata accessor for ToolbarStorage.Entry);
    v19 = v62;
    v24 = (uint64_t)v65;
    goto LABEL_9;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned __int8 v64;

  v56 = a2;
  v57 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v52 - v7;
  v9 = type metadata accessor for ToolbarStorage.Entry(0);
  v10 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  v59 = v10;
  MEMORY[0x1E0C80A78](v9, v11);
  v60 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v63);
  v13 = (uint64_t *)(v3 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  v14 = *v13;
  if (*(_QWORD *)(*v13 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v63), (v16 & 1) != 0))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 24 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = (_QWORD *)v17[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = MEMORY[0x1E0DEE9D8];
    v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v20 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(v18);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)&v63);
  v21 = *(_QWORD *)(v18 + 16);
  if (!v21)
  {
LABEL_37:
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v63);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v61 = *v13;
    *v13 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v19, (uint64_t)v20, (uint64_t)&v63, isUniquelyReferenced_nonNull_native);
    *v13 = v61;
    swift_bridgeObjectRelease();
    outlined destroy of Toolbar.BarLocation((uint64_t)&v63);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v53 = v13;
  v54 = a1;
  swift_bridgeObjectRetain();
  v52 = v18;
  v22 = (uint64_t *)(v18 + 40);
  v23 = v58;
  v24 = v59;
  v55 = v19;
  while (!*(_QWORD *)(v19 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v8, 1, 1, v23);
LABEL_8:
    outlined destroy of Binding<AttributedString>((uint64_t)v8, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_9:
    v22 += 2;
    if (!--v21)
    {
      v18 = v52;
      swift_bridgeObjectRelease();
      v13 = v53;
      a1 = v54;
      goto LABEL_37;
    }
  }
  v26 = *(v22 - 1);
  v25 = *v22;
  swift_bridgeObjectRetain_n();
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
  if ((v28 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v24 + 72) * v27, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v8, v29, 1, v23);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v8, 1, v23) == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with take of TableCellFormula((uint64_t)v8, v60, type metadata accessor for ToolbarStorage.Entry);
  swift_bridgeObjectRetain();
  v30 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v20;
  swift_bridgeObjectRetain();
  v32 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
  v33 = v20[2];
  v34 = (v31 & 1) == 0;
  v35 = v33 + v34;
  if (!__OFADD__(v33, v34))
  {
    v36 = v31;
    if (v20[3] >= v35)
    {
      if ((v30 & 1) != 0)
      {
        v24 = v59;
        if ((v31 & 1) == 0)
          goto LABEL_25;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v24 = v59;
        if ((v36 & 1) == 0)
          goto LABEL_25;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, v30);
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_40;
      v32 = v37;
      v24 = v59;
      if ((v36 & 1) == 0)
      {
LABEL_25:
        v40 = 0;
        v41 = -1;
LABEL_26:
        v63 = v40;
        v64 = v41;
        v56(v60, &v63);
        v42 = v64;
        if (v64 == 255)
        {
          if ((v36 & 1) != 0)
          {
            v20 = v62;
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v32, (uint64_t)v20);
LABEL_31:
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v20 = v62;
          }
        }
        else
        {
          v43 = v63;
          v20 = v62;
          if ((v36 & 1) != 0)
          {
            v44 = v62[7] + 16 * v32;
            *(_QWORD *)v44 = v63;
            *(_BYTE *)(v44 + 8) = v42;
            goto LABEL_31;
          }
          v62[(v32 >> 6) + 8] |= 1 << v32;
          v45 = (uint64_t *)(v20[6] + 16 * v32);
          *v45 = v26;
          v45[1] = v25;
          v46 = v20[7] + 16 * v32;
          *(_QWORD *)v46 = v43;
          *(_BYTE *)(v46 + 8) = v42;
          v47 = v20[2];
          v48 = __OFADD__(v47, 1);
          v49 = v47 + 1;
          if (v48)
            goto LABEL_39;
          v20[2] = v49;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v60, type metadata accessor for ToolbarStorage.Entry);
        v19 = v55;
        v23 = v58;
        goto LABEL_9;
      }
    }
    v39 = v62[7] + 16 * v32;
    v40 = *(_QWORD *)v39;
    v41 = *(_BYTE *)(v39 + 8);
    goto LABEL_26;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  _BYTE v25[40];

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    v20 = *v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (uint64_t *)(v20[7] + 24 * v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v6;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of Toolbar.BarLocation(a4, (uint64_t)v25);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v25, a1, a2, a3, v20);
}

{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_bridgeObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 24 * v14;
        result = swift_release();
        *(_QWORD *)v21 = a1;
        *(_QWORD *)(v21 + 8) = a2;
        *(_WORD *)(v21 + 20) = WORD2(a3);
        *(_DWORD *)(v21 + 16) = a3;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3 & 0xFFFFFFFFFFFFLL, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3 & 0xFFFFFFFFFFFFLL, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized ToolbarStrategy.withUpdate<A>(_:)(void (*a1)(_QWORD *__return_ptr))
{
  void **v1;
  void *v2;
  id v4;
  uint64_t result;
  _QWORD v6[12];
  _BYTE v7[96];

  v2 = *v1;
  if (*v1)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)(v1 + 1), (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v6[11])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v6, (uint64_t)v7);
      v4 = v2;
      a1(v6);

      outlined destroy of Toolbar.UpdateContext((uint64_t)v7);
      return LOBYTE(v6[0]);
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v1;
  void *v2;
  id v4;
  uint64_t result;
  _QWORD v6[12];
  _BYTE v7[96];

  v2 = *v1;
  if (*v1)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)(v1 + 1), (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v6[11])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v6, (uint64_t)v7);
      v4 = v2;
      a1(v6);

      outlined destroy of Toolbar.UpdateContext((uint64_t)v7);
      return v6[0];
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UIKitToolbarStrategy.updateBarTitle()(void (*a1)(_QWORD *__return_ptr))
{
  void **v1;
  void *v2;
  id v4;
  uint64_t result;
  _QWORD v6[12];
  _BYTE v7[96];

  v2 = *v1;
  if (*v1)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)(v1 + 1), (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v6[11])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v6, (uint64_t)v7);
      v4 = v2;
      a1(v6);

      outlined destroy of Toolbar.UpdateContext((uint64_t)v7);
      return LOBYTE(v6[0]);
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  initializeWithTake for Toolbar.UpdateContext(a2, a1);
  return a2;
}

uint64_t initializeWithTake for Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 8) == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

void partial apply for closure #1 in UIKitToolbarStrategy.updateNavigationBarTrailing()(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()(a1, (void (*)(_QWORD *__return_ptr))closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)partial apply, (SEL *)&selRef_setTrailingItemGroups_, a2, (__n128)xmmword_187C39070);
}

void closure #1 in UIKitToolbarStrategy.updateNavigationAccessory()(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  BOOL v11;
  _QWORD v12[3];
  __int128 v13;
  void *v14;

  v14 = 0;
  memset(v12, 0, sizeof(v12));
  v13 = xmmword_187C0CDF0;
  specialized ToolbarBridge.adjustEntries(in:_:)((uint64_t)v12, a1, (uint64_t)&v14);
  outlined destroy of Toolbar.BarLocation((uint64_t)v12);
  v4 = a1 + direct field offset for ToolbarBridge.platformVended;
  v5 = objc_msgSend(*(id *)(a1 + direct field offset for ToolbarBridge.platformVended + 8), sel__largeTitleAccessoryView);
  v6 = v14;
  objc_msgSend(*(id *)(v4 + 8), sel__setLargeTitleAccessoryView_, v14);
  v7 = *(void **)(v4 + 8);
  v8 = v5;
  v9 = objc_msgSend(v7, sel__largeTitleAccessoryView);
  v10 = v9;
  if (!v8)
  {
    if (!v9)
    {
      v11 = 0;
      goto LABEL_9;
    }

    goto LABEL_7;
  }
  if (!v9)
  {

LABEL_7:
    v11 = 1;
    goto LABEL_9;
  }

  v11 = v8 != v10;
LABEL_9:

  *a2 = v11;
}

uint64_t closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id (*v16)(uint64_t);
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t result;
  char v27;
  uint64_t v28;
  id (*v29)(uint64_t);
  char *v30;
  uint64_t v31;
  _QWORD aBlock[7];

  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - v11;
  v13 = a1 + direct field offset for ToolbarBridge.navigationProperties;
  swift_beginAccess();
  outlined init with copy of SearchFieldConfiguration.Data?(v13, (uint64_t)v12, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v4);
  v14 = a1 + direct field offset for ToolbarBridge.platformVended;
  v15 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                              + direct field offset for ToolbarBridge.platformVended
                                                              + 8), sel_titleMenuProvider));
  if (v15)
  {
    *(_QWORD *)(swift_allocObject() + 16) = v15;
    v16 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?);
  }
  else
  {
    v16 = 0;
  }
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v12, (uint64_t)v8, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v17 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v8, 1, v17) == 1)
  {
    outlined destroy of Binding<AttributedString>((uint64_t)v8, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_7:
    objc_msgSend(*(id *)(v14 + 8), sel_setTitleMenuProvider_, 0);
    goto LABEL_12;
  }
  v18 = v8[16];
  v31 = *((_QWORD *)v8 + 1);
  outlined copy of ToolbarStorage.NavigationProperties.Actions?(v31, v18);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for ToolbarStorage.NavigationProperties);
  if (v18 == 254)
    goto LABEL_7;
  v29 = v16;
  v30 = a2;
  v19 = a1 + direct field offset for ToolbarBridge.lastEnvironment;
  swift_beginAccess();
  if (*(_QWORD *)(v19 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v20 = aBlock[6];
  swift_endAccess();
  v21 = *(void **)(v14 + 8);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v31;
  *(_BYTE *)(v22 + 24) = v18;
  *(_QWORD *)(v22 + 32) = v20;
  aBlock[4] = partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider();
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  aBlock[3] = &block_descriptor_15_0;
  v23 = _Block_copy(aBlock);
  v24 = v21;
  swift_release();
  objc_msgSend(v24, sel_setTitleMenuProvider_, v23);
  _Block_release(v23);

  v16 = v29;
  a2 = v30;
LABEL_12:
  v25 = objc_msgSend(*(id *)(v14 + 8), sel_titleMenuProvider);
  result = outlined destroy of Binding<AttributedString>((uint64_t)v12, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v25)
  {
    _Block_release(v25);
  }
  else if (!v15)
  {
    v27 = 0;
    goto LABEL_16;
  }
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v16);
  v27 = 1;
LABEL_16:
  *a2 = v27;
  return result;
}

uint64_t closure #1 in UIKitToolbarStrategy.updateHeaderProperties()@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, uint64_t, uint64_t, id);
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  int EnumCaseMultiPayload;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE *v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  id v71;
  NSURL *v72;
  void *v73;
  void *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  int v77;
  NSURL *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  id v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t *boxed_opaque_existential_1;
  double (*v87)@<D0>(uint64_t@<X8>);
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t *v93;
  uint64_t (*v94)(uint64_t);
  uint64_t (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  id *v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t);
  uint64_t v107;
  void *v108;
  uint64_t (*v109)(uint64_t);
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  id v119;
  uint64_t v120;
  void *v121;
  id v122;
  id v123;
  const void *v124;
  uint64_t v125;
  char v126;
  void *v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  id *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void (**v140)(char *, uint64_t, uint64_t, id);
  id v141;
  char *v142;
  _BYTE *v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t (*v155)(uint64_t);
  uint64_t (*v156)(uint64_t);
  __int128 aBlock;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;

  v143 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v132 = (id *)((char *)&v129 - v6);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], v3);
  MEMORY[0x1E0C80A78](v7, v8);
  v133 = (char *)&v129 - v9;
  v10 = type metadata accessor for URL();
  v135 = *(_QWORD *)(v10 - 8);
  v136 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v134 = (char *)&v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v138 = (char *)&v129 - v15;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for TitleDocumentContent?, (uint64_t (*)(uint64_t))type metadata accessor for TitleDocumentContent, v3);
  MEMORY[0x1E0C80A78](v16, v17);
  v142 = (char *)&v129 - v18;
  v19 = (_QWORD *)type metadata accessor for TitleDocumentContent();
  v140 = (void (**)(char *, uint64_t, uint64_t, id))*(v19 - 1);
  v141 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v137 = (char *)&v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v139 = (uint64_t)&v129 - v24;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v3);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v129 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (uint64_t *)((char *)&v129 - v31);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (void (**)(char *, uint64_t, uint64_t, id))((char *)&v129 - v35);
  v37 = a1 + direct field offset for ToolbarBridge.navigationProperties;
  swift_beginAccess();
  outlined init with copy of SearchFieldConfiguration.Data?(v37, (uint64_t)v36, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v3);
  v144 = a1;
  v38 = (uint64_t *)(a1 + direct field offset for ToolbarBridge.lastEnvironment);
  swift_beginAccess();
  v39 = *v38;
  v40 = v38[1];
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v36, (uint64_t)v32, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v3);
  v41 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  v42 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48);
  if (v42(v32, 1, v41) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Binding<AttributedString>((uint64_t)v32, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_9:
    v45 = (uint64_t)v142;
    v140[7](v142, 1, 1, v141);
    goto LABEL_10;
  }
  v131 = v28;
  v43 = *v32;
  swift_retain();
  swift_retain();
  swift_retain();
  v44 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, type metadata accessor for ToolbarStorage.NavigationProperties);
  if (!v43)
    goto LABEL_9;
  v45 = (uint64_t)v142;
  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 80))(v44);
  swift_release();
  if (((unsigned int (*)(uint64_t, uint64_t, id))v140[6])(v45, 1, v141) != 1)
  {
    v140 = v36;
    v46 = v139;
    outlined init with take of TableCellFormula(v45, v139, (uint64_t (*)(_QWORD))type metadata accessor for TitleDocumentContent);
    v47 = v46;
    v48 = v137;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, (uint64_t)v137, (uint64_t (*)(_QWORD))type metadata accessor for TitleDocumentContent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v130 = v39;
    if (EnumCaseMultiPayload != 1)
    {
      v68 = v135;
      v67 = v136;
      v69 = *(char **)(v135 + 32);
      v70 = v138;
      ((void (*)(char *, _OWORD *, uint64_t))v69)(v138, v48, v136);
      v71 = objc_allocWithZone((Class)type metadata accessor for UIKitDocumentProperties());
      URL._bridgeToObjectiveC()(v72);
      v74 = v73;
      v137 = (char *)objc_msgSend(v71, sel_initWithURL_, v73);

      v75 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
      v76 = v133;
      v75(v133, v70, v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v76, 0, 1, v67);
      v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48))(v76, 1, v67);
      v142 = v69;
      if (v77 == 1)
      {
        v79 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v78);
        v79 = v80;
        (*(void (**)(char *, uint64_t))(v68 + 8))(v76, v67);
      }
      v81 = (_QWORD *)&unk_187BFA000;
      v82 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36C8]), sel_initWithContentsOfURL_, v79);

      v83 = v134;
      v84 = v138;
      v75(v134, v138, v67);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v85 = swift_allocObject();
      *(_OWORD *)(v85 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v85 + 56) = v67;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v85 + 32));
      ((void (*)(uint64_t *, char *, uint64_t))v142)(boxed_opaque_existential_1, v83, v67);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v84, v67);
      LODWORD(v142) = 0;
      if (!v82)
      {
        v141 = 0;
        v87 = 0;
        v88 = 0;
        v102 = v137;
        v90 = MEMORY[0x1E0C809B0];
LABEL_42:
        v125 = swift_allocObject();
        *(_QWORD *)(v125 + 16) = v85;
        *(_QWORD *)(v125 + 24) = v87;
        *(_QWORD *)(v125 + 32) = v88;
        *(_QWORD *)(v125 + 40) = 0;
        v126 = (char)v142;
        *(_BYTE *)(v125 + 48) = (_BYTE)v142;
        *(_DWORD *)(v125 + 49) = v151;
        *(_DWORD *)(v125 + 52) = *(_DWORD *)((char *)&v151 + 3);
        *(_OWORD *)(v125 + 56) = 0u;
        *(_OWORD *)(v125 + 72) = 0u;
        *(_OWORD *)(v125 + 88) = 0u;
        *(_OWORD *)(v125 + 104) = 0u;
        *(_QWORD *)(v125 + 120) = v130;
        *(_QWORD *)(v125 + 128) = v40;
        *(_QWORD *)&v159 = partial apply for closure #3 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties();
        *((_QWORD *)&v159 + 1) = v125;
        *(_QWORD *)&aBlock = v90;
        *((_QWORD *)&aBlock + 1) = v81[138];
        *(_QWORD *)&v158 = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
        *((_QWORD *)&v158 + 1) = &block_descriptor_9_2;
        v127 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        v128 = v102;
        outlined copy of AnyShareConfiguration.Storage(v85, (uint64_t)v87, v88, 0, v126);
        outlined copy of Text?(0, 0, 0, 0);
        outlined copy of Text?(0, 0, 0, 0);
        swift_release();
        objc_msgSend(v128, sel_setActivityViewControllerProvider_, v127);
        _Block_release(v127);

        objc_msgSend(*(id *)(v144 + direct field offset for ToolbarBridge.platformVended + 8), sel_setDocumentProperties_, v128);
        swift_release();
        swift_release();
        outlined consume of AnyShareConfiguration.Storage(v85, (uint64_t)v87, v88, 0, v126);
        outlined consume of Text?(0, 0, 0, 0);
        outlined consume of Text?(0, 0, 0, 0);

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v139, (uint64_t (*)(_QWORD))type metadata accessor for TitleDocumentContent);
        v65 = v143;
        v36 = v140;
        goto LABEL_11;
      }
      v87 = 0;
      v88 = 0;
      v89 = v137;
      v90 = MEMORY[0x1E0C809B0];
LABEL_41:
      v119 = v82;
      v120 = swift_allocObject();
      *(_QWORD *)(v120 + 16) = v119;
      *(_QWORD *)&v159 = partial apply for closure #2 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties();
      *((_QWORD *)&v159 + 1) = v120;
      *(_QWORD *)&aBlock = v90;
      *((_QWORD *)&aBlock + 1) = v81[138];
      *(_QWORD *)&v158 = thunk for @escaping @callee_guaranteed (@guaranteed UIDragSession) -> (@owned [UIDragItem]);
      *((_QWORD *)&v158 + 1) = &block_descriptor_34;
      v121 = _Block_copy(&aBlock);
      v122 = v89;
      v123 = v119;
      v81 = &unk_187BFA000;
      swift_release();
      objc_msgSend(v122, sel_setDragItemsProvider_, v121);
      v124 = v121;
      v102 = v122;
      _Block_release(v124);
      v141 = v123;

      goto LABEL_42;
    }
    v50 = v48[5];
    v161 = v48[4];
    v162 = v50;
    v163 = *((_QWORD *)v48 + 12);
    v51 = v48[1];
    aBlock = *v48;
    v158 = v51;
    v52 = v48[3];
    v159 = v48[2];
    v160 = v52;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&aBlock + 8, (uint64_t)&v151, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
    if (v155)
    {
      v53 = v151;
      v54 = v152;
      v56 = v153;
      v55 = v154;
      outlined copy of Text?(v151, v152, v153, v154);
      outlined destroy of AnySharePreview((uint64_t)&v151);
      if (v55)
      {
        v57 = v40;
        v58 = v56 & 1;
        v149 = v130;
        v150 = v57;
        v147 = 0;
        v148 = 0;
        v146 = 0;
        v145 = v56 & 1;
        v59 = Text.resolveString(in:with:idiom:)();
        v61 = v60;
        v62 = v54;
        v63 = v59;
        v64 = v58;
        v40 = v57;
        outlined consume of Text.Storage(v53, v62, v64);
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v151, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
    }
    v63 = 0;
    v61 = 0;
LABEL_19:
    v91 = (uint64_t)v131;
    outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v140, (uint64_t)v131, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v92 = v42((uint64_t *)v91, 1, v41);
    v129 = v40;
    if (v92 == 1)
    {
      v93 = &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?;
      v94 = type metadata accessor for ToolbarStorage.NavigationProperties;
      v95 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      v96 = v91;
    }
    else
    {
      v97 = v132;
      outlined init with copy of SearchFieldConfiguration.Data?(v91 + *(int *)(v41 + 24), (uint64_t)v132, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v91, type metadata accessor for ToolbarStorage.NavigationProperties);
      v98 = type metadata accessor for PlatformItemList.Item();
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 48))(v97, 1, v98) != 1)
      {
        v103 = *v97;
        v104 = *v97;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if (v103)
        {
          v99 = objc_msgSend(v104, sel_string);

          goto LABEL_29;
        }
LABEL_24:
        v99 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v144
                                                                    + direct field offset for ToolbarBridge.platformVended
                                                                    + 8), sel_title, v129));
        if (!v99)
        {
          v100 = 0;
          v101 = 0;
          goto LABEL_30;
        }
LABEL_29:
        v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v101 = v105;

LABEL_30:
        if (!v61)
        {
          swift_bridgeObjectRetain();
          v63 = v100;
          v61 = v101;
        }
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&aBlock + 8, (uint64_t)&v151, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
        if (v155)
        {
          v106 = v156;
          swift_retain();
          v107 = outlined destroy of AnySharePreview((uint64_t)&v151);
          v108 = (void *)v106(v107);
          swift_release();
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v151, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
          v108 = 0;
        }
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&aBlock + 8, (uint64_t)&v151, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
        v109 = v155;
        if (v155)
        {
          swift_retain();
          v110 = outlined destroy of AnySharePreview((uint64_t)&v151);
          v111 = (void *)v109(v110);
          swift_release();
          if (v61)
          {
LABEL_37:
            v112 = (void *)MEMORY[0x18D75CC88](v63, v61);
            swift_bridgeObjectRelease();
LABEL_40:
            v90 = MEMORY[0x1E0C809B0];
            v89 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitDocumentProperties()), sel_initWithTitle_iconProvider_imageProvider_, v112, v108, v111);

            v113 = (void *)aBlock;
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            v114 = swift_allocObject();
            *(_OWORD *)(v114 + 16) = xmmword_187BFF9C0;
            *(_QWORD *)(v114 + 32) = v113;
            v151 = v114;
            specialized Array._endMutation()();
            v85 = v151;
            v88 = swift_allocObject();
            v115 = v162;
            *(_OWORD *)(v88 + 80) = v161;
            *(_OWORD *)(v88 + 96) = v115;
            v116 = v163;
            v117 = v158;
            *(_OWORD *)(v88 + 16) = aBlock;
            *(_OWORD *)(v88 + 32) = v117;
            v118 = v160;
            *(_OWORD *)(v88 + 48) = v159;
            *(_OWORD *)(v88 + 64) = v118;
            *(_QWORD *)(v88 + 112) = v116;
            *(_QWORD *)(v88 + 120) = v100;
            *(_QWORD *)(v88 + 128) = v101;
            v82 = v113;
            LODWORD(v142) = 2;
            v87 = partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties();
            v40 = v129;
            v81 = &unk_187BFA000;
            goto LABEL_41;
          }
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v151, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
          v111 = 0;
          if (v61)
            goto LABEL_37;
        }
        v112 = 0;
        goto LABEL_40;
      }
      v93 = (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?;
      v94 = (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item;
      v95 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      v96 = (uint64_t)v97;
    }
    outlined destroy of Binding<AttributedString>(v96, v93, v94, v95);
    goto LABEL_24;
  }
LABEL_10:
  outlined destroy of Binding<AttributedString>(v45, (unint64_t *)&lazy cache variable for type metadata for TitleDocumentContent?, (uint64_t (*)(uint64_t))type metadata accessor for TitleDocumentContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  objc_msgSend(*(id *)(v144 + direct field offset for ToolbarBridge.platformVended + 8), sel_setDocumentProperties_, 0);
  swift_release();
  swift_release();
  v65 = v143;
LABEL_11:
  result = outlined destroy of Binding<AttributedString>((uint64_t)v36, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  *v65 = 1;
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.NavigationProperties()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void closure #1 in UIKitToolbarStrategy.updateRenameDelegate()(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - v6;
  v8 = type metadata accessor for PlatformItemList.Item();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1 + direct field offset for ToolbarBridge.platformVended;
  v14 = *(id *)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
  v15 = UINavigationItem.renameDelegate.getter();

  v16 = a1 + direct field offset for ToolbarBridge.navigationProperties;
  swift_beginAccess();
  v17 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_4:
    outlined destroy of Binding<AttributedString>((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_5:
    v18 = *(id *)(v13 + 8);
    UINavigationItem.renameDelegate.setter();

    goto LABEL_6;
  }
  outlined init with copy of SearchFieldConfiguration.Data?(v16 + *(int *)(v17 + 24), (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    goto LABEL_4;
  outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  v22 = *((_QWORD *)v12 + 41);
  if (v22 >> 2 == 0xFFFFFFFF || v22 >> 62 != 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    goto LABEL_5;
  }
  v23 = *(id *)(v13 + 8);
  ToolbarBridge<>.platformDelegate.getter();
  if (v24)
    lazy protocol witness table accessor for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate();
  UINavigationItem.renameDelegate.setter();

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
LABEL_6:
  v19 = *(id *)(v13 + 8);
  v20 = UINavigationItem.renameDelegate.getter();

  v21 = v15 == 0;
  if (!v15)
  {
    if (!v20)
    {
      v21 = 0;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  swift_unknownObjectRelease();
  if (v20)
  {
LABEL_10:
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  v21 = 1;
LABEL_11:
  *a2 = v21;
}

uint64_t closure #1 in UIKitToolbarStrategy.updateKeyboardBar()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[3];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v5 = MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8];
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v11);
  v6 = (void *)MEMORY[0x18D760234](&v13);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v11);
  memset(v11, 0, sizeof(v11));
  v12 = xmmword_187C39090;
  v7 = v6;
  specialized ToolbarBridge.adjustEntries(in:_:)((uint64_t)v11, a1, v6, 2 * (v6 != 0), &v14);

  outlined destroy of Toolbar.BarLocation((uint64_t)v11);
  v8 = a1 + direct field offset for ToolbarBridge.platformVended;
  v9 = *(_QWORD **)(a1 + direct field offset for ToolbarBridge.platformVended + 40);
  if (v9
    || (type metadata accessor for InputAccessoryGenerator(),
        v9 = (_QWORD *)swift_allocObject(),
        v9[3] = 0,
        v9[4] = 0,
        v9[2] = v5,
        (*(_QWORD *)(v8 + 40) = v9) != 0))
  {
    v9[2] = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    InputAccessoryGenerator.updateHostIfNeeded()();
    swift_release();

  }
  else
  {

  }
  *a3 = 1;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for InputAccessoryGenerator()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in UIKitToolbarStrategy.updateBottomBar()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in UIKitToolbarStrategy.updateBottomBar()(a1, a2, a3);
}

uint64_t closure #1 in UIKitToolbarStrategy.updateBottomBar()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  void *v6;
  uint64_t result;
  char v8;
  _BYTE v9[56];
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v11);
  v6 = (void *)MEMORY[0x18D760234](&v12);
  outlined destroy of HostingControllerOverrides((uint64_t)v11);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v9);
  if (v6)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)v9);
  }
  else
  {
    v6 = (void *)MEMORY[0x18D760234](&v10);
    result = outlined destroy of Toolbar.UpdateContext((uint64_t)v9);
    if (!v6)
    {
      v8 = 0;
      goto LABEL_5;
    }
  }

  *(_QWORD *)(a1 + direct field offset for ToolbarBridge.platformVended + 16) = UIKitToolbarStrategy.makeBarItems()();
  result = swift_bridgeObjectRelease();
  v8 = 1;
LABEL_5:
  *a3 = v8;
  return result;
}

void partial apply for closure #1 in UIKitToolbarStrategy.updateBarCenter()(uint64_t a1@<X0>, char *a2@<X8>)
{
  closure #1 in UIKitToolbarStrategy.updateBarCenter()(a1, a2);
}

void closure #1 in UIKitToolbarStrategy.updateBarCenter()(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Class isa;
  char v9;
  _QWORD v10[3];
  __int128 v11;

  v4 = static SemanticFeature.isEnabled.getter();
  if ((v4 & 1) != 0)
  {
    memset(v10, 0, sizeof(v10));
    v11 = xmmword_187BFE310;
    MEMORY[0x1E0C80A78](v4, v5);
    specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(_QWORD *__return_ptr))closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)partial apply);
    outlined destroy of Toolbar.BarLocation((uint64_t)v10);
    v6 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    v7 = v6;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setCenterItemGroups_, isa);

    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  *a2 = v9;
}

void closure #1 in UIKitToolbarStrategy.updateBarTitle()(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  BOOL v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  char v22;
  char v23;
  _BYTE *v24;
  char v25;
  _OWORD v27[2];
  uint64_t v28;
  void *v29;

  v28 = 0;
  v29 = 0;
  memset(v27, 0, sizeof(v27));
  specialized ToolbarBridge.adjustEntries(in:_:)((uint64_t)v27, a1, (uint64_t)&v29);
  outlined destroy of Toolbar.BarLocation((uint64_t)v27);
  v3 = a1 + direct field offset for ToolbarBridge.platformVended;
  v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + direct field offset for ToolbarBridge.platformVended
                                                             + 8), sel_titleView));
  v5 = v29;
  objc_msgSend(*(id *)(v3 + 8), sel_setTitleView_, v29);
  v6 = *(void **)(v3 + 8);
  v7 = v4;
  v8 = objc_msgSend(v6, sel_titleView);
  v9 = v8;
  if (v7)
  {

    if (v9)
    {

      v10 = v7 == v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8)
  {

LABEL_6:
    v10 = 0;
    goto LABEL_8;
  }
  v10 = 1;
LABEL_8:
  v11 = objc_msgSend(*(id *)(v3 + 8), sel_customizationIdentifier);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = (uint64_t *)(a1 + direct field offset for ToolbarBridge.toolbarStorage);
  if (*(_QWORD *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 40))
  {
    v18 = *v16;
    v17 = v16[1];
    v19 = *(void **)(v3 + 8);
    swift_bridgeObjectRetain();
    if (v17)
    {
      v20 = v19;
      swift_bridgeObjectRetain();
      v21 = (void *)MEMORY[0x18D75CC88](v18, v17);
      swift_bridgeObjectRelease();
      v22 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v18 = 0;
    v19 = *(void **)(v3 + 8);
  }
  v20 = v19;
  v17 = 0;
  v21 = 0;
  v22 = 1;
LABEL_16:
  objc_msgSend(v20, sel_setCustomizationIdentifier_, v21);

  if (v10)
  {
    if (v15)
    {
      if ((v22 & 1) == 0)
      {
        if (v13 == v18 && v15 == v17)
          v25 = 1;
        else
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_29;
      }

    }
    else
    {

      if ((v22 & 1) != 0)
      {
        v25 = 1;
LABEL_29:
        v24 = a2;
        v23 = v25 ^ 1;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    v25 = 0;
    goto LABEL_29;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = 1;
  v24 = a2;
LABEL_30:
  *v24 = v23 & 1;
}

uint64_t type metadata accessor for TitleDocumentContent()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TitleDocumentContent;
  if (!type metadata singleton initialization cache for TitleDocumentContent)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t storeEnumTagSinglePayload for PlatformItemList.Item()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

id ToolbarBridge.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  id v4;
  char *v5;
  id v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = &v0[direct field offset for ToolbarBridge.updateContext];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  v3 = &v0[direct field offset for ToolbarBridge.platformVended];
  v4 = objc_allocWithZone(MEMORY[0x1E0DC3A48]);
  v5 = v0;
  v6 = objc_msgSend(v4, sel_init);
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = v6;
  v7 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v3 + 2) = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v3 + 3) = v7;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  v8 = &v5[direct field offset for ToolbarBridge.toolbarStorage];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  v9 = &v5[direct field offset for ToolbarBridge.searchItem];
  v10 = type metadata accessor for ToolbarStorage.SearchItem(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)&v5[direct field offset for ToolbarBridge.navigationAdaptor] = v7;
  v11 = &v5[direct field offset for ToolbarBridge.navigationProperties];
  v12 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = &v5[direct field offset for ToolbarBridge.lastBarContext];
  v13[6] = 0;
  *((_WORD *)v13 + 2) = 0;
  *(_DWORD *)v13 = 2;
  EnvironmentValues.init()();
  v14 = direct field offset for ToolbarBridge.allowedLocations;
  v15 = specialized static Toolbar.BarLocation.allCases.getter();
  v16 = specialized Set.init<A>(_:)((uint64_t)v15);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v5[v14] = v16;
  *(_QWORD *)&v5[direct field offset for ToolbarBridge.accessoryBarLocations] = v7;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.toolbarTracker] = -1;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.searchTracker] = -1;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.titleTracker] = -1;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.adaptorTracker] = -1;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.lastNavigationSeed] = -1;
  v17 = direct field offset for ToolbarBridge.storageByLocation;
  *(_QWORD *)&v5[v17] = specialized Dictionary.init(dictionaryLiteral:)(v7);

  v19.receiver = v5;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.NavigationProperties()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.SearchItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for ToolbarStorage.NavigationProperties(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.NavigationProperties);
}

unint64_t lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation;
  if (!lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Toolbar.BarLocation, &type metadata for Toolbar.BarLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation;
  if (!lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Toolbar.BarLocation, &type metadata for Toolbar.BarLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  }
  return result;
}

uint64_t type metadata accessor for ToolbarStorage.SearchItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.SearchItem);
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ToolbarBridge.adjustEntries(in:_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t *, uint64_t))closure #1 in closure #1 in UIKitToolbarStrategy.updateBarTitle());
}

{
  return specialized ToolbarBridge.adjustEntries(in:_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t *, uint64_t))closure #1 in closure #1 in UIKitToolbarStrategy.updateNavigationAccessory());
}

void ToolbarBridge.updateToolbarVisibility<A>(hostingController:)(void *a1)
{
  uint64_t v1;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;

  v3 = *(void **)(v1 + direct field offset for ToolbarBridge.platformVended + 32);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v1 + direct field offset for ToolbarBridge.platformVended + 16);
  v12 = v3;
  if (v4 >> 62)
  {
    v10 = v3;
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_4;
LABEL_9:
    v11 = objc_msgSend(v12, sel_superview);

    if (v11)
    {
      swift_bridgeObjectRelease();
      objc_msgSend(v12, sel_removeFromSuperview);
      goto LABEL_11;
    }

    swift_bridgeObjectRelease();
    return;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v3;
  swift_bridgeObjectRetain();
  if (!v5)
    goto LABEL_9;
LABEL_4:
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v12, sel_superview);

  if (v7)
  {
LABEL_11:

    return;
  }
  v8 = objc_msgSend(a1, sel_view);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, sel_addSubview_, v12);

    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall _CALayerView.updatePlatformLayer(_:)(CALayer a1)
{
  void (**v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *v1;
  v3 = swift_dynamicCastUnknownClassUnconditional();
  v2(v3);
}

Swift::Void __swiftcall FocusBridge.hostingControllerDidAppear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD v9[20];
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  if ((FocusBridge.canAcceptFocus.getter() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 16);
    if ((v2 | 2) != v2)
    {
      *(_QWORD *)(v0 + 16) = v2 | 2;
      *(_DWORD *)(v0 + 48) = 0;
      v3 = FocusBridge.host.getter();
      if (v3)
      {
        v4 = (void *)v3;
        swift_getObjectType();
        v9[0] = 128;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      }
    }
    FocusBridge.focusedItem.getter((uint64_t)v9);
    v6 = v10;
    v5 = v11;
    outlined destroy of FocusItem?((uint64_t)v9);
    if (!v6 && v5 == 1)
    {
      v7 = *(_QWORD *)(v1 + 16);
      if ((v7 & 1) == 0)
        *(_QWORD *)(v1 + 16) = v7 | 1;
    }
    specialized FocusBridge.hostDidBecomeFirstResponder(in:)();
    v8 = *(_QWORD *)(v1 + 16);
    if ((v8 & 1) != 0)
      *(_QWORD *)(v1 + 16) = v8 & 0xFFFFFFFFFFFFFFFELL;
  }
}

void FocusBridge.canAcceptFocus.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = 2;
  if ((a1 & 1) == 0)
    v3 = 0;
  v4 = v2 & 0xFFFFFFFFFFFFFFFDLL | v3;
  if (v4 != v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    *(_DWORD *)(v1 + 48) = 0;
    v5 = FocusBridge.host.getter();
    if (v5)
    {
      v6 = (void *)v5;
      swift_getObjectType();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
  }
}

uint64_t FocusBridge.canAcceptFocus.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  char v8;

  v1 = v0;
  v2 = FocusBridge.host.getter();
  if (v2
    && (v4 = (void *)v2,
        v5 = v3,
        ObjectType = swift_getObjectType(),
        v7 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, *(_QWORD *)(v5 + 8)),
        v4,
        v7))
  {

  }
  else if (swift_weakLoadStrong())
  {
    v8 = FocusBridge.canAcceptFocus.getter();
    swift_release();
    return v8 & 1;
  }
  return (*(unsigned __int8 *)(v1 + 16) >> 1) & 1;
}

uint64_t outlined init with take of FocusItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FocusItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;

  if ((a4 & 0x100) != 0)
  {
    *(_QWORD *)a5 = a1;
    *(_QWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = a3;
    *(_BYTE *)(a5 + 24) = a4;
    return outlined copy of Environment<KeyboardShortcut?>.Content(a1, a2, a3, a4, 1);
  }
  else
  {
    outlined copy of Environment<KeyboardShortcut?>.Content(a1, a2, a3, a4, 0);
    v9 = static os_log_type_t.fault.getter();
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v15 = v13;
      *(_DWORD *)v12 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x8000000187BDF0B0, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v13, -1, -1);
      MEMORY[0x18D760108](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<KeyboardShortcut?>.Content(a1, a2, a3, a4, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t type metadata accessor for DisplayLink()
{
  return objc_opt_self();
}

void specialized DisplayLink.init(host:window:)(void *a1, void *a2, char *a3, uint64_t a4, uint64_t a5)
{
  objc_class *ObjectType;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  objc_super v22;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&a3[OBJC_IVAR____TtC7SwiftUI11DisplayLink_host + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&a3[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link] = 0;
  v10 = a3;
  static Time.infinity.getter();
  v11 = &v10[OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentUpdate];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons] = MEMORY[0x1E0DEE9E8];
  v10[OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentThread] = 0;
  v10[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread] = 0;

  v22.receiver = v10;
  v22.super_class = ObjectType;
  v12 = (char *)objc_msgSendSuper2(&v22, sel_init);
  *(_QWORD *)&v12[OBJC_IVAR____TtC7SwiftUI11DisplayLink_host + 8] = a5;
  swift_unknownObjectWeakAssign();
  v13 = v12;
  v14 = objc_msgSend(a2, sel_screen);
  v15 = objc_msgSend(v14, sel_displayLinkWithTarget_selector_, v13, sel_displayLinkTimer_);

  v16 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_link;
  v17 = *(void **)&v13[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
  *(_QWORD *)&v13[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link] = v15;

  v18 = *(void **)&v13[v16];
  if (v18)
  {
    v19 = (void *)objc_opt_self();
    v20 = v18;
    v21 = objc_msgSend(v19, sel_mainRunLoop);
    objc_msgSend(v20, sel_addToRunLoop_forMode_, v21, *MEMORY[0x1E0C99860]);

  }
  else
  {
    __break(1u);
  }
}

uint64_t FocusStore.makeStoreContent(_:)(uint64_t result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  void (*v13)(uint64_t *);
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  char v32[8];
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *);
  char v38;

  v2 = v1;
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
  {
    *v1 = 0;
    return result;
  }
  v4 = result + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = v4;
  v7 = v3;
  do
  {
    outlined init with copy of FocusStoreList.Item(v6, (uint64_t)&v35);
    if (v35 > (uint64_t)v5)
      v5 = v35;
    outlined destroy of FocusStoreList.Item((uint64_t)&v35);
    v6 += 72;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  if (HIDWORD(v5))
    goto LABEL_39;
  *v2 = v5;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of FocusStoreList.Item(v4, (uint64_t)&v35);
    v8 = v36;
    v9 = *((_QWORD *)v2 + 2);
    if (!*(_QWORD *)(v9 + 16) || (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v36), (v11 & 1) == 0))
    {
      v12 = 0;
      v34 = 0;
      v13 = v37;
      if (!v37)
        goto LABEL_16;
LABEL_15:
      swift_retain();
      v13(&v34);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v13);
      v12 = v34;
      goto LABEL_16;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
    v34 = v12;
    swift_retain();
    v13 = v37;
    if (v37)
      goto LABEL_15;
LABEL_16:
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v33 = (_QWORD *)*((_QWORD *)v2 + 2);
    v15 = v33;
    *((_QWORD *)v2 + 2) = 0x8000000000000000;
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    v18 = v15[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      break;
    v21 = v16;
    if (v15[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_38;
      v17 = v22;
    }
    v24 = v33;
    if ((v21 & 1) != 0)
    {
      v25 = v33[7];
      swift_release();
      *(_QWORD *)(v25 + 8 * v17) = v12;
    }
    else
    {
      v33[(v17 >> 6) + 8] |= 1 << v17;
      *(_QWORD *)(v24[6] + 8 * v17) = v8;
      *(_QWORD *)(v24[7] + 8 * v17) = v12;
      v26 = v24[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_37;
      v24[2] = v28;
    }
    *((_QWORD *)v2 + 2) = v24;
    swift_bridgeObjectRelease();
    if ((v38 & 1) != 0 && swift_weakLoadStrong())
    {
      type metadata accessor for ViewResponder();
      if (swift_dynamicCastClass())
      {
        swift_weakInit();
        swift_weakAssign();
        outlined init with take of TableCellFormula((uint64_t)v32, (uint64_t)&v33, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
        v29 = (_QWORD *)*((_QWORD *)v2 + 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
        v29[2] = v31 + 1;
        outlined init with take of TableCellFormula((uint64_t)&v33, (uint64_t)&v29[v31 + 4], (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
        swift_release();
        *((_QWORD *)v2 + 1) = v29;
      }
      else
      {
        swift_release();
      }
    }
    swift_release();
    outlined destroy of FocusStoreList.Item((uint64_t)&v35);
    v4 += 72;
    if (!--v3)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_39:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>)
  {
    type metadata accessor for EffectiveLabelStyle?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>);
  }
}

void UICollectionViewListCoordinatorBase.updateListContents(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  id v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  void (*v48)(void (*)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, unint64_t, uint64_t);
  char *v77;
  uint64_t v78;
  Swift::Int v79;
  void (*v80)(char *, uint64_t);
  id v81;
  Class isa;
  id v83;
  uint64_t *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, unint64_t, uint64_t);
  char *v102;
  uint64_t v103;
  Swift::Int v104;
  id v105;
  Class v106;
  id v107;
  uint64_t v108;
  void *v109;
  id v110;
  id v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[2];
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  id v130;
  _QWORD *v131;
  char *v132;
  void (*v133)(char *, unint64_t, uint64_t);
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void (*v139)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  void *v144;
  char v145[8];

  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70) + 8);
  v137 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60);
  v136 = v7;
  v142 = type metadata accessor for ShadowListDataSource(0, v137, v7, a4);
  v141 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142, v8);
  v143 = (char *)v124 - v9;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v135 = (char *)v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v134 = (char *)v124 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)v124 - v18);
  v20 = type metadata accessor for IndexPath();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v129 = (char *)v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v128 = (char *)v124 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v124 - v29;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v124 - v33;
  UICollectionViewListCoordinatorBase.clearDataSourceUpdates()();
  v35 = *(_QWORD *)((*v6 & *v4) + 0xD0);
  v131 = v4;
  *((_BYTE *)v4 + v35) = 0;
  v144 = a1;
  v36 = objc_msgSend(a1, sel_preparedCells);
  if (!v36)
    goto LABEL_56;
  v37 = v36;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewCell);
  v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v140 = v21;
  if (v39)
  {
    if (v39 >= 1)
    {
      v40 = (_QWORD *)((char *)v131 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v131) + 0x88));
      v138 = v38 & 0xC000000000000001;
      v126 = v40;
      swift_beginAccess();
      v41 = 0;
      v125 = (uint64_t *)(MEMORY[0x1E0DEE9C0] + 8);
      v139 = v19;
      v132 = v30;
      v127 = v20;
      v130 = (id)v38;
      while (1)
      {
        v43 = v39;
        if (v138)
          v44 = (id)MEMORY[0x18D75E3BC](v41, v38);
        else
          v44 = *(id *)(v38 + 8 * v41 + 32);
        v45 = v44;
        v46 = objc_msgSend(v144, sel_indexPathForCell_, v44);
        if (v46)
        {
          v47 = v46;
          static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

          v48 = *(void (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t))(v21 + 32);
          v42 = (uint64_t)v139;
          v48(v139, v30, v20);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v42, 0, 1, v20);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v42, 1, v20) != 1)
          {
            v48((void (*)(char *, uint64_t, uint64_t, uint64_t))v34, (char *)v42, v20);
            swift_getAssociatedTypeWitness();
            v49 = swift_dynamicCastUnknownClass();
            if (v49)
            {
              v50 = v49;
              v51 = v141;
              v52 = v143;
              v53 = v142;
              v54 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v141 + 16))(v143, v126, v142);
              v133 = (void (*)(char *, unint64_t, uint64_t))v124;
              MEMORY[0x1E0C80A78](v54, v55);
              v124[-2] = v131;
              v124[-1] = v50;
              v56 = v45;
              v57 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v53);
              ListCoreDataSource.visitContent<A>(atRow:visitor:)((uint64_t)v34, (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:), (uint64_t)&v124[-4], v53, (uint64_t)v125, v57, (uint64_t)v145);
              v58 = *(void (**)(char *, uint64_t))(v51 + 8);
              v38 = (unint64_t)v130;
              v59 = v52;
              v30 = v132;
              v60 = v53;
              v21 = v140;
              v58(v59, v60);
              v20 = v127;
              UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(v144, (uint64_t)v34);

            }
            else
            {

            }
            (*(void (**)(char *, uint64_t))(v21 + 8))(v34, v20);
            goto LABEL_9;
          }
        }
        else
        {
          v42 = (uint64_t)v139;
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v21 + 56))(v139, 1, 1, v20);
        }

        outlined destroy of Binding<AttributedString>(v42, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_9:
        ++v41;
        v39 = v43;
        if (v43 == v41)
          goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_54;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  v130 = (id)*MEMORY[0x1E0DC48A8];
  v61 = objc_msgSend(v144, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
  v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v63 = *(_QWORD *)(v62 + 16);
  v124[1] = v62;
  if (v63)
  {
    v64 = v131;
    v65 = (_QWORD *)((char *)v64 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v64) + 0xA0));
    v66 = v62 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v138 = (unint64_t)v64 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v64) + 0x88);
    swift_beginAccess();
    v125 = v65;
    swift_beginAccess();
    v132 = *(char **)(v21 + 72);
    v133 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    v67 = v134;
    v68 = v128;
    v133(v134, v66, v20);
    while (1)
    {
      v139 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
      v139(v67, 0, 1, v20);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v67, 1, v20) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v68, v67, v20);
      v75 = v141;
      v76 = *(void (**)(char *, unint64_t, uint64_t))(v141 + 16);
      v77 = v143;
      v78 = v142;
      v76(v143, v138, v142);
      v79 = IndexPath.section.getter();
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v78);
      LOBYTE(v79) = ListDiffable.hasHeader(forSectionAtOffset:)(v79);
      v80 = *(void (**)(char *, uint64_t))(v75 + 8);
      v80(v77, v78);
      if ((v79 & 1) != 0)
      {
        v81 = v130;
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v83 = objc_msgSend(v144, sel_supplementaryViewForElementKind_atIndexPath_, v81, isa);

        if (v83)
        {
          swift_getAssociatedTypeWitness();
          v84 = (uint64_t *)swift_dynamicCastUnknownClass();
          if (v84)
          {
            v126 = v84;
            v69 = v142;
            v76(v143, v138, v142);
            v70 = *v125;
            outlined copy of Transaction?(*v125);
            v68 = v128;
            v71 = IndexPath.section.getter();
            v72 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v69);
            v73 = v71;
            v74 = v143;
            ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:)((uint64_t)v126, v70, v73, v69, v72);
            outlined consume of Transaction?(v70);

            v80(v74, v69);
          }
          else
          {

            v68 = v128;
          }
        }
      }
      v21 = v140;
      (*(void (**)(char *, uint64_t))(v140 + 8))(v68, v20);
      v66 += (unint64_t)v132;
      --v63;
      v67 = v134;
      if (!v63)
        goto LABEL_30;
      v133(v134, v66, v20);
    }
  }
  else
  {
    v139 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    v67 = v134;
LABEL_30:
    v139(v67, 1, 1, v20);
  }
  swift_bridgeObjectRelease();
  v130 = (id)*MEMORY[0x1E0DC48A0];
  v85 = objc_msgSend(v144, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
  v86 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v128 = (char *)v86;
  v87 = *(_QWORD *)(v86 + 16);
  v88 = v129;
  if (v87)
  {
    v89 = v131;
    v90 = (_QWORD *)((char *)v89 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v89) + 0xA0));
    v91 = &v128[(*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)];
    v138 = (unint64_t)v89 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v89) + 0x88);
    swift_beginAccess();
    v126 = v90;
    swift_beginAccess();
    v132 = *(char **)(v21 + 72);
    v133 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    while (1)
    {
      v99 = v135;
      v133(v135, (unint64_t)v91, v20);
      v139(v99, 0, 1, v20);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v99, 1, v20) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v88, v99, v20);
      v100 = v141;
      v101 = *(void (**)(char *, unint64_t, uint64_t))(v141 + 16);
      v102 = v143;
      v103 = v142;
      v101(v143, v138, v142);
      v104 = IndexPath.section.getter();
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v103);
      LOBYTE(v104) = ListDiffable.hasFooter(forSectionAtOffset:)(v104);
      v134 = *(char **)(v100 + 8);
      ((void (*)(char *, uint64_t))v134)(v102, v103);
      if ((v104 & 1) != 0)
      {
        v105 = v130;
        v106 = IndexPath._bridgeToObjectiveC()().super.isa;
        v107 = objc_msgSend(v144, sel_supplementaryViewForElementKind_atIndexPath_, v105, v106);

        if (v107)
        {
          swift_getAssociatedTypeWitness();
          v108 = swift_dynamicCastUnknownClass();
          if (v108)
          {
            v92 = v108;
            v93 = v142;
            v101(v143, v138, v142);
            v94 = *v126;
            outlined copy of Transaction?(*v126);
            v88 = v129;
            v95 = IndexPath.section.getter();
            v96 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v93);
            v97 = v95;
            v98 = v143;
            ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:)(v92, v94, v97, v93, v96);
            outlined consume of Transaction?(v94);

            ((void (*)(char *, uint64_t))v134)(v98, v93);
          }
          else
          {

            v88 = v129;
          }
        }
      }
      v21 = v140;
      (*(void (**)(char *, uint64_t))(v140 + 8))(v88, v20);
      v91 = &v132[(_QWORD)v91];
      if (!--v87)
        goto LABEL_40;
    }
  }
  else
  {
LABEL_40:
    v139(v135, 1, 1, v20);
  }
  swift_bridgeObjectRelease();
  v109 = (void *)MEMORY[0x18D75CC88](0xD000000000000011, 0x8000000187BE36D0);
  swift_bridgeObjectRelease();
  v110 = objc_msgSend(v144, sel_visibleSupplementaryViewsOfKind_, v109);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionReusableView);
  v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!((unint64_t)v39 >> 62))
  {
    if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_43;
LABEL_51:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v123 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v123)
    goto LABEL_51;
LABEL_43:
  if ((v39 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v111 = *(id *)(v39 + 32);
      goto LABEL_46;
    }
    __break(1u);
LABEL_56:
    __break(1u);
    return;
  }
LABEL_54:
  v111 = (id)MEMORY[0x18D75E3BC](0, v39);
LABEL_46:
  v112 = v111;
  swift_bridgeObjectRelease();
  type metadata accessor for TableGlobalHeader();
  v113 = swift_dynamicCastClass();
  if (v113)
  {
    v114 = v113;
    v115 = v131;
    v116 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v117 = (char *)v131 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v131) + 0x88);
    swift_beginAccess();
    v118 = v141;
    v119 = v143;
    v120 = v142;
    (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v143, v117, v142);
    v121 = (_QWORD *)((char *)v115 + *(_QWORD *)((*v116 & *v115) + 0xA0));
    swift_beginAccess();
    v122 = *v121;
    outlined copy of Transaction?(v122);
    ShadowListDataSource.configureGlobalHeader(_:transaction:)(v114, v122, v120);
    outlined consume of Transaction?(v122);

    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
  }
  else
  {

  }
}

uint64_t partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:)()
{
  return partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t initializeWithCopy for ListSeparatorConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for _RowVisitationContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  int v26;
  size_t v27;
  size_t v28;
  size_t v29;
  char *v30;
  char *v31;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v6 + v9 + a1) & ~v9, (v6 + v9 + a2) & ~v9, v7);
  v10 = *(_QWORD *)(v8 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((v6 + v9) & ~v9) + v10 + v13;
  v15 = (v14 + a1) & ~v13;
  v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, v16, v11);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (char *)(((unint64_t)v18 + v22 + 8) & ~v22);
  v24 = (char *)(((unint64_t)v19 + v22 + 8) & ~v22);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  if (v25(v24, 1, v20))
  {
    v26 = *(_DWORD *)(v21 + 84);
    v27 = *(_QWORD *)(v21 + 64);
    if (v26)
      v28 = v27;
    else
      v28 = v27 + 1;
    memcpy(v23, v24, v28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v23, v24, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v20);
    v26 = *(_DWORD *)(v21 + 84);
    v27 = *(_QWORD *)(v21 + 64);
  }
  if (v26)
    v29 = v27;
  else
    v29 = v27 + 1;
  v30 = &v23[v29];
  v31 = &v24[v29];
  *v30 = *v31;
  v30[1] = v31[1];
  v30[2] = v31[2];
  return a1;
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)(a1, *(_QWORD **)(v4 + 16), *(void **)(v4 + 24), a4);
}

void closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v9 = type metadata accessor for ShadowListDataSource(0, v8[12], *(_QWORD *)(v8[14] + 8), a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v20 - v12;
  v14 = (char *)a2 + v8[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  if (*((_BYTE *)a2 + *(_QWORD *)((*v7 & *a2) + 0xE8)) == 1)
  {
    v15 = 1;
  }
  else
  {
    v16 = (_QWORD *)((char *)a2 + *(_QWORD *)((*v7 & *a2) + 0xA0));
    swift_beginAccess();
    v15 = *v16;
    outlined copy of Transaction?(v15);
  }
  ShadowListDataSource.configureCell(_:transaction:context:)((uint64_t)a3, v15, a1, v9);
  outlined consume of Transaction?(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v17 = objc_msgSend(a3, sel_layer);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
  v20[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for _RowVisitationContext(0, v9, v18, v19) + 40));
  ViewTraitCollection.zIndex.getter();
  objc_msgSend(v17, sel_setZPosition_);

}

uint64_t outlined copy of Transaction?(uint64_t result)
{
  if (result != 1)
    return swift_retain();
  return result;
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)(a1, *(_QWORD **)(v2 + 16), *(UICollectionView **)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, UICollectionView *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t countAndFlagsBits;
  void *object;
  void *v19;
  Class isa;
  UICollectionViewCell *v21;
  UICollectionViewCell *v22;
  uint64_t AssociatedTypeWitness;
  void *v24;
  uint64_t v25;
  char *v26;
  UICollectionViewCell *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  UICollectionViewCell *v42;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  UICollectionViewCell *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v52 = a5;
  v8 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0x60);
  v45 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v46 = v45[14];
  v9 = type metadata accessor for ShadowListDataSource(0, v8, *(_QWORD *)(v46 + 8), a4);
  v50 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v44 - v12;
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9, v11);
  v49 = type metadata accessor for _RowVisitationContext(0, v9, v14, v15);
  v51 = a1;
  v16._countAndFlagsBits = _RowVisitationContext.reuseIdentifier.getter();
  countAndFlagsBits = v16._countAndFlagsBits;
  object = v16._object;
  UICollectionViewListCoordinatorBase.registerIdentifierIfNeeded(_:in:)(v16, a3);
  v19 = (void *)MEMORY[0x18D75CC88](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v21 = -[UICollectionView dequeueReusableCellWithReuseIdentifier:forIndexPath:](a3, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v19, isa);

  v22 = v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = (void *)swift_dynamicCastUnknownClassUnconditional();
  v48 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  PlatformListViewBase.updateViewGraphForDisplay(_:)(0);
  type metadata accessor for AnyListCollectionViewCell();
  v25 = swift_dynamicCastClass();
  v26 = (char *)v25;
  if (v25)
  {
    *(_QWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate + 8) = &protocol witness table for UICollectionViewListCoordinatorBase<A, B>;
    swift_unknownObjectWeakAssign();
    *(_QWORD *)&v26[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_insetsDelegate + 8] = &protocol witness table for UICollectionViewListCoordinatorBase<A, B>;
    swift_unknownObjectWeakAssign();
    *(_QWORD *)&v26[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate + 8] = &protocol witness table for UICollectionViewListCoordinatorBase<A, B>;
    swift_unknownObjectWeakAssign();
    v27 = v22;
  }
  v47 = v22;
  v28 = (uint64_t *)MEMORY[0x1E0DEEDD8];
  v29 = (_QWORD *)((char *)a2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0xA0));
  swift_beginAccess();
  v58 = *v29;
  v30 = *a2;
  v31 = *v28;
  if (v58 != 1)
  {
    if (*((_BYTE *)a2 + *(_QWORD *)((v31 & v30) + 0xE8)) == 1)
    {
      v32 = v45[15];
      v33 = v45[13];
      v53 = v8;
      v54 = v33;
      v55 = v46;
      v56 = v32;
      type metadata accessor for UICollectionViewListCoordinatorBase.Listener();
    }
    swift_retain();
  }
  v34 = (char *)a2 + *(_QWORD *)((v31 & v30) + 0x88);
  swift_beginAccess();
  v35 = v50;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v13, v34, v9);
  v36 = v58;
  outlined copy of Transaction?(v58);
  v37 = v51;
  ShadowListDataSource.configureCell(_:transaction:context:)((uint64_t)v24, v36, v51, v9);
  outlined consume of Transaction?(v36);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v9);
  v38 = objc_msgSend(v24, sel_layer);
  v57 = *(_QWORD *)(v37 + *(int *)(v49 + 40));
  ViewTraitCollection.zIndex.getter();
  objc_msgSend(v38, sel_setZPosition_);

  v39 = (void *)(*(uint64_t (**)(uint64_t))(v48 + 56))(AssociatedTypeWitness);
  if (v39)
  {
    v40 = (id)specialized _UIHostingView.editMenuBridge.getter();

    type metadata accessor for ListCollectionViewCell();
    v41 = (void *)swift_dynamicCastClass();
    if (v41)
      v42 = v47;
    swift_unknownObjectWeakAssign();

  }
  *v52 = v24;
  return outlined consume of Transaction?(v58);
}

uint64_t UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v16;

  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = v3[13];
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v16 - v6;
  v8 = type metadata accessor for Binding();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - v11;
  v13 = (char *)v2 + v3[32];
  swift_beginAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
  {
    v14 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v13, v8);
    MEMORY[0x18D75B9C8](v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v14 = (*(uint64_t (**)(uint64_t))(v3[15] + 64))(v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v14 & 1;
}

BOOL SelectionManagerBox.allowsMultipleSelection.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  _BOOL8 v7;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, v1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v3 + 16))(v6, v4);
  v7 = (swift_getEnumCaseMultiPayload() & 7) == 0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
  return v7;
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.registerIdentifierIfNeeded(_:in:)(Swift::String _, UICollectionView *in)
{
  _QWORD *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t ObjCClassFromMetadata;
  void *v10;
  Swift::Int v11;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v6 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x80));
  swift_beginAccess();
  v7 = *v6;
  swift_bridgeObjectRetain();
  v8 = specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, v7);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v11, countAndFlagsBits, (Swift::Int)object);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v10 = (void *)MEMORY[0x18D75CC88](countAndFlagsBits, object);
    -[UICollectionView registerClass:forCellWithReuseIdentifier:](in, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v10);

  }
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

{
  unint64_t v6;
  _BYTE v8[72];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    PresentationDetent.Identifier.hash(into:)((uint64_t)v8, a1, a2);
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(a3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X6 }
  }
  return 0;
}

{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL _RowVisitationContext.canDelete.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  _QWORD v15[2];

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DeleteInteraction?, (void (*)(uint64_t))type metadata accessor for DeleteInteraction);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v15 - v5;
  v15[1] = *(_QWORD *)(v1 + *(int *)(a1 + 40));
  ViewTraitCollection.deleteInteraction.getter((_QWORD *)((char *)v15 - v5));
  v7 = type metadata accessor for DeleteInteraction();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of IntelligenceElement?((uint64_t)v6, &lazy cache variable for type metadata for DeleteInteraction?, (void (*)(uint64_t))type metadata accessor for DeleteInteraction);
    return 0;
  }
  else
  {
    v9 = (uint64_t *)&v6[*(int *)(v7 + 24)];
    v10 = *v9;
    v11 = v9[1];
    v8 = *v9 != 0;
    if (*v9)
    {
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = v10;
      *(_QWORD *)(v12 + 24) = v11;
      v13 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
    }
    else
    {
      v13 = 0;
    }
    outlined copy of AppIntentExecutor?(v10);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v13);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DeleteInteraction);
  }
  return v8;
}

uint64_t getEnumTagSinglePayload for DeleteInteraction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for DeleteInteraction()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DeleteInteraction;
  if (!type metadata singleton initialization cache for DeleteInteraction)
    return swift_getSingletonMetadata();
  return result;
}

BOOL _RowVisitationContext.canMove.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD *);
  uint64_t v11;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for MoveInteraction?, (void (*)(uint64_t))type metadata accessor for MoveInteraction);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (uint64_t *)((char *)&v11 - v2);
  _RowVisitationContext.moveInteraction.getter((uint64_t)&v11 - v2);
  v4 = type metadata accessor for MoveInteraction();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of IntelligenceElement?((uint64_t)v3, &lazy cache variable for type metadata for MoveInteraction?, (void (*)(uint64_t))type metadata accessor for MoveInteraction);
    return 0;
  }
  else
  {
    v6 = *v3;
    v7 = v3[1];
    v5 = *v3 != 0;
    if (*v3)
    {
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = v6;
      *(_QWORD *)(v8 + 24) = v7;
      v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ();
    }
    else
    {
      v9 = 0;
    }
    outlined copy of AppIntentExecutor?(v6);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v9);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  }
  return v5;
}

uint64_t type metadata accessor for MoveInteraction()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MoveInteraction;
  if (!type metadata singleton initialization cache for MoveInteraction)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t destroy for MoveInteraction(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  if (*a1)
    swift_release();
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for IndexSet();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t _RowVisitationContext.deleteInteraction.getter@<X0>(_QWORD *a1@<X8>)
{
  return ViewTraitCollection.deleteInteraction.getter(a1);
}

uint64_t _RowVisitationContext.reuseIdentifier.getter()
{
  BOOL v0;
  Swift::String v1;
  uint64_t AssociatedConformanceWitness;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;

  ViewTraitCollection.value<A>(for:defaultValue:)();
  v0 = v7 == 0x6C6C65437473694CLL && v8 == 0xE800000000000000;
  if (v0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v1._countAndFlagsBits = 45;
    v1._object = (void *)0xE100000000000000;
    String.append(_:)(v1);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v3 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
    v4 = swift_checkMetadataState();
    v3(v4, AssociatedConformanceWitness);
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t _RowVisitationContext.moveInteraction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v9 & 1) != 0)
  {
    v2 = type metadata accessor for MoveInteraction();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  }
  else
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v3 = ViewTraitCollection.onMove.getter();
    v5 = v4;
    type metadata accessor for IndexSet();
    v6 = type metadata accessor for MoveInteraction();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
    dispatch thunk of SetAlgebra.init()();
    dispatch thunk of SetAlgebra.insert(_:)();
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + *(int *)(v6 + 28)) = v8;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 0, 1, v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t storeEnumTagSinglePayload for DeleteInteraction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MoveInteraction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for MoveInteraction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t initializeWithCopy for MoveInteraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t specialized closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9[5];
  _BYTE v10[88];

  v3 = *(_QWORD *)result;
  v2 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v2)
    return 1;
  v5 = result;
  v6 = result + 32;
  while (v3 < v2)
  {
    outlined init with copy of TableColumnList(v6, (uint64_t)v9);
    v7 = *(void **)(a2 + 48);
    swift_bridgeObjectRetain();
    v8 = v7;
    _ViewList_View.init(elements:id:index:count:contentSubgraph:)();
    v9[0] = *(_QWORD *)(v5 + 72);
    LOBYTE(v7) = CollectionViewHeaderFooterVisitor.visit(view:traits:)((uint64_t)v10, v9);
    result = outlined destroy of _ViewList_View((uint64_t)v10);
    if ((v7 & 1) == 0)
      return 0;
    if (v2 == ++v3)
      return 1;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  _BYTE v10[88];

  v3 = *(_QWORD *)result;
  v2 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v2)
    return 1;
  v5 = result;
  v6 = result + 32;
  while (v3 < v2)
  {
    outlined init with copy of TableColumnList(v6, (uint64_t)v9);
    v7 = *(void **)(a2 + 48);
    swift_bridgeObjectRetain();
    v8 = v7;
    _ViewList_View.init(elements:id:index:count:contentSubgraph:)();
    v9[0] = *(_QWORD *)(v5 + 72);
    LOBYTE(v7) = ListRowSeparatorVisitor.visit(view:traits:)();
    result = outlined destroy of _ViewList_View((uint64_t)v10);
    if ((v7 & 1) == 0)
      return 0;
    if (v2 == ++v3)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t CollectionViewListDataSource.configureCell(_:transaction:context:)(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, double);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52[5];
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56[9];

  v5 = v4;
  v51 = a2;
  type metadata accessor for ModifiedContent<_ViewList_View, CollectionViewCellModifier>();
  v47 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v49 = (uint64_t)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CollectionViewCellModifier();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListDataSource<A>, a4, v14);
  v18 = type metadata accessor for _RowVisitationContext(0, (uint64_t)a4, v45, v17);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v42 - v21;
  v48 = v23;
  v24 = *(void (**)(char *, uint64_t, double))(v23 + 16);
  v43 = v25;
  v24(v22, a3, v20);
  v44 = v22 + 16;
  v26 = *((_QWORD *)v22 + 9);
  v27 = *((unsigned int *)v22 + 16);
  v28 = *((unsigned int *)v22 + 17);
  v56[0] = 0;
  v29 = *((_QWORD *)v22 + 13);
  v54 = v26;
  v55 = v29;
  v30 = v5 + a4[13];
  if (*(_BYTE *)(v30 + 8))
    v31 = 44.0;
  else
    v31 = *(double *)v30;
  v53 = __PAIR64__(v28, v27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  v53 = v52[0];
  v54 = v52[1];
  v50 = v16;
  CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)(v56, (uint64_t *)&v53, 0, 0, (uint64_t)v16, v31);
  v32 = (uint64_t *)(a1 + direct field offset for ListCollectionViewCellBase.viewListID);
  *v32 = v27 | (v28 << 32);
  v32[1] = v26;
  swift_bridgeObjectRelease();
  v52[0] = v29;
  LOBYTE(v53) = 0;
  v46 = ViewTraitCollection.listItemBackground(kind:)((unsigned __int8 *)&v53);
  if (*(_QWORD *)(v5 + a4[11] + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    v42 = a1;
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    v33 = v43;
    v22[*(int *)(v43 + 52)] = v52[0];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    v33 = v43;
    v22[*(int *)(v43 + 52)] = v52[0];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v22[*(int *)(v33 + 56)] = v52[0];
  v22[*(int *)(v33 + 48)] = *(_BYTE *)(v5 + a4[12]);
  ListCollectionViewCellBase.configureAccessories<A>(context:)((uint64_t)v22, (uint64_t)a4, v45);
  v34 = v49;
  outlined init with copy of _ViewList_View((uint64_t)v44, v49);
  v35 = (uint64_t)v50;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v50, v34 + *(int *)(v47 + 36), (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
  if (one-time initialization token for isEnabledInProcessEnv != -1)
    swift_once();
  if (static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv == 1)
  {
    v36 = (int *)type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>();
    v52[3] = (uint64_t)v36;
    v52[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView> and conformance UIHostingConfiguration<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
    v38 = v36[14];
    OptionalEdgeInsets.init()();
    v39 = (char *)boxed_opaque_existential_1 + v36[16];
    *(_QWORD *)v39 = 0;
    v39[8] = 1;
    *((_QWORD *)v39 + 2) = 0;
    v39[24] = 1;
    *((_BYTE *)boxed_opaque_existential_1 + v36[17]) = 1;
    *((_BYTE *)boxed_opaque_existential_1 + v36[18]) = 0;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    *((_BYTE *)boxed_opaque_existential_1 + v38) = 0;
    MEMORY[0x18D75D9F0](v52);
    v40 = v51;
  }
  else
  {
    v40 = v51;
    specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)(v34, v51);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v34, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  swift_bridgeObjectRetain();
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v46, v40);
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v22, v33);
  return swift_release();
}

void type metadata accessor for ModifiedContent<_ViewList_View, CollectionViewCellModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>)
  {
    type metadata accessor for CollectionViewCellModifier();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  }
}

void type metadata accessor for [FrameResizePosition](uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Array();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t EnvironmentValues.labelIconToTitleSpacing.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelIconToTitleSpacingKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.listRowInsets.setter()
{
  return EnvironmentValues.listRowInsets.setter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowInsetsKey>, (uint64_t)&type metadata for ListRowInsetsKey, (uint64_t)&protocol witness table for ListRowInsetsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowInsetsKey> and conformance EnvironmentPropertyKey<A>);
}

void type metadata accessor for UIBackgroundConfiguration?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIBackgroundConfiguration?)
  {
    type metadata accessor for UIBackgroundConfiguration();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?);
  }
}

uint64_t outlined destroy of UIBackgroundConfiguration?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC2130]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _UIHostingView.isHiddenForReuse.getter()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8);
  swift_beginAccess();
  return *v1;
}

uint64_t ShadowListDataSource.configureCell(_:transaction:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t, char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t AssociatedTypeWitness;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;

  v51 = a1;
  v52 = a2;
  v6 = *(_QWORD *)(a4 + 16);
  v49 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v48 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v10, v11);
  v46 = (char *)&v41 - v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v43 = (char *)&v41 - v15;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v17 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v19);
  v21 = (char *)&v41 - v20;
  v23 = type metadata accessor for _RowVisitationContext(0, v6, v9, v22);
  v41 = *(_QWORD *)(v23 - 8);
  v42 = v23;
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v41 - v26;
  v28 = *(int *)(TupleTypeMetadata2 + 48);
  v29 = (uint64_t)&v21[v28];
  v30 = a3;
  v31 = a3 + v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(v16 - 8) + 16))(v21, v30, v16, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v29, v31, v17);
  v32 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, a4);
  v34 = type metadata accessor for _RowVisitationContext(0, a4, v32, v33);
  v35 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v30 + *(int *)(v34 + 36), v45);
  v55 = *(_QWORD *)(v30 + *(int *)(v34 + 40));
  v36 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v46, 1, 1);
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(&v54);
  default argument 6 of _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)(&v53, v6, v9);
  _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)((uint64_t)v21, v29, v35, &v55, v36, 0, &v54, &v53, (uint64_t)v27, v6, v9);
  v38 = v48;
  v37 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v50, v6);
  v39 = *(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v9 + 112);
  swift_bridgeObjectRetain();
  v39(v51, v52, v27, v6, v9);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v27, v42);
}

void ShadowListDataSource.contextForItem(index:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t, double);
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t updated;
  _QWORD v40[2];
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v53 = a1;
  v54 = a2;
  v55 = a3;
  v56 = a4;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  v46 = v5;
  swift_getAssociatedTypeWitness();
  v47 = v6;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v50 = (uint64_t)v40 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10 = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(v10 - 8);
  v11 = v41;
  MEMORY[0x1E0C80A78](v10, v12);
  v44 = (uint64_t)v40 - v13;
  v58 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = v17;
  type metadata accessor for _RowVisitationContext(255, v4, v5, v18);
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  v51 = v19;
  v52 = v20;
  MEMORY[0x1E0C80A78](v19, v21);
  v42 = (char *)v40 - v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v49 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v24);
  v26 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v31 = (char *)v40 - v30;
  v33 = *(int *)(v32 + 48);
  v45 = v32;
  v34 = (char *)v40 + v33 - v30;
  v35 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v43 = (char *)v40 - v30;
  v40[0] = v10;
  v35((char *)v40 - v30, v53, v10, v29);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
  v36(v34, v54, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v17, v48, v4);
  v37 = (uint64_t)&v26[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v35)(v26, v31, v10);
  v36((char *)v37, (uint64_t)v34, AssociatedTypeWitness);
  updated = type metadata accessor for ShadowListUpdateRecorder(0, v4, v47, v38);
  ShadowListUpdateRecorder.initialIndex(_:)(v44, v50, (uint64_t)v26, v37, updated);
}

uint64_t sub_186EFBCB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 144) + 8);
  v8 = v5;
  v7(v3, v5);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 272) + 8);
  v10 = *(_QWORD *)(v6 - 288);
  v9(v0, v10);
  v11 = *(_QWORD *)(v6 - 264);
  v12 = *(_QWORD *)(v6 - 280);
  v13 = *(_QWORD *)(v6 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 208))(v4, v1, v2);
  v7(v1, v8);
  v9(v4, v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 136) + 8))(v12, v2);
  *(_QWORD *)(v6 - 112) = v2;
  *(_QWORD *)(v6 - 104) = v13;
  v14 = *(_QWORD *)(v6 - 160);
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v14);
  v17 = type metadata accessor for _RowVisitationContext(0, v14, v15, v16);
  v18 = *(_QWORD *)(v6 - 192);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ShadowListDataSource.contextForItem(index:), v6 - 128, MEMORY[0x1E0DEDCE8], v17, v19, *(_QWORD *)(v6 - 152));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 8))(v11, v18);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 208) + 8))(*(_QWORD *)(v6 - 256), *(_QWORD *)(v6 - 240));
}

uint64_t ListCoreDataSource.visitRowAt<A>(_:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t, char *, uint64_t, _QWORD))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t, double);
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, char *, uint64_t, _QWORD);
  uint64_t v55;
  char v56[16];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v51 = a6;
  v52 = a4;
  v50 = a3;
  v45 = a2;
  v53 = a9;
  v54 = a10;
  v55 = a8;
  v44 = a5;
  type metadata accessor for _RowVisitationContext(255, a5, a7, a4);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v48 = v12;
  v49 = v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v47 = (char *)&v41 - v15;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v17 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v46 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v41 - v25;
  v28 = *(int *)(v27 + 48);
  v43 = v27;
  v29 = (char *)&v41 + v28 - v25;
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v42 + 16);
  v30((char *)&v41 - v25, a1, AssociatedTypeWitness, v24);
  v31 = *(_QWORD *)(v17 - 8);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v32(v29, v45, v17);
  v33 = &v21[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v30)(v21, v26, AssociatedTypeWitness);
  v32(v33, (uint64_t)v29, v17);
  v34 = a7;
  v35 = *(void (**)(char *, char *, uint64_t))(a7 + 208);
  v36 = v47;
  v37 = v44;
  v38 = v34;
  v35(v21, v33, v44);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v17);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v21, AssociatedTypeWitness);
  v57 = v37;
  v58 = v51;
  v59 = v38;
  v60 = v50;
  v61 = v52;
  v39 = v48;
  v54(v55, v56, v48, MEMORY[0x1E0DEDCE8]);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v26, v43);
}

uint64_t destroy for _RowVisitationContext(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v4 + v7 + a1) & ~v7, v5);
  v8 = (v4 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (v9 + a1 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v12, v10);
  v13 = (*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (v13 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v15 + 8))(v16, v14);
  return result;
}

uint64_t protocol witness for ListCoreDataSource.contextForItem(index:) in conformance CollectionViewListDataSource<A>@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return CollectionViewListDataSource.contextForItem(index:)(*a1, *a2, a3, a4);
}

uint64_t CollectionViewListDataSource.contextForItem(index:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListDataSource<A>, a3);
  v10 = type metadata accessor for ListContentVisitor(0, a3, v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v17 - v12;
  v17 = a2;
  v18 = a1;
  ListContentVisitor.init(index:)((uint64_t)&v18, (uint64_t)&v17, a3, v8, (uint64_t)&v17 - v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListContentVisitor<A>, v10);
  ListSectionInfo.visitRow<A>(index:visitor:)(a1, a2);
  type metadata accessor for _RowVisitationContext(255, a3, v8, v14);
  v15 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a4, v13, v15);
}

uint64_t ListContentVisitor.init(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, double);
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a2;
  v37 = a4;
  v38 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  v34 = a3;
  swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v33 - v16;
  v19 = (char *)&v33 + *(int *)(v18 + 48) - v16;
  v20 = AssociatedTypeWitness;
  v35 = AssociatedTypeWitness;
  v21 = *(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
  v21((char *)&v33 - v16, a1, v20, v15);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v22(v19, v36, v8);
  v23 = v37;
  v25 = type metadata accessor for _RowVisitationContext(0, a3, v37, v24);
  v26 = v38;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v38, 1, 1, v25);
  v27 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v28 = v17;
  v29 = v35;
  ((void (*)(char *, char *, uint64_t))v21)(v12, v28, v35);
  v22(v27, (uint64_t)v19, v8);
  v31 = v26 + *(int *)(type metadata accessor for ListContentVisitor(0, v34, v23, v30) + 36);
  ((void (*)(uint64_t, char *, uint64_t))v21)(v31, v12, v29);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v22)(v31 + *(int *)(TupleTypeMetadata2 + 48), v27, v8);
}

uint64_t type metadata accessor for ListContentVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListContentVisitor);
}

uint64_t ListContentVisitor.visit(view:traits:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t AssociatedTypeWitness;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  _BYTE v32[88];

  v26 = a2;
  v29 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7, v8);
  v27 = (char *)&v25 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v13);
  v15 = (char *)&v25 - v14;
  v16 = *v26;
  v18 = type metadata accessor for _RowVisitationContext(255, v6, v5, v17);
  v19 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v3, v19);
  v20 = *(int *)(TupleTypeMetadata2 + 48);
  v21 = v3 + *(int *)(a3 + 36) + v20;
  v22 = (uint64_t)&v15[v20];
  (*(void (**)(char *))(*(_QWORD *)(v10 - 8) + 16))(v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v22, v21, v11);
  outlined init with copy of _ViewList_View(v29, (uint64_t)v32);
  v31 = v16;
  v23 = (uint64_t)v27;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v27, 1, 1);
  v30 = 0;
  _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)((uint64_t)v15, v22, (uint64_t)v32, &v31, v23, 0, (char *)&v30 + 1, (char *)&v30, v3, v6, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v3, 0, 1, v18);
  swift_bridgeObjectRetain();
  return 0;
}

void storeEnumTagSinglePayload for _RowVisitationContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  int v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_DWORD *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v5 + 84) > v4)
    v4 = *(_DWORD *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= v4)
    v7 = v4;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = 0u;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = v10 - 1;
  if (!v10)
    v11 = 0;
  if (v7 > v11)
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = 3;
  if (!v10)
    v13 = 4;
  v14 = v13
      + *(_QWORD *)(v9 + 64)
      + ((*(unsigned __int8 *)(v9 + 80)
        + 8
        + ((*(_QWORD *)(v6 + 64)
          + 7
          + ((((*(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + *(_QWORD *)(v5 + 64)
            + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  if (a3 > v12)
  {
    if (v14 <= 3)
    {
      v15 = ((a3 - v12 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v15))
      {
        v8 = 4u;
      }
      else if (v15 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v15 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  if (v12 < a2)
  {
    v16 = ~v12 + a2;
    if (v14 < 4)
    {
      if ((_DWORD)v14)
      {
        v17 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if ((_DWORD)v14 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v14 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

void sub_186EFCDBC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
  JUMPOUT(0x186EFCDF8);
}

void sub_186EFCDC4()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
  JUMPOUT(0x186EFCDF8);
}

void sub_186EFCDCC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = v0;
  JUMPOUT(0x186EFCDF8);
}

uint64_t outlined init with copy of _ViewList_View(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE0A40] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for _RowVisitationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _RowVisitationContext);
}

void ShadowListDataSource.separatorConfiguration(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, double);
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t updated;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v45 = a1;
  v46 = a2;
  v3 = *(_QWORD *)(a3 + 16);
  v47 = *(_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(v47 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v44 = (uint64_t)&v36 - v7;
  v41 = v4;
  swift_getAssociatedTypeWitness();
  v48 = v3;
  swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v8 - 8);
  v9 = v37;
  MEMORY[0x1E0C80A78](v8, v10);
  v40 = (uint64_t)&v36 - v11;
  v12 = *(_QWORD *)(v3 - 8);
  v38 = v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v42 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v36 - v24;
  v27 = *(int *)(v26 + 48);
  v39 = v26;
  v28 = (char *)&v36 + v27 - v24;
  v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  v29((char *)&v36 - v24, v45, v8, v23);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
  v30(v28, v46, AssociatedTypeWitness);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v32 = v48;
  v31(v16, v43, v48);
  v33 = (uint64_t)&v20[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v29)(v20, v25, v8);
  v30((char *)v33, (uint64_t)v28, AssociatedTypeWitness);
  updated = type metadata accessor for ShadowListUpdateRecorder(0, v32, v41, v34);
  ShadowListUpdateRecorder.initialIndex(_:)(v40, v44, (uint64_t)v20, v33, updated);
}

uint64_t sub_186EFD118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 88) + 8);
  v8(v6, v2);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 184) + 8);
  v9(v4, v5);
  v10 = *(_QWORD *)(v7 - 96);
  v11 = *(_QWORD *)(v7 - 192);
  *(_DWORD *)(v7 - 88) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 104) + 216))(v0, v3, v10);
  *(_QWORD *)(v7 - 104) = v12;
  *(_DWORD *)(v7 - 112) = v13;
  v8(v3, v2);
  v9(v0, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 176) + 8))(v11, v10);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 144) + 8))(v1, *(_QWORD *)(v7 - 168));
  return *(unsigned int *)(v7 - 88);
}

void ShadowListUpdateRecorder.initialIndex(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, double);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a3;
  v35 = a4;
  v36 = a1;
  v37 = a2;
  v8 = *(_QWORD *)(a5 + 16);
  v7 = *(_QWORD *)(a5 + 24);
  swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  v24 = v7;
  v23 = v8;
  swift_getAssociatedConformanceWitness();
  v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v25 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v12);
  v32 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v30 = (char *)&v21 - v18;
  v31 = v17;
  v19 = (char *)&v21 + *(int *)(v17 + 48) - v18;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16);
  v22((char *)&v21 - v18, v34, AssociatedTypeWitness, v16);
  v20 = *(_QWORD *)(v10 - 8);
  v27 = v19;
  v28 = v20;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v19, v35, v10);
  v33 = a5;
  v35 = v5;
  ShadowListUpdateRecorder.updates.getter();
}

void sub_186EFD3C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 - 104);
  *(_QWORD *)(v2 - 128) = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 120) = v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v2 - 200) = v0;
  *(_QWORD *)(v2 - 160) = v0;
  *(_QWORD *)(v2 - 152) = v1;
  *(_QWORD *)(v2 - 144) = AssociatedConformanceWitness;
  *(_QWORD *)(v2 - 136) = v5;
  type metadata accessor for ListUpdate();
}

uint64_t sub_186EFD424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t);

  v2 = type metadata accessor for Array();
  v3 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v2);
  *(_QWORD *)(v1 - 160) = v2;
  *(_QWORD *)(v1 - 152) = v2;
  *(_QWORD *)(v1 - 144) = v3;
  *(_QWORD *)(v1 - 136) = v3;
  v4 = type metadata accessor for ConcatenatedCollection();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5358], v4);
  v5 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    ShadowListUpdateRecorder.updates.getter();
  v6 = *(_QWORD *)(v1 - 216);
  v7 = v6 + *(int *)(*(_QWORD *)(v1 - 224) + 48);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 240) + 32);
  v9 = *(_QWORD *)(v1 - 200);
  v8(v6, *(_QWORD *)(v1 - 232), v9);
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 248) + 32);
  v10(v7, *(_QWORD *)(v1 - 256), v0);
  v8(*(_QWORD *)(v1 - 184), v6, v9);
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v10)(*(_QWORD *)(v1 - 176), v7, v0);
}

void UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD *, uint64_t);
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  _QWORD v54[7];
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v5 = v4;
  v64 = a2;
  v69 = a1;
  v7 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2E0);
  v8 = *(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2F0) + 8);
  v55 = type metadata accessor for ShadowRowCollection(0, v7, *(_QWORD *)(v8 + 8), a3);
  v54[6] = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v9);
  v54[5] = (char *)v54 - v10;
  v11 = type metadata accessor for IndexPath();
  v59 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v58 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v65 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v14);
  v67 = (char *)v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v66 = (char *)v54 - v18;
  v19 = type metadata accessor for UIListSeparatorConfiguration.Visibility();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v54 - v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v57 = (char *)v54 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v56 = (char *)v54 - v33;
  v35 = type metadata accessor for ShadowListDataSource(0, v7, v8, v34);
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v39 = (char *)v54 - v38;
  v40 = type metadata accessor for UIListSeparatorConfiguration();
  v41 = *(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
  v68 = a4;
  v41(a4, v64, v40);
  v42 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x88);
  v64 = v5;
  v43 = (char *)v5 + v42;
  swift_beginAccess();
  v44 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v54[3] = v43;
  v54[2] = v44;
  v44(v39, v43, v35);
  v45 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v35);
  v46 = ListCoreDataSource.separatorConfiguration(forRowAt:)(v69, v35, v45);
  v61 = v47;
  v62 = v48;
  v50 = v49;
  v51 = *(void (**)(char *, uint64_t))(v36 + 8);
  v54[4] = v39;
  v54[1] = v51;
  v51(v39, v35);
  if (!IndexPath.row.getter())
  {
    v52 = v57;
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v57, **((unsigned int **)&unk_1E1B38138 + v46), v19);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v56, v52, v19);
    UIListSeparatorConfiguration.topSeparatorVisibility.setter();
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v23, **((unsigned int **)&unk_1E1B38138 + v50), v19);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v27, v23, v19);
  UIListSeparatorConfiguration.bottomSeparatorVisibility.setter();
  if (v62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    v53 = swift_retain();
    UIColor.init(_:)(v53);
    UIListSeparatorConfiguration.color.setter();
  }
  if (one-time initialization token for listRowSeparatorLeading != -1)
    swift_once();
  explicitInset #1 <A, B>(of:edge:) in UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)();
}

void explicitInset #1 <A, B>(of:edge:) in UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)()
{
  UICollectionViewListCoordinatorBase.collectionView.getter();
}

void *sub_186EFDEDC(void *result)
{
  char v1;
  uint64_t v2;
  void *v3;
  Class isa;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  char v14;
  double v15;
  id v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  double v26;
  double Width;
  id v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double MinX;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  if (!result)
    return result;
  v3 = result;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, sel_cellForItemAtIndexPath_, isa);

  if (!v5)
    return 0;
  type metadata accessor for AnyListCollectionViewCell();
  v6 = swift_dynamicCastClass();
  if (!v6)
  {
LABEL_8:

    return 0;
  }
  v7 = (_QWORD *)v6;
  v5 = v5;
  v8 = objc_msgSend(v7, sel_contentView);
  objc_msgSend(v8, sel_frame);
  v10 = v9;
  v12 = v11;

  *(double *)&v13 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, double, double))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x68))(v2, v10, v12));
  if ((v14 & 1) != 0)
  {

    goto LABEL_8;
  }
  v15 = *(double *)&v13;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v7, sel_bounds);
    Width = CGRectGetWidth(v39);
    v28 = objc_msgSend(v7, sel_contentView);
    objc_msgSend(v28, sel_frame);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;

    v40.origin.x = v30;
    v40.origin.y = v32;
    v40.size.width = v34;
    v40.size.height = v36;
    MinX = CGRectGetMinX(v40);

    v26 = Width - (MinX + v15);
  }
  else
  {
    v16 = objc_msgSend(v7, sel_contentView);
    objc_msgSend(v16, sel_frame);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v24 = v23;

    v38.origin.x = v18;
    v38.origin.y = v20;
    v38.size.width = v22;
    v38.size.height = v24;
    v25 = CGRectGetMinX(v38);

    v26 = v25 + v15;
  }
  return *(void **)&v26;
}

void UICollectionViewListCoordinatorBase.collectionView.getter()
{
  JUMPOUT(0x18D760234);
}

uint64_t type metadata accessor for AnyListCollectionViewCell()
{
  return objc_opt_self();
}

uint64_t UICollectionViewListCoordinator.listAppearance.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v14;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v6 = v5[94];
  v7 = type metadata accessor for ShadowListDataSource(0, v5[92], *(_QWORD *)(v6 + 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v14 - v10;
  v12 = (char *)v4 + v5[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v12, v7);
  ShadowListDataSource<>.style.getter(v7, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t type metadata accessor for ShadowListDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShadowListDataSource);
}

uint64_t ShadowListDataSource<>.style.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppIntentExecutingLocation.get()(v7, (uint64_t)v6);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(v3, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AppIntentExecutingLocation.get()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t protocol witness for CollectionViewListDataSourceBase.style.getter in conformance CollectionViewListDataSource<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t ListCollectionViewCellBase.explicitAlignment(of:at:)()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = *(void **)((char *)v0 + direct field offset for ListCollectionViewCellBase.host);
  if (!v1)
    return 0;
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  type metadata accessor for CollectionViewCellModifier();
  v3 = type metadata accessor for ModifiedContent();
  v10[0] = *(_QWORD *)(*(_QWORD *)(v2 + 176) + 8);
  v10[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier, (uint64_t (*)(uint64_t))type metadata accessor for CollectionViewCellModifier, (uint64_t)&protocol conformance descriptor for CollectionViewCellModifier);
  v4 = v1;
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v10);
  v7 = type metadata accessor for _UIHostingView(0, v3, v5, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
  v8 = ViewRendererHost.explicitAlignment(of:at:)();

  return v8;
}

uint64_t protocol witness for ListCoreDataSource.separatorConfiguration(forRowAt:) in conformance CollectionViewListDataSource<A>(uint64_t *a1, uint64_t *a2)
{
  return CollectionViewListDataSource.separatorConfiguration(forRowAt:)(*a1, *a2);
}

uint64_t CollectionViewListDataSource.separatorConfiguration(forRowAt:)(uint64_t a1, uint64_t a2)
{
  Swift::tuple_SwiftUI_ListRowSeparatorVisitor_Options_tuple_Int_Int v3;

  v3 = ListSectionInfo.separatorVisitorOptions(forRowAt:)(*(Swift::tuple_Int_Int *)&a1);
  specialized ListSectionInfo.visitRow<A>(index:visitor:)(v3._1._0, v3._1._1);
  swift_retain();
  swift_retain();
  outlined consume of ListRowSeparatorVisitor.Neighbor?(0x3FFFFFFFCuLL, 0, 0);
  swift_release();
  swift_release();
  outlined consume of ListRowSeparatorVisitor.Neighbor?(0x3FFFFFFFCuLL, 0, 0);
  return 0;
}

uint64_t outlined consume of ListRowSeparatorVisitor.Neighbor()
{
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD *, uint64_t, uint64_t);
  void *v13;
  id v14;
  _QWORD v15[5];
  _BYTE v16[88];

  v6 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v5)
    return 1;
  v10 = result;
  v11 = result + 32;
  v12 = *(uint64_t (**)(_BYTE *, _QWORD *, uint64_t, uint64_t))(a5 + 8);
  while (v6 < v5)
  {
    outlined init with copy of TableColumnList(v11, (uint64_t)v15);
    v13 = *(void **)(a2 + 48);
    swift_bridgeObjectRetain();
    v14 = v13;
    _ViewList_View.init(elements:id:index:count:contentSubgraph:)();
    v15[0] = *(_QWORD *)(v10 + 72);
    LOBYTE(v13) = v12(v16, v15, a4, a5);
    result = outlined destroy of _ViewList_View((uint64_t)v16);
    if ((v13 & 1) == 0)
      return 0;
    if (v5 == ++v6)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of _ViewList_View(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE0A40] - 8) + 8))();
  return a1;
}

unint64_t outlined consume of ListRowSeparatorVisitor.Neighbor?(unint64_t result, uint64_t a2, unint64_t a3)
{
  if (result >> 2 != 0xFFFFFFFF || a3 >= 4)
    return outlined consume of ListRowSeparatorVisitor.Neighbor();
  return result;
}

uint64_t protocol witness for ViewListVisitor.visit(view:traits:) in conformance ListContentVisitor<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  ListContentVisitor.visit(view:traits:)(a1, a2, a3);
  return 0;
}

uint64_t ListCoreDataSource.separatorConfiguration(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a1;
  v5 = *(_QWORD *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v18 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v18 - v14;
  ListDiffable.rowIndex(at:)((uint64_t)&v18 - v14, (uint64_t)v10, v19, a2, v5);
  v16 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a3 + 216))(v15, v10, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return v16;
}

Swift::tuple_SwiftUI_ListRowSeparatorVisitor_Options_tuple_Int_Int __swiftcall ListSectionInfo.separatorVisitorOptions(forRowAt:)(Swift::tuple_Int_Int forRowAt)
{
  Swift::Int v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  Swift::Int v11;
  Swift::Int v12;
  BOOL v15;
  Swift::tuple_SwiftUI_ListRowSeparatorVisitor_Options_tuple_Int_Int result;

  if (forRowAt._0 < 0)
    goto LABEL_24;
  v3 = forRowAt._0;
  v4 = *(_QWORD *)(v2 + 56);
  if (*(_QWORD *)(v4 + 16) <= forRowAt._0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    if (forRowAt._1 != 0x8000000000000000)
LABEL_29:
      __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v5 = *(_QWORD *)(v4 + 184 * forRowAt._0 + 128);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    goto LABEL_28;
  v7 = v5 + 48 * v6;
  v9 = *(_QWORD *)(v7 + 16);
  v8 = *(_QWORD *)(v7 + 24);
  v10 = __OFADD__(v8, v9);
  v11 = v8 + v9;
  if (v10)
    goto LABEL_26;
  v12 = *(_QWORD *)(v5 + 72);
  if (v11 < v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v12 != v11 && v12 == forRowAt._1)
  {
    forRowAt._0 = 1;
    v1 = forRowAt._1;
    v15 = v12 < v11;
    if (v12 == v11)
      goto LABEL_16;
  }
  else
  {
    v1 = forRowAt._1 - 1;
    if (__OFSUB__(forRowAt._1, 1))
      goto LABEL_30;
    if (v1 >= v11 || v1 < v12)
      goto LABEL_29;
    forRowAt._0 = 0;
    v15 = v12 < v11;
    if (v12 == v11)
    {
LABEL_16:
      forRowAt._1 = v3;
      goto LABEL_31;
    }
  }
  if (!v15)
    goto LABEL_27;
  if (v11 - 1 == forRowAt._1)
    forRowAt._0 |= 2uLL;
  forRowAt._1 = v3;
LABEL_31:
  result._0 = (SwiftUI::ListRowSeparatorVisitor::Options)forRowAt._0;
  result._1._0 = forRowAt._1;
  result._1._1 = v1;
  return result;
}

uint64_t ListCollectionViewCellBase.updateConfiguration(using:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  char *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t aBlock[3];
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;
  _QWORD v58[2];
  objc_super v59;

  v2 = v1;
  v4 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1;
  v5 = type metadata accessor for UIListContentConfiguration();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  v15 = *(_QWORD *)(v4 + 168);
  v53 = *(_QWORD *)(v4 + 176);
  v17 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, v15, v53, v16);
  v59.receiver = v2;
  v59.super_class = v17;
  objc_msgSendSuper2(&v59, sel__bridgedUpdateConfigurationUsingState_, isa);

  v18 = UICellConfigurationState.isEditing.getter();
  v19 = direct field offset for ListCollectionViewCellBase.wasEditing;
  if ((v18 & 1) != v2[direct field offset for ListCollectionViewCellBase.wasEditing])
  {
    v20 = *(_QWORD **)&v2[direct field offset for ListCollectionViewCellBase.host];
    if (v20)
      *((_BYTE *)v20 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v20) + 0xB8)) = 1;
    v2[v19] = UICellConfigurationState.isEditing.getter() & 1;
  }
  MEMORY[0x18D75DB58]();
  v21 = type metadata accessor for UICellConfigurationState();
  v55 = (void *)v21;
  v56 = (uint64_t (*)())MEMORY[0x1E0DC2018];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(aBlock);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(boxed_opaque_existential_1, a1, v21);
  UIListContentConfiguration.updated(for:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
  v23 = (uint64_t)&v2[direct field offset for ListCollectionViewCellBase.lastConfiguration];
  swift_beginAccess();
  outlined assign with take of UIListContentConfiguration?((uint64_t)v13, v23);
  swift_endAccess();
  v24 = direct field offset for ListCollectionViewCellBase.host;
  v25 = *(void **)&v2[direct field offset for ListCollectionViewCellBase.host];
  if (v25)
  {
    LOWORD(aBlock[0]) = 2;
    type metadata accessor for CollectionViewCellModifier();
    v26 = type metadata accessor for ModifiedContent();
    v27 = *(_QWORD *)(v53 + 8);
    v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier, (uint64_t (*)(uint64_t))type metadata accessor for CollectionViewCellModifier, (uint64_t)&protocol conformance descriptor for CollectionViewCellModifier);
    v58[0] = v27;
    v58[1] = v28;
    v29 = v25;
    v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v26, v58);
    v32 = type metadata accessor for _UIHostingView(0, v26, v30, v31);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v32);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    v33 = *(void **)&v2[v24];
    if (v33)
    {
      v34 = v33;
      v35 = objc_msgSend(v2, sel_contentView);
      objc_msgSend(v35, sel_bounds);
      v37 = v36;
      v39 = v38;
      v41 = v40;
      v43 = v42;

      objc_msgSend(v34, sel_setFrame_, v37, v39, v41, v43);
    }
  }
  result = UICellConfigurationState.isSwiped.getter();
  v45 = direct field offset for ListCollectionViewCellBase.wasSwiped;
  if ((result & 1) != v2[direct field offset for ListCollectionViewCellBase.wasSwiped])
  {
    result = ListCollectionViewCellBase.canUpdateSwipeActionPresentationBinding.getter();
    if ((result & 1) != 0)
    {
      v2[v45] = UICellConfigurationState.isSwiped.getter() & 1;
      if ((UICellConfigurationState.isSwiped.getter() & 1) != 0)
      {
        return ListCollectionViewCellBase.updateSwipeActionPresentationBinding()();
      }
      else
      {
        v46 = swift_allocObject();
        *(_QWORD *)(v46 + 16) = v2;
        v47 = (void *)objc_opt_self();
        v48 = swift_allocObject();
        *(_QWORD *)(v48 + 16) = partial apply for closure #1 in ListCollectionViewCellBase.updateConfiguration(using:);
        *(_QWORD *)(v48 + 24) = v46;
        v56 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
        v57 = v48;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
        v55 = &block_descriptor_10;
        v49 = _Block_copy(aBlock);
        v50 = v2;
        swift_retain();
        swift_release();
        v51 = objc_msgSend(v47, sel__addCompletion_, v49);
        _Block_release(v49);
        if (!v51)
          ListCollectionViewCellBase.updateSwipeActionPresentationBinding()();
        return swift_release();
      }
    }
  }
  return result;
}

void @objc _UIHostingView.frame.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;

  v9 = a1;
  _UIHostingView.frame.setter((SEL *)&selRef_frame, (SEL *)&selRef_setFrame_, a2, a3, a4, a5);

}

uint64_t outlined assign with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UIListContentConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC23A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t ListCoreDataSource.selectionValue(forRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a5;
  v29 = a2;
  v30 = a4;
  swift_getAssociatedTypeWitness();
  v28 = a3;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v27 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v25 - v16;
  v19 = (char *)&v25 + *(int *)(v18 + 48) - v16;
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16);
  v20((char *)&v25 - v16, a1, AssociatedTypeWitness, v15);
  v21 = *(_QWORD *)(v8 - 8);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v22(v19, v29, v8);
  v23 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v20)(v12, v17, AssociatedTypeWitness);
  v22(v23, (uint64_t)v19, v8);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(v30 + 224))(v12, v23, 1, v28);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v17, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v12, AssociatedTypeWitness);
}

unint64_t specialized ListSectionInfo.visitRow<A>(index:visitor:)(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5[11];
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  _BYTE v12[56];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v2 + 56);
  if (*(_QWORD *)(v3 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = outlined init with copy of SectionAccumulator.Item(v3 + 184 * result + 32, (uint64_t)v12);
  if (__OFADD__(v17, a2))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v11 = v17 + a2;
  if (v14)
  {
    LODWORD(v9[0]) = v13;
    v9[1] = v14;
    v9[2] = v15;
    v10 = v16 & 1;
    _ViewList_Section.content.getter();
    outlined init with take of OptionalBinaryInteger(v5, (uint64_t)&v6);
  }
  else
  {
    v8 = 0;
    v6 = 0u;
    v7 = 0u;
  }
  outlined init with copy of SectionAccumulator.Item((uint64_t)v12, (uint64_t)v5);
  if (*((_QWORD *)&v7 + 1))
  {
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
    outlined init with take of OptionalBinaryInteger(&v6, (uint64_t)v9);
  }
  else
  {
    outlined init with copy of TableColumnList((uint64_t)v5 + 8, (uint64_t)v9);
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v6, (uint64_t (*)(_QWORD))type metadata accessor for ViewList?);
  }
  specialized ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return outlined destroy of SectionAccumulator.Item((uint64_t)v12);
}

unint64_t ListSectionInfo.visitRow<A>(index:visitor:)(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5[11];
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  _BYTE v12[56];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v2 + 56);
  if (*(_QWORD *)(v3 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = outlined init with copy of SectionAccumulator.Item(v3 + 184 * result + 32, (uint64_t)v12);
  if (__OFADD__(v18, a2))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v11 = v18 + a2;
  if (v14)
  {
    LODWORD(v9[0]) = v13;
    v9[1] = v14;
    v9[2] = v15;
    v10 = v16 & 1;
    _ViewList_Section.content.getter();
    outlined init with take of OptionalBinaryInteger(v5, (uint64_t)&v6);
  }
  else
  {
    v8 = 0;
    v6 = 0u;
    v7 = 0u;
  }
  outlined init with copy of SectionAccumulator.Item((uint64_t)v12, (uint64_t)v5);
  if (*((_QWORD *)&v7 + 1))
  {
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
    outlined init with take of OptionalBinaryInteger(&v6, (uint64_t)v9);
  }
  else
  {
    outlined init with copy of TableColumnList((uint64_t)v5 + 8, (uint64_t)v9);
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
    outlined destroy of ViewList?((uint64_t)&v6);
  }
  *(_QWORD *)&v5[0] = v17;
  ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return outlined destroy of SectionAccumulator.Item((uint64_t)v12);
}

uint64_t ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(_QWORD *a1)
{
  MEMORY[0x18D75B908]();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  AGWeakAttributeGetAttribute();
  swift_bridgeObjectRetain();
  ViewList.applySublists(from:list:transform:to:)();
  swift_bridgeObjectRelease();
  return static Update.end()();
}

uint64_t ListContentStyling.init(configuration:insets:minHeight:tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  char v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  Class isa;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  double v58;
  char *v59;
  char *v60;
  objc_class *v61;
  objc_class *v62;
  void (*v63)(char *, uint64_t);
  _QWORD v65[3];
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  Class v78;
  char v79;

  v77 = a1;
  v15 = type metadata accessor for UIListContentConfiguration.ImageProperties();
  v68 = *(_QWORD *)(v15 - 8);
  v69 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UIListContentConfiguration.TextProperties.TextTransform();
  v73 = *(_QWORD *)(v19 - 8);
  v74 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v72 = (char *)v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v71 = (char *)v65 - v24;
  v25 = type metadata accessor for UIListContentConfiguration.TextProperties();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (char *)v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for UIListContentConfiguration();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v36);
  v70 = (char *)v65 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)v65 - v40;
  v76 = *(_QWORD *)a2;
  v75 = *(unsigned __int8 *)(a2 + 8);
  v42 = v77;
  v79 = 0;
  outlined init with copy of UIListContentConfiguration?(v77, (uint64_t)v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
  {
    outlined destroy of UIListContentConfiguration?(v42);
    outlined destroy of UIListContentConfiguration?((uint64_t)v33);
    outlined consume of Transaction?(1);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 10.0;
    v47 = v75;
    v48 = v76;
  }
  else
  {
    v66 = v18;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v41, v33, v34);
    UIListContentConfiguration.textProperties.getter();
    UIListContentConfiguration.TextProperties.font.getter();
    v49 = *(void (**)(char *, uint64_t))(v26 + 8);
    v49(v29, v25);
    v67 = Font.init(_:)();
    UIListContentConfiguration.textProperties.getter();
    isa = UIListContentConfiguration.TextProperties.resolvedColor()().super.isa;
    v49(v29, v25);
    v78 = isa;
    v51 = type metadata accessor for UIColor();
    v52 = lazy protocol witness table accessor for type UIColor and conformance UIColor();
    v65[2] = v51;
    v65[1] = v52;
    v45 = Color.init<A>(provider:)();
    UIListContentConfiguration.textProperties.getter();
    v53 = v71;
    UIListContentConfiguration.TextProperties.transform.getter();
    v49(v29, v25);
    v55 = v72;
    v54 = v73;
    v56 = v74;
    (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, *MEMORY[0x1E0DC21D8], v74);
    LOBYTE(v51) = MEMORY[0x18D755764](v53, v55);
    v57 = *(void (**)(char *, uint64_t))(v54 + 8);
    v57(v55, v56);
    v57(v53, v56);
    v79 = v51 & 1;
    UIListContentConfiguration.imageToTextPadding.getter();
    v46 = v58;
    v59 = v70;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v70, v41, v34);
    v48 = v76;
    if (v76 == 1)
    {
      v60 = v66;
      UIListContentConfiguration.imageProperties.getter();
      v61 = (objc_class *)UIListContentConfiguration.ImageProperties.tintColor.getter();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v69);
      if (v61)
      {
        v78 = v61;
        v62 = v61;
        v48 = Color.init<A>(provider:)();
        v47 = 1;
      }
      else
      {
        v47 = 0;
        v48 = 1;
      }
      outlined destroy of UIListContentConfiguration?(v77);

    }
    else
    {
      outlined destroy of UIListContentConfiguration?(v77);
      v47 = v75;
    }
    v63 = *(void (**)(char *, uint64_t))(v35 + 8);
    v63(v59, v34);
    v63(v41, v34);
    outlined consume of Transaction?(1);
    v43 = v79;
    v44 = v67;
  }
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  *(double *)(a3 + 24) = a7;
  *(double *)(a3 + 32) = a8;
  *(_QWORD *)(a3 + 40) = v44;
  *(_QWORD *)(a3 + 48) = v45;
  *(_BYTE *)(a3 + 56) = v43;
  *(double *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v48;
  *(_BYTE *)(a3 + 80) = v47;
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v48);
  swift_release();
  swift_release();
  return outlined consume of Transaction?(v48);
}

uint64_t Color.init(uiColor:)()
{
  type metadata accessor for UIColor();
  _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
  return Color.init<A>(provider:)();
}

uint64_t outlined destroy of UIListContentConfiguration?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for UIListContentConfiguration?(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIListContentConfiguration?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void _UIHostingView.isHiddenForReuse.setter(char a1)
{
  _QWORD *v1;
  _BYTE *v3;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF8);
  swift_beginAccess();
  *v3 = a1;
  _UIHostingView.updateRemovedState()();
}

uint64_t outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for CollectionViewCellModifier();
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t assignWithCopy for Section(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)(v20 + 8);
  if (*(_QWORD *)(v19 + 8) < 0xFFFFFFFFuLL)
  {
    if (v21 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_7:
    v22 = *(_OWORD *)v20;
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    *(_OWORD *)v19 = v22;
    return a1;
  }
  if (v21 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_retain();
  swift_release();
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

uint64_t assignWithCopy for PickerBuilder.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 24))();
  return a1;
}

_QWORD *assignWithCopy for TableRowContextMenuTraitKey.Storage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for StaticIf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *assignWithCopy for AlertTransformModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_WORD *assignWithCopy for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int16 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *v48;
  uint64_t v49;

  v5 = a1;
  *a1 = *a2;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 2;
  v10 = ((unint64_t)v5 + v9) & ~(v8 | 7);
  v11 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  if (v10 != v11)
  {
    v12 = v6;
    v49 = *(_QWORD *)(v7 + 64);
    v13 = ((v8 + 75) & ~v8) + v49;
    if ((unint64_t)(v13 + 1) > 0x30)
      v14 = v13 + 1;
    else
      v14 = 48;
    v15 = *(unsigned __int8 *)(v10 + v14);
    if (v15 >= 3)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));

    }
    else if (v15 == 1)
    {
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_WORD *)(v10 + 32), *(_BYTE *)(v10 + 34));
      v18 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16), *(_QWORD *)(v18 + 24), *(_WORD *)(v18 + 32), *(_BYTE *)(v18 + 34));
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v8 + v18 + 35) & ~v8, v12);
      goto LABEL_18;
    }
    swift_release();
LABEL_18:
    v19 = *(unsigned __int8 *)(v11 + v14);
    if (v19 >= 3)
    {
      if (v14 <= 3)
        v20 = v14;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == 2)
    {
      v34 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v11 + 8);
      v36 = *(_BYTE *)(v11 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, v35, v36);
      *(_QWORD *)v10 = v34;
      *(_QWORD *)(v10 + 8) = v35;
      *(_BYTE *)(v10 + 16) = v36;
      v37 = *(void **)(v11 + 24);
      *(_QWORD *)(v10 + 24) = v37;
      v38 = *(_QWORD *)(v11 + 40);
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
      *(_QWORD *)(v10 + 40) = v38;
      *(_BYTE *)(v10 + v14) = 2;
      v39 = v37;
    }
    else
    {
      if (v19 == 1)
      {
        v46 = v12;
        v21 = *(_QWORD *)v11;
        v22 = *(_QWORD *)(v11 + 8);
        v47 = a3;
        v48 = v5;
        v23 = *(_QWORD *)(v11 + 16);
        v24 = *(_QWORD *)(v11 + 24);
        v45 = v7;
        v25 = *(_BYTE *)(v11 + 34);
        v26 = *(_WORD *)(v11 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v11, v22, v23, v24, v26, v25);
        *(_QWORD *)v10 = v21;
        *(_QWORD *)(v10 + 8) = v22;
        *(_QWORD *)(v10 + 16) = v23;
        *(_QWORD *)(v10 + 24) = v24;
        *(_WORD *)(v10 + 32) = v26;
        *(_BYTE *)(v10 + 34) = v25;
        v27 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
        v28 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
        v29 = *(_QWORD *)v28;
        v43 = *(_QWORD *)(v28 + 8);
        v30 = *(_QWORD *)(v28 + 16);
        v31 = *(_QWORD *)(v28 + 24);
        v44 = *(_BYTE *)(v28 + 34);
        v32 = *(_WORD *)(v28 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v28, v43, v30, v31, v32, v44);
        *(_QWORD *)v27 = v29;
        *(_QWORD *)(v27 + 8) = v43;
        *(_QWORD *)(v27 + 16) = v30;
        *(_QWORD *)(v27 + 24) = v31;
        a3 = v47;
        v5 = v48;
        *(_WORD *)(v27 + 32) = v32;
        *(_BYTE *)(v27 + 34) = v44;
        v33 = (v8 + 35 + v28) & ~v8;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v45 + 16))((v8 + 35 + v27) & ~v8, v33, v46);
        *(_BYTE *)(v49 + ((v8 + 35 + v27) & ~v8)) = *(_BYTE *)(v49 + v33);
        *(_BYTE *)(v10 + v14) = 1;
        goto LABEL_29;
      }
      v40 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = v40;
      *(_BYTE *)(v10 + v14) = 0;
    }
    swift_retain();
    goto LABEL_29;
  }
  v17 = ((v8 + 75) & ~v8) + *(_QWORD *)(v7 + 64);
  if ((unint64_t)(v17 + 1) > 0x30)
    v14 = v17 + 1;
  else
    v14 = 48;
LABEL_29:
  v41 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v41 + 24))((v14 + *(unsigned __int8 *)(v41 + 80) + 1 + v10) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80), (v14 + *(unsigned __int8 *)(v41 + 80) + 1 + v11) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  return v5;
}

_WORD *assignWithCopy for ResolvedButtonStyle(_WORD *a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;

  *a1 = *a2;
  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v5 = *(int *)(v4 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v5, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v25 = *(_QWORD *)v7;
      v26 = *((_QWORD *)v7 + 1);
      v27 = v7[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, v26, v27, (uint64_t (*)(void))outlined copy of AppIntentExecutor?);
      *(_QWORD *)v6 = v25;
      *((_QWORD *)v6 + 1) = v26;
      v6[16] = v27;
      v28 = (void *)*((_QWORD *)v7 + 3);
      *((_QWORD *)v6 + 3) = v28;
      v29 = *((_QWORD *)v7 + 5);
      *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
      *((_QWORD *)v6 + 5) = v29;
      v30 = v28;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v9 = *(_QWORD *)v7;
        v10 = *((_QWORD *)v7 + 1);
        v11 = *((_QWORD *)v7 + 2);
        v12 = *((_QWORD *)v7 + 3);
        v13 = v7[34];
        v14 = *((_WORD *)v7 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v7, v10, v11, v12, v14, v13);
        *(_QWORD *)v6 = v9;
        *((_QWORD *)v6 + 1) = v10;
        *((_QWORD *)v6 + 2) = v11;
        *((_QWORD *)v6 + 3) = v12;
        *((_WORD *)v6 + 16) = v14;
        v6[34] = v13;
        v15 = *((_QWORD *)v7 + 5);
        v16 = *((_QWORD *)v7 + 6);
        v17 = *((_QWORD *)v7 + 7);
        v18 = *((_QWORD *)v7 + 8);
        LOBYTE(v12) = v7[74];
        v19 = *((_WORD *)v7 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v19, v12);
        *((_QWORD *)v6 + 5) = v15;
        *((_QWORD *)v6 + 6) = v16;
        *((_QWORD *)v6 + 7) = v17;
        *((_QWORD *)v6 + 8) = v18;
        *((_WORD *)v6 + 36) = v19;
        v6[74] = v12;
        v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v21 = &v6[v20];
        v22 = &v7[v20];
        v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v31 = *((_QWORD *)v7 + 1);
      *(_QWORD *)v6 = *(_QWORD *)v7;
      *((_QWORD *)v6 + 1) = v31;
    }
    swift_retain();
    goto LABEL_8;
  }
  return a1;
}

uint64_t assignWithCopy for SubscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for EditModeScopeModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for CollectionViewCellModifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + v14, (uint64_t (*)(_QWORD))type metadata accessor for Environment<UIListContentConfiguration?>.Content);
    type metadata accessor for Environment<UIListContentConfiguration?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = type metadata accessor for UIListContentConfiguration();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        type metadata accessor for UIListContentConfiguration?(0);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
    }
    else
    {
      *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v20 = a3[7];
    v21 = (_QWORD *)(a1 + v20);
    v22 = (_QWORD *)(a2 + v20);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + v20, (uint64_t (*)(_QWORD))type metadata accessor for Environment<UIListContentConfiguration?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = type metadata accessor for UIListContentConfiguration();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        type metadata accessor for UIListContentConfiguration?(0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    else
    {
      *v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v26 = a3[8];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = *(_QWORD *)(v28 + 8);
  v31 = *(_BYTE *)(v28 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v28, v30, v31);
  v32 = *(_QWORD *)v27;
  v33 = *(_QWORD *)(v27 + 8);
  v34 = *(_BYTE *)(v27 + 16);
  *(_QWORD *)v27 = v29;
  *(_QWORD *)(v27 + 8) = v30;
  *(_BYTE *)(v27 + 16) = v31;
  outlined consume of Environment<CGFloat?>.Content(v32, v33, v34);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v35 = a3[10];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_BYTE *)(v37 + 32);
  v39 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v39;
  *(_BYTE *)(v36 + 32) = v38;
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v40 = a3[13];
  v41 = a1 + v40;
  v42 = (uint64_t *)(a2 + v40);
  v43 = *(_QWORD *)(a2 + v40);
  if (*(_QWORD *)(a1 + v40) == 1)
  {
    if (v43 == 1)
    {
      v44 = *v42;
      *(_BYTE *)(v41 + 8) = *((_BYTE *)v42 + 8);
      *(_QWORD *)v41 = v44;
    }
    else
    {
      *(_QWORD *)v41 = v43;
      *(_BYTE *)(v41 + 8) = *((_BYTE *)v42 + 8);
      swift_retain();
    }
  }
  else
  {
    if (v43 == 1)
    {
      outlined destroy of ListItemTint(a1 + v40);
      v45 = *((_BYTE *)v42 + 8);
      *(_QWORD *)v41 = *v42;
    }
    else
    {
      *(_QWORD *)v41 = v43;
      swift_retain();
      swift_release();
      v45 = *((_BYTE *)v42 + 8);
    }
    *(_BYTE *)(v41 + 8) = v45;
  }
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  if (a1 != a2)
  {
    v46 = a3[16];
    v47 = a1 + v46;
    v48 = a2 + v46;
    outlined destroy of AccessibilityScrollableContext(a1 + v46);
    v49 = *(unsigned __int8 *)(v48 + 70);
    if (v49 == 2)
    {
      v50 = *(_QWORD *)(v48 + 24);
      *(_QWORD *)(v47 + 24) = v50;
      *(_QWORD *)(v47 + 32) = *(_QWORD *)(v48 + 32);
      (**(void (***)(uint64_t, uint64_t))(v50 - 8))(v47, v48);
      *(_DWORD *)(v47 + 40) = *(_DWORD *)(v48 + 40);
      *(_DWORD *)(v47 + 44) = *(_DWORD *)(v48 + 44);
      *(_QWORD *)(v47 + 48) = *(_QWORD *)(v48 + 48);
    }
    else if (v49 == 1)
    {
      *(_DWORD *)v47 = *(_DWORD *)v48;
      *(_DWORD *)(v47 + 4) = *(_DWORD *)(v48 + 4);
      *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
    }
    else
    {
      v51 = *(_QWORD *)(v48 + 24);
      *(_QWORD *)(v47 + 24) = v51;
      *(_QWORD *)(v47 + 32) = *(_QWORD *)(v48 + 32);
      (**(void (***)(uint64_t, uint64_t))(v51 - 8))(v47, v48);
      *(_BYTE *)(v47 + 40) = *(_BYTE *)(v48 + 40);
      *(_DWORD *)(v47 + 48) = *(_DWORD *)(v48 + 48);
      *(_DWORD *)(v47 + 52) = *(_DWORD *)(v48 + 52);
      *(_QWORD *)(v47 + 56) = *(_QWORD *)(v48 + 56);
      v52 = *(_DWORD *)(v48 + 64);
      *(_WORD *)(v47 + 68) = *(_WORD *)(v48 + 68);
      *(_DWORD *)(v47 + 64) = v52;
    }
    *(_BYTE *)(v47 + 70) = v49;
    swift_retain();
  }
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t assignWithTake for CollectionViewCellModifier(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  if ((uint64_t *)a1 != a2)
  {
    v13 = a3[6];
    v14 = (void *)(a1 + v13);
    v15 = (char *)a2 + v13;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + v13, (uint64_t (*)(_QWORD))type metadata accessor for Environment<UIListContentConfiguration?>.Content);
    type metadata accessor for Environment<UIListContentConfiguration?>.Content(0);
    v17 = v16;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = type metadata accessor for UIListContentConfiguration();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18))
      {
        type metadata accessor for UIListContentConfiguration?(0);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v19 + 32))(v14, v15, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    v21 = a3[7];
    v22 = (void *)(a1 + v21);
    v23 = (char *)a2 + v21;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + v21, (uint64_t (*)(_QWORD))type metadata accessor for Environment<UIListContentConfiguration?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v24 = type metadata accessor for UIListContentConfiguration();
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        type metadata accessor for UIListContentConfiguration?(0);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v27 = a3[8];
  v28 = a1 + v27;
  v29 = (uint64_t)a2 + v27;
  v30 = *(_BYTE *)(v29 + 16);
  v31 = *(_QWORD *)v28;
  v32 = *(_QWORD *)(v28 + 8);
  v33 = *(_BYTE *)(v28 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_BYTE *)(v28 + 16) = v30;
  outlined consume of Environment<CGFloat?>.Content(v31, v32, v33);
  v34 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v35 = a1 + v34;
  v36 = (uint64_t)a2 + v34;
  v37 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v37;
  *(_BYTE *)(v35 + 32) = *(_BYTE *)(v36 + 32);
  v38 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *(_BYTE *)(a1 + v38) = *((_BYTE *)a2 + v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = (uint64_t)a2 + v39;
  if (*(_QWORD *)(a1 + v39) == 1)
    goto LABEL_17;
  if (*(_QWORD *)v41 == 1)
  {
    outlined destroy of ListItemTint(v40);
LABEL_17:
    *(_QWORD *)v40 = *(_QWORD *)v41;
    goto LABEL_19;
  }
  *(_QWORD *)v40 = *(_QWORD *)v41;
  swift_release();
LABEL_19:
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  v42 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *(_QWORD *)(a1 + v42) = *(uint64_t *)((char *)a2 + v42);
  if ((uint64_t *)a1 != a2)
  {
    v43 = a3[16];
    v44 = (uint64_t)a2 + v43;
    v45 = a1 + v43;
    outlined destroy of AccessibilityScrollableContext(a1 + v43);
    v46 = *(_OWORD *)(v44 + 48);
    *(_OWORD *)(v45 + 32) = *(_OWORD *)(v44 + 32);
    *(_OWORD *)(v45 + 48) = v46;
    *(_QWORD *)(v45 + 63) = *(_QWORD *)(v44 + 63);
    v47 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)v45 = *(_OWORD *)v44;
    *(_OWORD *)(v45 + 16) = v47;
  }
  *(_BYTE *)(a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  return a1;
}

uint64_t outlined destroy of AccessibilityScrollableContext(uint64_t a1)
{
  destroy for AccessibilityScrollableContext(a1);
  return a1;
}

uint64_t destroy for AccessibilityScrollableContext(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 70);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (v1 != 1)
    __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

uint64_t assignWithCopy for ButtonBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v7;
      *(_QWORD *)(a1 + 64) = v9;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  swift_retain();
  swift_release();
LABEL_8:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

_DWORD *assignWithCopy for ContextMenuModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v5 = (unint64_t)a2 + 27;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 27;
  v7 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v8, v10);
  v11 = *(_QWORD *)v7;
  v12 = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  v13 = v6 & 0xFFFFFFFFFFFFFFF8;
  v14 = v5 & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  LOBYTE(v9) = *(_BYTE *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(v15, v9);
  v16 = *(_QWORD *)v13;
  v17 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v9;
  outlined consume of Environment<Bool>.Content(v16, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))((*(unsigned __int8 *)(v18 + 80) + 9 + v13) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(unsigned __int8 *)(v18 + 80) + 9 + v14) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

_QWORD *assignWithCopy for OnTestViewModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    v1 = type metadata accessor for IndexSet();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB13E8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    v1 = type metadata accessor for IndexSet();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB13F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

uint64_t ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v10 = *(_QWORD *)(a5 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v15 = (char *)&v17 - v14;
  ListDiffable.sectionIndex(atOffset:)(a3, a4, v10);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(a5 + 88))(a1, a2, v15, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
}

void ShadowListDataSource.configureHeader(_:transaction:forSectionAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v9 = *(_QWORD *)(v5 - 8);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v15 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v5, v12);
  type metadata accessor for ShadowListUpdateRecorder(0, v5, v6, v14);
  ShadowListUpdateRecorder.initialIndex(_:)();
}

uint64_t sub_186F012FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v1 + 88))(*(_QWORD *)(v7 - 96), *(_QWORD *)(v7 - 88), v5, v0, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v0);
}

uint64_t protocol witness for ListCoreDataSource.configureHeader(_:transaction:forSectionAt:) in conformance CollectionViewListDataSource<A>(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  return CollectionViewListDataSource.configureHeader(_:transaction:forSectionAt:)(a1, a2, *a3, a4);
}

uint64_t CollectionViewListDataSource.configureHeader(_:transaction:forSectionAt:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  id v8;
  char v10[8];
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(v4 + *(int *)(a4 + 56));
  v10[0] = 1;
  v11 = a1;
  v12 = a2;
  v13 = v7;
  v8 = a1;
  outlined copy of Transaction?(a2);
  specialized ListSectionInfo.visitHeader<A>(index:visitor:)(a3, (uint64_t)v10, (void (*)(_QWORD *))MEMORY[0x1E0CE4140]);

  return outlined consume of Transaction?(a2);
}

uint64_t assignWithCopy for SectionStyleConfiguration(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1);
      v5 = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v6 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  return a1;
}

_BYTE *assignWithCopy for AccessibilityLargeContentViewModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithCopy for TextFieldState.DeprecatedActions(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for ButtonSpringLoadedInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for ButtonRepeatModifier(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 16) = *((_WORD *)v2 + 8);
  v4 = v2[4];
  *(_QWORD *)(a1 + 24) = v2[3];
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  v5 = (void *)v2[5];
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v7 = v5;

  *(_BYTE *)(a1 + 48) = *((_BYTE *)v2 + 48);
  *(_QWORD *)(a1 + 56) = v2[7];
  swift_retain();
  swift_release();
  v8 = v2[8];
  LOBYTE(v2) = *((_BYTE *)v2 + 72);
  outlined copy of ResolvedTableRowIDs.Storage(v8, (char)v2);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = (_BYTE)v2;
  outlined consume of ResolvedTableRowIDs.Storage(v9, v10);
  return a1;
}

uint64_t assignWithCopy for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for _ButtonGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v7;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain();
  swift_release();
LABEL_8:
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  return a1;
}

void UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedTypeWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  char v50;
  Class v51;
  id v52;
  unsigned __int8 v53;
  Class v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  void (*v59)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  int v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t (*v82)(void);
  uint64_t (*v83)(uint64_t);
  char *v84;
  uint64_t (*v85)(uint64_t);
  char v86;
  void (*v87)(char *, uint64_t);
  uint64_t (*v88)(uint64_t, uint64_t);
  Class isa;
  id v90;
  unsigned int v91;
  Class v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;

  v110 = a2;
  v102 = a1;
  v3 = *MEMORY[0x1E0DEEDD8] & *v2;
  v4 = type metadata accessor for IndexPath();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
  v107 = v4;
  v105 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v99 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (IndexPath?, IndexPath?)();
  v108 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v101 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v103 = (uint64_t)&v93 - v13;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v98 = (uint64_t)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v104 = (char *)&v93 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v100 = (uint64_t)&v93 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v106 = (uint64_t)&v93 - v25;
  v26 = *(_QWORD *)(v3 + 104);
  v96 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v95 = (char *)&v93 - v29;
  v30 = type metadata accessor for Binding();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v94 = (char *)&v93 - v33;
  v97 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = type metadata accessor for Optional();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v39 = (char *)&v93 - v38;
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v93 - v43;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v110, v45, (uint64_t)v39);
  v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v39, 1, AssociatedTypeWitness);
  v109 = v2;
  if (v46 == 1)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    goto LABEL_10;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v44, v39, AssociatedTypeWitness);
  v47 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x100);
  swift_beginAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v47, 1, v30)
    || (v48 = v94,
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v94, v47, v30),
        v49 = v95,
        MEMORY[0x18D75B9C8](v30),
        (*(void (**)(char *, uint64_t))(v31 + 8))(v48, v30),
        v50 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v97 + 120) + 56))(v44, v26),
        (*(void (**)(char *, uint64_t))(v96 + 8))(v49, v26),
        (v50 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v44, AssociatedTypeWitness);
LABEL_10:
    v55 = v105;
    v56 = v106;
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16);
    v58 = v107;
    v57(v106, v110, v107);
    v59 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56);
    v59(v56, 0, 1, v58);
    v60 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v61 = (char *)v109 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v109) + 0xD8);
    swift_beginAccess();
    v62 = v103;
    v63 = v103 + *(int *)(v108 + 48);
    outlined init with copy of IndexPath?(v56, v103);
    v64 = (uint64_t)v61;
    v65 = v62;
    outlined init with copy of IndexPath?(v64, v63);
    v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
    v67 = v66(v65, 1, v58);
    v68 = (uint64_t)v104;
    if (v67 == 1)
    {
      outlined destroy of Binding<AttributedString>(v56, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      if (v66(v63, 1, v58) == 1)
      {
        v69 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
        v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
        v71 = v65;
LABEL_19:
        outlined destroy of Binding<AttributedString>(v71, &lazy cache variable for type metadata for IndexPath?, v69, v70);
        return;
      }
    }
    else
    {
      v72 = v100;
      outlined init with copy of IndexPath?(v65, v100);
      if (v66(v63, 1, v58) != 1)
      {
        v77 = v99;
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v99, v63, v58);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
        LODWORD(v97) = dispatch thunk of static Equatable.== infix(_:_:)();
        v78 = v65;
        v79 = v60;
        v80 = *(void (**)(char *, uint64_t))(v55 + 8);
        v81 = v77;
        v68 = (uint64_t)v104;
        v80(v81, v58);
        v82 = MEMORY[0x1E0CB1658];
        outlined destroy of Binding<AttributedString>(v106, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        v80((char *)v72, v107);
        v60 = v79;
        v58 = v107;
        v83 = (uint64_t (*)(uint64_t))v82;
        v55 = v105;
        outlined destroy of Binding<AttributedString>(v78, &lazy cache variable for type metadata for IndexPath?, v83, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        if ((v97 & 1) != 0)
          return;
LABEL_16:
        v57(v68, v110, v58);
        v59(v68, 0, 1, v58);
        v73 = (uint64_t)v109 + *(_QWORD *)((*v60 & *v109) + 0xE0);
        swift_beginAccess();
        v74 = v101;
        v75 = v101 + *(int *)(v108 + 48);
        outlined init with copy of IndexPath?(v68, v101);
        outlined init with copy of IndexPath?(v73, v75);
        if (v66(v74, 1, v58) == 1)
        {
          outlined destroy of Binding<AttributedString>(v68, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          if (v66(v75, 1, v58) == 1)
          {
            v69 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
            v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
            v71 = v74;
            goto LABEL_19;
          }
        }
        else
        {
          v76 = v98;
          outlined init with copy of IndexPath?(v74, v98);
          if (v66(v75, 1, v58) != 1)
          {
            v84 = v99;
            (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v99, v75, v58);
            v85 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
            v86 = dispatch thunk of static Equatable.== infix(_:_:)();
            v87 = *(void (**)(char *, uint64_t))(v55 + 8);
            v87(v84, v58);
            v88 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
            outlined destroy of Binding<AttributedString>(v68, &lazy cache variable for type metadata for IndexPath?, v85, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            v87((char *)v76, v58);
            outlined destroy of Binding<AttributedString>(v74, &lazy cache variable for type metadata for IndexPath?, v85, v88);
            if ((v86 & 1) != 0)
              return;
            goto LABEL_26;
          }
          outlined destroy of Binding<AttributedString>(v68, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v76, v58);
        }
        outlined destroy of (IndexPath?, IndexPath?)(v74);
LABEL_26:
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v90 = objc_msgSend(v102, sel_cellForItemAtIndexPath_, isa);

        if (v90)
        {
          v91 = objc_msgSend(v90, sel_isSelected);

          if (v91)
          {
            v92 = IndexPath._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v102, sel_deselectItemAtIndexPath_animated_, v92, UICollectionViewListCoordinatorBase.isAnimated.getter() & 1);

          }
        }
        return;
      }
      outlined destroy of Binding<AttributedString>(v106, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v72, v58);
    }
    outlined destroy of (IndexPath?, IndexPath?)(v65);
    goto LABEL_16;
  }
  v51 = IndexPath._bridgeToObjectiveC()().super.isa;
  v52 = objc_msgSend(v102, sel_cellForItemAtIndexPath_, v51);

  if (!v52 || (v53 = objc_msgSend(v52, sel_isSelected), v52, (v53 & 1) == 0))
  {
    v54 = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v102, sel_selectItemAtIndexPath_animated_scrollPosition_, v54, UICollectionViewListCoordinatorBase.isAnimated.getter() & 1, 0);

  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v44, AssociatedTypeWitness);
}

uint64_t destroy for SelectionManagerBox(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = v5 + 1;
  if (v6 <= v5)
    v6 = *(_QWORD *)(v4 + 64);
  if (v6 <= 8)
    v6 = 8;
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  if (v7 == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
    if ((_DWORD)result)
      return result;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of IndexPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (IndexPath?, IndexPath?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (IndexPath?, IndexPath?))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (IndexPath?, IndexPath?));
  }
}

uint64_t protocol witness for Projection.get(base:) in conformance OptionalSelectionManagerProjection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OptionalSelectionManagerProjection.get(base:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t OptionalSelectionManagerProjection.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for Optional();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v15 - v11, a1, v10);
  return SelectionManagerBox.init(optional:)((uint64_t)v12, a2, a3, a4);
}

uint64_t SelectionManagerBox.init(optional:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  type metadata accessor for SelectionManagerBox(0, a2, a3, v9);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for SelectionManagerBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectionManagerBox);
}

uint64_t UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a1;
  v25 = a3;
  v4 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v5 = *(_QWORD *)(v4[14] + 8);
  v23 = v4[12];
  v6 = type metadata accessor for ShadowListDataSource(0, v23, v5, a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v22 - v9;
  v11 = type metadata accessor for Binding();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v22 - v15;
  v17 = (char *)v3 + v4[32];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v17, v12);
  LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v16, 1, v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if ((_DWORD)v17 == 1)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v25, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v20 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v20, v6);
    v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v6);
    ListCoreDataSource.selectionValue(forRowAt:)(v24, v6, v21, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t UICollectionViewListCoordinatorBase.isAnimated.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0));
  swift_beginAccess();
  if (*v1 == 1)
  {
    swift_endAccess();
  }
  else
  {
    v2 = Transaction.animation.getter();
    swift_endAccess();
    if (v2)
    {
      swift_release();
      return 1;
    }
  }
  return 0;
}

uint64_t ListCoreDataSource.selectionValue(forRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v18 - v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v18 - v15;
  ListDiffable.rowIndex(at:)((uint64_t)&v18 - v15, (uint64_t)v11, v18, a2, v6);
  ListCoreDataSource.selectionValue(forRowAt:)((uint64_t)v16, (uint64_t)v11, a2, a3, v19);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t outlined destroy of IndexPath?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SelectionManagerBox.isSelected(_:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  char *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, uint64_t);
  char v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  v3 = v2;
  v52 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v49 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v50 = TupleTypeMetadata2;
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v51 = (char *)&v47 - v12;
  v13 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v48 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v47 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v47 - v23;
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)&v47 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v30 + 16))(v29, v3, a2, v27);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v37 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    return v37 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v29, v5);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v37 & 1;
  }
  v47 = v8;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v24, v29, v9);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v20, v52, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  v32 = v51;
  v33 = &v51[*(int *)(v50 + 48)];
  v34 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v34(v51, v24, v9);
  v52 = v33;
  v34(v33, v20, v9);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v35(v32, 1, v5) != 1)
  {
    v38 = v48;
    v34(v48, v51, v9);
    v39 = v52;
    v40 = v35(v52, 1, v5);
    v41 = v38;
    if (v40 != 1)
    {
      v43 = v47;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v47, v39, v5);
      v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      v44 = *(void (**)(char *, uint64_t))(v6 + 8);
      v44(v43, v5);
      v45 = *(void (**)(char *, uint64_t))(v13 + 8);
      v45(v20, v9);
      v45(v24, v9);
      v44(v41, v5);
      v45(v51, v9);
      return v37 & 1;
    }
    v42 = *(void (**)(char *, uint64_t))(v13 + 8);
    v42(v20, v9);
    v42(v24, v9);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v38, v5);
    goto LABEL_10;
  }
  v36 = *(void (**)(char *, uint64_t))(v13 + 8);
  v36(v20, v9);
  v36(v24, v9);
  if (v35(v52, 1, v5) != 1)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v50);
    v37 = 0;
    return v37 & 1;
  }
  v36(v51, v9);
  v37 = 1;
  return v37 & 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

_QWORD *assignWithCopy for List(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  size_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = a3;
  v49 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v49 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = ~(v9 | 7);
  v51 = (v9 + 23) & v11;
  v12 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 >= 0xFFFFFFFFuLL)
  {
    v50 = a3;
    if (v14 >= 0xFFFFFFFF)
    {
      *__dst = *__src;
      swift_retain();
      swift_release();
      *v12 = *v13;
      swift_retain();
      swift_release();
      v15 = (_QWORD *)(((unint64_t)v12 + v10 + 8) & v11);
      v16 = (_QWORD *)(((unint64_t)v13 + v10 + 8) & v11);
      if (v8)
        v17 = v7;
      else
        v17 = v7 + 1;
      if (v17 <= v7)
        v18 = v7;
      else
        v18 = v17;
      if (v18 <= 8)
        v19 = 8;
      else
        v19 = v18;
      if (v15 == v16)
        goto LABEL_87;
      v20 = *((unsigned __int8 *)v15 + v19);
      if (v20 >= 3)
      {
        if (v19 <= 3)
          v21 = v19;
        else
          v21 = 4;
        __asm { BR              X12 }
      }
      v31 = v49;
      if (v20 != 2)
      {
        if (v20 != 1)
        {
          swift_bridgeObjectRelease();
LABEL_72:
          v33 = *((unsigned __int8 *)v16 + v19);
          if (v33 >= 3)
          {
            if (v19 <= 3)
              v34 = v19;
            else
              v34 = 4;
            __asm { BR              X12 }
          }
          if (v33 != 2)
          {
            if (v33 == 1)
            {
              v32 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v49);
              goto LABEL_80;
            }
            goto LABEL_82;
          }
          goto LABEL_83;
        }
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v49))
          goto LABEL_72;
      }
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v15, v49);
      goto LABEL_72;
    }
    swift_release();
    swift_release();
    v25 = ((unint64_t)v12 + v10 + 8) & v11;
    if (v8)
      v26 = v7;
    else
      v26 = v7 + 1;
    if (v26 <= v7)
      v26 = v7;
    if (v26 <= 8)
      v19 = 8;
    else
      v19 = v26;
    v27 = *(unsigned __int8 *)(v25 + v19);
    if (v27 >= 3)
    {
      if (v19 <= 3)
        v28 = v19;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    v30 = v51;
    if (v27 == 2)
      goto LABEL_66;
    if (v27 == 1)
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v25, 1, v49))
LABEL_66:
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v25, v49);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    memcpy(__dst, __src, v19 + v51 + 1);
    v3 = v50;
    goto LABEL_88;
  }
  if (v14 >= 0xFFFFFFFF)
  {
    v50 = a3;
    *__dst = *__src;
    *v12 = *v13;
    v15 = (_QWORD *)(((unint64_t)v12 + v10 + 8) & v11);
    v16 = (_QWORD *)(((unint64_t)v13 + v10 + 8) & v11);
    if (v8)
      v17 = v7;
    else
      v17 = v7 + 1;
    if (v17 <= v7)
      v22 = v7;
    else
      v22 = v17;
    if (v22 <= 8)
      v19 = 8;
    else
      v19 = v22;
    v23 = *((unsigned __int8 *)v16 + v19);
    swift_retain();
    swift_retain();
    if (v23 >= 3)
    {
      if (v19 <= 3)
        v24 = v19;
      else
        v24 = 4;
      __asm { BR              X11 }
    }
    if (v23 != 2)
    {
      if (v23 == 1)
      {
        v31 = v49;
        v32 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v49);
LABEL_80:
        if (v32)
        {
          memcpy(v15, v16, v17);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(v15, v16, v31);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v31);
        }
        v35 = 1;
        goto LABEL_86;
      }
LABEL_82:
      *v15 = *v16;
      *((_BYTE *)v15 + v19) = 0;
      swift_bridgeObjectRetain();
LABEL_87:
      v3 = v50;
      v30 = v51;
      goto LABEL_88;
    }
LABEL_83:
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(v15, v16, v49);
    v35 = 2;
LABEL_86:
    *((_BYTE *)v15 + v19) = v35;
    goto LABEL_87;
  }
  if (v8)
    v29 = *(_QWORD *)(v6 + 64);
  else
    v29 = v7 + 1;
  if (v29 <= v7)
    v29 = *(_QWORD *)(v6 + 64);
  if (v29 <= 8)
    v19 = 8;
  else
    v19 = v29;
  v30 = v51;
  memcpy(__dst, __src, v19 + v51 + 1);
LABEL_88:
  v36 = *(_QWORD *)(*(_QWORD *)(v3 + 24) - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = v19 + v30 + v37 + 1;
  v39 = ((unint64_t)__dst + v38) & ~v37;
  v40 = ((unint64_t)__src + v38) & ~v37;
  (*(void (**)(unint64_t, unint64_t))(v36 + 24))(v39, v40);
  v41 = *(_QWORD *)(v36 + 64) + 7;
  v42 = (_QWORD *)((v41 + v39) & 0xFFFFFFFFFFFFFFF8);
  v43 = (_QWORD *)((v41 + v40) & 0xFFFFFFFFFFFFFFF8);
  *v42 = *v43;
  v44 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  v45 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(_QWORD *)v45;
  v47 = *(_QWORD *)(v45 + 8);
  LOBYTE(v36) = *(_BYTE *)(v45 + 16);
  outlined copy of HoverCallback();
  *(_QWORD *)v44 = v46;
  *(_QWORD *)(v44 + 8) = v47;
  *(_BYTE *)(v44 + 16) = v36;
  outlined consume of HoverCallback();
  return __dst;
}

uint64_t assignWithCopy for OnPlatformContainerSelectionModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a2;
  if (!*(_QWORD *)a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v7 = a2[3];
  v8 = *((_BYTE *)a2 + 32);
  outlined copy of Environment<ControlSize>.Content(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Environment<ControlSize>.Content(v9, v10);
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v14 = *((_BYTE *)a2 + 65);
  v15 = *((_BYTE *)a2 + 64);
  outlined copy of Environment<KeyboardShortcut?>.Content(v11, v12, v13, v15, v14);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_BYTE *)(a1 + 65);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  v20 = *(unsigned __int8 *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v15;
  *(_BYTE *)(a1 + 65) = v14;
  outlined consume of Environment<KeyboardShortcut?>.Content(v16, v17, v18, v20, v19);
  v21 = a2[9];
  v22 = *((unsigned __int8 *)a2 + 80);
  outlined copy of Environment<ControlSize>.Content(v21, v22);
  v23 = *(_QWORD *)(a1 + 72);
  v24 = *(unsigned __int8 *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v21;
  *(_BYTE *)(a1 + 80) = v22;
  outlined consume of Environment<ControlSize>.Content(v23, v24);
  return a1;
}

_OWORD *assignWithTake for SymmetricallyScaledTextLayout(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t assignWithTake for HostingContentViewRootModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  if (v6 != 1)
  {
    if (v5 != 1)
    {
      *(_QWORD *)(a1 + 72) = v5;
      swift_release();
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      goto LABEL_6;
    }
    outlined destroy of ListItemTint(a1 + 72);
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
LABEL_6:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v7 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  return a1;
}

uint64_t *assignWithCopy for PlatformItemListButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v2 = a2;
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  v8 = v2[2];
  v9 = *((_BYTE *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = a1[2];
  v11 = *((_BYTE *)a1 + 24);
  a1[2] = v8;
  *((_BYTE *)a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = v2[4];
  v13 = *((_BYTE *)v2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = a1[4];
  v15 = *((_BYTE *)a1 + 40);
  a1[4] = v12;
  *((_BYTE *)a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  v16 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  outlined copy of Environment<Bool>.Content(v16, (char)v2);
  v17 = a1[6];
  v18 = *((_BYTE *)a1 + 56);
  a1[6] = v16;
  *((_BYTE *)a1 + 56) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v17, v18);
  return a1;
}

uint64_t *assignWithCopy for BorderlessButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  v8 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, (char)v2);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  a1[2] = v8;
  *((_BYTE *)a1 + 24) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t closure #1 in UIKitToolbarStrategy.updateSearch()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  char *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  char *v46;
  int v47;
  int v48;
  _BOOL8 v49;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  void *v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  id v95;
  char *v96;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  char *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v88 = a2;
  v93 = a3;
  v4 = type metadata accessor for ToolbarStorage.SearchItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v98 = (uint64_t)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v90 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v91 = (uint64_t)&v87 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v96 = (char *)&v87 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v92 = (uint64_t)&v87 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v97 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v87 - v23);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v87 - v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v87 - v30;
  v32 = a1 + direct field offset for ToolbarBridge.searchItem;
  swift_beginAccess();
  outlined init with copy of TableRowList?(v32, (uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)v8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v99 = v31;
  outlined init with copy of TableRowList?((uint64_t)v31, (uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)v8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v89 = v5;
  v33 = v4;
  v34 = v4;
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v32) = v35(v27, 1, v34);
  outlined destroy of TableRowList?((uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v36 = 0;
  if ((_DWORD)v32 != 1)
  {
    v37 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 48);
    if (v37)
    {
      v36 = *(id *)(a1 + direct field offset for ToolbarBridge.platformVended + 48);
    }
    else
    {
      v36 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SwiftUISearchController(0)), sel_init);
      v37 = 0;
    }
    v38 = v37;
  }
  v39 = a1 + direct field offset for ToolbarBridge.platformVended;
  v40 = (char *)*(id *)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
  v41 = objc_msgSend(v40, sel_searchController);
  objc_msgSend(v40, sel_setSearchController_, v36);
  v42 = v41;
  v43 = objc_msgSend(v40, sel_searchController);
  v44 = v43;
  v94 = v39;
  if (v42)
  {

    v46 = v96;
    v45 = (uint64_t)v97;
    if (v44)
    {

      v47 = v42 != v44;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  v46 = v96;
  v45 = (uint64_t)v97;
  if (v43)
  {

LABEL_11:
    v47 = 1;
    goto LABEL_13;
  }
  v47 = 0;
LABEL_13:
  outlined init with copy of TableRowList?((uint64_t)v99, v45, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v48 = v35((char *)v45, 1, v33);
  v95 = v36;
  if (v48 == 1)
  {
    outlined destroy of TableRowList?(v45, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v49 = 1;
  }
  else
  {
    v96 = v40;
    if (*(_QWORD *)(v45 + *(int *)(v33 + 36) + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v49 = (v103 & 1) == 0 || v103 - 2 < 6;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v97, type metadata accessor for ToolbarStorage.SearchItem);
    v40 = v96;
  }
  objc_msgSend(v40, sel_setHidesSearchBarWhenScrolling_, v49);
  static Semantics.v4.getter();
  v51 = isLinkedOnOrAfter(_:)();
  v52 = v98;
  if ((v51 & 1) != 0)
  {
    v53 = v92;
    outlined init with copy of TableRowList?((uint64_t)v99, v92, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    if (v35((char *)v53, 1, v33) == 1)
    {
      outlined destroy of TableRowList?(v53, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    else
    {
      v96 = v40;
      v97 = v35;
      v54 = *(_QWORD *)(v53 + *(int *)(v33 + 36) + 8);
      swift_retain();
      swift_retain();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v53, type metadata accessor for ToolbarStorage.SearchItem);
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey);
      swift_retain();
      if (v54)
      {
        swift_retain_n();
        swift_retain();
        PropertyList.Tracker.value<A>(_:for:)();
      }
      else
      {
        swift_retain();
        swift_retain();
        PropertyList.subscript.getter();
      }
      v40 = v96;
      swift_release_n();
      swift_release_n();
      v35 = v97;
      v52 = v98;
      v55 = 0;
      switch((char)v103)
      {
        case 2:
        case 3:
          goto LABEL_34;
        case 4:
          v55 = 3;
          goto LABEL_34;
        case 5:
        case 7:
          break;
        default:
          v55 = 2;
LABEL_34:
          objc_msgSend(v40, sel_setPreferredSearchBarPlacement_, v55);
          break;
      }
    }
  }
  v56 = v95;
  v57 = *(void **)(v94 + 48);
  *(_QWORD *)(v94 + 48) = v95;
  v58 = v56;

  outlined init with copy of TableRowList?((uint64_t)v99, (uint64_t)v46, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if (v35(v46, 1, v33) == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v99, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);

    v99 = v46;
LABEL_45:
    result = outlined destroy of TableRowList?((uint64_t)v99, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    *v93 = v47;
    return result;
  }
  outlined init with take of TableCellFormula((uint64_t)v46, v52, type metadata accessor for ToolbarStorage.SearchItem);
  if (!v56)
  {

    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, type metadata accessor for ToolbarStorage.SearchItem);
    goto LABEL_45;
  }
  v95 = v42;
  LODWORD(v97) = v47;
  v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
  v60 = v91;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v52, v91, type metadata accessor for ToolbarStorage.SearchItem);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56))(v60, 0, 1, v33);
  v61 = (uint64_t)v58 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem;
  swift_beginAccess();
  v62 = v58;
  outlined assign with copy of ToolbarStorage.SearchItem?(v60, v61);
  swift_endAccess();
  v63 = v61;
  v64 = (uint64_t)v90;
  outlined init with copy of TableRowList?(v63, (uint64_t)v90, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  result = v59(v64, 1, v33);
  if ((_DWORD)result != 1)
  {
    SwiftUISearchController.update(to:)(v64);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, type metadata accessor for ToolbarStorage.SearchItem);
    outlined destroy of TableRowList?(v60, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v66 = (void *)MEMORY[0x18D760234](v88 + 64);
    swift_unknownObjectWeakAssign();

    v67 = objc_msgSend(v62, sel_searchBar);
    v68 = (char *)objc_msgSend(v67, sel_searchTextField);

    v69 = *(int *)(v33 + 36);
    v70 = v52 + *(int *)(v33 + 32);
    v72 = *(_QWORD *)v70;
    v71 = *(_QWORD *)(v70 + 8);
    v73 = *(_BYTE *)(v70 + 16);
    v74 = *(_QWORD *)(v70 + 24);
    v75 = v52 + v69;
    v76 = *(_QWORD *)(v52 + v69);
    v77 = *(_QWORD *)(v75 + 8);
    v103 = v76;
    v104 = v77;
    outlined copy of Text.Storage(v72, v71, v73);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    if ((EnvironmentValues.accessibilityEnabled.getter() & 1) != 0
      && (v78 = Text.storedAccessibilityLabel.getter(), v81))
    {
      v91 = v79;
      v92 = v80 & 1;
      v103 = v76;
      v104 = v77;
      v101 = 0;
      v102 = 0;
      v100 = v80 & 1;
      v90 = v68;
      v82 = v78;
      v83 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
      v96 = v40;
      v84 = MEMORY[0x18D75CC88](v83);
      v94 = v74;
      v85 = (void *)v84;
      swift_bridgeObjectRelease();
      v86 = v90;
      objc_msgSend(v90, sel_setAccessibilityLabel_, v85);

      outlined consume of Text.Storage(v82, v91, v92);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v72, v71, v73);
      swift_release();
      swift_release();

    }
    else
    {

      outlined consume of Text.Storage(v72, v71, v73);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v98, type metadata accessor for ToolbarStorage.SearchItem);
    LOBYTE(v47) = (_BYTE)v97;
    goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.SearchItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t assignWithCopy for _FocusableModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t UpdateViewFocusItem.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  char v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  char v12;
  int v13;
  int v14;
  int v15;
  char v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _OWORD v24[4];
  char v25;
  _BYTE v26[72];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v3 = v2;
  outlined init with copy of _FocusableModifier(Value, (uint64_t)v26);
  v4 = v3 & 1;
  v26[64] = v3 & 1;
  v5 = (uint64_t *)AGGraphGetValue();
  v7 = v6;
  v8 = *v5;
  v9 = (char *)AGGraphGetValue();
  v11 = v10;
  v12 = *v9;
  v13 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v13 != *(_DWORD *)(v0 + 36) || (v14 = *(_DWORD *)(v0 + 32)) == 0)
  {
    v14 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1)
      v15 = static ViewIdentity.nextSeed + 1;
    else
      v15 = 1;
    static ViewIdentity.nextSeed = v15;
    *(_DWORD *)(v0 + 32) = v14;
    *(_DWORD *)(v0 + 36) = v13;
    outlined init with copy of _FocusableModifier((uint64_t)v26, (uint64_t)v24);
    v25 = v4;
    outlined destroy of (value: _FocusableModifier, changed: Bool)((uint64_t)v24);
    goto LABEL_12;
  }
  outlined init with copy of _FocusableModifier((uint64_t)v26, (uint64_t)v24);
  v25 = v4;
  v19 = v24[0];
  v20 = v24[1];
  v21 = v24[2];
  v22 = v24[3];
  v23 = v4;
  outlined destroy of _FocusableModifier((uint64_t)&v19);
  if (v4 || (v7 & 1) != 0 || (v11 & 1) != 0 || !AGGraphGetOutputValue())
  {
LABEL_12:
    outlined init with copy of _FocusableModifier((uint64_t)v26, (uint64_t)&v19);
    v23 = v4;
    v16 = v19;
    outlined destroy of _FocusableModifier((uint64_t)&v19);
    outlined init with copy of _FocusableModifier((uint64_t)v26, (uint64_t)&v19);
    v23 = v4;
    v17 = v22;
    swift_retain();
    outlined destroy of _FocusableModifier((uint64_t)&v19);
    LODWORD(v19) = v14;
    BYTE4(v19) = v16 & v12;
    *((_QWORD *)&v19 + 1) = v8;
    v20 = v17;
    AGGraphSetOutputValue();
    swift_release();
  }
  return outlined destroy of (value: _FocusableModifier, changed: Bool)((uint64_t)v26);
}

uint64_t outlined init with copy of _FocusableModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _FocusableModifier(a2, a1);
  return a2;
}

uint64_t outlined destroy of (value: _FocusableModifier, changed: Bool)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (value: _FocusableModifier, changed: Bool)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (value: _FocusableModifier, changed: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (value: _FocusableModifier, changed: Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: _FocusableModifier, changed: Bool));
  }
}

double BorderedButtonSpec.padding.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  char v13;
  unsigned __int8 v14;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 8);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = *((unsigned __int8 *)v0 + 40);
  v7 = *((_BYTE *)v0 + 41);
  v8 = v0[6];
  v9 = *((unsigned __int8 *)v0 + 56);
  outlined copy of Environment<ControlSize>.Content(*v0, v2);
  outlined copy of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v6, v7);
  outlined copy of Environment<ControlSize>.Content(v8, v9);
  outlined copy of Environment<ControlSize>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v14);
  outlined consume of Environment<ControlSize>.Content(v1, v2);
  outlined consume of Environment<ControlSize>.Content(v1, v2);
  outlined consume of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v6, v7);
  outlined consume of Environment<ControlSize>.Content(v8, v9);
  v10 = 15.0;
  if (v14 - 3 >= 2)
    v10 = 7.0;
  if (v14 >= 2u)
    v11 = v10;
  else
    v11 = 5.0;
  outlined copy of Environment<ControlSize>.Content(v1, v2);
  outlined copy of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v6, v7);
  outlined copy of Environment<ControlSize>.Content(v8, v9);
  outlined copy of Environment<ControlSize>.Content(v8, v9);
  specialized Environment.wrappedValue.getter(v8, v9, &v13);
  outlined consume of Environment<ControlSize>.Content(v8, v9);
  outlined consume of Environment<ControlSize>.Content(v1, v2);
  outlined consume of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v6, v7);
  outlined consume of Environment<ControlSize>.Content(v8, v9);
  return v11;
}

__n128 BorderlessButtonStyleBase.makeBody(configuration:)@<Q0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  __int16 v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  int v27;
  __int16 v28;
  unsigned __int8 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[7];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[32];
  char v49;
  _OWORD v50[2];
  _BYTE v51[25];

  v27 = a1[1];
  v28 = *a1;
  v29 = a1[2];
  v4 = v2[1];
  v50[0] = *v2;
  v50[1] = v4;
  *(_OWORD *)v51 = v2[2];
  *(_OWORD *)&v51[9] = *(_OWORD *)((char *)v2 + 41);
  v5 = static VerticalAlignment.center.getter();
  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  v8 = *(_QWORD *)v51;
  v9 = v51[8];
  outlined copy of Environment<Bool>.Content(*(uint64_t *)v51, v51[8]);
  specialized Environment.wrappedValue.getter(*(uint64_t *)v51, v51[8], &v30);
  outlined consume of Environment<Bool>.Content(v8, v9);
  if (v30 < 2u)
    v10 = 5;
  else
    v10 = 6;
  LOBYTE(v40) = v10;
  v49 = 4;
  v11 = v2[1];
  v30 = *v2;
  v31 = v11;
  *(_OWORD *)v32 = v2[2];
  *(_OWORD *)&v32[9] = *(_OWORD *)((char *)v2 + 41);
  BorderlessButtonStyleBase.defaultWeight.getter();
  v12 = static Font.system(_:design:weight:)();
  static Semantics.v3.getter();
  v13 = isLinkedOnOrAfter(_:)() & 1;
  v14 = swift_getKeyPath();
  v15 = *(_QWORD *)&v51[16];
  v16 = v51[24];
  outlined copy of Environment<Bool>.Content(*(uint64_t *)&v51[16], v51[24]);
  v17 = specialized Environment.wrappedValue.getter(v15, v16);
  outlined consume of Environment<Bool>.Content(v15, v16);
  if (v27)
    v18 = 256;
  else
    v18 = 0;
  v40 = (unint64_t)v5;
  v19 = v18 | v28;
  LOBYTE(v41) = 1;
  BYTE8(v41) = v29;
  if ((v17 & 1) != 0)
    v20 = 0x10000;
  else
    v20 = 0;
  *(_QWORD *)&v42 = KeyPath;
  WORD4(v42) = 0;
  v43.n128_u64[0] = v7;
  v43.n128_u64[1] = v12;
  *(_QWORD *)&v44 = v14;
  BYTE8(v44) = v13;
  v21 = HIWORD(v20);
  BYTE11(v44) = BYTE2(v20);
  *(_WORD *)((char *)&v44 + 9) = v19;
  outlined copy of Environment<Bool>.Content(KeyPath, 0);
  swift_retain();
  swift_retain();
  swift_retain();
  closure #2 in BorderlessButtonStyleBase.makeBody(configuration:)((uint64_t *)&v40, (uint64_t)v50, (uint64_t)&v30);
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  swift_release();
  swift_release();
  swift_release();
  *(_OWORD *)v48 = v38[0];
  *(_OWORD *)&v48[9] = *(_OWORD *)((char *)v38 + 9);
  v44 = v33;
  v45 = v34;
  v46 = v35;
  v47 = v36;
  v40 = v30;
  v41 = v31;
  v42 = *(_OWORD *)v32;
  v43 = *(__n128 *)&v32[16];
  v49 = 1;
  v39 = 0;
  v22 = *(_OWORD *)v48;
  *(_OWORD *)(a2 + 128) = v37;
  *(_OWORD *)(a2 + 144) = v22;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)&v48[16];
  v23 = v45;
  *(_OWORD *)(a2 + 64) = v44;
  *(_OWORD *)(a2 + 80) = v23;
  v24 = v47;
  *(_OWORD *)(a2 + 96) = v46;
  *(_OWORD *)(a2 + 112) = v24;
  v25 = v41;
  *(_OWORD *)a2 = v40;
  *(_OWORD *)(a2 + 16) = v25;
  result = v43;
  *(_OWORD *)(a2 + 32) = v42;
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 176) = v5;
  *(_QWORD *)(a2 + 184) = 0;
  *(_BYTE *)(a2 + 192) = v49;
  *(_BYTE *)(a2 + 200) = v29;
  *(_QWORD *)(a2 + 208) = KeyPath;
  *(_BYTE *)(a2 + 216) = v39;
  *(_BYTE *)(a2 + 217) = 0;
  *(_QWORD *)(a2 + 224) = v7;
  *(_QWORD *)(a2 + 232) = v12;
  *(_QWORD *)(a2 + 240) = v14;
  *(_BYTE *)(a2 + 248) = v13;
  *(_BYTE *)(a2 + 251) = v21;
  *(_WORD *)(a2 + 249) = v19;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, double))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v14 = (char *)&v16 - v13;
  a6(a1, a2, v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v14, AssociatedTypeWitness);
}

uint64_t ShadowSectionCollection.index(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  v2 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(v2 + 56))(v3, v2, v7);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.index(after:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, AssociatedTypeWitness);
}

uint64_t protocol witness for ListDiffable.sectionIDs.getter in conformance CollectionViewListDataSource<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CollectionViewListDataSource.sectionIDs.getter();
  *a1 = result;
  a1[1] = (uint64_t)specialized implicit closure #1 in ListSectionInfo.sectionIDs.getter;
  a1[2] = 0;
  return result;
}

void protocol witness for static RemovableAttribute.didReinsert(attribute:) in conformance PropertiesTransform<A>(uint64_t a1, uint64_t a2)
{
  static PropertiesTransform.didReinsert(attribute:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t type metadata accessor for PropertiesTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertiesTransform);
}

void PropertiesTransform.insert()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = MEMORY[0x18D760234](v0 + 72);

  *(_QWORD *)(v0 + 64) = v1;
  if (v1)
    *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;
}

uint64_t type metadata accessor for _UIGraphicsView()
{
  return objc_opt_self();
}

void @objc UIHostingController.viewWillLayoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  UIHostingController.viewWillLayoutSubviews()();

}

Swift::Void __swiftcall UIHostingController.viewWillLayoutSubviews()()
{
  uint64_t v0;
  _QWORD *v1;
  objc_class *v2;
  objc_super v3;

  v2 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58), v0);
  v3.receiver = v1;
  v3.super_class = v2;
  objc_msgSendSuper2(&v3, sel_viewWillLayoutSubviews);
  UIHostingController._viewWillLayoutSubviews()();
}

void UIHostingController.layoutToolbarIfNeeded()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  void *v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  id v35;
  double v36;
  id v37;
  CGRect v38;

  v1 = specialized UIHostingController.toolbarBridge.getter();
  if (!v1)
    return;
  v2 = *(void **)(v1 + direct field offset for ToolbarBridge.platformVended + 32);
  if (!v2)
    return;
  v37 = v2;
  v3 = objc_msgSend(v37, sel_items);
  if (!v3)
    goto LABEL_18;
  v4 = v3;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_18:
    v35 = objc_msgSend(v37, sel_superview);
    v24 = 0.0;
    if (v35)
    {

      objc_msgSend(v37, sel_removeFromSuperview);
    }
    goto LABEL_20;
  }
  v7 = objc_msgSend(v37, sel_superview);
  if (!v7)
  {
    v8 = objc_msgSend(v0, sel_view);
    if (!v8)
    {
LABEL_27:
      __break(1u);
      return;
    }
    v7 = v8;
    objc_msgSend(v8, sel_addSubview_, v37);
  }

  v9 = objc_msgSend(v0, sel_view);
  if (!v9)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = v9;
  objc_msgSend(v9, sel_safeAreaInsets);
  v12 = v11;

  objc_msgSend(v0, sel_additionalSafeAreaInsets);
  if (v12 - v13 < 0.0)
    v14 = 0.0;
  else
    v14 = v12 - v13;
  v15 = objc_msgSend(v0, sel_view);
  if (!v15)
    goto LABEL_25;
  v16 = v15;
  objc_msgSend(v15, sel_bounds);
  v18 = v17;
  v20 = v19;

  objc_msgSend(v37, sel_sizeThatFits_, v18, v20);
  v22 = v21;
  v24 = v23;
  v25 = objc_msgSend(v0, sel_view);
  if (!v25)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v26 = v25;
  objc_msgSend(v25, sel_bounds);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;

  v38.origin.x = v28;
  v38.origin.y = v30;
  v38.size.width = v32;
  v38.size.height = v34;
  objc_msgSend(v37, sel_setFrame_, 0.0, CGRectGetMaxY(v38) - v24 - v14, v22, v24);
LABEL_20:
  objc_msgSend(v0, sel_additionalSafeAreaInsets);
  if (v36 != v24)
  {
    objc_msgSend(v0, sel_additionalSafeAreaInsets);
    objc_msgSend(v0, sel_setAdditionalSafeAreaInsets_);
  }

}

uint64_t partial apply for closure #1 in PlatformViewHost.isPlatformFocusContainerHost.getter(void **a1)
{
  return closure #1 in PlatformViewHost.isPlatformFocusContainerHost.getter(a1) & 1;
}

void closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  void *v11;
  id v12;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x18D760234](v3);
  v5 = v4;
  if (!v4)
    goto LABEL_14;
  v6 = objc_msgSend(v4, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8 != 1)
  {
    v11 = 0;
    goto LABEL_13;
  }
  v9 = objc_msgSend(v5, sel_subviews);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v11)
      goto LABEL_11;
  }
  else
  {
    v11 = *(void **)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v11)
    {
LABEL_11:
      swift_bridgeObjectRelease();
LABEL_13:
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

LABEL_14:
      *a2 = v5;
      return;
    }
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    v12 = (id)MEMORY[0x18D75E3BC](0, v10);
    goto LABEL_10;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(id *)(v10 + 32);
LABEL_10:
    v11 = v12;
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t closure #1 in PlatformViewHost.isPlatformFocusContainerHost.getter(void **a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v5;

  v1 = *a1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScrollView);
  v2 = v1;
  v3 = swift_dynamicCast();
  if ((_DWORD)v3)

  return v3;
}

uint64_t ScrollViewLayoutComputer.updateValue()()
{
  uint64_t v0;

  AGGraphGetValue();
  AGGraphGetValue();
  EdgeInsets.adding(_:)();
  if (*(_DWORD *)(v0 + 8) != *MEMORY[0x1E0CFED28])
  {
    AGGraphGetValue();
    swift_retain();
  }
  default argument 0 of ViewSizeCache.init(cache:)();
  ViewSizeCache.init(cache:)();
  lazy protocol witness table accessor for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer();
  lazy protocol witness table accessor for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine();
  lazy protocol witness table accessor for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine();
  StatefulRule<>.updateIfNotEqual<A>(to:)();
  return swift_release();
}

uint64_t static SystemScrollView._makeView(view:inputs:)@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(void);
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int OffsetAttribute2;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v68;
  char v69;
  int v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  _BYTE v74[80];
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD v83[5];
  unsigned int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v4 = a1[3];
  v87 = a1[2];
  v88 = v4;
  v89 = a1[4];
  v90 = *((_DWORD *)a1 + 20);
  v5 = a1[1];
  v85 = *a1;
  v86 = v5;
  static EdgeInsets.zero.getter();
  static EdgeInsets.zero.getter();
  *(_QWORD *)&v74[48] = v6;
  *(_QWORD *)&v74[56] = v7;
  *(_QWORD *)&v74[64] = v8;
  *(_QWORD *)&v74[72] = v9;
  v76 = 0;
  v75 = 0;
  v77 = 0x8000000000000000;
  v78 = 0;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<SystemScrollLayoutState>, (uint64_t)&type metadata for SystemScrollLayoutState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<SystemScrollLayoutState> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<SystemScrollLayoutState>, (uint64_t)&type metadata for SystemScrollLayoutState);
  v65 = Attribute.init<A>(body:value:flags:update:)();
  v91 = v85;
  v92 = v86;
  v93 = v87;
  *(_OWORD *)v74 = v85;
  *(_OWORD *)&v74[16] = v86;
  v69 = BYTE4(v87);
  *(_OWORD *)&v74[32] = v87;
  v10 = _GraphInputs.scrollPhaseState.getter();
  v70 = *MEMORY[0x1E0CFED28];
  if (v10 == *MEMORY[0x1E0CFED28])
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    ScrollPhaseState.init(phase:velocity:)();
    LOBYTE(v83[0]) = v74[0];
    *(_OWORD *)((char *)v83 + 8) = *(_OWORD *)&v74[8];
    v11 = MEMORY[0x1E0CE3390];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x1E0CE3390], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>, &lazy cache variable for type metadata for External<ScrollPhaseState>, v11);
    Attribute.init<A>(body:value:flags:update:)();
  }
  ScrollPrefetchState.init(deadline:)();
  v12 = MEMORY[0x1E0CE4988];
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<ScrollPrefetchState>, MEMORY[0x1E0CE4988], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<ScrollPrefetchState> and conformance External<A>, &lazy cache variable for type metadata for External<ScrollPrefetchState>, v12);
  v57 = Attribute.init<A>(body:value:flags:update:)();
  static CGSize.invalidValue.getter();
  type metadata accessor for CGSize(0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for External<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, v13);
  lazy protocol witness table accessor for type External<HostingScrollView> and conformance External<A>(&lazy protocol witness table cache variable for type External<CGSize> and conformance External<A>, &lazy cache variable for type metadata for External<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.time.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type MainThreadRequiringScrollPhase and conformance MainThreadRequiringScrollPhase();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  type metadata accessor for ViewGraph();
  v60 = MEMORY[0x18D75C5F8]();
  MEMORY[0x1E0C80A78](v60, v14);
  type metadata accessor for SystemScrollView(255, a2, a3, v15);
  type metadata accessor for _GraphValue();
  v16 = MEMORY[0x1E0CE1470];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ScrollViewConfiguration>, (uint64_t)&type metadata for ScrollViewConfiguration, (uint64_t (*)(_QWORD, uint64_t))v16);
  v17 = _GraphValue.value.getter();
  outlined retain of _ViewInputs((uint64_t)&v85);
  specialized ScrollViewAdjustedConfiguration.init(configuration:inputs:)(v17);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration();
  v18 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs((uint64_t)&v85);
  specialized ScrollViewAdjustedProperties.init(configuration:inputs:)(v18);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties();
  Attribute.init<A>(body:value:flags:update:)();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  ScrollAnchorStorage.init()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  _ViewInputs.animatedPosition()();
  _ViewInputs.animatedSize()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize();
  Attribute.init<A>(body:value:flags:update:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewContentFrame and conformance ScrollViewContentFrame();
  v19 = Attribute.init<A>(body:value:flags:update:)();
  lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame();
  Attribute<A>.animated(inputs:)();
  _ViewInputs.scrollableContainerSize.getter();
  static ViewSize.invalidValue.getter();
  static CGSize.invalidValue.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.size.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment();
  v63 = Attribute.init<A>(body:value:flags:update:)();
  v58 = v19;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment();
  v20 = Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition();
  v59 = Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize();
  v64 = Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.getter();
  _ViewInputs.size.getter();
  _ViewInputs.position.getter();
  _ViewInputs.transform.getter();
  _ViewInputs.safeAreaInsets.getter();
  ResolvedSafeAreaInsets.init(regions:environment:size:position:transform:safeAreaInsets:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets();
  Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea();
  Attribute.init<A>(body:value:flags:update:)();
  lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets();
  v68 = Attribute<A>.animated(inputs:)();
  _ViewInputs.viewPhase.getter();
  _ViewInputs.transaction.getter();
  static CGSize.invalidValue.getter();
  v22 = v21;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = 0;
  v79 = 0;
  v76 = 0;
  v77 = 0;
  LOBYTE(v78) = 0;
  v80 = v23;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState();
  v24 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v61 = _GraphInputs.hasValueScrollPosition(kind:)();
  AGGraphCreateOffsetAttribute2();
  *(_OWORD *)&v74[32] = v87;
  *(_OWORD *)&v74[48] = v88;
  *(_OWORD *)&v74[64] = v89;
  v75 = __PAIR64__(v22, v90);
  *(_OWORD *)&v74[16] = v86;
  swift_getKeyPath();
  outlined retain of _ViewInputs((uint64_t)&v85);
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  outlined release of _ViewInputs((uint64_t)&v85);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior();
  *(_DWORD *)v74 = v65;
  *(_DWORD *)&v74[4] = v24;
  *(_DWORD *)&v74[8] = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)&v74[12] = v70;
  *(_DWORD *)&v74[16] = v70;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  lazy protocol witness table accessor for type ScrollableProvider and conformance ScrollableProvider();
  v62 = Attribute.init<A>(body:value:flags:update:)();
  v83[2] = v87;
  v83[3] = v88;
  v83[4] = v89;
  v84 = v90;
  v83[0] = v85;
  v83[1] = v86;
  if ((v69 & 0x20) != 0)
  {
    *(_QWORD *)v74 = v85;
    swift_getKeyPath();
    outlined retain of _ViewInputs((uint64_t)&v85);
    v54 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    CoordinateSpace.ID.init()();
    v25 = *(_QWORD *)v74;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea();
    Attribute.init<A>(body:value:flags:update:)();
    v26 = Attribute<A>.animated(inputs:)();
    DWORD1(v83[2]) |= 2u;
    AGGraphCreateOffsetAttribute2();
    _ViewInputs.size.setter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewChildPosition and conformance ScrollViewChildPosition();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.position.setter();
    ViewGraph.$zeroPoint.getter();
    _ViewInputs.containerPosition.setter();
    _ViewInputs.scrollableContainerSize.setter();
    *(_OWORD *)&v74[48] = v88;
    *(_OWORD *)&v74[64] = v89;
    LODWORD(v75) = v90;
    *(_DWORD *)&v74[4] = v58;
    *(_DWORD *)&v74[16] = _ViewInputs.transform.getter();
    *(_DWORD *)&v74[20] = v24;
    *(_DWORD *)&v74[24] = v68;
    *(_DWORD *)&v74[28] = v26;
    *(_DWORD *)&v74[32] = v63;
    *(_DWORD *)&v74[36] = v54;
    *(_QWORD *)&v74[40] = v25;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewChildTransform and conformance ScrollViewChildTransform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.transform.setter();
    *(_QWORD *)&v74[8] = v25;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.safeAreaInsets.setter();
    _GraphInputs.updateScrollStateRequest.setter();
    *(_DWORD *)v74 = v57;
    PropertyList.subscript.setter();
  }
  else
  {
    outlined retain of _ViewInputs((uint64_t)&v85);
  }
  v72 = v88;
  v73 = DWORD2(v88);
  *(_QWORD *)v74 = v88;
  *(_DWORD *)&v74[8] = DWORD2(v88);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    PreferenceKeys.remove<A>(_:)();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollTargetRole.ContentKey>, MEMORY[0x1E0CE33C8], MEMORY[0x1E0CE33C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollTargetRole.ContentKey> and conformance _AnyPreferenceKey<A>();
    PreferenceKeys.add(_:)();
  }
  if ((v61 & 1) != 0)
  {
    v27 = MEMORY[0x1E0CE4070];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ScrollablePreferenceKey>, MEMORY[0x1E0CE5B48], MEMORY[0x1E0CE5B38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollablePreferenceKey> and conformance _AnyPreferenceKey<A>();
    PreferenceKeys.add(_:)();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<UpdateScrollStateRequestKey>, MEMORY[0x1E0CE6268], MEMORY[0x1E0CE6260], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v27);
    lazy protocol witness table accessor for type _AnyPreferenceKey<UpdateScrollStateRequestKey> and conformance _AnyPreferenceKey<A>();
    PreferenceKeys.add(_:)();
  }
  PreferenceKeys.remove<A>(_:)();
  _GraphInputs.convertScrollStateInputsToContent()();
  _GraphInputs.resetScrollPosition(kind:)();
  _ViewInputs.scrollable.setter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t (*)(uint64_t))type metadata accessor for UIView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  lazy protocol witness table accessor for type ScrollViewHostProvider and conformance ScrollViewHostProvider();
  Attribute.init<A>(body:value:flags:update:)();
  lazy protocol witness table accessor for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput();
  PropertyList.subscript.setter();
  PreferenceKeys.remove<A>(_:)();
  v28 = MEMORY[0x1E0CE4070];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<FocusableBounds.Key>, (uint64_t)&type metadata for FocusableBounds.Key, (uint64_t)&protocol witness table for FocusableBounds.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<FocusableBounds.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<FocusableFillerBounds.Key>, (uint64_t)&type metadata for FocusableFillerBounds.Key, (uint64_t)&protocol witness table for FocusableFillerBounds.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v28);
  lazy protocol witness table accessor for type _AnyPreferenceKey<FocusableFillerBounds.Key> and conformance _AnyPreferenceKey<A>();
  v29 = PreferenceKeys.add(_:)();
  MEMORY[0x1E0C80A78](v29, v30);
  _GraphValue.subscript.getter();
  *(_QWORD *)&v74[16] = *(_QWORD *)&v83[1];
  *(_OWORD *)&v74[24] = *(_OWORD *)((char *)&v83[1] + 8);
  *(_OWORD *)&v74[40] = *(_OWORD *)((char *)&v83[2] + 8);
  *(_OWORD *)&v74[56] = *(_OWORD *)((char *)&v83[3] + 8);
  *(_QWORD *)&v74[72] = *((_QWORD *)&v83[4] + 1);
  LODWORD(v75) = v84;
  v31 = static View.makeDebuggableView(view:inputs:)();
  MEMORY[0x1E0C80A78](v31, v32);
  MEMORY[0x1E0C80A78](v33, v34);
  AGGraphMutateAttribute();
  *(_QWORD *)v74 = v72;
  *(_DWORD *)&v74[8] = v73;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_DWORD *)v74 = v62;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for DropDelegate?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider();
    Attribute.init<A>(body:value:flags:update:)();
    v74[0] = 0;
    _ViewOutputs.subscript.setter();
  }
  *(_OWORD *)v74 = v71;
  v35 = _ViewOutputs.layoutComputer.getter();
  if ((v35 & 0x100000000) == 0)
  {
    MEMORY[0x1E0C80A78](v35, v36);
    MEMORY[0x1E0C80A78](v37, v38);
    AGGraphMutateAttribute();
  }
  if ((v69 & 2) != 0)
  {
    *(_OWORD *)v74 = v71;
    v39 = _ViewOutputs.layoutComputer.getter();
    if ((v39 & 0x100000000) != 0)
      v40 = v70;
    else
      v40 = v39;
    *(_DWORD *)v74 = v18;
    *(_DWORD *)&v74[4] = OffsetAttribute2;
    *(_DWORD *)&v74[8] = v40;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer();
    Attribute.init<A>(body:value:flags:update:)();
    v74[0] = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  v41 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(_QWORD *)v74 = v72;
  *(_DWORD *)&v74[8] = v73;
  v42 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v41 & 1) != 0 || (v42 & 1) != 0)
  {
    _ViewOutputs.subscript.getter();
    _ViewOutputs.subscript.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for FocusableBorder?, (uint64_t)&type metadata for FocusableBorder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder();
    Attribute.init<A>(body:value:flags:update:)();
    swift_getKeyPath();
    v43 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v82 = 0;
    v81 = 0;
    swift_allocObject();
    v44 = swift_weakInit();
    v46 = MEMORY[0x1E0C80A78](v44, v45);
    MEMORY[0x18D75B938](partial apply for closure #8 in static SystemScrollView._makeView(view:inputs:), v46);
    swift_release();
    *(_OWORD *)&v74[32] = v87;
    *(_OWORD *)&v74[48] = v88;
    *(_OWORD *)&v74[64] = v89;
    LODWORD(v75) = v90;
    *(_DWORD *)v74 = v18;
    *(_DWORD *)&v74[4] = v59;
    *(_DWORD *)&v74[8] = _ViewInputs.containerPosition.getter();
    *(_DWORD *)&v74[12] = v64;
    *(_DWORD *)&v74[16] = v68;
    *(_DWORD *)&v74[20] = v63;
    *(_DWORD *)&v74[24] = v20;
    *(_DWORD *)&v74[28] = v43;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame();
    Attribute.init<A>(body:value:flags:update:)();
    result = AGGraphCreateOffsetAttribute2();
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
  }
  else
  {
    v48 = static ScrollTargetRole.ContentKey.defaultValue.getter();
    *(_QWORD *)v74 = v72;
    *(_DWORD *)&v74[8] = v73;
    MEMORY[0x1E0C80A78](v48, v49);
    outlined retain of [Text.Modifier]((uint64_t)&v72);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    v50 = swift_bridgeObjectRelease();
    *(_QWORD *)v74 = v72;
    *(_DWORD *)&v74[8] = v73;
    MEMORY[0x1E0C80A78](v50, v51);
    outlined retain of [Text.Modifier]((uint64_t)&v72);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v52 = swift_bridgeObjectRelease();
    *(_QWORD *)v74 = v72;
    *(_DWORD *)&v74[8] = v73;
    MEMORY[0x1E0C80A78](v52, v53);
    outlined retain of [Text.Modifier]((uint64_t)&v72);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *a4 = v71;
  }
  return result;
}

id @objc UIHostingContentView._popupMenuButton.getter(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)UIHostingContentView._popupMenuButton.getter();

  return v2;
}

uint64_t UIHostingContentView._popupMenuButton.getter()
{
  uint64_t v0;
  _BYTE v2[16];

  UIHostingContentView.popUpButton.getter((uint64_t)v2);
  if ((v2[8] & 1) != 0)
    v0 = 0;
  else
    v0 = MEMORY[0x18D760234](v2);
  outlined destroy of WeakBox<UIButton>?((uint64_t)v2);
  return v0;
}

uint64_t outlined destroy of WeakBox<UIButton>?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for WeakBox<UIButton>?(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t UIHostingContentView.popUpButton.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x9E0);
  swift_beginAccess();
  return outlined init with copy of WeakBox<UIButton>?(v3, a1);
}

uint64_t outlined init with copy of WeakBox<UIButton>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<UIButton>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t @objc _UIHostingView._axesForDerivingIntrinsicContentSizeFromLayoutSize.getter()
{
  return 3;
}

uint64_t getEnumTagSinglePayload for _RowVisitationContext(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  unsigned int v40;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(_DWORD *)(v2 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v38 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v38 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v40 = v3;
  if (v5 > v3)
    v3 = *(_DWORD *)(v4 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v37 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v37 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= v3)
    v8 = v3;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = swift_getAssociatedTypeWitness();
  result = a2;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = v12 - 1;
  if (!v12)
    v13 = 0;
  if (v8 <= v13)
    v14 = v13;
  else
    v14 = v8;
  if (v14 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  else
    v15 = v14;
  if (v12)
    v16 = 3;
  else
    v16 = 4;
  if (!a2)
    return result;
  v17 = *(unsigned __int8 *)(v4 + 80);
  v18 = *(_QWORD *)(v2 + 64) + v17;
  v19 = *(unsigned __int8 *)(v6 + 80);
  v20 = (v18 & ~v17) + *(_QWORD *)(v4 + 64) + v19;
  v21 = *(_QWORD *)(v6 + 64) + 7;
  v22 = *(unsigned __int8 *)(v11 + 80);
  v23 = v22 + 8;
  v24 = a1;
  if (a2 > v15)
  {
    v25 = v16 + *(_QWORD *)(v11 + 64) + ((v23 + ((v21 + (v20 & ~v19)) & 0xFFFFFFFFFFFFFFF8)) & ~v22);
    v26 = 8 * v25;
    if (v25 > 3)
      goto LABEL_20;
    v28 = ((a2 - v15 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      v27 = *(_DWORD *)(a1 + v25);
      if (v27)
        goto LABEL_27;
    }
    else
    {
      if (v28 <= 0xFF)
      {
        if (v28 < 2)
          goto LABEL_36;
LABEL_20:
        v27 = *(unsigned __int8 *)(a1 + v25);
        if (!*(_BYTE *)(a1 + v25))
          goto LABEL_36;
LABEL_27:
        v29 = (v27 - 1) << v26;
        if (v25 > 3)
          v29 = 0;
        if ((_DWORD)v25)
        {
          if (v25 <= 3)
            v30 = v25;
          else
            v30 = 4;
          __asm { BR              X12 }
        }
        return v15 + v29 + 1;
      }
      v27 = *(unsigned __int16 *)(a1 + v25);
      if (*(_WORD *)(a1 + v25))
        goto LABEL_27;
    }
  }
LABEL_36:
  if (v3 == v15)
  {
    v31 = v40;
    if (v40 >= v5)
    {
      v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
      v33 = AssociatedTypeWitness;
    }
    else
    {
      v24 = (v18 + a1) & ~v17;
      v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
      v31 = v5;
      v33 = v38;
    }
    return v32(v24, v31, v33);
  }
  v24 = (v20 + a1) & ~v19;
  if ((_DWORD)v7 == v15)
  {
    v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v31 = v7;
    v33 = v37;
    return v32(v24, v31, v33);
  }
  v34 = (unint64_t *)((v21 + v24) & 0xFFFFFFFFFFFFFFF8);
  if ((v14 & 0x80000000) != 0)
  {
    if (v12 >= 2)
    {
      v36 = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v34 + v23) & ~v22);
      if (v36 >= 2)
        return v36 - 1;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v35 = *v34;
    if (v35 >= 0xFFFFFFFF)
      LODWORD(v35) = -1;
    return (v35 + 1);
  }
}

ValueMetadata *type metadata accessor for _AccessibilityIgnoresInvertColorsViewModifier()
{
  return &type metadata for _AccessibilityIgnoresInvertColorsViewModifier;
}

uint64_t getEnumTagSinglePayload for OnScrollVisibilityGeometryAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for ResolvedNavigationDestinations(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t MakeChildOutputs.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  _BYTE v11[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v15 = *v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for IncrementalPreference(0, a2, a3, v6);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalPreference<A>, v13);
  v7 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v15, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v11, v13, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  swift_release();
  return MEMORY[0x18D756EA4](a2, v10, a2, a3);
}

uint64_t UpdateChildOutputs.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = _ViewOutputs.subscript.getter();
  if ((result & 0x100000000) == 0)
  {
    MEMORY[0x1E0C80A78](result, v6);
    v8 = type metadata accessor for IncrementalPreference(0, a2, a3, v7);
    MEMORY[0x1E0C80A78](v8, v8);
    return AGGraphMutateAttribute();
  }
  return result;
}

uint64_t type metadata accessor for IncrementalPreference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalPreference);
}

uint64_t initializeWithCopy for PlatformItemListGenerator(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v5 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyIdentifiableShareConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t @objc static _UIHostingView.layerClass.getter()
{
  static _UIHostingView.layerClass.getter();
  return swift_getObjCClassFromMetadata();
}

uint64_t type metadata accessor for UIHostingViewDebugLayer()
{
  return objc_opt_self();
}

uint64_t static _UIHostingView.layerClass.getter()
{
  return type metadata accessor for UIHostingViewDebugLayer();
}

ValueMetadata *type metadata accessor for AccessibilityContainerModifier()
{
  return &type metadata for AccessibilityContainerModifier;
}

uint64_t getEnumTagSinglePayload for UpdateChildOutputs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t ButtonStyleConfiguration.isPressed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityContainerModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, _OWORD *)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, _OWORD *)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t result;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v89;
  char v91;
  __int128 v92;
  char v93;
  __int128 v94;
  _BYTE v95[28];
  _OWORD v96[3];
  _OWORD v97[3];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD v101[2];
  int v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v98 = v6;
  DWORD2(v98) = v7;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v85 = *(_QWORD *)a2;
    *(_OWORD *)v95 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v95[12] = *(_OWORD *)(a2 + 20);
    v8 = *(_DWORD *)(a2 + 36);
    v84 = *(_QWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 48);
    v10 = *(_OWORD *)(a2 + 64);
    v100 = *(_OWORD *)(a2 + 32);
    v101[0] = v9;
    v101[1] = v10;
    v102 = *(_DWORD *)(a2 + 80);
    v11 = *(_OWORD *)(a2 + 16);
    v98 = *(_OWORD *)a2;
    v99 = v11;
    if ((v8 & 0x20) != 0)
    {
      *(_QWORD *)&v96[0] = v6;
      DWORD2(v96[0]) = v7;
      outlined retain of _ViewInputs(a2);
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v25 = v8;
        if ((v8 & 0x40) != 0)
        {
          v25 = v8 & 0xBF;
          DWORD1(v100) = v8 & 0xFFFFFFBF;
        }
        if (v25 < 0)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, MEMORY[0x1E0CE4068], MEMORY[0x1E0CE4058], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          lazy protocol witness table accessor for type _AnyPreferenceKey<ViewRespondersKey> and conformance _AnyPreferenceKey<A>();
          PreferenceKeys.add(_:)();
        }
      }
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    if ((v8 & 0x10) != 0)
    {
      v26 = *(_OWORD *)(a2 + 32);
      v27 = *(_OWORD *)(a2 + 64);
      v97[0] = *(_OWORD *)(a2 + 48);
      v97[1] = v27;
      LODWORD(v97[2]) = *(_DWORD *)(a2 + 80);
      v28 = *(_OWORD *)(a2 + 16);
      v96[0] = *(_OWORD *)a2;
      v96[1] = v28;
      v96[2] = v26;
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    *(_QWORD *)&v96[0] = v98;
    DWORD2(v96[0]) = DWORD2(v98);
    v96[1] = v99;
    LODWORD(v96[2]) = v100;
    DWORD1(v96[2]) = DWORD1(v100) & 0xFFFFFFBF | (((DWORD1(v100) >> 5) & 1) << 6);
    *((_QWORD *)&v96[2] + 1) = *((_QWORD *)&v100 + 1);
    *(_QWORD *)&v97[0] = *(_QWORD *)&v101[0];
    *(_OWORD *)((char *)v97 + 8) = *(_OWORD *)((char *)v101 + 8);
    *((_QWORD *)&v97[1] + 1) = *((_QWORD *)&v101[1] + 1);
    LODWORD(v97[2]) = v102;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v29 = swift_bridgeObjectRetain_n();
    a3(&v94, v29, v96);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if ((v8 & 0x10) != 0)
    {
      *(_QWORD *)&v96[0] = v6;
      DWORD2(v96[0]) = v7;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v96[0] = v94;
        v30 = _ViewOutputs.subscript.getter();
        v31 = *MEMORY[0x1E0CFED28];
        v82 = *MEMORY[0x1E0CFED28];
        if ((v30 & 0x100000000) == 0)
          v31 = v30;
      }
      else
      {
        v31 = *MEMORY[0x1E0CFED28];
        v82 = *MEMORY[0x1E0CFED28];
      }
      v83 = v31;
      _DisplayList_Identity.init()();
      v81 = v96[0];
      v52 = *(_OWORD *)(a2 + 32);
      v53 = *(_OWORD *)(a2 + 64);
      v97[0] = *(_OWORD *)(a2 + 48);
      v97[1] = v53;
      LODWORD(v97[2]) = *(_DWORD *)(a2 + 80);
      v54 = *(_OWORD *)(a2 + 16);
      v96[0] = *(_OWORD *)a2;
      v96[1] = v54;
      v96[2] = v52;
      LODWORD(v92) = v81;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v96[0] = v85;
      *(_OWORD *)((char *)v96 + 8) = *(_OWORD *)v95;
      *(_OWORD *)((char *)&v96[1] + 4) = *(_OWORD *)&v95[12];
      DWORD1(v96[2]) = v8;
      *((_QWORD *)&v96[2] + 1) = v84;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v96[0]) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v80 = _GraphValue.value.getter();
      v55 = *(_OWORD *)(a2 + 32);
      v56 = *(_OWORD *)(a2 + 64);
      v97[0] = *(_OWORD *)(a2 + 48);
      v97[1] = v56;
      LODWORD(v97[2]) = *(_DWORD *)(a2 + 80);
      v57 = *(_OWORD *)(a2 + 16);
      v96[0] = *(_OWORD *)a2;
      v96[1] = v57;
      v96[2] = v55;
      v79 = _ViewInputs.animatedSize()();
      v58 = *(_OWORD *)(a2 + 32);
      v59 = *(_OWORD *)(a2 + 64);
      v97[0] = *(_OWORD *)(a2 + 48);
      v97[1] = v59;
      LODWORD(v97[2]) = *(_DWORD *)(a2 + 80);
      v60 = *(_OWORD *)(a2 + 16);
      v96[0] = *(_OWORD *)a2;
      v96[1] = v60;
      v96[2] = v58;
      v78 = _ViewInputs.animatedPosition()();
      v61 = *(_OWORD *)(a2 + 32);
      v62 = *(_OWORD *)(a2 + 64);
      v97[0] = *(_OWORD *)(a2 + 48);
      v97[1] = v62;
      LODWORD(v97[2]) = *(_DWORD *)(a2 + 80);
      v63 = *(_OWORD *)(a2 + 16);
      v96[0] = *(_OWORD *)a2;
      v96[1] = v63;
      v96[2] = v61;
      v64 = _ViewInputs.containerPosition.getter();
      v65 = *(_OWORD *)(a2 + 32);
      v66 = *(_OWORD *)(a2 + 64);
      v97[0] = *(_OWORD *)(a2 + 48);
      v97[1] = v66;
      LODWORD(v97[2]) = *(_DWORD *)(a2 + 80);
      v67 = *(_OWORD *)(a2 + 16);
      v96[0] = *(_OWORD *)a2;
      v96[1] = v67;
      v96[2] = v65;
      v68 = _ViewInputs.environment.getter();
      v69 = v94;
      v70 = DWORD2(v94);
      v71 = HIDWORD(v94);
      v96[0] = v94;
      v72 = _ViewOutputs.subscript.getter();
      *(_QWORD *)&v96[0] = v69;
      if ((v72 & 0x100000000) != 0)
        v73 = v82;
      else
        v73 = v72;
      *((_QWORD *)&v96[0] + 1) = __PAIR64__(v71, v70);
      v74 = _ViewOutputs.subscript.getter();
      LODWORD(v96[0]) = v81;
      if ((v74 & 0x100000000) != 0)
        v75 = v82;
      else
        v75 = v74;
      BYTE4(v96[0]) = v93 & 1;
      *(_OWORD *)((char *)v96 + 8) = v92;
      BYTE8(v96[1]) = v91;
      HIDWORD(v96[1]) = v80;
      *(_QWORD *)&v96[2] = __PAIR64__(v78, v79);
      *((_QWORD *)&v96[2] + 1) = __PAIR64__(v68, v64);
      *(_QWORD *)&v97[0] = __PAIR64__(v83, v73);
      DWORD2(v97[0]) = v75;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v96[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    v76 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (__int128 *)a2, v94, *((unint64_t *)&v94 + 1), 0);
    LOBYTE(v96[0]) = 0;
    v77 = v76;
    _ViewOutputs.subscript.setter();
    LOBYTE(v96[0]) = 1;
    specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v77, 0x100000000, a2);
    LOBYTE(v96[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v50 = a4;
    *a4 = v94;
    v51 = *((_QWORD *)&v94 + 1);
  }
  else
  {
    *(_QWORD *)&v98 = v6;
    DWORD2(v98) = v7;
    v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v13 = 0;
    if ((v12 & 1) != 0)
    {
      *(_QWORD *)&v98 = v6;
      DWORD2(v98) = v7;
      v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      v13 = 0;
      if ((v14 & 1) != 0)
      {
        outlined retain of _ViewInputs(a2);
        lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
        PropertyList.subscript.getter();
        outlined release of _ViewInputs(a2);
        v13 = (v98 >> 4) & 1;
      }
    }
    v87 = v7;
    v89 = v6;
    v15 = *(_QWORD *)a2;
    v16 = *(_DWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 24);
    v19 = *(_DWORD *)(a2 + 32);
    v20 = *(_DWORD *)(a2 + 36);
    v21 = *(_QWORD *)(a2 + 40);
    v22 = *(_OWORD *)(a2 + 48);
    v23 = *(_OWORD *)(a2 + 64);
    v100 = *(_OWORD *)(a2 + 32);
    v101[0] = v22;
    v101[1] = v23;
    v102 = *(_DWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 16);
    v98 = *(_OWORD *)a2;
    v99 = v24;
    v86 = v13;
    if (v13)
    {
      outlined retain of _ViewInputs(a2);
      lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
      PropertyList.subscript.getter();
      LODWORD(v96[0]) &= ~0x10u;
      PropertyList.subscript.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(_QWORD *)&v96[0] = v15;
    DWORD2(v96[0]) = v16;
    *(_QWORD *)&v96[1] = v17;
    *((_QWORD *)&v96[1] + 1) = v18;
    LODWORD(v96[2]) = v19;
    DWORD1(v96[2]) = v20 & 0xFFFFFFBF | (((v20 >> 5) & 1) << 6);
    *((_QWORD *)&v96[2] + 1) = v21;
    v32 = v89;
    *(_QWORD *)&v97[0] = v89;
    DWORD2(v97[0]) = v87;
    *(_OWORD *)((char *)v97 + 12) = *(_OWORD *)(a2 + 60);
    *(_QWORD *)((char *)&v97[1] + 12) = *(_QWORD *)(a2 + 76);
    outlined retain of _ViewInputs(a2);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v33 = swift_bridgeObjectRetain();
    a3((__int128 *)v95, v33, v96);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if (v86)
    {
      v96[0] = *(_OWORD *)v95;
      _ViewOutputs.subscript.getter();
      v34 = *(_OWORD *)(a2 + 32);
      v35 = *(_OWORD *)(a2 + 64);
      v97[0] = *(_OWORD *)(a2 + 48);
      v97[1] = v35;
      LODWORD(v97[2]) = *(_DWORD *)(a2 + 80);
      v36 = *(_OWORD *)(a2 + 16);
      v96[0] = *(_OWORD *)a2;
      v96[1] = v36;
      v96[2] = v34;
      v37 = _ViewInputs.environment.getter();
      MEMORY[0x1E0C80A78](v37, v38);
      *(_QWORD *)&v96[0] = v89;
      DWORD2(v96[0]) = v87;
      MEMORY[0x1E0C80A78](v39, v40);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      v32 = v89;
    }
    *(_QWORD *)&v96[0] = v32;
    DWORD2(v96[0]) = v87;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      if ((v96[0] & 0x80) != 0)
      {
        v96[0] = *(_OWORD *)v95;
        v41 = _ViewOutputs.subscript.getter();
        if ((v41 & 0x100000000) != 0)
          v42 = *MEMORY[0x1E0CFED28];
        else
          v42 = v41;
        v43 = *(_OWORD *)(a2 + 32);
        v44 = *(_OWORD *)(a2 + 64);
        v97[0] = *(_OWORD *)(a2 + 48);
        v97[1] = v44;
        LODWORD(v97[2]) = *(_DWORD *)(a2 + 80);
        v45 = *(_OWORD *)(a2 + 16);
        v96[0] = *(_OWORD *)a2;
        v96[1] = v45;
        v96[2] = v43;
        v46 = _ViewInputs.environment.getter();
        type metadata accessor for PropertyList.Tracker();
        v47 = PropertyList.Tracker.__allocating_init()();
        LODWORD(v96[0]) = v46;
        *((_QWORD *)&v96[0] + 1) = v47;
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
        v48 = Attribute.init<A>(body:value:flags:update:)();
        swift_release();
        *(_QWORD *)&v96[0] = __PAIR64__(v48, v42);
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
        LODWORD(v96[0]) = Attribute.init<A>(body:value:flags:update:)();
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
        Attribute.init<A>(body:value:flags:update:)();
        _GraphValue.init(_:)();
        specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v95, a2);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v50 = a4;
    *a4 = *(_QWORD *)v95;
    v51 = *(_QWORD *)&v95[8];
  }
  v50[1] = v51;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  _BYTE v78[28];
  _OWORD v79[3];
  _OWORD v80[2];
  int v81;
  __int128 v82;
  _OWORD v83[2];
  _OWORD v84[2];
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v76 = *(_QWORD *)(a2 + 48);
  v77 = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v82 = *(_QWORD *)(a2 + 48);
  DWORD2(v82) = *(_DWORD *)(a2 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v6 = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v6;
    v84[1] = v7;
    v85 = *(_DWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v8;
    v9 = *(_QWORD *)a2;
    *(_OWORD *)v78 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v78[12] = *(_OWORD *)(a2 + 20);
    v10 = *(_DWORD *)(a2 + 36);
    v68 = *(_QWORD *)(a2 + 40);
    v69 = v9;
    if ((v10 & 0x10) != 0)
    {
      v38 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v38;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v39 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v39;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(_QWORD *)&v79[0] = v82;
    DWORD2(v79[0]) = DWORD2(v82);
    *(_QWORD *)&v79[1] = *(_QWORD *)&v83[0];
    *(_OWORD *)((char *)&v79[1] + 8) = *(_OWORD *)((char *)v83 + 8);
    *((_QWORD *)&v79[2] + 1) = *((_QWORD *)&v83[1] + 1);
    *(_QWORD *)&v80[0] = *(_QWORD *)&v84[0];
    *(_OWORD *)((char *)v80 + 8) = *(_OWORD *)((char *)v84 + 8);
    *((_QWORD *)&v80[1] + 1) = *((_QWORD *)&v84[1] + 1);
    v81 = v85;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v40 = swift_bridgeObjectRetain();
    a3(&v75, v40, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v79[0] = v75;
        v41 = _ViewOutputs.subscript.getter();
        v42 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
        if ((v41 & 0x100000000) == 0)
          v42 = v41;
        v66 = v42;
      }
      else
      {
        v66 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
      }
      _DisplayList_Identity.init()();
      v65 = v79[0];
      v43 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v43;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v44 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v44;
      LODWORD(v73) = v65;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v79[0] = v69;
      *(_OWORD *)((char *)v79 + 8) = *(_OWORD *)v78;
      *(_OWORD *)((char *)&v79[1] + 4) = *(_OWORD *)&v78[12];
      DWORD1(v79[2]) = v10;
      *((_QWORD *)&v79[2] + 1) = v68;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v79[0]) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ArchivedAttachmentModifier>, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v64 = _GraphValue.value.getter();
      v45 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v45;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v46;
      v63 = _ViewInputs.animatedSize()();
      v47 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v47;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v48 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v48;
      v62 = _ViewInputs.animatedPosition()();
      v49 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v49;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v50 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v50;
      v51 = _ViewInputs.containerPosition.getter();
      v52 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v52;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v53 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v53;
      v54 = _ViewInputs.environment.getter();
      v55 = v75;
      v56 = DWORD2(v75);
      v57 = HIDWORD(v75);
      v79[0] = v75;
      v58 = _ViewOutputs.subscript.getter();
      *(_QWORD *)&v79[0] = v55;
      if ((v58 & 0x100000000) != 0)
        v59 = v67;
      else
        v59 = v58;
      *((_QWORD *)&v79[0] + 1) = __PAIR64__(v57, v56);
      v60 = _ViewOutputs.subscript.getter();
      LODWORD(v79[0]) = v65;
      if ((v60 & 0x100000000) != 0)
        v61 = v67;
      else
        v61 = v60;
      BYTE4(v79[0]) = v74 & 1;
      *(_OWORD *)((char *)v79 + 8) = v73;
      BYTE8(v79[1]) = v72;
      HIDWORD(v79[1]) = v64;
      *(_QWORD *)&v79[2] = __PAIR64__(v62, v63);
      *((_QWORD *)&v79[2] + 1) = __PAIR64__(v54, v51);
      *(_QWORD *)&v80[0] = __PAIR64__(v66, v59);
      DWORD2(v80[0]) = v61;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DisplayListTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v79[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (__int128 *)a2, v75, *((unint64_t *)&v75 + 1), 0);
    LOBYTE(v79[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v36 = a4;
    *a4 = v75;
    v37 = *((_QWORD *)&v75 + 1);
    goto LABEL_32;
  }
  *(_QWORD *)&v82 = v76;
  DWORD2(v82) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(_QWORD *)&v82 = v76, DWORD2(v82) = v77, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    v11 = v82;
    v12 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v12;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v79[0]) &= ~0x10u;
      v14 = PropertyList.subscript.setter();
      v15 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v15;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v16 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v16;
      a3((__int128 *)v78, v14, v79);
      v79[0] = *(_OWORD *)v78;
      _ViewOutputs.subscript.getter();
      v17 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v17;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v18;
      v19 = _ViewInputs.environment.getter();
      MEMORY[0x1E0C80A78](v19, v20);
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      MEMORY[0x1E0C80A78](v21, v22);
      outlined retain of [Text.Modifier]((uint64_t)&v76);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v23;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v24;
  }
  v25 = outlined retain of _ViewInputs(a2);
  v26 = *(_OWORD *)(a2 + 48);
  v79[2] = *(_OWORD *)(a2 + 32);
  v80[0] = v26;
  v80[1] = *(_OWORD *)(a2 + 64);
  v81 = *(_DWORD *)(a2 + 80);
  v27 = *(_OWORD *)(a2 + 16);
  v79[0] = *(_OWORD *)a2;
  v79[1] = v27;
  a3((__int128 *)v78, v25, v79);
LABEL_10:
  *(_QWORD *)&v79[0] = v76;
  DWORD2(v79[0]) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v79[0] & 0x80) != 0)
    {
      v79[0] = *(_OWORD *)v78;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      v30 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v30;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v31 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v31;
      v32 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      v33 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v79[0]) = v32;
      *((_QWORD *)&v79[0] + 1) = v33;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_QWORD *)&v79[0] = __PAIR64__(v34, v29);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v79[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v78, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v36 = a4;
  *a4 = *(_QWORD *)v78;
  v37 = *(_QWORD *)&v78[8];
LABEL_32:
  v36[1] = v37;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  _BYTE v78[28];
  _OWORD v79[3];
  _OWORD v80[2];
  int v81;
  __int128 v82;
  _OWORD v83[2];
  _OWORD v84[2];
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v76 = *(_QWORD *)(a2 + 48);
  v77 = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v82 = *(_QWORD *)(a2 + 48);
  DWORD2(v82) = *(_DWORD *)(a2 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v6 = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v6;
    v84[1] = v7;
    v85 = *(_DWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v8;
    v9 = *(_QWORD *)a2;
    *(_OWORD *)v78 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v78[12] = *(_OWORD *)(a2 + 20);
    v10 = *(_DWORD *)(a2 + 36);
    v68 = *(_QWORD *)(a2 + 40);
    v69 = v9;
    if ((v10 & 0x10) != 0)
    {
      v38 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v38;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v39 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v39;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(_QWORD *)&v79[0] = v82;
    DWORD2(v79[0]) = DWORD2(v82);
    *(_QWORD *)&v79[1] = *(_QWORD *)&v83[0];
    *(_OWORD *)((char *)&v79[1] + 8) = *(_OWORD *)((char *)v83 + 8);
    *((_QWORD *)&v79[2] + 1) = *((_QWORD *)&v83[1] + 1);
    *(_QWORD *)&v80[0] = *(_QWORD *)&v84[0];
    *(_OWORD *)((char *)v80 + 8) = *(_OWORD *)((char *)v84 + 8);
    *((_QWORD *)&v80[1] + 1) = *((_QWORD *)&v84[1] + 1);
    v81 = v85;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v40 = swift_bridgeObjectRetain();
    a3(&v75, v40, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v79[0] = v75;
        v41 = _ViewOutputs.subscript.getter();
        v42 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
        if ((v41 & 0x100000000) == 0)
          v42 = v41;
        v66 = v42;
      }
      else
      {
        v66 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
      }
      _DisplayList_Identity.init()();
      v65 = v79[0];
      v43 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v43;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v44 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v44;
      LODWORD(v73) = v65;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v79[0] = v69;
      *(_OWORD *)((char *)v79 + 8) = *(_OWORD *)v78;
      *(_OWORD *)((char *)&v79[1] + 4) = *(_OWORD *)&v78[12];
      DWORD1(v79[2]) = v10;
      *((_QWORD *)&v79[2] + 1) = v68;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v79[0]) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityGestureModifier>, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v64 = _GraphValue.value.getter();
      v45 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v45;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v46;
      v63 = _ViewInputs.animatedSize()();
      v47 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v47;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v48 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v48;
      v62 = _ViewInputs.animatedPosition()();
      v49 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v49;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v50 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v50;
      v51 = _ViewInputs.containerPosition.getter();
      v52 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v52;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v53 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v53;
      v54 = _ViewInputs.environment.getter();
      v55 = v75;
      v56 = DWORD2(v75);
      v57 = HIDWORD(v75);
      v79[0] = v75;
      v58 = _ViewOutputs.subscript.getter();
      *(_QWORD *)&v79[0] = v55;
      if ((v58 & 0x100000000) != 0)
        v59 = v67;
      else
        v59 = v58;
      *((_QWORD *)&v79[0] + 1) = __PAIR64__(v57, v56);
      v60 = _ViewOutputs.subscript.getter();
      LODWORD(v79[0]) = v65;
      if ((v60 & 0x100000000) != 0)
        v61 = v67;
      else
        v61 = v60;
      BYTE4(v79[0]) = v74 & 1;
      *(_OWORD *)((char *)v79 + 8) = v73;
      BYTE8(v79[1]) = v72;
      HIDWORD(v79[1]) = v64;
      *(_QWORD *)&v79[2] = __PAIR64__(v62, v63);
      *((_QWORD *)&v79[2] + 1) = __PAIR64__(v54, v51);
      *(_QWORD *)&v80[0] = __PAIR64__(v66, v59);
      DWORD2(v80[0]) = v61;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v79[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (__int128 *)a2, v75, *((unint64_t *)&v75 + 1), 0);
    LOBYTE(v79[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v36 = a4;
    *a4 = v75;
    v37 = *((_QWORD *)&v75 + 1);
    goto LABEL_32;
  }
  *(_QWORD *)&v82 = v76;
  DWORD2(v82) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(_QWORD *)&v82 = v76, DWORD2(v82) = v77, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    v11 = v82;
    v12 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v12;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v79[0]) &= ~0x10u;
      v14 = PropertyList.subscript.setter();
      v15 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v15;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v16 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v16;
      a3((__int128 *)v78, v14, v79);
      v79[0] = *(_OWORD *)v78;
      _ViewOutputs.subscript.getter();
      v17 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v17;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v18;
      v19 = _ViewInputs.environment.getter();
      MEMORY[0x1E0C80A78](v19, v20);
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      MEMORY[0x1E0C80A78](v21, v22);
      outlined retain of [Text.Modifier]((uint64_t)&v76);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v23;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v24;
  }
  v25 = outlined retain of _ViewInputs(a2);
  v26 = *(_OWORD *)(a2 + 48);
  v79[2] = *(_OWORD *)(a2 + 32);
  v80[0] = v26;
  v80[1] = *(_OWORD *)(a2 + 64);
  v81 = *(_DWORD *)(a2 + 80);
  v27 = *(_OWORD *)(a2 + 16);
  v79[0] = *(_OWORD *)a2;
  v79[1] = v27;
  a3((__int128 *)v78, v25, v79);
LABEL_10:
  *(_QWORD *)&v79[0] = v76;
  DWORD2(v79[0]) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v79[0] & 0x80) != 0)
    {
      v79[0] = *(_OWORD *)v78;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      v30 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v30;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v31 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v31;
      v32 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      v33 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v79[0]) = v32;
      *((_QWORD *)&v79[0] + 1) = v33;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_QWORD *)&v79[0] = __PAIR64__(v34, v29);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v79[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v78, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v36 = a4;
  *a4 = *(_QWORD *)v78;
  v37 = *(_QWORD *)&v78[8];
LABEL_32:
  v36[1] = v37;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  _BYTE v78[28];
  _OWORD v79[3];
  _OWORD v80[2];
  int v81;
  __int128 v82;
  _OWORD v83[2];
  _OWORD v84[2];
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v76 = *(_QWORD *)(a2 + 48);
  v77 = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v82 = *(_QWORD *)(a2 + 48);
  DWORD2(v82) = *(_DWORD *)(a2 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v6 = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v6;
    v84[1] = v7;
    v85 = *(_DWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v8;
    v9 = *(_QWORD *)a2;
    *(_OWORD *)v78 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v78[12] = *(_OWORD *)(a2 + 20);
    v10 = *(_DWORD *)(a2 + 36);
    v68 = *(_QWORD *)(a2 + 40);
    v69 = v9;
    if ((v10 & 0x10) != 0)
    {
      v38 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v38;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v39 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v39;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(_QWORD *)&v79[0] = v82;
    DWORD2(v79[0]) = DWORD2(v82);
    *(_QWORD *)&v79[1] = *(_QWORD *)&v83[0];
    *(_OWORD *)((char *)&v79[1] + 8) = *(_OWORD *)((char *)v83 + 8);
    *((_QWORD *)&v79[2] + 1) = *((_QWORD *)&v83[1] + 1);
    *(_QWORD *)&v80[0] = *(_QWORD *)&v84[0];
    *(_OWORD *)((char *)v80 + 8) = *(_OWORD *)((char *)v84 + 8);
    *((_QWORD *)&v80[1] + 1) = *((_QWORD *)&v84[1] + 1);
    v81 = v85;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v40 = swift_bridgeObjectRetain();
    a3(&v75, v40, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v79[0] = v75;
        v41 = _ViewOutputs.subscript.getter();
        v42 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
        if ((v41 & 0x100000000) == 0)
          v42 = v41;
        v66 = v42;
      }
      else
      {
        v66 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
      }
      _DisplayList_Identity.init()();
      v65 = v79[0];
      v43 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v43;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v44 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v44;
      LODWORD(v73) = v65;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v79[0] = v69;
      *(_OWORD *)((char *)v79 + 8) = *(_OWORD *)v78;
      *(_OWORD *)((char *)&v79[1] + 4) = *(_OWORD *)&v78[12];
      DWORD1(v79[2]) = v10;
      *((_QWORD *)&v79[2] + 1) = v68;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v79[0]) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityOpacityModifier>, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v64 = _GraphValue.value.getter();
      v45 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v45;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v46;
      v63 = _ViewInputs.animatedSize()();
      v47 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v47;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v48 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v48;
      v62 = _ViewInputs.animatedPosition()();
      v49 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v49;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v50 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v50;
      v51 = _ViewInputs.containerPosition.getter();
      v52 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v52;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v53 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v53;
      v54 = _ViewInputs.environment.getter();
      v55 = v75;
      v56 = DWORD2(v75);
      v57 = HIDWORD(v75);
      v79[0] = v75;
      v58 = _ViewOutputs.subscript.getter();
      *(_QWORD *)&v79[0] = v55;
      if ((v58 & 0x100000000) != 0)
        v59 = v67;
      else
        v59 = v58;
      *((_QWORD *)&v79[0] + 1) = __PAIR64__(v57, v56);
      v60 = _ViewOutputs.subscript.getter();
      LODWORD(v79[0]) = v65;
      if ((v60 & 0x100000000) != 0)
        v61 = v67;
      else
        v61 = v60;
      BYTE4(v79[0]) = v74 & 1;
      *(_OWORD *)((char *)v79 + 8) = v73;
      BYTE8(v79[1]) = v72;
      HIDWORD(v79[1]) = v64;
      *(_QWORD *)&v79[2] = __PAIR64__(v62, v63);
      *((_QWORD *)&v79[2] + 1) = __PAIR64__(v54, v51);
      *(_QWORD *)&v80[0] = __PAIR64__(v66, v59);
      DWORD2(v80[0]) = v61;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v79[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (__int128 *)a2, v75, *((unint64_t *)&v75 + 1), 0);
    LOBYTE(v79[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v36 = a4;
    *a4 = v75;
    v37 = *((_QWORD *)&v75 + 1);
    goto LABEL_32;
  }
  *(_QWORD *)&v82 = v76;
  DWORD2(v82) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(_QWORD *)&v82 = v76, DWORD2(v82) = v77, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    v11 = v82;
    v12 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v12;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v79[0]) &= ~0x10u;
      v14 = PropertyList.subscript.setter();
      v15 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v15;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v16 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v16;
      a3((__int128 *)v78, v14, v79);
      v79[0] = *(_OWORD *)v78;
      _ViewOutputs.subscript.getter();
      v17 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v17;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v18;
      v19 = _ViewInputs.environment.getter();
      MEMORY[0x1E0C80A78](v19, v20);
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      MEMORY[0x1E0C80A78](v21, v22);
      outlined retain of [Text.Modifier]((uint64_t)&v76);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v23;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v24;
  }
  v25 = outlined retain of _ViewInputs(a2);
  v26 = *(_OWORD *)(a2 + 48);
  v79[2] = *(_OWORD *)(a2 + 32);
  v80[0] = v26;
  v80[1] = *(_OWORD *)(a2 + 64);
  v81 = *(_DWORD *)(a2 + 80);
  v27 = *(_OWORD *)(a2 + 16);
  v79[0] = *(_OWORD *)a2;
  v79[1] = v27;
  a3((__int128 *)v78, v25, v79);
LABEL_10:
  *(_QWORD *)&v79[0] = v76;
  DWORD2(v79[0]) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v79[0] & 0x80) != 0)
    {
      v79[0] = *(_OWORD *)v78;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      v30 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v30;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v31 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v31;
      v32 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      v33 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v79[0]) = v32;
      *((_QWORD *)&v79[0] + 1) = v33;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_QWORD *)&v79[0] = __PAIR64__(v34, v29);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v79[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v78, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v36 = a4;
  *a4 = *(_QWORD *)v78;
  v37 = *(_QWORD *)&v78[8];
LABEL_32:
  v36[1] = v37;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  _BYTE v78[28];
  _OWORD v79[3];
  _OWORD v80[2];
  int v81;
  __int128 v82;
  _OWORD v83[2];
  _OWORD v84[2];
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v76 = *(_QWORD *)(a2 + 48);
  v77 = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v82 = *(_QWORD *)(a2 + 48);
  DWORD2(v82) = *(_DWORD *)(a2 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v6 = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v6;
    v84[1] = v7;
    v85 = *(_DWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v8;
    v9 = *(_QWORD *)a2;
    *(_OWORD *)v78 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v78[12] = *(_OWORD *)(a2 + 20);
    v10 = *(_DWORD *)(a2 + 36);
    v68 = *(_QWORD *)(a2 + 40);
    v69 = v9;
    if ((v10 & 0x10) != 0)
    {
      v38 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v38;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v39 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v39;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(_QWORD *)&v79[0] = v82;
    DWORD2(v79[0]) = DWORD2(v82);
    *(_QWORD *)&v79[1] = *(_QWORD *)&v83[0];
    *(_OWORD *)((char *)&v79[1] + 8) = *(_OWORD *)((char *)v83 + 8);
    *((_QWORD *)&v79[2] + 1) = *((_QWORD *)&v83[1] + 1);
    *(_QWORD *)&v80[0] = *(_QWORD *)&v84[0];
    *(_OWORD *)((char *)v80 + 8) = *(_OWORD *)((char *)v84 + 8);
    *((_QWORD *)&v80[1] + 1) = *((_QWORD *)&v84[1] + 1);
    v81 = v85;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v40 = swift_bridgeObjectRetain();
    a3(&v75, v40, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v79[0] = v75;
        v41 = _ViewOutputs.subscript.getter();
        v42 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
        if ((v41 & 0x100000000) == 0)
          v42 = v41;
        v66 = v42;
      }
      else
      {
        v66 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
      }
      _DisplayList_Identity.init()();
      v65 = v79[0];
      v43 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v43;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v44 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v44;
      LODWORD(v73) = v65;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v79[0] = v69;
      *(_OWORD *)((char *)v79 + 8) = *(_OWORD *)v78;
      *(_OWORD *)((char *)&v79[1] + 4) = *(_OWORD *)&v78[12];
      DWORD1(v79[2]) = v10;
      *((_QWORD *)&v79[2] + 1) = v68;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v79[0]) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v64 = _GraphValue.value.getter();
      v45 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v45;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v46;
      v63 = _ViewInputs.animatedSize()();
      v47 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v47;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v48 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v48;
      v62 = _ViewInputs.animatedPosition()();
      v49 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v49;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v50 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v50;
      v51 = _ViewInputs.containerPosition.getter();
      v52 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v52;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v53 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v53;
      v54 = _ViewInputs.environment.getter();
      v55 = v75;
      v56 = DWORD2(v75);
      v57 = HIDWORD(v75);
      v79[0] = v75;
      v58 = _ViewOutputs.subscript.getter();
      *(_QWORD *)&v79[0] = v55;
      if ((v58 & 0x100000000) != 0)
        v59 = v67;
      else
        v59 = v58;
      *((_QWORD *)&v79[0] + 1) = __PAIR64__(v57, v56);
      v60 = _ViewOutputs.subscript.getter();
      LODWORD(v79[0]) = v65;
      if ((v60 & 0x100000000) != 0)
        v61 = v67;
      else
        v61 = v60;
      BYTE4(v79[0]) = v74 & 1;
      *(_OWORD *)((char *)v79 + 8) = v73;
      BYTE8(v79[1]) = v72;
      HIDWORD(v79[1]) = v64;
      *(_QWORD *)&v79[2] = __PAIR64__(v62, v63);
      *((_QWORD *)&v79[2] + 1) = __PAIR64__(v54, v51);
      *(_QWORD *)&v80[0] = __PAIR64__(v66, v59);
      DWORD2(v80[0]) = v61;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v79[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (__int128 *)a2, v75, *((unint64_t *)&v75 + 1), 0);
    LOBYTE(v79[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v36 = a4;
    *a4 = v75;
    v37 = *((_QWORD *)&v75 + 1);
    goto LABEL_32;
  }
  *(_QWORD *)&v82 = v76;
  DWORD2(v82) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(_QWORD *)&v82 = v76, DWORD2(v82) = v77, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    v11 = v82;
    v12 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v12;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v79[0]) &= ~0x10u;
      v14 = PropertyList.subscript.setter();
      v15 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v15;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v16 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v16;
      a3((__int128 *)v78, v14, v79);
      v79[0] = *(_OWORD *)v78;
      _ViewOutputs.subscript.getter();
      v17 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v17;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v18;
      v19 = _ViewInputs.environment.getter();
      MEMORY[0x1E0C80A78](v19, v20);
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      MEMORY[0x1E0C80A78](v21, v22);
      outlined retain of [Text.Modifier]((uint64_t)&v76);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v23;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v24;
  }
  v25 = outlined retain of _ViewInputs(a2);
  v26 = *(_OWORD *)(a2 + 48);
  v79[2] = *(_OWORD *)(a2 + 32);
  v80[0] = v26;
  v80[1] = *(_OWORD *)(a2 + 64);
  v81 = *(_DWORD *)(a2 + 80);
  v27 = *(_OWORD *)(a2 + 16);
  v79[0] = *(_OWORD *)a2;
  v79[1] = v27;
  a3((__int128 *)v78, v25, v79);
LABEL_10:
  *(_QWORD *)&v79[0] = v76;
  DWORD2(v79[0]) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v79[0] & 0x80) != 0)
    {
      v79[0] = *(_OWORD *)v78;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      v30 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v30;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v31 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v31;
      v32 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      v33 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v79[0]) = v32;
      *((_QWORD *)&v79[0] + 1) = v33;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_QWORD *)&v79[0] = __PAIR64__(v34, v29);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v79[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v78, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v36 = a4;
  *a4 = *(_QWORD *)v78;
  v37 = *(_QWORD *)&v78[8];
LABEL_32:
  v36[1] = v37;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  _BYTE v78[28];
  _OWORD v79[3];
  _OWORD v80[2];
  int v81;
  __int128 v82;
  _OWORD v83[2];
  _OWORD v84[2];
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v76 = *(_QWORD *)(a2 + 48);
  v77 = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v82 = *(_QWORD *)(a2 + 48);
  DWORD2(v82) = *(_DWORD *)(a2 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v6 = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v6;
    v84[1] = v7;
    v85 = *(_DWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v8;
    v9 = *(_QWORD *)a2;
    *(_OWORD *)v78 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v78[12] = *(_OWORD *)(a2 + 20);
    v10 = *(_DWORD *)(a2 + 36);
    v68 = *(_QWORD *)(a2 + 40);
    v69 = v9;
    if ((v10 & 0x10) != 0)
    {
      v38 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v38;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v39 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v39;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(_QWORD *)&v79[0] = v82;
    DWORD2(v79[0]) = DWORD2(v82);
    *(_QWORD *)&v79[1] = *(_QWORD *)&v83[0];
    *(_OWORD *)((char *)&v79[1] + 8) = *(_OWORD *)((char *)v83 + 8);
    *((_QWORD *)&v79[2] + 1) = *((_QWORD *)&v83[1] + 1);
    *(_QWORD *)&v80[0] = *(_QWORD *)&v84[0];
    *(_OWORD *)((char *)v80 + 8) = *(_OWORD *)((char *)v84 + 8);
    *((_QWORD *)&v80[1] + 1) = *((_QWORD *)&v84[1] + 1);
    v81 = v85;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v40 = swift_bridgeObjectRetain();
    a3(&v75, v40, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v79[0] = v75;
        v41 = _ViewOutputs.subscript.getter();
        v42 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
        if ((v41 & 0x100000000) == 0)
          v42 = v41;
        v66 = v42;
      }
      else
      {
        v66 = *MEMORY[0x1E0CFED28];
        v67 = *MEMORY[0x1E0CFED28];
      }
      _DisplayList_Identity.init()();
      v65 = v79[0];
      v43 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v43;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v44 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v44;
      LODWORD(v73) = v65;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v79[0] = v69;
      *(_OWORD *)((char *)v79 + 8) = *(_OWORD *)v78;
      *(_OWORD *)((char *)&v79[1] + 4) = *(_OWORD *)&v78[12];
      DWORD1(v79[2]) = v10;
      *((_QWORD *)&v79[2] + 1) = v68;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v79[0]) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityScrollableContextModifier>, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v64 = _GraphValue.value.getter();
      v45 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v45;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v46;
      v63 = _ViewInputs.animatedSize()();
      v47 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v47;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v48 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v48;
      v62 = _ViewInputs.animatedPosition()();
      v49 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v49;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v50 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v50;
      v51 = _ViewInputs.containerPosition.getter();
      v52 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v52;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v53 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v53;
      v54 = _ViewInputs.environment.getter();
      v55 = v75;
      v56 = DWORD2(v75);
      v57 = HIDWORD(v75);
      v79[0] = v75;
      v58 = _ViewOutputs.subscript.getter();
      *(_QWORD *)&v79[0] = v55;
      if ((v58 & 0x100000000) != 0)
        v59 = v67;
      else
        v59 = v58;
      *((_QWORD *)&v79[0] + 1) = __PAIR64__(v57, v56);
      v60 = _ViewOutputs.subscript.getter();
      LODWORD(v79[0]) = v65;
      if ((v60 & 0x100000000) != 0)
        v61 = v67;
      else
        v61 = v60;
      BYTE4(v79[0]) = v74 & 1;
      *(_OWORD *)((char *)v79 + 8) = v73;
      BYTE8(v79[1]) = v72;
      HIDWORD(v79[1]) = v64;
      *(_QWORD *)&v79[2] = __PAIR64__(v62, v63);
      *((_QWORD *)&v79[2] + 1) = __PAIR64__(v54, v51);
      *(_QWORD *)&v80[0] = __PAIR64__(v66, v59);
      DWORD2(v80[0]) = v61;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v79[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (__int128 *)a2, v75, *((unint64_t *)&v75 + 1), 0);
    LOBYTE(v79[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v36 = a4;
    *a4 = v75;
    v37 = *((_QWORD *)&v75 + 1);
    goto LABEL_32;
  }
  *(_QWORD *)&v82 = v76;
  DWORD2(v82) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(_QWORD *)&v82 = v76, DWORD2(v82) = v77, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    v11 = v82;
    v12 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v12;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v79[0]) &= ~0x10u;
      v14 = PropertyList.subscript.setter();
      v15 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v15;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v16 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v16;
      a3((__int128 *)v78, v14, v79);
      v79[0] = *(_OWORD *)v78;
      _ViewOutputs.subscript.getter();
      v17 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v17;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v18;
      v19 = _ViewInputs.environment.getter();
      MEMORY[0x1E0C80A78](v19, v20);
      *(_QWORD *)&v79[0] = v76;
      DWORD2(v79[0]) = v77;
      MEMORY[0x1E0C80A78](v21, v22);
      outlined retain of [Text.Modifier]((uint64_t)&v76);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    v83[1] = *(_OWORD *)(a2 + 32);
    v84[0] = v23;
    v84[1] = *(_OWORD *)(a2 + 64);
    v85 = *(_DWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 16);
    v82 = *(_OWORD *)a2;
    v83[0] = v24;
  }
  v25 = outlined retain of _ViewInputs(a2);
  v26 = *(_OWORD *)(a2 + 48);
  v79[2] = *(_OWORD *)(a2 + 32);
  v80[0] = v26;
  v80[1] = *(_OWORD *)(a2 + 64);
  v81 = *(_DWORD *)(a2 + 80);
  v27 = *(_OWORD *)(a2 + 16);
  v79[0] = *(_OWORD *)a2;
  v79[1] = v27;
  a3((__int128 *)v78, v25, v79);
LABEL_10:
  *(_QWORD *)&v79[0] = v76;
  DWORD2(v79[0]) = v77;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v79[0] & 0x80) != 0)
    {
      v79[0] = *(_OWORD *)v78;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      v30 = *(_OWORD *)(a2 + 48);
      v79[2] = *(_OWORD *)(a2 + 32);
      v80[0] = v30;
      v80[1] = *(_OWORD *)(a2 + 64);
      v81 = *(_DWORD *)(a2 + 80);
      v31 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v31;
      v32 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      v33 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v79[0]) = v32;
      *((_QWORD *)&v79[0] + 1) = v33;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_QWORD *)&v79[0] = __PAIR64__(v34, v29);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v79[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v78, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v36 = a4;
  *a4 = *(_QWORD *)v78;
  v37 = *(_QWORD *)&v78[8];
LABEL_32:
  v36[1] = v37;
  return result;
}

uint64_t PPTTestBridge.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  outlined destroy of PPTTestCase?(v0 + 32);
  return swift_deallocClassInstance();
}

uint64_t OnTestEffect.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11[3];
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  int v15;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0 || *(_DWORD *)(v0 + 12) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    *(_DWORD *)(v0 + 12) = *(_DWORD *)AGGraphGetValue() >> 1;
    *(_BYTE *)(v0 + 16) = 0;
    *(_DWORD *)(v0 + 20) = 0;
    *(_BYTE *)(v0 + 24) = 1;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for PPTTestCase?, (uint64_t)&type metadata for PPTTestCase, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  outlined init with copy of PPTTestCase?(Value, (uint64_t)v11);
  if (!v11[0].n128_u64[0] && v11[0].n128_u64[1] == 1)
    return outlined destroy of PPTTestCase?((uint64_t)v11);
  outlined init with take of PPTTestCase(v11, (uint64_t)v12);
  v3 = v13;
  v4 = v14;
  v5 = (_QWORD *)AGGraphGetValue();
  v6 = v3 == *v5 && v4 == v5[1];
  if ((v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && ((*(_BYTE *)(v0 + 24) & 1) != 0 || *(_DWORD *)(v0 + 20) != v15))
  {
    *(_DWORD *)(v0 + 20) = v15;
    *(_BYTE *)(v0 + 24) = 0;
    v7 = AGGraphGetValue();
    v9 = *(_QWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 24);
    outlined init with copy of PPTTestCase((uint64_t)v12, (uint64_t)v11);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v9;
    *(_QWORD *)(v10 + 24) = v8;
    outlined init with take of PPTTestCase(v11, v10 + 32);
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
  }
  return outlined destroy of PPTTestCase((uint64_t)v12);
}

uint64_t outlined destroy of PPTTestCase?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for PPTTestCase?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PPTTestCase?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PPTTestCase?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PPTTestCase?);
  }
}

uint64_t outlined init with copy of PPTTestCase?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for PPTTestCase?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ResolvedNavigationDestinations(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *__swift_memcpy13_4(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

void partial apply for closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(_QWORD *a1)
{
  uint64_t v1;

  closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.Key@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.Key(&one-time initialization token for defaultValue, (uint64_t)&static SheetPreference.Key.defaultValue, a1);
}

uint64_t @objc _UIHostingView._layoutHeightDependsOnWidth.getter()
{
  return 1;
}

ValueMetadata *type metadata accessor for GridLayout()
{
  return &type metadata for GridLayout;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior()
{
  return &type metadata for AccessibilityChildBehavior;
}

uint64_t getEnumTagSinglePayload for PPTTestCase(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 44))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t type metadata completion function for StaticIf()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for AsOptional()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t one-time initialization function for automatic(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t *a5)
{
  uint64_t result;

  type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Host>(0, a2, a3, a4);
  result = swift_allocObject();
  *a5 = result;
  return result;
}

void type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Host>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for AccessibilityChildBehaviorBox(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t static AccessibilityChildBehavior.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*a2) & 1;
}

uint64_t AccessibilityChildBehaviorBox.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  type metadata accessor for AccessibilityChildBehaviorBox(0, *(_QWORD *)(*(_QWORD *)v4 + 136), *(_QWORD *)(*(_QWORD *)v4 + 144), a4);
  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v6 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v6 & 1;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityChildBehaviorBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityChildBehaviorBox);
}

uint64_t partial apply for closure #1 in Attribute.init(type:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init(type:)(a1);
}

uint64_t closure #1 in Attribute.init(type:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for External();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v2);
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t static HoverEffect.automatic.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_retain();
}

uint64_t AppSceneDelegate.responds(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80);
    v5 = swift_retain();
    v6 = (void *)v4(v5);
    swift_release();
    if (v6)
    {
      v7 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v7)
        LODWORD(v3) = objc_msgSend(v7, sel_respondsToSelector_, a1);
      else
        LODWORD(v3) = 0;

    }
    else
    {
      LODWORD(v3) = 0;
    }
  }
  type metadata accessor for AppSceneDelegate();
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_instancesRespondToSelector_, a1) | v3;
}

uint64_t type metadata accessor for AppSceneDelegate()
{
  return objc_opt_self();
}

double static ButtonActionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  double result;
  _QWORD v32[2];
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v11 = a2[3];
  v48 = a2[2];
  v49 = v11;
  v50 = a2[4];
  v51 = *((_DWORD *)a2 + 20);
  v12 = a2[1];
  v46 = *a2;
  v47 = v12;
  v13 = type metadata accessor for ButtonActionModifier(0, a4, a5, a3);
  LODWORD(v38) = v10;
  v14 = a2[3];
  v42 = a2[2];
  v43 = v14;
  v44 = a2[4];
  v45 = *((_DWORD *)a2 + 20);
  v15 = a2[1];
  v40 = *a2;
  v41 = v15;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonActionModifier<A>, v13);
  static GestureViewModifier.makeView(modifier:inputs:body:)();
  v38 = v49;
  v39 = DWORD2(v49);
  *(_QWORD *)&v40 = v49;
  DWORD2(v40) = DWORD2(v49);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)&v46);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v46);
    if ((v40 & 1) != 0)
    {
      type metadata accessor for _GraphValue();
      v16 = _GraphValue.value.getter();
      swift_getKeyPath();
      v17 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      v42 = v48;
      v43 = v49;
      v44 = v50;
      v45 = v51;
      HIDWORD(v40) = HIDWORD(v46);
      v41 = v47;
      swift_getKeyPath();
      v18 = _ViewInputs.mapEnvironment<A>(_:)();
      v19 = swift_release();
      MEMORY[0x1E0C80A78](v19, v20);
      v32[0] = a4;
      v32[1] = a5;
      v33 = __PAIR64__(v17, v16);
      LODWORD(v34) = v18;
      *(_QWORD *)&v40 = v38;
      DWORD2(v40) = v39;
      MEMORY[0x1E0C80A78](v21, v22);
      outlined retain of [Text.Modifier]((uint64_t)&v38);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
    }
  }
  *(_QWORD *)&v40 = v38;
  DWORD2(v40) = v39;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)&v46);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v46);
    if ((v40 & 8) != 0)
    {
      LODWORD(v40) = v10;
      type metadata accessor for _GraphValue();
      v23 = _GraphValue.value.getter();
      LODWORD(v40) = v23;
      MEMORY[0x1E0C80A78](v23, v24);
      v33 = type metadata accessor for ButtonActionModifier.PlatformAction(0, a4, a5, v25);
      v34 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonActionModifier<A>.PlatformAction, v33);
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(())?>, (uint64_t (*)(uint64_t))type metadata accessor for (())?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v40, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_33, (uint64_t)v32, v33, MEMORY[0x1E0DEDCE8], v26, MEMORY[0x1E0DEDD18], v27);
      v28 = v35;
      v42 = v48;
      v43 = v49;
      v44 = v50;
      v45 = v51;
      v40 = v46;
      v41 = v47;
      swift_getKeyPath();
      v29 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      v42 = v48;
      v43 = v49;
      v44 = v50;
      v45 = v51;
      v40 = v46;
      v41 = v47;
      swift_getKeyPath();
      v30 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      *(_QWORD *)&v40 = __PAIR64__(v29, v28);
      DWORD2(v40) = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent();
      LODWORD(v40) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)&v36, (uint64_t)&v46);
    }
  }
  *(_QWORD *)a6 = v36;
  result = v37;
  a6[1] = v37;
  return result;
}

uint64_t type metadata accessor for ButtonActionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonActionModifier);
}

uint64_t getEnumTagSinglePayload for ToolbarPlacement.Role(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFF9 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483641);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 6;
  if (v4 >= 8)
    return v5;
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for SheetPreference(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t static Anchor.Source<A>.bounds.getter()
{
  static UnitRect.one.getter();
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type UnitRect and conformance UnitRect();
  return Anchor.Source.init<A>(anchor:)();
}

void *type metadata accessor for OnTestViewModifier()
{
  return &unk_1E1ACA538;
}

uint64_t key path getter for EnvironmentValues.isEnabled : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

ValueMetadata *type metadata accessor for SceneBridge.ValidTestCasesPreferenceKey()
{
  return &type metadata for SceneBridge.ValidTestCasesPreferenceKey;
}

uint64_t RootEnvironmentModifier.Child.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t Strong;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  int v20;
  void (*v21)(__int128 *, _QWORD);
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(__int128 *);
  _QWORD v25[2];
  unsigned __int8 v26;
  char v27;
  _BYTE v28[56];
  __int128 v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  char v34;
  _BYTE v35[56];
  __int128 v36;
  char v37;
  _BYTE v38[56];
  uint64_t v39;

  v1 = v0;
  v39 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v4 = v3;
  outlined init with copy of RootEnvironmentModifier(Value, (uint64_t)v38);
  v5 = v4 & 1;
  v38[49] = v4 & 1;
  v6 = (_QWORD *)AGGraphGetValue();
  v8 = v7;
  v9 = v6[1];
  *(_QWORD *)&v36 = *v6;
  *((_QWORD *)&v36 + 1) = v9;
  v37 = v7 & 1;
  outlined init with copy of RootEnvironmentModifier((uint64_t)v38, (uint64_t)v35);
  v35[49] = v5;
  if ((v8 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
  }
  else
  {
    outlined init with copy of RootEnvironmentModifier((uint64_t)v35, (uint64_t)&v29);
    v34 = v5;
    if (v5)
    {
      outlined init with copy of SwiftUIAnySortComparator?(v1 + 8, (uint64_t)v28, &lazy cache variable for type metadata for RootEnvironmentModifier?, (uint64_t)&type metadata for RootEnvironmentModifier);
      v10 = outlined init with copy of RootEnvironmentModifier((uint64_t)&v29, (uint64_t)v25);
      v27 = 1;
      MEMORY[0x1E0C80A78](v10, v11);
      swift_retain();
      swift_retain();
      v12 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI23RootEnvironmentModifier33_4475FD12FD59DEBA453321BD91F6EA04LLV_s5NeverOSbTg5((void (*)(uint64_t *__return_ptr, _BYTE *))partial apply for closure #1 in implicit closure #2 in implicit closure #1 in RootEnvironmentModifier.Child.updateValue());
      outlined destroy of AccessibilityTableContext?((uint64_t)v28, &lazy cache variable for type metadata for RootEnvironmentModifier?, (uint64_t)&type metadata for RootEnvironmentModifier);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v29, (uint64_t (*)(_QWORD))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
      if (v12 == 2 || (v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      swift_retain();
      swift_retain();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v29, (uint64_t (*)(_QWORD))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
    }
    if (AGGraphGetOutputValue())
    {
      swift_release();
      swift_release();
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
    }
  }
LABEL_9:
  type metadata accessor for SceneBridge();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SceneBridge and conformance SceneBridge, (uint64_t (*)(uint64_t))type metadata accessor for SceneBridge, (uint64_t)&protocol conformance descriptor for SceneBridge);
  static ObservableObject.environmentStore.getter();
  outlined init with copy of RootEnvironmentModifier((uint64_t)v38, (uint64_t)&v29);
  v34 = v5;
  Strong = swift_weakLoadStrong();
  outlined destroy of RootEnvironmentModifier((uint64_t)&v29);
  v25[0] = Strong;
  swift_setAtWritableKeyPath();
  swift_release();
  outlined init with copy of RootEnvironmentModifier((uint64_t)v38, (uint64_t)&v29);
  v34 = v5;
  v15 = swift_weakLoadStrong();
  outlined destroy of RootEnvironmentModifier((uint64_t)&v29);
  specialized EnvironmentValues.sceneStorageValues.setter(v15);
  swift_release();
  outlined init with copy of RootEnvironmentModifier((uint64_t)v38, (uint64_t)&v29);
  v34 = v5;
  v16 = v30;
  outlined destroy of RootEnvironmentModifier((uint64_t)&v29);
  LOBYTE(v25[0]) = v16;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*((_QWORD *)&v36 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined init with copy of RootEnvironmentModifier((uint64_t)v38, (uint64_t)&v29);
  v34 = v5;
  v17 = v31;
  v18 = v32;
  v19 = v33;
  outlined copy of SceneID?(v31, v32, v33);
  outlined destroy of RootEnvironmentModifier((uint64_t)&v29);
  v25[0] = v17;
  v25[1] = v18;
  v26 = v19;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneIDKey>, (uint64_t)&type metadata for SceneIDKey, (uint64_t)&protocol witness table for SceneIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  outlined copy of SceneID?(v17, v18, v19);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneIDKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*((_QWORD *)&v36 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of SceneID?(v17, v18, v19);
  outlined init with copy of RootEnvironmentModifier((uint64_t)v38, (uint64_t)&v29);
  v34 = v5;
  v20 = v30;
  outlined destroy of RootEnvironmentModifier((uint64_t)&v29);
  if (v20 != 2)
  {
    v21 = (void (*)(__int128 *, _QWORD))EnvironmentValues.redactionReasons.modify();
    *v22 |= 2uLL;
    v21(&v29, 0);
  }
  outlined init with copy of RootEnvironmentModifier((uint64_t)v38, (uint64_t)&v29);
  v34 = v5;
  v23 = swift_weakLoadStrong();
  outlined destroy of RootEnvironmentModifier((uint64_t)&v29);
  if (v23)
  {
    (*(void (**)(__int128 *))(*(_QWORD *)v23 + 88))(&v36);
    swift_release();
  }
  if (static AppGraph.delegateBox)
  {
    v24 = *(void (**)(__int128 *))(*(_QWORD *)static AppGraph.delegateBox + 88);
    swift_retain();
    v24(&v36);
    swift_release();
  }
  v29 = v36;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  outlined destroy of AccessibilityTableContext?(v1 + 8, &lazy cache variable for type metadata for RootEnvironmentModifier?, (uint64_t)&type metadata for RootEnvironmentModifier);
  outlined init with take of RootEnvironmentModifier((uint64_t)v38, (uint64_t)&v29);
  return outlined init with take of RootEnvironmentModifier((uint64_t)&v29, v1 + 8);
}

uint64_t outlined init with copy of RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RootEnvironmentModifier(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(unsigned __int8 *)(a2 + 48);
  if (v4 == 255)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  }
  else
  {
    v5 = v4 & 1;
    v7 = *(_QWORD *)(a2 + 32);
    v6 = *(_QWORD *)(a2 + 40);
    outlined copy of SceneID(v7, v6, v4 & 1);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = v5;
  }
  return a1;
}

uint64_t outlined destroy of RootEnvironmentModifier(uint64_t a1)
{
  destroy for RootEnvironmentModifier(a1);
  return a1;
}

uint64_t destroy for RootEnvironmentModifier(uint64_t a1)
{
  uint64_t result;
  int v3;

  swift_weakDestroy();
  swift_weakDestroy();
  result = swift_weakDestroy();
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 != 255)
    return outlined consume of SceneID(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3 & 1);
  return result;
}

ValueMetadata *type metadata accessor for ButtonStyleConfiguration.Label()
{
  return &type metadata for ButtonStyleConfiguration.Label;
}

uint64_t getEnumTagSinglePayload for NavigationTitleStorage(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t initializeBufferWithCopyOfBuffer for FocusedValues(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  swift_retain();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for FocusStore(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentSharingPickerAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t type metadata completion function for OptionalFormatInputToString()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static AccessibilityChildBehavior.combine.getter@<X0>(_QWORD *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for combine, &static AccessibilityChildBehavior.combine, a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityFocusStore(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t @objc static _UIHostingView._supportsInvalidatingFocusCache()()
{
  return 1;
}

ValueMetadata *type metadata accessor for _BackdropGroupEffect()
{
  return &type metadata for _BackdropGroupEffect;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FocusStore(_DWORD *a1, int *a2)
{
  int v2;

  v2 = *a2;
  return *a1 != -1 && v2 != -1 && *a1 == v2;
}

uint64_t getEnumTagSinglePayload for Label(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F0B9F8 + 4 * byte_187C91DC0[v17 - 1]))();
}

uint64_t storeEnumTagSinglePayload for EditMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186F0BAC4 + 4 * byte_187C65785[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186F0BAF8 + 4 * byte_187C65780[v4]))();
}

uint64_t sub_186F0BAF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F0BB00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F0BB08);
  return result;
}

uint64_t sub_186F0BB14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F0BB1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186F0BB20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F0BB28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for ActionSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for NavigationView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationView);
}

void partial apply for closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(v1, a1);
}

uint64_t View.accessibilityHidden(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  if ((a1 & 1) != 0)
    v3 = 0x400000004;
  else
    v3 = 0x400000000;
  v5 = v3;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5728], (uint64_t)&v5, 1, a2, MEMORY[0x1E0CE5728], a3);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(a1, a2, a3, (uint64_t)&associated type descriptor for ListDiffable.RowIDs, (uint64_t)&associated conformance descriptor for ListDiffable.ListDiffable.RowIDs: BidirectionalCollection, (void (*)(uint64_t, uint64_t, double))ShadowRowCollection.index(after:));
}

void type metadata completion function for UIKitDialogBridge()
{
  unint64_t v0;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t UIKitDialogBridge.__deallocating_deinit()
{
  UIKitDialogBridge.deinit();
  return swift_deallocClassInstance();
}

uint64_t UIKitDialogBridge.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of IntelligenceElement?(v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  swift_bridgeObjectRelease();
  return v0;
}

ValueMetadata *type metadata accessor for Divider()
{
  return &type metadata for Divider;
}

uint64_t type metadata accessor for TupleToolbarContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleToolbarContent);
}

uint64_t type metadata accessor for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarItem);
}

uint64_t type metadata completion function for DeprecatedAlertBridge()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void @objc _UIHostingView.backgroundColor.setter(void *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  v5 = a1;
  specialized _UIHostingView.backgroundColor.setter((uint64_t)a3, v6, v7, v8);

}

ValueMetadata *type metadata accessor for ButtonRole()
{
  return &type metadata for ButtonRole;
}

uint64_t storeEnumTagSinglePayload for _IncrementalLayout_Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 94) = 0;
    *(_WORD *)(result + 92) = 0;
    *(_DWORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 95) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 95) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata completion function for PickerBuilder.Content()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FileImportOperation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FileExportOperation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FocusedValues(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a2 + 12);
  return v2 != -1 && v3 != -1 && v2 == v3;
}

BOOL static FocusedValues.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a2 + 12);
  return v2 != -1 && v3 != -1 && v2 == v3;
}

uint64_t getEnumTagSinglePayload for CompareTransitionType(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

void type metadata accessor for Label()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for ActionDispatcherSubscriber()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for PresentationMode()
{
  return &type metadata for PresentationMode;
}

uint64_t destroy for PopoverAttachmentAnchor(uint64_t a1)
{
  return outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t destructiveInjectEnumTag for HoverCallback(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ListRowInsetsTraitKey()
{
  return &type metadata for ListRowInsetsTraitKey;
}

uint64_t type metadata instantiation function for TabViewStyleOverrideInput()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for CapsuleSlider.ScrollState.Orientation()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for AccessibilityTechnology()
{
  return &type metadata for AccessibilityTechnology;
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:)()
{
  return static External._update(_:attribute:)();
}

uint64_t destructiveInjectEnumTag for AccessibilityScrollableContext(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 62) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 70) = a2;
  return result;
}

uint64_t getEnumTag for AccessibilityScrollableContext(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 70);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t storeEnumTagSinglePayload for CompareTransitionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimitiveButtonStyleConfiguration.Label()
{
  return &type metadata for PrimitiveButtonStyleConfiguration.Label;
}

void *type metadata accessor for NavigationDestinationScopeModifier()
{
  return &unk_1E1B047A0;
}

uint64_t type metadata accessor for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyVStack);
}

ValueMetadata *type metadata accessor for EditMode()
{
  return &type metadata for EditMode;
}

ValueMetadata *type metadata accessor for TransformScrollIndicators()
{
  return &type metadata for TransformScrollIndicators;
}

uint64_t getEnumTagSinglePayload for AnyShareConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for _PositionLayout()
{
  return &type metadata for _PositionLayout;
}

uint64_t type metadata accessor for _CALayerView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CALayerView);
}

uint64_t destroy for CubicGradientProvider()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t storeEnumTagSinglePayload for PresentSharingPickerAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t UIKitEventBindingBridge.__deallocating_deinit()
{
  id *v0;

  v0 = (id *)EventBindingBridge.deinit();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in BarAppearanceBridge.updateNavigationAppearances(navigationController:)(id *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  BOOL v20;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  int v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v4 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  v5 = *v4;
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  if (!*(_QWORD *)(v5 + 16))
    return outlined destroy of ToolbarPlacement.Role((uint64_t)&v36);
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v36);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return outlined destroy of ToolbarPlacement.Role((uint64_t)&v36);
  }
  v8 = *(_QWORD *)(v5 + 56) + 80 * v6;
  v10 = *(_QWORD *)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  v33 = *(unsigned __int8 *)(v8 + 24);
  v35 = *(unsigned __int8 *)(v8 + 40);
  v11 = *(unsigned __int8 *)(v8 + 56);
  v12 = *(unsigned __int8 *)(v8 + 57);
  swift_retain();
  swift_retain();
  v34 = v9;
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v36);
  v32 = objc_msgSend(*a1, sel_navigationItem);
  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>);
    swift_retain();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v14 = v36;
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  if (*(_QWORD *)(v14 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v36), (v16 & 1) != 0))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
    swift_retain();
  }
  else
  {
    v17 = 0;
  }
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v36);
  if (v10)
  {
    if (v17)
    {
      if (v10 == v17)
        goto LABEL_19;
      swift_retain();
      swift_retain();
      v18 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      swift_release();
      if ((v18 & 1) != 0)
        goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v17)
LABEL_18:
    *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates) |= 1uLL;
LABEL_19:
  v30 = v17;
  v19 = *(_BYTE *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 56);
  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 24) == 1)
    v19 = 3;
  if (v34)
    v20 = 0;
  else
    v20 = v12 == 2;
  v22 = !v20 || v10 != 0;
  if (v33)
    v23 = 1;
  else
    v23 = v22;
  if (v19 == 3)
    v24 = v23 | v11 & v35 ^ 1;
  else
    v24 = 1;
  swift_retain();
  swift_retain();
  v25 = 0;
  v31 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v26 = outlined read-only object #0 of closure #1 in BarAppearanceBridge.updateNavigationAppearances(navigationController:)[v25 + 32];
    v27 = objc_msgSend(v32, *off_1E1B4E6A8[v26], v30, v31);
    if (!v27
      || (v28 = v27,
          swift_getObjectType(),
          v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI),
          v28,
          v29))
    {
      if (v24)
        __asm { BR              X8 }
      __asm { BR              X8 }
    }
    ++v25;
  }
  while (v25 != 4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();

  return swift_release();
}

ValueMetadata *type metadata accessor for ToolbarAppearanceModifier()
{
  return &type metadata for ToolbarAppearanceModifier;
}

uint64_t type metadata accessor for ToolbarModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifier);
}

uint64_t View.accessibilityAddTraits(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return View.accessibilityAddTraits(_:)(a1, a2, a3, (void (*)(__int128 *__return_ptr, __int128 *))MEMORY[0x1E0CE64C8]);
}

ValueMetadata *type metadata accessor for PopoverAttachmentAnchor()
{
  return &type metadata for PopoverAttachmentAnchor;
}

uint64_t dispatch thunk of UIHostingController.rootView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x328))();
}

uint64_t protocol witness for static _AttributeBody.comparisonMode.getter in conformance AccessibilityLargeContentViewHitTestingTransform()
{
  return 2;
}

uint64_t type metadata instantiation function for UIKitButtonAdaptor()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for SheetPreference.Value()
{
  return &type metadata for SheetPreference.Value;
}

uint64_t type metadata accessor for AnyUIKitSensoryFeedbackCache()
{
  return objc_opt_self();
}

id @objc UIHostingController.childForScreenEdgesDeferringSystemGestures.getter(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)UIHostingController.childForScreenEdgesDeferringSystemGestures.getter();

  return v2;
}

unint64_t UIHostingController._childForScreenEdgesDeferringSystemGestures.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t result;
  id v11;

  if ((UIHostingController.deferredEdges.getter() & 0x100) == 0
    || (UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController.getter() & 1) == 0)
  {
    return 0;
  }
  v1 = objc_msgSend(v0, sel_childViewControllers);
  v2 = type metadata accessor for UIViewController();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(char **)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      goto LABEL_11;
LABEL_5:
    v5 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
      __break(1u);
    }
    else if ((v3 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v5 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v6 = (char *)*(id *)(v3 + 8 * (_QWORD)v5 + 32);
LABEL_10:
        v4 = v6;
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_26;
    }
    v6 = (char *)MEMORY[0x18D75E3BC](v5, v3);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v4)
    goto LABEL_5;
LABEL_11:
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v4, sel_childViewControllerForHomeIndicatorAutoHidden);

  if (v7)
    return (unint64_t)v7;
  v8 = objc_msgSend(v0, sel_childViewControllers);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_14:
  result = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
LABEL_31:
    v11 = (id)MEMORY[0x18D75E3BC](result, v2);
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v2 + 8 * result + 32);
LABEL_19:
    v7 = v11;
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t @objc UIHostingController.preferredScreenEdgesDeferringSystemGestures.getter(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = UIHostingController.preferredScreenEdgesDeferringSystemGestures.getter();

  return v2;
}

uint64_t UIHostingController._preferredScreenEdgesDeferringSystemGestures.getter()
{
  __int16 v0;
  unsigned __int8 v2;

  v0 = UIHostingController.deferredEdges.getter();
  if ((v0 & 0x100) != 0)
    LOBYTE(v0) = static Edge.Set.horizontal.getter();
  v2 = 0;
  return specialized UIRectEdge.init(_:layoutDirection:)(v0, &v2);
}

uint64_t UIHostingController.deferredEdges.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for UIHostingController.deferredEdges) | (*(unsigned __int8 *)(v0 + direct field offset for UIHostingController.deferredEdges + 1) << 8);
}

uint64_t UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController);
}

uint64_t getEnumTagSinglePayload for TableHeaderView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 67))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.InspectorKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.Key(&one-time initialization token for defaultValue, (uint64_t)&static SheetPreference.InspectorKey.defaultValue, a1);
}

uint64_t storeEnumTagSinglePayload for UpdateChildOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata completion function for SheetBridge()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollView);
}

uint64_t getEnumTagSinglePayload for Toolbar.BarLocation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFF1 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483633);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 14;
  if (v4 >= 0x10)
    return v5;
  else
    return 0;
}

uint64_t ModifiedContent<>.accessibilityAddTraits(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ModifiedContent<>.accessibilityAddTraits(_:)(a1, a2, (void (*)(__int128 *__return_ptr, __int128 *))MEMORY[0x1E0CE64C8], a3);
}

uint64_t type metadata instantiation function for AccessibilityLargeContentViewModifier()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for ToolbarPlacement.Role(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF9)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483641;
    if (a3 >= 0x7FFFFFF9)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF9)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlainButtonStyle()
{
  return &type metadata for PlainButtonStyle;
}

uint64_t @objc _UIHostingView.sceneDidActivate(notification:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc _UIHostingView.windowDidMoveToScene(notification:)(a1, a2, a3, _UIHostingView.sceneDidActivate(notification:));
}

uint64_t SharingActivityPickerBridge.__deallocating_deinit()
{
  SharingActivityPickerBridge.deinit();
  return swift_deallocClassInstance();
}

uint64_t SharingActivityPickerBridge.deinit()
{
  uint64_t v0;
  _BYTE v2[152];

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  outlined init with take of SharingActivityPickerPresentation?(v0 + 56, (uint64_t)v2);
  outlined release of SharingActivityPickerPresentation?((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of SharingActivityPickerPresentation?);

  return v0;
}

uint64_t outlined consume of SharingActivityPickerPresentation?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    outlined consume of SharingPickerSource(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for LongPressGesture()
{
  return &type metadata for LongPressGesture;
}

uint64_t type metadata accessor for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStack);
}

ValueMetadata *type metadata accessor for NavigationPath()
{
  return &type metadata for NavigationPath;
}

_DWORD *__swift_memcpy7_4(_DWORD *result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *result = v2;
  return result;
}

uint64_t type metadata accessor for _PreferenceActionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PreferenceActionModifier);
}

uint64_t View.accessibilityIdentifier(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];
  char v6;

  v5[0] = a1;
  v5[1] = a2;
  v6 = 0;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5710], (uint64_t)v5, 1, a3, MEMORY[0x1E0CE5710], a4);
}

void destroy for PresentSharingPickerAction(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release();
  swift_release();
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 != 1)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3 != 1)
    {
      outlined consume of AnyShareConfiguration.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
      if (v3)
      {
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(a1 + 120))
      {
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
        swift_bridgeObjectRelease();
      }
    }
    if (v2)
      swift_release();
  }
}

uint64_t initializeWithCopy for PresentSharingPickerAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = (_OWORD *)(a2 + 16);
  v7 = (_OWORD *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_retain();
  if (v8 != 1)
  {
    v13 = *(_QWORD *)(a2 + 88);
    if (v13 == 1)
    {
      v14 = v6[5];
      *(_OWORD *)(a1 + 80) = v6[4];
      *(_OWORD *)(a1 + 96) = v14;
      *(_OWORD *)(a1 + 112) = v6[6];
      v15 = v6[1];
      *v5 = *v6;
      *(_OWORD *)(a1 + 32) = v15;
      v16 = v6[3];
      *(_OWORD *)(a1 + 48) = v6[2];
      *(_OWORD *)(a1 + 64) = v16;
      if (!v8)
        goto LABEL_12;
LABEL_9:
      v29 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v8;
      *(_QWORD *)(a1 + 136) = v29;
      swift_retain();
      return a1;
    }
    v17 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 32);
    v19 = *(_QWORD *)(a2 + 40);
    v20 = *(_QWORD *)(a2 + 48);
    v21 = *(_BYTE *)(a2 + 56);
    outlined copy of AnyShareConfiguration.Storage(v17, v18, v19, v20, v21);
    *(_QWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = v19;
    *(_QWORD *)(a1 + 48) = v20;
    *(_BYTE *)(a1 + 56) = v21;
    if (v13)
    {
      v22 = *(_QWORD *)(a2 + 64);
      v23 = *(_QWORD *)(a2 + 72);
      v24 = *(_BYTE *)(a2 + 80);
      outlined copy of Text.Storage(v22, v23, v24);
      *(_QWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = v23;
      *(_BYTE *)(a1 + 80) = v24;
      *(_QWORD *)(a1 + 88) = v13;
      swift_bridgeObjectRetain();
      v25 = *(_QWORD *)(a2 + 120);
      if (v25)
        goto LABEL_8;
    }
    else
    {
      v30 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v30;
      v25 = *(_QWORD *)(a2 + 120);
      if (v25)
      {
LABEL_8:
        v26 = *(_QWORD *)(a2 + 96);
        v27 = *(_QWORD *)(a2 + 104);
        v28 = *(_BYTE *)(a2 + 112);
        outlined copy of Text.Storage(v26, v27, v28);
        *(_QWORD *)(a1 + 96) = v26;
        *(_QWORD *)(a1 + 104) = v27;
        *(_BYTE *)(a1 + 112) = v28;
        *(_QWORD *)(a1 + 120) = v25;
        swift_bridgeObjectRetain();
        if (v8)
          goto LABEL_9;
LABEL_12:
        *(_OWORD *)(a1 + 128) = *v7;
        return a1;
      }
    }
    v31 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v31;
    if (v8)
      goto LABEL_9;
    goto LABEL_12;
  }
  v9 = v6[5];
  *(_OWORD *)(a1 + 80) = v6[4];
  *(_OWORD *)(a1 + 96) = v9;
  v10 = v6[7];
  *(_OWORD *)(a1 + 112) = v6[6];
  *(_OWORD *)(a1 + 128) = v10;
  v11 = v6[1];
  *v5 = *v6;
  *(_OWORD *)(a1 + 32) = v11;
  v12 = v6[3];
  *(_OWORD *)(a1 + 48) = v6[2];
  *(_OWORD *)(a1 + 64) = v12;
  return a1;
}

ValueMetadata *type metadata accessor for ListSeparatorConfiguration.RowKey()
{
  return &type metadata for ListSeparatorConfiguration.RowKey;
}

ValueMetadata *type metadata accessor for ButtonStyleConfiguration()
{
  return &type metadata for ButtonStyleConfiguration;
}

void ListCoreBatchUpdates.formUpdates<A>(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = type metadata accessor for ListBatchUpdates(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  ListBatchUpdates.formUpdates<A>(from:to:)(a1, a2, v9, a4, a5);
}

void sub_186F0E364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, __int128 a12, __int128 a13, uint64_t a14)
{
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v18 = v14[1];
  a9 = *v14;
  a10 = v18;
  a12 = a9;
  a13 = v18;
  a11 = *((_QWORD *)v14 + 4);
  a14 = a11;
  outlined retain of [Text.Modifier]((uint64_t)&a12);
  outlined retain of [Text.Modifier]((uint64_t)&a12 + 8);
  outlined retain of [Text.Modifier]((uint64_t)&a13);
  outlined retain of [Text.Modifier]((uint64_t)&a13 + 8);
  outlined retain of [Text.Modifier]((uint64_t)&a14);
  ListCoreBatchUpdates.formResult<A>(_:)((uint64_t *)&a9, v15, v16, v17);
}

uint64_t sub_186F0E3C8()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  outlined release of _IncrementalLayout_Placements((uint64_t)&v1);
  outlined release of _IncrementalLayout_Placements((uint64_t)&v2);
  outlined release of _IncrementalLayout_Placements((uint64_t)&v3);
  outlined release of _IncrementalLayout_Placements((uint64_t)&v4);
  return outlined release of _IncrementalLayout_Placements((uint64_t)&v5);
}

void ListCoreBatchUpdates.formResult<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[24];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  type metadata accessor for (source: IndexPath, destination: IndexPath)();
  v25[5] = v8;
  v25[4] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v25[9] = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IndexPath();
  v25[10] = *(_QWORD *)(v11 - 8);
  v25[11] = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v25[3] = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v25[2] = (char *)v25 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v25[8] = (char *)v25 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v25[12] = a2;
  ListCoreBatchUpdates.resetAll()();
  v22 = *a1;
  v29 = a1[1];
  v30 = v22;
  v23 = a1[2];
  v27 = a1[3];
  v28 = v23;
  v26 = a1[4];
  outlined retain of [Text.Modifier]((uint64_t)&v30);
  outlined retain of [Text.Modifier]((uint64_t)&v29);
  outlined retain of [Text.Modifier]((uint64_t)&v28);
  outlined retain of [Text.Modifier]((uint64_t)&v27);
  outlined retain of [Text.Modifier]((uint64_t)&v26);
  type metadata accessor for ListBatchUpdates(0, a3, a4, v24);
  ListBatchUpdates.endIndex.getter();
}

uint64_t sub_186F0E598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1)
  {
    *(_QWORD *)(v2 - 312) = v1;
    ListBatchUpdates.subscript.getter(0, v2 - 216);
  }
  outlined release of _IncrementalLayout_Placements(v2 - 96);
  outlined release of _IncrementalLayout_Placements(v2 - 104);
  outlined release of _IncrementalLayout_Placements(v2 - 112);
  outlined release of _IncrementalLayout_Placements(v2 - 120);
  return outlined release of _IncrementalLayout_Placements(v2 - 128);
}

uint64_t outlined release of _IncrementalLayout_Placements(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for MakeChildOutputs()
{
  return swift_bridgeObjectRelease();
}

SwiftUI::PPTTestCase::SubTestName __swiftcall PPTTestCase.SubTestName.init(rawValue:)(SwiftUI::PPTTestCase::SubTestName rawValue)
{
  SwiftUI::PPTTestCase::SubTestName *v1;

  *v1 = rawValue;
  return rawValue;
}

uint64_t assignWithCopy for FocusStore(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Alert.Presentation.Key()
{
  return &type metadata for Alert.Presentation.Key;
}

void LazyPageTabViewStyle.Body.base.getter()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_186F0EA84(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t initializeWithCopy for _TabViewValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, unint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;
  __int128 v27;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v14 = ~v10;
  v15 = (v10 + 16) & ~v10;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) != 0)
  {
    v19 = v15 + v16;
    if ((*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14))
    {
LABEL_5:
      memcpy(v12, v13, v19);
      goto LABEL_8;
    }
  }
  else
  {
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v15 + v16;
    if ((_DWORD)v18 != -1)
      goto LABEL_5;
  }
  *v12 = *v13;
  v20 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v17;
  v21 = v10 + 8;
  v22 = ((unint64_t)v20 + v10 + 8) & v14;
  v23 = ((unint64_t)v17 + v21) & v14;
  v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v24(v22, v23, v8);
LABEL_8:
  v25 = ((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v26 + 8) < 0xFFFFFFFFuLL)
  {
    v27 = *(_OWORD *)v26;
    *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
    *(_OWORD *)v25 = v27;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
    *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
    swift_retain();
    swift_retain();
  }
  return a1;
}

void type metadata accessor for _TabViewValue()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  if (*(_QWORD *)(v0 + 56))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
    swift_bridgeObjectRelease();
  else
    __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for ResolvedPlaybackButton(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  type metadata accessor for ClosedRange<Date>();
  v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v4, v7);
    v8(v4 + *(int *)(v6 + 36), v7);
  }
  v9 = type metadata accessor for PlaybackButton.Configuration(0);
  v10 = v4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 2, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v13 = v4 + *(int *)(v9 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));

  swift_release();
  v14 = v3 + *(int *)(v1 + 24);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));

  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_2()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_3()
{
  outlined consume of HoverCallback();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + *(int *)(v1 + 24) + ((v2 + 16) & ~v2);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));

LABEL_6:
      swift_release();
      return swift_deallocObject();
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_WORD *)(v3 + 32), *(_BYTE *)(v3 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_WORD *)(v3 + 72), *(_BYTE *)(v3 + 74));
      v5 = v3 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      return swift_deallocObject();
    case 0:
      goto LABEL_6;
  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_5()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CountingIndex() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0 + ((v2 + 48) & ~v2), AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_6()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v1 = (int *)type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = v3 + v5 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = type metadata accessor for SearchFieldConfiguration(0);
  v9 = v3 + *(int *)(v8 + 24);
  v10 = *(unsigned __int8 *)(v9 + 8);
  if (v10 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v9, v10 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(v3 + *(int *)(v8 + 32)), *(_QWORD *)(v3 + *(int *)(v8 + 32) + 8), *(_BYTE *)(v3 + *(int *)(v8 + 32) + 16));
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + v1[5]), *(_BYTE *)(v3 + v1[5] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + v1[6]), *(_BYTE *)(v3 + v1[6] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + v1[8]), *(_BYTE *)(v3 + v1[8] + 8));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_7()
{
  uint64_t v0;
  void *v1;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 88);
  if (v1)
  {

  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_9()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_2Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _TaskModifier.InnerModifier(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  swift_release();
  v3 = v2 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t objectdestroy_31Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_11()
{
  uint64_t v0;
  void *v1;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 88);
  if (v1)
  {

  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_12()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

void objectdestroyTm_13()
{
  type metadata accessor for SharePreview();
}

uint64_t sub_186F0F5A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = v2 + v5;
  if (*(_QWORD *)(v2 + v5 + 24))
    __swift_destroy_boxed_opaque_existential_1(v2 + v5);
  if (*(_QWORD *)(v6 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_BYTE *)(v6 + 48));
    swift_bridgeObjectRelease();
  }
  v7 = v6 + *(int *)(a1 + 56);
  v8 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
  v9 = v6 + *(int *)(a1 + 60);
  v10 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(v9, 1))
    (*(void (**)(uint64_t))(v10 + 8))(v9);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_14()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));

    swift_release();
  }
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 112), *(unsigned __int8 *)(v0 + 120));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v0 + 128), *(unsigned __int8 *)(v0 + 136), *(_BYTE *)(v0 + 137));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_15()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for OrnamentModifierLegacy(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 36), v5);
  return swift_deallocObject();
}

void objectdestroyTm_17()
{
  type metadata accessor for ItemNavigationLinkModifier();
}

uint64_t sub_186F0F7F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v3 = v1 + ((v2 + 48) & ~v2) + *(int *)(a1 + 52);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  v4 = v3 + *(int *)(type metadata accessor for Binding() + 32);
  v5 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(v4, 1))
    (*(void (**)(uint64_t))(v5 + 8))(v4);
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_18()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {
    swift_release();
    swift_release();
  }
  outlined consume of StateOrBinding<Bool>(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_BYTE *)(v0 + 57));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_19()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  void (*v10)(unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for Optional();
  v2 = type metadata accessor for Binding();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(v1 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v8 = v0 + v4 + *(int *)(v2 + 32);
  v9 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v1);
  v10 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  if (!v9)
    v10(v8, v1);
  v10(v0 + ((v4 + v5 + v7) & ~v7), v1);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_21()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_22()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v0 + 80), *(unsigned __int8 *)(v0 + 88), *(_BYTE *)(v0 + 89));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  outlined consume of Environment<ListItemTint?>.Content(*(_QWORD *)(v0 + 112), *(unsigned __int8 *)(v0 + 120), *(_BYTE *)(v0 + 121));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_23()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for AsyncImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v4 + v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4 + v7, v8);
  swift_release();
  swift_release();
  v11 = v4 + v7 + *(int *)(v5 + 48);
  swift_release();
  v12 = type metadata accessor for LoadingState(0);
  v13 = v11 + *(int *)(v12 + 20);
  if (!v10(v13, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
  outlined consume of AsyncImagePhase(*(_QWORD *)(v11 + *(int *)(v12 + 24)));
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_25(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 40));
  swift_release();
  return swift_deallocObject();
}

void objectdestroyTm_26()
{
  type metadata accessor for MapAnimator();
}

uint64_t sub_186F0FD38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  uint64_t v16;

  v3 = v1
     + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80));
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  v4 = v3 + *(int *)(type metadata accessor for Binding() + 32);
  v5 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(v4, 1))
    (*(void (**)(uint64_t))(v5 + 8))(v4);
  v8 = v3 + *(int *)(a1 + 52);
  v9 = (int *)type metadata accessor for AdapterState.PlaybackState(0, v16, v6, v7);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9))
  {
    v12 = type metadata accessor for Date();
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
    v13(v8, v12);
    v13(v8 + v9[7], v12);
    v14 = *(void (**)(uint64_t))(v5 + 8);
    v14(v8 + v9[8]);
    type metadata accessor for KeyframeTimeline();
    swift_bridgeObjectRelease();
    v14(v8 + v9[9]);
    swift_release();
  }
  type metadata accessor for AdapterState(255, v16, v10, v11);
  type metadata accessor for State();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_27()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));

    swift_release();
  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_28()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_29(void (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void objectdestroyTm_31()
{
  type metadata accessor for OutlinePrimitive();
}

void sub_186F10098()
{
  swift_unknownObjectRelease();
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_186F100DC()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  if (swift_getEnumCaseMultiPayload() != 1)
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void objectdestroyTm_32()
{
  type metadata accessor for NavigationPickerButton();
}

uint64_t sub_186F10218(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80);
  v6 = v1 + ((v5 + 64) & ~v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v6, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v6 + a1[17], v3);
  v7 = v6 + a1[18];
  __swift_destroy_boxed_opaque_existential_1(v7);

  swift_bridgeObjectRelease();
  v8 = v6 + a1[19];
  swift_release();
  swift_release();
  v9 = type metadata accessor for Binding();
  (*(void (**)(uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8 + *(int *)(v9 + 32));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_33()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  v3 = (v2 + 48) & ~v2;
  swift_release();
  v4 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_34()
{
  uint64_t v0;
  void *v1;

  swift_unknownObjectRelease();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 40), *(_BYTE *)(v0 + 48));
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(*(_QWORD *)(v0 + 56), *(void **)(v0 + 64), *(_BYTE *)(v0 + 72));
  v1 = *(void **)(v0 + 80);
  if (v1)
  {

  }
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for SystemListCell(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + v6[11]), *(_BYTE *)(v8 + v6[11] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + v6[12]), *(_BYTE *)(v8 + v6[12] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + v6[13]), *(_BYTE *)(v8 + v6[13] + 8));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_36()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 56), *(_BYTE *)(v0 + 64));
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(*(_QWORD *)(v0 + 72), *(void **)(v0 + 80), *(_BYTE *)(v0 + 88));
  if (*(_QWORD *)(v0 + 96))
  {
    swift_bridgeObjectRelease();

  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_37()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release();
  if (*(_QWORD *)(v0 + 40))
    swift_release();
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

BOOL static EditMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t View.accessibilityAction(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityAction(_:_:)(a1, a2, a3, a4, a5, (uint64_t)&unk_1E1B59948, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply, (void (*)(uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, unint64_t))View.accessibilityAction<A>(_:label:image:_:));
}

ValueMetadata *type metadata accessor for AccessibilityActionKind()
{
  return &type metadata for AccessibilityActionKind;
}

double static AccessibilityActionKind.default.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AllowsHitTestingFilter(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  return a1;
}

Swift::Void __swiftcall ListCoreBatchUpdates.resetAll()()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t *v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  size_t *v7;
  int v8;
  size_t v9;
  size_t *v10;
  int v11;
  size_t v12;
  size_t *v13;
  int v14;
  size_t v15;

  v2 = v1;
  v3 = v0;
  IndexSet.removeAll()();
  IndexSet.removeAll()();
  v4 = (uint64_t *)(v1 + v3[10]);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v6 + 16));
  }
  else
  {
    *v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v6 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v7 = (size_t *)(v2 + v3[11]);
  v8 = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v7;
  if (v8)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v9 + 16));
  }
  else
  {
    *v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v10 = (size_t *)(v2 + v3[12]);
  v11 = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v10;
  if (v11)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v12 + 16));
  }
  else
  {
    *v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v12 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v13 = (size_t *)(v2 + v3[13]);
  v14 = swift_isUniquelyReferenced_nonNull_native();
  v15 = *v13;
  if (v14)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v15 + 16));
  }
  else
  {
    *v13 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v15 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  IndexSet.removeAll()();
}

size_t specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  size_t result;

  if (a2 <= a1)
    v4 = a1;
  else
    v4 = a2;
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = *(_QWORD *)(a4(0) - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size_2(v10);
  if (v8)
  {
    if (result - v9 != 0x8000000000000000 || v8 != -1)
    {
      v10[2] = a1;
      v10[3] = 2 * ((uint64_t)(result - v9) / v8);
      return (size_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

size_t specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath));
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.HostedViewState.Key>, type metadata accessor for DisplayList.HostedViewState.Key);
}

double @objc PlatformViewHost.alignmentRectInsets.getter()
{
  return 0.0;
}

ValueMetadata *type metadata accessor for ViewIdentity()
{
  return &type metadata for ViewIdentity;
}

uint64_t (*partial apply for closure #1 in closure #1 in closure #1 in Attribute.init(value:)())()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t initializeWithCopy for IncrementalViewGeometry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for IncrementalTransaction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  return a1;
}

_DWORD *initializeWithCopy for IncrementalTransition(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v12(v10, v11, v7);
  return a1;
}

ValueMetadata *type metadata accessor for FinishLaunchTestAction()
{
  return &type metadata for FinishLaunchTestAction;
}

uint64_t type metadata accessor for AlertTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AlertTransformModifier);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyNavigationLinkPresentedView(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*a2) & 1;
}

uint64_t static AccessibilityChildBehavior.ignore.getter@<X0>(_QWORD *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for ignore, &static AccessibilityChildBehavior.ignore, a1);
}

uint64_t closure #1 in static LazyHGrid._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v12[2] = a4(0);
  v13 = type metadata accessor for _VariadicView.Tree();
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a7, (uint64_t)v12, v13, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v14;
}

uint64_t type metadata accessor for LazyVGrid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyVGrid);
}

ValueMetadata *type metadata accessor for PencilPreferredAction()
{
  return &type metadata for PencilPreferredAction;
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return 0;
}

ValueMetadata *type metadata accessor for AccessibilityFocus.Target()
{
  return &type metadata for AccessibilityFocus.Target;
}

ValueMetadata *type metadata accessor for AccessibilityFocus.Match()
{
  return &type metadata for AccessibilityFocus.Match;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle, (uint64_t)&type metadata for DefaultListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

uint64_t UIKitSensoryFeedbackCache.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for UIKitSensoryFeedbackCache()
{
  return swift_initClassMetadata2();
}

uint64_t ShareConfigurationBridge.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t @objc AVKitCaptureButtonBridge.__ivar_destroyer(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(a1 + direct field offset for AVKitCaptureButtonBridge.dispatch));

  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata completion function for AVKitCaptureButtonBridge()
{
  return swift_initClassMetadata2();
}

uint64_t @objc DeprecatedAlertBridge.__ivar_destroyer(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_unknownObjectWeakDestroy();

  swift_release();
  swift_release();
  v3 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x98);
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t UIKitStatusBarBridge.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for UIKitStatusBarBridge()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for PencilEventsBridge()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for DragAndDropBridge()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for ContextMenuBridge()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance PlatformViewHost<A>.UnarySubtreeSequence@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  PlatformViewHost.UnarySubtreeSequence.makeIterator()(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t PlatformViewHost.UnarySubtreeSequence.makeIterator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t result;

  v3 = swift_allocObject();
  v4 = (void *)MEMORY[0x18D760234](v1);
  swift_unknownObjectWeakInit();

  type metadata accessor for _IteratorBox<_ClosureBasedIterator<UIView>>();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator();
  *(_QWORD *)(result + 24) = v3;
  *a1 = result;
  return result;
}

void type metadata accessor for _IteratorBox<_ClosureBasedIterator<UIView>>()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<UIView>>)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DECEC8];
    type metadata accessor for WeakBox<UIView>(255, &lazy cache variable for type metadata for _ClosureBasedIterator<UIView>, MEMORY[0x1E0DECEC8]);
    lazy protocol witness table accessor for type _ClosureBasedIterator<UIView> and conformance _ClosureBasedIterator<A>((unint64_t *)&lazy protocol witness table cache variable for type _ClosureBasedIterator<UIView> and conformance _ClosureBasedIterator<A>, &lazy cache variable for type metadata for _ClosureBasedIterator<UIView>, v0, MEMORY[0x1E0DECED8]);
    v1 = type metadata accessor for _IteratorBox();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<UIView>>);
  }
}

uint64_t type metadata completion function for _UIHostingView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t type metadata completion function for TooltipBridge()
{
  return swift_initClassMetadata2();
}

__n128 __swift_memcpy28_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SubscriptionView.Subscriber(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for Toggle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Toggle);
}

uint64_t type metadata instantiation function for IncrementalTransition()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for Menu()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for TransactionalPreferenceTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransactionalPreferenceTransformModifier);
}

ValueMetadata *type metadata accessor for BalancedNavigationSplitViewStyle()
{
  return &type metadata for BalancedNavigationSplitViewStyle;
}

ValueMetadata *type metadata accessor for ToolbarAppearanceConfiguration()
{
  return &type metadata for ToolbarAppearanceConfiguration;
}

uint64_t type metadata accessor for NavigationSplitStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationSplitStyleModifier);
}

uint64_t getEnumTagSinglePayload for PersistentSystemOverlaysKey.Overlays(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

void type metadata accessor for SheetPresentationModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t initializeWithCopy for ViewResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

void type metadata accessor for NavigationSplitView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ButtonStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for NavigationTitleKey()
{
  return &type metadata for NavigationTitleKey;
}

ValueMetadata *type metadata accessor for _FlipForRTLEffect()
{
  return &type metadata for _FlipForRTLEffect;
}

ValueMetadata *type metadata accessor for ToolbarPlacement.Role()
{
  return &type metadata for ToolbarPlacement.Role;
}

ValueMetadata *type metadata accessor for KeyboardShortcut()
{
  return &type metadata for KeyboardShortcut;
}

ValueMetadata *type metadata accessor for SheetPreference.Key()
{
  return &type metadata for SheetPreference.Key;
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of SheetPreference.Value((uint64_t)&static SheetPreference.defaultValue, a2);
}

uint64_t type metadata accessor for NullSheetAnchor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NullSheetAnchor);
}

ValueMetadata *type metadata accessor for IdentityLink()
{
  return &type metadata for IdentityLink;
}

ValueMetadata *type metadata accessor for ToolbarKey()
{
  return &type metadata for ToolbarKey;
}

_BYTE *destructiveInjectEnumTag for AccessibilityLargeContentViewBehavior(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void specialized IncrementalChildPrefetcher.updateValue()(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v7 = v3;
  Value = AGGraphGetValue();
  v9 = *(_QWORD *)Value;
  if (*(_QWORD *)(v3 + 32) != *(_QWORD *)Value)
  {
    v10 = *(_QWORD *)(Value + 8);
    v11 = *(unsigned __int8 *)(Value + 16);
    *(_QWORD *)(v3 + 32) = v9;
    type metadata accessor for IncrementalLayoutViewCache();
    if ((*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) & v11) != 0)
    {
      v32 = a1;
      v31 = *(_DWORD *)v3;
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
        goto LABEL_8;
      if (one-time initialization token for log != -1)
        goto LABEL_22;
      while (1)
      {
        v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Log.LazyLayoutPrefetch.log);
        v13 = Logger.logObject.getter();
        v14 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = swift_slowAlloc();
          v30 = swift_slowAlloc();
          v33 = v30;
          *(_DWORD *)v15 = 136446466;
          v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v32, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v15 + 12) = 2082;
          v16 = MEMORY[0x18D754CF0](v31, a2);
          v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_186E48000, v13, v14, "%{public}s %{public}s start prefetch", (uint8_t *)v15, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v30, -1, -1);
          MEMORY[0x18D760108](v15, -1, -1);
        }

LABEL_8:
        if (AGGraphGetCurrentAttribute() != *MEMORY[0x1E0CFED28])
          break;
        __break(1u);
LABEL_22:
        swift_once();
      }
      v18 = (id)AGGraphGetAttributeGraph();
      AGGraphGetDeadline();
      AGGraphSetDeadline();
      specialized closure #1 in IncrementalChildPrefetcher.updateValue()(v7, v9, v10, v11, a3);
      AGGraphSetDeadline();

      v19 = *(unsigned __int8 *)(v7 + 56);
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)static Log.LazyLayoutPrefetch.log);
        v21 = Logger.logObject.getter();
        v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          v23 = swift_slowAlloc();
          v24 = swift_slowAlloc();
          v35 = v24;
          *(_DWORD *)v23 = 136446722;
          v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v32, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v23 + 12) = 2082;
          v25 = MEMORY[0x18D754CF0](v31, a2);
          v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 22) = 2082;
          if (v19)
          {
            if (v19 == 1)
            {
              v27 = 0xEF7374757074754FLL;
              v28 = 0x6863746566657270;
            }
            else
            {
              v27 = 0xE800000000000000;
              v28 = 0x6574656C706D6F63;
            }
          }
          else
          {
            v33 = 0x77656956656B616DLL;
            v34 = 0xEA00000000002320;
            v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v29);
            swift_bridgeObjectRelease();
            v28 = v33;
            v27 = v34;
          }
          v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_186E48000, v21, v22, "%{public}s %{public}s end prefetch, phase=%{public}s", (uint8_t *)v23, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v24, -1, -1);
          MEMORY[0x18D760108](v23, -1, -1);
        }

      }
    }
  }
}

{
  unsigned int *v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t Value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  Swift::String v30;
  NSObject *log;
  uint64_t v32;
  unsigned int v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v6 = (uint64_t)v3;
  v7 = *v3;
  v8 = *(_QWORD *)(v6 + 32);
  Value = AGGraphGetValue();
  v10 = *(_QWORD *)Value;
  if (v8 != *(_QWORD *)Value)
  {
    v11 = *(_QWORD *)(Value + 8);
    v12 = *(unsigned __int8 *)(Value + 16);
    *(_QWORD *)(v6 + 32) = v10;
    type metadata accessor for IncrementalLayoutViewCache();
    if ((*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) & v12) != 0)
    {
      v33 = v7;
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
        goto LABEL_8;
      if (one-time initialization token for log != -1)
        goto LABEL_22;
      while (1)
      {
        v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Log.LazyLayoutPrefetch.log);
        v14 = Logger.logObject.getter();
        v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          log = v14;
          v16 = swift_slowAlloc();
          v32 = swift_slowAlloc();
          v35 = v32;
          *(_DWORD *)v16 = 136446466;
          v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, a1, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v16 + 12) = 2082;
          v17 = MEMORY[0x18D754CF0](v33, a2);
          v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_186E48000, log, v15, "%{public}s %{public}s start prefetch", (uint8_t *)v16, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v32, -1, -1);
          MEMORY[0x18D760108](v16, -1, -1);

        }
        else
        {

        }
LABEL_8:
        if (AGGraphGetCurrentAttribute() != *MEMORY[0x1E0CFED28])
          break;
        __break(1u);
LABEL_22:
        swift_once();
      }
      v19 = (id)AGGraphGetAttributeGraph();
      AGGraphGetDeadline();
      AGGraphSetDeadline();
      specialized closure #1 in IncrementalChildPrefetcher.updateValue()(v6, v10, v11, v12, a3);
      AGGraphSetDeadline();

      v20 = *(unsigned __int8 *)(v6 + 56);
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v21 = type metadata accessor for Logger();
        __swift_project_value_buffer(v21, (uint64_t)static Log.LazyLayoutPrefetch.log);
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc();
          v25 = swift_slowAlloc();
          v37 = v25;
          *(_DWORD *)v24 = 136446722;
          v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, a1, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v24 + 12) = 2082;
          v26 = MEMORY[0x18D754CF0](v33, a2);
          v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v24 + 22) = 2082;
          if (v20)
          {
            if (v20 == 1)
            {
              v28 = 0xEF7374757074754FLL;
              v29 = 0x6863746566657270;
            }
            else
            {
              v28 = 0xE800000000000000;
              v29 = 0x6574656C706D6F63;
            }
          }
          else
          {
            v35 = 0x77656956656B616DLL;
            v36 = 0xEA00000000002320;
            v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v30);
            swift_bridgeObjectRelease();
            v29 = v35;
            v28 = v36;
          }
          v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_186E48000, v22, v23, "%{public}s %{public}s end prefetch, phase=%{public}s", (uint8_t *)v24, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v25, -1, -1);
          MEMORY[0x18D760108](v24, -1, -1);
        }

      }
    }
  }
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init(type:)())()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

void base witness table accessor for _AttributeBody in IncrementalPreference<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalPreference<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalPreference<A>, a1);
  return static AsyncAttribute.flags.getter();
}

ValueMetadata *type metadata accessor for DragGesture()
{
  return &type metadata for DragGesture;
}

uint64_t type metadata completion function for SubscriptionView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for SidebarListBody()
{
  return swift_allocateGenericValueMetadata();
}

void base witness table accessor for _AttributeBody in SubscriptionView<A, B>.Subscriber()
{
  JUMPOUT(0x18D75FFDCLL);
}

ValueMetadata *type metadata accessor for GridItem()
{
  return &type metadata for GridItem;
}

uint64_t associated type witness table accessor for View.Body : View in Button<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t Image.init(uiImage:)(uint64_t a1)
{
  uint64_t result;

  type metadata accessor for ImageProviderBox<UIImage>();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t storeEnumTagSinglePayload for AnyIdentifiableShareConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

uint64_t destroy for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  return destroy for ToolbarAppearanceConfiguration(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t AccessibilityRelationshipScope.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for AccessibilityChildBehaviorBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t UIKitContentScrollViewBridge.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyAccessibilityViewModifier()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for AnimationCompletionCriteria()
{
  return &type metadata for AnimationCompletionCriteria;
}

uint64_t initializeWithCopy for ContextMenuResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration()
{
  return &type metadata for SectionStyleConfiguration;
}

uint64_t type metadata instantiation function for SidebarListBody.CollectionViewBody()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for InsetGroupedListStyle()
{
  return &type metadata for InsetGroupedListStyle;
}

ValueMetadata *type metadata accessor for SidebarListStyle()
{
  return &type metadata for SidebarListStyle;
}

ValueMetadata *type metadata accessor for Visibility()
{
  return &type metadata for Visibility;
}

__n128 __swift_memcpy66_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t View.accessibilityRespondsToUserInteraction(_:)(char a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4;
  unsigned __int8 v5;

  if ((a1 & 1) != 0)
  {
    v4 = 21;
    return View.accessibilityAddTraits(_:)(&v4, a2, a3);
  }
  else
  {
    v5 = 21;
    return View.accessibilityRemoveTraits(_:)(&v5, a2, a3);
  }
}

uint64_t View.accessibilityAddTraits(_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = *a1;
  if (v3 >= 0x40)
    v4 = 0;
  else
    v4 = 1 << v3;
  v6[0] = v4;
  v6[1] = v4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE58B8], (uint64_t)v6, 1, a2, MEMORY[0x1E0CE58B8], a3);
}

uint64_t getEnumTag for SystemScrollLayoutState.ContentOffsetMode(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return ((*a1 >> 1) & 0xFFFFFFFC | *a1 & 3) + 2;
}

uint64_t outlined init with take of ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_WORD *)a2 = *(_WORD *)a1;
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = v5;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  return a2;
}

uint64_t initializeWithTake for ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

id HostingScrollView.updateContext(_:)(_QWORD *a1)
{
  char *v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  id v18;
  id result;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  void *v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  unint64_t v60;
  double v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  CGFloat v73;
  CGFloat v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  double v79;
  char v80;
  double v81;
  double v82;
  double v83;
  double v84;
  CGFloat v85;
  CGFloat v86;
  double v87;
  double v88;
  double *v89;
  int v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  char *v98;
  char *v99;
  double v100;
  _QWORD *v101;
  objc_class *v102;
  unsigned __int8 v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  char v110;
  uint64_t v111;
  char **v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  CGFloat v124;
  CGFloat v125;
  double *v126;
  double v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  __int16 v131;
  char *v132;
  int v133;
  double v134;
  double v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  objc_class *ObjectType;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;
  _QWORD *v150;
  id v151;
  objc_super v152;
  char v153;
  _BYTE v154[232];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _OWORD v169[2];
  uint64_t v170;
  _OWORD v171[2];
  char v172;
  unint64_t v173;
  CGPoint v174;
  CGPoint v175;
  CGPoint v176;
  CGPoint v177;
  CGRect v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = *(double *)a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v9 = a1[6];
  v148 = *((double *)a1 + 7);
  v149 = v3;
  v10 = a1[8];
  v150 = a1 + 8;
  *(double *)&v11 = COERCE_DOUBLE(type metadata accessor for DispatchWorkItemFlags());
  v145 = *(_QWORD *)(v11 - 8);
  v146 = *(double *)&v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v144 = (char *)&v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS();
  v142 = *(_QWORD *)(v14 - 8);
  v143 = v14;
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v141 = (char *)&v134 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(v1, sel_window, v16);
  v151 = v18;
  if (!v18)
  {
    v40 = (double *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
    v41 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
    v42 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 8];
    v43 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 16];
    v44 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 24];
    v45 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 32];
    v46 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 40];
    v47 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 48];
    v48 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 56];
    v49 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 64];
    *v40 = v149;
    *((_QWORD *)v40 + 1) = v4;
    *((_QWORD *)v40 + 2) = v5;
    *((_QWORD *)v40 + 3) = v6;
    *((_QWORD *)v40 + 4) = v8;
    *((_QWORD *)v40 + 5) = v7;
    v50 = v148;
    *((_QWORD *)v40 + 6) = v9;
    v40[7] = v50;
    *((_QWORD *)v40 + 8) = v10;
    outlined consume of HostingScrollViewUpdateContext?(v41, v42, v43, v44, v45, v46, v47, v48, v49);
    outlined retain of HostingScrollViewUpdateContext((uint64_t)a1);
    return (id)(v151 != 0);
  }

  LODWORD(v149) = objc_msgSend(v1, sel__skipsContentOffsetAdjustmentsIfScrolling);
  result = objc_msgSend(v1, sel__setSkipsContentOffsetAdjustmentsIfScrolling_, 1);
  v20 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  v21 = *(_DWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (!v22)
  {
    v24 = v1;
    *(_DWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v23;
    objc_msgSend(v1, sel_adjustedContentInset);
    v26 = v25;
    v28 = v27;
    v147 = v30;
    v148 = v29;
    v167 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
    v168 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
    v169[0] = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
    *(_OWORD *)((char *)v169 + 9) = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
    v163 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
    v164 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
    v165 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
    v166 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
    v159 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
    v160 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
    v161 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
    v162 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
    v155 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
    v156 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
    v157 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
    v158 = *(_OWORD *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
    v31 = v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
    swift_beginAccess();
    outlined init with copy of ScrollEnvironmentProperties((int *)v31, (uint64_t)v154);
    memset(v171, 0, sizeof(v171));
    v172 = 1;
    specialized UIScrollView.updateContentInsets(margins:axes:properties:safeArea:)((uint64_t *)&v155, (uint64_t)v154, (uint64_t)v171);
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v154);
    if (objc_msgSend(v1, sel_isPagingEnabled))
    {
      objc_msgSend(v1, sel_adjustedContentInset);
      v35 = v32;
      v37 = v36;
      if (*(_BYTE *)(v31 + 81))
        v38 = v33;
      else
        v38 = v34;
      if (*(_BYTE *)(v31 + 81))
        v39 = v34;
      else
        v39 = v33;
      objc_msgSend(v1, sel__setPagingOrigin_, -v39, -v32);
      objc_msgSend(v1, sel__setInterpageSpacing_, -(v39 + v38 * 0.5), -(v35 + v37 * 0.5));
    }
    else
    {
      objc_msgSend(v1, sel__setPagingOrigin_, 0.0, 0.0);
      objc_msgSend(v1, sel__setInterpageSpacing_, 0.0, 0.0);
    }
    v51 = *((double *)a1 + 2);
    v52 = *((double *)a1 + 3);
    v53 = *((double *)a1 + 4);
    v54 = *((double *)a1 + 5);
    v55 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host];
    objc_msgSend(*(id *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host], sel_frame);
    v183.origin.x = v56;
    v183.origin.y = v57;
    v183.size.width = v58;
    v183.size.height = v59;
    v178.origin.x = v51;
    v178.origin.y = v52;
    v178.size.width = v53;
    v178.size.height = v54;
    if (!CGRectEqualToRect(v178, v183))
      objc_msgSend(v55, sel_setFrame_, v51, v52, v53, v54);
    v153 = 0;
    outlined init with take of SystemScrollLayoutState.ContentOffsetMode(v150, &v170);
    outlined init with take of SystemScrollLayoutState.ContentOffsetMode(&v170, &v173);
    v60 = v173;
    if (v173 >> 62)
    {
      if (v173 >> 62 == 1)
      {
        v61 = v28;
        v62 = v26;
        v173 &= 0x3FFFFFFFFFFFFFFFuLL;
        v64 = *(_QWORD **)(v60 + 16);
        v63 = *(_QWORD *)(v60 + 24);
        v65 = v31;
        v66 = *(unsigned __int8 *)(v60 + 32);
        v137 = *(unsigned __int8 *)(v60 + 33);
        v67 = *(unsigned __int8 *)(v60 + 34);
        outlined retain of HostingScrollViewUpdateContext((uint64_t)a1);
        swift_retain();
        objc_msgSend(v24, sel_adjustedContentInset);
        v70 = v69;
        v72 = v71;
        v73 = *(double *)a1;
        v74 = *((double *)a1 + 1);
        v76 = *((double *)a1 + 6) - (v72 + v75);
        if (v76 < 0.0)
          v76 = 0.0;
        v77 = *((double *)a1 + 7) - (v70 + v68);
        if (v77 < 0.0)
          v77 = 0.0;
        v139 = v65;
        LOBYTE(v155) = *(_BYTE *)(v65 + 81);
        v150 = v64;
        *(double *)&v78 = COERCE_DOUBLE(specialized static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)((uint64_t)v64, v63, v73, v74, v76, v77, v53, v54));
        if ((v80 & 1) != 0)
        {
          v104 = &v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
          v105 = *(_QWORD *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
          *(_QWORD *)v104 = 0;
          *((_QWORD *)v104 + 1) = 0;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v105);
          swift_release();
          outlined release of HostingScrollViewUpdateContext((uint64_t)a1);
        }
        else
        {
          v81 = *(double *)&v78;
          v82 = v79;
          objc_msgSend(v24, sel_contentOffset);
          v134 = v84;
          v135 = v83;
          if ((v67 & 1) == 0)
            objc_msgSend(v24, sel_stopScrollingAndZooming);
          v136 = v63;
          objc_msgSend(v24, sel_contentSize, *(_QWORD *)&v134);
          v179.size.width = v85;
          v179.size.height = v86;
          v179.origin.x = 0.0;
          v179.origin.y = 0.0;
          v174.x = v81;
          v174.y = v82;
          if (CGRectContainsPoint(v179, v174)
            || (v180.origin.x = 0.0,
                v180.origin.y = 0.0,
                v180.size.width = v53,
                v180.size.height = v54,
                v175.x = v81,
                v175.y = v82,
                CGRectContainsPoint(v180, v175)))
          {
            objc_msgSend(v24, sel_setContentSize_, v53, v54);
            swift_beginAccess();
            v153 = 1;
          }
          v87 = v81 - v72;
          v88 = v82 - v70;
          if (((v66 | v67 ^ 1) & 1) != 0)
          {
            v152.receiver = v24;
            v152.super_class = ObjectType;
            objc_msgSendSuper2(&v152, sel_setContentOffset_animated_, v66, v87, v88);
            if ((_DWORD)v66)
            {
              *(_BYTE *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 4;
              ScrollViewHelper.updateGraphState(isPreferred:)(0);
            }
            v89 = (double *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
            *v89 = v87;
            v89[1] = v88;
          }
          ScrollViewHelper.updateGraphState(isPreferred:)(v66 != 1);
          if (*(_BYTE *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase))
            v90 = v66;
          else
            v90 = 1;
          if (((v90 | v67) & 1) == 0)
          {
            *(_BYTE *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 0;
            ScrollViewHelper.updateGraphState(isPreferred:)(0);
          }
          v138 = v20;
          *(_BYTE *)(v20 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 0;
          v91 = OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig;
          v92 = &v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig];
          v92[2] = 0;
          *(_WORD *)v92 = 2;
          v93 = (uint64_t *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
          v94 = *(_QWORD *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
          *v93 = 0;
          v93[1] = 0;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v94);
          if (!(_DWORD)v66 || v87 - v135 == 0.0 && v88 - v134 == 0.0)
          {
            type metadata accessor for OS_dispatch_queue();
            ObjectType = (objc_class *)static OS_dispatch_queue.main.getter();
            v95 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v96 = (_QWORD *)swift_allocObject();
            v97 = v150;
            v96[2] = v95;
            v96[3] = v97;
            v96[4] = v136;
            *(_QWORD *)&v157 = partial apply for closure #1 in HostingScrollView.updateContext(_:);
            *((_QWORD *)&v157 + 1) = v96;
            *(_QWORD *)&v155 = MEMORY[0x1E0C809B0];
            *((_QWORD *)&v155 + 1) = 1107296256;
            *(_QWORD *)&v156 = thunk for @escaping @callee_guaranteed () -> ();
            *((_QWORD *)&v156 + 1) = &block_descriptor_76;
            v150 = _Block_copy(&v155);
            swift_retain();
            swift_release();
            v98 = v141;
            static DispatchQoS.unspecified.getter();
            *(_QWORD *)&v155 = MEMORY[0x1E0DEE9D8];
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            type metadata accessor for [DispatchWorkItemFlags]();
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
            v99 = v144;
            v100 = v146;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            v101 = v150;
            v102 = ObjectType;
            MEMORY[0x18D75D930](0, v98, v99, v150);
            _Block_release(v101);

            (*(void (**)(char *, double))(v145 + 8))(v99, COERCE_DOUBLE(*(_QWORD *)&v100));
            (*(void (**)(char *, uint64_t))(v142 + 8))(v98, v143);
          }
          else
          {
            v128 = *v93;
            v129 = v67;
            v130 = v136;
            *v93 = (uint64_t)v150;
            v93[1] = v130;
            swift_retain();
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v128);
            if (v137)
              v131 = 257;
            else
              v131 = 1;
            v132 = &v24[v91];
            v132[2] = v129 != 0;
            *(_WORD *)v132 = v131;
          }
          swift_release();
          outlined release of HostingScrollViewUpdateContext((uint64_t)a1);
        }
        v26 = v62;
        v28 = v61;
        v31 = v139;
      }
      else
      {
        HostingScrollView.checkAnimationCompletion()();
      }
      goto LABEL_61;
    }
    v173 &= 0x3FFFFFFFFFFFFFFFuLL;
    v103 = objc_msgSend(v24, sel_isTracking);
    v138 = v20;
    v139 = v31;
    if ((v103 & 1) != 0 || (objc_msgSend(v24, sel_isDecelerating) & 1) != 0)
      LODWORD(v150) = 0;
    else
      LODWORD(v150) = objc_msgSend(v24, sel_isScrollAnimating) ^ 1;
    v106 = v24;
    v107 = *(_QWORD *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState + 8];
    v108 = swift_getObjectType();
    v109 = *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8);
    swift_unknownObjectRetain();
    v110 = v109(v108, v107);
    swift_unknownObjectRelease();
    if ((_BYTE)v60)
    {
      v24 = v106;
      v111 = v138;
      v31 = v139;
      v112 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
      if (v60 == 1 && !(_DWORD)v150)
        goto LABEL_61;
    }
    else
    {
      v24 = v106;
      v111 = v138;
      v31 = v139;
      v112 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
      if ((v110 & 1) != 0)
      {
LABEL_61:
        swift_beginAccess();
        if (v153 != 1)
          objc_msgSend(v24, sel_setContentSize_, v53, v54);
        v133 = *(unsigned __int8 *)(v31 + 81);
        if (v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection] != v133)
        {
          v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection] = v133;
          ScrollViewHelper.updateGraphState(isPreferred:)(0);
        }
        $defer #2 () in HostingScrollView.updateContext(_:)((uint64_t)v24, *(double *)&v26, v28, v148, v147);
        objc_msgSend(v24, sel__setSkipsContentOffsetAdjustmentsIfScrolling_, LODWORD(v149));
        return (id)(v151 != 0);
      }
    }
    v146 = v28;
    v150 = v26;
    *(_BYTE *)(v111 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 0;
    objc_msgSend(v24, sel_contentOffset);
    v114 = v113 + *(double *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets + 8];
    v116 = v115 + *(double *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets];
    v117 = *(double *)a1;
    v118 = *((double *)a1 + 1);
    objc_msgSend(v24, v112[432]);
    v120 = v119;
    objc_msgSend(v24, v112[432]);
    v121 = v117 - v120;
    v123 = v118 - v122;
    objc_msgSend(v24, sel_contentSize);
    v181.size.width = v124;
    v181.size.height = v125;
    v181.origin.x = 0.0;
    v181.origin.y = 0.0;
    v176.x = v117;
    v176.y = v118;
    if (CGRectContainsPoint(v181, v176)
      || (v182.origin.x = 0.0,
          v182.origin.y = 0.0,
          v182.size.width = v53,
          v182.size.height = v54,
          v177.x = v117,
          v177.y = v118,
          CGRectContainsPoint(v182, v177)))
    {
      objc_msgSend(v24, sel_setContentSize_, v53, v54);
      swift_beginAccess();
      v153 = 1;
    }
    objc_msgSend(v24, sel_setContentOffset_, v121, v123);
    v126 = (double *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
    v127 = v123 - v116 + *(double *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset + 8];
    *v126 = v121 - v114 + *(double *)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
    v126[1] = v127;
    v26 = v150;
    v28 = v146;
    goto LABEL_61;
  }
  __break(1u);
  return result;
}

_QWORD *outlined init with take of SystemScrollLayoutState.ContentOffsetMode(_QWORD *a1, _QWORD *a2)
{
  __swift_memcpy8_8(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for PagingScrollView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 2) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 2) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 1);
      if (v15 >= 2)
        return v15 - 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F12EE8 + 4 * byte_187C4CA70[(v9 - 1)]))();
}

uint64_t getEnumTagSinglePayload for LazyHStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 24) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 24) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F13018 + 4 * byte_187C51920[(v8 - 1)]))();
}

ValueMetadata *type metadata accessor for BorderlessButtonStyle()
{
  return &type metadata for BorderlessButtonStyle;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

ValueMetadata *type metadata accessor for _AllowsHitTestingModifier()
{
  return &type metadata for _AllowsHitTestingModifier;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration.Header()
{
  return &type metadata for SectionStyleConfiguration.Header;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration.Footer()
{
  return &type metadata for SectionStyleConfiguration.Footer;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration.RawContent()
{
  return &type metadata for SectionStyleConfiguration.RawContent;
}

ValueMetadata *type metadata accessor for ListRowBackgroundTraitKey()
{
  return &type metadata for ListRowBackgroundTraitKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIHostingConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (((v9 & ~v8) + v10) & 0xFFFFFFFFFFFFFFF8) + 99 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)v4 + v9) & v15;
    v17 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v16, v17, v5);
    *(_BYTE *)(v16 + v10) = *(_BYTE *)(v17 + v10);
    v18 = (v16 + v10) & 0xFFFFFFFFFFFFFFF8;
    v19 = (v17 + v10) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_OWORD *)(v19 + 8);
    v21 = *(_OWORD *)(v19 + 24);
    v22 = *(_OWORD *)(v19 + 40);
    *(_OWORD *)(v18 + 49) = *(_OWORD *)(v19 + 49);
    *(_OWORD *)(v18 + 40) = v22;
    *(_OWORD *)(v18 + 24) = v21;
    *(_OWORD *)(v18 + 8) = v20;
    v23 = *(_OWORD *)(v19 + 81);
    *(_OWORD *)(v18 + 72) = *(_OWORD *)(v19 + 72);
    *(_OWORD *)(v18 + 81) = v23;
    *(_BYTE *)(v18 + 97) = *(_BYTE *)(v19 + 97);
    *(_BYTE *)(v18 + 98) = *(_BYTE *)(v19 + 98);
  }
  return v4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SelectionManagerBox<A>(uint64_t a1, char *a2, uint64_t a3)
{
  return static SelectionManagerBox.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

ValueMetadata *type metadata accessor for ButtonBorderShape()
{
  return &type metadata for ButtonBorderShape;
}

uint64_t closure #1 in IncrementalLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MenuOrder()
{
  return &type metadata for MenuOrder;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PrimitiveButtonStyleContainerModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for AccessibilityLargeContentViewModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewBehavior()
{
  return &type metadata for AccessibilityLargeContentViewBehavior;
}

uint64_t type metadata completion function for PlatformViewRepresentableContext()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void base witness table accessor for _AttributeBody in AccessibilityBridgedPlatformView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in InvalidatableLeafLayoutComputer<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for SharingActivityPickerBridge()
{
  return swift_initClassMetadata2();
}

void base witness table accessor for _AttributeBody in PlatformViewIdentifiedViews<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

ValueMetadata *type metadata accessor for PlatformItemListButtonStyle()
{
  return &type metadata for PlatformItemListButtonStyle;
}

void base witness table accessor for CustomCombineIdentifierConvertible in ActionDispatcherSubscriber<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for ActionDispatcherSubscriber()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void base witness table accessor for _AttributeBody in PlatformItemListGenerator<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for ShareConfigurationBridge()
{
  return swift_initClassMetadata2();
}

void base witness table accessor for _AttributeBody in PlatformViewDisplayList<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t destroy for FocusStore()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for UIKitInspectorV3Bridge()
{
  return swift_initClassMetadata2();
}

uint64_t ModernNavigationBridge.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DialogActionDelegate()
{
  return objc_opt_self();
}

void base witness table accessor for _AttributeBody in ViewResponderFilter<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for UIHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for PopoverPresentation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for DialogActionContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void @objc PencilEventsBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

}

void base witness table accessor for _AttributeBody in PlatformViewChild<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for PlatformViewChild()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t @objc ContextMenuBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectRelease();
}

ValueMetadata *type metadata accessor for AppIntentExecutor()
{
  return &type metadata for AppIntentExecutor;
}

uint64_t type metadata completion function for PlatformViewHost()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

void *type metadata accessor for AnyStyleModifier()
{
  return &unk_1E1ABE5E8;
}

ValueMetadata *type metadata accessor for ScrollViewProxy()
{
  return &type metadata for ScrollViewProxy;
}

uint64_t getEnumTagSinglePayload for DropDestination(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for ButtonMenuStyle.Automatic()
{
  return &type metadata for ButtonMenuStyle.Automatic;
}

ValueMetadata *type metadata accessor for AppIntentAction()
{
  return &type metadata for AppIntentAction;
}

void @objc TooltipBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

}

uint64_t type metadata completion function for PPTTestBridge()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for ListItemTint()
{
  return &type metadata for ListItemTint;
}

ValueMetadata *type metadata accessor for PPTTestCase.Name()
{
  return &type metadata for PPTTestCase.Name;
}

uint64_t type metadata completion function for ViewLeafView()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

uint64_t AccessibilityChildBehaviorBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_deallocClassInstance();
}

uint64_t closure #2 in AccessibilityProxyModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v37[5];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[3];

  v42 = a4;
  v7 = type metadata accessor for VStack();
  v37[2] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v7);
  v41 = v8;
  v9 = type metadata accessor for ModifiedContent();
  v37[3] = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = type metadata accessor for ModifiedContent();
  v38 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v37[1] = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v37[4] = (char *)v37 - v16;
  v17 = type metadata accessor for Optional();
  v39 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v40 = (uint64_t)v37 - v23;
  type metadata accessor for AccessibilityProxyModifier(0, a2, a3, v24);
  v25 = AccessibilityProxyModifier.accessibilityEnabled.getter();
  if ((v25 & 1) != 0)
  {
    v37[0] = v37;
    MEMORY[0x1E0C80A78](v25, v26);
    v37[-4] = a2;
    v37[-3] = a3;
    v37[-2] = a1;
    static HorizontalAlignment.center.getter();
    VStack.init(alignment:spacing:content:)();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v41);
    View.hiddenAllowingAccessibility()();
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v20, 1, 1, v11);
  v27 = v41;
  v47[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v41);
  v47[1] = &protocol witness table for HiddenModifierAllowingAccessibility;
  v28 = MEMORY[0x1E0CE2E70];
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v47);
  v30 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v46[0] = v29;
  v46[1] = v30;
  MEMORY[0x18D75FFDC](v28, v11, v46);
  v31 = v40;
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v20, v40);
  v32 = *(void (**)(char *, uint64_t))(v39 + 8);
  v32(v20, v17);
  v45[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v27);
  v45[1] = &protocol witness table for HiddenModifierAllowingAccessibility;
  v33 = MEMORY[0x1E0CE2E70];
  v34 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v45);
  v35 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v44[0] = v34;
  v44[1] = v35;
  v43 = MEMORY[0x18D75FFDC](v33, v11, v44);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v17, &v43);
  static ViewBuilder.buildBlock<A>(_:)(v31, v17, v42);
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v31, v17);
}

unint64_t lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRepresentableStyleModifier, &type metadata for AccessibilityRepresentableStyleModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier);
  }
  return result;
}

uint64_t outlined destroy of UpdatedHostingScrollView(uint64_t a1)
{
  destroy for UpdatedHostingScrollView(a1);
  return a1;
}

uint64_t destroy for UpdatedHostingScrollView(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 104))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  return result;
}

uint64_t outlined init with copy of UpdatedHostingScrollView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UpdatedHostingScrollView(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for UpdatedHostingScrollView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v6 = a1 + 80;
  v7 = a2 + 80;
  v8 = *(_QWORD *)(a2 + 104);
  v9 = v4;
  v10 = v5;
  swift_retain();
  if (v8)
  {
    v11 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v8;
    *(_QWORD *)(a1 + 112) = v11;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(v6, v7, v8);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  }
  else
  {
    v12 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(v6 + 48) = v12;
    *(_QWORD *)(v6 + 64) = *(_QWORD *)(v7 + 64);
    v13 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v13;
  }
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  v14 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v14;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 513) = *(_OWORD *)(a2 + 513);
  v15 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v15;
  v16 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v16;
  v17 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v17;
  v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v18;
  v19 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v19;
  v20 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v20;
  return a1;
}

ValueMetadata *type metadata accessor for ScrollViewConfiguration()
{
  return &type metadata for ScrollViewConfiguration;
}

uint64_t ScrollEventStateReader.init(content:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void closure #8 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void **a6, void **a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  void *v43;
  id v44;

  v16 = AGCreateWeakAttribute();
  v17 = AGCreateWeakAttribute();
  v18 = AGCreateWeakAttribute();
  v19 = AGCreateWeakAttribute();
  v20 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  v21 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(v16, 0, v17, 0, v18, 0, v19, 0, 0);
  *(_QWORD *)&v21[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options] = 1;
  v21[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_hasScrollPosition] = a5;
  v23 = type metadata accessor for SystemScrollView(0, a12, a13, v22);
  objc_allocWithZone((Class)type metadata accessor for HostingScrollView());
  v24 = v21;
  v25 = HostingScrollView.init(viewType:helper:)(v23, v24);
  v26 = *a6;
  *a6 = v25;

  v27 = *a6;
  if (!*a6)
  {
    __break(1u);
    goto LABEL_9;
  }
  v28 = objc_allocWithZone((Class)type metadata accessor for HostingScrollView.PlatformContainer());
  v29 = HostingScrollView.PlatformContainer.init(scrollView:)(v27);
  v30 = *a7;
  *a7 = v29;

  if (!*a6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v31 = *(char **)((char *)*a6 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  v32 = (uint64_t *)&v31[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBounds];
  swift_beginAccess();
  v33 = v31;
  *v32 = AGCreateWeakAttribute();
  swift_endAccess();

  if (!*a6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v34 = *(char **)((char *)*a6 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  v35 = (uint64_t *)&v34[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableFillerBounds];
  swift_beginAccess();
  v36 = v34;
  *v35 = AGCreateWeakAttribute();
  swift_endAccess();

  if (!*a6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v37 = *(char **)((char *)*a6 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  v38 = (uint64_t *)&v37[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBorder];
  swift_beginAccess();
  v39 = v37;
  *v38 = AGCreateWeakAttribute();
  swift_endAccess();

  if (!*a6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v40 = *(char **)((char *)*a6 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  v41 = (uint64_t *)&v40[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__pixelLength];
  swift_beginAccess();
  v42 = v40;
  *v41 = AGCreateWeakAttribute();
  swift_endAccess();

  v43 = *a6;
  if (*a6)
  {
    swift_beginAccess();
    swift_weakLoadStrong();
    v44 = v43;

    swift_weakAssign();
    swift_release();
    return;
  }
LABEL_13:
  __break(1u);
}

BOOL ScrollEventState.isScrolling.getter()
{
  _BYTE *v0;

  return *v0 != 0;
}

uint64_t type metadata accessor for ViewThatFits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewThatFits);
}

uint64_t getEnumTagSinglePayload for ScrollView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      if ((*(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x48) & 0xF000000000000007) != 0)
        return (*(_DWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x40) & 0x7FFFFFFFu) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 120) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F14860 + 4 * byte_187C546D0[v10]))();
  }
}

_QWORD *__swift_memcpy15_8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 7) = *(uint64_t *)((char *)a2 + 7);
  *result = v2;
  return result;
}

uint64_t lazy protocol witness table accessor for type UIImage and conformance UIImage(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIImage);
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t UIView.SafeAreaHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t getEnumTagSinglePayload for SceneList.Item(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 272))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 256);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

void base witness table accessor for _AttributeBody in MakeBody<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for <> Section<A, B, C>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v4 = *((_QWORD *)a3 + 2);
  v6 = *a3;
  v7 = v4;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a2, &v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v4 = *((_QWORD *)a3 + 2);
  v6 = *a3;
  v7 = v4;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a2, &v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in <> Section<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Section()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *assignWithTake for SelectionManagerBox(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;

  if (a1 == a2)
    return a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v8 <= v7)
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v8;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = *((unsigned __int8 *)a1 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 2)
    goto LABEL_19;
  if (v11 != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
LABEL_19:
    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
LABEL_21:
  v13 = *((unsigned __int8 *)a2 + v10);
  if (v13 >= 3)
  {
    if (v10 <= 3)
      v14 = v10;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  if (v13 == 2)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
    v15 = 2;
  }
  else if (v13 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      v15 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v15 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    v15 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v10) = v15;
  return a1;
}

void closure #1 in runApp<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  type metadata accessor for AppGraph();
  v6 = specialized AppGraph.__allocating_init<A>(app:)(a1, a2, a3);
  if ((*(_BYTE *)(v6 + 230) & 1) == 0)
  {
    if ((AppGraph.traceLaunch.getter() & 1) != 0)
    {
      type metadata accessor for AGGraphRef(0);
      static AGGraphRef.startTracing(options:)();
    }
    else if ((AppGraph.launchProfileOptions.getter() & 2) != 0)
    {
      AGGraphStartProfiling();
    }
  }
  GraphHost.instantiate()();
  if (static AppGraph.shared)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    static AppGraph.shared = v6;
  }
}

ValueMetadata *type metadata accessor for AnyIdentifiableShareConfiguration()
{
  return &type metadata for AnyIdentifiableShareConfiguration;
}

ValueMetadata *type metadata accessor for AccessibilityScrollableContext()
{
  return &type metadata for AccessibilityScrollableContext;
}

void InsettableGroupedListBodyRule.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_186F14F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t initializeWithCopy for _ListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  char v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v11 = *(_QWORD *)(v6 + 64) + v10;
  v12 = ~v10;
  v13 = (char *)((v11 + a1) & ~v10);
  v14 = (_QWORD *)((v11 + a2) & ~v10);
  v15 = *(_QWORD *)(v8 + 64);
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v16 < 0xFFFFFFFFuLL)
  {
    v25 = v9 == 0;
    v26 = (v10 + 16) & v12;
    if (v25)
      v27 = v15 + 1;
    else
      v27 = *(_QWORD *)(v8 + 64);
    if (v27 > v15)
      v15 = v27;
    if (v15 <= 8)
      v15 = 8;
    memcpy(v13, v14, (v26 | 1) + v15);
  }
  else
  {
    *(_QWORD *)v13 = *v14;
    v17 = (unint64_t)(v13 + 15);
    *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v16;
    v18 = v10 + 8;
    v19 = (_QWORD *)((v18 + (v17 & 0xFFFFFFFFFFFFFFF8)) & v12);
    v20 = (_QWORD *)(((unint64_t)v16 + v18) & v12);
    if (v9)
      v21 = v15;
    else
      v21 = v15 + 1;
    if (v21 > v15)
      v15 = v21;
    if (v15 <= 8)
      v22 = 8;
    else
      v22 = v15;
    v23 = *((unsigned __int8 *)v20 + v22);
    swift_retain();
    swift_retain();
    if (v23 >= 3)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X11 }
    }
    if (v23 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(v19, v20, v7);
      v28 = 2;
LABEL_31:
      *((_BYTE *)v19 + v22) = v28;
      return a1;
    }
    if (v23 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7))
      {
        memcpy(v19, v20, v21);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(v19, v20, v7);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
      }
      v28 = 1;
      goto LABEL_31;
    }
    *v19 = *v20;
    *((_BYTE *)v19 + v22) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void type metadata accessor for _ListValue()
{
  JUMPOUT(0x18D75FF28);
}

ValueMetadata *type metadata accessor for CaptureViewRespondersModifier()
{
  return &type metadata for CaptureViewRespondersModifier;
}

ValueMetadata *type metadata accessor for IgnoreViewRespondersModifier()
{
  return &type metadata for IgnoreViewRespondersModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonStyleContainerModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for AnimationCompletionCriteria(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186F15244 + 4 * byte_187C21FC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186F15278 + 4 * byte_187C21FC0[v4]))();
}

uint64_t sub_186F15278(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F15280(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F15288);
  return result;
}

uint64_t sub_186F15294(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F1529CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_186F152A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F152A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for CapsuleSlider.ScrollState.Orientation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t type metadata completion function for UIViewRepresentableContext()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ActionDispatcherSubscriber()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t static AccessibilityChildBehavior.contain.getter@<X0>(_QWORD *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for contain, &static AccessibilityChildBehavior.contain, a1);
}

ValueMetadata *type metadata accessor for MenuActionDismissBehavior()
{
  return &type metadata for MenuActionDismissBehavior;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EmptyTuple()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for ResolvedCustomButtonMenu.Configuration()
{
  return &type metadata for ResolvedCustomButtonMenu.Configuration;
}

uint64_t InputAccessoryGenerator.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t NavigationDestinationResolverBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for PaletteSelectionEffect()
{
  return &type metadata for PaletteSelectionEffect;
}

ValueMetadata *type metadata accessor for DefaultListButtonStyle()
{
  return &type metadata for DefaultListButtonStyle;
}

ValueMetadata *type metadata accessor for AccessibilityNodeProxy()
{
  return &type metadata for AccessibilityNodeProxy;
}

uint64_t type metadata completion function for _ContentShapeModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ScrollTargetBehaviorDecelerationContext()
{
  swift_release();
  return swift_release();
}

ValueMetadata *type metadata accessor for ContentMarginModifier()
{
  return &type metadata for ContentMarginModifier;
}

void @objc UIHostingContentView._popupMenuButtonDidChangeHandler.setter(void *a1, int a2, void *aBlock)
{
  uint64_t (*v4)();
  uint64_t v5;
  id v6;

  v4 = (uint64_t (*)())_Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    v4 = thunk for @escaping @callee_unowned @convention(block) () -> ()partial apply;
  }
  else
  {
    v5 = 0;
  }
  v6 = a1;
  UIHostingContentView._popupMenuButtonDidChangeHandler.setter((uint64_t)v4, v5);

}

uint64_t UIHostingContentView._popupMenuButtonDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x9D8));
  v4 = *v3;
  *v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

void @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.setter(void *a1, int a2, void *aBlock)
{
  uint64_t (*v4)();
  uint64_t v5;
  id v6;

  v4 = (uint64_t (*)())_Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    v4 = thunk for @escaping @callee_unowned @convention(block) () -> ()partial apply;
  }
  else
  {
    v5 = 0;
  }
  v6 = a1;
  UIHostingContentView._containerBackgroundViewDidChangeHandler.setter((uint64_t)v4, v5);

}

uint64_t UIHostingContentView._containerBackgroundViewDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x9C0));
  v4 = *v3;
  *v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

ValueMetadata *type metadata accessor for ToolbarItemPlacement.Role()
{
  return &type metadata for ToolbarItemPlacement.Role;
}

void type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for SectionStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t type metadata accessor for SectionStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SectionStyleModifier);
}

ValueMetadata *type metadata accessor for ResolvedSectionStyle()
{
  return &type metadata for ResolvedSectionStyle;
}

uint64_t destroy for PrimitiveTargetVisibilityModifier()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for TriggerSubmitAction()
{
  return &type metadata for TriggerSubmitAction;
}

ValueMetadata *type metadata accessor for SharingPickerSource()
{
  return &type metadata for SharingPickerSource;
}

ValueMetadata *type metadata accessor for ButtonRepeatTiming()
{
  return &type metadata for ButtonRepeatTiming;
}

ValueMetadata *type metadata accessor for ActiveContextMenu()
{
  return &type metadata for ActiveContextMenu;
}

ValueMetadata *type metadata accessor for SectionInsetMode()
{
  return &type metadata for SectionInsetMode;
}

ValueMetadata *type metadata accessor for _HiddenModifier()
{
  return &type metadata for _HiddenModifier;
}

uint64_t ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;

  if ((a1 & 1) != 0)
    AccessibilityNullableOptionSet<>.init(adding:)();
  else
    AccessibilityNullableOptionSet<>.init(removing:)();
  return ModifiedContent<>.accessibilityTraits(_:)(&v6, a2, a3);
}

uint64_t ModifiedContent<>.accessibilityHidden(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((a1 & 1) != 0)
    v5 = 0x400000004;
  else
    v5 = 0x400000000;
  v8 = v5;
  v6 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>, MEMORY[0x1E0CE6508]);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE5728], (uint64_t)&v8, 1, a2, MEMORY[0x1E0CE5728], MEMORY[0x1E0CE5720], v6, a3);
}

uint64_t outlined init with copy of HashableWeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance DragItemTimings.Key(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 513;
}

id @objc _UIHostingView.backgroundColor.getter(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = a1;
  v5 = _UIHostingView.backgroundColor.getter((uint64_t)v1, v2, v3, v4);

  return v5;
}

id _UIHostingView.backgroundColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_backgroundColor);
}

uint64_t AlwaysOnBridge.__deallocating_deinit()
{
  AlwaysOnBridge.deinit();
  return swift_deallocClassInstance();
}

uint64_t AlwaysOnBridge.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();

  swift_bridgeObjectRelease();
  return v0;
}

ValueMetadata *type metadata accessor for ListCellState()
{
  return &type metadata for ListCellState;
}

ValueMetadata *type metadata accessor for ListItemTint.Effect()
{
  return &type metadata for ListItemTint.Effect;
}

uint64_t storeEnumTagSinglePayload for PPTTestCase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 44) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PPTTestCase()
{
  return &type metadata for PPTTestCase;
}

ValueMetadata *type metadata accessor for ListPadding()
{
  return &type metadata for ListPadding;
}

ValueMetadata *type metadata accessor for HoverEffect()
{
  return &type metadata for HoverEffect;
}

uint64_t getEnumTag for CapsuleSlider.ScrollState.Orientation(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t assignWithCopy for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  v10 = *v7;
  *v7 = *v8;
  v11 = v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 24))(((unint64_t)v7 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for FormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t type metadata completion function for ButtonStyleAdaptorMenuStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

__n128 __swift_memcpy25_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t outlined copy of Alert?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    outlined copy of Text?(a5, a6, a7, a8);
    outlined copy of Text.Storage(a10, a11, a12 & 1);
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(a14);
    return outlined copy of Alert.Button?(a16, a17, a18, a19, a20, a21);
  }
  return result;
}

uint64_t View.accessibilityShowsLargeContentViewer<A>(_:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityShowsLargeContentViewer<A>(_:largeContentView:)(2, a1, a2, a3, a4, a5);
}

uint64_t View.accessibilityHint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v16;

  v6 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v9 = Text.init<A>(_:)();
  v11 = v10;
  v13 = v12 & 1;
  View.accessibilityHint(_:)(v9, v10, v12 & 1, v14, a2, a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t storeEnumTagSinglePayload for ScrollEnvironmentProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollEnvironmentProperties(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t DividerStyleConfiguration.orientation.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

_QWORD *destructiveProjectEnumData for SensoryFeedback.FeedbackType(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *destructiveInjectEnumTag for SystemScrollLayoutState.ContentOffsetMode(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
    *result = *result & 0xFFFFFFFFFFFFFFBLL | (a2 << 62);
  else
    *result = (2 * (a2 - 2)) & 0x1FFFFFFF8 | ((int)a2 - 2) & 3 | 0x8000000000000000;
  return result;
}

uint64_t assignWithCopy for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = (v9 | 7) + 2;
  v14 = ((unint64_t)v11 + v13) & ~(v9 | 7);
  v15 = ((unint64_t)v12 + v13) & ~(v9 | 7);
  if (v14 != v15)
  {
    v16 = v7;
    v17 = *(_QWORD *)(v8 + 64);
    v18 = ((v9 + 75) & ~v9) + v17;
    if ((unint64_t)(v18 + 1) > 0x30)
      v19 = v18 + 1;
    else
      v19 = 48;
    v20 = *(unsigned __int8 *)(v14 + v19);
    if (v20 >= 3)
    {
      if (v19 <= 3)
        v21 = v19;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    v22 = ~v9;
    if (v20 == 2)
    {
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v14, *(_QWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 8), *(_BYTE *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x10));

    }
    else if (v20 == 1)
    {
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v14, *(_QWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 8), *(_QWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x10), *(_QWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x18), *(_WORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x20), *(_BYTE *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x22));
      v23 = (v14 + 42) & 0xFFFFFFFFFFFFFFF8;
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_QWORD *)(v23 + 16), *(_QWORD *)(v23 + 24), *(_WORD *)(v23 + 32), *(_BYTE *)(v23 + 34));
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((v9 + v23 + 35) & v22, v16);
      goto LABEL_15;
    }
    swift_release();
LABEL_15:
    v24 = *(unsigned __int8 *)(v15 + v19);
    if (v24 >= 3)
    {
      if (v19 <= 3)
        v25 = v19;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 2)
    {
      v40 = *(_QWORD *)v15;
      v41 = *(_QWORD *)(v15 + 8);
      v42 = *(_BYTE *)(v15 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v15, v41, v42);
      *(_QWORD *)v14 = v40;
      *(_QWORD *)(v14 + 8) = v41;
      *(_BYTE *)(v14 + 16) = v42;
      v43 = *(void **)(v15 + 24);
      *(_QWORD *)(v14 + 24) = v43;
      v44 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 40) = v44;
      *(_BYTE *)(v14 + v19) = 2;
      v45 = v43;
    }
    else
    {
      if (v24 == 1)
      {
        v50 = v9;
        v51 = v8;
        v26 = *(_QWORD *)v15;
        v27 = *(_QWORD *)(v15 + 8);
        v52 = v17;
        v53 = a1;
        v28 = *(_QWORD *)(v15 + 16);
        v29 = *(_QWORD *)(v15 + 24);
        v30 = *(_BYTE *)(v15 + 34);
        v49 = v22;
        v31 = *(_WORD *)(v15 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v15, v27, v28, v29, v31, v30);
        *(_QWORD *)v14 = v26;
        *(_QWORD *)(v14 + 8) = v27;
        *(_QWORD *)(v14 + 16) = v28;
        *(_QWORD *)(v14 + 24) = v29;
        *(_WORD *)(v14 + 32) = v31;
        *(_BYTE *)(v14 + 34) = v30;
        v48 = v16;
        v32 = (v14 + 42) & 0xFFFFFFFFFFFFFFF8;
        v33 = (v15 + 42) & 0xFFFFFFFFFFFFFFF8;
        v34 = *(_QWORD *)v33;
        v35 = *(_QWORD *)(v33 + 8);
        v36 = *(_QWORD *)(v33 + 16);
        v37 = *(_QWORD *)(v33 + 24);
        v38 = *(_BYTE *)(v33 + 34);
        v39 = *(_WORD *)(v33 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v33, v35, v36, v37, v39, v38);
        *(_QWORD *)v32 = v34;
        *(_QWORD *)(v32 + 8) = v35;
        *(_QWORD *)(v32 + 16) = v36;
        *(_QWORD *)(v32 + 24) = v37;
        a1 = v53;
        *(_WORD *)(v32 + 32) = v39;
        *(_BYTE *)(v32 + 34) = v38;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v51 + 16))((v50 + 35 + v32) & v49, (v50 + 35 + v33) & v49, v48);
        *(_BYTE *)(v52 + ((v50 + 35 + v32) & v49)) = *(_BYTE *)(v52 + ((v50 + 35 + v33) & v49));
        *(_BYTE *)(v14 + v19) = 1;
        return a1;
      }
      v46 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v46;
      *(_BYTE *)(v14 + v19) = 0;
    }
    swift_retain();
  }
  return a1;
}

uint64_t BorderlessButtonStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t destructiveInjectEnumTag for PlatterButtonType(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

uint64_t getEnumTag for PlatterButtonType(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlatterButtonType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentMarginProxy(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 248) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 249) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ContentMarginProxy(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 249))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))FlipForRTLEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized _TraitWritingTableRowModifier.AddTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized _TraitWritingTableRowModifier.AddTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized _TraitWritingTableRowModifier.AddTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized _TraitWritingTableRowModifier.AddTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))MergeTraits.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))RowTransformTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))_SymbolEffectsModifier.EffectsEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))_IndefiniteSymbolEffectModifier.EffectEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))_ConditionalSymbolEffectModifier.EffectEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))specialized WithCommandFlag.SetFlag.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))WindowResizabilityModifier.UpdateSceneList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))ApplyActivationConditions.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))WindowDefaultsPropertyModifier.UpdateSceneList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))PersistentSystemOverlaysSceneModifier.UpdateSceneList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))ScrollViewContentFrameSize.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))TableRowForegroundStyleModifier.ChildEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))ScaledSize.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))_GridCellRangeModifier.CellRangeTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))_GridCellSizeModifier.MergedCellTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))_GridAnchorModifier.AnchoredCellTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))_GridAlignmentModifier.AlignedCellTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))_GridUnsizedAxesModifier.UnsizedAxesCellTrait.value.getter);
}

__n128 __swift_memcpy34_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for AGSubgraphRef(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for AGSubgraphRef);
}

uint64_t type metadata accessor for KeyPress.Handler(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for KeyPress.Handler);
}

__n128 GridItem.init(_:spacing:alignment:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, __n128 *a7@<X8>)
{
  unsigned __int8 v7;
  __n128 result;

  v7 = a1[1].n128_u8[0];
  result = *a1;
  *a7 = *a1;
  a7[1].n128_u8[0] = v7;
  a7[1].n128_u64[1] = a2;
  a7[2].n128_u8[0] = a3 & 1;
  a7[2].n128_u64[1] = a4;
  a7[3].n128_u64[0] = a5;
  a7[3].n128_u8[8] = a6 & 1;
  return result;
}

uint64_t destructiveInjectEnumTag for TouchBarItemPresence(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GridItem.Size()
{
  return &type metadata for GridItem.Size;
}

void storeEnumTagSinglePayload for Label(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for MenuButton()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for NavigationHostingControllerCache_UIKit()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for OnPlatformContainerSelectionModifier()
{
  return &type metadata for OnPlatformContainerSelectionModifier;
}

id UICollectionViewListCoordinator.createCollectionView(_:)(uint64_t a1)
{
  id v2;
  uint64_t ObjCClassFromMetadata;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  void *v20;

  swift_getObjectType();
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UpdateCoalescingCollectionView(0)), sel_initWithFrame_collectionViewLayout_, a1, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, sel_setAlwaysBounceVertical_, 1);
  swift_getAssociatedTypeWitness();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v4 = (void *)*MEMORY[0x1E0DC48A8];
  v5 = static UITableViewListCoordinator.headerReuseIdentifier.getter();
  v7 = v6;
  v8 = v4;
  v9 = (void *)MEMORY[0x18D75CC88](v5, v7);
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, ObjCClassFromMetadata, v8, v9);

  v10 = (void *)*MEMORY[0x1E0DC48A0];
  v11 = static UITableViewListCoordinator.headerReuseIdentifier.getter();
  v13 = v12;
  v14 = v10;
  v15 = (void *)MEMORY[0x18D75CC88](v11, v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, ObjCClassFromMetadata, v14, v15);

  type metadata accessor for TableGlobalHeader();
  v16 = swift_getObjCClassFromMetadata();
  v17 = static UICollectionViewListCoordinatorBase.globalHeaderKind.getter();
  v18 = (void *)MEMORY[0x18D75CC88](v17);
  swift_bridgeObjectRelease();
  v19 = static UICollectionViewListCoordinatorBase.globalHeaderKind.getter();
  v20 = (void *)MEMORY[0x18D75CC88](v19);
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, v16, v18, v20);

  return v2;
}

uint64_t static UITableViewListCoordinator.headerReuseIdentifier.getter()
{
  return 0x646165487473694CLL;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityScrollableModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for ButtonFocusInteractionModifier()
{
  return &type metadata for ButtonFocusInteractionModifier;
}

void *type metadata accessor for ButtonSpringLoadedInteraction()
{
  return &unk_1E1AF92E0;
}

ValueMetadata *type metadata accessor for CollectionViewListUtilities.CoordinatorKind()
{
  return &type metadata for CollectionViewListUtilities.CoordinatorKind;
}

ValueMetadata *type metadata accessor for AccessibilitySectionContext()
{
  return &type metadata for AccessibilitySectionContext;
}

ValueMetadata *type metadata accessor for PresentSharingPickerAction()
{
  return &type metadata for PresentSharingPickerAction;
}

uint64_t associated type witness table accessor for PlatformListViewBase.BaseContent : ListCellContent in ListCollectionViewCellBase<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 176);
}

uint64_t instantiation function for generic protocol witness table for ListCollectionViewCellBase<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListCollectionViewCellBase<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeWithCopy for IncrementalChildPlacements(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v3 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v3;
  v4 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v5 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v5;
  v6 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v6;
  v7 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v7;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  v8 = *(_OWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for ScrollIndicatorVisibility()
{
  return &type metadata for ScrollIndicatorVisibility;
}

uint64_t destroy for SelectionEditMenuModifier.Child(id *a1)
{

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LayoutScrollableTransform(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in SidebarListBody<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t type metadata accessor for _AnchorTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnchorTransformModifier);
}

ValueMetadata *type metadata accessor for SidebarListStyleContext()
{
  return &type metadata for SidebarListStyleContext;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ShadowSectionCollection<A>()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

{
  return associated type witness table accessor for Collection.Index : Comparable in ShadowSectionCollection<A>();
}

uint64_t type metadata completion function for ResolvedButtonStyleBody()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in WrappedButtonStyleBody<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for WrappedButtonStyleBody<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyleBody<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for UIKitInspectorBridgeV5()
{
  return swift_initClassMetadata2();
}

uint64_t UIHostingConfiguration.updated(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t outlined destroy of ListScrollViewProvider(uint64_t a1)
{
  destroy for UIKitScenePresentationModeLocation();
  return a1;
}

uint64_t type metadata accessor for AnyFallbackDelegateBox()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for _RowVisitationContext()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v2 = swift_getAssociatedTypeWitness();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v10 = &v9;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v4 = swift_getAssociatedTypeWitness();
      AssociatedTypeWitness = v4;
      if (v5 <= 0x3F)
      {
        v11 = *(_QWORD *)(v4 - 8) + 64;
        v12 = MEMORY[0x1E0DE9D18] + 64;
        swift_getAssociatedTypeWitness();
        v6 = type metadata accessor for Optional();
        AssociatedTypeWitness = v6;
        if (v7 <= 0x3F)
        {
          v13 = *(_QWORD *)(v6 - 8) + 64;
          v14 = &unk_187C07658;
          v15 = &unk_187C07670;
          v16 = &unk_187C07670;
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior()
{
  return &type metadata for SpringLoadingBehavior;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  return &type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
}

ValueMetadata *type metadata accessor for _HoverRegionModifier()
{
  return &type metadata for _HoverRegionModifier;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in SectionStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ScrollPagingBehavior()
{
  return &type metadata for ScrollPagingBehavior;
}

ValueMetadata *type metadata accessor for FocusGroupIdentifier()
{
  return &type metadata for FocusGroupIdentifier;
}

void *type metadata accessor for ButtonRepeatModifier()
{
  return &unk_1E1AD2198;
}

ValueMetadata *type metadata accessor for ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  return &type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior;
}

uint64_t dispatch thunk of UIHostingController.rootView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

void base witness table accessor for _AttributeBody in PropertiesTransform<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

ValueMetadata *type metadata accessor for PopoverPresentation.Key()
{
  return &type metadata for PopoverPresentation.Key;
}

ValueMetadata *type metadata accessor for EffectiveLabelStyle()
{
  return &type metadata for EffectiveLabelStyle;
}

ValueMetadata *type metadata accessor for BorderedButtonStyle()
{
  return &type metadata for BorderedButtonStyle;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in WrappedButtonStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SceneStorageValues()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ListContentStyling()
{
  return &type metadata for ListContentStyling;
}

ValueMetadata *type metadata accessor for BorderedButtonSpec()
{
  return &type metadata for BorderedButtonSpec;
}

ValueMetadata *type metadata accessor for AnyButtonStyleType()
{
  return &type metadata for AnyButtonStyleType;
}

ValueMetadata *type metadata accessor for NavigationRequest()
{
  return &type metadata for NavigationRequest;
}

ValueMetadata *type metadata accessor for ListStackBehavior()
{
  return &type metadata for ListStackBehavior;
}

uint64_t type metadata accessor for AnyAlwaysOnBridge()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ScrollViewReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollViewReader);
}

ValueMetadata *type metadata accessor for PlatformItemList()
{
  return &type metadata for PlatformItemList;
}

uint64_t getEnumTagSinglePayload for PlatformItemList.Item()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for PagingScrollView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PagingScrollView);
}

ValueMetadata *type metadata accessor for ListStyleContent()
{
  return &type metadata for ListStyleContent;
}

ValueMetadata *type metadata accessor for FocusableOptions()
{
  return &type metadata for FocusableOptions;
}

uint64_t initializeBufferWithCopyOfBuffer for UpdateViewCache(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for SheetPreference.InspectorKey()
{
  return &type metadata for SheetPreference.InspectorKey;
}

ValueMetadata *type metadata accessor for NavigationState()
{
  return &type metadata for NavigationState;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityAutomationType(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;

  v4 = a1;
  v5 = 0;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5760], (uint64_t)&v4, 1, a2, a3);
}

ValueMetadata *type metadata accessor for LazyVGridLayout()
{
  return &type metadata for LazyVGridLayout;
}

ValueMetadata *type metadata accessor for AnySharePreview()
{
  return &type metadata for AnySharePreview;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnchorTransform<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnchorTransform<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

ValueMetadata *type metadata accessor for _ButtonGesture()
{
  return &type metadata for _ButtonGesture;
}

uint64_t associated type witness table accessor for View.Body : View in ButtonBehavior<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for AlwaysOnBridge()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for RefreshAction()
{
  return &type metadata for RefreshAction;
}

uint64_t assignWithCopy for FocusedValues(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

void _CALayerView.init(type:onUpdate:)(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
}

uint64_t type metadata accessor for WindowGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WindowGroup);
}

uint64_t type metadata accessor for SceneBridge()
{
  return objc_opt_self();
}

uint64_t static HoverEffect.automatic.getter@<X0>(_QWORD *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for automatic, &static HoverEffect.automatic, a1);
}

char *AppDelegate.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController] = 0;
  v11.receiver = v0;
  v11.super_class = ObjectType;
  v2 = (char *)objc_msgSendSuper2(&v11, sel_init);
  v3 = v2;
  if (!static AppGraph.delegateBox)
  {
    v9 = v2;
    goto LABEL_6;
  }
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static AppGraph.delegateBox + 80);
  v5 = v2;
  v6 = swift_retain();
  v7 = (void *)v4(v6);
  swift_release();
  if (!v7)
  {
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v8 = swift_dynamicCastObjCProtocolConditional();
  if (!v8)
  {

    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate] = v8;

  swift_unknownObjectRelease();
  static SceneNavigationStrategy_Phone.shared = 1;
  return v3;
}

uint64_t type metadata completion function for ListUpdate()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = *(_QWORD *)(result - 8) + 64;
    v8 = v2;
    v9 = v2;
    swift_getTupleTypeLayout2();
    v10 = &v7;
    result = swift_checkMetadataState();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v11 = &v6;
      swift_getTupleTypeLayout2();
      v12 = &v5;
      swift_getTupleTypeLayout2();
      swift_getTupleTypeLayout2();
      swift_getTupleTypeLayout2();
      v13 = &v4;
      v14 = v2;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for LazyHStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyHStack);
}

uint64_t objectdestroy_23Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SortableTableHeaderButton(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = type metadata accessor for TableColumnCollection.Entry(0);
  v5 = v2 + *(int *)(v4 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));
  v6 = v2 + *(int *)(v4 + 44);
  if (*(_QWORD *)(v6 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(v4 + 44));
    __swift_destroy_boxed_opaque_existential_1(v6 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_23Tm_0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_23Tm_1()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

__n128 __swift_memcpy52_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t outlined init with take of SectionInsetMode(uint64_t a1, uint64_t a2)
{
  __swift_memcpy34_8(a2, a1);
  return a2;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy22_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 14) = *(_QWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = a3;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _CUISubtypeForIdiom(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  double Height;
  void *v4;
  double v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  CGRect v12;
  CGRect v13;

  v1 = 320;
  switch(a1)
  {
    case 0:
      objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "_referenceBounds");
      Height = CGRectGetHeight(v12);

      if (Height <= 667.0)
      {
        if (Height <= 568.0)
        {
          if (Height <= 480.0)
            v1 = 0;
          else
            v1 = 568;
        }
        else
        {
          v1 = 569;
        }
      }
      else
      {
        v1 = 570;
      }
      break;
    case 1:
      objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_pointsPerInch");
      if (v5 == 163.0)
        v1 = 163;
      else
        v1 = 0;

      break;
    case 2:
      objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "_referenceBounds");
      v7 = CGRectGetHeight(v13);
      objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "scale");
      v10 = v7 * v9;

      if (v10 >= 1080.0)
        v1 = 0;
      else
        v1 = 720;
      break;
    case 4:
      return v1;
    case 6:
      v1 = 3648;
      break;
    default:
      v1 = 0;
      break;
  }
  return v1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(_QWORD *a1, void (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  a2(255, a1[1], a1[3]);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = a3;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t _NSThreadStart(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v2 = objc_msgSend(v1, "startAndReturnError:", 0);
  }
  else
  {
    objc_msgSend(v1, "start");
    v2 = 1;
  }

  return v2;
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

__n128 __swift_memcpy29_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

unint64_t type metadata accessor for Any.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Any.Type;
  if (!lazy cache variable for type metadata for Any.Type)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Any.Type);
  }
  return result;
}

uint64_t outlined init with copy of AccessibilityValueStorage?(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  type metadata accessor for AccessibilityValueStorage?(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for UIView?();
    a3(255);
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 40;
  v3 = a2 + 40;
  outlined init with copy of AnyHashable(a1, a2);
  return outlined init with copy of Any(v2, v3);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for (key: UUID, value: PlatformItemList)();
  v5 = *(int *)(v4 + 48);
  type metadata accessor for (UUID, PlatformItemList)();
  v7 = *(int *)(v6 + 48);
  v8 = *(_QWORD *)(a1 + v5);
  v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, a1, v9);
  *(_QWORD *)(a2 + v7) = v8;
  return swift_bridgeObjectRetain();
}

{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v13;
  __int16 v14;

  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_BYTE *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 104);
  v13 = *(_BYTE *)(a1 + 112);
  v14 = *(_WORD *)(a1 + 97);
  outlined init with copy of ToolbarPlacement.Role(a1, a2);
  *(_BYTE *)(a2 + 40) = v3;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_BYTE *)(a2 + 64) = v6;
  *(_QWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = v8;
  *(_QWORD *)(a2 + 88) = v9;
  *(_BYTE *)(a2 + 96) = v10;
  *(_WORD *)(a2 + 97) = v14;
  *(_QWORD *)(a2 + 104) = v11;
  *(_BYTE *)(a2 + 112) = v13;
  swift_retain();
  swift_retain();
  return swift_retain();
}

{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  outlined init with copy of AnyHashable(a1, a2);
  *(_QWORD *)(a2 + 40) = v3;
  return swift_retain();
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  char v14;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];

  v2 = *(_OWORD *)(a1 + 128);
  v3 = *(_OWORD *)(a1 + 160);
  v21 = *(_OWORD *)(a1 + 144);
  v22[0] = v3;
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a1 + 172);
  v4 = *(_OWORD *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 80);
  v6 = v17;
  v18 = v5;
  v7 = *(_OWORD *)(a1 + 96);
  v8 = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 112);
  v9 = v19;
  v20 = v8;
  v10 = *(_OWORD *)(a1 + 64);
  v16[0] = *(_OWORD *)(a1 + 48);
  v11 = v16[0];
  v16[1] = v10;
  v12 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = v21;
  *(_OWORD *)(a2 + 160) = v12;
  *(_OWORD *)(a2 + 172) = *(_OWORD *)(a1 + 172);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v2;
  v13 = *(_BYTE *)(a1 + 16);
  v14 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = v13;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_BYTE *)(a2 + 40) = v14;
  return outlined retain of NavigationRequest((uint64_t)v16);
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE1D0], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE1B8], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(_UIImageNamedColorStyle, UIColor)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(_UIImageNamedColorStyle, UIColor)>)
  {
    type metadata accessor for (_UIImageNamedColorStyle, UIColor)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(_UIImageNamedColorStyle, UIColor)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement.Role>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(ViewIdentity, (_:))>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(255, a3, a4);
    v5 = type metadata accessor for _ContiguousArrayStorage();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t lazy protocol witness table accessor for type _ClosureBasedIterator<UIView> and conformance _ClosureBasedIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for WeakBox<UIView>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      outlined init with copy of AnyHashable(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  _OWORD *result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CodingUserInfoKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = v13[3];
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v4;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = (_OWORD *)(v21[7] + 32 * v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        return outlined init with take of Any(a1, v22);
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v25 & 1))
    {
      v15 = v24;
      v21 = *v4;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v19;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of NavigationState.StackContent.PositionedView(a1, v16[7] + 72 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of NavigationState.StackContent.PositionedView(a1, v16[7] + 72 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v19;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of OrnamentPresentation(a1, v16[7] + 120 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of OrnamentPresentation(a1, v16[7] + 120 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v19;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  _OWORD v21[8];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v19;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, v21, a1, v16);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _BYTE v18[16];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v16[7] + v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    type metadata accessor for HashableWeakBox<UIViewController>();
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v16);
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void type metadata accessor for PartialRangeFrom<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PartialRangeFrom<Int>)
  {
    v0 = type metadata accessor for PartialRangeFrom();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>);
  }
}

uint64_t outlined init with take of IndexingIterator<AttributedString.Runs>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for IndexingIterator<AttributedString.Runs>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for IndexingIterator<AttributedString.Runs>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
}

void type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _SetStorage<HashableWeakBox<Swift.AnyObject>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
    lazy protocol witness table accessor for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>();
    v0 = type metadata accessor for _SetStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<HashableWeakBox<Swift.AnyObject>>);
  }
}

void type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for (AnyHashable, Data)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyHashable, Data))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable, Data));
  }
}

uint64_t outlined assign with take of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 40))(a2, a1);
  return a2;
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  _BYTE v21[16];
  uint64_t v22;

  v20 = (unint64_t *)result;
  v4 = 0;
  v5 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = MEMORY[0x1E0DEE9B0] + 8;
  v11 = MEMORY[0x1E0CE2D98];
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v4 << 6);
      goto LABEL_5;
    }
    v15 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v9)
      goto LABEL_24;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    ++v4;
    if (!v16)
    {
      v4 = v15 + 1;
      if (v15 + 1 >= v9)
        goto LABEL_24;
      v16 = *(_QWORD *)(v5 + 8 * v4);
      if (!v16)
      {
        v4 = v15 + 2;
        if (v15 + 2 >= v9)
          goto LABEL_24;
        v16 = *(_QWORD *)(v5 + 8 * v4);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v8 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_5:
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(_QWORD *)(a3 + 48) + 16 * v13, (uint64_t)v21);
    v14 = MEMORY[0x18D760234](v21);
    swift_unknownObjectRelease();
    result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v21, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v10, (uint64_t (*)(_QWORD, uint64_t))v11);
    if (v14)
    {
      *(unint64_t *)((char *)v20 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v20, a2, v22, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v9)
    goto LABEL_24;
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
  {
    v4 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v4 >= v9)
      goto LABEL_24;
    v16 = *(_QWORD *)(v5 + 8 * v4);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, v3);
    swift_release();
    if (v2)
      swift_willThrow();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v8, v5, v3);
    swift_release();
    MEMORY[0x18D760108](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  char v29[8];
  Swift::UInt v30;

  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>();
  result = static _SetStorage.allocate(capacity:)();
  v6 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  v13 = MEMORY[0x1E0DEE9B0] + 8;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v11 << 6);
    }
    else
    {
      v16 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v16 >= a2)
      {
LABEL_37:
        swift_release();
        return v6;
      }
      v17 = v28[v16];
      ++v11;
      if (!v17)
      {
        v11 = v16 + 1;
        if (v16 + 1 >= a2)
          goto LABEL_37;
        v17 = v28[v11];
        if (!v17)
        {
          v11 = v16 + 2;
          if (v16 + 2 >= a2)
            goto LABEL_37;
          v17 = v28[v11];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= a2)
              goto LABEL_37;
            v17 = v28[v18];
            if (!v17)
            {
              while (1)
              {
                v11 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  goto LABEL_37;
                v17 = v28[v11];
                ++v18;
                if (v17)
                  goto LABEL_24;
              }
            }
            v11 = v18;
          }
        }
      }
LABEL_24:
      v10 = (v17 - 1) & v17;
      v15 = __clz(__rbit64(v17)) + (v11 << 6);
    }
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(_QWORD *)(a4 + 48) + 16 * v15, (uint64_t)v29);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v30);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v6 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v29, *(_QWORD *)(v6 + 48) + 16 * v22, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v13, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
    ++*(_QWORD *)(v6 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  type metadata accessor for _SetStorage<UIOpenURLContext>();
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v9 + 40);
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *(_BYTE *)(v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v23) = v19;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _BYTE v36[48];

  if (a3)
  {
    v5 = a3;
    if (*(_QWORD *)(a4 + 16) != a3)
    {
      type metadata accessor for _SetStorage<ToolbarPlacement.Role>();
      v9 = static _SetStorage.allocate(capacity:)();
      v6 = v9;
      v30 = a1;
      if (a2 < 1)
        v10 = 0;
      else
        v10 = *a1;
      v11 = 0;
      v12 = v9 + 56;
      while (1)
      {
        if (v10)
        {
          v13 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          v14 = v13 | (v11 << 6);
        }
        else
        {
          v15 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_50;
          if (v15 >= a2)
            goto LABEL_47;
          v16 = v30[v15];
          ++v11;
          if (!v16)
          {
            v11 = v15 + 1;
            if (v15 + 1 >= a2)
              goto LABEL_47;
            v16 = v30[v11];
            if (!v16)
            {
              v11 = v15 + 2;
              if (v15 + 2 >= a2)
                goto LABEL_47;
              v16 = v30[v11];
              if (!v16)
              {
                v17 = v15 + 3;
                if (v17 >= a2)
                  goto LABEL_47;
                v16 = v30[v17];
                if (!v16)
                {
                  while (1)
                  {
                    v11 = v17 + 1;
                    if (__OFADD__(v17, 1))
                      goto LABEL_51;
                    if (v11 >= a2)
                      goto LABEL_47;
                    v16 = v30[v11];
                    ++v17;
                    if (v16)
                      goto LABEL_24;
                  }
                }
                v11 = v17;
              }
            }
          }
LABEL_24:
          v10 = (v16 - 1) & v16;
          v14 = __clz(__rbit64(v16)) + (v11 << 6);
        }
        outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(a4 + 48) + 40 * v14, (uint64_t)v36);
        Hasher.init(_seed:)();
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v36, (uint64_t)&v33);
        switch(*((_QWORD *)&v34 + 1))
        {
          case 0:
            v18 = 0;
            goto LABEL_34;
          case 1:
            v18 = 1;
            goto LABEL_34;
          case 2:
            v18 = 2;
            goto LABEL_34;
          case 3:
            v18 = 3;
            goto LABEL_34;
          case 4:
            v18 = 4;
            goto LABEL_34;
          case 5:
            v18 = 5;
            goto LABEL_34;
          case 6:
            v18 = 7;
LABEL_34:
            Hasher._combine(_:)(v18);
            break;
          default:
            v31[0] = v33;
            v31[1] = v34;
            v32 = v35;
            Hasher._combine(_:)(6uLL);
            AnyHashable.hash(into:)();
            outlined destroy of AnyHashable((uint64_t)v31);
            break;
        }
        v19 = Hasher._finalize()();
        v20 = -1 << *(_BYTE *)(v6 + 32);
        v21 = v19 & ~v20;
        v22 = v21 >> 6;
        if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
        {
          v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_45;
        }
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
            JUMPOUT(0x18764F570);
          }
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v22);
        }
        while (v27 == -1);
        v23 = __clz(__rbit64(~v27)) + (v22 << 6);
LABEL_45:
        *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
        outlined init with take of ToolbarPlacement.Role((uint64_t)v36, *(_QWORD *)(v6 + 48) + 40 * v23);
        ++*(_QWORD *)(v6 + 16);
        if (__OFSUB__(v5--, 1))
          goto LABEL_49;
        if (!v5)
        {
LABEL_47:
          swift_release();
          return v6;
        }
      }
    }
    return a4;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
}

void type metadata accessor for CGVector(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CGVector);
}

uint64_t lazy protocol witness table accessor for type UIColor and conformance UIColor(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = type metadata accessor for NSObject(255, a2);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UIColor();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIColor and conformance UIColor()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type UIColor and conformance UIColor;
  if (!lazy protocol witness table cache variable for type UIColor and conformance UIColor)
  {
    v1 = type metadata accessor for UIColor();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIColor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor);
  }
  return result;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSNotificationName(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSNotificationName(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

void type metadata accessor for (_UIImageNamedColorStyle, UIColor)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_UIImageNamedColorStyle, UIColor))
  {
    type metadata accessor for _UIImageNamedColorStyle(255);
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_UIImageNamedColorStyle, UIColor));
  }
}

uint64_t base witness table accessor for Equatable in _UIImageNamedColorStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, (uint64_t (*)(uint64_t))type metadata accessor for _UIImageNamedColorStyle, (uint64_t)&protocol conformance descriptor for _UIImageNamedColorStyle);
}

void type metadata accessor for _UIImageNamedColorStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for _UIImageNamedColorStyle);
}

unint64_t lazy protocol witness table accessor for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle;
  if (!lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle)
  {
    type metadata accessor for _UIImageNamedColorStyle(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIImageNamedColorStyle, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle);
  }
  return result;
}

Swift::Bool __swiftcall UINavigationController.managesWindowToolbar()()
{
  UIViewController *v0;
  UIView *v1;
  UIView *v2;
  UIWindow *v3;
  UIView *v4;
  UIView *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  double v20;
  double v21;
  UISplitViewController *v22;
  UISplitViewController *v23;
  UIView *v24;
  UIView *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  UIWindow *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  UISplitViewControllerColumn_optional v49;
  CGRect v50;

  v1 = -[UIViewController view](v0, sel_view);
  if (!v1)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v2 = v1;
  v3 = -[UIView window](v1, sel_window);

  if (!v3)
    goto LABEL_18;
  v1 = -[UIViewController view](v0, sel_view);
  if (!v1)
    goto LABEL_20;
  v4 = v1;
  v1 = -[UIViewController view](v0, sel_view);
  if (!v1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v5 = v1;
  -[UIView bounds](v1, sel_bounds);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  -[UIView convertRect:toCoordinateSpace:](v4, sel_convertRect_toCoordinateSpace_, v3, v7, v9, v11, v13);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v22 = -[UIViewController splitViewController](v0, sel_splitViewController);
  if (!v22)
    goto LABEL_12;
  v23 = v22;
  v49 = UISplitViewController.column(forViewController:)(v0);
  if (!v49.is_nil && v49.value <= (unint64_t)UISplitViewControllerColumnSecondary)
  {
    v1 = (UIView *)-[UISplitViewController view](v23, sel_view);
    if (v1)
    {
      v24 = v1;
      v1 = (UIView *)-[UISplitViewController view](v23, sel_view);
      if (v1)
      {
        v25 = v1;
        -[UIView bounds](v1, sel_bounds);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        v33 = v32;

        v34 = v3;
        -[UIView convertRect:toCoordinateSpace:](v24, sel_convertRect_toCoordinateSpace_, v34, v27, v29, v31, v33);
        v15 = v35;
        v17 = v36;
        v19 = v37;
        v21 = v38;

        goto LABEL_11;
      }
LABEL_23:
      __break(1u);
      return (char)v1;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_11:

LABEL_12:
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    -[UIWindow bounds](v3, sel_bounds);
    v45 = v44;
    v47 = v46;

    if (vabdd_f64(v45, v19) < 0.1)
    {
      LOBYTE(v1) = vabdd_f64(v47, v21) < 0.1;
      return (char)v1;
    }
LABEL_18:
    LOBYTE(v1) = 0;
    return (char)v1;
  }
  -[UIWindow bounds](v3, sel_bounds);
  v40 = v39;
  v50.origin.x = v15;
  v50.origin.y = v17;
  v50.size.width = v19;
  v50.size.height = v21;
  v41 = vabdd_f64(v40, CGRectGetHeight(v50)) < 0.1;
  -[UIWindow bounds](v3, sel_bounds);
  v43 = v42;

  LOBYTE(v1) = vabdd_f64(v15, v43) < 0.1 && v41;
  return (char)v1;
}

void type metadata accessor for (RBDisplayListRenderKey, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (RBDisplayListRenderKey, Any))
  {
    type metadata accessor for RBDisplayListRenderKey(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (RBDisplayListRenderKey, Any));
  }
}

uint64_t base witness table accessor for Equatable in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NSAttributedStringKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

uint64_t one-time initialization function for carPlay()
{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD00000000000001FLL, 0x8000000187BD8290);
  static UISceneSessionRole.carPlay = result;
  return result;
}

uint64_t one-time initialization function for clarityUI()
{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD00000000000002DLL, 0x8000000187BD81E0);
  static UISceneSessionRole.clarityUI = result;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for CGAffineTransform);
}

void type metadata accessor for BLSUpdateFidelity(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for BLSUpdateFidelity);
}

unint64_t type metadata accessor for UIViewController()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIViewController;
  if (!lazy cache variable for type metadata for UIViewController)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  }
  return result;
}

void type metadata accessor for AXAutomationType(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for AXAutomationType);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIMutableTraits) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

void type metadata accessor for AGWeakAttribute(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for AGWeakAttribute);
}

void type metadata accessor for AGWeakAttribute.__Unnamed_struct__details(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for AGWeakAttribute.__Unnamed_struct__details);
}

void type metadata accessor for NSRunLoopMode(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for NSRunLoopMode);
}

void type metadata accessor for UIScrollView?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIScrollView?)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIScrollView);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIScrollView?);
  }
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIEdgeInsets);
}

void type metadata accessor for Range<AttributedString.Index>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for Range<AttributedString.Index>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  return specialized Collection.first.getter(a1, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
}

{
  return specialized Collection.first.getter(a1, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *i;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  char v13;
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return 0;
  v6 = 0;
  for (i = (char *)(a3 + 48); ; i += 72)
  {
    v8 = *((_QWORD *)i - 1);
    v9 = *i;
    v10 = *((_QWORD *)i + 1);
    v11 = i[16];
    v15[0] = *((_QWORD *)i - 2);
    v15[1] = v8;
    v16 = v9;
    v17 = v10;
    v18 = v11;
    v12 = *(_OWORD *)(i + 40);
    v19 = *(_OWORD *)(i + 24);
    v20 = v12;
    swift_retain();
    v13 = a1(v15);
    swift_release();
    if (v3 || (v13 & 1) != 0)
      break;
    if (v4 == ++v6)
      return 0;
  }
  return v6;
}

{
  uint64_t v3;
  char *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[4];
  char v17;
  uint64_t v18;

  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return 0;
  v3 = 0;
  for (i = (char *)(a3 + 64); ; i += 40)
  {
    v5 = *((_QWORD *)i - 4);
    v6 = *((_QWORD *)i - 3);
    v7 = *((_QWORD *)i - 2);
    v8 = *((_QWORD *)i - 1);
    v9 = *i;
    v15 = v3;
    v16[0] = v5;
    v16[1] = v6;
    v16[2] = v7;
    v16[3] = v8;
    v17 = v9;
    outlined copy of TableColumnCustomizationID.Base(v5, v6, v7, v8, v9);
    v10 = v18;
    v11 = a1(v16);
    result = outlined consume of TableColumnCustomizationID.Base(v5, v6, v7, v8, v9);
    v18 = v10;
    if (v10)
      break;
    if ((v11 & 1) != 0)
      return v15;
    v3 = v15 + 1;
    if (v13 == v15 + 1)
      return 0;
  }
  return result;
}

uint64_t outlined consume of (preferring: Set<String>, allowing: Set<String>)?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for ([Int], [Int])()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ([Int], [Int]))
  {
    type metadata accessor for [Int](255, &lazy cache variable for type metadata for [Int], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for ([Int], [Int]));
  }
}

void type metadata accessor for [Int](uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEB418]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ScrollableCollection](uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for [ScrollableCollection], (uint64_t (*)(uint64_t))type metadata accessor for ScrollableCollection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void type metadata accessor for [Scrollable](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void Array<A>.sortForDisplay()()
{
  char **v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  double v18;
  double v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v1 = *v0;
  v2 = *((_QWORD *)*v0 + 2);
  if (v2 > 0x20)
  {
    Array<A>.sortForDisplayLarge()();
    goto LABEL_4;
  }
  if (v2 < 2)
  {
LABEL_4:
    v3 = *((_QWORD *)*v0 + 2);
    if (v3)
    {
      v4 = 0;
      v5 = (uint64_t *)(*v0 + 32);
      do
      {
        v6 = *v5;
        v5 += 9;
        *(_QWORD *)(v6 + 200) = v4;
        *(_BYTE *)(v6 + 208) = 0;
        ++v4;
      }
      while (v3 != v4);
    }
    return;
  }
  v7 = 0;
  v8 = 1;
  v9 = 88;
  v34 = v0;
LABEL_11:
  if (v8 < v2)
  {
    v32 = v8;
    v11 = &v1[72 * v8];
    v31 = *((_QWORD *)v11 + 5);
    v30 = v11[48];
    v29 = *((_QWORD *)v11 + 7);
    v28 = v11[64];
    v26 = *(_OWORD *)(v11 + 88);
    v27 = *(_OWORD *)(v11 + 72);
    v35 = *((_QWORD *)v11 + 4);
    swift_retain();
    v12 = 0;
    v33 = v9;
    while (1)
    {
      if ((unint64_t)(v7 + v12) >= *((_QWORD *)v1 + 2))
      {
        __break(1u);
LABEL_45:
        __break(1u);
        break;
      }
      v13 = *(_QWORD *)&v1[v9 - 56];
      v14 = *(_QWORD *)&v1[v9 - 48];
      v15 = v1[v9 - 40];
      v16 = *(_QWORD *)&v1[v9 - 32];
      v17 = v1[v9 - 24];
      v18 = *(double *)(v35 + 168);
      v19 = *(double *)(v13 + 168);
      if (v18 != v19)
      {
        if (v18 >= v19)
          goto LABEL_38;
        goto LABEL_33;
      }
      if ((*(_BYTE *)(v35 + 165) & 1) != 0)
      {
        if ((*(_BYTE *)(v13 + 165) & 1) == 0 && (*(_BYTE *)(v13 + 166) & 1) == 0)
          goto LABEL_38;
      }
      else
      {
        v20 = *(unsigned __int8 *)(v35 + 166);
        if ((*(_BYTE *)(v13 + 165) & 1) != 0)
        {
          if ((v20 & 1) == 0)
            goto LABEL_33;
        }
        else if (v20 != *(unsigned __int8 *)(v13 + 166))
        {
          if ((v20 & 1) != 0)
            goto LABEL_38;
          goto LABEL_33;
        }
      }
      v21 = *(_DWORD *)(v35 + 212);
      v22 = *(_DWORD *)(v13 + 212);
      if (v21 == v22)
      {
        if ((*(_BYTE *)(v35 + 208) & 1) != 0)
          goto LABEL_48;
        if ((*(_BYTE *)(v13 + 208) & 1) != 0)
          goto LABEL_49;
        if (*(_QWORD *)(v35 + 200) >= *(_QWORD *)(v13 + 200))
        {
LABEL_38:
          if (!v12)
          {
            swift_release();
            v10 = v33;
            v0 = v34;
            goto LABEL_10;
          }
          v24 = v7 + v12 + 1;
          v10 = v33;
          v0 = v34;
LABEL_40:
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
          if (v24 >= *((_QWORD *)v1 + 2))
            goto LABEL_47;
          v25 = &v1[72 * v24];
          *((_QWORD *)v25 + 4) = v35;
          *((_QWORD *)v25 + 5) = v31;
          v25[48] = v30;
          *((_QWORD *)v25 + 7) = v29;
          v25[64] = v28;
          *(_OWORD *)(v25 + 72) = v27;
          *(_OWORD *)(v25 + 88) = v26;
          swift_release();
          swift_release();
          *v0 = v1;
LABEL_10:
          v8 = v32 + 1;
          v2 = *((_QWORD *)v1 + 2);
          ++v7;
          v9 = v10 + 72;
          if (v32 + 1 == v2)
            goto LABEL_4;
          goto LABEL_11;
        }
      }
      else if (v21 >= v22)
      {
        goto LABEL_38;
      }
LABEL_33:
      v36 = *(_OWORD *)&v1[v9];
      v37 = *(_OWORD *)&v1[v9 - 16];
      swift_retain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
      if ((unint64_t)(v7 + v12 + 1) >= *((_QWORD *)v1 + 2))
        goto LABEL_45;
      v23 = &v1[v9];
      *((_QWORD *)v23 + 2) = v13;
      *((_QWORD *)v23 + 3) = v14;
      v23[32] = v15;
      *((_QWORD *)v23 + 5) = v16;
      v23[48] = v17;
      *(_OWORD *)(v23 + 56) = v37;
      *(_OWORD *)(v23 + 72) = v36;
      swift_release();
      swift_release();
      v0 = v34;
      *v34 = v1;
      --v12;
      v9 -= 72;
      if (v7 + v12 == -1)
      {
        v24 = 0;
        v10 = v33;
        goto LABEL_40;
      }
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  char v14;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v5 = (id)MEMORY[0x18D75E3BC](0, a2);
LABEL_5:
      v6 = v5;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1)
        goto LABEL_18;
      if (v4)
        break;
      v4 = 5;
      while (1)
      {
        v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        v13 = *(id *)(a2 + 8 * v4);
        v14 = static NSObject.== infix(_:_:)();

        if ((v14 & 1) != 0)
          goto LABEL_6;
        ++v4;
        if (v12 == v3)
          goto LABEL_18;
      }
      __break(1u);
    }
    v9 = 1;
    while (1)
    {
      MEMORY[0x18D75E3BC](v9, a2);
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if ((v11 & 1) != 0)
        goto LABEL_6;
      ++v9;
      if (v10 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  char v14;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v5 = (id)MEMORY[0x18D75E3BC](0, a2);
LABEL_5:
      v6 = v5;
      type metadata accessor for AccessibilityNode();
      v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1)
        goto LABEL_18;
      if (v4)
        break;
      v4 = 5;
      while (1)
      {
        v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        v13 = *(id *)(a2 + 8 * v4);
        v14 = static NSObject.== infix(_:_:)();

        if ((v14 & 1) != 0)
          goto LABEL_6;
        ++v4;
        if (v12 == v3)
          goto LABEL_18;
      }
      __break(1u);
    }
    v9 = 1;
    while (1)
    {
      MEMORY[0x18D75E3BC](v9, a2);
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if ((v11 & 1) != 0)
        goto LABEL_6;
      ++v9;
      if (v10 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence<>.min()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = result + 64;
  v3 = *(_BYTE *)(result + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(result + 64);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v10 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    LODWORD(v7) = v3 & 0x3F;
    if (v7 <= 6)
      goto LABEL_48;
    v10 = (unint64_t)(v4 + 63) >> 6;
    v19 = *(_QWORD *)(result + 72);
    if (v19)
    {
      v7 = 1;
    }
    else
    {
      if (v7 < 8)
        goto LABEL_48;
      v19 = *(_QWORD *)(result + 80);
      if (v19)
      {
        v7 = 2;
      }
      else
      {
        v19 = *(_QWORD *)(result + 88);
        if (v19)
        {
          v7 = 3;
        }
        else
        {
LABEL_36:
          if (v7 < 9)
            goto LABEL_48;
          v19 = *(_QWORD *)(result + 96);
          if (v19)
          {
            v7 = 4;
          }
          else
          {
            v19 = *(_QWORD *)(result + 104);
            if (!v19)
              goto LABEL_42;
            v7 = 5;
          }
        }
      }
    }
LABEL_29:
    v9 = (v19 - 1) & v19;
    v8 = __clz(__rbit64(v19)) + (v7 << 6);
  }
  v11 = *(_QWORD *)(result + 56);
  v12 = *(_BYTE *)(v11 + v8);
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v7 << 6);
LABEL_7:
    v15 = *(unsigned __int8 *)(v11 + v14);
    if (v15 < v12)
      v12 = v15;
  }
  v16 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v16 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v16);
  ++v7;
  if (v17)
    goto LABEL_25;
  v7 = v16 + 1;
  if (v16 + 1 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v7);
  if (v17)
    goto LABEL_25;
  v7 = v16 + 2;
  if (v16 + 2 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v7);
  if (v17)
    goto LABEL_25;
  v7 = v16 + 3;
  if (v16 + 3 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v7);
  if (v17)
  {
LABEL_25:
    v9 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_7;
  }
  v18 = v16 + 4;
  if (v18 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v10)
      goto LABEL_49;
    v17 = *(_QWORD *)(v2 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
  __break(1u);
LABEL_42:
  v20 = 0;
  v21 = 6;
  if (v10 > 6)
    v21 = v10;
  v22 = v21 - 6;
  while (v22 != v20)
  {
    v19 = *(_QWORD *)(result + 112 + 8 * v20++);
    if (v19)
    {
      v7 = v20 + 5;
      goto LABEL_29;
    }
  }
LABEL_48:
  v12 = 3;
LABEL_49:
  *a2 = v12;
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2;
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)(a4 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a4 + 72);
    if (a2)
      goto LABEL_3;
LABEL_23:
    v10 = 0;
LABEL_26:
    *v7 = a4;
    v7[1] = v9;
    return v10;
  }
  v9 = 0;
  if (!a2)
    goto LABEL_23;
LABEL_3:
  if (!a3)
  {
    v10 = 0;
    goto LABEL_26;
  }
  if (a3 < 0)
    goto LABEL_33;
  v10 = 0;
  v11 = a4 + 48 * v8;
  v12 = (_QWORD *)(v11 + 16);
  v13 = (_QWORD *)(v11 + 24);
  while (1)
  {
    v14 = v9 + v10;
    if (v8)
    {
      if (v8 > *(_QWORD *)(a4 + 16))
        goto LABEL_28;
      if (__OFADD__(*v13, *v12))
        goto LABEL_29;
      if (v14 == *v13 + *v12)
      {
        v9 += v10;
        goto LABEL_26;
      }
    }
    else if (!v14)
    {
      v9 = 0;
      goto LABEL_26;
    }
    result = SectionAccumulator.RowIDs.subscript.getter(v9 + v10, a4);
    if (v8)
      break;
    v16 = 0;
    if (v14 >= 0)
      goto LABEL_27;
LABEL_19:
    if (v14 < v16)
      goto LABEL_27;
    ++v10;
    *v6 = v17;
    v6[1] = v18;
    v6 += 2;
    if (a3 == v10)
    {
      v9 += v10;
      v10 = a3;
      goto LABEL_26;
    }
  }
  v15 = *(_QWORD *)(a4 + 16);
  if (!v15)
    goto LABEL_30;
  if (v8 > v15)
    goto LABEL_31;
  if (__OFADD__(*v13, *v12))
    goto LABEL_32;
  v16 = *(_QWORD *)(a4 + 72);
  if (v14 < *v13 + *v12)
    goto LABEL_19;
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

void type metadata accessor for (String, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
  }
}

uint64_t outlined consume of FocusStore?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry))
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry));
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }
    outlined destroy of AnyHashable(*(_QWORD *)(v9 + 48) + 40 * v6);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }

    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of TabEntry((const void *)(*(_QWORD *)(v11 + 56) + 272 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *((_QWORD *)a3 + 32) = 0;
    result = 0.0;
    a3[14] = 0u;
    a3[15] = 0u;
    a3[12] = 0u;
    a3[13] = 0u;
    a3[10] = 0u;
    a3[11] = 0u;
    a3[8] = 0u;
    a3[9] = 0u;
    a3[6] = 0u;
    a3[7] = 0u;
    a3[4] = 0u;
    a3[5] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
    *((_BYTE *)a3 + 264) = -1;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame;
  if (!lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7F98], MEMORY[0x1E0CE7FA8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame);
  }
  return result;
}

uint64_t static ViewAlias._makeViewList(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _BYTE v31[4];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  char v49;

  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v8 = *((_DWORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 7);
  v10 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v12 = a2[5];
  v11 = a2[6];
  v13 = a2[7];
  v14 = *((_DWORD *)a2 + 16);
  v15 = a2[9];
  v16 = *((_BYTE *)a2 + 80);
  v41 = *a2;
  v42 = v5;
  v43 = v6;
  *(_QWORD *)&v44 = __PAIR64__(v7, v8);
  *((_QWORD *)&v44 + 1) = __PAIR64__(v9, v10);
  v28 = v9;
  v45 = v12;
  *(_QWORD *)&v46 = v11;
  v26 = v13;
  v27 = v11;
  *((_QWORD *)&v46 + 1) = v13;
  v24 = v16;
  v25 = v14;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  v17 = type metadata accessor for SourceInput(0, a3, a4, a4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v17);
  _GraphInputs.popLast<A, B>(_:)();
  v18 = v32;
  if (v32)
  {
    v19 = v35;
    v20 = BYTE4(v35);
    v22 = v33;
    v21 = v34;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v32 = v41;
    LODWORD(v33) = v42;
    v34 = v43;
    v35 = v44;
    v36 = v45;
    v37 = v46;
    v38 = v47;
    v39 = v48;
    v40 = v49;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 16))(v31, v18, v22, v21, v19 | ((unint64_t)(v20 & 1) << 32), &v32, a3, a4, v18, v22);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    v32 = v4;
    LODWORD(v33) = v5;
    v34 = v6;
    *(_QWORD *)&v35 = __PAIR64__(v7, v8);
    *((_QWORD *)&v35 + 1) = __PAIR64__(v28, v10);
    v36 = v12;
    *(_QWORD *)&v37 = v27;
    *((_QWORD *)&v37 + 1) = v26;
    v38 = v25;
    v39 = v15;
    v40 = v24;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

void type metadata accessor for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void protocol witness for static AnyStyleType.makeViewList<A>(view:style:inputs:) in conformance StyleType<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static StyleType.makeViewList<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(_QWORD *)(a8 + 16), a6, *(_QWORD *)(a8 + 24), a7);
}

{
  static StyleType.makeViewList<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(_QWORD *)(a8 + 16), a6, *(_QWORD *)(a8 + 24), a7);
}

{
  static StyleType.makeViewList<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(_QWORD *)(a8 + 16), a6, *(_QWORD *)(a8 + 24), a7);
}

uint64_t type metadata accessor for StyleType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleType);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleType);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleType);
}

void static StyleType.makeViewList<A>(view:style:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  type metadata accessor for ResolvedList(255, a7, a9, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for _ListValue();
}

{
  type metadata accessor for ResolvedTabView(255, a7, a9, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for _TabViewValue();
}

{
  type metadata accessor for ResolvedPicker(255, a7, a9, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for _PickerValue();
}

void sub_186F1C68C()
{
  type metadata accessor for _ListValue.Init2();
}

uint64_t sub_186F1C6A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ListValue<A, B>.Init2, a1);
  _GraphValue.init<A>(_:)();
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v10;
  v21 = v11;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  v25 = v8;
  v26 = v13;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 16))(v9 - 116, &v17, v3, v4, v2, v1);
}

void sub_186F1C824()
{
  type metadata accessor for _TabViewValue.Init2();
}

uint64_t sub_186F1C83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TabViewValue<A, B>.Init2, a1);
  _GraphValue.init<A>(_:)();
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v10;
  v21 = v11;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  v25 = v8;
  v26 = v13;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 16))(v9 - 116, &v17, v3, v4, v2, v1);
}

uint64_t one-time initialization function for defaultValue(uint64_t a1)
{
  return one-time initialization function for defaultValue(a1, static SearchKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, static NavigationPropertiesKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t)&static SheetPreference.Key.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t)&static SheetPreference.InspectorKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?, static EnvironmentValues.FileDialogDefaultDirectoryKey.defaultValue, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8]);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>?, static EnvironmentValues.FileDialogURLEnabledKey.defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>);
}

{
  return one-time initialization function for defaultValue(a1, static ListContentConfigurationKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, static ProminentListContentConfigurationKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, static SearchContentKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?, static EnvironmentValues.SearchFieldStateKey.defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?, static EnvironmentValues.SearchTextKey.defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?, static WidgetAuxiliaryViewMetadata.Key.defaultValue, type metadata accessor for WidgetAuxiliaryViewMetadata);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?, static WidgetAuxiliaryURLPreferenceKey.defaultValue, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8]);
}

{
  return one-time initialization function for defaultValue(a1, static NavigationPropertiesContentKey.defaultValue);
}

uint64_t storeEnumTagSinglePayload for SceneList.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 272) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 256) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 272) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t outlined init with take of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?, (uint64_t (*)(uint64_t))type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for WindowSceneConfiguration<WindowGroupConfigurationAttributes>, (uint64_t)&type metadata for WindowGroupConfigurationAttributes, (uint64_t)&protocol witness table for WindowGroupConfigurationAttributes, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WindowSceneConfiguration);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>));
  }
}

ValueMetadata *type metadata accessor for SceneList.Item()
{
  return &type metadata for SceneList.Item;
}

ValueMetadata *type metadata accessor for MenuOrder.Guts()
{
  return &type metadata for MenuOrder.Guts;
}

uint64_t type metadata completion function for LazyVGrid()
{
  return type metadata completion function for LazyHGrid();
}

uint64_t type metadata completion function for LazyHGrid()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  return type metadata completion function for LazyHGrid();
}

ValueMetadata *type metadata accessor for FocusItem()
{
  return &type metadata for FocusItem;
}

uint64_t initializeWithCopy for FocusItem.ViewItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  return a1;
}

void *type metadata accessor for AnySource()
{
  return &unk_1E1B0CE00;
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance AnySource(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;

  return AnySource.tryToReuse(by:indirectMap:testOnly:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32), a2, a3, *v3) & 1;
}

uint64_t AnySource.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  unsigned int Attribute;
  int v9;
  unsigned int v10;
  char v11;

  if (a7 != a1)
    goto LABEL_10;
  Attribute = AGWeakAttributeGetAttribute();
  v9 = *MEMORY[0x1E0CFED28];
  if (Attribute == *MEMORY[0x1E0CFED28])
    goto LABEL_10;
  v10 = Attribute;
  if (!*(_QWORD *)(IndirectAttributeMap.map.getter() + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(v10), (v11 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  if (AGWeakAttributeGetAttribute() == v9)
  {
LABEL_10:
    static ReuseTrace.traceNeverMadeReusableFailure(_:)();
    return 0;
  }
  if ((a6 & 1) == 0)
    AGGraphSetIndirectAttribute();
  return 1;
}

uint64_t outlined destroy of ViewList?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for ViewList?, (uint64_t (*)(uint64_t))type metadata accessor for ViewList, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for AnchorProtocol.AnchorValue : ViewTransformable in CGRect()
{
  return MEMORY[0x1E0CE8298];
}

void protocol witness for static View._makeView(view:inputs:) in conformance <> StaticIf<A, B, C>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  static StaticIf<>._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), a4);
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle, (uint64_t)&type metadata for ToolbarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle, (uint64_t)&type metadata for DefaultListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TableStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TableStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>()
{
  uint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>)
  {
    v1 = MEMORY[0x1E0CE3238];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE3238], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(255, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<MenuSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuSectionStyle and conformance MenuSectionStyle, (uint64_t)&type metadata for MenuSectionStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, v1);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<AccessibilityButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle, (uint64_t)&type metadata for AccessibilityButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SwipeActionsStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>, (uint64_t)&type metadata for SidebarListStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(255, &lazy cache variable for type metadata for SectionStyleModifier<SidebarSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarSectionStyle and conformance SidebarSectionStyle, (uint64_t)&type metadata for SidebarSectionStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>, (uint64_t)&type metadata for SidebarListStyleContext);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarButtonStyle and conformance SidebarButtonStyle, (uint64_t)&type metadata for SidebarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle, (uint64_t)&type metadata for DefaultListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, MEMORY[0x1E0CE5058], MEMORY[0x1E0CE5048], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac, (uint64_t)&type metadata for BorderedButtonStyle_CarMac, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, MEMORY[0x1E0CE5058], MEMORY[0x1E0CE5048], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle, (uint64_t)&type metadata for WidgetBorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E0CE5968], MEMORY[0x1E0CE5958], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<PlatterButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatterButtonStyle and conformance PlatterButtonStyle, (uint64_t)&type metadata for PlatterButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t refreshed;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    refreshed = type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
    v2[0] = &protocol witness table for ResetScrollEnvironmentModifier;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, refreshed, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t refreshed;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    refreshed = type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
    v2[0] = lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, refreshed, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>)
    type metadata accessor for StaticIf();
  return result;
}

uint64_t type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>)
  {
    type metadata accessor for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>();
    lazy protocol witness table accessor for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
    v2[0] = &protocol witness table for ToolbarScopeModifier;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void static StaticIf<>._makeView(view:inputs:)(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  v38 = a7;
  v11 = *a1;
  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 6);
  v16 = *((_DWORD *)a2 + 7);
  v17 = *((_DWORD *)a2 + 8);
  v18 = *((_DWORD *)a2 + 9);
  v19 = a2[5];
  v26 = a2[6];
  v31 = *((_DWORD *)a2 + 14);
  v32 = *((_DWORD *)a2 + 15);
  v33 = *((_DWORD *)a2 + 16);
  v34 = *((_DWORD *)a2 + 17);
  v35 = *((_DWORD *)a2 + 18);
  v36 = *((_DWORD *)a2 + 19);
  v37 = *((_DWORD *)a2 + 20);
  v39 = v12;
  LODWORD(v40) = v13;
  v30 = v14;
  v41 = v14;
  v25 = v15;
  v42 = __PAIR64__(v16, v15);
  v24 = v16;
  v28 = v18;
  v29 = v17;
  v43 = v17;
  v44 = v18;
  v27 = v19;
  v45 = v19;
  v20 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a6 + 8))(&v39, a3, a6);
  if ((v20 & 1) != 0)
  {
    v23 = &v22;
    MEMORY[0x1E0C80A78](v20, v21);
    LODWORD(v46) = v11;
    v39 = a3;
    v40 = a4;
    v41 = a5;
    v42 = a6;
    type metadata accessor for StaticIf();
  }
  v23 = &v22;
  MEMORY[0x1E0C80A78](v20, v21);
  LODWORD(v46) = v11;
  v39 = a3;
  v40 = a4;
  v41 = a5;
  v42 = a6;
  type metadata accessor for StaticIf();
}

void sub_186F1DE60()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  *(_QWORD *)(v2 - 192) = v1;
  *(_DWORD *)(v2 - 184) = v0;
  *(_QWORD *)(v2 - 176) = *(_QWORD *)(v2 - 240);
  v3 = *(_DWORD *)(v2 - 272);
  *(_DWORD *)(v2 - 168) = *(_DWORD *)(v2 - 268);
  *(_DWORD *)(v2 - 164) = v3;
  v4 = *(_DWORD *)(v2 - 248);
  *(_DWORD *)(v2 - 160) = *(_DWORD *)(v2 - 244);
  *(_DWORD *)(v2 - 156) = v4;
  v5 = *(_QWORD *)(v2 - 264);
  *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 256);
  *(_QWORD *)(v2 - 144) = v5;
  LODWORD(v5) = *(_DWORD *)(v2 - 224);
  *(_DWORD *)(v2 - 136) = *(_DWORD *)(v2 - 228);
  *(_DWORD *)(v2 - 132) = v5;
  LODWORD(v5) = *(_DWORD *)(v2 - 216);
  *(_DWORD *)(v2 - 128) = *(_DWORD *)(v2 - 220);
  *(_DWORD *)(v2 - 124) = v5;
  LODWORD(v5) = *(_DWORD *)(v2 - 208);
  *(_DWORD *)(v2 - 120) = *(_DWORD *)(v2 - 212);
  *(_DWORD *)(v2 - 116) = v5;
  *(_DWORD *)(v2 - 112) = *(_DWORD *)(v2 - 204);
  JUMPOUT(0x186F1DF10);
}

void StaticIf<>.init(_:then:else:)(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for StaticIf();
}

uint64_t sub_186F1DFAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void StaticIf<>.init<A>(idiom:then:else:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  v8 = type metadata accessor for InterfaceIdiomPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a2, a3);
  type metadata accessor for StaticIf();
}

uint64_t sub_186F1E07C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t type metadata completion function for KeyPress.Handler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for KeyPress.Handler.Subject(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for KeyPress.Handler.Subject()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CharacterSet();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for KeyPress.Handler.Subject(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for KeyPress.Handler.Subject);
}

uint64_t type metadata accessor for AppGraph()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AppGraph;
  if (!type metadata singleton initialization cache for AppGraph)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for closure #1 in AppGraph.init<A>(app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return closure #1 in AppGraph.init<A>(app:)(a1, v2 + ((v4 + 32) & ~v4), v3, *(_QWORD *)(v2 + 24), a2);
}

uint64_t closure #1 in AppGraph.init<A>(app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[4];
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v30 = a4;
  v25 = a2;
  v31 = a5;
  v49 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  v12 = *((_DWORD *)v10 + 2);
  v13 = v10[2];
  v14 = v10[5];
  v15 = v10[6];
  v16 = *((_DWORD *)v10 + 14);
  static DynamicPropertyCache.fields(of:)();
  v28 = v42;
  v27 = v43;
  v26 = v44;
  v29 = HIDWORD(v44);
  v42 = v11;
  LODWORD(v43) = v12;
  v45 = *(_OWORD *)(a1 + 24);
  v44 = v13;
  v46 = v14;
  v47 = v15;
  v48 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, a3);
  v34 = a3;
  v17 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v33, a3, MEMORY[0x1E0DEDCE8], v17, MEMORY[0x1E0DEDD18], v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  _GraphValue.init(_:)();
  v35 = v28;
  v36 = v27;
  LOBYTE(v37) = v26;
  HIDWORD(v37) = v29;
  v20 = type metadata accessor for AppBodyAccessor(0, a3, v30, v19);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AppBodyAccessor<A>, v20);
  BodyAccessor.makeBody(container:inputs:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = v42;
  LODWORD(v36) = v43;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  v41 = v48;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v32, &v35, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

const char *AppGraph.launchProfileOptions.getter()
{
  uint64_t v0;
  const char *result;

  if (*(_BYTE *)(v0 + 228) != 1)
    return (const char *)*(unsigned int *)(v0 + 224);
  result = getenv("SWIFTUI_PROFILE_LAUNCH");
  if (result)
    result = (const char *)atoi(result);
  *(_DWORD *)(v0 + 224) = (_DWORD)result;
  *(_BYTE *)(v0 + 228) = 0;
  return result;
}

Swift::Void __swiftcall AppGraph.instantiateOutputs()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  void (*v15)(uint64_t *, _QWORD);
  _DWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  void (*v29)(void **, _QWORD);
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v1 = v0;
  swift_beginAccess();
  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 41);
  v7 = *(_DWORD *)(v0 + 68);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_DWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v1 + 112);
  v32 = v2;
  v33 = v3;
  v34 = v4;
  v35 = v5;
  v36 = v6;
  v37 = *(_OWORD *)(v1 + 44);
  v38 = *(_QWORD *)(v1 + 60);
  v39 = v7;
  v40 = v8;
  v41 = v9;
  v42 = v10;
  v43 = *(_OWORD *)(v1 + 96);
  v44 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = (void (*)(uint64_t *, _QWORD))GraphHost.Data.updateSeed.modify();
  ++*v16;
  v15(&v31, 0);
  v17 = v32;
  v18 = v33;
  v19 = v34;
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v20 = (void *)GraphHost.rootSubgraph.getter();
  AGGraphClearUpdate();
  v21 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in AppGraph.instantiateOutputs()(v1);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v22 = v32;
  v23 = (int)v33;
  v24 = PreferencesOutputs.subscript.getter();
  v25 = *MEMORY[0x1E0CFED28];
  if ((v24 & 0x100000000) != 0)
    v26 = *MEMORY[0x1E0CFED28];
  else
    v26 = v24;
  *(_DWORD *)(v1 + 204) = v26;
  v32 = v22;
  LODWORD(v33) = v23;
  v27 = PreferencesOutputs.subscript.getter();
  if ((v27 & 0x100000000) != 0)
    v28 = v25;
  else
    v28 = v27;
  *(_DWORD *)(v1 + 232) = v28;
  v32 = v22;
  LODWORD(v33) = v23;
  PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  v29 = (void (*)(void **, _QWORD))GraphHost.hostPreferenceValues.modify();
  *v30 = AGCreateWeakAttribute();
  v29(&v32, 0);
}

Swift::Void __swiftcall AppGraph.graphDidChange()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  void (*v15)(_BYTE *, _QWORD);
  _DWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  _BYTE v41[16];
  _BYTE v42[32];
  void *v43;
  void *v44;
  void *v45;
  char v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v1 = v0;
  swift_beginAccess();
  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 41);
  v7 = *(_DWORD *)(v0 + 68);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_DWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v1 + 112);
  v43 = v2;
  v44 = v3;
  v45 = v4;
  v46 = v5;
  v47 = v6;
  v48 = *(_OWORD *)(v1 + 44);
  v49 = *(_QWORD *)(v1 + 60);
  v50 = v7;
  v51 = v8;
  v52 = v9;
  v53 = v10;
  v54 = *(_OWORD *)(v1 + 96);
  v55 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = (void (*)(_BYTE *, _QWORD))GraphHost.Data.updateSeed.modify();
  ++*v16;
  v15(v42, 0);
  v17 = v43;
  v18 = v44;
  v19 = v45;
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  GraphHost.runTransaction()();
  AGGraphGetValue();
  v21 = v20;
  swift_beginAccess();
  v22 = *(_QWORD *)(v1 + 192);
  v23 = v22 + 56;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(v22 + 56);
  v27 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain();
  v28 = 0;
  v29 = v21 & 1;
  while (1)
  {
    if (v26)
    {
      v30 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v31 = v30 | (v28 << 6);
      goto LABEL_24;
    }
    v32 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v32 >= v27)
      goto LABEL_33;
    v33 = *(_QWORD *)(v23 + 8 * v32);
    ++v28;
    if (!v33)
    {
      v28 = v32 + 1;
      if (v32 + 1 >= v27)
        goto LABEL_33;
      v33 = *(_QWORD *)(v23 + 8 * v28);
      if (!v33)
      {
        v28 = v32 + 2;
        if (v32 + 2 >= v27)
          goto LABEL_33;
        v33 = *(_QWORD *)(v23 + 8 * v28);
        if (!v33)
        {
          v28 = v32 + 3;
          if (v32 + 3 >= v27)
            goto LABEL_33;
          v33 = *(_QWORD *)(v23 + 8 * v28);
          if (!v33)
            break;
        }
      }
    }
LABEL_23:
    v26 = (v33 - 1) & v33;
    v31 = __clz(__rbit64(v33)) + (v28 << 6);
LABEL_24:
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(_QWORD *)(v22 + 48) + 16 * v31, (uint64_t)v42);
    outlined init with take of HashableWeakBox<Swift.AnyObject>((uint64_t)v42, (uint64_t)v41);
    v35 = MEMORY[0x18D760234](v41);
    if (v35)
    {
      v36 = v35;
      swift_getObjectType();
      v37 = swift_conformsToProtocol2();
      if (v37)
        v38 = v37;
      else
        v38 = 0;
      if (v37)
        v39 = v36;
      else
        v39 = 0;
      if (v39)
      {
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 8))(v29, ObjectType, v38);
      }
      swift_unknownObjectRelease();
    }
    outlined destroy of HashableWeakBox<Swift.AnyObject>((uint64_t)v41);
  }
  v34 = v32 + 4;
  if (v34 >= v27)
  {
LABEL_33:
    swift_release();
    return;
  }
  v33 = *(_QWORD *)(v23 + 8 * v34);
  if (v33)
  {
    v28 = v34;
    goto LABEL_23;
  }
  while (1)
  {
    v28 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v28 >= v27)
      goto LABEL_33;
    v33 = *(_QWORD *)(v23 + 8 * v28);
    ++v34;
    if (v33)
      goto LABEL_23;
  }
LABEL_35:
  __break(1u);
}

uint64_t AppGraph.graphDelegate.getter()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AppGraph and conformance AppGraph, (uint64_t (*)(uint64_t))type metadata accessor for AppGraph, (uint64_t)&protocol conformance descriptor for AppGraph);
  return swift_unknownObjectRetain();
}

uint64_t specialized AppGraph.addObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  Swift::UInt v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE v22[8];
  Swift::UInt v23;

  v4 = (uint64_t *)(a2 + 192);
  swift_beginAccess();
  v5 = swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 192) = specialized _NativeSet.filter(_:)(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v21 = a1;
  v7 = MEMORY[0x1E0DEE9B0];
  v8 = MEMORY[0x1E0DEE9B0] + 8;
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v20, (uint64_t)v22, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
  swift_beginAccess();
  v9 = *(_QWORD *)(a2 + 192);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v23);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    swift_bridgeObjectRetain();
    v14 = MEMORY[0x1E0CE2D98];
    while (1)
    {
      outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(_QWORD *)(v9 + 48) + 16 * v12, (uint64_t)v20);
      v15 = v21;
      v16 = v23;
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v20, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v8, (uint64_t (*)(_QWORD, uint64_t))v14);
      if (v15 == v16)
        break;
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v7 = MEMORY[0x1E0DEE9B0];
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9B0];
  }
  else
  {
LABEL_6:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of HashableWeakBox<Swift.AnyObject>((uint64_t)v22, (uint64_t)v20);
    v19 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v20, v12, isUniquelyReferenced_nonNull_native);
    *v4 = v19;
    swift_bridgeObjectRelease();
  }
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v22, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v7 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
  return swift_endAccess();
}

uint64_t AppGraph.updateGraph<A>(body:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

void *type metadata accessor for AnyStyle()
{
  return &unk_1E1B0C0D8;
}

{
  return &unk_1E1B0BFD8;
}

{
  return &unk_1E1B0C058;
}

void type metadata accessor for WeakBox<UIButton>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<UIButton>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIButton);
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIButton>);
  }
}

uint64_t outlined init with take of WeakBox<SceneStorageValues>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  type metadata accessor for WeakBox<SceneStorageValues>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for WeakBox<SceneStorageValues>?(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for WeakBox<SceneStorageValues>?, 255, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<SceneStorageValues>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for WeakBox<SceneStorageValues>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for WeakBox<SceneStorageValues>, a3, (uint64_t (*)(uint64_t))type metadata accessor for SceneStorageValues, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

uint64_t outlined consume of Toolbar.LocationStorage?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Toolbar.PlatformVended.uiSafeAreaTransitionState.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = *(_QWORD *)(v0 + 56);
  }
  else
  {
    type metadata accessor for ToolbarSafeAreaTransitionState();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v0 + 56) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

ValueMetadata *type metadata accessor for Toolbar.UpdateContext()
{
  return &type metadata for Toolbar.UpdateContext;
}

uint64_t associated type witness table accessor for View.Body : View in TabView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *assignWithCopy for TabView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v32;
  uint64_t __n;

  v3 = a3;
  v5 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ~v9;
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  __n = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  if ((v8 & 0x80000000) == 0)
  {
    v12 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
LABEL_8:
    if (v14)
      goto LABEL_9;
    *v5 = *a2;
    *v11 = *v12;
    v17 = v9 + 8;
    v18 = (unint64_t)v11 + v9 + 8;
    v19 = v3;
    v20 = v18 & v10;
    v21 = ((unint64_t)v12 + v17) & v10;
    v22 = v5;
    v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v24 = v20;
    v3 = v19;
    v23(v24, v21, v6);
    v5 = v22;
    goto LABEL_12;
  }
  v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
  v32 = v15(((unint64_t)v11 + v9 + 8) & v10, v8, v6);
  v12 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = a1;
  v14 = v15(((unint64_t)v12 + v9 + 8) & v10, v8, v6);
  v3 = a3;
  if (v32)
    goto LABEL_8;
LABEL_5:
  if (v14)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v10, v6);
LABEL_9:
    v16 = __n;
    memcpy(v5, a2, __n);
    goto LABEL_13;
  }
  *v5 = *a2;
  swift_retain();
  swift_release();
  *v11 = *v12;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v11 + v9 + 8) & v10, ((unint64_t)v12 + v9 + 8) & v10, v6);
LABEL_12:
  v16 = __n;
LABEL_13:
  v25 = v16 + 7;
  v26 = ((unint64_t)v5 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)a2 + v25) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 8);
  if (*(_QWORD *)(v26 + 8) < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
      *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_20;
    }
LABEL_19:
    v29 = *(_OWORD *)v27;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    *(_OWORD *)v26 = v29;
    goto LABEL_20;
  }
  if (v28 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_19;
  }
  *(_QWORD *)v26 = *(_QWORD *)v27;
  swift_retain();
  swift_release();
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
LABEL_20:
  v30 = *(_QWORD *)(*(_QWORD *)(v3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v30 + 24))((v26 + *(unsigned __int8 *)(v30 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (v27 + *(unsigned __int8 *)(v30 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return v5;
}

uint64_t type metadata completion function for TabView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for TabView()
{
  JUMPOUT(0x18D75FF28);
}

void TabView.init(selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
  type metadata accessor for TabView();
}

uint64_t sub_186F1F3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = v2 + *(int *)(a1 + 52);
  v9 = type metadata accessor for Optional();
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 0;
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v2, v3, v9);
  (*(void (**)(uint64_t))(v6 - 120))(v11);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2 + *(int *)(a1 + 56), v4, v1);
}

void partial apply for closure #1 in TabView.body.getter()
{
  closure #1 in TabView.body.getter();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TabView<A, B>.TransformEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabView<A, B>.TransformEnvironment, a3);
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance TabView<A, B>.TransformEnvironment(uint64_t a1, uint64_t a2)
{
  return specialized static TabView.TransformEnvironment.makeEnvironment(modifier:environment:)(a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TabView<A, B>.TransformEnvironment()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

void type metadata accessor for TabView.TransformEnvironment()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>)
  {
    type metadata accessor for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>();
    v3 = type metadata accessor for Section(a1, (uint64_t)&type metadata for SectionStyleConfiguration.Header, v2, (uint64_t)&type metadata for SectionStyleConfiguration.Footer);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>);
  }
}

unint64_t lazy protocol witness table accessor for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];

  result = lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>)
  {
    type metadata accessor for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>(255);
    v2 = v1;
    v3[0] = &protocol witness table for SectionStyleConfiguration.Header;
    v3[1] = lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>();
    v3[2] = &protocol witness table for SectionStyleConfiguration.Footer;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>);
  }
  return result;
}

uint64_t outlined copy of SceneID?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return outlined copy of SceneID(result, a2, a3 & 1);
  return result;
}

uint64_t outlined consume of SceneID?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return outlined consume of SceneID(result, a2, a3 & 1);
  return result;
}

ValueMetadata *type metadata accessor for SceneID()
{
  return &type metadata for SceneID;
}

unint64_t lazy protocol witness table accessor for type SceneID and conformance SceneID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneID and conformance SceneID;
  if (!lazy protocol witness table cache variable for type SceneID and conformance SceneID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneID, &type metadata for SceneID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneID and conformance SceneID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneID and conformance SceneID;
  if (!lazy protocol witness table cache variable for type SceneID and conformance SceneID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneID, &type metadata for SceneID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneID and conformance SceneID);
  }
  return result;
}

void type metadata accessor for Binding<SearchFieldState>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for Binding<SearchFieldState>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

void runApp<A>(_:)()
{
  char **v0;

  static Update.ensure<A>(_:)();
  type metadata accessor for AppDelegate();
  v0 = (char **)MEMORY[0x18D75E2B4]();
  closure #1 in KitRendererCommon(_:)(v0);
}

uint64_t type metadata completion function for Toggle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>);
  }
}

unint64_t lazy protocol witness table accessor for type Circle and conformance Circle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7398], MEMORY[0x1E0CE73A8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7390], MEMORY[0x1E0CE73A8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>);
  }
  return result;
}

uint64_t Scene.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t static Scene.makeBody(scene:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    v10 = type metadata accessor for SceneBodyAccessor(0, a6, a7, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneBodyAccessor<A>, v10);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Scene.extendedLaunchTestName(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  type metadata accessor for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>();
  return Scene.modifier<A>(_:)(v8, a3, v6, a4);
}

uint64_t static Scene._makeScene(scene:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  int v23;
  uint64_t result;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  v8 = *a1;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v13 = a2[5];
  v12 = a2[6];
  v14 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  v15 = v44;
  v16 = v45;
  v17 = v46;
  v18 = HIDWORD(v46);
  v44 = v9;
  LODWORD(v45) = v10;
  v46 = v11;
  v47 = *(_OWORD *)(a2 + 3);
  v48 = v13;
  v49 = v12;
  v50 = v14;
  v25 = v18;
  v26 = v8;
  v40 = v8;
  v29 = v16;
  v30 = v15;
  v32 = v15;
  v33 = v16;
  v28 = v17;
  LOBYTE(v34) = v17;
  HIDWORD(v34) = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Scene.makeBody(scene:inputs:fields:)((uint64_t)v39, (uint64_t)&v41, (uint64_t)&v40, (uint64_t)&v44, (uint64_t)&v32, a3, a4);
  v19 = v42;
  v27 = v41;
  LOBYTE(v14) = v43;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = v44;
  LODWORD(v33) = v45;
  v34 = v46;
  v35 = v47;
  v36 = v48;
  v37 = v49;
  v38 = v50;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v41, v39, &v32, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = v41;
  v23 = v42;
  if ((v14 & 1) == 0)
  {
    v41 = v27;
    v42 = v19;
    v40 = v26;
    v32 = v30;
    v33 = v29;
    LOBYTE(v34) = v28;
    HIDWORD(v34) = v25;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a5 = v22;
  *(_DWORD *)(a5 + 8) = v23;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider;
  if (!lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71F0], MEMORY[0x1E0CE71F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71D0], MEMORY[0x1E0CE71D8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance Child()
{
  lazy protocol witness table accessor for type Child and conformance Child();
  return static AsyncAttribute.flags.getter();
}

uint64_t outlined consume of Alert?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(a5, a6, a7, a8);
    outlined consume of Text.Storage(a10, a11, a12 & 1);
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a14);
    return outlined consume of Alert.Button?(a16, a17, a18, a19, a20, a21);
  }
  return result;
}

ValueMetadata *type metadata accessor for Alert()
{
  return &type metadata for Alert;
}

ValueMetadata *type metadata accessor for Alert.Button()
{
  return &type metadata for Alert.Button;
}

ValueMetadata *type metadata accessor for Alert.Button.Style()
{
  return &type metadata for Alert.Button.Style;
}

ValueMetadata *type metadata accessor for Alert.Presentation()
{
  return &type metadata for Alert.Presentation;
}

_UNKNOWN **associated type witness table accessor for AlertControllerConvertible.Key : HostPreferenceKey in Alert.Presentation()
{
  return &protocol witness table for Alert.Presentation.Key;
}

void View.onOpenURL(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[6];

  v20[0] = a6;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v12);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  v16 = (_QWORD *)(v15 + ((v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v16 = a1;
  v16[1] = a2;
  type metadata accessor for PassthroughSubject<Any, Never>();
  v18 = v17;
  v19 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (uint64_t (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>, MEMORY[0x1E0C95F48]);
  swift_retain();
  v20[1] = v18;
  v20[2] = a3;
  v20[3] = v19;
  v20[4] = a4;
  type metadata accessor for SubscriptionView();
}

uint64_t sub_186F20098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;

  result = default argument 0 of SceneBridgeReader.init(sceneBridge:handler:)();
  *(_QWORD *)v0 = result;
  *(_BYTE *)(v0 + 8) = v4 & 1;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v0 + 24) = v1;
  return result;
}

void closure #1 in View.onOpenURL(perform:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = type metadata accessor for OpenURLContext();
  v19 = specialized static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)(v14, 0x434C52556E65704FuLL, 0xEE00747865746E6FLL, a1);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  type metadata accessor for PassthroughSubject<Any, Never>();
  v17 = v16;
  v18 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (uint64_t (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>, MEMORY[0x1E0C95F48]);
  View.onReceive<A>(_:perform:)((uint64_t)&v19, a6, a4, v17, a5, v18, a7);
}

uint64_t sub_186F201BC()
{
  swift_retain();
  swift_release();
  return swift_release();
}

void partial apply for closure #1 in View.onOpenURL(perform:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = (uint64_t *)(v3
                 + ((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64)
                   + ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))
                   + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in View.onOpenURL(perform:)(a1, *v5, v5[1], v4, *(_QWORD *)(v3 + 24), a2, a3);
}

void partial apply for closure #1 in View.onOpenURL(perform:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  partial apply for closure #1 in View.onOpenURL(perform:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in View.onOpenURL(perform:), a2);
}

{
  partial apply for closure #1 in View.onOpenURL(perform:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in View.onOpenURL(perform:), a2);
}

void View.onOpenURL(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  View.onOpenURL(perform:)(a1, a2, a3, a4, (uint64_t)&unk_1E1B23A58, (uint64_t)partial apply for closure #1 in View.onOpenURL(perform:));
}

{
  View.onOpenURL(perform:)(a1, a2, a3, a4, (uint64_t)&unk_1E1B23A30, (uint64_t)partial apply for closure #1 in View.onOpenURL(perform:));
}

void View.formSheet<A>(isPresented:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[18];

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a6;
  v14[3] = a7;
  v14[4] = a8;
  v14[5] = a9;
  v14[6] = a4;
  v14[7] = a5;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v15 = type metadata accessor for ModifiedContent();
  v16[0] = a9;
  v16[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v16);
  SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)();
}

void sub_186F20378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v17;
  v18[3] = v15;
  v18[4] = v16;
  v18[5] = v14;
  v18[6] = a14;
  v18[7] = a13;
  SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)();
}

void sub_186F203D8()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  type metadata accessor for SheetPresentationModifier();
}

void sub_186F20464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  uint64_t v45;

  v45 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, a1);
  StaticIf<>.init<A>(idiom:then:else:)(v45, v43 - 224, a1, MEMORY[0x1E0CE3F10], (uint64_t)&a43);
}

void sub_186F204B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,uint64_t a49,uint64_t a50,uint64_t a51,__int16 a52,char a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[27];

  v56[26] = a53;
  *(_WORD *)&v56[24] = a52;
  *(_QWORD *)&v56[16] = a51;
  *(_QWORD *)&v56[8] = a50;
  *(_QWORD *)v56 = a49;
  *(_OWORD *)(v55 - 160) = a47;
  *(_OWORD *)(v55 - 144) = a48;
  *(_OWORD *)(v55 - 128) = *(_OWORD *)v56;
  *(_OWORD *)(v55 - 117) = *(_OWORD *)&v56[11];
  *(_OWORD *)(v55 - 224) = a43;
  *(_OWORD *)(v55 - 208) = a44;
  *(_OWORD *)(v55 - 192) = a45;
  *(_OWORD *)(v55 - 176) = a46;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PadInterfaceIdiom>, v54, v53, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

uint64_t sub_186F20540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75B4AC](&v4, v3, a1);
  return outlined release of StaticIf<InterfaceIdiomPredicate<PadInterfaceIdiom>, SheetPresentationModifier<ModifiedContent<A1, _PreferenceTransformModifier<PresentationOptionsPreferenceKey>>, NullSheetAnchor<SheetPreference.Key>>, SheetPresentationModifier<ModifiedContent<A1, _PreferenceTransformModifier<PresentationOptionsPreferenceKey>>, NullSheetAnchor<SheetPreference.Key>>>(v1 - 224);
}

uint64_t View.alert(isPresented:content:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(_QWORD *__return_ptr, _QWORD *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;
  _BYTE v18[184];
  _QWORD v19[23];
  _QWORD v20[2];
  char v21;

  v20[0] = a1;
  v20[1] = a2;
  v21 = a3;
  v12 = a3 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v13 = MEMORY[0x18D75B9C8](v19);
  if (LOBYTE(v19[0]) == 1)
  {
    a4(v19, v13);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v19);
  }
  else
  {
    _s7SwiftUI5AlertVSgWOi0_((uint64_t)v19);
  }
  outlined init with take of Image.Resolved?((uint64_t)v19, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  outlined init with take of Image.Resolved?((uint64_t)v20, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  *(_BYTE *)(v14 + 32) = v12;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  swift_retain();
  swift_retain();
  View.presentationCommon(_:onDismiss:id:)((uint64_t)v18, (uint64_t)partial apply for closure #1 in View.actionSheet(isPresented:content:), v14, (uint64_t)v16, a6, a7);
  swift_release();
  outlined destroy of AccessibilityTableContext?((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  return outlined release of Alert?((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Alert?);
}

uint64_t View.accessibilityRepresentation<A>(representation:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessibilityRepresentationModifier(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v20 - v17;
  a1(v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a4);
  MEMORY[0x18D75B4AC](v18, a3, v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

void View.navigationDestinationScope()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t partial apply for closure #1 in View.typeSelectEquivalent<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:)(a1, a2);
}

uint64_t View.accessibilityInputLabels<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[7];
  uint64_t v12;

  v12 = a1;
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = a5;
  v7 = type metadata accessor for Array();
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v7);
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.typeSelectEquivalent<A>(_:), (uint64_t)v11, v7, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v12, 1, a2, MEMORY[0x1E0CE5740], a4);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityInputLabels(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v4, 1, a2, MEMORY[0x1E0CE5740], a3);
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v22;

  v3 = a3;
  v4 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v22;
    v8 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = Text.init(_:tableName:bundle:comment:)();
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v22 = v6;
      v17 = *(_QWORD *)(v6 + 16);
      v16 = *(_QWORD *)(v6 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        v6 = v22;
      }
      *(_QWORD *)(v6 + 16) = v17 + 1;
      v18 = v6 + 32 * v17;
      *(_QWORD *)(v18 + 32) = v9;
      *(_QWORD *)(v18 + 40) = v11;
      *(_BYTE *)(v18 + 48) = v13 & 1;
      *(_QWORD *)(v18 + 56) = v15;
      v8 += 32;
      --v5;
    }
    while (v5);
    v3 = a3;
    v4 = a2;
  }
  v22 = v6;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v22, 1, v4, MEMORY[0x1E0CE5740], v3);
  return swift_bridgeObjectRelease();
}

uint64_t View.containerRelativeFrame(_:alignment:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[0] = a1;
  v7 = a2;
  v8 = a3;
  v9 = 0;
  v10 = 0;
  return MEMORY[0x18D75B4AC](v6, a4, &type metadata for ContainerRelativeFrameModifier, a5);
}

uint64_t View.scrollTargetBehavior<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ScrollBehaviorModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

void View.inferredToolbarScope()()
{
  type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t View.scrollTargetLayout(isEnabled:)(char a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v5;

  if ((a1 & 1) != 0)
    v3 = 0;
  else
    v3 = 2;
  v5 = v3;
  return MEMORY[0x18D75B4AC](&v5, a2, &type metadata for ScrollTargetModifier, a3);
}

uint64_t partial apply for closure #1 in View.presentationCommon(_:onDismiss:id:)(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;

  return closure #1 in View.presentationCommon(_:onDismiss:id:)(a1, a2, v6 + 16, *(_QWORD *)(v6 + 200), *(_QWORD *)(v6 + 208), v6 + 216, a3, a4, a5, a6);
}

{
  uint64_t v6;

  return closure #1 in View.presentationCommon(_:onDismiss:id:)(a1, a2, v6 + 16, *(_QWORD *)(v6 + 88), *(_QWORD *)(v6 + 96), v6 + 104, a3, a4, a5, a6);
}

uint64_t closure #1 in View.presentationCommon(_:onDismiss:id:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v26[11];
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for Alert.Presentation?, (uint64_t)&type metadata for Alert.Presentation);
  outlined init with take of Image.Resolved?(a3, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v26) == 1)
  {
    *(_QWORD *)(a1 + 272) = 0;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v36 = v26[8];
    v37 = v26[9];
    v38 = v26[10];
    v39 = v27;
    v32 = v26[4];
    v33 = v26[5];
    v34 = v26[6];
    v35 = v26[7];
    v28 = v26[0];
    v29 = v26[1];
    v30 = v26[2];
    v31 = v26[3];
    outlined init with copy of AnyHashable?(a6, a1 + 208);
    v20 = v37;
    *(_OWORD *)(a1 + 128) = v36;
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 160) = v38;
    *(_BYTE *)(a1 + 176) = v39;
    v21 = v33;
    *(_OWORD *)(a1 + 64) = v32;
    *(_OWORD *)(a1 + 80) = v21;
    v22 = v35;
    *(_OWORD *)(a1 + 96) = v34;
    *(_OWORD *)(a1 + 112) = v22;
    v23 = v29;
    *(_OWORD *)a1 = v28;
    *(_OWORD *)(a1 + 16) = v23;
    v24 = v31;
    *(_OWORD *)(a1 + 32) = v30;
    *(_OWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 184) = a4;
    *(_QWORD *)(a1 + 192) = a5;
    *(_DWORD *)(a1 + 200) = a2;
    *(double *)(a1 + 248) = a7;
    *(double *)(a1 + 256) = a8;
    *(double *)(a1 + 264) = a9;
    *(double *)(a1 + 272) = a10;
    outlined copy of AppIntentExecutor?(a4);
  }
  return outlined release of Alert?(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Alert?);
}

{
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _BYTE v36[24];
  uint64_t v37[4];
  uint64_t v38;

  outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for ActionSheet.Presentation?, (uint64_t)&type metadata for ActionSheet.Presentation);
  result = outlined init with take of Image.Resolved?(a3, (uint64_t)&v24, &lazy cache variable for type metadata for ActionSheet?, (uint64_t)&type metadata for ActionSheet);
  if (*((_QWORD *)&v25 + 1))
  {
    v31[0] = v26;
    v31[1] = v27;
    v32 = v28;
    v29 = v24;
    v30 = v25;
    v33 = v24;
    v34 = v25;
    outlined init with take of Text.Storage((uint64_t)&v33, (uint64_t)v36);
    v35 = *((_QWORD *)&v34 + 1);
    v21 = MEMORY[0x1E0CE6CF8];
    outlined init with take of Image.Resolved?((uint64_t)v31, (uint64_t)v37, &lazy cache variable for type metadata for Text?, MEMORY[0x1E0CE6CF8]);
    v22 = v32;
    v38 = v32;
    outlined init with copy of AnyHashable?(a6, a1 + 96);
    v23 = v34;
    *(_OWORD *)a1 = v33;
    *(_OWORD *)(a1 + 16) = v23;
    outlined init with take of Image.Resolved?((uint64_t)v37, a1 + 32, &lazy cache variable for type metadata for Text?, v21);
    *(_QWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 72) = a4;
    *(_QWORD *)(a1 + 80) = a5;
    *(_DWORD *)(a1 + 88) = a2;
    *(double *)(a1 + 136) = a7;
    *(double *)(a1 + 144) = a8;
    *(double *)(a1 + 152) = a9;
    *(double *)(a1 + 160) = a10;
    outlined retain of Text.Storage((uint64_t)v36);
    outlined retain of [Text.Modifier]((uint64_t)&v35);
    outlined retain of Text?(v37);
    outlined retain of [Text.Modifier]((uint64_t)&v38);
    return outlined copy of AppIntentExecutor?(a4);
  }
  else
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t View.coordinateSpace(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[48];

  outlined init with copy of NamedCoordinateSpace(a1, (uint64_t)v6);
  MEMORY[0x18D75B4AC](v6, a2, &type metadata for CoordinateSpaceNameModifier, a3);
  return outlined destroy of CoordinateSpaceNameModifier((uint64_t)v6);
}

uint64_t View.scrollPosition<A>(id:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[104];

  v21 = a7;
  v20 = a5;
  type metadata accessor for Optional();
  v11 = type metadata accessor for Binding();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v19 - v15, a1, v11, v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  v22[0] = a2;
  v22[1] = a3;
  v23 = a4 & 1;
  v17 = type metadata accessor for ValueToScrollPosition();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5248], v17);
  Binding.projecting<A>(_:)();
  outlined init with copy of Binding<ScrollPosition>((uint64_t)v27, (uint64_t)v22);
  v24 = a2;
  v25 = a3;
  v26 = a4 & 1;
  MEMORY[0x18D75B4AC](v22, v20, MEMORY[0x1E0CE6470], v21);
  outlined destroy of ScrollPositionBindingModifier((uint64_t)v22);
  return outlined destroy of Binding<ScrollPosition>((uint64_t)v27);
}

uint64_t View.scrollViewBoundsModifier<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v9 = a7(0, a4, a6);
  swift_retain();
  MEMORY[0x18D75B4AC](v11, a3, v9, a5);
  return swift_release();
}

uint64_t View.scrollViewBoundsModifier<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.scrollViewBoundsModifier<A>(transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ScrollViewBoundsModifier);
}

{
  return View.scrollViewBoundsModifier<A>(transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ScrollViewBoundsModifier2);
}

uint64_t View.tabViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _TabViewStyleWriter(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t outlined consume of Text.LineStyle?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_release();
  return result;
}

uint64_t type metadata completion function for Menu()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in List<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for List(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a4);
  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost()
{
  type metadata accessor for NavigationStateHost();
  swift_allocObject();
  return NavigationStateHost.init()();
}

uint64_t type metadata completion function for Link()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for LinkDestination();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Link(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Link);
}

unint64_t lazy protocol witness table accessor for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation;
  if (!lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitNavigationBridgePresentationModeLocation, &unk_1E1B09CD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation;
  if (!lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitNavigationBridgePresentationModeLocation, &unk_1E1B09CD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation);
  }
  return result;
}

id protocol witness for PlatformViewRepresentable.overrideLayoutTraits(_:for:) in conformance PlatformViewControllerRepresentableAdaptor<A>(int a1, id *a2)
{
  return specialized PlatformViewControllerRepresentableAdaptor.overrideLayoutTraits(_:for:)(a1, *a2);
}

uint64_t protocol witness for static PlatformViewRepresentable.dynamicProperties.getter in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t a1)
{
  return static PlatformViewControllerRepresentableAdaptor.dynamicProperties.getter(*(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for static PlatformViewRepresentable.layoutOptions(_:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2)
{
  return static PlatformViewControllerRepresentableAdaptor.layoutOptions(_:)(*a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for PlatformViewRepresentable.sizeThatFits(_:provider:context:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  return PlatformViewControllerRepresentableAdaptor.sizeThatFits(_:provider:context:)(a1, a2 & 1, a3, a4 & 1, *a5, a6, a7);
}

id protocol witness for static PlatformViewRepresentable.platformView(for:) in conformance PlatformViewControllerRepresentableAdaptor<A>(void **a1)
{
  return static PlatformViewRepresentable<>.platformView(for:)(*a1);
}

uint64_t protocol witness for PlatformViewRepresentable.updateViewProvider(_:context:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PlatformViewControllerRepresentableAdaptor.updateViewProvider(_:context:)(*a1, a2, a3);
}

uint64_t protocol witness for PlatformViewRepresentable.makeViewProvider(context:) in conformance PlatformViewControllerRepresentableAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = PlatformViewControllerRepresentableAdaptor.makeViewProvider(context:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for PlatformViewControllerRepresentableAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewControllerRepresentableAdaptor);
}

uint64_t PlatformViewControllerRepresentableAdaptor.sizeThatFits(_:provider:context:)(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  double v24;
  uint64_t (*v25)(uint64_t, double);
  uint64_t v26;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v33 = a5;
  v28 = a6;
  v29 = a2;
  v30 = a4;
  v31 = a1;
  v32 = a3;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, a7);
  v10 = type metadata accessor for PlatformViewRepresentableContext(0, a7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v28 - v13;
  v15 = *(_QWORD *)(a7 + 16);
  v16 = *(_QWORD *)(a7 + 24);
  v18 = type metadata accessor for UIViewControllerRepresentableContext(0, v15, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v28 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v28, v10, v21);
  v24 = UIViewControllerRepresentableContext.init<A>(_:)((uint64_t)v14, v15, a7, v16, v8, (uint64_t)v23);
  v25 = *(uint64_t (**)(uint64_t, double))(v16 + 72);
  v35 = v29 & 1;
  v34 = v30 & 1;
  v26 = v25(v31, v24);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
  return v26;
}

uint64_t PlatformViewControllerRepresentableAdaptor.updateViewProvider(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  double v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v23 = a2;
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, a3);
  v6 = type metadata accessor for PlatformViewRepresentableContext(0, a3, v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 24);
  v14 = type metadata accessor for UIViewControllerRepresentableContext(0, v11, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v23, v6, v17);
  v20 = UIViewControllerRepresentableContext.init<A>(_:)((uint64_t)v10, v11, a3, v12, v4, (uint64_t)v19);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(v12 + 40))(v24, v19, v11, v12, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t PlatformViewControllerRepresentableAdaptor.makeViewProvider(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint64_t v20;
  uint64_t v22;

  v22 = a1;
  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
  v5 = type metadata accessor for PlatformViewRepresentableContext(0, a2, v3, v4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v22 - v8;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = type metadata accessor for UIViewControllerRepresentableContext(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v22, v5, v16);
  v19 = UIViewControllerRepresentableContext.init<A>(_:)((uint64_t)v9, v10, a2, v11, v3, (uint64_t)v18);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v11 + 32))(v18, v10, v11, v19);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  return v20;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransactionalPreferenceTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransactionalPreferenceTransformModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransactionalPreferenceTransformModifier<A>@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  return static TransactionalPreferenceTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t partial apply for implicit closure #1 in static TransactionalPreferenceTransformModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

double static TransactionalPreferenceTransformModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v27;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t FunctionTypeMetadata;
  uint64_t IsAnimated;
  uint64_t v34;
  uint64_t AssociatedTypeWitness;
  double v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a1 + 2);
  v7 = a1[2];
  v27 = *a1;
  v9 = *((_DWORD *)a1 + 6);
  v8 = *((_DWORD *)a1 + 7);
  v22 = *((_DWORD *)a1 + 9);
  v21 = a1[5];
  v30 = a1[6];
  v10 = *((_DWORD *)a1 + 14);
  v11 = *((_DWORD *)a1 + 17);
  v19 = *((_DWORD *)a1 + 16);
  v20 = *((_DWORD *)a1 + 15);
  v12 = *((_DWORD *)a1 + 18);
  v23 = *((_DWORD *)a1 + 19);
  v24 = *((_DWORD *)a1 + 8);
  v13 = *((_DWORD *)a1 + 20);
  type metadata accessor for TransactionalPreferenceTransformModifier(255, a4, a5, a3);
  type metadata accessor for _GraphValue();
  v38 = v6;
  v39 = v7;
  v40 = v9;
  v41 = v8;
  v42 = v24;
  v43 = v22;
  v44 = v21;
  v45 = v30;
  v46 = v10;
  v47 = v20;
  v48 = v19;
  v49 = v11;
  v50 = v12;
  v51 = v23;
  v52 = v13;
  LODWORD(v37) = _GraphValue.value.getter();
  HIDWORD(v37) = _ViewInputs.transaction.getter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  IsAnimated = type metadata accessor for IsAnimated(0, a4, a5, v14);
  v34 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsAnimated<A>, IsAnimated);
  v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v37, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v31, IsAnimated, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  static AGAttributeFlags.transactional.getter();
  v17 = AGGraphSetFlags();
  v37 = v27;
  v38 = v6;
  v39 = v7;
  v40 = v9;
  v41 = v8;
  v42 = v24;
  v43 = v22;
  v44 = v21;
  v45 = v30;
  v46 = v10;
  v47 = v20;
  v48 = v19;
  v49 = v11;
  v50 = v12;
  v51 = v23;
  v52 = v13;
  a2(&AssociatedTypeWitness, v17, &v37);
  v37 = v30;
  v38 = v10;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *a6 = AssociatedTypeWitness;
  result = v36;
  *((double *)a6 + 1) = v36;
  return result;
}

uint64_t initializeWithCopy for IncrementalFocusableFillerBoundsProvider(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of IncrementalFocusableFillerBoundsProvider(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider;
  if (!lazy protocol witness table cache variable for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalFocusableFillerBoundsProvider, &type metadata for IncrementalFocusableFillerBoundsProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider);
  }
  return result;
}

uint64_t static App.main()(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  uint64_t result;

  MEMORY[0x1E0C80A78](a1, a2);
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    runApp<A>(_:)();
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x6C63206120736920;
  v5._object = (void *)0xEC0000002E737361;
  String.append(_:)(v5);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance UIRectEdge(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance UIRectEdge@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIRectEdge(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

unint64_t lazy protocol witness table accessor for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PlatformViewRepresentableLayoutOptions, &type metadata for _PlatformViewRepresentableLayoutOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PlatformViewRepresentableLayoutOptions, &type metadata for _PlatformViewRepresentableLayoutOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PlatformViewRepresentableLayoutOptions, &type metadata for _PlatformViewRepresentableLayoutOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PlatformViewRepresentableLayoutOptions, &type metadata for _PlatformViewRepresentableLayoutOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PlatformViewRepresentableLayoutOptions, &type metadata for _PlatformViewRepresentableLayoutOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

uint64_t type metadata completion function for CollectionViewListDragAndDropController()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CollectionViewListDragAndDropController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CollectionViewListDragAndDropController);
}

ValueMetadata *type metadata accessor for AccessibilityRepresentableStyleModifier()
{
  return &type metadata for AccessibilityRepresentableStyleModifier;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac, (uint64_t)&type metadata for BorderedButtonStyle_CarMac, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle, (uint64_t)&type metadata for ToolbarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarButtonStyle and conformance SidebarButtonStyle, (uint64_t)&type metadata for SidebarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle, (uint64_t)&type metadata for ConditionallyBorderedStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle, (uint64_t)&type metadata for PlatformFallbackButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityLargeContentViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLargeContentViewModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for AccessibilityLargeContentViewModifier(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

double UIViewControllerRepresentableContext.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  double result;
  __int128 v18;

  v10 = (int *)type metadata accessor for UIViewControllerRepresentableContext(0, a2, a4, a4);
  v11 = v10[11];
  v13 = type metadata accessor for PlatformViewRepresentableContext(0, a3, a5, v12);
  v14 = a1 + *(int *)(v13 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a6, v14, AssociatedTypeWitness);
  *(_QWORD *)(a6 + v11) = protocol witness for ArchivedViewHostStates.count.getter in conformance _ArchivedViewHost<A, B>.LegacyStates();
  *(_QWORD *)(a6 + v10[9]) = specialized ReferenceFileDocumentConfiguration.document.getter();
  swift_retain();
  swift_retain();
  PlatformViewRepresentableContext.environment.getter(v13, v16, (uint64_t *)&v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  result = *(double *)&v18;
  *(_OWORD *)(a6 + v10[10]) = v18;
  return result;
}

uint64_t destroy for UIViewControllerRepresentableContext(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t type metadata completion function for UIViewControllerRepresentableContext()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIViewControllerRepresentableContext);
}

uint64_t UIViewControllerRepresentableContext.coordinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier;
  if (!lazy protocol witness table cache variable for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnPlatformContainerSelectionModifier, &type metadata for OnPlatformContainerSelectionModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
  }
  return result;
}

void base witness table accessor for _AttributeBody in UpdateCollectionViewListCoordinator<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for UpdateCollectionViewListCoordinator()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for CollectionViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  result = type metadata accessor for Optional();
  if (v4 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for ScrollableLayoutState()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpdateCollectionViewListCoordinator);
}

void partial apply for closure #1 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  closure #1 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)();
}

void closure #1 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_186F22754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 64);
  v6[2] = a1;
  type metadata accessor for Binding();
  v7 = type metadata accessor for Optional();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void partial apply for closure #2 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  closure #2 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)();
}

void closure #2 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_186F22818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v2 = v1 + *(int *)(a1 + 68);
  v6[2] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, (uint64_t)&type metadata for ListPadding, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[4];
}

void partial apply for closure #5 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  closure #5 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)();
}

void closure #5 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_186F228C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[14];

  v2 = v1 + *(int *)(a1 + 52);
  v7[2] = a1;
  v3 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_5, (uint64_t)v7, v3, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[4];
}

void partial apply for closure #3 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  closure #3 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)();
}

void closure #3 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_186F22970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  v2 = v1 + *(int *)(a1 + 56);
  v8[2] = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[4];
}

void partial apply for closure #4 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  closure #4 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)();
}

void closure #4 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)()
{
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_186F22A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[14];

  v2 = v1 + *(int *)(a1 + 60);
  v7[2] = a1;
  v3 = MEMORY[0x1E0DEF040];
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v3, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[4];
}

void UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(int a1@<W0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _DWORD *a8@<X8>)
{
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t updated;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  v23 = a5;
  v26 = a1;
  v12 = *a2;
  v13 = *a3;
  v14 = *((_DWORD *)a3 + 2);
  v36 = a3[2];
  v39 = *((_DWORD *)a3 + 6);
  v34 = *((_DWORD *)a3 + 7);
  v35 = v14;
  v33 = *((_DWORD *)a3 + 8);
  v42 = *((_DWORD *)a3 + 9);
  v30 = a3[5];
  v40 = a3[6];
  v41 = v13;
  v27 = *((_DWORD *)a3 + 14);
  LODWORD(v13) = *((_DWORD *)a3 + 15);
  v38 = *((_DWORD *)a3 + 16);
  v31 = *((_DWORD *)a3 + 17);
  v32 = v13;
  v29 = *((_DWORD *)a3 + 18);
  v28 = *((_DWORD *)a3 + 19);
  v37 = *((_DWORD *)a3 + 20);
  swift_unknownObjectWeakInit();
  updated = type metadata accessor for UpdateCollectionViewListCoordinator(0, a4, a6, v15);
  v17 = (char *)a8 + *(int *)(updated + 100);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for CollectionViewListDataSource(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  v20 = (id)AGSubgraphGetCurrent();
  if (v20)
  {
    v22[2] = v22;
    *(_QWORD *)((char *)a8 + *(int *)(updated + 104)) = v20;
    *a8 = v26;
    MEMORY[0x1E0C80A78](v20, v21);
    v47 = v12;
    v43 = v23;
    v44 = a4;
    v45 = a7;
    v46 = a6;
    type metadata accessor for CollectionViewListRoot();
  }
  __break(1u);
}

void type metadata completion function for UICollectionViewListCoordinatorBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 8);
  type metadata accessor for ShadowListUpdateRecorder(319, v4, v5, a4);
  if (v7 <= 0x3F)
  {
    type metadata accessor for ListCoreBatchUpdates(319, v4, v5, v6);
    if (v8 <= 0x3F)
    {
      type metadata accessor for Optional();
      if (v9 <= 0x3F)
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        if (v10 <= 0x3F)
        {
          type metadata accessor for Binding();
          type metadata accessor for Optional();
          if (v11 <= 0x3F)
            swift_initClassMetadata2();
        }
      }
    }
  }
}

void type metadata accessor for UICollectionViewListCoordinatorBase()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(_BYTE *)(v0 + 16), *(_QWORD **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
}

void closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(char a1, _QWORD *a2, void *a3, char a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  _QWORD v14[6];

  if ((a1 & 1) != 0)
  {
    performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a2, a3, a4 & 1);
  }
  else
  {
    v7 = (void *)objc_opt_self();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a2;
    *(_QWORD *)(v8 + 24) = a3;
    *(_BYTE *)(v8 + 32) = a4 & 1;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)partial apply;
    *(_QWORD *)(v9 + 24) = v8;
    v14[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    v14[5] = v9;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed () -> ();
    v14[3] = &block_descriptor_111;
    v10 = _Block_copy(v14);
    v11 = a2;
    v12 = a3;
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_performWithoutAnimation_, v10);
    _Block_release(v10);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

void partial apply for closure #3 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_layoutIfNeeded);
  UICollectionViewListCoordinatorBase.updateListContents(_:)(v1, v2, v3, v4);
}

uint64_t partial apply for performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  return performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t UICollectionViewListCoordinatorBase.recordInitialTransactionIfNeeded(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v5 = v4;
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *MEMORY[0x1E0DEEDD8] & *v4;
  v8 = *(_QWORD *)(v7 + 0x60);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 112) + 8);
  v10 = type metadata accessor for ShadowSectionCollection(0, v8, *(_QWORD *)(v9 + 8), a4);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = type metadata accessor for ShadowListDataSource(0, v8, v9, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = &v24[-v16];
  v18 = Transaction.animationIgnoringTransitionPhase.getter();
  result = swift_release();
  if (v18)
  {
    v20 = (char *)v5 + *(_QWORD *)((*v6 & *v5) + 0x88);
    swift_beginAccess();
    (*(void (**)(_BYTE *, char *, uint64_t))(v14 + 16))(v17, v20, v13);
    ShadowListDataSource.sectionIDs.getter(v13, v21, v22, v23);
  }
  return result;
}

uint64_t UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 96);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v2 + 104);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v4;
  v6 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x98));
  v7 = *v6;
  *v6 = (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:);
  v6[1] = v5;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
}

uint64_t UICollectionViewListCoordinatorBase.clearDataSourceUpdates()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  v3 = *(_QWORD *)(v2 + 0x60);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - v7;
  swift_beginAccess();
  type metadata accessor for ListCoreBatchUpdates(0, v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 112) + 8) + 8), v9);
  ListCoreBatchUpdates.resetAll()();
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v8, 1, 1, v3);
  v10 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xC8);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v10, v8, v4);
  return swift_endAccess();
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.dragAndDropController.getter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v6 = v5[12];
  v7 = v5[14];
  v8 = type metadata accessor for ShadowListDataSource(0, v6, *(_QWORD *)(v7 + 8), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v18 - v11;
  type metadata accessor for CollectionViewListDragAndDropController(0, v6, v7, v13);
  v14 = (char *)a1 + v5[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = specialized CollectionViewListDragAndDropController.__allocating_init(dataSource:dispatchUpdate:)(v12, partial apply for closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter, v15);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v16;
}

void @objc UICollectionViewListCoordinatorBase.numberOfSections(in:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a3;
  v5 = a1;
  specialized UICollectionViewListCoordinatorBase.numberOfSections(in:)((uint64_t)v5, v6, v7, v8);
}

void @objc UICollectionViewListCoordinatorBase.scrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  if (objc_msgSend(v4, sel_canBecomeFirstResponder)
    && (objc_msgSend(v4, sel_isFirstResponder) & 1) == 0
    && (objc_msgSend(v4, sel_isTracking) & 1) != 0)
  {
    objc_msgSend(v4, sel_becomeFirstResponder);
  }

}

ValueMetadata *type metadata accessor for HiddenModifierAllowingAccessibility()
{
  return &type metadata for HiddenModifierAllowingAccessibility;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityRepresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRepresentationModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityRepresentationModifier<A>@<X0>(uint64_t a1@<X1>, void (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t type metadata accessor for AccessibilityRepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRepresentationModifier);
}

uint64_t closure #1 in static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for AccessibilityRepresentationModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

void base witness table accessor for _AttributeBody in AccessibilityRepresentationModifier<A>.BridgedAttachment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for AccessibilityRepresentationModifier.BridgedAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRepresentationModifier.BridgedAttachment);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityRepresentationModifier<A>.ProxyModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;

  return AccessibilityRepresentationModifier.ProxyModifier.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void base witness table accessor for _AttributeBody in AccessibilityRepresentationModifier<A>.ProxyModifier()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for AccessibilityRepresentationModifier.ProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRepresentationModifier.ProxyModifier);
}

uint64_t AccessibilityRepresentationModifier.ProxyModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Value;
  uint64_t v12;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, a2);
  return AccessibilityProxyModifier.init(_:)((uint64_t)v9, a2, a3, a4);
}

ValueMetadata *type metadata accessor for WithCurrentHostingControllerAction()
{
  return &type metadata for WithCurrentHostingControllerAction;
}

ValueMetadata *type metadata accessor for WindowGroupConfigurationAttributes()
{
  return &type metadata for WindowGroupConfigurationAttributes;
}

void base witness table accessor for Equatable in OptionalSelectionManagerProjection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationDestinationScopeModifier()
{
  lazy protocol witness table accessor for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationDestinationScopeModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = a2[6];
  v8 = *((_DWORD *)a2 + 20);
  v20 = *a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v6;
  v25 = v7;
  v26 = *(_OWORD *)(a2 + 7);
  v27 = a2[9];
  v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove<A>(_:)();
  v11 = v20;
  v12 = v21;
  v13 = v5;
  v14 = v23;
  v15 = v6;
  v16 = v7;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

ValueMetadata *type metadata accessor for ButtonDefaultRenderingModeModifier()
{
  return &type metadata for ButtonDefaultRenderingModeModifier;
}

unint64_t lazy protocol witness table accessor for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier;
  if (!lazy protocol witness table cache variable for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonDefaultRenderingModeModifier, &type metadata for ButtonDefaultRenderingModeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticTextFieldLabelDisplayMode()
{
  return &type metadata for AutomaticTextFieldLabelDisplayMode;
}

unint64_t lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider;
  if (!lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6738], MEMORY[0x1E0CE6748]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextFieldLabelDisplayModeModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TextFieldLabelDisplayModeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static TextFieldLabelDisplayModeModifier._makeInputs(modifier:inputs:)(a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

ValueMetadata *type metadata accessor for SharingActivityPickerPresentation()
{
  return &type metadata for SharingActivityPickerPresentation;
}

void one-time initialization function for defaultValue()
{
  static SharingActivityPickerPresentation.Key.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static BridgedPopUpButtonPreferenceKey.defaultValue = 0;
  byte_1ECE1FEE8 = 1;
}

{
  static ContentScrollViewPreferenceKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static InspectorAnchorPreferenceKey.defaultValue = MEMORY[0x1E0DEE9E0];
}

{
  static NavigationDestinationsKey.defaultValue = MEMORY[0x1E0DEE9E0];
}

{
  static BridgedEnvironmentKeysKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static AccessibilityNodesKey.defaultValue = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)algn_1ECE20318 = 0;
}

{
  static AlwaysOnTimelinesKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static PopoverPresentation.Key.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static ConfirmationDialog.PreferenceKey.defaultValue = MEMORY[0x1E0DEE9E0];
}

{
  static EnvironmentValues.HostingControllerManagedBarsKey.defaultValue = MEMORY[0x1E0DEE9E8];
}

{
  static InspectorStorage.PreferenceKey.defaultValue = MEMORY[0x1E0DEE9E0];
}

{
  static AlertStorage.PreferenceKey.defaultValue = MEMORY[0x1E0DEE9E0];
}

{
  static NascentViewDestinationsExtractor.Key.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static MultimodalBadgeInfoKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static ArchivableMutationsKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static SceneSessionKey.defaultValue = 0;
  byte_1EDE1C0E0 = 1;
}

{
  static _GraphInputs.IsFocusSystemEnabledKey.defaultValue = *MEMORY[0x1E0CFED28];
}

{
  static SceneStorageValuesKey.defaultValue = 0;
  byte_1EDE23580 = 1;
}

{
  static UpdateViewDestinationRequest.UpdateViewDestinationRequestKey.defaultValue = MEMORY[0x1E0DEE9E0];
}

{
  static NavigationDestinationKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static FocusableBounds.Key.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static FocusableFillerBounds.Key.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v0;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  static ButtonStyleInput.defaultValue = v0;
  *(_QWORD *)algn_1ECE1FED8 = &protocol witness table for ButtonStyleTypeBox<A>;
}

{
  uint64_t v0;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  static EffectiveButtonStyleInput.defaultValue = v0;
  *(_QWORD *)algn_1EDEFFD78 = &protocol witness table for ButtonStyleTypeBox<A>;
}

{
  static PlatformItemList.Key.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static EnvironmentValues.DocumentCommandsKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static OrnamentPresentation.Key.defaultValue = MEMORY[0x1E0DEE9E0];
}

{
  static GridBadgeInfoEnvironmentKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static ResponderCommandsKey.defaultValue = MEMORY[0x1E0DEE9E0];
}

{
  static _GraphInputs.NavigationPresentationAdaptorKey.defaultValue = *MEMORY[0x1E0CFED28];
}

{
  static TabPopoverPresentationsKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static SwipeActions.TraitKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static PlatformItems.Key.defaultValue = 0;
  dword_1EDDD4C00 = 0;
  qword_1EDDD4C08 = MEMORY[0x1E0DEE9D8];
}

{
  static GridMetadata.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static DigitalCrownViewKey.defaultValue = 0;
  *(_QWORD *)algn_1EDF002E8 = 0;
  dword_1EDF002F0 = 0;
}

{
  static AccessibilityProperties.ActionsKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static AccessibilityProperties.ImagesKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static UINavigationItemAdaptorKey.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static SceneList.Key.defaultValue = MEMORY[0x1E0DEE9D8];
}

{
  static UIKitHostContainerFocusItemInput.defaultValue = *MEMORY[0x1E0CFED28];
}

ValueMetadata *type metadata accessor for ResolvedTextFieldLabelDisplayMode()
{
  return &type metadata for ResolvedTextFieldLabelDisplayMode;
}

uint64_t type metadata completion function for PrimitiveButtonStyleConfiguration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ButtonAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for PlatformItemListTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformItemListTransformModifier);
}

uint64_t type metadata accessor for PlatformItemListTransformModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformItemListTransformModifier.Transform);
}

uint64_t getEnumTagSinglePayload for NavigationDestinationPresentation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

ValueMetadata *type metadata accessor for NavigationDestinationPresentation()
{
  return &type metadata for NavigationDestinationPresentation;
}

ValueMetadata *type metadata accessor for InferredToolbarUserDefaultFeature()
{
  return &type metadata for InferredToolbarUserDefaultFeature;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance InferredToolbarUserDefaultFeature()
{
  lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
  return static UserDefaultKeyedFeature.isEnabled.getter();
}

unint64_t lazy protocol witness table accessor for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider;
  if (!lazy protocol witness table cache variable for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusDelegationPreferenceProvider, &unk_1E1B02BF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider);
  }
  return result;
}

void *type metadata accessor for CollectionViewGroupedListsEnabled()
{
  return &unk_1E1B027B0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance CollectionViewGroupedListsEnabled()
{
  char v0;
  char v2;

  PropertyList.subscript.getter();
  if (v2 == 1 && (static InterfaceIdiomPredicate.evaluate(inputs:)() & 1) == 0)
  {
    lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature();
    v0 = static UserDefaultKeyedFeature.isEnabled.getter() ^ 1;
  }
  else
  {
    v0 = 0;
  }
  return v0 & 1;
}

_QWORD *initializeBufferWithCopyOfBuffer for DisplayList.AccessibilityUpdater.CacheValue(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for AccessibilityListCoreCellModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityListCoreCellModifier);
}

ValueMetadata *type metadata accessor for UIHostingControllerSizingOptions()
{
  return &type metadata for UIHostingControllerSizingOptions;
}

void static UIHostingControllerSizingOptions.intrinsicContentSize.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void one-time initialization function for idealSizeOptions()
{
  static UIHostingControllerSizingOptions.idealSizeOptions = 3;
}

uint64_t destroy for _PresentationTransitionOutputs(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for _PresentationTransitionOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for PresentedSceneValueInputModifier(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      outlined destroy of AnyHashable(a1);
      v5 = *((_QWORD *)a2 + 4);
      v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  return a1;
}

double one-time initialization function for defaultValue()
{
  double result;

  static PresentationOptionsPreferenceKey.defaultValue = MEMORY[0x1E0DEE9E8];
  result = 0.0;
  unk_1ECE201C0 = 0u;
  unk_1ECE201D0 = 0u;
  word_1ECE201E0 = 1542;
  qword_1ECE201E8 = 2;
  word_1ECE201F0 = 3;
  byte_1ECE201F2 = 0;
  qword_1ECE201F8 = 0;
  byte_1ECE20200 = 1;
  qword_1ECE20208 = 0;
  word_1ECE20210 = 513;
  xmmword_1ECE20218 = 0u;
  unk_1ECE20228 = 0u;
  unk_1ECE20231 = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  static PPTTestCaseEnvironmentKey.defaultValue = xmmword_187BF9840;
  qword_1ECE1FE78 = 0;
  unk_1ECE1FE80 = 0;
  qword_1ECE1FE70 = 0;
  dword_1ECE1FE88 = 0;
  return result;
}

{
  double result;

  result = 0.0;
  unk_1ECE20051 = 0u;
  xmmword_1ECE20038 = 0u;
  unk_1ECE20048 = 0u;
  xmmword_1ECE20018 = 0u;
  unk_1ECE20028 = 0u;
  static SheetPreference.defaultValue = 0u;
  unk_1ECE20008 = 0u;
  byte_1ECE20061 = 2;
  return result;
}

{
  double result;

  result = 0.0;
  static ToolbarKey.defaultValue = 0u;
  *(_OWORD *)&qword_1ECE20150 = 0u;
  qword_1ECE20160 = 0;
  unk_1ECE20168 = MEMORY[0x1E0DEE9D8];
  byte_1ECE20170 = 1;
  qword_1ECE20178 = MEMORY[0x1E0DEE9E8];
  return result;
}

{
  double result;

  result = 0.0;
  static ListRowInsetsKey.defaultValue = 0u;
  unk_1EDDD2280 = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  static EffectiveListRowInsetsKey.defaultValue = 0u;
  unk_1EDE18808 = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  xmmword_1EDEFFF48 = 0u;
  unk_1EDEFFF58 = 0u;
  static DropOntoTraitKey.defaultValue = 0u;
  return result;
}

{
  double result;

  qword_1EDDFC418 = 0;
  result = 0.0;
  static ToolbarItemPlacementKey.defaultValue = 0u;
  unk_1EDDFC408 = 0u;
  byte_1EDDFC420 = 2;
  return result;
}

{
  double result;

  static NavigationTransitionKey.defaultValue = 0u;
  unk_1EDEFFD00 = 0u;
  *(_QWORD *)&result = 1;
  xmmword_1EDEFFD10 = xmmword_187BFE310;
  return result;
}

{
  double result;

  result = 0.0;
  static ToolbarContentKey.defaultValue = 0u;
  *(_OWORD *)&qword_1EDEFFE38 = 0u;
  qword_1EDEFFE48 = 0;
  unk_1EDEFFE50 = MEMORY[0x1E0DEE9D8];
  byte_1EDEFFE58 = 1;
  qword_1EDEFFE60 = MEMORY[0x1E0DEE9E8];
  return result;
}

{
  double result;

  qword_1EDE37428 = 0;
  result = 0.0;
  xmmword_1EDE37408 = 0u;
  unk_1EDE37418 = 0u;
  xmmword_1EDE373E8 = 0u;
  unk_1EDE373F8 = 0u;
  static ControlGroupCollapsedViewKey.defaultValue = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  xmmword_1EDE38BE0 = 0u;
  unk_1EDE38BF0 = 0u;
  xmmword_1EDE38BC0 = 0u;
  unk_1EDE38BD0 = 0u;
  xmmword_1EDE38BA0 = 0u;
  unk_1EDE38BB0 = 0u;
  xmmword_1EDE38B80 = 0u;
  unk_1EDE38B90 = 0u;
  static _IdentifiedViewsKey.defaultValue = 0u;
  *(_OWORD *)algn_1EDE38B70 = 0u;
  byte_1EDE38C00 = 2;
  return result;
}

{
  double result;

  qword_1EDE3A0C8 = 0;
  result = 0.0;
  static TextInputValidationKey.defaultValue = 0u;
  unk_1EDE3A0B8 = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  xmmword_1EDE3BF80 = 0u;
  unk_1EDE3BF90 = 0u;
  xmmword_1EDE3BF60 = 0u;
  unk_1EDE3BF70 = 0u;
  static EnvironmentValues.ToolbarUpdateContextKey.defaultValue = 0u;
  *(_OWORD *)algn_1EDE3BF50 = 0u;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  v0 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v3, (uint64_t *)v5);
  static HeaderFooterConfigurationKey.defaultValue = 0;
  qword_1EDE3CFA8 = 0;
  word_1EDE3CFB0 = 0;
  *(_OWORD *)&qword_1EDE3CFB8 = v5[0];
  unk_1EDE3CFC8 = v5[1];
  result = *(double *)&v6;
  unk_1EDE3CFD8 = v6;
  return result;
}

{
  double result;

  result = 0.0;
  xmmword_1EDEFFA80 = 0u;
  unk_1EDEFFA90 = 0u;
  static FocusDelegationPreferenceKey.defaultValue = 0u;
  qword_1EDEFFAA0 = 1;
  dword_1EDEFFAA8 = 0;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _DefaultForegroundStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DefaultForegroundStyleModifier<A>, a5);
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _DefaultForegroundStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DefaultForegroundStyleModifier<A>, a5);
  return static ViewInputsModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _DefaultForegroundStyleModifier<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static _DefaultForegroundStyleModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for BorderlessButtonLabelShapeStyle<TintShapeStyle>, MEMORY[0x1E0CE2A98], MEMORY[0x1E0CE2A88], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BorderlessButtonLabelShapeStyle);
    v4 = type metadata accessor for _DefaultForegroundStyleModifier(a1, v2, (uint64_t)&protocol witness table for BorderlessButtonLabelShapeStyle<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>);
  }
}

void type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for BorderlessButtonLabelShapeStyle<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BorderlessButtonLabelShapeStyle);
    v4 = type metadata accessor for _DefaultForegroundStyleModifier(a1, v2, (uint64_t)&protocol witness table for BorderlessButtonLabelShapeStyle<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>);
  }
}

uint64_t type metadata completion function for AccessibilityOptionalRotorContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for _DefaultForegroundStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DefaultForegroundStyleModifier);
}

double protocol witness for Rule.value.getter in conformance _DefaultForegroundStyleModifier<A>.DefaultForegroundStyleEnvironment@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void base witness table accessor for _AttributeBody in _DefaultForegroundStyleModifier<A>.DefaultForegroundStyleEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment);
}

uint64_t partial apply for closure #1 in _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter(a1);
}

uint64_t closure #1 in _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  swift_retain();
  swift_retain();
  v2 = ShapeStyle.copyStyle(name:in:foregroundStyle:)();
  swift_release();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t type metadata completion function for UICollectionViewListCoordinator()
{
  return swift_initClassMetadata2();
}

id UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(char a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  id v10;
  Class isa;
  uint64_t v13;

  swift_getObjectType();
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC35D8]), sel_init);
  v13 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 1) != 0)
  {
    v3 = (void *)objc_opt_self();
    v4 = objc_msgSend(v3, sel_fractionalWidthDimension_, 1.0);
    if (one-time initialization token for tableHeaderMinHeight != -1)
      swift_once();
    v5 = objc_msgSend(v3, sel_absoluteDimension_, *(double *)&static ListMetrics.tableHeaderMinHeight);
    v6 = objc_msgSend((id)objc_opt_self(), sel_sizeWithWidthDimension_heightDimension_, v4, v5);

    v7 = static UICollectionViewListCoordinatorBase.globalHeaderKind.getter();
    v8 = (void *)MEMORY[0x18D75CC88](v7);
    swift_bridgeObjectRelease();
    v9 = objc_msgSend((id)objc_opt_self(), sel_boundarySupplementaryItemWithLayoutSize_elementKind_alignment_, v6, v8, 1);

    objc_msgSend(v9, sel_setZIndex_, 199);
    objc_msgSend(v9, sel_setPinToVisibleBounds_, 1);
    objc_msgSend(v9, sel_setExtendsBoundary_, 0);
    v10 = v9;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutBoundarySupplementaryItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setBoundarySupplementaryItems_, isa);

  return v2;
}

id UICollectionViewListCoordinator.createLayout(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  _QWORD aBlock[6];

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = type metadata accessor for ShadowListDataSource(0, v6[92], *(_QWORD *)(v6[94] + 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&aBlock[-1] - v10;
  v12 = *a1;
  v13 = a1[1];
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v4;
  v14[3] = v12;
  v14[4] = v13;
  v15 = (char *)v4 + v6[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v15, v7);
  swift_retain();
  v4;
  swift_retain();
  v16 = ShadowListDataSource.hasGlobalHeader.getter(v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v17 = UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(v16 & 1);
  v18 = objc_allocWithZone(MEMORY[0x1E0DC35D0]);
  aBlock[4] = partial apply for closure #1 in UICollectionViewListCoordinator.createLayout(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?);
  aBlock[3] = &block_descriptor_12_1;
  v19 = _Block_copy(aBlock);
  v20 = objc_msgSend(v18, sel_initWithSectionProvider_configuration_, v19, v17);

  _Block_release(v19);
  swift_release();
  return v20;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedConfiguration, &unk_1E1AFFB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedConfiguration, &unk_1E1AFFB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedConfiguration()
{
  lazy protocol witness table accessor for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration();
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata completion function for BorderlessButtonLabelShapeStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BorderlessButtonLabelShapeStyle);
}

ValueMetadata *type metadata accessor for AccessibilityRequestFocusAction()
{
  return &type metadata for AccessibilityRequestFocusAction;
}

uint64_t initializeWithCopy for _IncrementalLayout_PlacedChild(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Font?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  }
}

void type metadata completion function for UpdateCoalescingCollectionView()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t UpdateCoalescingCollectionView.bounds.setter(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *updated;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  int v27;
  int v28;
  objc_super v29;
  objc_super v30;
  CGRect v31;
  CGRect v32;

  updated = (objc_class *)type metadata accessor for UpdateCoalescingCollectionView(0);
  v30.receiver = v4;
  v30.super_class = updated;
  objc_msgSendSuper2(&v30, sel_bounds);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v29.receiver = v4;
  v29.super_class = updated;
  result = (uint64_t)objc_msgSendSuper2(&v29, sel_setBounds_, a1, a2, a3, a4);
  v19 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates;
  v20 = *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  v21 = __CFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v22;
  objc_msgSend(v4, sel_bounds);
  v32.origin.x = v23;
  v32.origin.y = v24;
  v32.size.width = v25;
  v32.size.height = v26;
  v31.origin.x = v11;
  v31.origin.y = v13;
  v31.size.width = v15;
  v31.size.height = v17;
  result = CGRectEqualToRect(v31, v32);
  if ((result & 1) == 0)
    result = specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  v27 = *(_DWORD *)&v4[v19];
  v21 = v27 != 0;
  v28 = v27 - 1;
  if (!v21)
    goto LABEL_11;
  *(_DWORD *)&v4[v19] = v28;
  if (!v28 && v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] == 1)
    return specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  return result;
}

id UpdateCoalescingCollectionView.init(frame:collectionViewLayout:)(void *a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  objc_super v21;

  v11 = (uint64_t *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  v12 = swift_allocObject();
  *v11 = v12;
  v11[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper] = 0;
  v13 = &v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v14 = &v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate];
  *v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations] = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = 0;
  *(_BYTE *)(v12 + 16) = 0;
  v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] = 0;
  v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingScrollTarget] = 0;
  v15 = &v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem];
  v16 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__lastUpdateSeed;
  type metadata accessor for MutableBox<UInt32>();
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 0;
  *(_QWORD *)&v5[v17] = v18;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_bridgedState] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_phaseState] = 0;
  v21.receiver = v5;
  v21.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  v19 = objc_msgSendSuper2(&v21, sel_initWithFrame_collectionViewLayout_, a1, a2, a3, a4, a5);
  objc_msgSend(v19, sel__setShouldSkipForcedLayoutBeforeBatchUpdates_, 1);

  return v19;
}

id UpdateCoalescingCollectionView.canBecomeFirstResponder.getter()
{
  char *v0;
  id result;
  uint64_t v2;
  uint64_t v3;
  int v4;
  objc_super v5;

  result = objc_msgSend(v0, sel_isScrollEnabled);
  if ((_DWORD)result)
  {
    v5.receiver = v0;
    v5.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
    result = objc_msgSendSuper2(&v5, sel_canBecomeFirstResponder);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper];
      if (v2
        && (v3 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties,
            swift_beginAccess(),
            v4 = *(unsigned __int8 *)(v3 + 88),
            v4 != 2))
      {
        return (id)(v4 & 1);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

Swift::Void __swiftcall UpdateCoalescingCollectionView.didMoveToWindow()()
{
  char *v0;
  id v1;
  void *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t ObjectType;
  uint64_t v10;
  objc_super v11;

  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  objc_msgSendSuper2(&v11, sel_didMoveToWindow);
  v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {

    v2 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper];
    if (v2)
    {
      v3 = v2;
      _UIUpdateCycleRegisterIdleObserver();
      v4 = &v3[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
      swift_beginAccess();
      if (((*((_DWORD *)v4 + 32) | *((_DWORD *)v4 + 26)) & 1) != 0)
      {
        v5 = (char *)MEMORY[0x18D760234](&v3[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView]);
        objc_msgSend(v5, sel_flashScrollIndicators);

        v3 = v5;
      }

    }
    v6 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
    if ((v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize + 16] & 1) == 0)
    {
      v7 = specialized UIView.firstAncestorWhere(_:)(v0);
      if (v7)
      {
        v8 = v7;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
        v6[16] = 1;
        ObjectType = swift_getObjectType();
        v10 = swift_conformsToProtocol2();
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);

        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  else if (*(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper])
  {
    _UIUpdateCycleUnregisterIdleObserver();
  }
}

uint64_t ToolbarSafeAreaTransitionState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ToolbarSafeAreaTransitionState()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for defaultValue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  static ScrollEnvironmentPropertiesKey.defaultValue = 257;
  dword_1ECDFD09C = 0;
  unk_1ECDFD050 = 0u;
  unk_1ECDFD060 = 0u;
  unk_1ECDFD070 = 0u;
  unk_1ECDFD080 = 0u;
  unk_1ECDFD08B = 0u;
  word_1ECDFD0A0 = 1;
  byte_1ECDFD0A8 = 0;
  qword_1ECDFD0B0 = 0;
  word_1ECDFD0B8 = 0;
  byte_1ECDFD0C0 = 0;
  qword_1ECDFD0C8 = 0;
  word_1ECDFD0D0 = 0;
  static EdgeInsets.zero.getter();
  qword_1ECDFD0D8 = v0;
  unk_1ECDFD0E0 = v1;
  qword_1ECDFD0E8 = v2;
  unk_1ECDFD0F0 = v3;
  result = static EdgeInsets.zero.getter();
  qword_1ECDFD0F8 = v5;
  unk_1ECDFD100 = v6;
  qword_1ECDFD108 = v7;
  unk_1ECDFD110 = v8;
  return result;
}

{
  uint64_t result;

  static Semantics.v4.getter();
  result = isLinkedOnOrAfter(_:)();
  static ExpandedSplitViewKey.defaultValue = (result & 1) == 0;
  return result;
}

{
  qword_1EDE04758 = 0;
  return swift_unknownObjectWeakInit();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  char *v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[4];

  v0 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for CellConfiguration();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v8, static CellConfigurationKey.defaultValue);
  v9 = __swift_project_value_buffer((uint64_t)v4, (uint64_t)static CellConfigurationKey.defaultValue);
  v10 = type metadata accessor for UICellConfigurationState();
  v11 = (void (*)(uint64_t))MEMORY[0x1E0DC2020];
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v12(v7, 1, 1, v10);
  v7[v4[7]] = 2;
  outlined destroy of IntelligenceElement?((uint64_t)v7, &lazy cache variable for type metadata for UICellConfigurationState?, v11);
  v12(v7, 1, 1, v10);
  v7[v4[5]] = 0;
  static UIListContentConfiguration.cell()();
  specialized CellConfiguration.Values.init(_:)((uint64_t)v3, (uint64_t *)v17);
  v13 = &v7[v4[9]];
  v14 = v17[1];
  *(_OWORD *)v13 = v17[0];
  *((_OWORD *)v13 + 1) = v14;
  v15 = v17[3];
  *((_OWORD *)v13 + 2) = v17[2];
  *((_OWORD *)v13 + 3) = v15;
  v7[v4[6]] = 0;
  *(_QWORD *)&v7[v4[8]] = 0;
  return outlined init with take of CellConfiguration((uint64_t)v7, v9);
}

{
  return static Binding.constant(_:)();
}

{
  swift_weakInit();
  return swift_weakAssign();
}

{
  return swift_weakInit();
}

{
  if (one-time initialization token for default != -1)
    swift_once();
  static SegmentedControlStyleKey.defaultValue = static AnySegmentedControlStyle.default;
  return swift_retain();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for TableColumnAlignment(0);
  __swift_allocate_value_buffer(v0, static TableColumnAlignment.Key.defaultValue);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static TableColumnAlignment.Key.defaultValue);
  v2 = type metadata accessor for Locale.NumberingSystem();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 5, v2);
}

{
  uint64_t result;
  _BYTE v1[216];

  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v1);
  xmmword_1EDEFF950 = 0u;
  unk_1EDEFF960 = 0u;
  xmmword_1EDEFF970 = 0u;
  unk_1EDEFF980 = xmmword_187BFE310;
  static TabItem.TraitKey.defaultValue = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultValue;
  *(_QWORD *)algn_1EDEFF868 = 0;
  dword_1EDEFF870 = 0;
  result = outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v1, (uint64_t)&unk_1EDEFF878);
  qword_1EDEFF990 = 0;
  byte_1EDEFF998 = 1;
  qword_1EDEFF9A0 = 0;
  unk_1EDEFF9A8 = 0;
  return result;
}

{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t result;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_currentTraitCollection);
  v2 = objc_msgSend(v1, sel_horizontalSizeClass);

  v3 = objc_msgSend(v0, sel_currentTraitCollection);
  v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

  result = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v2, (uint64_t)v4, 2u);
  static EnvironmentValues.SearchSuggestionsPlacementKey.defaultValue = (result == 2) | result & 1;
  return result;
}

{
  return OptionalEdgeInsets.init()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  v1 = v0;
  __swift_allocate_value_buffer(v0, static DocumentConfigurationEnvironmentKey.defaultValue);
  v2 = __swift_project_value_buffer(v1, (uint64_t)static DocumentConfigurationEnvironmentKey.defaultValue);
  v3 = type metadata accessor for DocumentConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, (void (*)(uint64_t))type metadata accessor for TabContextMenuKey.Storage);
  v1 = v0;
  __swift_allocate_value_buffer(v0, static TabContextMenuKey.defaultValue);
  v2 = __swift_project_value_buffer(v1, (uint64_t)static TabContextMenuKey.defaultValue);
  v3 = type metadata accessor for TabContextMenuKey.Storage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

{
  return swift_weakInit();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  v1 = v0;
  __swift_allocate_value_buffer(v0, static WidgetAuxiliaryCurvedContentKey.defaultValue);
  v2 = __swift_project_value_buffer(v1, (uint64_t)static WidgetAuxiliaryCurvedContentKey.defaultValue);
  v3 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

{
  uint64_t result;

  if (one-time initialization token for bottom != -1)
    result = swift_once();
  static PositionKey.defaultValue = static JindoTripleVStack.Position.bottom;
  qword_1EDDD3F60 = qword_1EDDD4038;
  byte_1EDDD3F68 = byte_1EDDD4040;
  qword_1EDDD3F70 = qword_1EDDD4048;
  byte_1EDDD3F78 = byte_1EDDD4050;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  v1 = v0;
  __swift_allocate_value_buffer(v0, static TabViewCustomization.Key.defaultValue);
  v2 = __swift_project_value_buffer(v1, (uint64_t)static TabViewCustomization.Key.defaultValue);
  type metadata accessor for Binding<TabViewCustomization>(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v1 = v0;
  __swift_allocate_value_buffer(v0, static SearchFieldConfiguration.Key.defaultValue);
  v2 = __swift_project_value_buffer(v1, (uint64_t)static SearchFieldConfiguration.Key.defaultValue);
  v3 = type metadata accessor for SearchFieldConfiguration.Data(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

{
  swift_unknownObjectWeakInit();
  return swift_unknownObjectWeakAssign();
}

void *type metadata accessor for ResolvedScrollBehaviorModifier()
{
  return &unk_1E1AFDBA8;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResolvedScrollBehaviorModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

unint64_t lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment;
  if (!lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedScrollBehaviorModifier.TrackedEnvironment, &unk_1E1AFDB18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment;
  if (!lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedScrollBehaviorModifier.UpdateEnvironment, &unk_1E1AFDA90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior;
  if (!lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedScrollBehaviorModifier.MakeBehavior, &unk_1E1AFDA10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior);
  }
  return result;
}

uint64_t ResolvedScrollBehaviorModifier.MakeBehavior.updateValue()()
{
  uint64_t OutputValue;
  uint64_t result;
  char v2;
  char v3;
  _BYTE v4[24];
  uint64_t v5;
  _BYTE v6[24];
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  OutputValue = AGGraphGetOutputValue();
  ResolvedScrollBehaviorModifier.MakeBehavior.defaultBehavior.getter((uint64_t)v6);
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)v6, (uint64_t)v4);
  if (!v5)
  {
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v4);
    if (OutputValue)
      return outlined destroy of ResolvedScrollBehavior?((uint64_t)v6);
    goto LABEL_4;
  }
  result = outlined destroy of ResolvedScrollBehavior?((uint64_t)v4);
  if (v7)
  {
    AGGraphGetValue();
    v3 = v2;
    v8 = *(_BYTE *)AGGraphGetValue();
    v9 = 0;
    v10 = AGCreateWeakAttribute();
    if ((v3 & 1) == 0)
      return outlined destroy of ResolvedScrollBehavior?((uint64_t)v6);
LABEL_4:
    outlined init with copy of ResolvedScrollBehavior?((uint64_t)v6, (uint64_t)v4);
    AGGraphSetOutputValue();
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v4);
    return outlined destroy of ResolvedScrollBehavior?((uint64_t)v6);
  }
  __break(1u);
  return result;
}

_BYTE *ResolvedScrollBehaviorModifier.MakeBehavior.defaultBehavior.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE *result;
  uint64_t v3;

  result = (_BYTE *)AGGraphGetValue();
  if (*result)
  {
    if (*(_QWORD *)(AGGraphGetValue() + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release();
    outlined init with take of ResolvedScrollBehavior?((uint64_t)&v3, a1);
    swift_release();
    return (_BYTE *)swift_release();
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResetScrollEnvironmentModifier()
{
  return &type metadata for ResetScrollEnvironmentModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetScrollEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier);
}

ValueMetadata *type metadata accessor for ProvidesContextMenuInteraction()
{
  return &type metadata for ProvidesContextMenuInteraction;
}

uint64_t destroy for ActionsLayout(uint64_t a1)
{
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for OpacityButtonHighlightModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for OpacityButtonHighlightModifier()
{
  return &type metadata for OpacityButtonHighlightModifier;
}

unint64_t lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier;
  if (!lazy protocol witness table cache variable for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OpacityButtonHighlightModifier, &type metadata for OpacityButtonHighlightModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ExternalGestureActionModifier()
{
  return static ViewModifier.makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalCollectedPlacements()
{
  lazy protocol witness table accessor for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements();
  return static AsyncAttribute.flags.getter();
}

uint64_t outlined release of HostingScrollViewUpdateContext(uint64_t a1)
{
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(*(_QWORD *)(a1 + 64));
  return a1;
}

uint64_t outlined retain of HostingScrollViewUpdateContext(uint64_t a1)
{
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(*(_QWORD *)(a1 + 64));
  return a1;
}

unint64_t outlined consume of HostingScrollViewUpdateContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t result;

  result = a9;
  if ((~a9 & 0xF000000000000004) != 0)
    return outlined consume of SystemScrollLayoutState.ContentOffsetMode(a9);
  return result;
}

void *type metadata accessor for HostingContentViewRootModifier()
{
  return &unk_1E1B19BE0;
}

unint64_t lazy protocol witness table accessor for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier;
  if (!lazy protocol witness table cache variable for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingContentViewRootModifier, &unk_1E1B19BE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusableFillerBoundsTransform and conformance FocusableFillerBoundsTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusableFillerBoundsTransform and conformance FocusableFillerBoundsTransform;
  if (!lazy protocol witness table cache variable for type FocusableFillerBoundsTransform and conformance FocusableFillerBoundsTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusableFillerBoundsTransform, &unk_1E1AFCED8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableFillerBoundsTransform and conformance FocusableFillerBoundsTransform);
  }
  return result;
}

uint64_t assignWithCopy for ContainerRelativeFrameModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ContainerRelativeFrameModifier()
{
  return &type metadata for ContainerRelativeFrameModifier;
}

uint64_t static ContainerRelativeFrameModifier._makeView(modifier:inputs:body:)()
{
  _ViewInputs.scrollableContainerSize.getter();
  type metadata accessor for _GraphValue<ContainerRelativeFrameModifier>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout;
  if (!lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerRelativeFrameModifier.MakeLayout, &unk_1E1AFCA60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout;
  if (!lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerRelativeFrameModifier.MakeLayout, &unk_1E1AFCA60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ContainerRelativeFrameModifier.MakeLayout()
{
  lazy protocol witness table accessor for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout();
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier;
  if (!lazy protocol witness table cache variable for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonFocusInteractionModifier, &type metadata for ButtonFocusInteractionModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier);
  }
  return result;
}

uint64_t static UIViewControllerRepresentable._makeView(view:inputs:)@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  int v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = a1[3];
  v30 = a1[2];
  v31 = v7;
  v32 = a1[4];
  v33 = *((_DWORD *)a1 + 20);
  v8 = a1[1];
  v28 = *a1;
  v29 = v8;
  v34[0] = v28;
  v34[1] = v8;
  v34[2] = v30;
  outlined retain of _GraphInputs((uint64_t)v34);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v34);
  if (v22 == 1)
  {
    _StringGuts.grow(_:)(119);
    v9._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000075;
    v10._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v10);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v22 = v31;
    DWORD2(v22) = DWORD2(v31);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      LODWORD(v19) = v22;
      _ViewInputs.pushIdentity(_:)();
      v24 = v30;
      v25 = v31;
      v26 = v32;
      v27 = v33;
      v23 = v29;
      DWORD1(v22) = _ViewInputs.animatedPosition()();
      DWORD2(v22) = _ViewInputs.animatedSize()();
      HIDWORD(v22) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v22) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    goto LABEL_7;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    v13 = type metadata accessor for PlatformViewControllerRepresentableAdaptor(0, a2, a3, v12);
    type metadata accessor for _GraphValue();
    _GraphValue.unsafeBitCast<A>(to:)();
    v24 = v30;
    v25 = v31;
    v26 = v32;
    v27 = v33;
    v22 = v28;
    v23 = v29;
    v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v13);
    static PlatformViewRepresentable._makeView(view:inputs:)(&v19, (uint64_t)&v22, v13, v14, v21);
    *(_QWORD *)&v22 = v31;
    DWORD2(v22) = DWORD2(v31);
    v19 = v31;
    v20 = DWORD2(v31);
    MEMORY[0x1E0C80A78](v15, v16);
    outlined retain of [Text.Modifier]((uint64_t)&v22);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
LABEL_7:
    *a4 = v21[0];
    a4[1] = v21[1];
    return result;
  }
  _StringGuts.grow(_:)(54);
  v17._object = (void *)0x8000000187BE3E30;
  v17._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v17);
  v18._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)()
{
  return 0;
}

uint64_t initializeWithCopy for UIKitHostedFocusItemLifecycle(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_unknownObjectWeakCopyInit();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle;
  if (!lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitHostedFocusItemLifecycle, &type metadata for UIKitHostedFocusItemLifecycle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle);
  }
  return result;
}

uint64_t UIKitHostedFocusItemLifecycle.init(inputs:responder:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  v7 = *a1;
  swift_unknownObjectWeakInit();
  *(_DWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 44) = 2;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_BYTE *)(a3 + 80) = 1;
  *(_OWORD *)(a3 + 88) = 0u;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(a3 + 104) = 0u;
  *(_QWORD *)(a3 + 120) = v4;
  *(_DWORD *)a3 = _ViewInputs.viewPhase.getter();
  *(_DWORD *)(a3 + 4) = _ViewInputs.transform.getter();
  *(_DWORD *)(a3 + 8) = _ViewInputs.animatedPosition()();
  *(_DWORD *)(a3 + 12) = _ViewInputs.animatedSize()();
  lazy protocol witness table accessor for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)(a3 + 16) = v7;
  lazy protocol witness table accessor for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *(_DWORD *)(a3 + 20) = v7;
  *(_DWORD *)(a3 + 24) = a2;
  return result;
}

Swift::Void __swiftcall UIKitHostedFocusItemLifecycle.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  int v5;
  uint64_t Value;
  void *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  CGFloat v29;
  unsigned int v30;
  unsigned int v31;
  _OWORD *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  CGRect v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  char v64;

  v2 = v0;
  outlined init with copy of UIKitHostedFocusItemLifecycle(v0, (uint64_t)&v61);
  v3 = *MEMORY[0x1E0CFED28];
  if (v63 == *MEMORY[0x1E0CFED28])
  {
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
    return;
  }
  v4 = *(_BYTE *)AGGraphGetValue();
  outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
  if ((v4 & 1) != 0)
  {
    outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
    v5 = v62;
    if (v62 == v3)
    {
      v58 = 0;
    }
    else
    {
      type metadata accessor for WeakBox<UIFocusItem>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t)&lazy cache variable for type metadata for UIView, 0x1E0DC3F10, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
      Value = AGGraphGetValue();
      outlined init with copy of WeakBox<UIView>(Value, (uint64_t)&v58);
    }
    LOBYTE(v59) = v5 == v3;
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
    if ((v59 & 1) != 0)
    {
      outlined destroy of WeakBox<UIView>?((uint64_t)&v58);
      v7 = 0;
    }
    else
    {
      v7 = (void *)MEMORY[0x18D760234](&v58);
      outlined destroy of WeakBox<UIFocusItem>((uint64_t)&v58, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t)&lazy cache variable for type metadata for UIView, 0x1E0DC3F10, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
    }
    swift_unknownObjectWeakAssign();

    v8 = *(_DWORD *)(v2 + 40);
    outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
    v9 = *(_DWORD *)AGGraphGetValue();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
    if (v8 != v9 >> 1)
    {
      outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
      v10 = *(_DWORD *)AGGraphGetValue();
      outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
      *(_DWORD *)(v2 + 40) = v10 >> 1;
      UIKitHostedFocusItemLifecycle.remove()();
      swift_unknownObjectRelease();
      *(_OWORD *)(v2 + 48) = 0u;
      *(_OWORD *)(v2 + 64) = 0u;
      *(_QWORD *)(v2 + 88) = 0;
      *(_QWORD *)(v2 + 96) = 0;
      *(_BYTE *)(v2 + 80) = 1;
      *(_BYTE *)(v2 + 44) = 2;
    }
    outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v11 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v12)
        goto LABEL_14;
    }
    else
    {
      v12 = *(void **)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v12)
      {
LABEL_14:
        if ((v11 & 0xC000000000000001) != 0)
        {
          v13 = MEMORY[0x18D75E3BC](0, v11);
        }
        else
        {
          if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_59;
          }
          v13 = *(_QWORD *)(v11 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v14 = *(_QWORD *)(v2 + 104);
        if (v14 && v13 == v14)
        {
          swift_release();
          v15 = *(uint64_t **)(v2 + 104);
          if (!v15)
            goto LABEL_51;
        }
        else
        {
          v16 = swift_conformsToProtocol2();
          if (v16)
            v17 = v16;
          else
            v17 = 0;
          if (v16)
            v18 = v13;
          else
            v18 = 0;
          swift_release();
          if (!v18)
          {
            swift_release();
            v17 = 0;
          }
          *(_QWORD *)(v2 + 104) = v18;
          *(_QWORD *)(v2 + 112) = v17;
          v15 = *(uint64_t **)(v2 + 104);
          if (!v15)
            goto LABEL_51;
        }
LABEL_33:
        v19 = *(_QWORD *)(v2 + 112);
        v20 = *v15;
        v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 16);
        swift_retain();
        v12 = (void *)v21(v20, v19);
        v1 = v22;
        swift_release();
        if (v12)
        {
          outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
          v23 = AGGraphGetValue();
          v58 = *(_QWORD *)v23;
          v24 = *(_OWORD *)(v23 + 24);
          v59 = *(_OWORD *)(v23 + 8);
          v60 = v24;
          swift_retain();
          outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
          outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
          AGGraphGetValue();
          v25 = outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
          *(double *)&v26 = MEMORY[0x18D755E9C](v25);
          ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v27, v26));
          outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
          AGGraphGetValue();
          v28 = outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
          v57.origin = 0uLL;
          v57.size.width = MEMORY[0x18D75BE3C](v28);
          v57.size.height = v29;
          if (one-time initialization token for UIKitHostContainerCoordinateSpace == -1)
          {
LABEL_35:
            v61 = UIKitHostContainerCoordinateSpace;
            v64 = 1;
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v61);
            v30 = objc_msgSend(v12, sel_canBecomeFocused);
            v31 = v30;
            if (*(_QWORD *)(v2 + 88))
            {
              v55 = *(_OWORD *)(v2 + 88);
              if ((*(_BYTE *)(v2 + 80) & 1) != 0 || !CGRectEqualToRect(*(CGRect *)(v2 + 48), v57))
              {
                *(CGPoint *)(v2 + 48) = v57.origin;
                *(CGSize *)(v2 + 64) = v57.size;
                *(_BYTE *)(v2 + 80) = 0;
                v32 = (_OWORD *)swift_allocObject();
                v32[1] = v55;
                v32[2] = v57.origin;
                v32[3] = v57.size;
                v33 = *(char **)(v2 + 120);
                swift_unknownObjectRetain_n();
                swift_retain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
                v34 = *((_QWORD *)v33 + 2);
                v35 = *((_QWORD *)v33 + 3);
                v36 = v34 + 1;
                if (v34 >= v35 >> 1)
                {
                  v56 = v34 + 1;
                  v49 = v33;
                  v50 = *((_QWORD *)v33 + 2);
                  v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v34 + 1, 1, v49);
                  v34 = v50;
                  v36 = v56;
                  v33 = v51;
                }
                *((_QWORD *)v33 + 2) = v36;
                v37 = &v33[24 * v34];
                v37[32] = 0;
                *((_QWORD *)v37 + 5) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.invalidateFrame();
                *((_QWORD *)v37 + 6) = v32;
                swift_unknownObjectRelease();
                swift_release();
                *(_QWORD *)(v2 + 120) = v33;
              }
              v38 = *(unsigned __int8 *)(v2 + 44);
              if ((v38 == 2 || v31 != (v38 & 1)) && (*(_BYTE *)(v2 + 44) = v31, (v39 = *(_QWORD *)(v2 + 88)) != 0))
              {
                v40 = *(_QWORD *)(v2 + 96);
                v41 = swift_allocObject();
                *(_QWORD *)(v41 + 16) = v39;
                *(_QWORD *)(v41 + 24) = v40;
                v42 = *(char **)(v2 + 120);
                swift_unknownObjectRetain_n();
                swift_retain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
                v43 = *((_QWORD *)v42 + 2);
                v44 = *((_QWORD *)v42 + 3);
                v45 = v43 + 1;
                if (v43 >= v44 >> 1)
                {
                  v52 = v42;
                  v53 = *((_QWORD *)v42 + 2);
                  v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v43 + 1, 1, v52);
                  v43 = v53;
                  v42 = v54;
                }
                *((_QWORD *)v42 + 2) = v45;
                v46 = &v42[24 * v43];
                v46[32] = 0;
                *((_QWORD *)v46 + 5) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.invalidateFocusIfNeeded();
                *((_QWORD *)v46 + 6) = v41;
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_release();
                *(_QWORD *)(v2 + 120) = v42;
              }
              else
              {
                swift_unknownObjectRelease();
              }
            }
            else
            {
              *(_QWORD *)(v2 + 88) = v12;
              *(_QWORD *)(v2 + 96) = v1;
              *(CGPoint *)(v2 + 48) = v57.origin;
              *(CGSize *)(v2 + 64) = v57.size;
              *(_BYTE *)(v2 + 80) = 0;
              *(_BYTE *)(v2 + 44) = v30;
              UIKitHostedFocusItemLifecycle.insert()();
            }
            swift_release();
            v48 = *(_QWORD *)(v2 + 120);
            *(_QWORD *)(v2 + 120) = MEMORY[0x1E0DEE9D8];
            *(_QWORD *)(swift_allocObject() + 16) = v48;
            goto LABEL_55;
          }
LABEL_59:
          swift_once();
          goto LABEL_35;
        }
LABEL_51:
        v47 = *(_QWORD *)(v2 + 120);
        *(_QWORD *)(v2 + 120) = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(swift_allocObject() + 16) = v47;
LABEL_55:
        static Update.enqueueAction(_:)();
        swift_release();
        return;
      }
    }
    swift_bridgeObjectRelease();
    v15 = *(uint64_t **)(v2 + 104);
    if (!v15)
      goto LABEL_51;
    goto LABEL_33;
  }
}

ValueMetadata *type metadata accessor for PresentationOptionsPreference()
{
  return &type metadata for PresentationOptionsPreference;
}

ValueMetadata *type metadata accessor for NavigationSplitViewVisibility()
{
  return &type metadata for NavigationSplitViewVisibility;
}

ValueMetadata *type metadata accessor for NavigationSplitViewVisibility.Kind()
{
  return &type metadata for NavigationSplitViewVisibility.Kind;
}

uint64_t type metadata completion function for ListDragAndDropControllerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ShadowListUpdateRecorder(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ListDragAndDropControllerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListDragAndDropControllerBase);
}

ValueMetadata *type metadata accessor for LiftPreviewLabelMarkingEffect()
{
  return &type metadata for LiftPreviewLabelMarkingEffect;
}

void base witness table accessor for _AttributeBody in InsettableGroupedListBodyRule<A, B, C>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for InsettableGroupedListBodyRule()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for UIKitMenuButton()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for InsettableGroupedListBodyRule()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in InsettableGroupedListBodyRule.value.getter()
{
  closure #1 in InsettableGroupedListBodyRule.value.getter();
}

void InsettableGroupedListBodyRule.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), a4);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _ListValue();
}

void sub_186F27584(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  InsettableGroupedListBodyRule.base.getter();
}

void sub_186F275BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v6, v9 + *(int *)(v8 + 52), v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v8);
  outlined init with take of SectionInsetMode(v1 + 8, v10 - 128);
  v11 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v10 - 208) = v2;
  *(_QWORD *)(v10 - 200) = v11;
  *(_QWORD *)(v10 - 192) = *(_QWORD *)(v10 - 256);
  *(_QWORD *)(v10 - 184) = v3;
  v12 = *(_QWORD *)(v10 - 248);
  *(_QWORD *)(v10 - 176) = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v10 - 168) = v12;
  *(_QWORD *)(v10 - 160) = v1;
  v13 = type metadata accessor for StyleContextWriter();
  v14 = type metadata accessor for ModifiedContent();
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v13);
  *(_QWORD *)(v10 - 144) = &protocol witness table for ListStyleContent;
  *(_QWORD *)(v10 - 136) = v15;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v10 - 144);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, *(_QWORD *)(v10 - 240));
  InsettableGroupedListBody.init(selection:insetMode:content:)(v6, *(_QWORD *)(v10 - 232));
}

void InsettableGroupedListBodyRule.init(base:insetMode:context:)(int a1@<W0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  outlined init with take of SectionInsetMode(a2, (uint64_t)(a3 + 2));
  type metadata accessor for InsettableGroupedListBodyRule();
}

uint64_t sub_186F27730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 72), v2, v1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CoreSheetPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoreSheetPresentationModifier<A>, a5);
  return static EnvironmentalModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in CoreSheetPresentationModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL protocol witness for static EnvironmentalModifier._tracksEnvironmentDependencies.getter in conformance CoreSheetPresentationModifier<A>()
{
  return static CoreSheetPresentationModifier._tracksEnvironmentDependencies.getter();
}

uint64_t destroy for CoreSheetPresentationModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v4 = (_QWORD *)((v3 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v4 >= 0xFFFFFFFFuLL)
    swift_release();
  v5 = ((unint64_t)v4 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v5 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for CoreSheetPresentationModifier(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  *v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFF8);
  v8 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((v5 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  swift_retain();
  if (v10 < 0xFFFFFFFF)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v11;
    swift_retain();
  }
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  *(_BYTE *)(v8 + 17) = *(_BYTE *)(v9 + 17);
  v12 = (v8 + 25) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)(v13 + 24);
  if (v14 < 0xFFFFFFFF)
  {
    v15 = *(_OWORD *)v13;
    v16 = *(_OWORD *)(v13 + 16);
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
    *(_OWORD *)v12 = v15;
    *(_OWORD *)(v12 + 16) = v16;
  }
  else
  {
    *(_QWORD *)(v12 + 24) = v14;
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
    (**(void (***)(unint64_t, unint64_t))(v14 - 8))(v12, v13);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v12 + v18 + 40) & ~v18;
  v20 = (v13 + v18 + 40) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
  *(_BYTE *)(v19 + *(_QWORD *)(v17 + 64)) = *(_BYTE *)(v20 + *(_QWORD *)(v17 + 64));
  return a1;
}

uint64_t type metadata completion function for CoreSheetPresentationModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for CoreSheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreSheetPresentationModifier);
}

uint64_t partial apply for closure #1 in CoreSheetPresentationModifier.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(type metadata accessor for CoreSheetPresentationModifier(0, v7, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (uint64_t *)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in CoreSheetPresentationModifier.resolve(in:)(a1, a2, v4 + v10, *v11, v11[1], v7, v8);
}

uint64_t closure #1 in CoreSheetPresentationModifier.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t inited;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[13];
  char v32;

  v14 = *(_QWORD *)(a3 + 8);
  outlined init with copy of SheetPreference.Value(a1, (uint64_t)v31);
  if (v14)
  {
    if (v32)
    {
      if (v32 == 1)
      {
        MEMORY[0x18D75AC90](0xD00000000000008BLL, 0x8000000187BDE150);
        return outlined destroy of SheetPreference.Value((uint64_t)v31);
      }
      v28 = a6;
      v29 = a7;
      v30 = a2;
      swift_retain();
      outlined destroy of SheetPreference.Value(a1);
    }
    else
    {
      v28 = a6;
      v29 = a7;
      v30 = a2;
      swift_retain();
      outlined destroy of SheetPreference.Value(a1);
      swift_bridgeObjectRelease();
    }
    v16 = *(_QWORD *)(a3 + 16);
    v17 = *(_QWORD *)(a3 + 24);
    outlined copy of AppIntentExecutor?(v16);
    v18 = Namespace.wrappedValue.getter();
    outlined init with copy of AnyHashable?(a3 + 40, a1 + 32);
    v19 = *(_BYTE *)(a3 + 32);
    v20 = *(_BYTE *)(a3 + 33);
    v22 = *(_BYTE *)(a3 + *(int *)(type metadata accessor for CoreSheetPresentationModifier(0, v28, v29, v21) + 60));
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 24) = v18;
    *(_BYTE *)(a1 + 72) = v19;
    *(_BYTE *)(a1 + 73) = v20;
    *(_QWORD *)(a1 + 80) = v30;
    *(_QWORD *)(a1 + 88) = a4;
    *(_QWORD *)(a1 + 96) = a5;
    *(_BYTE *)(a1 + 104) = v22;
    *(_BYTE *)(a1 + 105) = 1;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    if (v32)
    {
      if (v32 == 1)
        return outlined destroy of SheetPreference.Value((uint64_t)v31);
      outlined destroy of SheetPreference.Value(a1);
      type metadata accessor for _ContiguousArrayStorage<(Namespace.ID, Transaction)>();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_187BF9830;
      *(_QWORD *)(inited + 32) = Namespace.wrappedValue.getter();
      *(_QWORD *)(inited + 40) = a2;
      v27 = specialized Dictionary.init(dictionaryLiteral:)((_QWORD *)inited);
      swift_setDeallocating();
      type metadata accessor for (Badge, Spacer)(0, &lazy cache variable for type metadata for (Namespace.ID, Transaction));
      swift_retain();
      result = swift_arrayDestroy();
      *(_QWORD *)a1 = v27;
    }
    else
    {
      outlined destroy of SheetPreference.Value(a1);
      v23 = v31[0];
      v24 = Namespace.wrappedValue.getter();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v24, isUniquelyReferenced_nonNull_native);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v23;
    }
    *(_BYTE *)(a1 + 105) = 0;
  }
  return result;
}

uint64_t CoreSheetPresentationModifier.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 16);
  v35 = *(_QWORD *)(v9 - 8);
  v10 = v35;
  MEMORY[0x1E0C80A78](v11, v8);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v36 = AssociatedTypeWitness;
  v37 = v17;
  v19 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v18);
  v21 = (char *)&v31 - v20;
  v22 = *a1;
  v32 = a1[1];
  v33 = v22;
  v23 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v34 + *(int *)(a2 + 56), v9, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v23, a2);
  v24 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v25 = (v6 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v9;
  *(_QWORD *)(v26 + 24) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v26 + v24, v7, a2);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v32;
  *v27 = v33;
  v27[1] = v28;
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v15 + 24))(partial apply for closure #1 in CoreSheetPresentationModifier.resolve(in:), v26, v9, v15);
  swift_retain();
  swift_retain();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v9);
  v29 = v36;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  ViewModifier.requiring<A>(_:)((uint64_t)&type metadata for AllowPresentationPredicate, v29, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v21, v29);
}

uint64_t CoreSheetPresentationModifier.init(content:onDismiss:placement:drawsBackground:itemID:anchorProvider:activeInspector:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = a1;
  *(_QWORD *)(a9 + 16) = a2;
  *(_QWORD *)(a9 + 24) = a3;
  *(_BYTE *)(a9 + 32) = a4;
  *(_BYTE *)(a9 + 33) = a5;
  outlined init with take of Binding<SearchFieldState>(a6, a9 + 40, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v15 = type metadata accessor for CoreSheetPresentationModifier(0, a10, a11, v14);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(a9 + *(int *)(v15 + 56), a7, a10);
  *(_BYTE *)(a9 + *(int *)(v15 + 60)) = a8;
  return result;
}

BOOL static CoreSheetPresentationModifier._tracksEnvironmentDependencies.getter()
{
  static Semantics.v5.getter();
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction;
  if (!lazy protocol witness table cache variable for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonSpringLoadedInteraction, &unk_1E1AF92E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction);
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateViewDestinationRequest()
{
  return &type metadata for UpdateViewDestinationRequest;
}

uint64_t initializeWithCopy for UpdateFocusableViewResponder(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t outlined release of UpdateFocusableViewResponder(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder;
  if (!lazy protocol witness table cache variable for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateFocusableViewResponder, &unk_1E1AF8B78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder);
  }
  return result;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance UIApplicationDelegateAdaptor<A>()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for GraphHost();
  MEMORY[0x18D75C118]();
  type metadata accessor for AppGraph();
  v0 = swift_dynamicCastClass();
  result = swift_release();
  if (!v0)
    JUMPOUT(0x18D75AC90);
  return result;
}

uint64_t UIApplicationDelegateAdaptor.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FallbackDelegateBox(0, a2, a3, a4);
  static AppGraph.delegateBox = FallbackDelegateBox.__allocating_init(_:)(0);
  return swift_release();
}

uint64_t type metadata accessor for UIApplicationDelegateAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIApplicationDelegateAdaptor);
}

void UIApplicationDelegateAdaptor.wrappedValue.getter()
{
  specialized UIApplicationDelegateAdaptor.wrappedValue.getter();
}

unint64_t lazy protocol witness table accessor for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider;
  if (!lazy protocol witness table cache variable for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollablePreferenceProvider, &unk_1E1AF8078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider;
  if (!lazy protocol witness table cache variable for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewPreferenceProvider, &type metadata for ScrollViewPreferenceProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedProperties, &unk_1E1AF7EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedProperties, &unk_1E1AF7EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties);
  }
  return result;
}

uint64_t ScrollViewAdjustedProperties.value.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t Value;
  int *v3;
  int v4;
  BOOL v5;
  char v6;
  uint64_t result;
  char v8;
  char v9;
  unsigned __int8 v10;
  char v11;
  char v12;
  unsigned __int8 v13[120];

  Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)v13);
  v3 = (int *)AGGraphGetValue();
  outlined init with copy of ScrollEnvironmentProperties(v3, (uint64_t)a1);
  a1[81] = *(_BYTE *)AGGraphGetValue();
  if (*(_BYTE *)AGGraphGetValue() != 1
    || ((v4 = *(unsigned __int8 *)(AGGraphGetValue() + 40), v4 != 2) ? (v5 = (v4 & 1) == 0) : (v5 = 0), v5))
  {
    *a1 = 0;
    goto LABEL_10;
  }
  if (*a1 != 1)
  {
LABEL_10:
    v6 = 3;
    a1[96] = 3;
    goto LABEL_11;
  }
  if ((v13[1] & 1) != 0)
  {
    v6 = a1[120];
  }
  else
  {
    v8 = a1[96];
    if (v8)
      v9 = a1[96];
    else
      v9 = 3;
    v10 = v13[0];
    if ((v13[0] & 2) != 0)
      v8 = v9;
    a1[96] = v8;
    v6 = a1[120];
    if (v6)
      v11 = a1[120];
    else
      v11 = 3;
    if ((v10 & 1) != 0)
      v6 = v11;
  }
LABEL_11:
  a1[120] = v6;
  ScrollViewAdjustedProperties.resolvedDecerationRate(config:properties:)(v13, (uint64_t)a1, &v12);
  result = outlined destroy of ScrollViewConfiguration((uint64_t)v13);
  a1[80] = v12;
  return result;
}

unsigned __int8 *ScrollViewAdjustedProperties.resolvedDecerationRate(config:properties:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v4;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  _BYTE v11[24];
  uint64_t v12;

  v4 = *(unsigned __int8 *)(a2 + 80);
  if (v4 == 1)
  {
    v6 = result;
    outlined init with copy of ResolvedScrollBehavior?(a2 + 8, (uint64_t)v11);
    v7 = v12;
    result = (unsigned __int8 *)outlined destroy of ResolvedScrollBehavior?((uint64_t)v11);
    if (v7)
    {
      v8 = *v6;
      if ((v8 == 1 || v8 == 2)
        && ((type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E0CE5528], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]), result = (unsigned __int8 *)AGGraphGetValue(), v9 = *result, v9 != 2)? (v10 = (v9 & 1) == 0): (v10 = 0), v10))
      {
        LOBYTE(v4) = 2;
      }
      else
      {
        LOBYTE(v4) = 4;
      }
    }
    else
    {
      LOBYTE(v4) = *(_BYTE *)(a2 + 80);
    }
  }
  *a3 = v4;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedProperties()
{
  lazy protocol witness table accessor for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties();
  return static AsyncAttribute.flags.getter();
}

ValueMetadata *type metadata accessor for PreferBaselineAlignedHeaders()
{
  return &type metadata for PreferBaselineAlignedHeaders;
}

unint64_t lazy protocol witness table accessor for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutsetByRowInsetsIfNecessary, &type metadata for OutsetByRowInsetsIfNecessary);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary and conformance OutsetByRowInsetsIfNecessary);
  }
  return result;
}

uint64_t FalseSafeAreaTransitionState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FalseSafeAreaTransitionState()
{
  return objc_opt_self();
}

void type metadata accessor for CollectionViewListScrollable()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t instantiation function for generic protocol witness table for CollectionViewListDataSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListDataSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListDataSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for ListCoreDataSource.Cell : PlatformListCell in CollectionViewListDataSource<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in EmptyTableColumnContent<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

void associated type witness table accessor for ListCoreDataSource.HeaderFooter : PlatformListHeaderFooter in CollectionViewListDataSource<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs : BidirectionalCollection in CollectionViewListDataSource<A>(uint64_t a1)
{
  unint64_t v3;

  v3 = lazy protocol witness table accessor for type [SectionAccumulator.Item] and conformance [A]();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC850], a1, &v3);
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs.Sequence.Element : Hashable in CollectionViewListDataSource<A>()
{
  return MEMORY[0x1E0DEE108];
}

uint64_t assignWithTake for CollectionViewListDataSource(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v8 = a3[9];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[10];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a1 + v12 + 8);
  if (v15 == 1)
    goto LABEL_4;
  v16 = *(_QWORD *)(v14 + 8);
  if (v16 != 1)
  {
    if (v15)
    {
      if (v16)
      {
        *(_QWORD *)v13 = *(_QWORD *)v14;
        swift_release();
        *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
        swift_release();
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
        swift_bridgeObjectRelease();
        if (a1 == a2)
          goto LABEL_12;
        goto LABEL_11;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v13, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
    }
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
    if (a1 == a2)
    {
LABEL_12:
      *(_BYTE *)(v13 + 65) = *(_BYTE *)(v14 + 65);
      *(_BYTE *)(v13 + 66) = *(_BYTE *)(v14 + 66);
      goto LABEL_13;
    }
LABEL_11:
    outlined destroy of TableColumnCollection.Backing(v13 + 24);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
    *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 40);
    *(_OWORD *)(v13 + 49) = *(_OWORD *)(v14 + 49);
    goto LABEL_12;
  }
  outlined destroy of TableHeaderView(v13);
LABEL_4:
  v17 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 48) = v17;
  *(_DWORD *)(v13 + 63) = *(_DWORD *)(v14 + 63);
  v18 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v18;
LABEL_13:
  v19 = a3[11];
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release();
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  swift_release();
  v22 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithCopy for CollectionViewListDataSource(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v6 = *(void **)(a2 + 48);
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  v8 = v6;

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[10];
  v14 = a1 + v13;
  v15 = (__int128 *)(a2 + v13);
  v16 = *(_QWORD *)(a1 + v13 + 8);
  v17 = *(_QWORD *)(a2 + v13 + 8);
  if (v16 != 1)
  {
    if (v17 == 1)
    {
      outlined destroy of TableHeaderView(v14);
      *(_OWORD *)v14 = *v15;
      v22 = v15[2];
      v21 = v15[3];
      v23 = v15[1];
      *(_DWORD *)(v14 + 63) = *(_DWORD *)((char *)v15 + 63);
      *(_OWORD *)(v14 + 32) = v22;
      *(_OWORD *)(v14 + 48) = v21;
      *(_OWORD *)(v14 + 16) = v23;
      goto LABEL_27;
    }
    if (v16)
    {
      if (v17)
      {
        *(_QWORD *)v14 = *(_QWORD *)v15;
        swift_retain();
        swift_release();
        *(_QWORD *)(v14 + 8) = *((_QWORD *)v15 + 1);
        swift_retain();
        swift_release();
        *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (a1 == a2)
          goto LABEL_26;
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v14, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
        v29 = *((_QWORD *)v15 + 2);
        *(_OWORD *)v14 = *v15;
        *(_QWORD *)(v14 + 16) = v29;
        if (a1 == a2)
          goto LABEL_26;
      }
    }
    else if (v17)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = *((_QWORD *)v15 + 1);
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (a1 == a2)
        goto LABEL_26;
    }
    else
    {
      v30 = *v15;
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v14 = v30;
      if (a1 == a2)
      {
LABEL_26:
        *(_BYTE *)(v14 + 65) = *((_BYTE *)v15 + 65);
        *(_BYTE *)(v14 + 66) = *((_BYTE *)v15 + 66);
        goto LABEL_27;
      }
    }
    outlined destroy of TableColumnCollection.Backing(v14 + 24);
    if ((v15[4] & 1) != 0)
    {
      *(_QWORD *)(v14 + 24) = *((_QWORD *)v15 + 3);
      *(_BYTE *)(v14 + 64) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v31 = *((_QWORD *)v15 + 6);
      *(_QWORD *)(v14 + 48) = v31;
      *(_QWORD *)(v14 + 56) = *((_QWORD *)v15 + 7);
      (**(void (***)(uint64_t, uint64_t))(v31 - 8))(v14 + 24, (uint64_t)v15 + 24);
      *(_BYTE *)(v14 + 64) = 0;
    }
    goto LABEL_26;
  }
  if (v17 != 1)
  {
    if (v17)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = *((_QWORD *)v15 + 1);
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v24 = *v15;
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v14 = v24;
    }
    v25 = (_QWORD *)(v14 + 24);
    v26 = (_QWORD *)v15 + 3;
    v27 = *((_BYTE *)v15 + 64);
    if ((v27 & 1) != 0)
    {
      *v25 = *v26;
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *((_QWORD *)v15 + 6);
      *(_QWORD *)(v14 + 48) = v28;
      *(_QWORD *)(v14 + 56) = *((_QWORD *)v15 + 7);
      (**(void (***)(_QWORD *, _QWORD *))(v28 - 8))(v25, v26);
    }
    *(_BYTE *)(v14 + 64) = v27;
    goto LABEL_26;
  }
  *(_OWORD *)v14 = *v15;
  v18 = v15[1];
  v19 = v15[2];
  v20 = v15[3];
  *(_DWORD *)(v14 + 63) = *(_DWORD *)((char *)v15 + 63);
  *(_OWORD *)(v14 + 32) = v19;
  *(_OWORD *)(v14 + 48) = v20;
  *(_OWORD *)(v14 + 16) = v18;
LABEL_27:
  v32 = a3[11];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  swift_retain();
  swift_release();
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v35 = a3[13];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = v38;
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t type metadata completion function for CollectionViewListDataSource()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<PlatterButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatterButtonStyle and conformance PlatterButtonStyle, (uint64_t)&type metadata for PlatterButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

void type metadata accessor for ButtonStyleContainerModifier<PlainButtonStyleBase>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ButtonStyleContainerModifier<PlainButtonStyleBase>)
  {
    v2 = lazy protocol witness table accessor for type PlainButtonStyleBase and conformance PlainButtonStyleBase();
    v4 = type metadata accessor for ButtonStyleContainerModifier(a1, (uint64_t)&type metadata for PlainButtonStyleBase, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleContainerModifier<PlainButtonStyleBase>);
  }
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for ButtonStyleContainerModifier<PlainButtonStyleBase>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle, (uint64_t)&type metadata for WidgetBorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<AccessibilityButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle, (uint64_t)&type metadata for AccessibilityButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderlessButtonStyleBase>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase, (uint64_t)&type metadata for BorderlessButtonStyleBase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle;
  if (!lazy protocol witness table cache variable for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderedProminentButtonStyle, &type metadata for BorderedProminentButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyNavigationSplitVisibility()
{
  return &type metadata for AnyNavigationSplitVisibility;
}

ValueMetadata *type metadata accessor for AnyNavigationSplitVisibility.Kind()
{
  return &type metadata for AnyNavigationSplitVisibility.Kind;
}

uint64_t partial apply for closure #1 in _IncrementalLayout_Children.id(at:style:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return closure #1 in _IncrementalLayout_Children.id(at:style:)(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t closure #1 in _IncrementalLayout_Children.id(at:style:)(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  *a3 = v5;
  a3[1] = v4;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = 1;
  return result;
}

uint64_t _IncrementalLayout_Children.firstIndex<A>(id:style:)()
{
  return _ViewList_Node.firstOffset<A>(forID:style:)();
}

uint64_t type metadata completion function for _IncrementalLayoutViewCache()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for _IncrementalLayoutViewCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _IncrementalLayoutViewCache);
}

uint64_t specialized _IncrementalLayoutViewCache.init(layout:list:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(v4 + 248) = 0;
  *(_BYTE *)(v4 + 256) = 1;
  *(_QWORD *)(v4 + 264) = 0;
  *(_BYTE *)(v4 + 272) = 1;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_QWORD *)(v4 + 328) = 0xBFF0000000000000;
  *(_QWORD *)(v4 + 336) = 0xBFF0000000000000;
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v10 = specialized Dictionary.init(dictionaryLiteral:)(v8);
  *(_QWORD *)(v4 + 344) = v9;
  *(_QWORD *)(v4 + 352) = v10;
  *(_DWORD *)(v4 + 228) = a1;
  return a4(a1, a2, a3);
}

{
  uint64_t v4;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_BYTE *)(v4 + 264) = 1;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = _Q1;
  v13 = MEMORY[0x1E0DEE9D8];
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v15 = specialized Dictionary.init(dictionaryLiteral:)(v13);
  *(_QWORD *)(v4 + 336) = v14;
  *(_QWORD *)(v4 + 344) = v15;
  *(_DWORD *)(v4 + 228) = a1;
  return a4(a1, a2, a3);
}

Swift::Void __swiftcall _IncrementalLayoutViewCache.reset()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 320);
  v4 = *(_QWORD *)(v2 + 328);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v4 + 32))(v3, v4, v8);
  v11 = (uint64_t)v1 + *(_QWORD *)(*v1 + 344);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v11, v10, AssociatedTypeWitness);
  swift_endAccess();
  IncrementalLayoutViewCache.reset()();
}

uint64_t _IncrementalLayoutViewCache.withPlacementData<A>(_:)@<X0>(void (*a1)(char *, uint64_t *, double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t Value;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int128 *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  double v41;
  _DWORD v43[2];
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t *, double);
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88[3];
  uint64_t v89;
  int v90;
  int v91;

  v51 = a2;
  v52 = a1;
  v50 = a3;
  v47 = *v3;
  v4 = *(_QWORD *)(*(_QWORD *)(v47 + 320) - 8);
  v48 = *(_QWORD *)(v47 + 320);
  v49 = v4;
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v6;
  AGGraphClearUpdate();
  v7 = *(_QWORD *)(*v3 + 320);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, Value, v7);
  AGGraphSetUpdate();
  v45 = *((_DWORD *)v3 + 36);
  v60 = v3[4];
  v9 = *((_DWORD *)v3 + 10);
  v10 = v3[6];
  v11 = *((_DWORD *)v3 + 15);
  v67 = *((_DWORD *)v3 + 14);
  v61 = v11;
  v12 = *((_DWORD *)v3 + 17);
  v59 = *((_DWORD *)v3 + 16);
  v14 = v3[9];
  v13 = v3[10];
  v62 = v10;
  v63 = v13;
  v16 = *((_DWORD *)v3 + 22);
  v15 = *((_DWORD *)v3 + 23);
  v17 = *((_DWORD *)v3 + 24);
  v18 = *((_DWORD *)v3 + 25);
  v19 = *((_DWORD *)v3 + 27);
  v54 = *((_DWORD *)v3 + 26);
  v55 = v17;
  v53 = *((_DWORD *)v3 + 28);
  v68 = v60;
  v69 = v9;
  LODWORD(v7) = v9;
  v65 = v12;
  v66 = v9;
  v70 = v10;
  v71 = v67;
  v72 = v11;
  v73 = v59;
  v74 = v12;
  v75 = v14;
  v76 = v13;
  v64 = v14;
  v77 = v16;
  v78 = v15;
  v44 = v16;
  v20 = v15;
  v57 = v18;
  v58 = v15;
  v79 = v17;
  v80 = v18;
  v21 = v18;
  v81 = v54;
  v82 = v19;
  v22 = v19;
  v56 = v19;
  v83 = v53;
  v43[1] = _ViewInputs.environment.getter();
  v68 = v60;
  v69 = v7;
  v23 = v62;
  v70 = v62;
  v71 = v67;
  v72 = v61;
  v73 = v59;
  v74 = v12;
  v24 = v63;
  v75 = v14;
  v76 = v63;
  v77 = v16;
  v78 = v20;
  v79 = v55;
  v80 = v21;
  v81 = v54;
  v82 = v22;
  v83 = v53;
  v25 = _ViewInputs.scrollableContainerSize.getter();
  LOBYTE(v68) = 1;
  SizeAndSpacingContext.init(context:owner:environment:)();
  v89 = v68;
  v90 = v69;
  v91 = v25;
  v26 = v60;
  v68 = v60;
  v69 = v66;
  v70 = v23;
  v27 = v61;
  v71 = v67;
  v72 = v61;
  v28 = v59;
  v73 = v59;
  v74 = v65;
  v75 = v64;
  v76 = v24;
  v29 = v44;
  v77 = v44;
  v78 = v58;
  v30 = v54;
  LODWORD(v24) = v55;
  v79 = v55;
  v80 = v57;
  v81 = v54;
  v82 = v56;
  LODWORD(v23) = v53;
  v83 = v53;
  _ViewInputs.position.getter();
  v88[2] = *(_OWORD *)AGGraphGetValue();
  v68 = v26;
  v69 = v66;
  v70 = v62;
  v71 = v67;
  v72 = v27;
  v73 = v28;
  v74 = v65;
  v75 = v64;
  v76 = v63;
  LODWORD(v26) = v57;
  v31 = v58;
  v77 = v29;
  v78 = v58;
  v79 = v24;
  v80 = v57;
  v32 = v56;
  v81 = v30;
  v82 = v56;
  v83 = v23;
  _ViewInputs.size.getter();
  v33 = (__int128 *)AGGraphGetValue();
  v34 = v33[1];
  v88[0] = *v33;
  v88[1] = v34;
  v68 = v60;
  v69 = v66;
  v70 = v62;
  v71 = v67;
  v72 = v61;
  v73 = v59;
  v74 = v65;
  v75 = v64;
  v76 = v63;
  v77 = v29;
  v78 = v31;
  v79 = v24;
  v80 = v26;
  v81 = v30;
  v82 = v32;
  v83 = v23;
  _ViewInputs.transform.getter();
  v35 = AGGraphGetValue();
  v85 = *(_QWORD *)v35;
  v86 = *(_OWORD *)(v35 + 8);
  v87 = *(_OWORD *)(v35 + 24);
  HIBYTE(v84) = *(_BYTE *)AGGraphGetValue();
  v36 = *(_QWORD *)(v47 + 328);
  v37 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v36 + 120);
  swift_retain();
  v38 = v46;
  v39 = v48;
  v37(&v84, v48, v36);
  v40 = (char *)AGGraphGetValue();
  v41 = _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v89, v88, (uint64_t)&v85, (char *)&v84 + 7, (int *)&v84, *v40, (uint64_t)&v68);
  v52(v38, &v68, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v38, v39);
}

uint64_t _IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, void (*a6)(char *, uint64_t *, double)@<X5>, uint64_t a7@<X8>)
{
  _DWORD v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v8[6] = a5;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  return _IncrementalLayoutViewCache.withPlacementData<A>(_:)(a6, (uint64_t)v8, a7);
}

uint64_t partial apply for closure #1 in _IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in _IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in _IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:));
}

uint64_t closure #1 in _IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:)(uint64_t a1, const void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE v24[304];
  _BYTE v25[120];
  _BYTE v26[297];

  v23 = a8;
  v21 = a6;
  v22 = a7;
  v19[1] = a1;
  v20 = a5;
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 320);
  v10 = *(_QWORD *)(*(_QWORD *)a3 + 328);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16 = (char *)v19 - v15;
  v17 = memcpy(v26, a2, sizeof(v26));
  _IncrementalLayoutViewCache.copyState<A>(type:)((uint64_t)v17, AssociatedTypeWitness);
  IncrementalLayoutViewCache.children(context:)(a4, (uint64_t)v25);
  memcpy(v24, v26, 0x129uLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, _BYTE *, char *, uint64_t, uint64_t))(v10 + 72))(v20, v21, v22, v23, v24, v25, v16, v11, v10);
  outlined destroy of _IncrementalLayout_Children((uint64_t)v25);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
}

uint64_t _IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  return _IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:)(a1, a2, a3, a4, a5, (void (*)(char *, uint64_t *, double))partial apply for closure #1 in _IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:), a6);
}

uint64_t partial apply for closure #1 in _IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 16), *(unsigned int *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(unsigned __int8 *)(v3 + 56));
}

uint64_t partial apply for closure #1 in _IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in _IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in _IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:));
}

uint64_t closure #1 in _IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:)(uint64_t a1, const void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE v24[304];
  _BYTE v25[120];
  _BYTE v26[297];

  v23 = a8;
  v21 = a6;
  v22 = a7;
  v19[1] = a1;
  v20 = a5;
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 320);
  v10 = *(_QWORD *)(*(_QWORD *)a3 + 328);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16 = (char *)v19 - v15;
  v17 = memcpy(v26, a2, sizeof(v26));
  _IncrementalLayoutViewCache.copyState<A>(type:)((uint64_t)v17, AssociatedTypeWitness);
  IncrementalLayoutViewCache.children(context:)(a4, (uint64_t)v25);
  memcpy(v24, v26, 0x129uLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, _BYTE *, char *, uint64_t, uint64_t))(v10 + 80))(v20, v21, v22, v23, v24, v25, v16, v11, v10);
  outlined destroy of _IncrementalLayout_Children((uint64_t)v25);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
}

uint64_t _IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  return _IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:)(a1, a2, a3, a4, a5, (void (*)(char *, uint64_t *, double))partial apply for closure #1 in _IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:), a6);
}

void type metadata accessor for SharingActivityPickerBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for SharingActivityPickerBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    v6 = type metadata accessor for SharingActivityPickerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for SharingActivityPickerBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t assignWithCopy for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;

  v6 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) == 255)
  {
    if (v6 == 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v10 = *(_OWORD *)(a2 + 16);
      v11 = *(_OWORD *)(a2 + 32);
      v12 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)(a1 + 48) = v12;
      *(_OWORD *)(a1 + 16) = v10;
      if (a1 == a2)
        goto LABEL_21;
      goto LABEL_12;
    }
    if ((v6 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v6 == 255)
    {
      outlined destroy of TextInputSuggestionCompletionKind(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v8 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 16) = v9;
      if (a1 == a2)
        goto LABEL_21;
      goto LABEL_12;
    }
    if (a1 == a2)
    {
LABEL_11:
      if (a1 == a2)
        goto LABEL_21;
      goto LABEL_12;
    }
    outlined destroy of TextInputSuggestionCompletionKind(a1);
    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
    {
LABEL_10:
      v13 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
      v14 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v14;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 32, a2 + 32);
      *(_BYTE *)(a1 + 72) = 1;
      goto LABEL_11;
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 72) = 0;
  swift_bridgeObjectRetain();
  if (a1 == a2)
    goto LABEL_21;
LABEL_12:
  v15 = *(int *)(a3 + 20);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  outlined destroy of Binding<AttributedString>(a1 + v15, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v20 = v19;
    v21 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v17, 1, v19))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v16 = *v17;
      v46 = v21;
      v16[1] = v17[1];
      v23 = *(int *)(v20 + 32);
      v24 = (char *)v16 + v23;
      v25 = (char *)v17 + v23;
      *v24 = *((_BYTE *)v17 + v23);
      v24[1] = *((_BYTE *)v17 + v23 + 1);
      v24[2] = *((_BYTE *)v17 + v23 + 2);
      v24[3] = *((_BYTE *)v17 + v23 + 3);
      LODWORD(v23) = *(_DWORD *)((char *)v17 + v23 + 4);
      v24[8] = v25[8];
      *((_DWORD *)v24 + 1) = v23;
      v26 = (int *)type metadata accessor for SearchFieldState();
      v27 = v26[9];
      v44 = &v25[v27];
      v45 = &v24[v27];
      v28 = type metadata accessor for AttributedString();
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_retain();
      swift_retain();
      v43(v45, v44, v28);
      v24[v26[10]] = v25[v26[10]];
      v29 = v26[11];
      v30 = &v24[v29];
      v31 = &v25[v29];
      v32 = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v30[4] = v32;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v16, 0, 1, v20);
    }
  }
  else
  {
    *v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_21:
  v33 = *(int *)(a3 + 24);
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = *(_QWORD *)v35;
  v37 = *(_QWORD *)(v35 + 8);
  v38 = *(_BYTE *)(v35 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v35, v37, v38);
  v39 = *(_QWORD *)v34;
  v40 = *(_QWORD *)(v34 + 8);
  v41 = *(_BYTE *)(v34 + 16);
  *(_QWORD *)v34 = v36;
  *(_QWORD *)(v34 + 8) = v37;
  *(_BYTE *)(v34 + 16) = v38;
  outlined consume of Environment<AppIntentExecutor?>.Content(v39, v40, v41, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

void type metadata completion function for SearchCompletionButtonStyle()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t lazy protocol witness table accessor for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform;
  if (!lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6200], MEMORY[0x1E0CE6208]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollEnvironmentProperties()
{
  return &type metadata for ScrollEnvironmentProperties;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle;
  if (!lazy protocol witness table cache variable for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListButtonStyle, &type metadata for PlatformItemListButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformFallbackButtonStyle()
{
  return &type metadata for PlatformFallbackButtonStyle;
}

unint64_t lazy protocol witness table accessor for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle;
  if (!lazy protocol witness table cache variable for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformFallbackButtonStyle, &type metadata for PlatformFallbackButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in PlatformFallbackButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PersistentSystemOverlaysKey.Overlays()
{
  return &type metadata for PersistentSystemOverlaysKey.Overlays;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLContainerPosition()
{
  lazy protocol witness table accessor for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition();
  return static AsyncAttribute.flags.getter();
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreList()
{
  return &type metadata for AccessibilityFocusStoreList;
}

ValueMetadata *type metadata accessor for AVKitPressableCaptureButton()
{
  return &type metadata for AVKitPressableCaptureButton;
}

ValueMetadata *type metadata accessor for AVKitPressableCaptureButton.Phase()
{
  return &type metadata for AVKitPressableCaptureButton.Phase;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ScrollViewBoundsModifier2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewBoundsModifier2<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ScrollViewBoundsModifier2<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static _ScrollViewBoundsModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

void base witness table accessor for _AttributeBody in _ScrollViewBoundsModifier2<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ScrollViewBoundsModifier2<A>.Child(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewBoundsModifier2<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for _ScrollViewBoundsModifier2.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollViewBoundsModifier2.Child);
}

uint64_t static _ScrollViewBoundsModifier2._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v10 = *((_DWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 7);
  v12 = *((_DWORD *)a2 + 8);
  v11 = *((_DWORD *)a2 + 9);
  v14 = a2[5];
  v13 = a2[6];
  v16 = *((_DWORD *)a2 + 14);
  v15 = *((_DWORD *)a2 + 15);
  v18 = *((_DWORD *)a2 + 16);
  v17 = *((_DWORD *)a2 + 17);
  v20 = *((_DWORD *)a2 + 18);
  v19 = *((_DWORD *)a2 + 19);
  v36 = *((_DWORD *)a2 + 20);
  if (a5 == MEMORY[0x1E0CE1E98])
  {
    v37 = *a2;
    v38 = v7;
    v40 = v8;
    v41 = v10;
    v42 = v9;
    v43 = v12;
    v44 = v11;
    v45 = v14;
    v46 = v13;
    v47 = v16;
    v48 = v15;
    v49 = v18;
    v50 = v17;
    v51 = v20;
    v52 = v19;
    v53 = v36;
    return a3(a1, &v37);
  }
  else
  {
    v34 = *((_DWORD *)a2 + 19);
    v27 = *((_DWORD *)a2 + 17);
    v28 = *((_DWORD *)a2 + 18);
    v25 = *((_DWORD *)a2 + 14);
    v26 = *((_DWORD *)a2 + 16);
    v31 = *((_DWORD *)a2 + 15);
    v32 = *((_DWORD *)a2 + 6);
    v30 = a2[6];
    v33 = a2[5];
    v35 = *((_DWORD *)a2 + 2);
    type metadata accessor for _ScrollViewBoundsModifier2(255, a5, a6, a4);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    _ViewInputs.position.getter();
    _ViewInputs.transform.getter();
    v39 = _ViewInputs.size.getter();
    v23 = type metadata accessor for _ScrollViewBoundsModifier2.Child(0, a5, a6, v22);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewBoundsModifier2<A>.Child, v23);
    _GraphValue.init<A>(_:)();
    v37 = v6;
    v38 = v35;
    v40 = v8;
    v41 = v32;
    v42 = v9;
    v43 = v12;
    v44 = v11;
    v45 = v33;
    v46 = v30;
    v47 = v25;
    v48 = v31;
    v49 = v26;
    v50 = v27;
    v51 = v28;
    v52 = v34;
    v53 = v36;
    return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  }
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  return static _PreferenceWritingModifier._makeScene(modifier:inputs:body:)(a1, a2, a3);
}

void type metadata accessor for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>)
  {
    v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>);
  }
}

uint64_t partial apply for implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)()
{
  return implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)();
}

uint64_t closure #1 in implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  v5[2] = type metadata accessor for _PreferenceWritingModifier();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

uint64_t implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)()
{
  type metadata accessor for _PreferenceWritingModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64))
    closure #1 in implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(1);
  return AGGraphCreateOffsetAttribute2();
}

uint64_t static _PreferenceWritingModifier._makeScene(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v6 = a1[5];
  v5 = a1[6];
  v7 = *((_DWORD *)a1 + 14);
  v22 = *a1;
  v23 = v3;
  v25 = *(_OWORD *)(a1 + 3);
  v24 = v4;
  v26 = v6;
  v27 = v5;
  v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  v13 = v22;
  v14 = v23;
  v15 = v4;
  v16 = v25;
  v17 = v6;
  v18 = v5;
  v19 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  a2(&v20, v8, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v5;
  v14 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v10 = v21;
  *(_QWORD *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UpdatedScrollViewContainer(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v3;
  return a1;
}

unint64_t lazy protocol witness table accessor for type UpdatedScrollViewContainer and conformance UpdatedScrollViewContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdatedScrollViewContainer and conformance UpdatedScrollViewContainer;
  if (!lazy protocol witness table cache variable for type UpdatedScrollViewContainer and conformance UpdatedScrollViewContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdatedScrollViewContainer, &unk_1E1AF0D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdatedScrollViewContainer and conformance UpdatedScrollViewContainer);
  }
  return result;
}

id UpdatedScrollViewContainer.scrollView.getter()
{
  type metadata accessor for HostingScrollView();
  return *(id *)AGGraphGetValue();
}

uint64_t UIViewRepresentableContext.coordinator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

ValueMetadata *type metadata accessor for TimelineInvalidationAction()
{
  return &type metadata for TimelineInvalidationAction;
}

unint64_t lazy protocol witness table accessor for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame;
  if (!lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewDisplayListFrame, &unk_1E1AEFFA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame;
  if (!lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewDisplayListFrame, &unk_1E1AEFFA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewDisplayListFrame()
{
  lazy protocol witness table accessor for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame();
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedPosition, &unk_1E1AEFE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedPosition, &unk_1E1AEFE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedPosition()
{
  lazy protocol witness table accessor for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition();
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedBehavior, &unk_1E1AEFD98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests;
  if (!lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6068], MEMORY[0x1E0CE6070]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests);
  }
  return result;
}

ValueMetadata *type metadata accessor for ResetContentMarginModifier()
{
  return &type metadata for ResetContentMarginModifier;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetContentMarginModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetContentMarginModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PhysicalButtonPressGesture, &type metadata for PhysicalButtonPressGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture);
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicalButtonPressGesture.AllowedButtonTypes()
{
  return &type metadata for PhysicalButtonPressGesture.AllowedButtonTypes;
}

uint64_t PagingScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  char v18;
  double v19;
  double v20;
  char v21;
  char v22;
  __int128 v23;
  double v24;
  double v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v3 = a2[7];
  v46 = a2[6];
  v47 = v3;
  v48 = a2[8];
  v4 = a2[3];
  v42 = a2[2];
  v43 = v4;
  v5 = a2[5];
  v44 = a2[4];
  v45 = v5;
  v6 = a2[1];
  v40 = *a2;
  v41 = v6;
  specialized ScrollTargetBehavior.clampTarget(_:context:)(a1, (uint64_t)&v40);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)&v27 = *(_QWORD *)a1;
  *((_QWORD *)&v27 + 1) = v8;
  *(_QWORD *)&v28 = v9;
  *((_QWORD *)&v28 + 1) = v10;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v12;
  LOBYTE(v30) = v13;
  result = ScrollTarget.rect.getter();
  v17 = v16;
  v18 = BYTE8(v46);
  if ((BYTE8(v46) & 2) != 0 && v15 > 0.0 && v15 < *(double *)&v45 - *(double *)&v46)
  {
    *(_QWORD *)&v36 = v7;
    *((_QWORD *)&v36 + 1) = v8;
    *(_QWORD *)&v37 = v9;
    *((_QWORD *)&v37 + 1) = v10;
    *(_QWORD *)&v38 = v11;
    *((_QWORD *)&v38 + 1) = v12;
    v39 = v13;
    v33 = v46;
    v34 = v47;
    v35 = v48;
    v29 = v42;
    v30 = v43;
    v31 = v44;
    v32 = v45;
    v27 = v40;
    v28 = v41;
    result = PagingScrollTargetBehavior.makeInfo(_:context:axis:)((uint64_t)&v36, (uint64_t)&v27, 1);
    if ((v21 & 1) == 0)
      result = specialized ScrollTargetBehavior.alignTarget(_:context:axis:itemInfo:)(*(double *)&result, v19, v20, a1, (uint64_t)&v40, 1);
  }
  if ((v18 & 1) != 0 && v17 > 0.0 && v17 < *((double *)&v44 + 1) - *((double *)&v45 + 1))
  {
    v22 = *(_BYTE *)(a1 + 48);
    v23 = *(_OWORD *)(a1 + 16);
    v36 = *(_OWORD *)a1;
    v37 = v23;
    v38 = *(_OWORD *)(a1 + 32);
    v39 = v22;
    v33 = v46;
    v34 = v47;
    v35 = v48;
    v29 = v42;
    v30 = v43;
    v31 = v44;
    v32 = v45;
    v27 = v40;
    v28 = v41;
    result = PagingScrollTargetBehavior.makeInfo(_:context:axis:)((uint64_t)&v36, (uint64_t)&v27, 0);
    if ((v26 & 1) == 0)
      return specialized ScrollTargetBehavior.alignTarget(_:context:axis:itemInfo:)(*(double *)&result, v24, v25, a1, (uint64_t)&v40, 0);
  }
  return result;
}

uint64_t type metadata accessor for MakeResolvedRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MakeResolvedRepresentation);
}

ValueMetadata *type metadata accessor for ListSeparatorConfiguration()
{
  return &type metadata for ListSeparatorConfiguration;
}

uint64_t associated type witness table accessor for PlatformListViewBase.CellModifier : ViewModifier in ListCollectionViewCellBase<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier, (uint64_t (*)(uint64_t))type metadata accessor for CollectionViewCellModifier, (uint64_t)&protocol conformance descriptor for CollectionViewCellModifier);
}

uint64_t partial apply for closure #1 in IncrementalLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in IncrementalLayoutViewCache.init<A>(layout:list:inputs:)(a1, v1);
}

uint64_t partial apply for implicit closure #3 in IncrementalLayoutViewCache.init<A>(layout:list:inputs:)()
{
  uint64_t v0;

  return implicit closure #3 in IncrementalLayoutViewCache.init<A>(layout:list:inputs:)(*(_QWORD *)(v0 + 16));
}

uint64_t implicit closure #3 in IncrementalLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[16];

  v3[15] = *MEMORY[0x1E0C80C00];
  outlined init with copy of ScrollStateRequestTransform(a1, (uint64_t)v3);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform();
  v1 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ScrollStateRequestTransform((uint64_t)v3);
  return v1;
}

Swift::Void __swiftcall IncrementalLayoutViewCache.reset()()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  swift_beginAccess();
  *(_QWORD *)(v0 + 184) = 0;
  *(_DWORD *)(v0 + 192) = 1;
  *(_DWORD *)(v0 + 168) = 1;
  *(_QWORD *)(v0 + 200) = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 208) = 0x100000001;
  *(_WORD *)(v0 + 225) = 0;
  *(_BYTE *)(v0 + 227) = 1;
  *(_BYTE *)(v0 + 216) = 0;
  swift_beginAccess();
  v1 = 0;
  v2 = *(_QWORD *)(v0 + 160);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v1 << 6);
      goto LABEL_5;
    }
    v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v11 >= v7)
      return;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v1;
    if (!v12)
    {
      v1 = v11 + 1;
      if (v11 + 1 >= v7)
        return;
      v12 = *(_QWORD *)(v3 + 8 * v1);
      if (!v12)
      {
        v1 = v11 + 2;
        if (v11 + 2 >= v7)
          return;
        v12 = *(_QWORD *)(v3 + 8 * v1);
        if (!v12)
          break;
      }
    }
LABEL_20:
    v6 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v1 << 6);
LABEL_5:
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v9);
    *(_OWORD *)(v10 + 212) = 0uLL;
    v10 += 212;
    *(_OWORD *)(v10 - 20) = 0uLL;
    *(_OWORD *)(v10 - 36) = 0uLL;
    *(_BYTE *)(v10 - 4) = 1;
    *(_OWORD *)(v10 + 16) = 0uLL;
    *(_OWORD *)(v10 + 32) = 0uLL;
    *(_OWORD *)(v10 + 48) = 0uLL;
    *(_DWORD *)(v10 + 64) = 0;
    *(_BYTE *)(v10 + 68) = 1;
    *(_WORD *)(v10 + 156) = 0;
    *(_BYTE *)(v10 + 159) = 0;
  }
  v13 = v11 + 3;
  if (v13 >= v7)
    return;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v1 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v1 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v1 >= v7)
      return;
    v12 = *(_QWORD *)(v3 + 8 * v1);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalChildPrefetcher<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalChildPrefetcher<A>, a1);
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type IncrementalChildPrefetcher<LazyVStackLayout> and conformance IncrementalChildPrefetcher<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalChildPrefetcher<LazyVStackLayout> and conformance IncrementalChildPrefetcher<A>;
  if (!lazy protocol witness table cache variable for type IncrementalChildPrefetcher<LazyVStackLayout> and conformance IncrementalChildPrefetcher<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalChildPrefetcher<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPrefetcher);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalChildPrefetcher<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalChildPrefetcher<LazyVStackLayout> and conformance IncrementalChildPrefetcher<A>);
  }
  return result;
}

uint64_t type metadata accessor for IncrementalChildPrefetcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalChildPrefetcher);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalChildPlacements<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalChildPlacements<A>, a1);
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type IncrementalChildPlacements<LazyVStackLayout> and conformance IncrementalChildPlacements<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalChildPlacements<LazyVStackLayout> and conformance IncrementalChildPlacements<A>;
  if (!lazy protocol witness table cache variable for type IncrementalChildPlacements<LazyVStackLayout> and conformance IncrementalChildPlacements<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalChildPlacements<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalChildPlacements<LazyVStackLayout> and conformance IncrementalChildPlacements<A>);
  }
  return result;
}

uint64_t type metadata instantiation function for PlatterShadowedContent()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for IncrementalChildPlacements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalChildPlacements);
}

uint64_t type metadata accessor for HostingScrollViewResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HostingScrollViewResponder;
  if (!type metadata singleton initialization cache for HostingScrollViewResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t assignWithTake for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ConditionallyBorderedStyle()
{
  return &type metadata for ConditionallyBorderedStyle;
}

unint64_t lazy protocol witness table accessor for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle;
  if (!lazy protocol witness table cache variable for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConditionallyBorderedStyle, &type metadata for ConditionallyBorderedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in ConditionallyBorderedStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance ConditionallyBorderedStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return ConditionallyBorderedStyle.makeBody(configuration:)(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

void type metadata completion function for CollectionViewCellModifier()
{
  unint64_t v0;

  type metadata accessor for Environment<UIListContentConfiguration?>.Content(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for BorderedButtonStyle_CarMac()
{
  return &type metadata for BorderedButtonStyle_CarMac;
}

unint64_t lazy protocol witness table accessor for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac;
  if (!lazy protocol witness table cache variable for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderedButtonStyle_CarMac, &type metadata for BorderedButtonStyle_CarMac);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityProxyModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AccessibilityProxyModifier.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a4 = swift_getKeyPath();
  *(_BYTE *)(a4 + 8) = 0;
  v9 = a4 + *(int *)(type metadata accessor for AccessibilityProxyModifier(0, a2, a3, v8) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v9, a1, a2);
}

uint64_t type metadata completion function for AccessibilityProxyModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityProxyModifier);
}

uint64_t partial apply for closure #2 in AccessibilityProxyModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in AccessibilityProxyModifier.body(content:)(v1[4], v1[2], v1[3], a1);
}

uint64_t AccessibilityProxyModifier.accessibilityEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(v1, v2);
  v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<Bool>.Content(v1, v2);
  return v3 & 1;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityProxyModifier<A>.GeometryTransformModifier@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static AccessibilityProxyModifier.GeometryTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t type metadata accessor for AccessibilityProxyModifier.GeometryTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityProxyModifier.GeometryTransformModifier);
}

double static AccessibilityProxyModifier.GeometryTransformModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  double v51;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 6);
  v10 = *((_DWORD *)a2 + 7);
  v12 = *((_DWORD *)a2 + 8);
  v11 = *((_DWORD *)a2 + 9);
  v14 = a2[5];
  v13 = a2[6];
  v16 = *((_DWORD *)a2 + 14);
  v15 = *((_DWORD *)a2 + 15);
  v17 = *((_DWORD *)a2 + 16);
  v18 = *((_DWORD *)a2 + 17);
  v19 = *((_DWORD *)a2 + 18);
  v20 = *((_DWORD *)a2 + 19);
  v21 = *((_DWORD *)a2 + 20);
  v34 = *a2;
  v35 = v7;
  v36 = v8;
  v37 = v9;
  v38 = v10;
  v39 = v12;
  v40 = v11;
  v30 = v15;
  v31 = v11;
  v41 = v14;
  v42 = v13;
  v43 = v16;
  v44 = v15;
  v28 = v18;
  v29 = v17;
  v45 = v17;
  v46 = v18;
  v26 = v20;
  v27 = v19;
  v47 = v19;
  v48 = v20;
  v25 = v21;
  v49 = v21;
  a3(&v50, a1, &v34);
  v34 = v13;
  v35 = v16;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    type metadata accessor for AccessibilityProxyModifier.GeometryTransformModifier(0, a4, a5, v22);
    v34 = v6;
    v35 = v7;
    v36 = v8;
    v37 = v9;
    v38 = v10;
    v39 = v12;
    v40 = v31;
    v41 = v14;
    v42 = v13;
    v43 = v16;
    v44 = v30;
    v45 = v29;
    v46 = v28;
    v47 = v27;
    v48 = v26;
    v49 = v25;
    static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(0x100000000, 0x100000000, (uint64_t)&v34);
    LOBYTE(v34) = 0;
    _ViewOutputs.subscript.setter();
  }
  *(_QWORD *)a6 = v50;
  result = v51;
  a6[1] = v51;
  return result;
}

uint64_t one-time initialization function for contain(uint64_t a1)
{
  return one-time initialization function for automatic(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Contain>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain, (uint64_t)&type metadata for AccessibilityChildBehavior.Contain, &static AccessibilityChildBehavior.contain);
}

uint64_t one-time initialization function for combine()
{
  uint64_t result;

  type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Host>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  static AccessibilityChildBehavior.combine = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Contain, &type metadata for AccessibilityChildBehavior.Contain);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Contain, &type metadata for AccessibilityChildBehavior.Contain);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Contain, &type metadata for AccessibilityChildBehavior.Contain);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Contain(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Combine, &type metadata for AccessibilityChildBehavior.Combine);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Combine, &type metadata for AccessibilityChildBehavior.Combine);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Combine, &type metadata for AccessibilityChildBehavior.Combine);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Combine(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for ignore(uint64_t a1)
{
  return one-time initialization function for automatic(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Ignore>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore, (uint64_t)&type metadata for AccessibilityChildBehavior.Ignore, &static AccessibilityChildBehavior.ignore);
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Ignore, &type metadata for AccessibilityChildBehavior.Ignore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Ignore, &type metadata for AccessibilityChildBehavior.Ignore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Ignore, &type metadata for AccessibilityChildBehavior.Ignore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Ignore(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for host(uint64_t a1)
{
  return one-time initialization function for automatic(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Host>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host, (uint64_t)&type metadata for AccessibilityChildBehavior.Host, &static AccessibilityChildBehavior.host);
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Host, &type metadata for AccessibilityChildBehavior.Host);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Host, &type metadata for AccessibilityChildBehavior.Host);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior.Host, &type metadata for AccessibilityChildBehavior.Host);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Host(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityActionStorage<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityActionStorage<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityActionStorage<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for AccessibilityActionStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t nextNavigationDestination(activePresentationID:destinations:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  _BYTE v16[96];
  _BYTE v17[8];
  _BYTE v18[104];
  _BYTE v19[96];

  if (!*(_QWORD *)(a3 + 16))
  {
LABEL_14:
    *(_QWORD *)(a4 + 80) = 0;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_BYTE *)(a4 + 88) = -1;
    return result;
  }
  v6 = result;
  v7 = swift_bridgeObjectRetain();
  v9 = specialized _NativeDictionary.filter(_:)(v7, v8);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0
    || !*(_QWORD *)(v9 + 16)
    || (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v11 & 1) == 0))
  {
    v13 = swift_retain();
    specialized Collection.first.getter(v13, (uint64_t)v15);
    swift_release();
    if (v16[88] != 255)
    {
      outlined init with take of NavigationDestinationPresentation((uint64_t)v16, (uint64_t)v18);
      v14 = *(_QWORD *)(v9 + 16);
      swift_release();
      if (v14 != 1)
        MEMORY[0x18D75AC90](0xD00000000000004ELL, 0x8000000187BF1EE0);
      outlined init with take of NavigationDestinationPresentation((uint64_t)v18, (uint64_t)v16);
      v12 = v16;
      goto LABEL_12;
    }
    swift_release();
    result = outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)?((uint64_t)v15);
    goto LABEL_14;
  }
  outlined init with copy of NavigationDestinationPresentation(*(_QWORD *)(v9 + 56) + 96 * v10, (uint64_t)v17);
  outlined init with take of NavigationDestinationPresentation((uint64_t)v17, (uint64_t)v15);
  if (*(_QWORD *)(v9 + 16) != 2)
  {
    swift_release();
    v12 = v15;
    goto LABEL_12;
  }
  specialized Sequence.first(where:)(v9, v6, (uint64_t)v17);
  result = swift_release();
  if (v18[88] != 255)
  {
    outlined destroy of NavigationDestinationPresentation((uint64_t)v15);
    v12 = v18;
LABEL_12:
    outlined init with take of NavigationDestinationPresentation((uint64_t)v12, (uint64_t)v19);
    return outlined init with take of NavigationDestinationPresentation((uint64_t)v19, a4);
  }
  __break(1u);
  return result;
}

void base witness table accessor for _AttributeBody in _ScrollViewBoundsModifier<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ScrollViewBoundsModifier<A>.Child(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewBoundsModifier<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PreferenceActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PreferenceActionModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PreferenceActionModifier<A>@<X0>(int *a1@<X0>, _DWORD *a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _QWORD)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  return static _PreferenceActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a6);
}

uint64_t static _PreferenceActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, _DWORD *a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _QWORD)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t, _QWORD);
  void (*v19)(_QWORD *__return_ptr, _QWORD, _QWORD);
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  void (*v24)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v25)(_QWORD *__return_ptr, _QWORD, _QWORD);
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  void (*v62)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v63)(_QWORD *__return_ptr, _QWORD, _QWORD);
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  void (*v76)(_QWORD *__return_ptr, uint64_t, _QWORD);
  _QWORD *v77;
  void (*v78)(_QWORD *__return_ptr, uint64_t, _QWORD);
  int v79;
  int v80;
  void (*v81)(_QWORD *__return_ptr, uint64_t, _QWORD);
  int v82;
  int v83;
  void (*v84)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v85;
  void (*v86)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v87)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v88;
  unint64_t v89;
  int v90;
  void (*v91)(_QWORD *__return_ptr, uint64_t, _QWORD);
  int v92;
  void (*v93)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v94;
  void (*v95)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v96)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v97;
  unint64_t v98;
  int v99;
  uint64_t v100;

  v75 = a4;
  v76 = a3;
  v77 = a8;
  v100 = *MEMORY[0x1E0C80C00];
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v14);
  v69 = (char *)&v53 - v15;
  v71 = a7;
  v73 = type metadata accessor for PreferenceBinder(0, a5, a6, a7);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v16);
  v70 = (uint64_t)&v53 - v17;
  v54 = *a1;
  v18 = *(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))a2;
  LODWORD(v17) = a2[2];
  v19 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))*((_QWORD *)a2 + 2);
  v20 = a2[6];
  v21 = a2[7];
  v22 = a2[8];
  v23 = a2[9];
  v24 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))*((_QWORD *)a2 + 5);
  v25 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))*((_QWORD *)a2 + 6);
  v26 = a2[14];
  v27 = a2[15];
  v28 = a2[16];
  v29 = a2[17];
  v31 = a2[18];
  v30 = a2[19];
  v32 = a2[20];
  v91 = *(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))a2;
  v68 = v17;
  v92 = v17;
  v93 = v19;
  v67 = v20;
  *(_QWORD *)&v94 = __PAIR64__(v21, v20);
  v66 = v21;
  v65 = v22;
  *((_QWORD *)&v94 + 1) = __PAIR64__(v23, v22);
  v64 = v23;
  v95 = v24;
  v96 = v25;
  v61 = v26;
  *(_QWORD *)&v97 = __PAIR64__(v27, v26);
  v60 = v27;
  v59 = v28;
  *((_QWORD *)&v97 + 1) = __PAIR64__(v29, v28);
  v58 = v29;
  v57 = v31;
  v98 = __PAIR64__(v30, v31);
  v56 = v30;
  v55 = v32;
  v99 = v32;
  swift_retain();
  swift_retain();
  v63 = v24;
  swift_bridgeObjectRetain();
  v62 = v25;
  swift_bridgeObjectRetain();
  PreferenceKeys.add<A>(_:)();
  v81 = v91;
  v82 = v92;
  v84 = v93;
  v85 = v94;
  v86 = v95;
  v87 = v96;
  v88 = v97;
  v89 = v98;
  v90 = v99;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v33 = swift_bridgeObjectRetain();
  v76(&v78, v33, &v81);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v76 = v78;
  v81 = v78;
  LODWORD(v75) = v79;
  v82 = v79;
  v74 = v80;
  v83 = v80;
  v34 = _ViewOutputs.subscript.getter();
  if ((v34 & 0x100000000) == 0)
  {
    v35 = v34;
    LODWORD(v81) = v54;
    v36 = v71;
    type metadata accessor for _PreferenceActionModifier(255, a5, a6, v71);
    type metadata accessor for _GraphValue();
    v37 = _GraphValue.value.getter();
    v81 = v18;
    v82 = v68;
    v84 = v19;
    *(_QWORD *)&v85 = __PAIR64__(v66, v67);
    *((_QWORD *)&v85 + 1) = __PAIR64__(v64, v65);
    v86 = v63;
    v87 = v62;
    *(_QWORD *)&v88 = __PAIR64__(v60, v61);
    *((_QWORD *)&v88 + 1) = __PAIR64__(v58, v59);
    v89 = __PAIR64__(v56, v57);
    v90 = v55;
    v38 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    v78 = v81;
    v79 = v82;
    LOBYTE(v80) = v83;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v40 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v69, 1, 1, AssociatedTypeWitness);
    v51 = v36;
    v41 = v70;
    v42 = PreferenceBinder.init(modifier:keyValue:phase:cycleDetector:lastResetSeed:lastValue:)(v37, v35, v38, (uint64_t)&v78, 0, v40, a5, a6, v70, v51);
    v44 = MEMORY[0x1E0C80A78](v42, v43);
    v45 = v73;
    v51 = v73;
    v52 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreferenceBinder<A>, v73, v44);
    type metadata accessor for Attribute<()>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v41, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)(&v53 - 4), v45, MEMORY[0x1E0DEDCE8], v46, MEMORY[0x1E0DEDD18], v47);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v41, v45);
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v49 = v77;
  *v77 = v76;
  v50 = v74;
  *((_DWORD *)v49 + 2) = v75;
  *((_DWORD *)v49 + 3) = v50;
  return result;
}

uint64_t type metadata completion function for _ContentShapeKindModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _AlignmentWritingModifier()
{
  return &type metadata for _AlignmentWritingModifier;
}

ValueMetadata *type metadata accessor for WidgetBorderedButtonStyle()
{
  return &type metadata for WidgetBorderedButtonStyle;
}

unint64_t lazy protocol witness table accessor for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle;
  if (!lazy protocol witness table cache variable for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetBorderedButtonStyle, &type metadata for WidgetBorderedButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle);
  }
  return result;
}

uint64_t WeakSelectionBasedStorage.init(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  unsigned __int8 v40;

  v8 = *MEMORY[0x1E0CFED28];
  if (*MEMORY[0x1E0CFED28] == (_DWORD)a1)
    v9 = 0;
  else
    v9 = a1;
  v37 = v9;
  v38 = v8 == (_DWORD)a1;
  v35 = a3;
  v36 = a4;
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  v10 = type metadata accessor for WeakAttribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakSelectionBasedStorage.init(_:), (uint64_t)v34, MEMORY[0x1E0DEDCE8], v10, v11, (uint64_t)&v39);
  v24 = v40;
  v23 = v39;
  v12 = HIDWORD(a1);
  if (v8 == HIDWORD(a1))
    LODWORD(v12) = 0;
  v37 = v12;
  v38 = v8 == HIDWORD(a1);
  v32 = a3;
  v33 = a4;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  v13 = type metadata accessor for WeakAttribute();
  v14 = MEMORY[0x1E0DEDCE8];
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakSelectionBasedStorage.init(_:), (uint64_t)v31, MEMORY[0x1E0DEDCE8], v13, v15, (uint64_t)&v39);
  if (v8 == (_DWORD)a2)
    v16 = 0;
  else
    v16 = a2;
  v37 = v16;
  v38 = v8 == (_DWORD)a2;
  v29 = a3;
  v30 = a4;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  v17 = type metadata accessor for WeakAttribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakSelectionBasedStorage.init(_:), (uint64_t)v28, v14, v17, v18, (uint64_t)&v39);
  v19 = HIDWORD(a2);
  if (v8 == HIDWORD(a2))
    LODWORD(v19) = 0;
  v37 = v19;
  v38 = v8 == HIDWORD(a2);
  v26 = a3;
  v27 = a4;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  v20 = type metadata accessor for WeakAttribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakSelectionBasedStorage.init(_:), (uint64_t)v25, MEMORY[0x1E0DEDCE8], v20, v21, (uint64_t)&v39);
  if (v24)
    return 0;
  else
    return v23;
}

uint64_t WeakSelectionBasedStorage.init()()
{
  return 0;
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata accessor for UIKitNavigationController()
{
  return objc_opt_self();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransformScrollIndicators(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type TransformScrollIndicators and conformance TransformScrollIndicators);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransformScrollIndicators(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type TransformScrollIndicators and conformance TransformScrollIndicators);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance TabViewStyleOverrideInput<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = static TabViewStyleOverrideInput.defaultValue.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t type metadata accessor for TabViewStyleOverrideInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TabViewStyleOverrideInput);
}

uint64_t static TabViewStyleOverrideInput.defaultValue.getter()
{
  return 0;
}

uint64_t type metadata completion function for TabViewStyleConfiguration()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for TabViewStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TabViewStyleConfiguration);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TabViewStyleConfiguration<A>.Content(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleConfiguration<A>.Content, a3);
  return static ViewAlias._makeViewList(view:inputs:)(v5, a2, a3, v5);
}

uint64_t type metadata accessor for TabViewStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TabViewStyleConfiguration.Content);
}

uint64_t associated type witness table accessor for View.Body : View in SystemScrollViewContainer<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithCopy for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = (_OWORD *)(a1 + 48);
  v8 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v9;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of ScrollToTopGestureAction(a1 + 48);
  }
  else if (v7)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain();
    goto LABEL_8;
  }
  *v6 = *v8;
LABEL_8:
  swift_unknownObjectWeakCopyAssign();
  v12 = (_OWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = (_OWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 80);
  if (v11)
  {
    if (v13)
    {
      v15 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v13;
      *(_QWORD *)(a1 + 88) = v15;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    }
    else
    {
      outlined destroy of RefreshAction(a1 + 80);
      v17 = *(_QWORD *)(a2 + 96);
      *v12 = *v14;
      *(_QWORD *)(a1 + 96) = v17;
    }
  }
  else if (v13)
  {
    v16 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_retain();
  }
  else
  {
    v18 = *v14;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *v12 = v18;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 24))((*(unsigned __int8 *)(v19 + 80) + 120 + a1) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (*(unsigned __int8 *)(v19 + 80) + 120 + a2) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t type metadata completion function for SystemScrollViewContainer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SystemScrollViewContainer);
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SystemScrollViewContainer<A>.InertPaddingLayoutRequired()
{
  return static CoreSheetPresentationModifier._tracksEnvironmentDependencies.getter();
}

uint64_t type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SystemScrollViewContainer.InertPaddingLayoutRequired);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>.EnvironmentAxesModifier, a3);
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t SystemScrollViewContainer.inertPaddingModifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  static EdgeInsets.zero.getter();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14[0] = static Edge.Set.all.getter();
  v15 = v6;
  v16 = v8;
  v17 = v10;
  v18 = v12;
  v19 = 0;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>.InertPaddingLayoutRequired, v4);
  return StaticIf<>.init<>(_:then:)((uint64_t)v14, MEMORY[0x1E0CE2BD0], a3);
}

uint64_t SystemScrollViewContainer.init(configuration:content:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;

  outlined init with take of ScrollViewConfiguration(a1, a5);
  type metadata accessor for SystemScrollViewContainer(0, a3, a4, v8);
  return a2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SheetPresentationModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for SheetPresentationModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  type metadata accessor for SheetPresentationModifier();
}

__n128 sub_186F2E384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  __n128 result;
  __int128 v11;
  _QWORD v12[2];
  char v13;
  __int128 v14;
  __n128 v15;
  char v16;
  char v17;
  char v18;

  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))((char *)v12 + *(int *)(a1 + 68), a2, v3);
  *((_BYTE *)v12 + *(int *)(a1 + 72)) = 2;
  v5 = v12[1];
  v6 = v13;
  v7 = v16;
  v8 = v17;
  v9 = v18;
  v11 = v14;
  result = v15;
  *(_QWORD *)v2 = v12[0];
  *(_QWORD *)(v2 + 8) = v5;
  *(_BYTE *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 24) = v11;
  *(__n128 *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 56) = v7;
  *(_BYTE *)(v2 + 57) = v8;
  *(_BYTE *)(v2 + 58) = v9;
  return result;
}

uint64_t SheetPresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  _QWORD v77[2];
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v4 = v3;
  v72 = a3;
  v6 = *(_QWORD *)(a2 + 24);
  v68 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v71 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v63 + 64);
  MEMORY[0x1E0C80A78](v10, v8);
  v61 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = *(_QWORD *)(v11 + 40);
  v13 = type metadata accessor for CoreSheetPresentationModifier(0, v6, v75, v12);
  v69 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v67 = (uint64_t)&v56 - v16;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, a2, v15);
  v62 = type metadata accessor for _ViewModifier_Content();
  v70 = v13;
  v17 = type metadata accessor for ModifiedContent();
  v66 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v64 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v65 = (char *)&v56 - v22;
  v23 = *(_QWORD *)(a2 + 16);
  v73 = *(_QWORD *)(a2 + 32);
  v74 = v23;
  v25 = type metadata accessor for SheetContent(0, v23, v73, v24);
  v60 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v56 - v27;
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>();
  v29 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v29, v30);
  v31 = 0;
  if ((SheetPresentationModifier.isPresented.getter() & 1) != 0)
  {
    closure #1 in SheetPresentationModifier.body(content:)(v4, v74, v73, (uint64_t)v28);
    swift_getKeyPath();
    v56 = v17;
    v58 = v9;
    v32 = *(_QWORD *)v4;
    v57 = v29;
    v33 = *(_BYTE *)(v4 + 16);
    lazy protocol witness table accessor for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented();
    v59 = v6;
    swift_retain();
    swift_retain();
    v34 = dispatch thunk of AnyLocation.projecting<A>(_:)();
    swift_release();
    *(_QWORD *)&v78 = v32;
    *((_QWORD *)&v78 + 1) = v34;
    LOBYTE(v79) = v33;
    v35 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetContent<A>, v25);
    View.environment<A>(_:_:)();
    v6 = v59;
    swift_release();
    swift_release();
    v17 = v56;
    swift_release();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v28, v25);
    v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, MEMORY[0x1E0CE65C0]);
    v76[0] = v35;
    v76[1] = v36;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v57, v76);
    v31 = AnyView.init<A>(_:)();
  }
  v37 = v63;
  v38 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v61, v4, a2);
  v39 = (*(unsigned __int8 *)(v37 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  v40 = (char *)swift_allocObject();
  v41 = v75;
  *((_QWORD *)v40 + 2) = v74;
  *((_QWORD *)v40 + 3) = v6;
  *((_QWORD *)v40 + 4) = v73;
  *((_QWORD *)v40 + 5) = v41;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v40[v39], v38, a2);
  LOBYTE(v39) = *(_BYTE *)(v4 + 57);
  v42 = v6;
  v43 = *(_BYTE *)(v4 + 56);
  v80 = 0;
  v78 = 0u;
  v79 = 0u;
  v44 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v71, v4 + *(int *)(a2 + 68), v42);
  v45 = *(_BYTE *)(v4 + *(int *)(a2 + 72));
  v46 = v67;
  CoreSheetPresentationModifier.init(content:onDismiss:placement:drawsBackground:itemID:anchorProvider:activeInspector:)(v31, (uint64_t)partial apply for closure #2 in SheetPresentationModifier.body(content:), (uint64_t)v40, v43, v39, (uint64_t)&v78, v44, v45, v67, v42, v41);
  v47 = v62;
  v48 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v62);
  v49 = v64;
  v50 = v47;
  v51 = v70;
  MEMORY[0x18D75B4AC](v46, v50, v70, v48);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v46, v51);
  v77[0] = v48;
  v77[1] = &protocol witness table for CoreSheetPresentationModifier<A>;
  v52 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v77);
  v53 = (uint64_t)v65;
  static ViewBuilder.buildExpression<A>(_:)(v49, v17, v52);
  v54 = *(void (**)(char *, uint64_t))(v66 + 8);
  v54(v49, v17);
  static ViewBuilder.buildBlock<A>(_:)(v53, v17, v72);
  return ((uint64_t (*)(uint64_t, uint64_t))v54)(v53, v17);
}

uint64_t SheetPresentationModifier.isPresented.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

ValueMetadata *type metadata accessor for SharingPickerHostModifier()
{
  return &type metadata for SharingPickerHostModifier;
}

unint64_t lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharingPickerHostModifier and conformance SharingPickerHostModifier;
  if (!lazy protocol witness table cache variable for type SharingPickerHostModifier and conformance SharingPickerHostModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SharingPickerHostModifier, &type metadata for SharingPickerHostModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingPickerHostModifier and conformance SharingPickerHostModifier);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SectionStyleConfiguration.RawContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.RawContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.RawContent> and conformance SourceInput<A>);
}

unint64_t lazy protocol witness table accessor for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder;
  if (!lazy protocol witness table cache variable for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewFocusableBorder, &unk_1E1AEB6D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder);
  }
  return result;
}

void static ScrollIndicatorVisibility.never.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

ValueMetadata *type metadata accessor for ScrollIndicatorVisibility.Role()
{
  return &type metadata for ScrollIndicatorVisibility.Role;
}

id static PlatformViewRepresentable<>.platformView(for:)(void *a1)
{
  id result;

  result = objc_msgSend(a1, sel_view);
  if (!result)
    __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitViewColumn()
{
  return &type metadata for NavigationSplitViewColumn;
}

ValueMetadata *type metadata accessor for NavigationSplitViewColumn.Tag()
{
  return &type metadata for NavigationSplitViewColumn.Tag;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationDestinationsKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static NavigationDestinationsKey.defaultValue;
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for MenuActionDismissBehavior.Guts()
{
  return &type metadata for MenuActionDismissBehavior.Guts;
}

uint64_t type metadata accessor for MakeDefaultRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MakeDefaultRepresentation);
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<SidebarLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle, (uint64_t)&type metadata for SidebarLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

uint64_t type metadata accessor for LabelStyleWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LabelStyleWritingModifier);
}

unint64_t lazy protocol witness table accessor for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild;
  if (!lazy protocol witness table cache variable for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsFocusedEnvironmentChild, &type metadata for IsFocusedEnvironmentChild);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild);
  }
  return result;
}

double IsFocusedEnvironmentChild.value.getter@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  double result;
  __int128 v5;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *(_QWORD *)&v5 = *Value;
  *((_QWORD *)&v5 + 1) = v3;
  if ((*(_BYTE *)(AGGraphGetValue() + 8) & 8) != 0)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    AGGraphGetValue();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>, (uint64_t)&type metadata for EnvironmentValues.IsFocusedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusedKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>, (uint64_t)&type metadata for EnvironmentValues.IsFocusedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusedKey);
    swift_retain_n();
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in InsettableGroupedListBody<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t type metadata completion function for InsettableGroupedListBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for InsettableGroupedListBody()
{
  JUMPOUT(0x18D75FF28);
}

void InsettableGroupedListBody.init(selection:insetMode:content:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for InsettableGroupedListBody();
}

uint64_t sub_186F2EEE0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = outlined init with take of SectionInsetMode(v2, v3 + *(int *)(a1 + 52));
  return v1(v4);
}

uint64_t partial apply for closure #1 in InsettableGroupedListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in InsettableGroupedListBody.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in InsettableGroupedListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #2 in InsettableGroupedListBody.body.getter);
}

uint64_t partial apply for closure #2 in InsettableGroupedListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in InsettableGroupedListBody.body.getter);
}

uint64_t type metadata completion function for InsettableGroupedListBody.TableViewRoot()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for InsettableGroupedListBody.TableViewRoot()
{
  JUMPOUT(0x18D75FF28);
}

void InsettableGroupedListBody.TableViewRoot.init(selection:insetMode:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = swift_getKeyPath();
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = swift_getKeyPath();
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 82) = 0u;
  type metadata accessor for InsettableGroupedListBody.TableViewRoot();
}

uint64_t sub_186F2F084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v2 + *(int *)(a1 + 60);
  type metadata accessor for Binding();
  v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, v3, v6);
  return outlined init with take of SectionInsetMode(v1, v2 + *(int *)(a1 + 64));
}

uint64_t associated type witness table accessor for View.Body : View in InsettableGroupedListBody<A, B>.CollectionViewBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t type metadata completion function for InsettableGroupedListBody.CollectionViewBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for InsettableGroupedListBody.CollectionViewBody()
{
  JUMPOUT(0x18D75FF28);
}

void InsettableGroupedListBody.CollectionViewBody.init(selection:insetMode:content:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = swift_getKeyPath();
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = swift_getKeyPath();
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 82) = 0u;
  type metadata accessor for InsettableGroupedListBody.CollectionViewBody();
}

uint64_t sub_186F2F25C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = v3 + a1[15];
  type metadata accessor for Binding();
  v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v5, v8);
  outlined init with take of SectionInsetMode(v4, v3 + a1[16]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + a1[17], v2, v1);
}

uint64_t InsettableGroupedListBody.CollectionViewBody.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v3 + *(int *)(v9 + 64);
  if (*(_BYTE *)(v10 + 33) != 1
    || ((v11 = *(unsigned __int8 *)(v10 + 32),
         v12 = *(_QWORD *)(v10 + 16) | *(_QWORD *)(v10 + 24) | *(_QWORD *)v10 | *(_QWORD *)(v10 + 8),
         !v11)
      ? (v13 = v12 == 0)
      : (v13 = 0),
        !v13))
  {
    v39 = v8;
    v40 = v6;
    v41 = a3;
    v38 = v3;
    InsettableGroupedListBody.CollectionViewBody.effectiveListPadding.getter((uint64_t)&v42);
    v14 = v43;
    v15 = v44;
    v16 = v45;
    v17 = v46;
    v18 = v47;
    v19 = v48;
    v20 = v49;
    v21 = v50;
    v42 = v43;
    LOBYTE(v43) = v44;
    v44 = v45;
    LOBYTE(v45) = v46;
    v46 = v47;
    LOBYTE(v47) = v48;
    v48 = v49;
    LOBYTE(v49) = v50;
    v22 = OptionalEdgeInsets.leading.getter();
    if ((v23 & 1) != 0)
      goto LABEL_12;
    if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      goto LABEL_12;
    v42 = v14;
    LOBYTE(v43) = v15;
    v44 = v16;
    LOBYTE(v45) = v17;
    v46 = v18;
    LOBYTE(v47) = v19;
    v48 = v20;
    LOBYTE(v49) = v21;
    v24 = OptionalEdgeInsets.trailing.getter();
    if ((v25 & 1) != 0)
    {
LABEL_12:
      v27 = v39;
      v28 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v38, a1);
      v29 = v41;
    }
    else
    {
      v26 = v24 & 0x7FFFFFFFFFFFFFFFLL;
      v27 = v39;
      v28 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v38, a1);
      v29 = v41;
      if (!v26)
      {
        InsettableGroupedListBody.CollectionViewBody.effectiveListPadding.getter((uint64_t)&v42);
        v30 = v42;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v27, a1);
        if (!v30)
        {
          v31 = (unsigned int *)MEMORY[0x1E0DC2898];
LABEL_15:
          v32 = *v31;
          v33 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v29, v32, v33);
        }
LABEL_14:
        v31 = (unsigned int *)MEMORY[0x1E0DC2878];
        goto LABEL_15;
      }
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v27, a1);
    goto LABEL_14;
  }
  v35 = *MEMORY[0x1E0DC2898];
  v36 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(a3, v35, v36);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalLayoutComputer<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

uint64_t type metadata accessor for IncrementalLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalLayoutComputer);
}

uint64_t type metadata completion function for IncrementalLayoutComputer.Engine()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for IncrementalLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalLayoutComputer.Engine);
}

ValueMetadata *type metadata accessor for FullScreenToolbarBehavior()
{
  return &type metadata for FullScreenToolbarBehavior;
}

void *type metadata accessor for ExtendedLaunchTestNameKey()
{
  return &unk_1E1AE9758;
}

ValueMetadata *type metadata accessor for DividerStyleConfiguration()
{
  return &type metadata for DividerStyleConfiguration;
}

unint64_t lazy protocol witness table accessor for type ContentScrollViewProvider and conformance ContentScrollViewProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentScrollViewProvider and conformance ContentScrollViewProvider;
  if (!lazy protocol witness table cache variable for type ContentScrollViewProvider and conformance ContentScrollViewProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentScrollViewProvider, &unk_1E1AE8F28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentScrollViewProvider and conformance ContentScrollViewProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for BorderlessButtonStyleBase()
{
  return &type metadata for BorderlessButtonStyleBase;
}

unint64_t lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase;
  if (!lazy protocol witness table cache variable for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderlessButtonStyleBase, &type metadata for BorderlessButtonStyleBase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase);
  }
  return result;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in BorderlessButtonStyleBase()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AccessibilityTechnologies()
{
  return &type metadata for AccessibilityTechnologies;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _CoordinateSpaceModifier<A>()
{
  return static _CoordinateSpaceModifier.== infix(_:_:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _CoordinateSpaceModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CoordinateSpaceModifier<A>, a5);
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static _CoordinateSpaceModifier.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t getEnumTagSinglePayload for WindowSceneConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F2FA1C + 4 * byte_187C765C0[v10]))();
  }
}

uint64_t type metadata completion function for WindowSceneConfiguration()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdatedHostingScrollView and conformance UpdatedHostingScrollView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdatedHostingScrollView and conformance UpdatedHostingScrollView;
  if (!lazy protocol witness table cache variable for type UpdatedHostingScrollView and conformance UpdatedHostingScrollView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdatedHostingScrollView, &unk_1E1B18DC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdatedHostingScrollView and conformance UpdatedHostingScrollView);
  }
  return result;
}

void closure #3 in UpdatedHostingScrollView.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t Value;
  id v25;
  _BYTE v26[120];
  _BYTE v27[24];
  _OWORD v28[14];
  _OWORD v29[2];
  _OWORD v30[2];
  char v31;

  v5 = a1;
  v6 = *(char **)(*(_QWORD *)(a1 + 8) + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper);
  v7 = &v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  v8 = a2[13];
  *((_OWORD *)v7 + 12) = a2[12];
  *((_OWORD *)v7 + 13) = v8;
  *((_OWORD *)v7 + 14) = a2[14];
  *(_OWORD *)(v7 + 233) = *(_OWORD *)((char *)a2 + 233);
  v9 = a2[9];
  *((_OWORD *)v7 + 8) = a2[8];
  *((_OWORD *)v7 + 9) = v9;
  v10 = a2[11];
  *((_OWORD *)v7 + 10) = a2[10];
  *((_OWORD *)v7 + 11) = v10;
  v11 = a2[5];
  *((_OWORD *)v7 + 4) = a2[4];
  *((_OWORD *)v7 + 5) = v11;
  v12 = a2[7];
  *((_OWORD *)v7 + 6) = a2[6];
  *((_OWORD *)v7 + 7) = v12;
  v13 = a2[1];
  *(_OWORD *)v7 = *a2;
  *((_OWORD *)v7 + 1) = v13;
  v14 = a2[3];
  *((_OWORD *)v7 + 2) = a2[2];
  *((_OWORD *)v7 + 3) = v14;
  v15 = v6;
  ScrollViewHelper.didChangeMargins(from:)();

  v16 = *(void **)(v5 + 8);
  v17 = a2[13];
  v28[12] = a2[12];
  v28[13] = v17;
  v29[0] = a2[14];
  *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)a2 + 233);
  v18 = a2[9];
  v28[8] = a2[8];
  v28[9] = v18;
  v19 = a2[11];
  v28[10] = a2[10];
  v28[11] = v19;
  v20 = a2[5];
  v28[4] = a2[4];
  v28[5] = v20;
  v21 = a2[7];
  v28[6] = a2[6];
  v28[7] = v21;
  v22 = a2[1];
  v28[0] = *a2;
  v28[1] = v22;
  v23 = a2[3];
  v28[2] = a2[2];
  v28[3] = v23;
  outlined init with copy of UpdatedHostingScrollView(v5, (uint64_t)v27);
  Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)v26);
  v25 = v16;
  outlined destroy of UpdatedHostingScrollView((uint64_t)v27);
  LOBYTE(v5) = v26[0];
  outlined destroy of ScrollViewConfiguration((uint64_t)v26);
  memset(v30, 0, sizeof(v30));
  v31 = 1;
  UIScrollView.updateIndicatorInsets(margins:axes:properties:safeArea:)((uint64_t *)v28, v5, a3, (uint64_t)v30);

}

void type metadata accessor for ShareConfigurationBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ShareConfigurationBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    v6 = type metadata accessor for ShareConfigurationBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ShareConfigurationBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata completion function for AccessibilityFocusStore.Entry()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewLayoutComputer, &unk_1E1AE6878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewLayoutComputer, &unk_1E1AE6878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewLayoutComputer, &unk_1E1AE6878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewLayoutComputer()
{
  lazy protocol witness table accessor for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer();
  return static AsyncAttribute.flags.getter();
}

uint64_t initializeWithCopy for ScrollViewCommitMutation(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 96);
  if ((~v4 & 0xF000000000000004) != 0)
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v4);
    *(_QWORD *)(a1 + 96) = v4;
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 108) = *(_QWORD *)(a2 + 108);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  return a1;
}

uint64_t ScrollViewCommitMutation.combine<A>(with:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _OWORD v6[11];
  __int16 v7;
  _OWORD v8[11];
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  if (swift_dynamicCast())
  {
    v8[8] = v18;
    v8[9] = v19;
    v8[10] = v20;
    v8[4] = v14;
    v8[5] = v15;
    v8[6] = v16;
    v8[7] = v17;
    v8[0] = v10;
    v8[1] = v11;
    v8[2] = v12;
    v8[3] = v13;
    v6[8] = v18;
    v6[9] = v19;
    v6[10] = v20;
    v6[4] = v14;
    v6[5] = v15;
    v6[6] = v16;
    v6[7] = v17;
    v6[0] = v10;
    v6[1] = v11;
    v9 = v21;
    v7 = v21;
    v6[2] = v12;
    v6[3] = v13;
    v4 = ScrollViewCommitMutation.merge(_:)((uint64_t *)v6);
    outlined release of ScrollViewCommitMutation((uint64_t)v8);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t ScrollViewCommitMutation.merge(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unint64_t v9;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;

  v2 = *a1;
  v32 = a1[2];
  v33 = a1[1];
  v30 = a1[4];
  v31 = a1[3];
  v28 = a1[6];
  v29 = a1[5];
  v27 = a1[7];
  v25 = a1[9];
  v26 = a1[8];
  v23 = a1[11];
  v24 = a1[10];
  v35 = a1[13];
  v3 = *((_DWORD *)a1 + 28);
  v36 = *(_OWORD *)(a1 + 15);
  v4 = a1[17];
  v5 = a1[18];
  v34 = *(_OWORD *)(a1 + 19);
  v6 = a1[21];
  v7 = *((unsigned __int8 *)a1 + 176);
  v8 = *((_BYTE *)a1 + 177);
  v22 = a1[12];
  v9 = v22 & 0xF000000000000004;
  if ((~*(_QWORD *)(v1 + 96) & 0xF000000000000004) != 0
    && v9 != 0xF000000000000004
    && (static WeakAttribute.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  if (*(_BYTE *)(v1 + 120) != 5 && v36 != 5 && (static WeakAttribute.== infix(_:_:)() & 1) == 0)
    return 0;
  if (((*(unsigned __int8 *)(v1 + 176) | v7) & 1) == 0)
  {
    type metadata accessor for CGSize(0);
    if ((static WeakAttribute.== infix(_:_:)() & 1) == 0)
      return 0;
  }
  if (*(_BYTE *)(v1 + 177) == 1)
  {
    if ((v8 & 1) != 0)
      return 0;
  }
  else
  {
    if (v9 != 0xF000000000000004)
    {
      v20 = *(_QWORD *)(v1 + 8);
      v21 = *(_QWORD *)v1;
      v18 = *(_QWORD *)(v1 + 24);
      v19 = *(_QWORD *)(v1 + 16);
      v16 = *(_QWORD *)(v1 + 40);
      v17 = *(_QWORD *)(v1 + 32);
      v14 = *(_QWORD *)(v1 + 56);
      v15 = *(_QWORD *)(v1 + 48);
      v12 = *(_OWORD *)(v1 + 80);
      v13 = *(_OWORD *)(v1 + 64);
      v11 = *(_QWORD *)(v1 + 96);
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(v22);
      outlined consume of SystemScrollLayoutState?(v21, v20, v19, v18, v17, v16, v15, v14, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11);
      *(_QWORD *)v1 = v2;
      *(_QWORD *)(v1 + 8) = v33;
      *(_QWORD *)(v1 + 16) = v32;
      *(_QWORD *)(v1 + 24) = v31;
      *(_QWORD *)(v1 + 32) = v30;
      *(_QWORD *)(v1 + 40) = v29;
      *(_QWORD *)(v1 + 48) = v28;
      *(_QWORD *)(v1 + 56) = v27;
      *(_QWORD *)(v1 + 64) = v26;
      *(_QWORD *)(v1 + 72) = v25;
      *(_QWORD *)(v1 + 80) = v24;
      *(_QWORD *)(v1 + 88) = v23;
      *(_QWORD *)(v1 + 96) = v22;
      *(_QWORD *)(v1 + 104) = v35;
      *(_DWORD *)(v1 + 112) = v3;
    }
    if (v36 != 5)
    {
      *(_OWORD *)(v1 + 120) = v36;
      *(_QWORD *)(v1 + 136) = v4;
      *(_QWORD *)(v1 + 144) = v5;
    }
    if ((v7 & 1) == 0)
    {
      *(_OWORD *)(v1 + 152) = v34;
      *(_QWORD *)(v1 + 168) = v6;
      *(_BYTE *)(v1 + 176) = 0;
    }
    *(_BYTE *)(v1 + 177) = v8;
  }
  return 1;
}

ValueMetadata *type metadata accessor for ScrollToTopGestureAction()
{
  return &type metadata for ScrollToTopGestureAction;
}

ValueMetadata *type metadata accessor for PlatformItemListFlagsSet()
{
  return &type metadata for PlatformItemListFlagsSet;
}

void *type metadata accessor for PagingScrollViewBehavior()
{
  return &unk_1E1AE59E8;
}

double protocol witness for ScrollTargetBehavior.updateTarget(_:context:) in conformance PagingScrollViewBehavior(uint64_t a1, __int128 *a2)
{
  unsigned __int8 *v2;
  double result;

  *(_QWORD *)&result = PagingScrollViewBehavior.updateTarget(_:context:)(a1, a2, *v2 | (unsigned __int16)(v2[1] << 8)).n128_u64[0];
  return result;
}

__n128 PagingScrollViewBehavior.updateTarget(_:context:)(uint64_t a1, __int128 *a2, __int16 a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8[9];

  v3 = a2[7];
  v8[6] = a2[6];
  v8[7] = v3;
  v8[8] = a2[8];
  v4 = a2[3];
  v8[2] = a2[2];
  v8[3] = v4;
  v5 = a2[5];
  v8[4] = a2[4];
  v8[5] = v5;
  v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  if ((a3 & 0xFF00) == 0x100)
    PagingScrollTargetBehavior.updateTarget(_:context:)(a1, v8);
  else
    ViewAlignedScrollTargetBehavior.updateTarget(_:context:)(a1, v8);
  return result;
}

ValueMetadata *type metadata accessor for OutlineRootConfiguration()
{
  return &type metadata for OutlineRootConfiguration;
}

uint64_t NavigationBridge_PhoneTV.__deallocating_deinit()
{
  UIKitNavigationBridge.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for NavigationBridge_PhoneTV()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for NavigationBridge_PhoneTV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationBridge_PhoneTV);
}

uint64_t NavigationBridge_PhoneTV.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  v1 = specialized UIKitNavigationBridge.init()(v0);
  swift_release();
  return v1;
}

Swift::Void __swiftcall NavigationBridge_PhoneTV.hostingControllerWillDisappear()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3[2];

  v2 = (id)UIKitNavigationBridge.host.getter();
  if (v2)
  {
    v1 = *(_QWORD *)(v0 + 184);
    v3[0] = *(_QWORD *)(v0 + 176);
    v3[1] = v1;
    outlined copy of EnvironmentValues?(v3[0]);
    _UIHostingView.environmentOverride.setter(v3);

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall NavigationBridge_PhoneTV.hostingControllerDidAppear()()
{
  UIKitNavigationBridge.isBeingPresented.getter();
}

void sub_186F3054C(char a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;

  if ((a1 & 1) != 0)
  {
    v1 = UIKitNavigationBridge.host.getter();
    if (v1)
    {
      v2 = (void *)v1;
      v3 = xmmword_187BFE310;
      _UIHostingView.environmentOverride.setter((uint64_t *)&v3);

    }
    else
    {
      __break(1u);
    }
  }
}

void NavigationBridge_PhoneTV.pushTarget(isDetail:)(uint64_t a1@<X8>)
{
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    if (!UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter())
      UIKitNavigationBridge.containingVC.getter();
    UIKitNavigationBridge.containingSplitViewController.getter();
  }
  UIKitNavigationBridge.pushTarget(isDetail:)(a1);
}

ValueMetadata *type metadata accessor for HostingControllerBridges()
{
  return &type metadata for HostingControllerBridges;
}

unint64_t lazy protocol witness table accessor for type FocusableBoundsTransform and conformance FocusableBoundsTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusableBoundsTransform and conformance FocusableBoundsTransform;
  if (!lazy protocol witness table cache variable for type FocusableBoundsTransform and conformance FocusableBoundsTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusableBoundsTransform, &type metadata for FocusableBoundsTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableBoundsTransform and conformance FocusableBoundsTransform);
  }
  return result;
}

void base witness table accessor for _AttributeBody in CoordinateSpaceTransform<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CoordinateSpaceTransform<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoordinateSpaceTransform<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for AnyUIKitNavigationBridge()
{
  return objc_opt_self();
}

uint64_t AnyUIKitNavigationBridge.presentationModeLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v2 = v0;
    swift_weakInit();
    type metadata accessor for LocationBox<UIKitNavigationBridgePresentationModeLocation>();
    swift_allocObject();
    v1 = LocationBox.init(_:)();
    *(_QWORD *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

ValueMetadata *type metadata accessor for AccessibilityButtonStyle()
{
  return &type metadata for AccessibilityButtonStyle;
}

unint64_t lazy protocol witness table accessor for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityButtonStyle, &type metadata for AccessibilityButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle);
  }
  return result;
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata completion function for _ListStyleConfiguration()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _IncrementalStack_State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for MinorProperties(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for _IncrementalStack_State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _IncrementalStack_State);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _GeometryActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GeometryActionModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _GeometryActionModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _GeometryActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t static _GeometryActionModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _GeometryActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))type metadata accessor for _GeometryActionModifier, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>, a7, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9);
}

uint64_t type metadata completion function for TableCollectionViewCell()
{
  return swift_initClassMetadata2();
}

uint64_t initializeWithCopy for SystemScrollLayoutState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v7);
  *(_QWORD *)(a1 + 96) = v7;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for SystemScrollLayoutState(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 96);
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v4);
  v5 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v4;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v5);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

unint64_t outlined copy of SystemScrollLayoutState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t result;

  result = a13;
  if ((~a13 & 0xF000000000000004) != 0)
    return outlined copy of SystemScrollLayoutState.ContentOffsetMode(a13);
  return result;
}

ValueMetadata *type metadata accessor for SystemScrollLayoutState.ContentOffsetAdjustmentReason()
{
  return &type metadata for SystemScrollLayoutState.ContentOffsetAdjustmentReason;
}

ValueMetadata *type metadata accessor for SystemScrollLayoutState.ContentOffsetMode()
{
  return &type metadata for SystemScrollLayoutState.ContentOffsetMode;
}

void base witness table accessor for Sequence in ShadowSectionCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Collection in ShadowSectionCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ShadowListUpdateRecorder(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = (_OWORD *)(a1 + 48);
  v6 = (_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v5;
      *(_QWORD *)(a1 + 56) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of ScrollToTopGestureAction(a1 + 48);
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  swift_unknownObjectWeakCopyAssign();
  v10 = (_OWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = (_OWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 80);
  if (v9)
  {
    if (v11)
    {
      v13 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v11;
      *(_QWORD *)(a1 + 88) = v13;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    }
    else
    {
      outlined destroy of RefreshAction(a1 + 80);
      v15 = *(_QWORD *)(a2 + 96);
      *v10 = *v12;
      *(_QWORD *)(a1 + 96) = v15;
    }
  }
  else if (v11)
  {
    v14 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_retain();
  }
  else
  {
    v16 = *v12;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *v10 = v16;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined assign with copy of ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  assignWithCopy for ScrollViewConfiguration(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for ScrollViewAdjustedState(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedState, &unk_1E1AE2BD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedState, &unk_1E1AE2BD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedState()
{
  lazy protocol witness table accessor for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState();
  return static AsyncAttribute.flags.getter();
}

double ScrollViewAdjustedState.initialOffset()()
{
  double v0;
  double v1;
  double v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double x;
  double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t v29;

  AGGraphClearUpdate();
  AGGraphGetValue();
  AGGraphSetUpdate();
  AGGraphGetValue();
  ScrollAnchorStorage.adjustedAnchor(role:layoutDirection:)();
  AGGraphGetValue();
  v0 = 0.0;
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    AGGraphGetValue();
    CGRect.init(_:)();
    v2 = v1;
    v4 = v3;
    Value = AGGraphGetValue();
    v11 = MEMORY[0x18D75BE3C](Value, v6, v7, v8, v9, v10);
    v13 = v12;
    x = UnitPoint.in(_:)((CGSize)__PAIR128__(v4, *(unint64_t *)&v2)).x;
    v15 = x - UnitPoint.in(_:)((CGSize)__PAIR128__(v13, *(unint64_t *)&v11)).x;
    v16 = v2 - v11;
    if (v2 - v11 <= 0.0)
      v16 = 0.0;
    if (v15 < 0.0)
      v15 = 0.0;
    if (v16 >= v15)
      v0 = v15;
    else
      v0 = v16;
  }
  AGGraphGetValue();
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    AGGraphGetValue();
    CGRect.init(_:)();
    v18 = v17;
    v20 = v19;
    v21 = AGGraphGetValue();
    v27 = MEMORY[0x18D75BE3C](v21, v22, v23, v24, v25, v26);
    v29 = v28;
    UnitPoint.in(_:)((CGSize)__PAIR128__(v20, v18));
    UnitPoint.in(_:)((CGSize)__PAIR128__(v29, *(unint64_t *)&v27));
  }
  return v0;
}

ValueMetadata *type metadata accessor for ScrollContentBackground()
{
  return &type metadata for ScrollContentBackground;
}

uint64_t initializeWithTake for RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  swift_weakTakeInit();
  swift_weakTakeInit();
  swift_weakTakeInit();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for RootEnvironmentModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t assignWithCopy for RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (__int128 *)(a1 + 32);
  v5 = (__int128 *)(a2 + 32);
  v6 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) == 255)
  {
    if (v6 == 255)
    {
      v8 = *v5;
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *v4 = v8;
    }
    else
    {
      v15 = v6 & 1;
      v17 = *(_QWORD *)(a2 + 32);
      v16 = *(_QWORD *)(a2 + 40);
      outlined copy of SceneID(v17, v16, v6 & 1);
      *(_QWORD *)(a1 + 32) = v17;
      *(_QWORD *)(a1 + 40) = v16;
      *(_BYTE *)(a1 + 48) = v15;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of SceneID(a1 + 32);
    v7 = *(_BYTE *)(a2 + 48);
    *v4 = *v5;
    *(_BYTE *)(a1 + 48) = v7;
  }
  else
  {
    v9 = v6 & 1;
    v11 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    outlined copy of SceneID(v11, v10, v6 & 1);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_BYTE *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = v9;
    outlined consume of SceneID(v12, v13, v14);
  }
  return a1;
}

uint64_t outlined init with take of RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  initializeWithTake for RootEnvironmentModifier(a2, a1);
  return a2;
}

void type metadata accessor for (value: RootEnvironmentModifier, changed: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (value: RootEnvironmentModifier, changed: Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: RootEnvironmentModifier, changed: Bool));
  }
}

uint64_t destroy for RootEnvironmentModifier.Child(uint64_t result)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(result + 32) != 3)
  {
    v1 = result;
    swift_weakDestroy();
    swift_weakDestroy();
    result = swift_weakDestroy();
    v2 = *(unsigned __int8 *)(v1 + 56);
    if (v2 != 255)
      return outlined consume of SceneID(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v2 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for RootEnvironmentModifier.Child(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a2;
  v4 = a2 + 1;
  *(_QWORD *)a1 = v5;
  v6 = a1 + 8;
  if (*((_BYTE *)a2 + 32) == 3)
  {
    v7 = *((_OWORD *)v4 + 1);
    *(_OWORD *)v6 = *(_OWORD *)v4;
    *(_OWORD *)(v6 + 16) = v7;
    *(_OWORD *)(v6 + 32) = *((_OWORD *)v4 + 2);
    *(_BYTE *)(v6 + 48) = *((_BYTE *)v4 + 48);
  }
  else
  {
    swift_weakCopyInit();
    swift_weakCopyInit();
    swift_weakCopyInit();
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = *((unsigned __int8 *)a2 + 56);
    if (v8 == 255)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    }
    else
    {
      v9 = v8 & 1;
      v11 = a2[5];
      v10 = a2[6];
      outlined copy of SceneID(v11, v10, v8 & 1);
      *(_QWORD *)(a1 + 40) = v11;
      *(_QWORD *)(a1 + 48) = v10;
      *(_BYTE *)(a1 + 56) = v9;
    }
  }
  return a1;
}

uint64_t outlined destroy of RootEnvironmentModifier.Child(uint64_t a1)
{
  destroy for RootEnvironmentModifier.Child(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child;
  if (!lazy protocol witness table cache variable for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RootEnvironmentModifier.Child, &type metadata for RootEnvironmentModifier.Child);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child);
  }
  return result;
}

uint64_t PlatformViewDisplayList.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t type metadata accessor for PlatformViewCoordinator()
{
  return objc_opt_self();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationPropertiesKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationPropertiesKey(&one-time initialization token for defaultValue, (uint64_t)static NavigationPropertiesKey.defaultValue, a1);
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  v5 = __swift_project_value_buffer(v4, (uint64_t)a2);
  v6 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  v5 = __swift_project_value_buffer(v4, (uint64_t)a2);
  v6 = type metadata accessor for ToolbarStorage.SearchItem(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for UIListContentConfiguration?(0);
  v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  v5 = __swift_project_value_buffer(v4, (uint64_t)a2);
  v6 = type metadata accessor for UIListContentConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t storeEnumTagSinglePayload for ListAccessoryVisibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_186F31A58 + 4 * byte_187C1DE55[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_186F31A8C + 4 * byte_187C1DE50[v4]))();
}

uint64_t sub_186F31A8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F31A94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F31A9CLL);
  return result;
}

uint64_t sub_186F31AA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F31AB0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_186F31AB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F31ABC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for AVKitPressableCaptureButton.Phase(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for ListAccessoryVisibility()
{
  return &type metadata for ListAccessoryVisibility;
}

ValueMetadata *type metadata accessor for ListAccessoryVisibility.Guts()
{
  return &type metadata for ListAccessoryVisibility.Guts;
}

void type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalViewGeometry()
{
  lazy protocol witness table accessor for type IncrementalViewGeometry and conformance IncrementalViewGeometry();
  return static AsyncAttribute.flags.getter();
}

ValueMetadata *type metadata accessor for GroupedFormStyleContext()
{
  return &type metadata for GroupedFormStyleContext;
}

uint64_t type metadata completion function for ContextMenuModifierCore()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for BarEnvironmentViewModel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(319, &lazy cache variable for type metadata for Published<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<ColorScheme?>();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for BarEnvironmentViewModel(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for BarEnvironmentViewModel);
}

unint64_t instantiation function for generic protocol witness table for AccessibilityVoidAction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5918], MEMORY[0x1E0CE58F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5910], MEMORY[0x1E0CE58F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5908], MEMORY[0x1E0CE58F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5900], MEMORY[0x1E0CE58F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStore()
{
  return &type metadata for AccessibilityFocusStore;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnchorWritingModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AnchorWritingModifier<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnchorWritingModifier<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t *a4@<X4>, double *a5@<X8>)
{
  return static _AnchorWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a5);
}

_QWORD *assignWithCopy for EnvironmentChangeModifier2(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

double static _AnchorWritingModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, double *a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;

  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  v21 = *a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v11 = *(_OWORD *)(a2 + 40);
  v16 = *(_OWORD *)(a2 + 24);
  v17 = v11;
  v18 = *(_OWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 72);
  v20 = v10;
  return static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)(&v21, &v13, 1, a3, a4, a5, a6, a7);
}

uint64_t partial apply for implicit closure #1 in static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)()
{
  uint64_t *v0;

  return implicit closure #1 in static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)(v0[5], v0[6], v0[2], v0[3], v0[4]);
}

uint64_t implicit closure #1 in static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  _QWORD v12[2];
  _BYTE v13[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12[0] = a1;
  v12[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for AnchorWriter(0, a3, a4, a5);
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnchorWriter<A, B>, v15);
  v8 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v13, v15, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11;
}

double static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, double *a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  int v50;

  v24 = *a2;
  v22 = *((_DWORD *)a2 + 2);
  v26 = a2[2];
  v21 = *((_DWORD *)a2 + 6);
  v20 = *((_DWORD *)a2 + 7);
  v19 = *((_DWORD *)a2 + 8);
  v29 = *((_DWORD *)a2 + 9);
  v25 = a2[5];
  v28 = a2[6];
  v30 = *((_DWORD *)a2 + 14);
  v17 = *((_DWORD *)a2 + 15);
  v16 = *((_DWORD *)a2 + 16);
  v15 = *((_DWORD *)a2 + 17);
  v18 = *((_DWORD *)a2 + 18);
  v27 = *((_DWORD *)a2 + 19);
  v23 = *((_DWORD *)a2 + 20);
  LODWORD(v42) = *a1;
  type metadata accessor for _AnchorWritingModifier(255, a5, a6, a7);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if ((a3 & 1) != 0)
  {
    _ViewInputs.animatedPosition()();
    v42 = v24;
    v43 = v22;
    v44 = v26;
    *(_QWORD *)&v45 = __PAIR64__(v20, v21);
    *((_QWORD *)&v45 + 1) = __PAIR64__(v29, v19);
    v46 = v25;
    v47 = v28;
    *(_QWORD *)&v48 = __PAIR64__(v17, v30);
    *((_QWORD *)&v48 + 1) = __PAIR64__(v15, v16);
    v49 = __PAIR64__(v27, v18);
    v50 = v23;
    _ViewInputs.animatedCGSize()();
  }
  else
  {
    _ViewInputs.position.getter();
    v42 = v24;
    v43 = v22;
    v44 = v26;
    *(_QWORD *)&v45 = __PAIR64__(v20, v21);
    *((_QWORD *)&v45 + 1) = __PAIR64__(v29, v19);
    v46 = v25;
    v47 = v28;
    *(_QWORD *)&v48 = __PAIR64__(v17, v30);
    *((_QWORD *)&v48 + 1) = __PAIR64__(v15, v16);
    v49 = __PAIR64__(v27, v18);
    v50 = v23;
    _ViewInputs.size.getter();
    Attribute<A>.origin()();
  }
  _ViewInputs.transform.getter();
  v42 = v24;
  v43 = v22;
  v44 = v26;
  *(_QWORD *)&v45 = __PAIR64__(v20, v21);
  *((_QWORD *)&v45 + 1) = __PAIR64__(v29, v19);
  v46 = v25;
  v47 = v28;
  *(_QWORD *)&v48 = __PAIR64__(v17, v30);
  *((_QWORD *)&v48 + 1) = __PAIR64__(v15, v16);
  v49 = __PAIR64__(v27, v18);
  v50 = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  v31 = v24;
  v32 = v22;
  v33 = v26;
  v34 = v45;
  v35 = v25;
  v36 = v28;
  v37 = v48;
  v38 = __PAIR64__(v27, v18);
  v39 = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a4(&v40, v9, &v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v10 = swift_release();
  v31 = v28;
  v32 = v30;
  MEMORY[0x1E0C80A78](v10, v11);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)a8 = v40;
  result = v41;
  a8[1] = v41;
  return result;
}

void type metadata accessor for UIKitInspectorV3Bridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitInspectorV3Bridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    v6 = type metadata accessor for UIKitInspectorV3Bridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata completion function for UIHostingConfiguration()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarDefaultItemKind()
{
  return &type metadata for ToolbarDefaultItemKind;
}

ValueMetadata *type metadata accessor for ToolbarDefaultItemKind.Kind()
{
  return &type metadata for ToolbarDefaultItemKind.Kind;
}

ValueMetadata *type metadata accessor for ShouldRenderAsTemplate()
{
  return &type metadata for ShouldRenderAsTemplate;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ShouldRenderAsTemplate()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type ScrollViewHostProvider and conformance ScrollViewHostProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHostProvider and conformance ScrollViewHostProvider;
  if (!lazy protocol witness table cache variable for type ScrollViewHostProvider and conformance ScrollViewHostProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHostProvider, &unk_1E1ADDDF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHostProvider and conformance ScrollViewHostProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewContentFrame and conformance ScrollViewContentFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame;
  if (!lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewContentFrame, &unk_1E1ADDD60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame;
  if (!lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewContentFrame, &unk_1E1ADDD60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewContentFrame()
{
  lazy protocol witness table accessor for type ScrollViewContentFrame and conformance ScrollViewContentFrame();
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedSize, &unk_1E1ADDCE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewAdjustedSize, &unk_1E1ADDCE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedSize()
{
  lazy protocol witness table accessor for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize();
  return static AsyncAttribute.flags.getter();
}

ValueMetadata *type metadata accessor for ScrollIndicatorOptions()
{
  return &type metadata for ScrollIndicatorOptions;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ScrollEventStateReader<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static ScrollEventStateReader._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static ScrollEventStateReader._makeViewList(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t View;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 6);
  v10 = *((_DWORD *)a2 + 7);
  v18 = *((_DWORD *)a2 + 9);
  v19 = *((_DWORD *)a2 + 8);
  v17 = a2[5];
  v24 = a2[6];
  v23 = a2[7];
  v22 = *((_DWORD *)a2 + 16);
  v21 = a2[9];
  v20 = *((_BYTE *)a2 + 80);
  v31 = *((_DWORD *)a2 + 2);
  v7 = v31;
  v32 = v8;
  v33 = v9;
  v34 = v10;
  v35 = v19;
  v36 = v18;
  v37 = v17;
  v11 = _GraphInputs.scrollPhaseState.getter();
  type metadata accessor for ScrollEventStateReader(255, a3, a4, v12);
  type metadata accessor for _GraphValue();
  LODWORD(v30) = _GraphValue.value.getter();
  HIDWORD(v30) = v11;
  v27 = a3;
  View = type metadata accessor for ScrollEventStateReader.MakeView(0, a3, a4, v13);
  v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollEventStateReader<A>.MakeView, View);
  v14 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v30, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v26, View, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v15);
  _GraphValue.init(_:)();
  v30 = v6;
  v31 = v7;
  v32 = v8;
  v33 = v9;
  v34 = v10;
  v35 = v19;
  v36 = v18;
  v37 = v17;
  v38 = v24;
  v39 = v23;
  v40 = v22;
  v41 = v21;
  v42 = v20;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v25, &v30, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollBehaviorModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  return static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t type metadata accessor for ScrollBehaviorModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollBehaviorModifier);
}

uint64_t static ScrollBehaviorModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OffsetAttribute2;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void (*v48)(unint64_t *__return_ptr, uint64_t, unint64_t *);
  unint64_t *v49;
  unint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;

  v47 = a4;
  v48 = a3;
  v49 = a7;
  v70 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_DWORD *)(a2 + 80);
  v62 = *(_QWORD *)a2;
  v63 = v10;
  v65 = *(_OWORD *)(a2 + 24);
  v64 = v11;
  *(_QWORD *)&v66 = v12;
  *((_QWORD *)&v66 + 1) = v13;
  v67 = *(_OWORD *)(a2 + 56);
  v68 = *(_QWORD *)(a2 + 72);
  v69 = v14;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ScrollTargetRole.Key>, MEMORY[0x1E0CE33D8], MEMORY[0x1E0CE33D0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollTargetRole.Key> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  LODWORD(v53) = v9;
  type metadata accessor for ScrollBehaviorModifier(255, a5, a6, v15);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a5 - 8) + 64))
    closure #1 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(1, a5, a6, v16);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v18 = *MEMORY[0x1E0CFED28];
  v53 = __PAIR64__(*MEMORY[0x1E0CFED28], OffsetAttribute2);
  v54 = v18;
  v55 = 0;
  MEMORY[0x1E0C80A78](OffsetAttribute2, v19);
  v43 = type metadata accessor for ScrollBehaviorModifier.ScrollBehaviorProvider(0, a5, a6, v20);
  v44 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollBehaviorModifier<A>.ScrollBehaviorProvider, v43);
  v21 = MEMORY[0x1E0CFEC78];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<ResolvedScrollBehavior>, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v22 = MEMORY[0x1E0DEDCE8];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v53, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)v42, v43, MEMORY[0x1E0DEDCE8], v23, MEMORY[0x1E0DEDD18], v24);
  v25 = v50;
  v53 = v62;
  v54 = v63;
  v56 = v64;
  v57 = v65;
  v58 = v66;
  v59 = v67;
  v60 = v68;
  v61 = v69;
  v26 = _ViewInputs.environment.getter();
  v53 = __PAIR64__(v25, v26);
  v46 = v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v45 = a6;
  v29 = type metadata accessor for ScrollBehaviorModifier.ChildEnvironment(0, a5, a6, v28);
  v43 = v29;
  v44 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollBehaviorModifier<A>.ChildEnvironment, v29);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E0CE3E78], (uint64_t (*)(_QWORD, uint64_t))v21);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v53, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v42, v29, v22, v30, MEMORY[0x1E0DEDD18], v31);
  _ViewInputs.environment.setter();
  v53 = v62;
  v54 = v63;
  v56 = v64;
  v57 = v65;
  v58 = v66;
  v59 = v67;
  v60 = v68;
  v61 = v69;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v32 = swift_bridgeObjectRetain();
  v48(&v50, v32, &v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v33 = v50;
  v34 = v51;
  v35 = v52;
  v53 = v50;
  v54 = v51;
  v55 = v52;
  v36 = _ViewOutputs.subscript.getter();
  if ((v36 & 0x100000000) == 0)
  {
    MEMORY[0x1E0C80A78](v36, v37);
    v42[0] = a5;
    v42[1] = v45;
    LOBYTE(v43) = 0;
    HIDWORD(v43) = v38;
    LOBYTE(v44) = 1;
    HIDWORD(v44) = v38;
    MEMORY[0x1E0C80A78](v38, v39);
    AGGraphMutateAttribute();
  }
  v40 = v49;
  *v49 = v33;
  *((_DWORD *)v40 + 2) = v34;
  *((_DWORD *)v40 + 3) = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollBehaviorModifier<A>.LayoutRoleFilter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ScrollBehaviorModifier.LayoutRoleFilter.value.getter();
  *a1 = result;
  return result;
}

void base witness table accessor for _AttributeBody in ScrollBehaviorModifier<A>.LayoutRoleFilter()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for ScrollBehaviorModifier.LayoutRoleFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollBehaviorModifier.LayoutRoleFilter);
}

uint64_t ScrollBehaviorModifier.LayoutRoleFilter.value.getter()
{
  char *v0;
  char v1;

  type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
  if (*(_QWORD *)(*(_QWORD *)AGGraphGetValue() + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(*v0), (v1 & 1) != 0))
  {
    return swift_bridgeObjectRetain();
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollBehaviorModifier<A>.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return ScrollBehaviorModifier.ChildEnvironment.value.getter(a1);
}

void base witness table accessor for _AttributeBody in ScrollBehaviorModifier<A>.ChildEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for ScrollBehaviorModifier.ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollBehaviorModifier.ChildEnvironment);
}

uint64_t ScrollBehaviorModifier.ChildEnvironment.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

void base witness table accessor for _AttributeBody in ScrollBehaviorModifier<A>.ScrollBehaviorProvider()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for ScrollBehaviorModifier.ScrollBehaviorProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollBehaviorModifier.ScrollBehaviorProvider);
}

uint64_t ScrollBehaviorModifier.ScrollBehaviorProvider.updateValue()(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t Value;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[40];
  int v15;
  __int16 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(v1 + 12) + 1;
  *(_DWORD *)(v1 + 12) = v2;
  v13 = *(_OWORD *)(a1 + 16);
  v11 = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  Value = AGGraphGetValue();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(boxed_opaque_existential_1, Value, v11);
  v5 = AGCreateWeakAttribute();
  v6 = v5;
  v7 = HIDWORD(v5);
  v8 = AGCreateWeakAttribute();
  LODWORD(boxed_opaque_existential_1) = v8;
  v9 = HIDWORD(v8);
  outlined init with take of OptionalBinaryInteger(&v12, (uint64_t)v14);
  v15 = v2;
  v16 = 256;
  v17 = v6;
  v18 = v7;
  v19 = (int)boxed_opaque_existential_1;
  v20 = v9;
  v21 = 0;
  AGGraphSetOutputValue();
  return outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v14);
}

uint64_t assignWithTake for ResolvedScrollBehavior(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t outlined destroy of (ResolvedScrollBehavior?, ResolvedScrollBehavior?)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (ResolvedScrollBehavior?, ResolvedScrollBehavior?)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (ResolvedScrollBehavior?, ResolvedScrollBehavior?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ResolvedScrollBehavior?, ResolvedScrollBehavior?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ResolvedScrollBehavior?, ResolvedScrollBehavior?));
  }
}

uint64_t outlined init with take of ResolvedScrollBehavior?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ResolvedScrollBehavior()
{
  return &type metadata for ResolvedScrollBehavior;
}

uint64_t ResolvedScrollBehavior.updateTarget(_:context:)(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t *WeakValue;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  _OWORD v30[9];
  _OWORD v31[3];
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v3 = a2[7];
  v44 = a2[6];
  v45 = v3;
  v46 = a2[8];
  v4 = a2[3];
  v41 = a2[2];
  *(_OWORD *)v42 = v4;
  v5 = a2[5];
  *(_OWORD *)&v42[16] = a2[4];
  v43 = v5;
  v6 = a2[1];
  v39 = *a2;
  v40 = v6;
  if ((*(_BYTE *)(v2 + 45) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = result;
    v8 = *(_BYTE *)(v2 + 44);
    type metadata accessor for [ScrollableCollection](0);
    WeakValue = (uint64_t *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      v10 = *WeakValue;
      outlined retain of ScrollTargetBehaviorContext((uint64_t)&v39);
      v24 = v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      outlined retain of ScrollTargetBehaviorContext((uint64_t)&v39);
      v24 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v11 = (uint64_t *)AGGraphGetWeakValue();
    v28 = v8;
    if (v11)
    {
      v23 = *v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v23 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v12 = (uint64_t *)AGGraphGetWeakValue();
    v29 = v7;
    if (v12)
    {
      v13 = *v12;
      v14 = v12[1];
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
    }
    else
    {
      EnvironmentValues.init()();
      swift_release();
      swift_release();
      v13 = v37;
      v14 = v38;
    }
    v15 = BYTE9(v44);
    v16 = v44;
    v17 = *(_QWORD *)&v42[24];
    v26 = *(_OWORD *)&v42[8];
    v27 = v43;
    v25 = v39;
    v18 = v40;
    v19 = v41;
    v20 = v42[0];
    v21 = *(_QWORD *)(v2 + 24);
    v22 = *(_QWORD *)(v2 + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)v2, v21);
    v31[0] = v25;
    v31[1] = v18;
    v31[2] = v19;
    v32[0] = v20;
    *(_OWORD *)&v32[8] = v26;
    *(_QWORD *)&v32[24] = v17;
    v33 = v27;
    *(_QWORD *)&v34 = v16;
    BYTE8(v34) = v28;
    BYTE9(v34) = v15;
    *(_QWORD *)&v35 = v24;
    *((_QWORD *)&v35 + 1) = v23;
    *(_QWORD *)&v36 = v13;
    *((_QWORD *)&v36 + 1) = v14;
    v30[6] = v34;
    v30[7] = v35;
    v30[8] = v36;
    v30[2] = v19;
    v30[3] = *(_OWORD *)v32;
    v30[4] = *(_OWORD *)&v32[16];
    v30[5] = v27;
    v30[0] = v25;
    v30[1] = v18;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v22 + 8))(v29, v30, v21, v22);
    return outlined release of ScrollTargetBehaviorContext((uint64_t)v31);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets;
  if (!lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE54C8], MEMORY[0x1E0CE54E0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets);
  }
  return result;
}

ValueMetadata *type metadata accessor for PaletteSelectionEffect.Guts()
{
  return &type metadata for PaletteSelectionEffect.Guts;
}

ValueMetadata *type metadata accessor for NavigationTitleStorage()
{
  return &type metadata for NavigationTitleStorage;
}

uint64_t outlined init with copy of ListScrollViewProvider(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BridgedPopUpButtonProvider(a2, a1);
  return a2;
}

uint64_t outlined init with take of ListScrollViewProvider(uint64_t a1, uint64_t a2)
{
  initializeWithTake for BridgedPopUpButtonProvider(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ListScrollViewProvider and conformance ListScrollViewProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListScrollViewProvider and conformance ListScrollViewProvider;
  if (!lazy protocol witness table cache variable for type ListScrollViewProvider and conformance ListScrollViewProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListScrollViewProvider, &type metadata for ListScrollViewProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListScrollViewProvider and conformance ListScrollViewProvider);
  }
  return result;
}

uint64_t type metadata completion function for ListCollectionViewCell()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalTransaction()
{
  lazy protocol witness table accessor for type IncrementalTransaction and conformance IncrementalTransaction();
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for FocusableViewResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FocusableViewResponder;
  if (!type metadata singleton initialization cache for FocusableViewResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FocusableViewResponder.init(inputs:)()
{
  uint64_t v0;

  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 216) = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_WORD *)(v0 + 288) = 257;
  swift_retain();
  ContentResponderHelper.init()();
  *(_QWORD *)(v0 + 392) = 0;
  *(_WORD *)(v0 + 400) = 1;
  *(_QWORD *)(v0 + 408) = 0;
  *(_WORD *)(v0 + 416) = 256;
  *(_QWORD *)(v0 + 424) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

void *FocusableViewResponder.hostedItem.getter()
{
  uint64_t v0;
  void *v1;
  objc_class *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  objc_super v11;

  if (!*(_QWORD *)(v0 + 240) || (*(_BYTE *)(v0 + 232) & 8) != 0)
    return 0;
  v1 = *(void **)(v0 + 424);
  if (v1)
    goto LABEL_5;
  v2 = (objc_class *)type metadata accessor for UIKitFocusableViewResponderItem();
  v3 = (char *)objc_allocWithZone(v2);
  swift_weakInit();
  swift_unknownObjectWeakInit();
  v4 = &v3[OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_frame];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v5 = &v3[OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = -1;
  v6 = &v3[OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem____lazy_storage___defaultFocusGroupIdentifier];
  *(_QWORD *)v6 = 0;
  *((_WORD *)v6 + 4) = 256;
  swift_weakAssign();
  v11.receiver = v3;
  v11.super_class = v2;
  v7 = objc_msgSendSuper2(&v11, sel_init);
  v8 = *(void **)(v0 + 424);
  *(_QWORD *)(v0 + 424) = v7;

  v1 = *(void **)(v0 + 424);
  if (v1)
LABEL_5:
    v9 = v1;
  return v1;
}

Swift::Void __swiftcall FinishLaunchTestAction.callAsFunction()()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v0 = static AppGraph.shared;
  if (static AppGraph.shared && (*(_BYTE *)(static AppGraph.shared + 230) & 1) == 0)
  {
    *(_BYTE *)(static AppGraph.shared + 230) = 1;
    swift_retain();
    if ((AppGraph.traceLaunch.getter() & 1) != 0)
    {
      type metadata accessor for AGGraphRef(0);
      static AGGraphRef.stopTracing()();
    }
    else
    {
      if ((AppGraph.launchProfileOptions.getter() & 2) != 0)
        AGGraphStopProfiling();
      if (*(_DWORD *)(v0 + 224))
        AGGraphArchiveJSON();
    }
    swift_release();
  }
  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_sharedApplication);
  v3 = objc_msgSend(v1, sel_sharedApplication);
  v4 = objc_msgSend(v3, sel__launchTestName);

  objc_msgSend(v2, sel_finishedTest_, v4);
}

uint64_t type metadata completion function for FileImportExportBridge()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FileImportExportBridge.PresentationState(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void type metadata completion function for FileImportExportBridge.PresentationState()
{
  unint64_t v0;

  type metadata accessor for FileImportExportBridge.Presentation?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata completion function for FileImportExportBridge.PresentationState.UpdateEffect()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FileImportExportBridge.Presentation(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for FileImportExportBridge.Presentation()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FileImportOperation(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FileExportOperation(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultListButtonStyle and conformance DefaultListButtonStyle;
  if (!lazy protocol witness table cache variable for type DefaultListButtonStyle and conformance DefaultListButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultListButtonStyle, &type metadata for DefaultListButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultListButtonStyle and conformance DefaultListButtonStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in DefaultListButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for DefaultListButtonStyle.ListButton()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RichTextEditor()
{
  return static View.makeViewList(view:inputs:)();
}

ValueMetadata *type metadata accessor for ContentMarginPlacement()
{
  return &type metadata for ContentMarginPlacement;
}

ValueMetadata *type metadata accessor for ContentMarginPlacement.Role()
{
  return &type metadata for ContentMarginPlacement.Role;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CollectionViewListRoot<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListRoot<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

void protocol witness for static View._makeView(view:inputs:) in conformance CollectionViewListRoot<A, B>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  static CollectionViewListRoot._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t type metadata completion function for CollectionViewListRoot()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    if (v2 <= 0x3F)
    {
      type metadata accessor for Binding();
      result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void type metadata accessor for CollectionViewListRoot()
{
  JUMPOUT(0x18D75FF28);
}

void CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_186F342F4(int *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v9 = v1 + a1[13];
  v10 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v4, v10);
  v11 = v1 + a1[14];
  *(_QWORD *)v11 = v3;
  *(_BYTE *)(v11 + 8) = v2 & 1;
  *(_QWORD *)(v1 + a1[15]) = v7;
  v12 = v1 + a1[16];
  type metadata accessor for Binding();
  v13 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, v23, v13);
  v15 = v1 + a1[17];
  *(_BYTE *)v15 = v5;
  *(_QWORD *)(v15 + 8) = v6;
  *(_BYTE *)(v15 + 16) = v22;
  *(_QWORD *)(v15 + 24) = v21;
  *(_BYTE *)(v15 + 32) = v20;
  *(_QWORD *)(v15 + 40) = v19;
  *(_BYTE *)(v15 + 48) = v18;
  *(_QWORD *)(v15 + 56) = v17;
  *(_BYTE *)(v15 + 64) = v16;
  return result;
}

ValueMetadata *type metadata accessor for AnyAccessibilityAction()
{
  return &type metadata for AnyAccessibilityAction;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AlertTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlertTransformModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AlertTransformModifier<A>@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static AlertTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

void type metadata accessor for AlertTransformModifier<Alert.Presentation.Key>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AlertTransformModifier<Alert.Presentation.Key>)
  {
    v4 = type metadata accessor for AlertTransformModifier(0, (uint64_t)&type metadata for Alert.Presentation.Key, (uint64_t)&protocol witness table for Alert.Presentation.Key, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AlertTransformModifier<Alert.Presentation.Key>);
  }
}

uint64_t partial apply for implicit closure #1 in static AlertTransformModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static AlertTransformModifier._makeView(modifier:inputs:body:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_DWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t implicit closure #1 in static AlertTransformModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;
  _BYTE v14[16];
  uint64_t FunctionTypeMetadata;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v13 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  v16 = type metadata accessor for AlertTransformModifier.Transform(0, a5, a6, v8);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlertTransformModifier<A>.Transform, v16);
  v9 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v14, v16, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return AssociatedTypeWitness;
}

double static AlertTransformModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  double result;
  int v12;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  v6 = *((_DWORD *)a1 + 2);
  v7 = a1[2];
  v8 = *((_DWORD *)a1 + 6);
  v23 = *((_DWORD *)a1 + 8);
  v24 = *((_DWORD *)a1 + 7);
  v18 = *a1;
  v19 = a1[5];
  v25 = a1[6];
  v9 = *((_DWORD *)a1 + 14);
  v21 = *((_DWORD *)a1 + 15);
  v22 = *((_DWORD *)a1 + 9);
  v20 = *((_DWORD *)a1 + 16);
  v15 = *((_DWORD *)a1 + 17);
  v16 = *((_DWORD *)a1 + 18);
  v17 = *((_DWORD *)a1 + 19);
  v12 = *((_DWORD *)a1 + 20);
  type metadata accessor for AlertTransformModifier(255, a4, a5, a3);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  _ViewInputs.viewPhase.getter();
  _ViewInputs.animatedPosition()();
  _ViewInputs.animatedSize()();
  v10 = _ViewInputs.transform.getter();
  v28 = v18;
  v29 = v6;
  v30 = v7;
  v31 = v8;
  v32 = v24;
  v33 = v23;
  v34 = v22;
  v35 = v19;
  v36 = v25;
  v37 = v9;
  v38 = v21;
  v39 = v20;
  v40 = v15;
  v41 = v16;
  v42 = v17;
  v43 = v12;
  a2(&v26, v10, &v28);
  v28 = v25;
  v29 = v9;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a6 = v26;
  result = v27;
  a6[1] = v27;
  return result;
}

void base witness table accessor for _AttributeBody in AlertTransformModifier<A>.Transform()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for AlertTransformModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AlertTransformModifier.Transform);
}

uint64_t partial apply for specialized closure #1 in AlertTransformModifier.Transform.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, double, double, double, double))(v1 + 32))(a1, *(unsigned int *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80));
}

uint64_t AlertTransformModifier.Transform.updateValue()(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  int v10;
  uint64_t Value;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t FunctionTypeMetadata;
  uint64_t v29;
  _QWORD v31[4];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(v1 + 20);
  v4 = *(_DWORD *)(v1 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v7 != v4 || v3 == 0)
  {
    v9 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1)
      v10 = static ViewIdentity.nextSeed + 1;
    else
      v10 = 1;
    static ViewIdentity.nextSeed = v10;
    *(_DWORD *)(v1 + 20) = v9;
    *(_DWORD *)(v1 + 24) = v7;
  }
  Value = AGGraphGetValue();
  v42 = *(_QWORD *)Value;
  v43 = *(_OWORD *)(Value + 8);
  v44 = *(_OWORD *)(Value + 24);
  swift_retain();
  v40[0] = *(_OWORD *)AGGraphGetValue();
  *(double *)&v12 = MEMORY[0x18D755E9C]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v13, v12));
  v14 = (_OWORD *)AGGraphGetValue();
  v15 = v14[1];
  v40[0] = *v14;
  v40[1] = v15;
  v34 = 0;
  v33 = 0;
  v35 = MEMORY[0x18D75BE3C]();
  v36 = v16;
  hostingViewCoordinateSpace.getter();
  v41 = 1;
  AssociatedTypeWitness = v42;
  v38 = v43;
  v39 = v44;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v40);
  v17 = *(_DWORD *)(v1 + 20);
  type metadata accessor for AlertTransformModifier(0, v5, v6, v18);
  v19 = (uint64_t *)AGGraphGetValue();
  v21 = *v19;
  v20 = v19[1];
  v32 = 0u;
  v22 = v35;
  v23 = v36;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v5;
  *(_QWORD *)(v24 + 24) = v6;
  *(_QWORD *)(v24 + 32) = v21;
  *(_QWORD *)(v24 + 40) = v20;
  *(_DWORD *)(v24 + 48) = v17;
  *(_OWORD *)(v24 + 56) = v32;
  *(double *)(v24 + 72) = v22;
  *(_QWORD *)(v24 + 80) = v23;
  *(_QWORD *)&v40[0] = partial apply for specialized closure #1 in AlertTransformModifier.Transform.updateValue();
  *((_QWORD *)&v40[0] + 1) = v24;
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v31[2] = a1;
  v31[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlertTransformModifier<A>.Transform, a1, v26);
  swift_retain_n();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = MEMORY[0x1E0DEE9C0] + 8;
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v40, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v31, FunctionTypeMetadata, MEMORY[0x1E0DEDCE8], v27, MEMORY[0x1E0DEDD18], v29);
  swift_release();
  swift_release();
  return swift_release();
}

void type metadata accessor for _ViewModifier_Content<_TaskModifier.InnerModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<_TaskModifier.InnerModifier>)
  {
    type metadata accessor for _TaskModifier.InnerModifier(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier, type metadata accessor for _TaskModifier.InnerModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier.InnerModifier);
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<_TaskModifier.InnerModifier>);
  }
}

void type metadata accessor for _ViewModifier_Content<CollectionViewCellModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<CollectionViewCellModifier>)
  {
    type metadata accessor for CollectionViewCellModifier();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier, (uint64_t (*)(uint64_t))type metadata accessor for CollectionViewCellModifier, (uint64_t)&protocol conformance descriptor for CollectionViewCellModifier);
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<CollectionViewCellModifier>);
  }
}

uint64_t UIKitNavigationBridge.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectWeakDestroy();
  outlined destroy of AccessibilityValueStorage?(v0 + 32, &lazy cache variable for type metadata for BridgedPresentation?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of EnvironmentValues?(*(_QWORD *)(v0 + 176));
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t type metadata completion function for UIKitNavigationBridge()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for UIKitNavigationBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitNavigationBridge);
}

uint64_t UIKitNavigationBridge.update(environment:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  swift_beginAccess();
  *(_QWORD *)(v1 + 160) = v4;
  *(_QWORD *)(v1 + 168) = v3;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_beginAccess();
  EnvironmentValues.preferenceBridge.setter();
  swift_endAccess();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  swift_retain();
  if (v3)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  v7 |= 4uLL;
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  if ((*(_BYTE *)(v1 + 153) & 1) == 0)
    UIKitNavigationBridge.isBeingPresented.getter();
  if (a1[1])
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (!(_BYTE)v7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 336))(&v7, 1);
    v5 = v8;
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for PushTarget?);
    if (v5 != 2)
    {
      LOBYTE(v7) = 1;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
      swift_retain();
      PropertyList.subscript.setter();
      if (a1[1])
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
  }
  static Semantics.v5.getter();
  result = isLinkedOnOrAfter(_:)();
  if ((result & 1) != 0)
  {
    if (a1[1])
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    result = swift_release_n();
    if ((v7 & 1) == 0)
      UIKitNavigationBridge.containingVC.getter();
  }
  return result;
}

uint64_t UIKitNavigationBridge.updateViewInputs(_:)()
{
  uint64_t v0;
  char v1;
  char v3;
  char v4;

  lazy protocol witness table accessor for type IsSearchAllowedInput and conformance IsSearchAllowedInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_BYTE *)(v0 + 152) = v4;
  lazy protocol witness table accessor for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView();
  PropertyList.subscript.getter();
  v1 = *(_BYTE *)(v0 + 153);
  *(_BYTE *)(v0 + 153) = v3;
  UIKitNavigationBridge.isRepresentingSheetNavigationView.didset(v1);
  return PropertyList.subscript.setter();
}

BOOL UIKitNavigationBridge.isInTransientPop.getter()
{
  void *Attempted;
  void *v1;

  Attempted = (void *)UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter();
  v1 = Attempted;
  if (Attempted)

  return v1 != 0;
}

uint64_t storeEnumTagSinglePayload for SpringLoadingBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186F356E8 + 4 * byte_187C1CB95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186F3571C + 4 * asc_187C1CB90[v4]))();
}

uint64_t sub_186F3571C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F35724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F3572CLL);
  return result;
}

uint64_t sub_186F35738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F35740);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186F35744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F3574C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior.Guts()
{
  return &type metadata for SpringLoadingBehavior.Guts;
}

uint64_t type metadata accessor for SelectionBasedStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectionBasedStorage);
}

unint64_t lazy protocol witness table accessor for type ScrollViewDisplayList and conformance ScrollViewDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList;
  if (!lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewDisplayList, &unk_1E1B18AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList;
  if (!lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewDisplayList, &unk_1E1B18AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewDisplayList()
{
  lazy protocol witness table accessor for type ScrollViewDisplayList and conformance ScrollViewDisplayList();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigableListModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigableListModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static NavigableListModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

_QWORD *assignWithCopy for NavigableListModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v3 = a1;
  *a1 = *a2;
  v37 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v37 - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8;
  v7 = v6 + 15;
  v8 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  v9 = ((unint64_t)a1 + v6 + 15) & v8;
  v10 = ((unint64_t)a2 + v6 + 15) & v8;
  v11 = *(_QWORD *)(v4 + 64);
  v39 = (v6 + 23) & v8;
  v12 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v38 = a1;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *v12 = *v13;
      v15 = (_QWORD *)(((unint64_t)v12 + v7) & v8);
      v16 = (_QWORD *)(((unint64_t)v13 + v7) & v8);
      if (v5)
        v17 = v11;
      else
        v17 = v11 + 1;
      if (v17 <= v11)
        v22 = v11;
      else
        v22 = v17;
      if (v22 <= 8)
        v19 = 8;
      else
        v19 = v22;
      v23 = *((unsigned __int8 *)v16 + v19);
      swift_retain();
      swift_retain();
      if (v23 >= 3)
      {
        if (v19 <= 3)
          v24 = v19;
        else
          v24 = 4;
        __asm { BR              X11 }
      }
      if (v23 != 2)
      {
        if (v23 == 1)
        {
          v31 = v37;
          v32 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v4 + 48))(v16, 1, v37);
LABEL_80:
          if (v32)
          {
            memcpy(v15, v16, v17);
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(v15, v16, v31);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v31);
          }
          v35 = 1;
          goto LABEL_86;
        }
LABEL_82:
        *v15 = *v16;
        *((_BYTE *)v15 + v19) = 0;
        swift_bridgeObjectRetain();
LABEL_87:
        v3 = v38;
        v30 = v39;
        goto LABEL_88;
      }
LABEL_83:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(v15, v16, v37);
      v35 = 2;
LABEL_86:
      *((_BYTE *)v15 + v19) = v35;
      goto LABEL_87;
    }
    if (v5)
      v29 = *(_QWORD *)(v4 + 64);
    else
      v29 = v11 + 1;
    if (v29 <= v11)
      v29 = *(_QWORD *)(v4 + 64);
    if (v29 <= 8)
      v19 = 8;
    else
      v19 = v29;
    v30 = v39;
    memcpy((void *)v9, (const void *)v10, (v39 | 1) + v19);
  }
  else
  {
    v38 = a1;
    if (v14 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      swift_retain();
      swift_release();
      *v12 = *v13;
      swift_retain();
      swift_release();
      v15 = (_QWORD *)(((unint64_t)v12 + v7) & v8);
      v16 = (_QWORD *)(((unint64_t)v13 + v7) & v8);
      if (v5)
        v17 = v11;
      else
        v17 = v11 + 1;
      if (v17 <= v11)
        v18 = v11;
      else
        v18 = v17;
      if (v18 <= 8)
        v19 = 8;
      else
        v19 = v18;
      if (v15 == v16)
        goto LABEL_87;
      v20 = *((unsigned __int8 *)v15 + v19);
      if (v20 >= 3)
      {
        if (v19 <= 3)
          v21 = v19;
        else
          v21 = 4;
        __asm { BR              X12 }
      }
      v31 = v37;
      if (v20 != 2)
      {
        if (v20 != 1)
        {
          swift_bridgeObjectRelease();
LABEL_72:
          v33 = *((unsigned __int8 *)v16 + v19);
          if (v33 >= 3)
          {
            if (v19 <= 3)
              v34 = v19;
            else
              v34 = 4;
            __asm { BR              X12 }
          }
          if (v33 != 2)
          {
            if (v33 == 1)
            {
              v32 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v4 + 48))(v16, 1, v37);
              goto LABEL_80;
            }
            goto LABEL_82;
          }
          goto LABEL_83;
        }
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v4 + 48))(v15, 1, v37))
          goto LABEL_72;
      }
      (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v15, v37);
      goto LABEL_72;
    }
    swift_release();
    swift_release();
    v25 = ((unint64_t)v12 + v7) & v8;
    if (v5)
      v26 = v11;
    else
      v26 = v11 + 1;
    if (v26 <= v11)
      v26 = v11;
    if (v26 <= 8)
      v19 = 8;
    else
      v19 = v26;
    v27 = *(unsigned __int8 *)(v25 + v19);
    if (v27 >= 3)
    {
      if (v19 <= 3)
        v28 = v19;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    v30 = v39;
    if (v27 == 2)
    {
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))(((unint64_t)v12 + v7) & v8, v37);
    }
    else if (v27 == 1)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(((unint64_t)v12 + v7) & v8, 1, v37))(*(void (**)(unint64_t, uint64_t))(v4 + 8))(v25, v37);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    memcpy((void *)v9, (const void *)v10, (v39 | 1) + v19);
    v3 = v38;
  }
LABEL_88:
  *(_QWORD *)(((v9 | 7) + (v30 | 1) + v19) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v10 | 7) + (v30 | 1) + v19) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return v3;
}

uint64_t type metadata completion function for NavigableListModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static NavigableListModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t IsEditing;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[8];
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[12];
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  type metadata accessor for SelectionManagerBox(255, a3, a4, a4);
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v9);
  v89 = &v75[-v10];
  v11 = a4;
  v13 = type metadata accessor for NavigableListModifier.BoundListSelectionDetector(0, a3, a4, v12);
  v90 = *(_QWORD *)(v13 - 8);
  v91 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v75[-v15];
  v17 = *a1;
  v18 = lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
    result = PropertyList.subscript.getter();
    if (v94 == 1)
    {
      MEMORY[0x1E0C80A78](result, v20);
      LODWORD(v94) = v17;
      type metadata accessor for NavigableListModifier(255, a3, v11, v21);
      type metadata accessor for _GraphValue();
      v84 = v16;
      v85 = v18;
      v22 = MEMORY[0x1E0CE7DD0];
      _GraphValue.subscript.getter();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Namespace.ID>, v22, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v23 = _GraphValue.value.getter();
      LODWORD(v83) = v23;
      MEMORY[0x1E0C80A78](v23, v24);
      v88 = a3;
      LODWORD(v94) = v17;
      type metadata accessor for Binding();
      type metadata accessor for Optional();
      _GraphValue.subscript.getter();
      type metadata accessor for _GraphValue();
      v25 = _GraphValue.value.getter();
      v87 = v25;
      MEMORY[0x1E0C80A78](v25, v26);
      v86 = v11;
      LODWORD(v94) = v17;
      type metadata accessor for NavigationStateHost();
      _GraphValue.subscript.getter();
      type metadata accessor for _GraphValue<NavigationStateHost>();
      LODWORD(v81) = _GraphValue.value.getter();
      lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
      PropertyList.subscript.getter();
      v27 = v94;
      v82 = v94;
      lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      PropertyList.subscript.getter();
      swift_bridgeObjectRelease();
      swift_release();
      v28 = swift_release();
      v29 = v87;
      v95 = v83;
      v96 = v87;
      MEMORY[0x1E0C80A78](v28, v30);
      v32 = type metadata accessor for NavigableListModifier.ListKey(0, v88, v11, v31);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigableListModifier<A>.ListKey, v32);
      type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for Attribute<NavigationState.ListKey?>, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v94, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)v72, v32, MEMORY[0x1E0DEDCE8], v33, MEMORY[0x1E0DEDD18], v34);
      v35 = v92;
      LODWORD(v79) = v92;
      v83 = lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      PropertyList.subscript.getter();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v92 = xmmword_187BF9840;
      v93 = 0;
      v95 = v81;
      v96 = v35;
      LODWORD(v97) = v29;
      BYTE4(v97) = v27;
      v36 = outlined init with take of Image.Resolved?((uint64_t)&v92, (uint64_t)&v98, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      v100 = 0;
      MEMORY[0x1E0C80A78](v36, v37);
      v38 = v88;
      v39 = v86;
      v41 = type metadata accessor for NavigableListModifier.EnsureNavigationAuthority(0, v88, v86, v40);
      v73 = v41;
      v74 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigableListModifier<A>.EnsureNavigationAuthority, v41);
      type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for Attribute<NavigationAuthority?>, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v94, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_13, (uint64_t)v72, v41, MEMORY[0x1E0DEDCE8], v42, MEMORY[0x1E0DEDD18], v43);
      (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(&v94, v41);
      v80 = v92;
      v81 = AGCreateWeakAttribute();
      v44 = *(_DWORD *)(a2 + 8);
      v45 = *(_QWORD *)(a2 + 16);
      v46 = *(_QWORD *)(a2 + 40);
      v94 = *(_QWORD *)a2;
      v95 = v44;
      v97 = v45;
      v98 = *(_OWORD *)(a2 + 24);
      v99 = v46;
      swift_getKeyPath();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v47 = _GraphInputs.mapEnvironment<A>(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v48 = swift_release();
      LODWORD(v94) = v47;
      MEMORY[0x1E0C80A78](v48, v49);
      IsEditing = type metadata accessor for NavigableListModifier.IsEditing(0, v38, v39, v50);
      v73 = IsEditing;
      v74 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigableListModifier<A>.IsEditing, IsEditing);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v94, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v72, IsEditing, MEMORY[0x1E0DEDCE8], v52, MEMORY[0x1E0DEDD18], v53);
      v79 = 0;
      v78 = v92;
      v77 = AGCreateWeakAttribute();
      LODWORD(v46) = *(_DWORD *)(a2 + 8);
      v55 = *(_QWORD *)(a2 + 16);
      v56 = *(_DWORD *)(a2 + 24);
      LODWORD(IsEditing) = *(_DWORD *)(a2 + 28);
      LODWORD(v41) = *(_DWORD *)(a2 + 32);
      LODWORD(v38) = *(_DWORD *)(a2 + 36);
      v57 = *(_QWORD *)(a2 + 40);
      v94 = *(_QWORD *)a2;
      v54 = v94;
      v95 = v46;
      v97 = v55;
      *(_QWORD *)&v98 = __PAIR64__(IsEditing, v56);
      *((_QWORD *)&v98 + 1) = __PAIR64__(v38, v41);
      v99 = v57;
      v76 = _GraphInputs.phase.getter();
      v94 = v54;
      v95 = v46;
      v97 = v55;
      *(_QWORD *)&v98 = __PAIR64__(IsEditing, v56);
      *((_QWORD *)&v98 + 1) = __PAIR64__(v38, v41);
      v99 = v57;
      v58 = _GraphInputs.transaction.getter();
      UpdateCycleDetector.init()();
      *(_QWORD *)&v92 = v94;
      DWORD2(v92) = v95;
      BYTE12(v92) = v96;
      v59 = v88;
      v60 = v86;
      v62 = type metadata accessor for SelectionManagerBox(0, v88, v86, v61);
      v63 = (uint64_t)v89;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v89, 1, 1, v62);
      v73 = v60;
      v64 = (uint64_t)v84;
      v65 = v81;
      v66 = NavigableListModifier.BoundListSelectionDetector.init(listKey:selection:isEditing:navigationAuthority:phase:transaction:isExtractionPass:cycleDetector:lastResetSeed:lastSelection:wasEditing:)(v81, v87, v78, v77, v76, v58, v82, (uint64_t)&v92, (uint64_t)v84, 0, v63, 0, v59, v73);
      v68 = MEMORY[0x1E0C80A78](v66, v67);
      v69 = v91;
      v73 = v91;
      v74 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigableListModifier<A>.BoundListSelectionDetector, v91, v68);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v64, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v72, v69, MEMORY[0x1E0DEDCE8], v70, MEMORY[0x1E0DEDD18], v71);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v64, v69);
      static AGAttributeFlags.transactional.getter();
      AGGraphSetFlags();
      v94 = v65;
      PropertyList.subscript.setter();
      v94 = AGCreateWeakAttribute();
      return PropertyList.subscript.setter();
    }
  }
  return result;
}

uint64_t type metadata completion function for NavigableListModifier.BoundListSelectionDetector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NavigableListModifier.BoundListSelectionDetector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigableListModifier.BoundListSelectionDetector);
}

void static InsetGroupedListStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_186F36940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  _OWORD *v15;
  uint64_t v16;
  int v17;
  va_list va;

  va_start(va, a15);
  type metadata accessor for _GraphValue();
  v17 = _GraphValue.value.getter();
  *v15 = 0u;
  v15[1] = 0u;
  *(_WORD *)(v16 - 128) = 1;
  lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  InsettableGroupedListBodyRule.init(base:insetMode:context:)(v17, v16 - 160, va);
}

void sub_186F369A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
  v3 = type metadata accessor for SelectionManagerBox(255, v1, v0, v2);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for InsettableGroupedListBody();
}

void sub_186F36A08()
{
  type metadata accessor for InsettableGroupedListBodyRule();
}

uint64_t sub_186F36A58(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBodyRule<A, B, C>, a1);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>, v1);
  return static View._makeViewList(view:inputs:)();
}

void base witness table accessor for _AttributeBody in IncrementalTransition<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalTransition<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalTransition<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata completion function for IncrementalTransition()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance IncrementalScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalScrollable<A>, a4);
  return ScrollableContainer.scroll<A>(to:)();
}

uint64_t type metadata accessor for IncrementalScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalScrollable);
}

double IncrementalScrollable.parent.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for Scrollable();
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusableFillerBounds()
{
  return &type metadata for FocusableFillerBounds;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLEnvironment()
{
  lazy protocol witness table accessor for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLDisplayList()
{
  lazy protocol witness table accessor for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList();
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CubicGradientProvider and conformance CubicGradientProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider;
  if (!lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CubicGradientProvider, &unk_1E1AD6CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider;
  if (!lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CubicGradientProvider, &unk_1E1AD6CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider;
  if (!lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CubicGradientProvider, &unk_1E1AD6CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider);
  }
  return result;
}

uint64_t protocol witness for GradientProvider.resolve(in:) in conformance CubicGradientProvider@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return CubicGradientProvider.resolve(in:)(a1, *v2, v2[1], v2[2], a2);
}

uint64_t CompareTransitionType.visit<A>(_:)(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)v1)
    v2 = *(_QWORD *)v1 == result;
  else
    v2 = 0;
  v3 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for CommandGroupPlacement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CommandGroupPlacement()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderlessButtonStyle and conformance BorderlessButtonStyle;
  if (!lazy protocol witness table cache variable for type BorderlessButtonStyle and conformance BorderlessButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderlessButtonStyle, &type metadata for BorderlessButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in BorderlessButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AnyShareConfiguration()
{
  return &type metadata for AnyShareConfiguration;
}

ValueMetadata *type metadata accessor for AnyShareConfiguration.Storage()
{
  return &type metadata for AnyShareConfiguration.Storage;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5010], MEMORY[0x1E0CE4FF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5008], MEMORY[0x1E0CE4FF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5000], MEMORY[0x1E0CE4FF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4FF8], MEMORY[0x1E0CE4FF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityNodesKey()
{
  return &type metadata for AccessibilityNodesKey;
}

ValueMetadata *type metadata accessor for AccessibilityNodeList()
{
  return &type metadata for AccessibilityNodeList;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackdropGroupEffect()
{
  lazy protocol witness table accessor for type _BackdropGroupEffect and conformance _BackdropGroupEffect();
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

uint64_t UIKitToolbarStrategy.makeBarItems()()
{
  void **v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  id v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v1 = MEMORY[0x1E0DEE9D8];
  v43 = MEMORY[0x1E0DEE9D8];
  v44 = MEMORY[0x1E0DEE9D8];
  result = specialized ToolbarStrategy.withUpdate<A>(_:)(v0, (uint64_t)&v44, (uint64_t)&v43);
  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_3:
      v42 = v1;
      v3 = v43;
      v4 = v43 >> 62;
      v41 = v43 >> 62;
      if (v43 >> 62)
      {
        swift_bridgeObjectRetain();
        v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v5 >= 0)
          v21 = v5;
        else
          v21 = v5 + 1;
        v6 = v21 >> 1;
        if (v20 >= 2)
        {
          if (v5 >= -1)
            goto LABEL_59;
          __break(1u);
        }
      }
      else
      {
        v5 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        v6 = (unint64_t)v5 >> 1;
        if ((unint64_t)v5 > 1)
        {
          if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10) < v6)
          {
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
            return result;
          }
          while (1)
          {
            if ((v3 & 0xC000000000000001) != 0 && (unint64_t)(v5 + 1) >= 3)
            {
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
              v7 = 0;
              do
              {
                v8 = v7 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v7);
                v7 = v8;
              }
              while (v6 != v8);
            }
            if (v4)
            {
              swift_bridgeObjectRetain();
              v9 = _CocoaArrayWrapper.subscript.getter();
              v10 = v13;
              v12 = v14;
              v11 = v15;
              swift_bridgeObjectRelease();
            }
            else
            {
              v9 = v3 & 0xFFFFFFFFFFFFFF8;
              v10 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
              v11 = (2 * v6) | 1;
              swift_bridgeObjectRetain();
              v12 = 0;
            }
            specialized Array.append<A>(contentsOf:)(v9, v10, v12, v11);
            v16 = 1;
LABEL_25:
            v23 = (void *)objc_opt_self();
            v24 = objc_msgSend(v23, sel_flexibleSpaceItem);
            MEMORY[0x18D75CF58]();
            if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v25 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v25);
            v26 = objc_msgSend(v23, sel_flexibleSpaceItem);
            MEMORY[0x18D75CF58]();
            if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if (!v16)
            {
LABEL_47:
              v19 = v42;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return v19;
            }
            v4 = v41;
            if (!v41)
              break;
            swift_bridgeObjectRetain();
            v27 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v27 >= v6)
            {
              swift_bridgeObjectRetain();
              v38 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v38 < v6)
              {
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
LABEL_57:
                __break(1u);
                goto LABEL_58;
              }
LABEL_32:
              if (v5 < -1)
                goto LABEL_54;
              if (v41)
              {
                swift_bridgeObjectRetain();
                v5 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              if (v5 < v27)
                goto LABEL_55;
              if (v27 < 0)
                goto LABEL_56;
              if ((v3 & 0xC000000000000001) == 0 || v6 == v27)
                goto LABEL_43;
              if (v6 < v27)
              {
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
                v28 = v6;
                do
                {
                  v29 = v28 + 1;
                  _ArrayBuffer._typeCheckSlowPath(_:)(v28);
                  v28 = v29;
                }
                while (v27 != v29);
LABEL_43:
                if (v41)
                {
                  swift_bridgeObjectRetain();
                  v30 = _CocoaArrayWrapper.subscript.getter();
                  v31 = v33;
                  v6 = v34;
                  v32 = v35;
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v30 = v3 & 0xFFFFFFFFFFFFFF8;
                  v31 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
                  v32 = (2 * v27) | 1;
                  swift_bridgeObjectRetain();
                }
                specialized Array.append<A>(contentsOf:)(v30, v31, v6, v32);
                goto LABEL_47;
              }
              goto LABEL_57;
            }
LABEL_58:
            __break(1u);
LABEL_59:
            swift_bridgeObjectRetain();
            v39 = _CocoaArrayWrapper.endIndex.getter();
            result = swift_bridgeObjectRelease();
            if (v39 < 0)
              goto LABEL_62;
            swift_bridgeObjectRetain();
            v40 = _CocoaArrayWrapper.endIndex.getter();
            result = swift_bridgeObjectRelease();
            if (v40 < v6)
              goto LABEL_61;
          }
          v27 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v27 < v6)
            goto LABEL_53;
          goto LABEL_32;
        }
      }
      v22 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v22);
      v16 = 0;
      goto LABEL_25;
    }
  }
  else if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v18 = v43;
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x4000000000000000) == 0)
  {
    swift_bridgeObjectRelease();
    return v18 & 0xFFFFFFFFFFFFFF8;
  }
  v36 = swift_bridgeObjectRetain();
  v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return (uint64_t)v37;
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

void partial apply for closure #2 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)()
{
  uint64_t v0;

  closure #2 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(*(_BYTE *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

void closure #2 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(char a1, void (*a2)(void), uint64_t a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];

  if ((a1 & 1) != 0)
  {
    v5 = (void *)objc_opt_self();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a2;
    *(_QWORD *)(v6 + 24) = a3;
    v8[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
    v8[5] = v6;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 1107296256;
    v8[2] = thunk for @escaping @callee_guaranteed () -> ();
    v8[3] = &block_descriptor_21;
    v7 = _Block_copy(v8);
    swift_retain();
    swift_release();
    objc_msgSend(v5, sel_animateWithDuration_animations_, v7, 0.3);
    _Block_release(v7);
  }
  else
  {
    a2();
  }
}

BOOL partial apply for closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)()
{
  uint64_t v0;

  return closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(*(_QWORD *)(v0 + 32));
}

void type metadata completion function for UIHostingContentView()
{
  type metadata accessor for UIHostingConfiguration();
}

ValueMetadata *type metadata accessor for ToolbarScopeModifier()
{
  return &type metadata for ToolbarScopeModifier;
}

ValueMetadata *type metadata accessor for ToolbarItemPlacement()
{
  return &type metadata for ToolbarItemPlacement;
}

uint64_t type metadata completion function for TitleDocumentContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ShadowListDataSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : PlatformListCell in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListCoreDataSource.SelectionValue : Hashable in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

void associated type witness table accessor for ListDiffable.RowIDs : BidirectionalCollection in ShadowListDataSource<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void associated type witness table accessor for ListDiffable.SectionIDs : BidirectionalCollection in ShadowListDataSource<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t assignWithTake for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithCopy for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata completion function for ShadowListDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ShadowListUpdateRecorder(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SectionStyleModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for SectionStyleModifier<A>);
}

unint64_t type metadata accessor for ScrollableCollection()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ScrollableCollection;
  if (!lazy cache variable for type metadata for ScrollableCollection)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  }
  return result;
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance ScrollViewScrollable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ScrollViewScrollable.scroll<A>(to:)(a1, a2, a3) & 1;
}

uint64_t ScrollViewScrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *WeakValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for DropDelegate?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    v7 = *WeakValue;
    swift_bridgeObjectRetain();
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
    v8 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v8)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  v9 = v7 + 32;
  while (1)
  {
    outlined init with copy of TableColumnList(v9, (uint64_t)v13);
    v10 = v14;
    v11 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, a3, v10, v11) & 1) != 0)
      break;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v9 += 40;
    if (!--v8)
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return 1;
}

ValueMetadata *type metadata accessor for ScrollTargetModifier()
{
  return &type metadata for ScrollTargetModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollTargetModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

unint64_t instantiation function for generic protocol witness table for ResolvedSectionStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for RefreshScopeModifier()
{
  return &type metadata for RefreshScopeModifier;
}

uint64_t assignWithCopy for PlainButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(v2 + 16);
  LOBYTE(v2) = *(_BYTE *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for PlainButtonStyleBase()
{
  return &type metadata for PlainButtonStyleBase;
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyleBase and conformance PlainButtonStyleBase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainButtonStyleBase and conformance PlainButtonStyleBase;
  if (!lazy protocol witness table cache variable for type PlainButtonStyleBase and conformance PlainButtonStyleBase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainButtonStyleBase, &type metadata for PlainButtonStyleBase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyleBase and conformance PlainButtonStyleBase);
  }
  return result;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in PlainButtonStyleBase()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PageIndexDisplayMode()
{
  return &type metadata for PageIndexDisplayMode;
}

uint64_t type metadata completion function for ListCoreBatchUpdates()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void ListCoreBatchUpdates.init()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;

  IndexSet.init()();
  v7 = (int *)type metadata accessor for ListCoreBatchUpdates(0, a1, a2, v6);
  IndexSet.init()();
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a3 + v7[10]) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a3 + v7[11]) = v8;
  *(_QWORD *)(a3 + v7[12]) = v8;
  *(_QWORD *)(a3 + v7[13]) = v8;
  IndexSet.init()();
  ListBatchUpdates.init()();
}

__n128 sub_186F380F4()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  __int128 v3;
  uint64_t v4;

  result = v2;
  *(__n128 *)v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 32) = v4;
  return result;
}

ValueMetadata *type metadata accessor for LazyPageTabViewStyle()
{
  return &type metadata for LazyPageTabViewStyle;
}

void protocol witness for Rule.value.getter in conformance LazyPageTabViewStyle.Body<A>()
{
  LazyPageTabViewStyle.Body.value.getter();
}

void base witness table accessor for _AttributeBody in LazyPageTabViewStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for LazyPageTabViewStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyPageTabViewStyle.Body);
}

void LazyPageTabViewStyle.Body.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for _TabViewValue();
}

void sub_186F381F0(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  LazyPageTabViewStyle.Body.base.getter();
}

void sub_186F38230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v6, v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v5);
  v11 = type metadata accessor for TabViewStyleConfiguration.Content(0, v1, v0, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v4, v3);
  *(_QWORD *)(v9 - 112) = v1;
  *(_QWORD *)(v9 - 104) = v11;
  *(_QWORD *)(v9 - 96) = v0;
  *(_QWORD *)(v9 - 88) = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  type metadata accessor for LazyPageTabView();
}

void sub_186F38298()
{
  closure #1 in LazyPageTabViewStyle.Body.value.getter();
}

void static LazyPageTabViewStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TabViewStyleConfiguration.Content(255, a3, a4, a4);
  type metadata accessor for LazyPageTabView();
}

void sub_186F38360()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 100) = v0;
  type metadata accessor for _TabViewValue();
}

uint64_t sub_186F3838C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for LazyPageTabViewStyle.Body(0, v2, v1, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyPageTabViewStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyPageTabView<A, B>, v0);
  return static View._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IncrementalViewPhase()
{
  lazy protocol witness table accessor for type IncrementalViewPhase and conformance IncrementalViewPhase();
  return static AsyncAttribute.flags.getter();
}

void base witness table accessor for _AttributeBody in GeometryActionBinder<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance GeometryActionBinder<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GeometryActionBinder<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata completion function for GeometryActionBinder()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = type metadata accessor for ValueCycleDetector();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for GeometryActionBinder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeometryActionBinder);
}

uint64_t partial apply for closure #2 in GeometryActionBinder.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v2 + 32))(v0 + ((v4 + v5 + v7) & ~v7), v0 + ((*(_QWORD *)(v6 + 64) + v7 + ((v4 + v5 + v7) & ~v7)) & ~v7), v1, v2);
}

ValueMetadata *type metadata accessor for FocusGroupIdentifier.ID()
{
  return &type metadata for FocusGroupIdentifier.ID;
}

unint64_t lazy protocol witness table accessor for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for EnvironmentObjectKey<PrimaryBarViewModel>, type metadata accessor for PrimaryBarViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE4D40]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4D48], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in DividerStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ContentScrollViewBox()
{
  return &type metadata for ContentScrollViewBox;
}

unint64_t lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonRepeatModifier and conformance ButtonRepeatModifier;
  if (!lazy protocol witness table cache variable for type ButtonRepeatModifier and conformance ButtonRepeatModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonRepeatModifier, &unk_1E1AD2198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatModifier and conformance ButtonRepeatModifier);
  }
  return result;
}

void *type metadata accessor for ButtonRepeatModifier.RepeatState()
{
  return &unk_1E1AD2118;
}

uint64_t type metadata completion function for _OnHoverPickerContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _TabViewStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _TabViewStyleWriter._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TabViewStyleWriter<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t static _TabViewStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = type metadata accessor for TabViewStyleOverrideInput(0, a3, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleOverrideInput<A>, v6);
  _GraphInputs.subscript.getter();
  if (!v11)
  {
    type metadata accessor for _TabViewStyleWriter(255, a3, a4, v7);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
      closure #1 in static _TabViewStyleWriter._makeInputs(modifier:inputs:)(1, a3, a4, v8);
    AGGraphCreateOffsetAttribute2();
    type metadata accessor for StyleType(0, a3, a4, v9);
  }
  lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput();
  return PropertyList.subscript.setter();
}

ValueMetadata *type metadata accessor for _IdentifiedViewTree()
{
  return &type metadata for _IdentifiedViewTree;
}

void type metadata accessor for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>)
  {
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>();
    v2[0] = &protocol witness table for SectionStyleConfiguration.RawContent;
    v2[1] = MEMORY[0x1E0CE7C28];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>)
  {
    type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, MEMORY[0x1E0CE0E50]);
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>);
  }
}

uint64_t initializeWithCopy for UpdateViewFocusItem(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  a4(a1 + 24, a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t initializeWithCopy for UpdateViewFocusItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for UpdateViewFocusItem(a1, a2, a3, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF90]);
}

uint64_t outlined destroy of UpdateViewFocusItem(uint64_t a1)
{
  swift_weakDestroy();
  return a1;
}

unint64_t lazy protocol witness table accessor for type UpdateViewFocusItem and conformance UpdateViewFocusItem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateViewFocusItem and conformance UpdateViewFocusItem;
  if (!lazy protocol witness table cache variable for type UpdateViewFocusItem and conformance UpdateViewFocusItem)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateViewFocusItem, &unk_1E1AD0FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateViewFocusItem and conformance UpdateViewFocusItem);
  }
  return result;
}

void type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    v6 = type metadata accessor for UIHostingController(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t specialized UIHostingController.rootView.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _WORD v7[56];
  _BYTE v8[112];

  v3 = *(_QWORD **)(v1 + direct field offset for UIHostingController.host);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>(a1, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>((uint64_t)v8, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier);
  v4 = (uint64_t)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x60);
  swift_beginAccess();
  v5 = v3;
  outlined assign with take of ModifiedContent<AnyView, RootModifier>((uint64_t)v7, v4);
  swift_endAccess();
  v7[0] = 1;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier);

  return outlined destroy of ModifiedContent<AnyView, RootModifier>(a1, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier);
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _WORD v7[84];
  _BYTE v8[168];

  v3 = *(_QWORD **)(v1 + direct field offset for UIHostingController.host);
  outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(a1, (uint64_t)v8);
  outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>((uint64_t)v8, (uint64_t)v7);
  v4 = (uint64_t)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x60);
  swift_beginAccess();
  v5 = v3;
  outlined assign with take of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>((uint64_t)v7, v4);
  swift_endAccess();
  v7[0] = 1;
  type metadata accessor for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>((uint64_t)v8);

  return outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(a1);
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _WORD v7[112];
  _BYTE v8[224];

  v3 = *(_QWORD **)(v1 + direct field offset for UIHostingController.host);
  outlined init with copy of DocumentGroupsIntroRootView(a1, (uint64_t)v8);
  outlined init with copy of DocumentGroupsIntroRootView((uint64_t)v8, (uint64_t)v7);
  v4 = (uint64_t)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x60);
  swift_beginAccess();
  v5 = v3;
  outlined assign with take of DocumentGroupsIntroRootView((uint64_t)v7, v4);
  swift_endAccess();
  v7[0] = 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of DocumentGroupsIntroRootView((uint64_t)v8);

  return outlined destroy of DocumentGroupsIntroRootView(a1);
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = *(_QWORD **)(v1 + direct field offset for UIHostingController.host);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x60));
  swift_beginAccess();
  *v4 = a1;
  swift_retain_n();
  v5 = v3;
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  return swift_release();
}

id specialized UIHostingController.init(rootView:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;

  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v20 = xmmword_187BF9F90;
  v21 = 0;
  v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v5 = swift_allocObject();
  v6 = v1;
  v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(_QWORD *)&v6[v8] = v9;
  *(_QWORD *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v12 = 512;
  v12[2] = 3;
  *(_QWORD *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of ModifiedContent<AnyView, RootModifier>(a1, (uint64_t)&v20);
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>(0);
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0);
  v19.receiver = v6;
  v19.super_class = v16;
  v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(_QWORD))type metadata accessor for UIKitInspectorV3Bridge<ModifiedContent<AnyView, RootModifier>>, type metadata accessor for PPTTestBridge<ModifiedContent<AnyView, RootModifier>>, type metadata accessor for SharingActivityPickerBridge<ModifiedContent<AnyView, RootModifier>>, specialized SharingActivityPickerBridge.init(), type metadata accessor for ShareConfigurationBridge<ModifiedContent<AnyView, RootModifier>>);

  outlined destroy of ModifiedContent<AnyView, RootModifier>(a1);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Class v18;
  id v19;
  objc_class *v20;
  id v21;
  objc_super v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v23 - v5;
  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v7 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v24 = xmmword_187BF9F90;
  v25 = 0;
  v26 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v27 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v24, v7);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v8 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v9 = swift_allocObject();
  v10 = v1;
  v11 = specialized UIKitDialogBridge.init()(v9);
  swift_release();
  *(_QWORD *)&v1[v8] = v11;
  *(_QWORD *)&v10[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v12 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = -1;
  *(_QWORD *)&v10[v12] = v13;
  *(_QWORD *)&v10[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v14 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v10[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v10[direct field offset for UIHostingController.deferredEdges] = 256;
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v10[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v16 = &v10[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v16 = 512;
  v16[2] = 3;
  *(_QWORD *)&v10[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v15;
  v10[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v10[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v17 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v10[v17] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v10[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a1, (uint64_t)v6, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  v19 = objc_allocWithZone(v18);
  *(_QWORD *)&v10[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)v6);

  type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  v23.receiver = v10;
  v23.super_class = v20;
  v21 = objc_msgSendSuper2(&v23, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, &lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(_QWORD))type metadata accessor for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, type metadata accessor for PPTTestBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, type metadata accessor for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, specialized SharingActivityPickerBridge.init(), type metadata accessor for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);

  outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a1, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  return v21;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Class v18;
  id v19;
  objc_class *v20;
  id v21;
  objc_super v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;

  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v7 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v24 = xmmword_187BF9F90;
  v25 = 0;
  v26 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v27 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v24, v7);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v8 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v9 = swift_allocObject();
  v10 = v1;
  v11 = specialized UIKitDialogBridge.init()(v9);
  swift_release();
  *(_QWORD *)&v1[v8] = v11;
  *(_QWORD *)&v10[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v12 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = -1;
  *(_QWORD *)&v10[v12] = v13;
  *(_QWORD *)&v10[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v14 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v10[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v10[direct field offset for UIHostingController.deferredEdges] = 256;
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v10[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v16 = &v10[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v16 = 512;
  v16[2] = 3;
  *(_QWORD *)&v10[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v15;
  v10[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v10[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v17 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v10[v17] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v10[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v19 = objc_allocWithZone(v18);
  *(_QWORD *)&v10[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)v6);

  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v23.receiver = v10;
  v23.super_class = v20;
  v21 = objc_msgSendSuper2(&v23, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  return v21;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Class v18;
  id v19;
  objc_class *v20;
  id v21;
  objc_super v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v23 - v5;
  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v7 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v24 = xmmword_187BF9F90;
  v25 = 0;
  v26 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v27 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v24, v7);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v8 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v9 = swift_allocObject();
  v10 = v1;
  v11 = specialized UIKitDialogBridge.init()(v9);
  swift_release();
  *(_QWORD *)&v1[v8] = v11;
  *(_QWORD *)&v10[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v12 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = -1;
  *(_QWORD *)&v10[v12] = v13;
  *(_QWORD *)&v10[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v14 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v10[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v10[direct field offset for UIHostingController.deferredEdges] = 256;
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v10[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v16 = &v10[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v16 = 512;
  v16[2] = 3;
  *(_QWORD *)&v10[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v15;
  v10[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v10[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v17 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v10[v17] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v10[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v10[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a1, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  v19 = objc_allocWithZone(v18);
  *(_QWORD *)&v10[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)v6);

  type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  v23.receiver = v10;
  v23.super_class = v20;
  v21 = objc_msgSendSuper2(&v23, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, &lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(_QWORD))type metadata accessor for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, type metadata accessor for PPTTestBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, type metadata accessor for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, specialized SharingActivityPickerBridge.init(), type metadata accessor for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);

  outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a1, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  return v21;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;

  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v20 = xmmword_187BF9F90;
  v21 = 0;
  v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v5 = swift_allocObject();
  v6 = v1;
  v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(_QWORD *)&v6[v8] = v9;
  *(_QWORD *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v12 = 512;
  v12[2] = 3;
  *(_QWORD *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of TabItem.RootView(a1, (uint64_t)&v20);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v6;
  v19.super_class = v16;
  v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  outlined destroy of TabItem.RootView(a1);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;

  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v20 = xmmword_187BF9F90;
  v21 = 0;
  v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v5 = swift_allocObject();
  v6 = v1;
  v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(_QWORD *)&v6[v8] = v9;
  *(_QWORD *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v12 = 512;
  v12[2] = 3;
  *(_QWORD *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of DocumentGroupsIntroRootView(a1, (uint64_t)&v20);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIHostingController<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v6;
  v19.super_class = v16;
  v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  outlined destroy of DocumentGroupsIntroRootView(a1);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;

  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v20 = xmmword_187BF9F90;
  v21 = 0;
  v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v5 = swift_allocObject();
  v6 = v1;
  v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(_QWORD *)&v6[v8] = v9;
  *(_QWORD *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v12 = 512;
  v12[2] = 3;
  *(_QWORD *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v20, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  type metadata accessor for Range<AttributedString.Index>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for UIHostingController<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v6;
  v19.super_class = v16;
  v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;

  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v20 = xmmword_187BF9F90;
  v21 = 0;
  v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v3);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v5 = swift_allocObject();
  v6 = v1;
  v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(_QWORD *)&v6[v8] = v9;
  *(_QWORD *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v12 = 512;
  v12[2] = 3;
  *(_QWORD *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  outlined init with copy of BridgedNavigationView.RootView(a1, (uint64_t)&v20);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)&v6[direct field offset for UIHostingController.host] = specialized _UIHostingView.init(rootView:)((uint64_t)&v20);

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIHostingController<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v19.receiver = v6;
  v19.super_class = v16;
  v17 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  outlined destroy of BridgedNavigationView.RootView(a1);
  return v17;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  _QWORD *v16;
  objc_class *v17;
  id v18;
  objc_super v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;

  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v21 = xmmword_187BF9F90;
  v22 = 0;
  v23 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v24 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v21, v3);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v5 = swift_allocObject();
  v6 = v1;
  v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(_QWORD *)&v6[v8] = v9;
  *(_QWORD *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v12 = 512;
  v12[2] = 3;
  *(_QWORD *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v15 = objc_allocWithZone(v14);
  outlined retain of BoundInputsView(a1);
  v16 = specialized _UIHostingView.init(rootView:)(a1);
  outlined release of BoundInputsView(a1);
  *(_QWORD *)&v6[direct field offset for UIHostingController.host] = v16;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v20.receiver = v6;
  v20.super_class = v17;
  v18 = objc_msgSendSuper2(&v20, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  return v18;
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  Class v15;
  id v16;
  _QWORD *v17;
  objc_class *v18;
  id v19;
  objc_super v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v22 = xmmword_187BF9F90;
  *(_QWORD *)&v23 = 0;
  BYTE8(v23) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v25 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v22, v3);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v5 = swift_allocObject();
  v6 = v1;
  v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(_QWORD *)&v6[v8] = v9;
  *(_QWORD *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v12 = 512;
  v12[2] = 3;
  *(_QWORD *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  v26 = *(_QWORD *)a1;
  v14 = *(_OWORD *)(a1 + 24);
  v22 = *(_OWORD *)(a1 + 8);
  v23 = v14;
  v24 = *(_QWORD *)(a1 + 40);
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  v16 = objc_allocWithZone(v15);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  outlined retain of SearchFocusContext?(&v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationItemDescription?);
  v17 = specialized _UIHostingView.init(rootView:)((uint64_t *)a1);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  outlined retain of SearchFocusContext?(&v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationItemDescription?);
  *(_QWORD *)&v6[direct field offset for UIHostingController.host] = v17;

  type metadata accessor for UIHostingController<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  v21.receiver = v6;
  v21.super_class = v18;
  v19 = objc_msgSendSuper2(&v21, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()((uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>, &lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(_QWORD))type metadata accessor for UIKitInspectorV3Bridge<ModifiedContent<AnyView, DocumentBaseModifier>>, type metadata accessor for PPTTestBridge<ModifiedContent<AnyView, DocumentBaseModifier>>, type metadata accessor for SharingActivityPickerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>, specialized SharingActivityPickerBridge.init(), type metadata accessor for ShareConfigurationBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);

  return v19;
}

Swift::Void __swiftcall UIHostingController.sizingOptionsDidChange(from:)(SwiftUI::UIHostingControllerSizingOptions from)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v2 = v1;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *v1;
  v5 = *MEMORY[0x1E0DEEDD8];
  v6 = *(_QWORD *)from.rawValue;
  v7 = (_QWORD *)((char *)v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  v8 = *v7 & ~v6;
  if (one-time initialization token for idealSizeOptions != -1)
    swift_once();
  v9 = static UIHostingControllerSizingOptions.idealSizeOptions;
  if ((static UIHostingControllerSizingOptions.idealSizeOptions & v8) != 0)
  {
    v10 = v5 & v4;
    swift_retain();
    static _ProposedSize.unspecified.getter();
    v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v12 = (_QWORD *)swift_allocObject();
    v13 = *(_QWORD *)(v10 + 80);
    v12[2] = v13;
    v14 = *(_QWORD *)(v10 + 88);
    v12[3] = v14;
    v12[4] = v11;
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
    v15 = *(_QWORD *)(*(_QWORD *)((char *)v2 + direct field offset for UIHostingController.host)
                    + *(_QWORD *)((*v3 & **(_QWORD **)((char *)v2 + direct field offset for UIHostingController.host))
                                + 0x68));
    swift_beginAccess();
    if (*(_BYTE *)(v15 + 128) == 1)
    {
      static CGSize.invalidValue.getter();
      v17 = v16;
      v19 = v18;
      v20 = *(id *)((char *)v2 + direct field offset for UIHostingController.host);
      static _ProposedSize.unspecified.getter();
      v22 = type metadata accessor for _UIHostingView(0, v13, v14, v21);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v22);
      ViewRendererHost.sizeThatFits(_:)();
      v24 = v23;
      v26 = v25;

      UIHostingController.idealSizeDidChange(from:to:)((CGSize)__PAIR128__(v19, v17), (CGSize)__PAIR128__(v26, v24));
    }
  }
  else
  {
    v27 = (_QWORD *)((char *)v2 + direct field offset for UIHostingController.sizingOptions);
    swift_beginAccess();
    if ((*v27 & v9) == 0)
    {
      swift_retain();
      static _ProposedSize.unspecified.getter();
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.stopObserving(proposal:)();
      swift_endAccess();
      swift_release();
    }
  }
  v28 = v8;
  UIHostingController.updateWindowSizeObservers(_:)((SwiftUI::UIHostingControllerSizingOptions)&v28);
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t UIHostingController.sizingOptions.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  v3 = (_QWORD *)((char *)v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v6 = v4;
  return (*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x398))(&v6);
}

uint64_t UIHostingController.sizingOptions.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + direct field offset for UIHostingController.sizingOptions);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t type metadata completion function for TupleWidget()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarSectionStyle()
{
  return &type metadata for SidebarSectionStyle;
}

unint64_t lazy protocol witness table accessor for type SidebarSectionStyle and conformance SidebarSectionStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarSectionStyle and conformance SidebarSectionStyle;
  if (!lazy protocol witness table cache variable for type SidebarSectionStyle and conformance SidebarSectionStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarSectionStyle, &type metadata for SidebarSectionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarSectionStyle and conformance SidebarSectionStyle);
  }
  return result;
}

void base witness table accessor for Sequence in ShadowRowCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ShadowRowCollection<A>()
{
  return associated type witness table accessor for Collection.Index : Comparable in ShadowSectionCollection<A>();
}

void base witness table accessor for Collection in ShadowRowCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = type metadata accessor for ShadowListUpdateRecorder(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v6 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      result = swift_getAssociatedTypeWitness();
      if (v7 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for SelectionManagerBox<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for SelectionManagerBox()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t initializeWithCopy for ScrollViewResponder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ScrollViewResponder and conformance ScrollViewResponder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewResponder and conformance ScrollViewResponder;
  if (!lazy protocol witness table cache variable for type ScrollViewResponder and conformance ScrollViewResponder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewResponder, &unk_1E1AD0080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewResponder and conformance ScrollViewResponder);
  }
  return result;
}

uint64_t ScrollViewResponder.updateValue()()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  char v4;
  uint64_t v6;

  v0 = specialized ScrollViewResponder.responder()();
  type metadata accessor for HostingScrollView();
  v1 = *(void **)AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  swift_retain();
  v2 = v1;
  v3 = objc_msgSend(v2, sel_superview);
  swift_unknownObjectWeakAssign();

  swift_weakAssign();
  AGGraphGetValue();
  AGGraphGetValue();
  AGGraphGetValue();
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphGetValue();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  if (AGGraphGetOutputValue())
    return swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v6 + 32) = v0;
  specialized Array._endMutation()();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for ResolvedButtonStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedButtonStyle and conformance ResolvedButtonStyle()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle;
  if (!lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle)
  {
    v1 = type metadata accessor for ResolvedButtonStyle(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedButtonStyle, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedButtonStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedButtonStyle and conformance ResolvedButtonStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for ResolvedBorderShape()
{
  return &type metadata for ResolvedBorderShape;
}

unint64_t lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape;
  if (!lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedBorderShape, &type metadata for ResolvedBorderShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape;
  if (!lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedBorderShape, &type metadata for ResolvedBorderShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape;
  if (!lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedBorderShape, &type metadata for ResolvedBorderShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ResolvedBorderShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ButtonBorderShape(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape);
}

double protocol witness for Shape.path(in:) in conformance ResolvedBorderShape@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  char v5;

  ResolvedBorderShape.path(in:)((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance PlatterButtonStyleView<A>.ClippingShape()
{
  return Shape.sizeThatFits(_:)();
}

__n128 ResolvedBorderShape.path(in:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  __n128 result;
  __int128 v6;
  __n128 v7;
  char v8;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 16);
  CGRect.inset(by:)();
  if (v4 == 1)
    __asm { BR              X9 }
  RoundedRectangle.path(in:)();
  result = v7;
  *(_OWORD *)a1 = v6;
  *(__n128 *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  return result;
}

uint64_t type metadata completion function for PrimaryBarViewModel()
{
  return swift_updateClassMetadata2();
}

ValueMetadata *type metadata accessor for PopoverPresentation()
{
  return &type metadata for PopoverPresentation;
}

uint64_t type metadata completion function for PlacementProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for MinorProperties(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for PlacementProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlacementProperties);
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType;
  if (!lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4860], MEMORY[0x1E0CE4858]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType);
  }
  return result;
}

uint64_t NavigationStateHost.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[152];

  _s7SwiftUI15NavigationStateVSgWOi0_((uint64_t)v4);
  outlined init with take of NavigationState?((uint64_t)v4, v0 + 16);
  *(_QWORD *)(v0 + 168) = 0;
  type metadata accessor for NavigationSelectionHost(0);
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  ObservationRegistrar.init()();
  *(_QWORD *)(v0 + 176) = v1;
  type metadata accessor for NavigationSeedHost(0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  ObservationRegistrar.init()();
  *(_QWORD *)(v0 + 184) = v2;
  *(_QWORD *)(v0 + 192) = 0;
  *(_BYTE *)(v0 + 200) = 0;
  return v0;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in SceneBridge()
{
  return MEMORY[0x1E0C96020];
}

uint64_t type metadata completion function for NavigationSplitView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata instantiation function for CapsuleSlider()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for MultimodalListStyle.Layout()
{
  return &type metadata for MultimodalListStyle.Layout;
}

void *type metadata accessor for LazyPageTabModifier()
{
  return &unk_1E1ACE6A8;
}

unint64_t lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyPageTabModifier and conformance LazyPageTabModifier;
  if (!lazy protocol witness table cache variable for type LazyPageTabModifier and conformance LazyPageTabModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyPageTabModifier, &unk_1E1ACE6A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyPageTabModifier and conformance LazyPageTabModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for IsSharingPickerHost()
{
  return &type metadata for IsSharingPickerHost;
}

uint64_t type metadata accessor for HostingViewRegistry()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for shared()
{
  uint64_t result;

  type metadata accessor for HostingViewRegistry();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static HostingViewRegistry.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for PlatformSceneCache();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static PlatformSceneCache.shared = result;
  return result;
}

uint64_t one-time initialization function for listRowSeparatorTrailing()
{
  uint64_t result;

  result = AlignmentKey.init(id:axis:)();
  static HorizontalAlignment.listRowSeparatorTrailing = result;
  return result;
}

uint64_t one-time initialization function for listRowSeparatorLeading()
{
  uint64_t result;

  result = AlignmentKey.init(id:axis:)();
  static HorizontalAlignment.listRowSeparatorLeading = result;
  return result;
}

void FlipForRTLTransform.value.getter(uint64_t a1@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  CGFloat v7;
  uint64_t Value;
  CGAffineTransform v9;

  v2 = *(unsigned __int8 *)AGGraphGetValue();
  if (v2 == 2 || ((v2 & 1) == 0) == *(_BYTE *)AGGraphGetValue())
  {
    Value = AGGraphGetValue();
    *(_QWORD *)a1 = *(_QWORD *)Value;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
    swift_retain();
  }
  else
  {
    v3 = AGGraphGetValue();
    *(_QWORD *)a1 = *(_QWORD *)v3;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v3 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
    AGGraphGetValue();
    v4 = swift_retain();
    *(double *)&v5 = MEMORY[0x18D755E9C](v4);
    ViewTransform.resetPosition(_:)((CGPoint)__PAIR128__(v6, v5));
    AGGraphGetValue();
    ViewSize.width.getter();
    *(_OWORD *)&v9.a = 0xBFF0000000000000;
    v9.c = 0.0;
    v9.d = 1.0;
    v9.tx = v7;
    v9.ty = 0.0;
    ViewTransform.appendAffineTransform(_:inverse:)(&v9, 1);
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLTransform()
{
  lazy protocol witness table accessor for type FlipForRTLTransform and conformance FlipForRTLTransform();
  return static AsyncAttribute.flags.getter();
}

void type metadata completion function for FileImportOperation()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(319, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata completion function for FileExportOperation()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for FileExportOperation.Mode(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t type metadata completion function for FileExportOperation.Move()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FileExportOperation.Move(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.Move);
}

uint64_t type metadata completion function for FileExportOperation.Mode()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FileExportOperation.Move(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t FallbackDelegateBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_allocObject();
  v3 = a1;
  if (!a1)
    v3 = *(_QWORD *)(*(_QWORD *)result + 104);
  *(_QWORD *)(result + 16) = v3;
  *(_BYTE *)(result + 24) = a1 != 0;
  return result;
}

uint64_t type metadata completion function for FallbackDelegateBox()
{
  return swift_initClassMetadata2();
}

{
  return type metadata completion function for FallbackDelegateBox();
}

uint64_t type metadata accessor for FallbackDelegateBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FallbackDelegateBox);
}

id FallbackDelegateBox.delegate.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  char v4;
  id v5;

  v1 = *(id *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v2 = v1;
  }
  else
  {
    v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    v3 = *(void **)(v0 + 16);
    v4 = *(_BYTE *)(v0 + 24);
    *(_QWORD *)(v0 + 16) = v1;
    *(_BYTE *)(v0 + 24) = 1;
    v5 = v1;
    outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(v3, v4);
  }
  return v1;
}

void outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

ValueMetadata *type metadata accessor for DismissWindowAction()
{
  return &type metadata for DismissWindowAction;
}

void type metadata completion function for DismissSearchAction()
{
  unint64_t v0;

  type metadata accessor for Binding<SearchFieldState>?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata completion function for DialogActionContext()
{
  unint64_t v0;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata completion function for DialogActionContext.CancelType()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PlatformItemList.Item();
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

uint64_t type metadata accessor for DialogActionContext.CancelType(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DialogActionContext.CancelType);
}

unint64_t lazy protocol witness table accessor for type DefaultSectionStyle and conformance DefaultSectionStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultSectionStyle and conformance DefaultSectionStyle;
  if (!lazy protocol witness table cache variable for type DefaultSectionStyle and conformance DefaultSectionStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultSectionStyle, &type metadata for DefaultSectionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultSectionStyle and conformance DefaultSectionStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in DefaultSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ContextMenuModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ContextMenuModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleModifier<DefaultButtonStyle> and conformance ButtonStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStyleModifier<DefaultButtonStyle> and conformance ButtonStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleModifier<DefaultButtonStyle> and conformance ButtonStyleModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleModifier<DefaultButtonStyle> and conformance ButtonStyleModifier<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ToolbarItemList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t outlined init with copy of BridgedPresentation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for BridgedPresentation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t assignWithCopy for BaseModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

unint64_t lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderedButtonStyle and conformance BorderedButtonStyle;
  if (!lazy protocol witness table cache variable for type BorderedButtonStyle and conformance BorderedButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderedButtonStyle, &type metadata for BorderedButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonStyle and conformance BorderedButtonStyle);
  }
  return result;
}

uint64_t BarAppearanceBridge.updateNavigationAppearances(navigationController:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v24;
  char **v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t result;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  char v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[5];
  __int128 v91[6];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  char v103;
  char v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  char v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  __int16 v124;
  char v125;
  uint64_t v126;
  char v127;

  v2 = v1;
  type metadata accessor for UIKitNavigationController();
  v4 = swift_dynamicCastClass();
  if (!v4)
    goto LABEL_41;
  v5 = (void *)v4;
  v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_update);
  v7 = MEMORY[0x18D760234](v6 + 32);
  v83 = a1;
  if (!v7 || (swift_unknownObjectRelease(), v7 != v2))
  {
    *(_QWORD *)(v6 + 40) = &protocol witness table for BarAppearanceBridge;
    swift_unknownObjectWeakAssign();
  }
  memset(v91, 0, 40);
  outlined init with copy of ToolbarPlacement.Role((uint64_t)v91, (uint64_t)&v107);
  v8 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations;
  swift_beginAccess();
  v9 = *(_QWORD *)v8;
  v86 = v2;
  v87 = v8;
  if (*(_QWORD *)(*(_QWORD *)v8 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v9 + 56) + 80 * v10;
      v80 = *(_BYTE *)v12;
      v14 = *(_QWORD *)(v12 + 8);
      v13 = *(_QWORD *)(v12 + 16);
      v77 = *(_BYTE *)(v12 + 24);
      v74 = *(_QWORD *)(v12 + 32);
      v15 = *(_BYTE *)(v12 + 40);
      v16 = *(_QWORD *)(v12 + 48);
      v17 = *(_QWORD *)(v12 + 64);
      v18 = *(_BYTE *)(v12 + 72);
      v19 = *(unsigned __int8 *)(v12 + 56) | (*(unsigned __int8 *)(v12 + 57) << 8) | (*(unsigned __int8 *)(v12 + 58) << 16);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v80 = 0;
      v13 = 0;
      v77 = 0;
      v74 = 0;
      v15 = 0;
      v16 = 0;
      v19 = 0;
      v17 = 0;
      v18 = 0;
      v14 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v80 = 0;
    v13 = 0;
    v77 = 0;
    v74 = 0;
    v15 = 0;
    v16 = 0;
    v19 = 0;
    v17 = 0;
    v18 = 0;
    v14 = 1;
  }
  v20 = (uint64_t *)(v6 + 24);
  swift_beginAccess();
  v21 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)&v96 = v21;
  if (v14 == 1)
  {
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&v107, (uint64_t)&v92);
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v107);
    LOBYTE(v68) = v95;
    v65 = v94;
    outlined consume of ToolbarAppearanceConfiguration?(v92, v93);
    v22 = v96;
  }
  else
  {
    LOBYTE(v118) = v80;
    *((_QWORD *)&v118 + 1) = v14;
    v119 = v13;
    v120 = v77;
    v121 = v74;
    v122 = v15;
    v123 = v16;
    v124 = v19 & 0xFF01;
    v125 = BYTE2(v19);
    v126 = v17;
    v127 = v18;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v92 = v21;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v118, (uint64_t)&v107, isUniquelyReferenced_nonNull_native);
    v22 = v92;
    *(_QWORD *)&v96 = v92;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v107);
  }
  v24 = (uint64_t *)v87;
  v25 = &selRef_setSensitive_;
  v26 = objc_msgSend(v5, sel_tabBarController, v65, v68);
  if (v26)
  {
    v27 = v26;
    type metadata accessor for UIKitTabBarController();
    v28 = (void *)swift_dynamicCastClass();
    if (!v28)

  }
  else
  {
    v28 = 0;
  }
  v29 = v83;
  PlatformBarUpdater.callAsFunction(configurations:context:)(v22, v5, v28);
  swift_bridgeObjectRelease();

  outlined destroy of ToolbarPlacement.Role((uint64_t)v91);
  memset(v91, 0, 24);
  *(__int128 *)((char *)&v91[1] + 8) = xmmword_187C304D0;
  outlined init with copy of ToolbarPlacement.Role((uint64_t)v91, (uint64_t)&v96);
  v30 = *(_QWORD *)v87;
  if (!*(_QWORD *)(*(_QWORD *)v87 + 16))
    goto LABEL_23;
  swift_bridgeObjectRetain();
  v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91);
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    v90[0] = *v20;
    goto LABEL_24;
  }
  v33 = *(_QWORD *)(v30 + 56) + 80 * v31;
  v34 = *(_BYTE *)v33;
  v35 = *(_QWORD *)(v33 + 8);
  v36 = *(_QWORD *)(v33 + 16);
  v37 = *(_BYTE *)(v33 + 24);
  v84 = *(_QWORD *)(v33 + 32);
  v81 = *(_BYTE *)(v33 + 40);
  v78 = *(_QWORD *)(v33 + 48);
  v72 = *(_BYTE *)(v33 + 57);
  v75 = *(_BYTE *)(v33 + 56);
  v38 = *(_QWORD *)(v33 + 64);
  HIDWORD(v69) = *(unsigned __int8 *)(v33 + 72);
  v71 = *(_BYTE *)(v33 + 58);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v39 = *v20;
  v90[0] = *v20;
  if (v35 == 1)
  {
    v24 = (uint64_t *)v87;
    v25 = &selRef_setSensitive_;
LABEL_24:
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&v96, (uint64_t)&v92);
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v96);
    LOBYTE(v69) = v95;
    v66 = v94;
    outlined consume of ToolbarAppearanceConfiguration?(v92, v93);
    v40 = v90[0];
    goto LABEL_25;
  }
  LOBYTE(v107) = v34;
  *((_QWORD *)&v107 + 1) = v35;
  v108 = v36;
  v109 = v37;
  v110 = v84;
  v111 = v81;
  v112 = v78;
  v113 = v75;
  v114 = v72;
  v115 = v71;
  v116 = v38;
  v117 = BYTE4(v69);
  swift_bridgeObjectRetain();
  v63 = swift_isUniquelyReferenced_nonNull_native();
  v92 = v39;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v107, (uint64_t)&v96, v63);
  v40 = v92;
  v90[0] = v92;
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v96);
  v24 = (uint64_t *)v87;
  v25 = &selRef_setSensitive_;
LABEL_25:
  v41 = objc_msgSend(v5, v25[101], v66, v69);
  if (v41)
  {
    v42 = v41;
    type metadata accessor for UIKitTabBarController();
    v43 = (void *)swift_dynamicCastClass();
    if (!v43)

  }
  else
  {
    v43 = 0;
  }
  v44 = v29;
  PlatformBarUpdater.callAsFunction(configurations:context:)(v40, v5, v43);
  swift_bridgeObjectRelease();

  outlined destroy of ToolbarPlacement.Role((uint64_t)v91);
  memset(v91, 0, 24);
  *(__int128 *)((char *)&v91[1] + 8) = xmmword_187C0CDF0;
  outlined init with copy of ToolbarPlacement.Role((uint64_t)v91, (uint64_t)v90);
  v45 = *v24;
  if (!*(_QWORD *)(*v24 + 16))
    goto LABEL_34;
  swift_bridgeObjectRetain();
  v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91);
  if ((v47 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_34:
    v89 = *v20;
    goto LABEL_35;
  }
  v48 = *(_QWORD *)(v45 + 56) + 80 * v46;
  v49 = *(_BYTE *)v48;
  v50 = *(_QWORD *)(v48 + 8);
  v51 = *(_QWORD *)(v48 + 16);
  v52 = *(_BYTE *)(v48 + 24);
  v88 = *(_QWORD *)(v48 + 32);
  v53 = *(_BYTE *)(v48 + 40);
  v85 = *(_QWORD *)(v48 + 48);
  v82 = *(_BYTE *)(v48 + 56);
  v79 = *(_BYTE *)(v48 + 57);
  v54 = *(_QWORD *)(v48 + 64);
  v73 = *(_BYTE *)(v48 + 72);
  v76 = *(_BYTE *)(v48 + 58);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v55 = *v20;
  v89 = *v20;
  if (v50 != 1)
  {
    LOBYTE(v96) = v49;
    *((_QWORD *)&v96 + 1) = v50;
    v97 = v51;
    v98 = v52;
    v99 = v88;
    v100 = v53;
    v101 = v85;
    v102 = v82;
    v103 = v79;
    v104 = v76;
    v105 = v54;
    v106 = v73;
    swift_bridgeObjectRetain();
    v64 = swift_isUniquelyReferenced_nonNull_native();
    v92 = v55;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v96, (uint64_t)v90, v64);
    v56 = v92;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v90);
    v25 = &selRef_setSensitive_;
    goto LABEL_36;
  }
  v25 = &selRef_setSensitive_;
LABEL_35:
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v90, (uint64_t)&v92);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v90);
  LOBYTE(v70) = v95;
  v67 = v94;
  outlined consume of ToolbarAppearanceConfiguration?(v92, v93);
  v56 = v89;
LABEL_36:
  v57 = objc_msgSend(v5, v25[101], v67, v70);
  if (v57)
  {
    v58 = v57;
    type metadata accessor for UIKitTabBarController();
    v59 = (void *)swift_dynamicCastClass();
    if (!v59)

  }
  else
  {
    v59 = 0;
  }
  v60 = v44;
  PlatformBarUpdater.callAsFunction(configurations:context:)(v56, v5, v59);
  swift_bridgeObjectRelease();

  outlined destroy of ToolbarPlacement.Role((uint64_t)v91);
  v2 = v86;
LABEL_41:
  v61 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v61, (uint64_t)v91);
  if (*(_QWORD *)&v91[0])
  {
    outlined init with take of BarAppearanceBridge.UpdateContext(v91, (uint64_t)&v92);
    closure #1 in BarAppearanceBridge.updateNavigationAppearances(navigationController:)((id *)&v92, v2);
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v92);
    return 1;
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v91, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t BarAppearanceBridge.invalidate(bar:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[40];
  _BYTE v10[40];

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars);
  swift_bridgeObjectRetain();
  v4 = specialized Set.contains(_:)(a1, v3);
  result = swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v9);
    v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_toUpdateBars);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v6;
    *v6 = 0x8000000000000000;
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v9, isUniquelyReferenced_nonNull_native, (uint64_t)v10);
    *v6 = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return outlined destroy of AccessibilityTableContext?((uint64_t)v10, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  }
  return result;
}

uint64_t BarAppearanceBridge.uiPreferredStatusBarStyle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  _OWORD v10[2];
  uint64_t v11;

  if (!BarAppearanceBridge.uiHasStatusBarOpinion.getter())
    return 0;
  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastBarUpdates);
  swift_beginAccess();
  v2 = *v1;
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_8:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v10);
    return 0;
  }
  swift_bridgeObjectRetain();
  v3 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 56) + 2 * v3 + 1);
  swift_bridgeObjectRelease();
  if (v5 == 2)
  {
    v7 = 0;
  }
  else
  {
    v9 = v5 & 1;
    closure #1 in BarAppearanceBridge.uiPreferredStatusBarStyle.getter(&v9, &v8);
    v7 = v8;
  }
  outlined destroy of ToolbarPlacement.Role((uint64_t)v10);
  return v7;
}

ValueMetadata *type metadata accessor for AnyListStyleContext()
{
  return &type metadata for AnyListStyleContext;
}

unint64_t lazy protocol witness table accessor for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>;
  if (!lazy protocol witness table cache variable for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<TintShapeStyle>, MEMORY[0x1E0CE2A98], MEMORY[0x1E0CE2A88], MEMORY[0x1E0CE4650]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4660], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>);
  }
  return result;
}

uint64_t initializeWithCopy for UpdateViewGeometry(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type UpdateViewGeometry and conformance UpdateViewGeometry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateViewGeometry and conformance UpdateViewGeometry;
  if (!lazy protocol witness table cache variable for type UpdateViewGeometry and conformance UpdateViewGeometry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateViewGeometry, &unk_1E1B179D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateViewGeometry and conformance UpdateViewGeometry);
  }
  return result;
}

_DWORD *initializeWithCopy for TableViewListCore.UpdateBridgedState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t outlined destroy of UpdateBridgedState(uint64_t a1)
{
  destroy for TableViewListCore.UpdateBridgedState();
  return a1;
}

unint64_t lazy protocol witness table accessor for type UpdateBridgedState and conformance UpdateBridgedState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateBridgedState and conformance UpdateBridgedState;
  if (!lazy protocol witness table cache variable for type UpdateBridgedState and conformance UpdateBridgedState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateBridgedState, &type metadata for UpdateBridgedState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateBridgedState and conformance UpdateBridgedState);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarButtonStyle()
{
  return &type metadata for ToolbarButtonStyle;
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarButtonStyle and conformance ToolbarButtonStyle;
  if (!lazy protocol witness table cache variable for type ToolbarButtonStyle and conformance ToolbarButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarButtonStyle, &type metadata for ToolbarButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonStyle and conformance ToolbarButtonStyle);
  }
  return result;
}

void type metadata accessor for StyleContextWriter<ContainerStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>)
  {
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>);
  }
}

uint64_t assignWithCopy for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for SidebarButtonStyle()
{
  return &type metadata for SidebarButtonStyle;
}

unint64_t lazy protocol witness table accessor for type SidebarButtonStyle and conformance SidebarButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarButtonStyle and conformance SidebarButtonStyle;
  if (!lazy protocol witness table cache variable for type SidebarButtonStyle and conformance SidebarButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarButtonStyle, &type metadata for SidebarButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarButtonStyle and conformance SidebarButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollableProvider and conformance ScrollableProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollableProvider and conformance ScrollableProvider;
  if (!lazy protocol witness table cache variable for type ScrollableProvider and conformance ScrollableProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableProvider, &unk_1E1ACB110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollableProvider and conformance ScrollableProvider);
  }
  return result;
}

uint64_t ScrollableProvider.value.getter@<X0>(unint64_t a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  int v17;

  v5 = HIDWORD(a1);
  v6 = AGCreateWeakAttribute();
  v7 = AGCreateWeakAttribute();
  v8 = AGCreateWeakAttribute();
  v9 = *MEMORY[0x1E0CFED28];
  if (*MEMORY[0x1E0CFED28] != (_DWORD)v5)
  {
    v13 = AGCreateWeakAttribute();
    v16 = HIDWORD(v13);
    v17 = v13;
    if (v9 != a2)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    LODWORD(v12) = 0;
    goto LABEL_6;
  }
  LODWORD(v16) = 0;
  v17 = 0;
  if (v9 == a2)
    goto LABEL_5;
LABEL_3:
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
LABEL_6:
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  a3[3] = (uint64_t)&unk_1E1AD4850;
  a3[4] = lazy protocol witness table accessor for type ScrollViewScrollable and conformance ScrollViewScrollable();
  result = swift_allocObject();
  *a3 = result;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v7;
  *(_QWORD *)(result + 32) = v8;
  *(_DWORD *)(result + 40) = v17;
  *(_DWORD *)(result + 44) = v16;
  *(_DWORD *)(result + 48) = v11;
  *(_DWORD *)(result + 52) = v12;
  *(_QWORD *)(result + 56) = v14;
  return result;
}

uint64_t type metadata accessor for SceneStorageValues.AnyEntry()
{
  return objc_opt_self();
}

uint64_t SceneStorageValues.restoredValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t *);
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;

  v15 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_23;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_23;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_23;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    v11 = *(void (**)(uint64_t *))(**(_QWORD **)(*(_QWORD *)(v1 + 56) + 8 * v10) + 80);
    swift_retain();
    v11(&v15);
    result = swift_release();
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for PlatterButtonStyle()
{
  return &type metadata for PlatterButtonStyle;
}

unint64_t lazy protocol witness table accessor for type PlatterButtonStyle and conformance PlatterButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatterButtonStyle and conformance PlatterButtonStyle;
  if (!lazy protocol witness table cache variable for type PlatterButtonStyle and conformance PlatterButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyle, &type metadata for PlatterButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatterButtonStyle and conformance PlatterButtonStyle);
  }
  return result;
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata completion function for ListContentVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[6];

  type metadata accessor for _RowVisitationContext(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v4 = type metadata accessor for Optional();
  AssociatedTypeWitness = v4;
  if (v6 <= 0x3F)
  {
    v11[4] = *(_QWORD *)(v4 - 8) + 64;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v7 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v8 = swift_getAssociatedTypeWitness();
      if (v9 > 0x3F)
      {
        return v8;
      }
      else
      {
        swift_getTupleTypeLayout2();
        v11[5] = v11;
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t type metadata accessor for LabelStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LabelStyleModifier);
}

unint64_t type metadata accessor for EventBindingSource()
{
  unint64_t result;

  result = lazy cache variable for type metadata for EventBindingSource;
  if (!lazy cache variable for type metadata for EventBindingSource)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventBindingSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultButtonStyle and conformance DefaultButtonStyle;
  if (!lazy protocol witness table cache variable for type DefaultButtonStyle and conformance DefaultButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultButtonStyle, &type metadata for DefaultButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultButtonStyle and conformance DefaultButtonStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in DefaultButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ContentMarginProxy()
{
  return &type metadata for ContentMarginProxy;
}

ValueMetadata *type metadata accessor for ConfirmationDialog()
{
  return &type metadata for ConfirmationDialog;
}

ValueMetadata *type metadata accessor for ButtonRepeatTiming.TimingEntry()
{
  return &type metadata for ButtonRepeatTiming.TimingEntry;
}

void type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>)
  {
    type metadata accessor for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>> and conformance _EndedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>, MEMORY[0x1E0CE2260]);
    v0 = type metadata accessor for AddGestureModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>);
  }
}

ValueMetadata *type metadata accessor for AccessibilityFocus()
{
  return &type metadata for AccessibilityFocus;
}

unint64_t lazy protocol witness table accessor for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match;
  if (!lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocus.Match, &type metadata for AccessibilityFocus.Match);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match;
  if (!lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocus.Match, &type metadata for AccessibilityFocus.Match);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match);
  }
  return result;
}

ValueMetadata *type metadata accessor for _ResetFocusAction()
{
  return &type metadata for _ResetFocusAction;
}

uint64_t type metadata completion function for UIKitButtonContentHost()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for UIItemHostingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIItemHostingView);
}

ValueMetadata *type metadata accessor for ToolbarLegibility()
{
  return &type metadata for ToolbarLegibility;
}

ValueMetadata *type metadata accessor for ToolbarLegibility.Role()
{
  return &type metadata for ToolbarLegibility.Role;
}

uint64_t type metadata accessor for TableGlobalHeader()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for View.Body : View in SceneBridgeReader<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance SceneBridgeReader<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return SceneBridgeReader.body.getter(*(_QWORD *)v2, *(unsigned __int8 *)(v2 + 8), *(void (**)(uint64_t))(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t type metadata accessor for SceneBridgeReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SceneBridgeReader);
}

uint64_t SceneBridgeReader.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  void (*v23)(char *, uint64_t);
  uint64_t v24[2];

  v24[0] = a6;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v24 - v15;
  v18 = v17 & 1;
  outlined copy of Environment<SceneBridge?>.Content(v19, v18);
  v20 = specialized Environment.wrappedValue.getter(a1, v18);
  outlined consume of Environment<Color?>.Content(a1, v18);
  if (v20)
    goto LABEL_5;
  MEMORY[0x18D75AC90](0xD0000000000000E7, 0x8000000187BD8AD0);
  v20 = static SceneBridge._devNullSceneBridge;
  if (static SceneBridge._devNullSceneBridge
    || (type metadata accessor for SceneBridge(),
        v21 = swift_allocObject(),
        SceneBridge.init()(),
        static SceneBridge._devNullSceneBridge = v21,
        result = swift_release(),
        (v20 = static SceneBridge._devNullSceneBridge) != 0))
  {
    swift_retain();
LABEL_5:
    a3(v20);
    swift_release();
    static ViewBuilder.buildExpression<A>(_:)(v12, a4, a5);
    v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v12, a4);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, a4, v24[0]);
    return ((uint64_t (*)(char *, uint64_t))v23)(v16, a4);
  }
  __break(1u);
  return result;
}

uint64_t default argument 0 of SceneBridgeReader.init(sceneBridge:handler:)()
{
  uint64_t v0;

  type metadata accessor for SceneBridge();
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type SceneBridge and conformance SceneBridge, v0, (uint64_t (*)(uint64_t))type metadata accessor for SceneBridge, (uint64_t)&protocol conformance descriptor for SceneBridge);
  return static ObservableObject.environmentStore.getter();
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance SceneBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return SceneBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t type metadata accessor for SceneBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SceneBodyAccessor);
}

uint64_t SceneBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for SceneBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

void destroy for PresentationState.Base(uint64_t a1)
{
  unsigned int v2;
  id v3;

  v2 = *(unsigned __int8 *)(a1 + 233);
  if (v2 >= 0xA)
    v2 = *(_DWORD *)a1 + 10;
  switch(v2)
  {
    case 0u:
    case 1u:
      swift_release();
      if (*(_QWORD *)(a1 + 8))
        swift_release();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      swift_release();
      swift_release();
      swift_release();
      v3 = *(id *)(a1 + 112);
      goto LABEL_20;
    case 2u:
    case 3u:
    case 5u:

      swift_release();
      if (*(_QWORD *)(a1 + 16))
        swift_release();
      if (*(_QWORD *)(a1 + 64))
        __swift_destroy_boxed_opaque_existential_1(a1 + 40);
      goto LABEL_29;
    case 4u:
    case 6u:
    case 9u:
      swift_release();
      if (*(_QWORD *)(a1 + 8))
        swift_release();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      goto LABEL_29;
    case 7u:
      v3 = *(id *)a1;
LABEL_20:

      return;
    case 8u:
      swift_release();
      if (*(_QWORD *)(a1 + 8))
        swift_release();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      if (*(_QWORD *)(a1 + 136))
        swift_release();
      if (*(_QWORD *)(a1 + 184))
        __swift_destroy_boxed_opaque_existential_1(a1 + 160);
LABEL_29:
      swift_release();
      swift_release();
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t outlined destroy of PresentationState.Base(uint64_t a1)
{
  destroy for PresentationState.Base(a1);
  return a1;
}

uint64_t protocol witness for static InvalidatableAttribute.willInvalidate(attribute:) in conformance PlatformViewChild<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static PlatformViewChild.willRemove(attribute:)(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x1E0CE3258]);
}

ValueMetadata *type metadata accessor for PlainSectionStyle()
{
  return &type metadata for PlainSectionStyle;
}

unint64_t lazy protocol witness table accessor for type PlainSectionStyle and conformance PlainSectionStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainSectionStyle and conformance PlainSectionStyle;
  if (!lazy protocol witness table cache variable for type PlainSectionStyle and conformance PlainSectionStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainSectionStyle, &type metadata for PlainSectionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainSectionStyle and conformance PlainSectionStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in PlainSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition;
  if (!lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3EF0], MEMORY[0x1E0CE3EF8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationEnabled()
{
  return &type metadata for NavigationEnabled;
}

ValueMetadata *type metadata accessor for NavigationBarHost()
{
  return &type metadata for NavigationBarHost;
}

void protocol witness for Rule.value.getter in conformance MakeRepresentable<A, B>()
{
  MakeRepresentable.value.getter();
}

void base witness table accessor for _AttributeBody in MakeRepresentable<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for MakeRepresentable()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t storeEnumTagSinglePayload for ListStackBehavior(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ListStackBehavior(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t protocol witness for static PlatformViewRepresentable.dynamicProperties.getter in conformance ListRepresentable<A, B>()
{
  return static PlatformViewRepresentable.dynamicProperties.getter();
}

uint64_t protocol witness for static PlatformViewRepresentable.layoutOptions(_:) in conformance ListRepresentable<A, B>@<X0>(_QWORD *a1@<X8>)
{
  return static ListRepresentable.layoutOptions(_:)(a1);
}

{
  return static ListRepresentable.layoutOptions(_:)(a1);
}

void protocol witness for PlatformViewRepresentable.sizeThatFits(_:provider:context:) in conformance ListRepresentable<A, B>()
{
  specialized ListRepresentable.sizeThatFits(_:provider:context:)();
}

char *protocol witness for PlatformViewRepresentable.makeViewProvider(context:) in conformance ListRepresentable<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  char *result;

  result = ListRepresentable.makeViewProvider(context:)(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t assignWithCopy for ListRepresentable(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t partial apply for closure #3 in ListRepresentable.makeViewProvider(context:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t partial apply for closure #1 in Coordinator.menuWillShow(interaction:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t partial apply for closure #1 in ListRepresentable.makeViewProvider(context:)()
{
  return swift_unknownObjectWeakAssign();
}

{
  return swift_unknownObjectWeakAssign();
}

uint64_t static ListRepresentable.layoutOptions(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  static Semantics.v3_2.getter();
  result = isLinkedOnOrAfter(_:)();
  if ((result & 1) != 0)
  {
    lazy protocol witness table accessor for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions();
    result = OptionSet<>.insert(_:)();
  }
  *a1 = 1;
  return result;
}

{
  uint64_t result;

  static Semantics.v3_2.getter();
  result = isLinkedOnOrAfter(_:)();
  if ((result & 1) != 0)
  {
    lazy protocol witness table accessor for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions();
    result = OptionSet<>.insert(_:)();
  }
  *a1 = 1;
  return result;
}

ValueMetadata *type metadata accessor for ListPaddingAnchor()
{
  return &type metadata for ListPaddingAnchor;
}

void *type metadata accessor for ListPaddingAnchor.Storage()
{
  return &unk_1E1AC5398;
}

void closure #1 in KitRendererCommon(_:)(char **a1)
{
  int v2;
  objc_class *ObjCClassFromMetadata;
  NSString *v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  uint64_t v8;
  int v9;

  v2 = static CommandLine.argc.getter();
  type metadata accessor for SwiftUIApplication();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v4 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = (NSString *)MEMORY[0x18D75CC88](v5);
    swift_bridgeObjectRelease();
  }
  v6 = (objc_class *)swift_getObjCClassFromMetadata();
  v7 = NSStringFromClass(v6);
  if (!v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = (NSString *)MEMORY[0x18D75CC88](v8);
    swift_bridgeObjectRelease();
  }
  v9 = UIApplicationMain(v2, a1, v4, v7);

  exit(v9);
}

ValueMetadata *type metadata accessor for IsInLazyContainer()
{
  return &type metadata for IsInLazyContainer;
}

double protocol witness for ScrollViewHelperDelegate.makeContainerSize() in conformance HostingScrollView()
{
  double result;

  *(_QWORD *)&result = (unint64_t)HostingScrollView.makeContainerSize()();
  return result;
}

char *HostingScrollView.init(viewType:helper:)(uint64_t a1, void *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  objc_class *ObjectType;
  _QWORD *v7;
  char *v8;
  _OWORD *v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  char *v16;
  char *v17;
  id v18;
  char *v19;
  void *v20;
  char *v21;
  id v22;
  objc_super v24;
  __int16 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  swift_weakInit();
  v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_rtlAdjustment] = 0;
  v7 = &v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture];
  *v7 = 0;
  v7[1] = 0;
  v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_descendantScrollableAxes] = 0;
  v8 = &v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_QWORD *)v8 + 8) = 0xF000000000000004;
  v9 = &v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets];
  *v9 = 0u;
  v9[1] = 0u;
  v10 = &v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
  *v10 = 0;
  v10[1] = 0;
  v11 = &v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig];
  v11[2] = 0;
  *(_WORD *)v11 = 2;
  v12 = &v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
  *v12 = 0;
  v12[1] = 0;
  v13 = (uint64_t *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  v14 = swift_allocObject();
  *(_BYTE *)(v14 + 16) = 0;
  *v13 = v14;
  v13[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  swift_weakInit();
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_viewType] = a1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper] = a2;
  v25 = 256;
  v26 = 0u;
  v27 = 0u;
  v28 = 2;
  v31 = 0;
  v29 = 0;
  v30 = 0;
  swift_unknownObjectWeakInit();
  v34 = 0;
  v33 = 0u;
  v32 = 0u;
  outlined init with take of ScrollViewConfiguration((uint64_t)&v25, (uint64_t)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_configuration]);
  type metadata accessor for HostingScrollView.PlatformGroupContainer();
  v15 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v16 = v3;
  v17 = a2;
  v18 = objc_msgSend(v15, sel_init);
  *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host] = v18;

  v24.receiver = v16;
  v24.super_class = ObjectType;
  v19 = (char *)objc_msgSendSuper2(&v24, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v20 = *(void **)&v19[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host];
  v21 = v19;
  objc_msgSend(v21, sel_addSubview_, v20);
  v22 = objc_msgSend(v20, sel_layer);
  objc_msgSend(v22, sel_setAllowsGroupOpacity_, 0);
  objc_msgSend(v22, sel_setAllowsGroupBlending_, 0);
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate + 8] = &protocol witness table for HostingScrollView;
  swift_unknownObjectWeakAssign();
  objc_msgSend(v21, sel_setDelegate_, v17);

  swift_unknownObjectWeakAssign();
  return v21;
}

void HostingScrollView.checkAnimationCompletion()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  v14 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending;
  if (*(_BYTE *)(v13 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) == 1
    && (objc_msgSend(v1, sel_isTracking, v10) & 1) == 0)
  {
    *(_BYTE *)(v13 + v14) = 0;
    type metadata accessor for OS_dispatch_queue();
    v15 = (void *)static OS_dispatch_queue.main.getter();
    v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in HostingScrollView.checkAnimationCompletion();
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_14_3;
    v17 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18D75D930](0, v12, v6, v17);
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }
}

uint64_t HostingScrollView.updateForConfiguration(oldValue:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  v3 = &v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_configuration];
  swift_beginAccess();
  *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes) = *v3;
  v4 = *((_QWORD *)v3 + 6);
  v5 = *((_QWORD *)v3 + 7);
  v6 = (uint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture];
  v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture];
  *v6 = v4;
  v6[1] = v5;
  outlined copy of AppIntentExecutor?(v4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  v8 = *((_QWORD *)v3 + 14);
  if (v8)
  {
    v9 = *((_QWORD *)v3 + 13);
    swift_bridgeObjectRetain();
    v10 = (void *)MEMORY[0x18D75CC88](v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(v1, sel_setInteractionActivityTrackingBaseName_, v10);

  v11 = MEMORY[0x18D760234](v3 + 64);
  if (v11)
  {
    v12 = *((_QWORD *)v3 + 9);
    v13 = (uint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState];
    *v13 = v11;
    v13[1] = v12;
    swift_unknownObjectRelease();
  }
  result = static SemanticFeature.isEnabled.getter();
  if ((result & 1) != 0)
  {
    v15 = *((_QWORD *)v3 + 10);
    v16 = *((_QWORD *)v3 + 11);
    v17 = *((_QWORD *)v3 + 12);
    v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = v18;
    v19[3] = v15;
    v19[4] = v16;
    v19[5] = v17;
    outlined copy of AppIntentExecutor?(v15);
    outlined copy of AppIntentExecutor?(v15);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  }
  return result;
}

uint64_t type metadata accessor for HostingScrollView.PlatformGroupContainer()
{
  return objc_opt_self();
}

id HostingScrollView.PlatformGroupContainer.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBounds] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableFillerBounds] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBorder] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__pixelLength] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem] = 0;
  v11.receiver = v4;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_initWithFrame_, a1, a2, a3, a4);
}

CGSize_optional __swiftcall HostingScrollView.makeContainerSize()()
{
  void *v0;
  objc_class *ObjectType;
  double v2;
  double v3;
  Swift::Bool v4;
  objc_super v5;
  CGSize_optional result;

  ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(v0, sel_adjustedContentInset);
  v5.receiver = v0;
  v5.super_class = ObjectType;
  objc_msgSendSuper2(&v5, sel_bounds);
  CGSize.inset(by:)();
  v4 = LOBYTE(v2);
  result.value.height = v3;
  result.value.width = v2;
  result.is_nil = v4;
  return result;
}

void HostingScrollView.PlatformContainer.frame.didset(SEL *a1)
{
  char *v1;
  objc_class *ObjectType;
  void *v4;
  objc_class *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  objc_super v35;
  objc_super v36;
  objc_super v37;
  objc_super v38;
  objc_super v39;
  objc_super v40;
  objc_super v41;
  objc_super v42;
  objc_super v43;
  __C::CGRect v44;
  __C::CGRect v45;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = *(void **)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView];
  v5 = (objc_class *)type metadata accessor for HostingScrollView();
  v43.receiver = v4;
  v43.super_class = v5;
  -[SEL frame](&v43, sel_frame);
  v7 = v6;
  v9 = v8;
  v42.receiver = v1;
  v42.super_class = ObjectType;
  objc_msgSendSuper2(&v42, *a1);
  if (v7 != v11 || v9 != v10)
  {
    v41.receiver = v1;
    v41.super_class = ObjectType;
    objc_msgSendSuper2(&v41, *a1);
    v14 = v13;
    v16 = v15;
    v40.receiver = v4;
    v40.super_class = v5;
    -[SEL frame](&v40, sel_frame);
    v18 = v17;
    v20 = v19;
    v39.receiver = v4;
    v39.super_class = v5;
    -[SEL frame](&v39, sel_frame);
    v22 = v21;
    v24 = v23;
    v38.receiver = v4;
    v38.super_class = v5;
    -[SEL setFrame:](&v38, sel_setFrame_, v18, v20, v14, v16);
    v37.receiver = v4;
    v37.super_class = v5;
    -[SEL bounds](&v37, sel_bounds);
    v26 = v25;
    v28 = v27;
    v36.receiver = v4;
    v36.super_class = v5;
    -[SEL bounds](&v36, sel_bounds);
    v30 = v29;
    v32 = v31;
    v35.receiver = v4;
    v35.super_class = v5;
    -[SEL frame](&v35, sel_frame);
    v45.size.width = v33;
    v45.size.height = v34;
    v44.origin.x = v26;
    v44.origin.y = v28;
    v44.size.width = v22;
    v44.size.height = v24;
    v45.origin.x = v30;
    v45.origin.y = v32;
    ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)(v44, v45);
  }
}

id HostingScrollView.PlatformContainer.init(scrollView:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  int64x2_t *v6;
  int64x2_t v7;
  id v8;
  id v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_safeAreaHelper;
  type metadata accessor for UIView.SafeAreaHelper();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_BYTE *)(v5 + 48) = 1;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_BYTE *)(v5 + 88) = 1;
  *(_QWORD *)&v1[v4] = v5;
  v6 = (int64x2_t *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
  v7 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *v6 = v7;
  v6[1] = v7;
  *(_QWORD *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView] = a1;
  v11.receiver = v1;
  v11.super_class = ObjectType;
  v8 = a1;
  v9 = objc_msgSendSuper2(&v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v9, sel_addSubview_, v8, v11.receiver, v11.super_class);

  return v9;
}

uint64_t HostingScrollView.makeLayoutState()@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  objc_msgSend(v1, sel_adjustedContentInset);
  v6 = v5;
  v8 = v7;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection))
    v9 = v3;
  else
    v9 = v4;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection))
    v10 = v4;
  else
    v10 = v3;
  objc_msgSend(v1, sel_contentOffset);
  v12 = v11;
  v14 = v13;
  objc_msgSend(v1, sel_adjustedContentInset);
  v16 = v15;
  objc_msgSend(v1, sel_adjustedContentInset);
  v18 = v14 + v17;
  result = static EdgeInsets.zero.getter();
  *(double *)a1 = v12 + v16;
  *(double *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v6;
  *(double *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(double *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x8000000000000000;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

Swift::Void __swiftcall HostingScrollView.didMoveToWindow()()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  int *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  _BYTE v42[208];
  _OWORD v43[14];
  _OWORD v44[2];
  objc_super v45;
  _BYTE v46[40];
  _QWORD v47[11];

  v1 = v0;
  v45.receiver = v0;
  v45.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v45, sel_didMoveToWindow);
  v2 = objc_msgSend(v0, sel_window);
  if (v2)
  {

    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
    _UIUpdateCycleRegisterIdleObserver();
    v4 = (int *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties);
    swift_beginAccess();
    if (((v4[32] | v4[26]) & 1) != 0)
    {
      v5 = (void *)MEMORY[0x18D760234](v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
      objc_msgSend(v5, sel_flashScrollIndicators);

    }
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      v6 = &v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_configuration];
      swift_beginAccess();
      v7 = *((_QWORD *)v6 + 10);
      v8 = *((_QWORD *)v6 + 11);
      v9 = *((_QWORD *)v6 + 12);
      v10 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v11 = (_QWORD *)swift_allocObject();
      v11[2] = v10;
      v11[3] = v7;
      v11[4] = v8;
      v11[5] = v9;
      outlined copy of AppIntentExecutor?(v7);
      outlined copy of AppIntentExecutor?(v7);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
    }
    v12 = objc_msgSend(v1, sel_window);
    if (v12)
    {

      v13 = (uint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
      v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 64];
      if ((~v14 & 0xF000000000000004) != 0)
      {
        v39 = v13[6];
        v40 = v13[7];
        v37 = v13[4];
        v38 = v13[5];
        v41 = v4;
        v15 = v13[2];
        v16 = v13[3];
        v18 = v13[1];
        v47[0] = *v13;
        v17 = v47[0];
        v47[1] = v18;
        v47[2] = v15;
        v47[3] = v16;
        v47[4] = v37;
        v47[5] = v38;
        v47[6] = v39;
        v47[7] = v40;
        v47[8] = v14;
        outlined copy of SystemScrollLayoutState.ContentOffsetMode(v14);
        HostingScrollView.updateContext(_:)(v47);
        v19 = v16;
        v4 = v41;
        outlined consume of HostingScrollViewUpdateContext?(v17, v18, v15, v19, v37, v38, v39, v40, v14);
        v20 = *v13;
        v21 = v13[1];
        v22 = v13[2];
        v23 = v13[3];
        v24 = v13[4];
        v25 = v13[5];
        v26 = v13[6];
        v27 = v13[7];
        v28 = v13[8];
        *(_OWORD *)v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        *((_OWORD *)v13 + 2) = 0u;
        *((_OWORD *)v13 + 3) = 0u;
        v13[8] = 0xF000000000000004;
        outlined consume of HostingScrollViewUpdateContext?(v20, v21, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    v29 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
    v43[12] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
    v43[13] = v29;
    v44[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
    v30 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
    v43[8] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
    v43[9] = v30;
    v31 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
    v43[10] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
    v43[11] = v31;
    v32 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
    v43[4] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
    v43[5] = v32;
    v33 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
    v43[6] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
    v43[7] = v33;
    v34 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
    v43[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
    v43[1] = v34;
    v35 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
    v43[2] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
    v43[3] = v35;
    v36 = *(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes);
    outlined init with copy of ScrollEnvironmentProperties(v4, (uint64_t)v42);
    memset(v46, 0, 32);
    v46[32] = 1;
    UIScrollView.updateIndicatorInsets(margins:axes:properties:safeArea:)((uint64_t *)v43, v36, (uint64_t)v42, (uint64_t)v46);
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v42);
  }
  else
  {
    _UIUpdateCycleUnregisterIdleObserver();
  }
}

void partial apply for closure #1 in HostingScrollView.updateContext(_:)()
{
  uint64_t v0;

  closure #1 in HostingScrollView.updateContext(_:)(*(_QWORD *)(v0 + 16));
}

void closure #1 in HostingScrollView.updateContext(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v4 = (void *)v2;
    MEMORY[0x1E0C80A78](v2, v3);
    static Update.ensure<A>(_:)();

  }
}

uint64_t key path getter for EnvironmentValues.tintColor : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

double key path getter for EnvironmentValues.editMode : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

uint64_t EnvironmentValues.editMode.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.tint : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for EnvironmentValues.accessibilityShowButtonShapes : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t EnvironmentValues.listReorderControlVisibility.getter()
{
  return EnvironmentValues.listDeleteControlVisibility.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.isPlatformFocusSystemEnabled.getter()
{
  return EnvironmentValues.isFocused.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsPlatformFocusSystemEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsPlatformFocusSystemEnabled, lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.defaultMinListHeaderHeight : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.defaultMinListHeaderHeight.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t EnvironmentValues.defaultMinListHeaderHeight.getter()
{
  return EnvironmentValues._defaultMinListRowHeight.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>, (uint64_t)&type metadata for DefaultMinListHeaderHeightKey, (uint64_t)&protocol witness table for DefaultMinListHeaderHeightKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>);
}

ValueMetadata *type metadata accessor for EnvironmentValues.SafeAreaTransitionStateKey.Value()
{
  return &type metadata for EnvironmentValues.SafeAreaTransitionStateKey.Value;
}

uint64_t key path getter for EnvironmentValues._defaultMinListRowHeight : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues._defaultMinListRowHeight.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t EnvironmentValues._defaultMinListRowHeight.getter(unint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v4;
  uint64_t v7;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    a4();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    a4();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v7;
}

uint64_t EnvironmentValues._defaultMinListRowHeight.getter()
{
  return EnvironmentValues._defaultMinListRowHeight.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>, (uint64_t)&type metadata for DefaultMinListRowHeightKey, (uint64_t)&protocol witness table for DefaultMinListRowHeightKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.multilineTextAlignment : EnvironmentValues, serialized()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t key path getter for EnvironmentValues.multilineTextAlignment : EnvironmentValues, serialized@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for EnvironmentValues.springLoadingBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.springLoadingBehavior.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.isInExpandedSplitView.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.listStackBehavior : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = EnvironmentValues.listStackBehavior.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.listStackBehavior.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.buttonBorderShape : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>, (uint64_t)&type metadata for ButtonBorderShapeKey, (uint64_t)&protocol witness table for ButtonBorderShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>, (uint64_t)&type metadata for ButtonBorderShapeKey, (uint64_t)&protocol witness table for ButtonBorderShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t EnvironmentValues.buttonBorderShape.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.scrollBehavior.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return outlined init with take of ResolvedScrollBehavior?((uint64_t)&v4, a1);
}

uint64_t key path getter for EnvironmentValues.listRowSpacing : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.listRowSpacing.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t EnvironmentValues.listRowSpacing.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.defaultPadding : EnvironmentValues@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = EnvironmentValues.defaultPadding.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t EnvironmentValues.focusGroupID.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance AccessibilityLargeContentViewerKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t key path getter for EnvironmentValues.listPadding : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  result = EnvironmentValues.listPadding.getter((uint64_t)v11);
  v3 = v12;
  v4 = v13;
  v5 = v14;
  v6 = v15;
  v7 = v16;
  v8 = v17;
  v9 = v18;
  v10 = v19;
  *(_BYTE *)a1 = v11[0];
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  return result;
}

uint64_t EnvironmentValues.listPadding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;

  v4 = *v1;
  v3 = v1[1];
  OptionalEdgeInsets.init()();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListPaddingAnchorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListPaddingAnchorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListPaddingAnchorKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v30 = v57;
  v55 = v4;
  v56 = v3;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v57);
  v27 = v57;
  v26 = v58;
  v29 = v59;
  v28 = v60;
  v25 = v61;
  v5 = v63;
  v23 = v62;
  v24 = v64;
  v6 = v65;
  v7 = v66;
  v8 = v67;
  v9 = v68;
  v10 = v69;
  v11 = v70;
  v12 = v71;
  v13 = v72;
  OptionalEdgeInsets.init()();
  v47 = v6;
  v48 = v7;
  v49 = v8;
  v50 = v9;
  v51 = v10;
  v52 = v11;
  v53 = v12;
  v54 = v13;
  static OptionalEdgeInsets.none.getter();
  v31 = v39;
  v32 = v40;
  v33 = v41;
  v34 = v42;
  v35 = v43;
  v36 = v44;
  v37 = v45;
  v38 = v46;
  result = MEMORY[0x18D7593E8](&v47, &v31);
  *(_BYTE *)a1 = v30;
  v15 = v27;
  if ((result & 1) == 0)
    v15 = v6;
  *(_QWORD *)(a1 + 8) = v15;
  v16 = v26;
  if ((result & 1) == 0)
    v16 = v7;
  *(_BYTE *)(a1 + 16) = v16 & 1;
  v17 = v29;
  if ((result & 1) == 0)
    v17 = v8;
  v18 = v28;
  if ((result & 1) == 0)
    v18 = v9;
  v19 = v25;
  if ((result & 1) == 0)
    v19 = v10;
  v20 = v23;
  if ((result & 1) != 0)
  {
    v21 = v5;
  }
  else
  {
    v20 = v11;
    v21 = v12;
  }
  *(_QWORD *)(a1 + 24) = v17;
  *(_BYTE *)(a1 + 32) = v18 & 1;
  v22 = v24;
  if ((result & 1) == 0)
    v22 = v13;
  *(_QWORD *)(a1 + 40) = v19;
  *(_BYTE *)(a1 + 48) = v20 & 1;
  *(_QWORD *)(a1 + 56) = v21;
  *(_BYTE *)(a1 + 64) = v22 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultFont : EnvironmentValues()
{
  swift_retain();
  return EnvironmentValues.defaultFont.setter();
}

uint64_t key path getter for EnvironmentValues.defaultFont : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.defaultFont.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.colorScheme.getter();
  *a1 = v3;
  return result;
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata completion function for DeleteInteraction()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata completion function for CollectionChanges.Element()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  result = type metadata accessor for Range();
  if (v1 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Range();
    if (v2 <= 0x3F)
    {
      v5 = *(_QWORD *)(result - 8) + 64;
      swift_getTupleTypeLayout2();
      v6 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OpenWindowAction(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

double protocol witness for EventType.timestamp.getter in conformance TouchEvent@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

void ButtonBorderShape._Inset.layoutDirectionBehavior.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

ValueMetadata *type metadata accessor for ButtonBorderShape.Guts()
{
  return &type metadata for ButtonBorderShape.Guts;
}

uint64_t static ButtonBorderShape.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  char v3;

  v2 = *(double *)a1;
  v3 = *(_BYTE *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 1)
    return ((uint64_t (*)(void))((char *)&loc_186F3F9C8 + 4 * byte_187C57900[*(_QWORD *)&v2]))();
  if (v2 != *(double *)a2)
    v3 = 1;
  return (v3 & 1) == 0;
}

ValueMetadata *type metadata accessor for _SizeFittingRoot()
{
  return &type metadata for _SizeFittingRoot;
}

ValueMetadata *type metadata accessor for _EventDirections()
{
  return &type metadata for _EventDirections;
}

void one-time initialization function for vertical()
{
  static _EventDirections.vertical = 12;
}

uint64_t one-time initialization function for all()
{
  int v0;
  char v1;
  uint64_t result;

  if (one-time initialization token for horizontal != -1)
    result = swift_once();
  v0 = static _EventDirections.horizontal;
  if (one-time initialization token for vertical != -1)
    result = swift_once();
  v1 = static _EventDirections.vertical;
  if ((static _EventDirections.vertical & ~v0) == 0)
    v1 = 0;
  static _EventDirections.all = v1 | v0;
  return result;
}

{
  unsigned int v0;
  uint64_t result;

  if (one-time initialization token for horizontal != -1)
    result = swift_once();
  v0 = static SwipeGesture.Direction.horizontal;
  if (one-time initialization token for vertical == -1)
  {
    if (static SwipeGesture.Direction.horizontal >= 0x10u)
      goto LABEL_9;
  }
  else
  {
    result = swift_once();
    if (v0 >= 0x10)
      goto LABEL_9;
  }
  if ((static SwipeGesture.Direction.vertical & ~v0) == 0
    || (v0 |= static SwipeGesture.Direction.vertical, v0 < 0x10))
  {
    static SwipeGesture.Direction.all = v0;
    return result;
  }
LABEL_9:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void one-time initialization function for horizontal()
{
  static _EventDirections.horizontal = 3;
}

ValueMetadata *type metadata accessor for ToolbarPlacement()
{
  return &type metadata for ToolbarPlacement;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SystemScrollView<A>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return static SystemScrollView._makeView(view:inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t type metadata completion function for SystemScrollView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SystemScrollView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SystemScrollView);
}

uint64_t SystemScrollView.init(configuration:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  outlined init with take of ScrollViewConfiguration(a1, a5);
  v10 = a5 + *(int *)(type metadata accessor for SystemScrollView(0, a3, a4, v9) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v10, a2, a3);
}

uint64_t partial apply for closure #6 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = _ViewOutputs.subscript.getter();
  v3 = *MEMORY[0x1E0CFED28];
  if ((result & 0x100000000) == 0)
    v3 = result;
  *(_DWORD *)(a1 + 12) = v3;
  return result;
}

_DWORD *partial apply for closure #10 in static SystemScrollView._makeView(view:inputs:)(_DWORD *result)
{
  uint64_t v1;

  *result = *(_DWORD *)(v1 + 16);
  return result;
}

uint64_t partial apply for closure #7 in static SystemScrollView._makeView(view:inputs:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 16) = *(_DWORD *)(v1 + 16);
  return result;
}

uint64_t partial apply for closure #1 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static SystemScrollView._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t closure #1 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for SystemScrollView(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, (uint64_t)&type metadata for ScrollViewConfiguration, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t partial apply for closure #5 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #5 in static SystemScrollView._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t closure #5 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for SystemScrollView(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SubscriptionView<A, B>(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static SubscriptionView._viewListCount(inputs:)(a1, a2, *(_QWORD *)(a2 + 24), a4, *(_QWORD *)(a2 + 40));
}

uint64_t static SubscriptionView._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  uint64_t v10;

  v5 = *((_DWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 3);
  v8 = *a1;
  v9 = v5;
  v10 = v6;
  return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a5 + 40))(&v8, a3, a5);
}

uint64_t type metadata completion function for SearchFieldState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SearchFieldState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SearchFieldState;
  if (!type metadata singleton initialization cache for SearchFieldState)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ScrollViewReader<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for ScrollViewHelper()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE33E0], MEMORY[0x1E0CE33F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE33B0], MEMORY[0x1E0CE33A8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollEventState()
{
  return &type metadata for ScrollEventState;
}

unint64_t lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3328], MEMORY[0x1E0CE3338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset);
  }
  return result;
}

uint64_t type metadata accessor for RootViewDelegate()
{
  return objc_opt_self();
}

uint64_t RootViewDelegate.hostingView<A>(_:didUpdate:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t ObjectType;
  _QWORD v11[2];

  v4 = *a1;
  v5 = *MEMORY[0x1E0DEEDD8];
  v6 = *a2;
  v7 = a2[1];
  result = MEMORY[0x18D760234](v2 + 24);
  if (result)
  {
    v9 = *(_QWORD *)(v2 + 32);
    ObjectType = swift_getObjectType();
    v11[0] = v6;
    v11[1] = v7;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(v9 + 24))(a1, v11, *(_QWORD *)((v5 & v4) + 0x50), *(_QWORD *)((v5 & v4) + 0x58), ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RootViewDelegate.hostingView<A>(_:didMoveTo:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t ObjectType;

  v5 = *MEMORY[0x1E0DEEDD8] & *a1;
  if (a2)
    GraphHost.addPreference<A>(_:)();
  else
    GraphHost.removePreference<A>(_:)();
  result = MEMORY[0x18D760234](v2 + 24);
  if (result)
  {
    v7 = *(_QWORD *)(v2 + 32);
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v7 + 8))(a1, a2, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RootViewDelegate.hostingView<A>(_:didChangePreferences:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v11;
  uint64_t ObjectType;
  _QWORD v13[3];
  uint64_t v14;
  char v15;
  int v16;

  v4 = *a1;
  v5 = *MEMORY[0x1E0DEEDD8];
  v6 = *a2;
  specialized RootViewDelegate.updateAppFocus<A>(view:)();
  swift_beginAccess();
  v14 = v6;
  PreferenceList.subscript.getter();
  v7 = *(_DWORD *)(v2 + 16);
  if (v7 == -1 || v16 == -1 || v7 != v16)
  {
    *(_DWORD *)(v2 + 16) = v16;
    LOBYTE(v14) = v15;
    _UIHostingView.colorScheme.setter(&v14);
  }
  swift_endAccess();
  result = MEMORY[0x18D760234](v2 + 24);
  if (result)
  {
    v11 = *(_QWORD *)(v2 + 32);
    ObjectType = swift_getObjectType();
    v13[0] = v6;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(v11 + 32))(a1, v13, *(_QWORD *)((v5 & v4) + 0x50), *(_QWORD *)((v5 & v4) + 0x58), ObjectType, v11);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RootViewDelegate.hostingView<A>(_:willUpdate:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;
  char v10;

  v5 = *a1;
  v6 = *MEMORY[0x1E0DEEDD8];
  _UIHostingView.colorScheme.getter(&v10);
  EnvironmentValues.explicitPreferredColorScheme.setter();
  result = MEMORY[0x18D760234](v2 + 24);
  if (result)
  {
    v8 = *(_QWORD *)(v2 + 32);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 16))(a1, a2, *(_QWORD *)((v6 & v5) + 0x50), *(_QWORD *)((v6 & v5) + 0x58), ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

void base witness table accessor for _AttributeBody in PreferenceBinder<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceBinder<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreferenceBinder<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t destroy for PreferenceBinder(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v1 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFFCLL;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  return result;
}

_DWORD *initializeWithCopy for PreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  size_t v17;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_QWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (uint64_t *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = *v8;
  *(_QWORD *)((char *)v7 + 5) = *(uint64_t *)((char *)v8 + 5);
  *v7 = v9;
  v10 = (_DWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (void *)(((unint64_t)v10 + v14 + 4) & ~v14);
  v16 = (const void *)(((unint64_t)v11 + v14 + 4) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v13 + 84))
      v17 = *(_QWORD *)(v13 + 64);
    else
      v17 = *(_QWORD *)(v13 + 64) + 1;
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v15, v16, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t type metadata completion function for PreferenceBinder()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for PreferenceBinder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreferenceBinder);
}

uint64_t PreferenceBinder.init(modifier:keyValue:phase:cycleDetector:lastResetSeed:lastValue:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v11 = *(_DWORD *)(a4 + 8);
  v12 = *(_BYTE *)(a4 + 12);
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 12) = *(_QWORD *)a4;
  *(_DWORD *)(a9 + 20) = v11;
  *(_BYTE *)(a9 + 24) = v12;
  *(_DWORD *)(a9 + 28) = a5;
  v13 = a9 + *(int *)(type metadata accessor for PreferenceBinder(0, a7, a8, a10) + 60);
  swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a6, v14);
}

uint64_t partial apply for closure #2 in PreferenceBinder.updateValue()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 40))(v0 + ((v1 + 56) & ~v1));
}

uint64_t closure #1 in PreferenceBinder.updateValue()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (**a4)()@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v8 = (uint64_t *)type metadata accessor for PreferenceBinder(0, a1, a2, a3);
  v9 = specialized PreferenceBinder.modifier.getter(v8);
  v11 = v10;
  v12 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v12 + 2) = a1;
  *((_QWORD *)v12 + 3) = a2;
  *((_QWORD *)v12 + 4) = a3;
  *((_QWORD *)v12 + 5) = v9;
  *((_QWORD *)v12 + 6) = v11;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ());
  a4[1] = v12;
  return swift_retain();
}

uint64_t PreferenceBinder.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t Value;
  char v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *);
  char *v36;
  char *v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(uint64_t, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t (*v49)(char *, uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  void (*v63)(char *, _QWORD, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t TupleTypeMetadata2;
  char *v76;
  uint64_t v77;
  char *v78;
  __int128 v79;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v77 = a1;
  v73 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v71 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v76 = (char *)&v63 - v7;
  v8 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v70 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v63 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v63 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v72 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v63 - v26;
  v28 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v28 != *(_DWORD *)(v1 + 28))
  {
    *(_DWORD *)(v1 + 28) = v28;
    *(_QWORD *)(v1 + 16) = 0xFFFFFFFFLL;
    *(_BYTE *)(v1 + 24) = 0;
    v29 = v1 + *(int *)(v77 + 60);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v29, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v29, 1, 1, AssociatedTypeWitness);
  }
  v74 = v8;
  Value = AGGraphGetValue();
  v32 = v31;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v78 = v27;
  v33(v27, Value, AssociatedTypeWitness);
  if ((v32 & 1) == 0)
    goto LABEL_14;
  v67 = v3;
  v34 = v74;
  v35 = *(void (**)(char *))(v74 + 16);
  v64 = (char *)(v1 + *(int *)(v77 + 60));
  v65 = v1;
  v35(v19);
  v66 = (void (*)(uint64_t, char *, uint64_t))v33;
  v33(v15, (uint64_t)v78, AssociatedTypeWitness);
  v63 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v63(v15, 0, 1, AssociatedTypeWitness);
  v36 = v76;
  v37 = &v76[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v35)(v76, v19, v5);
  ((void (*)(char *, char *, uint64_t))v35)(v37, v15, v5);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v39 = v38(v36, 1, AssociatedTypeWitness);
  v69 = v20;
  if (v39 == 1)
  {
    v40 = *(void (**)(char *, uint64_t))(v34 + 8);
    v40(v15, v5);
    v40(v19, v5);
    if (v38(v37, 1, AssociatedTypeWitness) == 1)
    {
      v40(v76, v5);
      v20 = v69;
LABEL_14:
      v49 = *(uint64_t (**)(char *, uint64_t))(v20 + 8);
      return v49(v78, AssociatedTypeWitness);
    }
    v43 = v67;
    v44 = v76;
    goto LABEL_10;
  }
  v41 = v70;
  ((void (*)(char *, char *, uint64_t))v35)(v70, v36, v5);
  if (v38(v37, 1, AssociatedTypeWitness) == 1)
  {
    v42 = v41;
    v40 = *(void (**)(char *, uint64_t))(v74 + 8);
    v40(v15, v5);
    v40(v19, v5);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v42, AssociatedTypeWitness);
    v43 = v67;
    v44 = v36;
LABEL_10:
    (*(void (**)(char *, uint64_t))(v71 + 8))(v44, TupleTypeMetadata2);
    v45 = v66;
    goto LABEL_12;
  }
  v46 = v69;
  v47 = v72;
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v72, v37, AssociatedTypeWitness);
  v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  v49 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
  v49(v47, AssociatedTypeWitness);
  v50 = v41;
  v40 = *(void (**)(char *, uint64_t))(v74 + 8);
  v40(v15, v5);
  v40(v19, v5);
  v49(v50, AssociatedTypeWitness);
  v40(v36, v5);
  v45 = v66;
  v43 = v67;
  if ((v48 & 1) == 0)
  {
LABEL_12:
    v51 = v64;
    v40(v64, v5);
    v45((uint64_t)v51, v78, AssociatedTypeWitness);
    v52 = ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v63)(v51, 0, 1, AssociatedTypeWitness);
    MEMORY[0x1E0C80A78](v52, v53);
    *(&v63 - 4) = v73;
    *(&v63 - 3) = (void (*)(char *, _QWORD, uint64_t, uint64_t))v43;
    v54 = *(_QWORD *)(v77 + 32);
    *(&v63 - 2) = (void (*)(char *, _QWORD, uint64_t, uint64_t))v54;
    v55 = UpdateCycleDetector.dispatch(label:isDebug:)();
    v20 = v69;
    if ((v55 & 1) != 0)
    {
      AGGraphClearUpdate();
      v56 = (uint64_t)v73;
      closure #1 in PreferenceBinder.updateValue()((uint64_t)v73, v43, v54, (uint64_t (**)())&v79);
      AGGraphSetUpdate();
      v57 = swift_allocObject();
      *(_QWORD *)(v57 + 16) = v56;
      *(_QWORD *)(v57 + 24) = v43;
      *(_QWORD *)(v57 + 32) = v54;
      *(_OWORD *)(v57 + 40) = v79;
      v58 = v72;
      v45((uint64_t)v72, v78, AssociatedTypeWitness);
      v59 = v43;
      v60 = (*(unsigned __int8 *)(v20 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
      v61 = (char *)swift_allocObject();
      *((_QWORD *)v61 + 2) = v56;
      *((_QWORD *)v61 + 3) = v59;
      *((_QWORD *)v61 + 4) = v54;
      *((_QWORD *)v61 + 5) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ());
      *((_QWORD *)v61 + 6) = v57;
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v61[v60], v58, AssociatedTypeWitness);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
    }
    goto LABEL_14;
  }
  return v49(v78, AssociatedTypeWitness);
}

Swift::Void __swiftcall PlatformViewHost.updateSafeAreaInsets(_:)(UIEdgeInsets_optional *a1)
{
  uint64_t v1;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  UIView.SafeAreaHelper.updateSafeAreaInsets<A>(_:delegate:)((uint64_t)a1, v1, ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PlatformViewHost<A>.UnarySubtreeSequence()
{
  return swift_getOpaqueTypeConformance2();
}

void partial apply for closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)()
{
  uint64_t v0;

  closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
}

void closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v7 = a1 + 16;
  swift_beginAccess();
  v8 = (void *)MEMORY[0x18D760234](v7);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, sel__noWarn_setOverrideTraitCollection_forChild_, a2, a3);

  }
  objc_msgSend(a3, sel_updateTraitsIfNeeded);
  if ((a4 & 1) != 0)
  {
    swift_beginAccess();
    v10 = (void *)MEMORY[0x18D760234](v7);
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v10, sel_setNeedsStatusBarAppearanceUpdate);

    }
  }
}

void PlatformViewHost._safeAreaInsets.setter(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  double *v5;

  v5 = (double *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA8));
  *v5 = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
}

void type metadata completion function for PlatformItemList.Item()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t PlatformItemList.mergedContentItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  char v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char v54;
  uint64_t v55;
  void *v56;
  void *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  char *v119;
  _BYTE *v120;
  uint64_t v121;
  unint64_t v122;
  unsigned __int8 v123;
  __int128 v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  char v128;
  __int128 v129;
  __int128 v130;
  char v131;
  char v132;
  __int16 v133;
  _BYTE v134[184];
  __n128 v135;
  __int128 v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  char v140;
  __int128 v141;
  __int128 v142;
  char v143;
  char v144;
  __int16 v145;
  uint64_t v146;
  __int128 v147[4];
  char v148;
  id v149;
  char v150;
  __int128 v151;
  uint64_t v152;
  char v153;
  __int128 v154;
  char v155;
  __int128 v156;
  __int128 v157;
  char v158;
  char v159;
  __int16 v160;
  uint64_t v161;
  _BYTE v162[200];

  v4 = (int *)type metadata accessor for PlatformItemList.Item();
  v5 = *((_QWORD *)v4 - 1);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v101 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v112 = (uint64_t)&v101 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v107 = (uint64_t)&v101 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v115 = (uint64_t)&v101 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v101 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v121 = (uint64_t)&v101 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v101 - v31;
  if (*(_QWORD *)(a1 + 16) == 1)
    return outlined init with copy of PlatformItemList.Item(a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
  v117 = *(_QWORD *)(a1 + 16);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v162);
  outlined init with take of Image.Resolved?((uint64_t)v162, (uint64_t)&v149, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v147[0] = xmmword_187BF9840;
  memset(&v147[1], 0, 48);
  v148 = 0;
  v135 = 0uLL;
  *(_QWORD *)&v136 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)&v149, v147, &v135, 0, 0, (uint64_t)v32);
  if (v117)
  {
    v102 = v8;
    v104 = a2;
    v34 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v116 = *(_QWORD *)(v5 + 72);
    v108 = v112 + 64;
    v109 = v115 + 64;
    v119 = v32 + 64;
    v120 = v32 + 521;
    v113 = v25 + 64;
    v114 = v25 + 521;
    v118 = v32 + 528;
    swift_bridgeObjectRetain();
    v35 = a1;
    v36 = 0;
    v103 = v35;
    v101 = v34;
    v105 = v35 + v34;
    v37 = -1;
    v106 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v110 = v4;
    v111 = v12;
LABEL_5:
    v38 = 0;
    v39 = v105 + v116 * v36++;
    while (1)
    {
      v40 = v121;
      outlined init with copy of PlatformItemList.Item(v39, v121);
      result = outlined init with copy of PlatformItemList.Item(v40, (uint64_t)v25);
      if ((v38 & 1) != 0)
      {
        v41 = __OFSUB__(v37--, 1);
        if (v41)
          goto LABEL_89;
        v42 = *((_QWORD *)v25 + 5);
        v41 = __OFSUB__(v42, 1);
        v43 = v42 - 1;
        if (v41)
          goto LABEL_90;
        *((_QWORD *)v25 + 5) = v43;
        if (v37 < 0)
          goto LABEL_17;
      }
      else if (v37 < 0)
      {
        goto LABEL_17;
      }
      if (__OFADD__(v37, 1))
        goto LABEL_88;
      if (*((_QWORD *)v25 + 5) == v37 + 1)
      {
        if (!*(_QWORD *)v32)
        {
          v46 = *(void **)v25;
          if (*(_QWORD *)v25)
          {
            v38 = 1;
            *(_QWORD *)v32 = v46;
            goto LABEL_35;
          }
        }
        outlined init with copy of PlatformItemList.Item((uint64_t)v32, v115);
        v44 = MEMORY[0x1E0CE7280];
        outlined init with take of Image.Resolved?(v109, (uint64_t)v147, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
        outlined init with take of Image.Resolved?((uint64_t)v147, (uint64_t)&v149, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v44);
        if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v149) == 1)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v115, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          v45 = v112;
        }
        else
        {
          if (v161)
          {
            outlined retain of Image.Resolved?((uint64_t)v147, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
            swift_unknownObjectRetain();
            objc_opt_self();
            v47 = (void *)swift_dynamicCastObjCClassUnconditional();
            v48 = v107;
            outlined init with copy of PlatformItemList.Item(v115, v107);
            if (v47)
            {
              outlined retain of Image.Resolved?((uint64_t)v147, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v48, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v115, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);

              goto LABEL_75;
            }
          }
          else
          {
            outlined init with take of Image.Resolved?((uint64_t)v147, (uint64_t)&v135, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
            outlined retain of Image.Resolved((uint64_t)&v135);
            v48 = v107;
            outlined init with copy of PlatformItemList.Item(v115, v107);
          }
          v49 = v149;
          v50 = v150;
          v135.n128_u64[0] = (unint64_t)v149;
          v135.n128_u8[8] = v150;
          v136 = v151;
          v137 = v152;
          v138 = v153;
          v139 = v154;
          v140 = v155;
          v141 = v156;
          v142 = v157;
          v143 = v158;
          v144 = v159;
          v145 = v160;
          v51 = *(_QWORD *)(v48 + 48);
          outlined copy of GraphicsImage.Contents?(v149, v150);
          v52 = (void *)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v51);
          outlined retain of Image.Resolved?((uint64_t)v147, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
          v53 = v49;
          v54 = v50;
          v12 = v111;
          v45 = v112;
          outlined consume of GraphicsImage.Contents?(v53, v54);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v48, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v115, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);

          if (v52)
            goto LABEL_75;
        }
        outlined init with copy of PlatformItemList.Item((uint64_t)v25, v45);
        v55 = MEMORY[0x1E0CE7280];
        outlined init with take of Image.Resolved?(v108, (uint64_t)v134, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
        outlined init with take of Image.Resolved?((uint64_t)v134, (uint64_t)&v135, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
        if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v135) == 1)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
LABEL_75:
          v95 = (uint64_t)v102;
          outlined init with copy of PlatformItemList.Item((uint64_t)v25, (uint64_t)v102);
          v96 = v106;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96[2] + 1, 1, v96);
          v4 = v110;
          v98 = v96[2];
          v97 = v96[3];
          v106 = v96;
          if (v98 >= v97 >> 1)
            v106 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1, v106);
          v99 = v106;
          v106[2] = v98 + 1;
          outlined init with take of PlatformItemList.Item(v95, (uint64_t)v99 + v101 + v98 * v116);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          v37 = *(_QWORD *)(v121 + 40);
          result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v121, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          if (v117 != v36)
          {
            if (v36 < v117)
              goto LABEL_5;
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            return result;
          }
LABEL_82:
          swift_bridgeObjectRelease();
          a2 = v104;
          v100 = v106;
          if (!v106[2])
            goto LABEL_85;
LABEL_83:
          swift_bridgeObjectRelease();
          *((_QWORD *)v32 + 78) = v100;
          outlined consume of PlatformItemList.Item.SystemItem?(*((void **)v32 + 37), *((_QWORD *)v32 + 38), *((_QWORD *)v32 + 39), *((_QWORD *)v32 + 40), *((_QWORD *)v32 + 41), *((_QWORD *)v32 + 42), *((_QWORD *)v32 + 43), *((_QWORD *)v32 + 44), *((_QWORD *)v32 + 45), *((_QWORD *)v32 + 46), *((_QWORD *)v32 + 47), *((_QWORD *)v32 + 48), *((_QWORD *)v32 + 49));
          *((_QWORD *)v32 + 37) = 3;
          *((_QWORD *)v32 + 38) = 0;
          *((_QWORD *)v32 + 39) = 0;
          *((_QWORD *)v32 + 40) = 0;
          *((_QWORD *)v32 + 41) = 0xC000000000000000;
          *((_OWORD *)v32 + 21) = 0u;
          *((_OWORD *)v32 + 22) = 0u;
          *((_OWORD *)v32 + 23) = 0u;
          *((_OWORD *)v32 + 24) = 0u;
          return outlined init with take of PlatformItemList.Item((uint64_t)v32, a2);
        }
        if (v146)
        {
          outlined retain of Image.Resolved?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
          swift_unknownObjectRetain();
          objc_opt_self();
          v56 = (void *)swift_dynamicCastObjCClassUnconditional();
          outlined init with copy of PlatformItemList.Item(v45, (uint64_t)v12);
          if (v56)
          {
            outlined retain of Image.Resolved?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            goto LABEL_33;
          }
        }
        else
        {
          outlined init with take of Image.Resolved?((uint64_t)v134, (uint64_t)&v122, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
          outlined retain of Image.Resolved((uint64_t)&v122);
          outlined init with copy of PlatformItemList.Item(v45, (uint64_t)v12);
        }
        v57 = (void *)v135.n128_u64[0];
        v58 = v135.n128_i8[8];
        v122 = v135.n128_u64[0];
        v123 = v135.n128_u8[8];
        v124 = v136;
        v125 = v137;
        v126 = v138;
        v127 = v139;
        v128 = v140;
        v129 = v141;
        v130 = v142;
        v131 = v143;
        v132 = v144;
        v133 = v145;
        v59 = *((_QWORD *)v111 + 6);
        outlined copy of GraphicsImage.Contents?((id)v135.n128_u64[0], v135.n128_i8[8]);
        v60 = v59;
        v12 = v111;
        v56 = (void *)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v60);
        outlined retain of Image.Resolved?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
        outlined consume of GraphicsImage.Contents?(v57, v58);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v112, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if (!v56)
          goto LABEL_75;
LABEL_33:

        v38 = 1;
        v4 = v110;
        if (!*(_QWORD *)v32)
        {
LABEL_34:
          v46 = *(void **)v25;
          *(_QWORD *)v32 = *(_QWORD *)v25;
          goto LABEL_35;
        }
        goto LABEL_18;
      }
LABEL_17:
      v38 = 0;
      if (!*(_QWORD *)v32)
        goto LABEL_34;
LABEL_18:
      if (*((_QWORD *)v32 + 1))
        goto LABEL_36;
      v46 = *(void **)v25;
      *((_QWORD *)v32 + 1) = *(_QWORD *)v25;
LABEL_35:
      v61 = v46;
LABEL_36:
      if (*v120 == 1)
      {
        v62 = *v114;
        v32[520] = v25[520];
        *v120 = v62;
      }
      v63 = MEMORY[0x1E0CE7280];
      outlined init with take of Image.Resolved?((uint64_t)v119, (uint64_t)v147, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
      outlined init with take of Image.Resolved?((uint64_t)v147, (uint64_t)&v149, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v63);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v149) == 1)
      {
        outlined init with take of Image.Resolved?((uint64_t)v113, (uint64_t)&v135, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v63);
        outlined init with take of Image.Resolved?((uint64_t)&v135, (uint64_t)v119, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v63);
        outlined retain of Image.Resolved?((uint64_t)&v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        if (!*((_QWORD *)v32 + 6))
          goto LABEL_40;
      }
      else if (!*((_QWORD *)v32 + 6))
      {
LABEL_40:
        *((_QWORD *)v32 + 6) = *((_QWORD *)v25 + 6);
        swift_retain();
        if (*((_QWORD *)v32 + 32))
          goto LABEL_44;
LABEL_41:
        v64 = *((_QWORD *)v25 + 31);
        v65 = *((_QWORD *)v25 + 32);
        v66 = (void *)*((_QWORD *)v25 + 33);
        v67 = *((_QWORD *)v25 + 34);
        v68 = *((_QWORD *)v25 + 35);
        v69 = *((_QWORD *)v25 + 36);
        *((_QWORD *)v32 + 31) = v64;
        *((_QWORD *)v32 + 32) = v65;
        *((_QWORD *)v32 + 33) = v66;
        *((_QWORD *)v32 + 34) = v67;
        *((_QWORD *)v32 + 35) = v68;
        *((_QWORD *)v32 + 36) = v69;
        outlined copy of Image.NamedResolved?(v64, v65, v66);
        goto LABEL_44;
      }
      if (!*((_QWORD *)v32 + 32))
        goto LABEL_41;
LABEL_44:
      v70 = *((_QWORD *)v25 + 66);
      if (*v118)
      {
        if (v70)
        {
          v135.n128_u64[0] = *((_QWORD *)v25 + 66);
          AccessibilityProperties.merge(with:)((uint64_t *)&v135);
        }
        if (!*((_QWORD *)v32 + 77))
        {
LABEL_67:
          *((_QWORD *)v32 + 77) = *((_QWORD *)v25 + 77);
          swift_bridgeObjectRetain();
          if (*((_QWORD *)v32 + 78))
            goto LABEL_49;
          goto LABEL_68;
        }
      }
      else
      {
        v88 = *((_QWORD *)v25 + 67);
        v89 = *((_QWORD *)v25 + 68);
        *((_QWORD *)v32 + 66) = v70;
        *((_QWORD *)v32 + 67) = v88;
        *((_QWORD *)v32 + 68) = v89;
        outlined copy of PlatformItemList.Item.Accessibility?(v70);
        if (!*((_QWORD *)v32 + 77))
          goto LABEL_67;
      }
      if (*((_QWORD *)v32 + 78))
        goto LABEL_49;
LABEL_68:
      *((_QWORD *)v32 + 78) = *((_QWORD *)v25 + 78);
      swift_bridgeObjectRetain();
LABEL_49:
      if (*((_QWORD *)v32 + 41) >> 2 == 0xFFFFFFFFLL)
      {
        v71 = (void *)*((_QWORD *)v25 + 37);
        v72 = *((_QWORD *)v25 + 38);
        v73 = *((_QWORD *)v25 + 39);
        v74 = *((_QWORD *)v25 + 40);
        v75 = *((_QWORD *)v25 + 41);
        v76 = *((_QWORD *)v25 + 42);
        v77 = *((_QWORD *)v25 + 43);
        v78 = *((_QWORD *)v25 + 44);
        v79 = *((_QWORD *)v25 + 45);
        v80 = *((_QWORD *)v25 + 46);
        v81 = *((_QWORD *)v25 + 47);
        v82 = *((_QWORD *)v25 + 48);
        v83 = *((_QWORD *)v25 + 49);
        *((_QWORD *)v32 + 37) = v71;
        *((_QWORD *)v32 + 38) = v72;
        *((_QWORD *)v32 + 39) = v73;
        *((_QWORD *)v32 + 40) = v74;
        *((_QWORD *)v32 + 41) = v75;
        *((_QWORD *)v32 + 42) = v76;
        *((_QWORD *)v32 + 43) = v77;
        *((_QWORD *)v32 + 44) = v78;
        *((_QWORD *)v32 + 45) = v79;
        *((_QWORD *)v32 + 46) = v80;
        *((_QWORD *)v32 + 47) = v81;
        *((_QWORD *)v32 + 48) = v82;
        *((_QWORD *)v32 + 49) = v83;
        outlined copy of PlatformItemList.Item.SystemItem?(v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83);
      }
      v84 = v4[33];
      if (*(_QWORD *)&v32[v84])
      {
        if (*((_QWORD *)v32 + 72))
          goto LABEL_53;
      }
      else
      {
        *(_QWORD *)&v32[v84] = *(_QWORD *)&v25[v84];
        swift_retain();
        if (*((_QWORD *)v32 + 72))
        {
LABEL_53:
          if (*((_QWORD *)v32 + 3))
            goto LABEL_54;
          goto LABEL_71;
        }
      }
      v90 = (void *)*((_QWORD *)v25 + 72);
      *((_QWORD *)v32 + 72) = v90;
      v91 = v90;
      if (*((_QWORD *)v32 + 3))
      {
LABEL_54:
        if (!*((_QWORD *)v32 + 74))
          goto LABEL_72;
        goto LABEL_55;
      }
LABEL_71:
      v92 = *((_QWORD *)v25 + 3);
      *((_QWORD *)v32 + 2) = *((_QWORD *)v25 + 2);
      *((_QWORD *)v32 + 3) = v92;
      swift_bridgeObjectRetain();
      if (!*((_QWORD *)v32 + 74))
      {
LABEL_72:
        v93 = *((_QWORD *)v25 + 74);
        *((_QWORD *)v32 + 73) = *((_QWORD *)v25 + 73);
        *((_QWORD *)v32 + 74) = v93;
        swift_bridgeObjectRetain();
        if (*((_QWORD *)v32 + 76))
          goto LABEL_56;
        goto LABEL_73;
      }
LABEL_55:
      if (*((_QWORD *)v32 + 76))
        goto LABEL_56;
LABEL_73:
      v94 = *((_QWORD *)v25 + 76);
      *((_QWORD *)v32 + 75) = *((_QWORD *)v25 + 75);
      *((_QWORD *)v32 + 76) = v94;
      swift_bridgeObjectRetain();
LABEL_56:
      v85 = v4[31];
      if (v32[v85] == 2)
        v32[v85] = v25[v85];
      v86 = v4[32];
      if (!v32[v86])
        v32[v86] = v25[v86];
      if (v32[633] == 5)
        v32[633] = v25[633];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v37 = *(_QWORD *)(v121 + 40);
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v121, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (v117 == v36)
        goto LABEL_82;
      v39 += v116;
      if (v36++ >= v117)
        goto LABEL_87;
    }
  }
  v100 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_83;
LABEL_85:
  swift_bridgeObjectRelease();
  return outlined init with take of PlatformItemList.Item((uint64_t)v32, a2);
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle;
  if (!lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainButtonStyle, &type metadata for PlainButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in PlainButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in PagingScrollView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void storeEnumTagSinglePayload for PagingScrollView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_BYTE *assignWithCopy for SearchCustomScopeBarModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t type metadata completion function for PagingScrollView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t PagingScrollView.init(behavior:axis:content:)@<X0>(_BYTE *a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  *a7 = *a1;
  a7[1] = a2 & 1;
  type metadata accessor for PagingScrollView(0, a5, a6, a4);
  return a3();
}

uint64_t partial apply for closure #1 in PagingScrollView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PagingScrollView.body.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t closure #1 in PagingScrollView.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];

  v6 = type metadata accessor for ModifiedContent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v19 - v13;
  type metadata accessor for PagingScrollView(0, a1, a2, v15);
  View.scrollTargetLayout(isEnabled:)(1, a1, a2);
  v19[0] = a2;
  v19[1] = &protocol witness table for ScrollTargetModifier;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v19);
  static ViewBuilder.buildExpression<A>(_:)(v10, v6, v16);
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, v6, a3);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v6);
}

uint64_t PagingScrollView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD v33[2];
  char v34;
  char v35;
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[4];

  v29 = a2;
  v27 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for ModifiedContent();
  v5 = *(_QWORD *)(a1 + 24);
  v45[0] = v5;
  v45[1] = &protocol witness table for ScrollTargetModifier;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v45);
  v8 = type metadata accessor for SystemScrollViewContainer(0, v4, v6, v7);
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v26 - v10;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ScrollBehaviorModifier<PagingScrollViewBehavior>, (uint64_t)&unk_1E1AE59E8, (uint64_t)&protocol witness table for PagingScrollViewBehavior, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ScrollBehaviorModifier);
  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v26 - v19;
  v34 = 1 << v2[1];
  v35 = 1;
  v36 = 0u;
  v37 = 0u;
  v38 = 2;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  swift_unknownObjectWeakInit();
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v30 = v27;
  v31 = v5;
  v32 = v2;
  SystemScrollViewContainer.init(configuration:content:)((uint64_t)&v34, (uint64_t (*)(void))partial apply for closure #1 in PagingScrollView.body.getter, v4, v6, (uint64_t)v11);
  v21 = *v2;
  v34 = v2[1];
  v35 = v21;
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>, v8);
  View.scrollTargetBehavior<A>(_:)((uint64_t)&v34, v8, (uint64_t)&unk_1E1AE59E8, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v8);
  v33[0] = v22;
  v33[1] = &protocol witness table for ScrollBehaviorModifier<A>;
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v33);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v23);
  v24 = *(void (**)(char *, uint64_t))(v13 + 8);
  v24(v16, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v12, v29);
  return ((uint64_t (*)(char *, uint64_t))v24)(v20, v12);
}

ValueMetadata *type metadata accessor for PageTabViewStyle()
{
  return &type metadata for PageTabViewStyle;
}

ValueMetadata *type metadata accessor for PageTabViewStyle.IndexDisplayMode()
{
  return &type metadata for PageTabViewStyle.IndexDisplayMode;
}

ValueMetadata *type metadata accessor for MenuSectionStyle()
{
  return &type metadata for MenuSectionStyle;
}

unint64_t lazy protocol witness table accessor for type MenuSectionStyle and conformance MenuSectionStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuSectionStyle and conformance MenuSectionStyle;
  if (!lazy protocol witness table cache variable for type MenuSectionStyle and conformance MenuSectionStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuSectionStyle, &type metadata for MenuSectionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuSectionStyle and conformance MenuSectionStyle);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6, unint64_t *a7)
{
  return specialized static ViewAlias._viewListCount(inputs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4, a5, a6, a7);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ListStyleContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ListStyleContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent, (uint64_t)&type metadata for ListStyleContent, &lazy protocol witness table cache variable for type SourceInput<ListStyleContent> and conformance SourceInput<A>);
}

uint64_t type metadata accessor for ListBatchUpdates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListBatchUpdates);
}

void ListBatchUpdates.endIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v0 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v1 = type metadata accessor for CountingIndex();
  v2 = MEMORY[0x1E0CE1E60];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v0);
  MEMORY[0x18D75FFDC](v2, v1);
  type metadata accessor for ListUpdate();
}

ValueMetadata *type metadata accessor for LazyVStackLayout()
{
  return &type metadata for LazyVStackLayout;
}

unint64_t lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVStackLayout, &type metadata for LazyVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVStackLayout, &type metadata for LazyVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVStackLayout, &type metadata for LazyVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for LazyVStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyVStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static IncrementalLayout._makeView(root:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

unint64_t protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyVStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9, __int128 a10, void (*a11)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), char a12)
{
  uint64_t v12;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE __dst[304];
  _OWORD v26[9];

  memcpy(__dst, __src, 0x129uLL);
  v19 = a7[5];
  v26[4] = a7[4];
  v26[5] = v19;
  v20 = a7[7];
  v26[6] = a7[6];
  v26[7] = v20;
  v21 = a7[1];
  v26[0] = *a7;
  v26[1] = v21;
  v22 = a7[3];
  v26[2] = a7[2];
  v26[3] = v22;
  return specialized IncrementalStack<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)(a2, a3, a4, a5, (uint64_t)__dst, a6, (uint64_t)v26, *(_QWORD *)v12, a8, *(_QWORD *)(v12 + 8), *(unsigned __int8 *)(v12 + 16) | ((unint64_t)*(unsigned int *)(v12 + 20) << 32), a10, *((double (**)(uint64_t, double, double, double, double, double, double, double, double))&a10 + 1), a11, a12);
}

unint64_t protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyVStackLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  __int128 v10;

  *((_QWORD *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:);
  *(_QWORD *)&v10 = &unk_1E1B24560;
  return protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyVStackLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.placementOfNearbyChild(_:children:context:state:), 1);
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyVStackLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD))specialized IncrementalStack<>.sizeThatFits(proposedSize:children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyVStackLayout@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _OWORD *a4@<X3>, void (*a5)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, unint64_t)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[5];
  _BYTE __dst[304];
  _OWORD v20[8];

  memcpy(__dst, __src, 0x129uLL);
  v12 = a4[5];
  v20[4] = a4[4];
  v20[5] = v12;
  v13 = a4[7];
  v20[6] = a4[6];
  v20[7] = v13;
  v14 = a4[1];
  v20[0] = *a4;
  v20[1] = v14;
  v15 = a4[3];
  v20[2] = a4[2];
  v20[3] = v15;
  v16 = *(unsigned int *)(v6 + 20);
  LOBYTE(v18[0]) = *(_BYTE *)(v6 + 16);
  a5(v18, a2, a3, __dst, v20, *(_QWORD *)v6, *(_QWORD *)(v6 + 8), LOBYTE(v18[0]) | (unint64_t)(v16 << 32));
  return outlined init with take of CGRect?((uint64_t)v18, a6);
}

void protocol witness for IncrementalLayout.pinnedViews.getter in conformance LazyVStackLayout(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 20);
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyVStackLayout(uint64_t a1, const void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, unint64_t))
{
  uint64_t v6;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE __dst[304];
  _OWORD v16[8];

  memcpy(__dst, a2, 0x129uLL);
  v10 = a3[5];
  v16[4] = a3[4];
  v16[5] = v10;
  v11 = a3[7];
  v16[6] = a3[6];
  v16[7] = v11;
  v12 = a3[1];
  v16[0] = *a3;
  v16[1] = v12;
  v13 = a3[3];
  v16[2] = a3[2];
  v16[3] = v13;
  return a6(a1, __dst, v16, *(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(unsigned __int8 *)(v6 + 16) | ((unint64_t)*(unsigned int *)(v6 + 20) << 32));
}

unint64_t lazy protocol witness table accessor for type KeyboardShortcut and conformance KeyboardShortcut()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut;
  if (!lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyboardShortcut, &type metadata for KeyboardShortcut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut;
  if (!lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyboardShortcut, &type metadata for KeyboardShortcut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut);
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorStorage()
{
  return &type metadata for InspectorStorage;
}

uint64_t specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(double *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t result;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double *v46;
  BOOL v47;
  _QWORD v48[2];
  double *v49;
  double *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[88];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  double v70;

  v68 = a3;
  v69 = a9;
  v70 = a10;
  v64 = a6;
  v65 = a7;
  v66 = a8 & 1;
  v67 = HIDWORD(a8);
  v63 = 0;
  *(double *)&result = COERCE_DOUBLE(swift_allocObject());
  *(_BYTE *)(result + 16) = 0;
  v18 = *a1;
  v19 = *(_QWORD *)(*(_QWORD *)(a5 + 112) + 16);
  v21 = *(_QWORD *)(a5 + 48);
  v20 = *(_QWORD *)(a5 + 56);
  if (v21 != v20
    && *(_BYTE *)(a5 + 24) != 1
    && *(_QWORD *)a5 == a3
    && *(double *)(a5 + 8) == a9
    && *(double *)(a5 + 16) == a10)
  {
    *a2 = v21;
    v63 = v20;
    v18 = *(double *)(a5 + 64);
    if (v21 >= a3)
    {
      *(_BYTE *)(result + 16) = 1;
      if (__OFSUB__(v21, a3))
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      *a2 = v21 - a3;
      v21 -= a3;
    }
    if (__OFSUB__(v20, v21))
      goto LABEL_37;
    if (v20 - v21 <= 1)
    {
      v47 = __OFADD__(v20, a3);
      v20 += a3;
      if (v47)
      {
LABEL_40:
        __break(1u);
        return result;
      }
      v63 = v20;
    }
  }
  else
  {
    if (v19)
    {
      v21 = *a2;
      if ((*a2 & 0x8000000000000000) != 0)
        goto LABEL_9;
LABEL_5:
      *(double *)&result = COERCE_DOUBLE(swift_release());
      return result;
    }
    if (a3 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v20 = 2 * a3;
    v63 = 2 * a3;
    v21 = *a2;
  }
  if (v21 >= v20)
    goto LABEL_5;
LABEL_9:
  v53 = v19;
  v54 = (_QWORD *)a5;
  v50 = a1;
  v58 = result;
  v52 = a2;
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = 0;
  v22 = swift_allocObject();
  v23 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v22 + 16) = MEMORY[0x1E0DEE9D8];
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 0;
  v49 = (double *)(v24 + 16);
  v25 = swift_allocObject();
  v26 = specialized Dictionary.init(dictionaryLiteral:)(v23);
  v27 = specialized Dictionary.init(dictionaryLiteral:)(v23);
  *(_QWORD *)(v25 + 16) = v26;
  v48[1] = v25 + 16;
  *(_QWORD *)(v25 + 24) = v27;
  v28 = swift_allocObject();
  v51 = v48;
  *(_BYTE *)(v28 + 16) = 0;
  v29 = (_BYTE *)(v28 + 16);
  v62 = v21;
  MEMORY[0x1E0C80A78](v28, v30);
  v56 = v31;
  v57 = v24;
  v32 = v25;
  v33 = v52;
  v60 = *(_QWORD *)(a4 + 104);
  v34 = outlined init with copy of _ViewList_Node(a4 + 16, (uint64_t)v61);
  v59 = 2 * a3;
  MEMORY[0x1E0C80A78](v34, v35);
  v36 = v58;
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v61);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((*v29 & 1) == 0)
  {
    LOBYTE(v60) = v66;
    specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(v56, v22, v68, v36, v64, v65, v66 | ((unint64_t)v67 << 32), v55, v70, v57, v32, v33, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:));
  }
  v37 = v54;
  if (v53)
    goto LABEL_21;
  swift_beginAccess();
  v38 = *(_QWORD *)(v32 + 16);
  v39 = *(_QWORD *)(v32 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationState.merge(_:)(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v37[14], v37[15]));
  if (!v68)
    goto LABEL_35;
  v42 = v37[6];
  if (v42 == 0x8000000000000000 && v68 == -1)
    goto LABEL_38;
  v43 = v42 / v68;
  if ((unsigned __int128)(v43 * (__int128)v68) >> 64 != (v43 * v68) >> 63)
    goto LABEL_36;
  v44 = *(double *)&result;
  if ((v40 & 1) != 0)
    v44 = 0.0;
  v45 = (v41 + v44) * (double)(v43 * v68);
  if (v43 < 1)
    v44 = 0.0;
  v18 = v45 - v44;
LABEL_21:
  v46 = v49;
  swift_beginAccess();
  *v50 = v18 + *v46;
  if (*v29 == 1)
    AGGraphCancelUpdate();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(double *)&result = COERCE_DOUBLE(swift_release());
  return result;
}

{
  uint64_t result;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double *v46;
  BOOL v47;
  _QWORD v48[2];
  double *v49;
  double *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[88];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  double v70;

  v68 = a3;
  v69 = a9;
  v70 = a10;
  v64 = a6;
  v65 = a7;
  v66 = a8 & 1;
  v67 = HIDWORD(a8);
  v63 = 0;
  *(double *)&result = COERCE_DOUBLE(swift_allocObject());
  *(_BYTE *)(result + 16) = 0;
  v18 = *a1;
  v19 = *(_QWORD *)(*(_QWORD *)(a5 + 112) + 16);
  v21 = *(_QWORD *)(a5 + 48);
  v20 = *(_QWORD *)(a5 + 56);
  if (v21 != v20
    && *(_BYTE *)(a5 + 24) != 1
    && *(_QWORD *)a5 == a3
    && *(double *)(a5 + 8) == a9
    && *(double *)(a5 + 16) == a10)
  {
    *a2 = v21;
    v63 = v20;
    v18 = *(double *)(a5 + 64);
    if (v21 >= a3)
    {
      *(_BYTE *)(result + 16) = 1;
      if (__OFSUB__(v21, a3))
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      *a2 = v21 - a3;
      v21 -= a3;
    }
    if (__OFSUB__(v20, v21))
      goto LABEL_37;
    if (v20 - v21 <= 1)
    {
      v47 = __OFADD__(v20, a3);
      v20 += a3;
      if (v47)
      {
LABEL_40:
        __break(1u);
        return result;
      }
      v63 = v20;
    }
  }
  else
  {
    if (v19)
    {
      v21 = *a2;
      if ((*a2 & 0x8000000000000000) != 0)
        goto LABEL_9;
LABEL_5:
      *(double *)&result = COERCE_DOUBLE(swift_release());
      return result;
    }
    if (a3 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v20 = 2 * a3;
    v63 = 2 * a3;
    v21 = *a2;
  }
  if (v21 >= v20)
    goto LABEL_5;
LABEL_9:
  v53 = v19;
  v54 = (_QWORD *)a5;
  v50 = a1;
  v58 = result;
  v52 = a2;
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = 0;
  v22 = swift_allocObject();
  v23 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v22 + 16) = MEMORY[0x1E0DEE9D8];
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 0;
  v49 = (double *)(v24 + 16);
  v25 = swift_allocObject();
  v26 = specialized Dictionary.init(dictionaryLiteral:)(v23);
  v27 = specialized Dictionary.init(dictionaryLiteral:)(v23);
  *(_QWORD *)(v25 + 16) = v26;
  v48[1] = v25 + 16;
  *(_QWORD *)(v25 + 24) = v27;
  v28 = swift_allocObject();
  v51 = v48;
  *(_BYTE *)(v28 + 16) = 0;
  v29 = (_BYTE *)(v28 + 16);
  v62 = v21;
  MEMORY[0x1E0C80A78](v28, v30);
  v56 = v31;
  v57 = v24;
  v32 = v25;
  v33 = v52;
  v60 = *(_QWORD *)(a4 + 104);
  v34 = outlined init with copy of _ViewList_Node(a4 + 16, (uint64_t)v61);
  v59 = 2 * a3;
  MEMORY[0x1E0C80A78](v34, v35);
  v36 = v58;
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v61);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((*v29 & 1) == 0)
  {
    LOBYTE(v60) = v66;
    specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(v56, v22, v68, v36, v64, v65, v66 | ((unint64_t)v67 << 32), v55, v70, v57, v32, v33, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:));
  }
  v37 = v54;
  if (v53)
    goto LABEL_21;
  swift_beginAccess();
  v38 = *(_QWORD *)(v32 + 16);
  v39 = *(_QWORD *)(v32 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationState.merge(_:)(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)&result = COERCE_DOUBLE(EstimationState.average.getter(v37[14], v37[15]));
  if (!v68)
    goto LABEL_35;
  v42 = v37[6];
  if (v42 == 0x8000000000000000 && v68 == -1)
    goto LABEL_38;
  v43 = v42 / v68;
  if ((unsigned __int128)(v43 * (__int128)v68) >> 64 != (v43 * v68) >> 63)
    goto LABEL_36;
  v44 = *(double *)&result;
  if ((v40 & 1) != 0)
    v44 = 0.0;
  v45 = (v41 + v44) * (double)(v43 * v68);
  if (v43 < 1)
    v44 = 0.0;
  v18 = v45 - v44;
LABEL_21:
  v46 = v49;
  swift_beginAccess();
  *v50 = v18 + *v46;
  if (*v29 == 1)
    AGGraphCancelUpdate();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(double *)&result = COERCE_DOUBLE(swift_release());
  return result;
}

uint64_t specialized IncrementalStack<>.sizeThatFits(proposedSize:children:context:state:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v12;
  uint64_t v18;
  char v19;
  char v20;
  double v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  __int128 *Value;
  __int128 v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  char v42;
  char v43;
  uint64_t v44;
  double v45;
  double v46;
  double v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[120];
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];

  v12 = HIDWORD(a7);
  *(_QWORD *)&v52 = a1;
  BYTE8(v52) = a2 & 1;
  *(_QWORD *)&v53 = a3;
  BYTE8(v53) = a4 & 1;
  *(double *)&v18 = COERCE_DOUBLE(_ProposedSize.subscript.getter());
  v20 = v19;
  outlined init with copy of _IncrementalLayout_Children(a5, (uint64_t)v60);
  if ((v20 & 1) != 0)
  {
    v21 = specialized LazyHVStack<>.flexibleMinorSize(children:)((uint64_t)v60);
    outlined destroy of _IncrementalLayout_Children((uint64_t)v60);
    *(double *)&v18 = v21;
  }
  else
  {
    outlined destroy of _IncrementalLayout_Children((uint64_t)v60);
    v21 = *(double *)&v18;
  }
  v61 = v18;
  if (v21 <= 0.0)
    return specialized IncrementalStack<>.log(_:)((uint64_t)&v61, 0xD000000000000010, 0x8000000187BD5BD0);
  v22 = a10;
  v23 = *(_OWORD *)(a8 + 64);
  v24 = *(_OWORD *)(a8 + 96);
  v25 = *(_OWORD *)(a8 + 112);
  v57 = *(_OWORD *)(a8 + 80);
  v58 = v24;
  v59 = v25;
  v26 = *(_OWORD *)(a8 + 16);
  v52 = *(_OWORD *)a8;
  v53 = v26;
  v27 = *(_OWORD *)(a8 + 48);
  v54 = *(_OWORD *)(a8 + 32);
  v55 = v27;
  v56 = v23;
  if (*MEMORY[0x1E0CFED28] == v12)
  {
    outlined retain of _IncrementalStack_State<LazyVStackLayout>(a8);
  }
  else
  {
    Value = (__int128 *)AGGraphGetValue();
    v30 = Value[1];
    v50 = *Value;
    v51 = v30;
    v31 = outlined retain of _IncrementalStack_State<LazyVStackLayout>(a8);
    MEMORY[0x18D75BE3C](v31);
    v33 = *(double *)(a8 + 104);
    if (v33 > 0.0 && v32 > 0.0 && vabdd_f64(v33, v32) >= 0.01)
    {
      v34 = *(_QWORD *)(a8 + 120);
      v62 = *(_QWORD *)(a8 + 112);
      v63[0] = v34;
      v35 = MEMORY[0x1E0DEE9D8];
      v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v62);
      *(_QWORD *)&v59 = v36;
      v37 = specialized Dictionary.init(dictionaryLiteral:)(v35);
      outlined release of _IncrementalLayout_Placements((uint64_t)v63);
      *((_QWORD *)&v59 + 1) = v37;
      v22 = a10;
    }
  }
  v48 = 0.0;
  v49 = 0;
  specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(&v48, &v49, 1, a5, (uint64_t)&v52, a9, v22, a11 & 0xFFFFFFFF00000001, v21, v21);
  v38 = EstimationState.average.getter(v59, *((uint64_t *)&v59 + 1));
  v40 = v39;
  v41 = *(double *)&v38;
  v43 = v42;
  *(_QWORD *)&v50 = 2;
  result = _ViewList_Node.estimatedCount(style:)();
  v44 = result - v49;
  if (__OFSUB__(result, v49))
  {
    __break(1u);
  }
  else
  {
    v45 = v41;
    if ((v43 & 1) != 0)
      v45 = 0.0;
    v46 = (v40 + v45) * (double)(v44 & ~(v44 >> 63)) + v48;
    if (v44 < 1 || v49 != 0)
      v45 = 0.0;
    v48 = v46 - v45;
    specialized IncrementalStack<>.log(_:)((uint64_t)&v61, (uint64_t)&v48, 0xD000000000000010, 0x8000000187BD5BD0);
    *(_QWORD *)&v50 = a1;
    BYTE8(v50) = a2 & 1;
    *(_QWORD *)&v51 = a3;
    BYTE8(v51) = a4 & 1;
    _ProposedSize.subscript.getter();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  int v12;
  uint64_t v18;
  char v19;
  char v20;
  double v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  __int128 *Value;
  __int128 v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  char v42;
  char v43;
  uint64_t v44;
  double v45;
  double v46;
  double v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[120];
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];

  v12 = HIDWORD(a7);
  *(_QWORD *)&v52 = a1;
  BYTE8(v52) = a2 & 1;
  *(_QWORD *)&v53 = a3;
  BYTE8(v53) = a4 & 1;
  *(double *)&v18 = COERCE_DOUBLE(_ProposedSize.subscript.getter());
  v20 = v19;
  outlined init with copy of _IncrementalLayout_Children(a5, (uint64_t)v60);
  if ((v20 & 1) != 0)
  {
    v21 = specialized LazyHVStack<>.flexibleMinorSize(children:)((uint64_t)v60);
    outlined destroy of _IncrementalLayout_Children((uint64_t)v60);
    *(double *)&v18 = v21;
  }
  else
  {
    outlined destroy of _IncrementalLayout_Children((uint64_t)v60);
    v21 = *(double *)&v18;
  }
  v61 = v18;
  if (v21 <= 0.0)
    return specialized IncrementalStack<>.log(_:)((uint64_t)&v61, 0xD000000000000010, 0x8000000187BD5CE0);
  v22 = a10;
  v23 = *(_OWORD *)(a8 + 64);
  v24 = *(_OWORD *)(a8 + 96);
  v25 = *(_OWORD *)(a8 + 112);
  v57 = *(_OWORD *)(a8 + 80);
  v58 = v24;
  v59 = v25;
  v26 = *(_OWORD *)(a8 + 16);
  v52 = *(_OWORD *)a8;
  v53 = v26;
  v27 = *(_OWORD *)(a8 + 48);
  v54 = *(_OWORD *)(a8 + 32);
  v55 = v27;
  v56 = v23;
  if (*MEMORY[0x1E0CFED28] == v12)
  {
    outlined retain of _IncrementalStack_State<LazyVStackLayout>(a8);
  }
  else
  {
    Value = (__int128 *)AGGraphGetValue();
    v30 = Value[1];
    v50 = *Value;
    v51 = v30;
    v31 = outlined retain of _IncrementalStack_State<LazyVStackLayout>(a8);
    MEMORY[0x18D75BE3C](v31);
    v33 = *(double *)(a8 + 104);
    if (v33 > 0.0 && v32 > 0.0 && vabdd_f64(v33, v32) >= 0.01)
    {
      v34 = *(_QWORD *)(a8 + 120);
      v62 = *(_QWORD *)(a8 + 112);
      v63[0] = v34;
      v35 = MEMORY[0x1E0DEE9D8];
      v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v62);
      *(_QWORD *)&v59 = v36;
      v37 = specialized Dictionary.init(dictionaryLiteral:)(v35);
      outlined release of _IncrementalLayout_Placements((uint64_t)v63);
      *((_QWORD *)&v59 + 1) = v37;
      v22 = a10;
    }
  }
  v48 = 0.0;
  v49 = 0;
  specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(&v48, &v49, 1, a5, (uint64_t)&v52, a9, v22, a11 & 0xFFFFFFFF00000001, v21, v21);
  v38 = EstimationState.average.getter(v59, *((uint64_t *)&v59 + 1));
  v40 = v39;
  v41 = *(double *)&v38;
  v43 = v42;
  *(_QWORD *)&v50 = 2;
  result = _ViewList_Node.estimatedCount(style:)();
  v44 = result - v49;
  if (__OFSUB__(result, v49))
  {
    __break(1u);
  }
  else
  {
    v45 = v41;
    if ((v43 & 1) != 0)
      v45 = 0.0;
    v46 = (v40 + v45) * (double)(v44 & ~(v44 >> 63)) + v48;
    if (v44 < 1 || v49 != 0)
      v45 = 0.0;
    v48 = v46 - v45;
    specialized IncrementalStack<>.log(_:)((uint64_t)&v61, (uint64_t)&v48, 0xD000000000000010, 0x8000000187BD5CE0);
    *(_QWORD *)&v50 = a1;
    BYTE8(v50) = a2 & 1;
    *(_QWORD *)&v51 = a3;
    BYTE8(v51) = a4 & 1;
    _ProposedSize.subscript.getter();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t IncrementalStack<>.firstIndex<A>(of:children:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[3];
  double v22;

  v21[1] = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v15 = (char *)v21 - v14;
  v16 = *(double *)(a3 + 32);
  v17 = *(double *)(a3 + 40);
  if (((*(uint64_t (**)(uint64_t, uint64_t, double))(a6 + 32))(a4, a6, v13) & 1) != 0)
    v18 = v16;
  else
    v18 = v17;
  v22 = v18;
  v19 = (*(uint64_t (**)(char *, double *, uint64_t, uint64_t))(a6 + 72))(v15, &v22, a4, a6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, AssociatedTypeWitness);
  result = 0;
  if (v19 >= 1 && v22 > 0.0)
  {
    v21[2] = 2 * v19;
    return _IncrementalLayout_Children.firstIndex<A>(id:style:)();
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusedValueList()
{
  return &type metadata for FocusedValueList;
}

uint64_t FocusableOptions.resolve(in:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t (*v5)(void);
  unsigned __int8 v6;
  uint64_t (*v7)(void);
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;

  v4 = *v2;
  if (*(_QWORD *)(a1 + 8))
  {
    v5 = MEMORY[0x1E0CE53E0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1E1AC3990, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1E1AC3990, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    v6 = v12;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v5);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    v7 = MEMORY[0x1E0CE53E0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1E1AC3990, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1E1AC3990, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    v6 = v12;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v7);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  if ((v6 & ((v4 & 2) == 0)) != 0)
    v9 = v4 | 2;
  else
    v9 = v4;
  if (!(v11 & 1 | (v9 >> 2) & 1))
    v9 |= 4uLL;
  v10 = (v9 >> 5) & 1;
  if ((v9 & 3) == 0)
    LODWORD(v10) = 1;
  if (!(_DWORD)v10)
    v9 |= 0x20uLL;
  *a2 = v9;
  return result;
}

uint64_t storeEnumTagSinglePayload for CommandOperation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CommandOperation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CommandGroupPlacement(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for CallbacksGesture<FailedCallbacks<()>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CallbacksGesture<FailedCallbacks<()>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for FailedCallbacks<()>, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0CE2D28]);
    lazy protocol witness table accessor for type FailedCallbacks<()> and conformance FailedCallbacks<A>();
    v0 = type metadata accessor for CallbacksGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CallbacksGesture<FailedCallbacks<()>>);
  }
}

uint64_t outlined destroy of BridgedListState(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BridgedListState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata completion function for BridgedListState()
{
  unint64_t v0;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata completion function for BridgedListState.CommitMutation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BridgedListState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *protocol witness for GraphMutation.apply() in conformance BridgedListState.CommitMutation()
{
  uint64_t v0;
  unsigned int Attribute;
  BOOL v2;
  uint64_t v3;
  _QWORD v5[3];
  BOOL v6;

  Attribute = AGWeakAttributeGetAttribute();
  v2 = Attribute == *MEMORY[0x1E0CFED28];
  if (Attribute == *MEMORY[0x1E0CFED28])
    v3 = 0;
  else
    v3 = Attribute;
  v5[2] = v0;
  v6 = v2;
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF14AttributeGraph0C0Vy7SwiftUI16BridgedListStateVG_s5NeverOytTg5((_QWORD *(*)(uint64_t *__return_ptr, int *))partial apply for closure #1 in BridgedListState.CommitMutation.apply(), (uint64_t)v5, v3 | ((unint64_t)v2 << 32));
}

uint64_t partial apply for closure #1 in BridgedListState.CommitMutation.apply()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in BridgedListState.CommitMutation.apply()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata completion function for BridgedListState.ScrollTarget()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexPath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id AppSceneDelegate.init()()
{
  _BYTE *v0;
  char *v1;
  char *v2;
  objc_super v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___appDelegate] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window] = 0;
  v1 = &v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v1[16] = -1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_lastVersion] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneStorageValues] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataType] = 0;
  *(_OWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue] = xmmword_187C0B4D0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataValue];
  *((_QWORD *)v2 + 4) = 0;
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___isDocumentViewControllerRootEnabled] = 2;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for AppSceneDelegate();
  return objc_msgSendSuper2(&v4, sel_init);
}

void protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance AppSceneDelegate(uint64_t a1, uint64_t a2)
{
  specialized AppSceneDelegate.hostingView<A>(_:willUpdate:)(a2);
}

void *AppSceneDelegate.sceneItem()@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  char v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD __src[34];
  _QWORD __dst[36];

  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
  v6 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
  if (v6 == 255 || !static AppGraph.shared)
    goto LABEL_34;
  v3 = *v5;
  v2 = v5[1];
  if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E0CFED28])
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v4 = __src;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    goto LABEL_35;
  v9 = v7 + 32;
  swift_bridgeObjectRetain();
  outlined copy of SceneID?(v3, v2, v6);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v9, (uint64_t)__src);
    v12 = __src[16];
    v11 = __src[17];
    if ((__src[18] & 1) == 0)
      break;
    if ((v6 & 1) == 0)
    {
      v24 = _typeName(_:qualified:)();
      v26 = v13;
      v14._countAndFlagsBits = 45;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v11 = v26;
      swift_bridgeObjectRetain();
      v16 = v2;
      if (v24 == v3)
        goto LABEL_25;
      goto LABEL_26;
    }
    if (__src[16] == v3 && LOBYTE(__src[17]) == v2)
      goto LABEL_29;
LABEL_12:
    outlined destroy of SceneList.Item((uint64_t)__src);
    v9 += 272;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  if ((v6 & 1) == 0)
  {
    v17 = __src[16] == v3 && __src[17] == v2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_29;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v25 = _typeName(_:qualified:)();
  v27 = v18;
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v16 = v27;
  if (v12 != v25)
    goto LABEL_26;
LABEL_25:
  if (v11 != v16)
  {
LABEL_26:
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      goto LABEL_29;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease_n();
LABEL_29:
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, 0x110uLL);
  swift_bridgeObjectRelease();
  outlined consume of SceneID?(v3, v2, v6);
  swift_bridgeObjectRelease();
  if (!__dst[32])
  {
    while (1)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)__dst, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_35:
      outlined copy of SceneID?(v3, v2, v6);
      swift_bridgeObjectRetain();
LABEL_32:
      v4[32] = 0u;
      v4[33] = 0u;
      v4[30] = 0u;
      v4[31] = 0u;
      v4[28] = 0u;
      v4[29] = 0u;
      v4[26] = 0u;
      v4[27] = 0u;
      v4[24] = 0u;
      v4[25] = 0u;
      v4[22] = 0u;
      v4[23] = 0u;
      v4[20] = 0u;
      v4[21] = 0u;
      v4[18] = 0u;
      v4[19] = 0u;
      v4[17] = 0u;
      swift_bridgeObjectRelease();
      outlined consume of SceneID?(v3, v2, v6);
      swift_bridgeObjectRelease();
    }
  }
  return memcpy(a1, __dst, 0x110uLL);
}

void partial apply for closure #4 in AppSceneDelegate.scene(_:willConnectTo:options:)()
{
  uint64_t v0;

  closure #4 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void closure #4 in AppSceneDelegate.scene(_:willConnectTo:options:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t *boxed_opaque_existential_1;
  id v16;
  uint64_t v18[4];

  v4 = type metadata accessor for OpenURLContext();
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 16;
  v10 = objc_msgSend(a1, sel_options, v6);
  swift_beginAccess();
  v11 = MEMORY[0x18D760234](v9);
  if (v11
    && (v12 = (void *)v11,
        v13 = *(_QWORD *)(v11 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge),
        swift_retain(),
        v12,
        v13))
  {
    v14 = objc_msgSend(a1, sel_URL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)&v8[*(int *)(v4 + 20)] = v10;
    v18[3] = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
    v16 = v10;
    SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v18, v4, 0x434C52556E65704FLL, 0xEE00747865746E6FLL);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);

    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
  }
  else
  {

  }
}

Swift::Void __swiftcall AppSceneDelegate.sceneWillEnterForeground(_:)(UIScene *a1)
{
  AppSceneDelegate.sceneWillResignActive(_:)((uint64_t)a1, (SEL *)&selRef_sceneWillEnterForeground_);
}

void specialized AppSceneDelegate.openWindowPresentedValue<A>(from:config:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *__return_ptr, uint64_t, unint64_t);
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (!a1)
    goto LABEL_25;
  v5 = a1;
  v6 = objc_msgSend(v5, sel_activityType);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  if (one-time initialization token for userActivityTypeOpenWindowByID != -1)
    swift_once();
  if (v7 == static NSUserActivity.userActivityTypeOpenWindowByID && v9 == unk_1EDEFF840)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
      goto LABEL_24;
  }
  v12 = objc_msgSend(v5, sel_userInfo);
  v13 = MEMORY[0x1E0DEE9B8];
  if (!v12)
  {
    v23 = 0u;
    v24 = 0u;
LABEL_22:

    outlined destroy of AccessibilityTableContext?((uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v13 + 8);
LABEL_25:
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }
  v14 = v12;
  v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)&v21[0] = 0xD00000000000001CLL;
  *((_QWORD *)&v21[0] + 1) = 0x8000000187BD8230;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v26), (v17 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v23);
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v26);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_22;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:

    goto LABEL_25;
  }
  v19 = v26;
  v18 = v27;
  v20 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(a2 + 48);
  if (!v20)
  {
    outlined consume of Data._Representation(v26, v27);
    goto LABEL_24;
  }
  v20(&v26, v26, v27);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v26, (uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  if (*((_QWORD *)&v24 + 1))
  {
    v21[0] = v23;
    v21[1] = v24;
    v22 = v25;
    outlined init with copy of AnyHashable((uint64_t)v21, a3);
    *(_QWORD *)(a3 + 40) = v19;
    *(_QWORD *)(a3 + 48) = v18;
    outlined copy of Data._Representation(v19, v18);
    outlined destroy of AnyHashable((uint64_t)v21);
  }
  else
  {
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }

  outlined destroy of AccessibilityTableContext?((uint64_t)&v26, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  outlined consume of Data._Representation(v19, v18);
}

Swift::Void __swiftcall AppSceneDelegate.sceneDidBecomeActive(_:)(UIScene *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t *v7;
  int v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;

  v3 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase) = 2;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (v4)
  {
    v5 = objc_msgSend(v4, sel_rootViewController);
    if (v5)
    {
      v6 = v5;
      v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
      v8 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
      if (v8 == 255)
      {

      }
      else
      {
        v9 = *v7;
        v10 = v7[1];
        outlined copy of SceneID(*v7, v10, v8 & 1);
        AppSceneDelegate.scenesDidChange(phaseChanged:)(1);
        if (one-time initialization token for shared != -1)
          swift_once();
        v17 = *(_BYTE *)(v1 + v3);
        swift_retain();
        PlatformSceneCache.setPhase(_:id:host:)(&v17, v9, v10, v8 & 1);
        swift_release();

        outlined consume of SceneID?(v9, v10, v8);
      }
    }
  }
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v11)
  {
    v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 80);
    v13 = swift_retain();
    v14 = (void *)v12(v13);
    swift_release();
    if (v14)
    {
      v18 = &unk_1EDF2A8C8;
      v15 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v15)
      {
        v16 = v15;
        if ((objc_msgSend(v15, sel_respondsToSelector_, sel_sceneDidBecomeActive_) & 1) != 0)
          objc_msgSend(v16, sel_sceneDidBecomeActive_, a1);
      }

    }
  }
}

void AppSceneDelegate.appDelegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___appDelegate;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___appDelegate);
  if (v2)
    goto LABEL_4;
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v4 = objc_msgSend(v3, sel_delegate);

  if (v4)
  {
    type metadata accessor for AppDelegate();
    v5 = swift_dynamicCastClassUnconditional();
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    swift_unknownObjectRetain();

    v2 = 0;
LABEL_4:
    v7 = v2;
    return;
  }
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HiddenModifier(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HiddenModifier(a1, a2, a3, a4, a5, a6, &qword_1E1ABE228);
}

uint64_t static _HiddenModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 80);
  v16 = 8;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = *(_OWORD *)(a2 + 24);
  v12 = *(_OWORD *)(a2 + 40);
  v13 = *(_OWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = v6;
  return makeHiddenView(allowedKeys:inputs:body:)(&v16, &v8, a3);
}

void type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ChangedGesture<PhysicalButtonPressGesture>)
  {
    lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
    lazy protocol witness table accessor for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType();
    v0 = type metadata accessor for _ChangedGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ChangedGesture<PhysicalButtonPressGesture>);
  }
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance WindowSceneList<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static WindowSceneList._makeScene(scene:inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t destroy for WindowSceneList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = ((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)((((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v7;
  v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 24);
  swift_retain();
  if (v11 < 0xFFFFFFFF)
  {
    v15 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v15;
  }
  else
  {
    v12 = *(_QWORD *)v10;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_BYTE *)(v10 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v10, v13, v14);
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = v13;
    *(_BYTE *)(v9 + 16) = v14;
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain();
  }
  v16 = (_QWORD *)((v9 + 39) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v20 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_QWORD *)(v18 + 8) = v20;
    swift_retain();
  }
  v21 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v22 = (_QWORD *)((a1 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((a2 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v22[1] = v23[1];
  *(_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata completion function for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for WindowSceneConfiguration(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WindowSceneList);
}

uint64_t partial apply for closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static WindowSceneList._makeScene(scene:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v11[2] = type metadata accessor for WindowSceneList(0, a2, a3, a4);
  v12 = type metadata accessor for WindowSceneConfiguration(0, a2, a3, v7);
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v12, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v13;
}

uint64_t partial apply for closure #3 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #3 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t closure #3 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = type metadata accessor for WindowSceneList(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 40);
  v11[2] = v5;
  v7 = type metadata accessor for Any.Type();
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4, (uint64_t)v11, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t partial apply for closure #2 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t closure #2 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = type metadata accessor for WindowSceneList(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v12[2] = v5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

void base witness table accessor for _AttributeBody in WindowSceneList<A>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t initializeWithCopy for WindowSceneList.MakeList(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  }
  else
  {
    v4 = v3 & 1;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    outlined copy of SceneID(v5, v6, v3 & 1);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t type metadata accessor for WindowSceneList.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WindowSceneList.MakeList);
}

uint64_t specialized ToolbarStrategy.withUpdate<A>(_:)(void **a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v6;
  id v7;
  id v8;
  uint64_t result;
  _QWORD v10[3];
  __int128 v11;
  _QWORD v12[4];
  _BYTE v13[96];

  v3 = *a1;
  if (*a1)
  {
    outlined init with copy of Toolbar.UpdateContext?((uint64_t)(a1 + 1), (uint64_t)v10);
    if (v12[3])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v10, (uint64_t)v13);
      outlined init with copy of Toolbar.UpdateContext((uint64_t)v13, (uint64_t)v10);
      v6 = (void *)MEMORY[0x18D760234](v12);
      v7 = v3;
      outlined destroy of Toolbar.UpdateContext((uint64_t)v10);
      memset(v10, 0, sizeof(v10));
      v11 = xmmword_187C39040;
      v8 = v6;
      specialized ToolbarBridge.adjustEntries(in:_:)((uint64_t)v10, (uint64_t)v7, v6, 2 * (v6 != 0), a2, a3);

      outlined destroy of Toolbar.BarLocation((uint64_t)v10);
      return outlined destroy of Toolbar.UpdateContext((uint64_t)v13);
    }
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata completion function for ToolbarModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SheetPreference.Placement()
{
  return &type metadata for SheetPreference.Placement;
}

uint64_t outlined destroy of SheetPreference.Value(uint64_t a1)
{
  destroy for SheetPreference.Value(a1);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AGWeakAttribute.__Unnamed_struct__details(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type RootEnvironment and conformance RootEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RootEnvironment and conformance RootEnvironment;
  if (!lazy protocol witness table cache variable for type RootEnvironment and conformance RootEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RootEnvironment, &unk_1E1ABC970);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootEnvironment and conformance RootEnvironment);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTabView<A>(int *a1)
{
  return static ResolvedTabView._makeViewList(view:inputs:)(a1);
}

_QWORD *assignWithCopy for ResolvedTabView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t (*v14)(unint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, unint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  int v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v28 = ~v8;
  if ((v7 & 0x80000000) == 0)
  {
    v11 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v12 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    v13 = v12 + 1;
    if (*v10 > 0xFFFFFFFEuLL)
      goto LABEL_5;
LABEL_8:
    if (v13)
      goto LABEL_9;
    *a1 = *a2;
    *v10 = *v11;
    v15 = v8 + 8;
    v16 = (unint64_t)v10 + v8 + 8;
    v17 = v9;
    v18 = v16 & v28;
    v19 = ((unint64_t)v11 + v15) & v28;
    v20 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v21 = v18;
    v9 = v17;
    v20(v21, v19, v5);
    goto LABEL_12;
  }
  v14 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v27 = v14(((unint64_t)v10 + v8 + 8) & ~v8, v7, v5);
  v11 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = v14(((unint64_t)v11 + v8 + 8) & ~v8, v7, v5);
  if (v27)
    goto LABEL_8;
LABEL_5:
  if (v13)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v10 + v8 + 8) & v28, v5);
LABEL_9:
    memcpy(a1, a2, v9);
    goto LABEL_12;
  }
  *a1 = *a2;
  swift_retain();
  swift_release();
  *v10 = *v11;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v10 + v8 + 8) & v28, ((unint64_t)v11 + v8 + 8) & v28, v5);
LABEL_12:
  v22 = ((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v23 + 8);
  if (*(_QWORD *)(v22 + 8) < 0xFFFFFFFFuLL)
  {
    if (v24 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
      *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_18:
    v25 = *(_OWORD *)v23;
    *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
    *(_OWORD *)v22 = v25;
    return a1;
  }
  if (v24 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_18;
  }
  *(_QWORD *)v22 = *(_QWORD *)v23;
  swift_retain();
  swift_release();
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
  return a1;
}

uint64_t type metadata completion function for ResolvedTabView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for TabViewStyleConfiguration(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ResolvedTabView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedTabView);
}

uint64_t ResolvedTabView.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for TabViewStyleConfiguration(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

uint64_t static ResolvedTabView._makeViewList(view:inputs:)(int *a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD v5[3];

  v1 = *a1;
  lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    v5[0] = v1;
    static ResolvedTabView.makeViewList<A>(view:style:inputs:)((uint64_t)v5, 0);
  }
  v5[0] = v1;
  return (*(uint64_t (**)(_DWORD *))(v4 + 16))(v5);
}

unint64_t lazy protocol witness table accessor for type ResolvedOptions and conformance ResolvedOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedOptions and conformance ResolvedOptions;
  if (!lazy protocol witness table cache variable for type ResolvedOptions and conformance ResolvedOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedOptions, &unk_1E1ABC898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedOptions and conformance ResolvedOptions);
  }
  return result;
}

uint64_t ResolvedOptions.value.getter()
{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value + 8, (uint64_t)v5);
  v1 = v6;
  v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v4 = *(_OWORD *)AGGraphGetValue();
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v2 + 8))(&v4, v1, v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

unint64_t instantiation function for generic protocol witness table for ResolvedDivider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for SheetAnchorProvider.Modifier : ViewModifier in NullSheetAnchor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for SheetAnchorProvider.preferenceTransformModifier(for:) in conformance NullSheetAnchor<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return NullSheetAnchor.preferenceTransformModifier(for:)(a1, a2);
}

uint64_t lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NullSheetAnchor<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t NullSheetAnchor.preferenceTransformModifier(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  a2[1] = v3;
  return swift_retain();
}

uint64_t type metadata completion function for NavigationStack()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for MoveInteraction()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>)
  {
    type metadata accessor for CallbacksGesture<FailedCallbacks<()>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CallbacksGesture<FailedCallbacks<()>> and conformance CallbacksGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for CallbacksGesture<FailedCallbacks<()>>, MEMORY[0x1E0CE3150]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>);
  }
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeScene(scene:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle, (uint64_t)&type metadata for ConditionallyBorderedStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>);
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.LineStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>, &lazy cache variable for type metadata for Text.LineStyle?, MEMORY[0x1E0CE6C50]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, type metadata accessor for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<AnyView, RootModifier>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a2, MEMORY[0x1E0CE7518], a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type RootModifier and conformance RootModifier();
    v4[0] = MEMORY[0x1E0CE7508];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?));
  }
}

void type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E0CE5460], MEMORY[0x1E0CE5450], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, ContentConfigurationBasedRootEnvironment>, lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>, (uint64_t)&protocol witness table for ContentConfigurationBasedRootEnvironment);
}

void type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>();
    v3[1] = MEMORY[0x1E0CE5138];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v6;

  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;

  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for _FocusableModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for PrimitiveButtonStyleConfiguration.Label;
    v2[1] = &protocol witness table for _FocusableModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<InsetGroupedListStyleContext>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
    v2 = v1;
    v3[0] = &protocol witness table for ListStyleContent;
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<RootModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<OpacityButtonHighlightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier, (uint64_t)&type metadata for OpacityButtonHighlightModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonFocusInteractionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier, (uint64_t)&type metadata for ButtonFocusInteractionModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>>)
  {
    type metadata accessor for _ViewModifier_Content<RefreshScopeModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<RefreshAction?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for _ViewModifier_Content<LazyPageTabModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>)
  {
    type metadata accessor for _ViewModifier_Content<CollectionViewCellModifier>();
    type metadata accessor for StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>);
  }
}

uint64_t outlined destroy of ModifiedContent<_ViewList_View, ListTableCellModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s7SwiftUI15ModifiedContentVyAA010_ViewList_E0VAA0F17TableCellModifierVGWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a2, MEMORY[0x1E0CE0A40], a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined assign with take of ModifiedContent<_ViewList_View, ListTableCellModifier>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<_ViewList_View, ListTableCellModifier>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier, (uint64_t (*)(uint64_t))type metadata accessor for CollectionViewCellModifier, (uint64_t)&protocol conformance descriptor for CollectionViewCellModifier);
    v4[0] = MEMORY[0x1E0CE0A30];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t closure #1 in closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v12[2] = type metadata accessor for ModifiedContent();
  v12[3] = a2;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[4];

  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 14);
  LODWORD(v17) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v16 = *(_OWORD *)(a2 + 5);
  v13 = a2[3];
  v14 = a2[4];
  _GraphValue.subscript.getter();
  v17 = v9;
  v18 = v10;
  v19 = v11;
  v20 = v13;
  v21 = v14;
  v22 = v16;
  v23 = v12;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a6 + 32))(v24, &v17, a4, a6);
}

uint64_t closure #1 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];

  v9 = type metadata accessor for ModifiedContent();
  v10 = a1 + *(int *)(v9 + 36);
  v14[2] = v9;
  v14[3] = a3;
  v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  return v14[5];
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static ModifiedContent<>._makeScene(scene:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t static ModifiedContent<>._makeScene(scene:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _BYTE v28[12];

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = *a1;
  v11 = v21;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v20 = *(_OWORD *)(a2 + 5);
  v16 = a2[3];
  v17 = a2[4];
  _GraphValue.subscript.getter();
  v21 = v12;
  v22 = v13;
  v23 = v14;
  v24 = v16;
  v25 = v17;
  v26 = v20;
  v27 = v15;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v28, &v21, partial apply for closure #2 in static ModifiedContent<>._makeScene(scene:inputs:), v18, a4, a6);
  return swift_release();
}

uint64_t ModifiedContent<>.accessibilityHint(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(_BYTE *)(v12 + 48) = a3 & 1;
  *(_QWORD *)(v12 + 56) = a4;
  v14 = v12;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5870], (uint64_t)&v14, 1, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for MinorProperties()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for MinorProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MinorProperties);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ListStyleWriter._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ListStyleWriter<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t static ListStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ListStyleWriter(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
    closure #1 in static ListStyleWriter._makeInputs(modifier:inputs:)(1, a3, a4, v6);
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for StyleType(0, a3, a4, v7);
  lazy protocol witness table accessor for type ListStyleInput and conformance ListStyleInput();
  return PropertyList.subscript.setter();
}

unint64_t instantiation function for generic protocol witness table for LazyVGridLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in LazyPageTabView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for LazyPageTabView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v7))
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v8 + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + ((v6 + 16) & v7)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
    goto LABEL_5;
  }
  v10 = *v9;
  if ((unint64_t)*v9 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  if ((_DWORD)v10 == -1)
  {
LABEL_5:
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v7, v4);
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v8 + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + ((v6 + 16) & v7)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *initializeWithCopy for LazyPageTabView(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v20;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    v20 = ((unint64_t)v15 + v8 + 8) & v9;
    v16 = ((unint64_t)v12 + v8 + 8) & v9;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v17(v20, v16, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 16))(((unint64_t)__dst + v14 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)__src + v14 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return __dst;
}

_QWORD *assignWithCopy for LazyPageTabView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, unint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v27;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v25 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    v3 = a3;
    if (!v25)
    {
LABEL_5:
      if (!v14)
      {
        *a1 = *a2;
        swift_retain();
        swift_release();
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v11 + v9 + 8) & v27, ((unint64_t)v12 + v9 + 8) & v27, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v27, v6);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *a1 = *a2;
    *v11 = *v12;
    v16 = ((unint64_t)v11 + v9 + 8) & v27;
    v17 = (unint64_t)v12 + v9 + 8;
    v18 = v10;
    v19 = v17 & v27;
    v20 = v3;
    v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v22 = v19;
    v10 = v18;
    v21(v16, v22, v6);
    v3 = v20;
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v10);
LABEL_12:
  v23 = *(_QWORD *)(*(_QWORD *)(v3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v23 + 24))(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v23 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80), ((unint64_t)a2 + v10 + *(unsigned __int8 *)(v23 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  return a1;
}

uint64_t type metadata completion function for LazyPageTabView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for LazyPageTabView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined destroy of HashableWeakBox<Swift.AnyObject>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>;
  if (!lazy protocol witness table cache variable for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2DA8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>);
  }
  return result;
}

void type metadata accessor for (HashableWeakBox<UIViewController>, ScenePhase)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (HashableWeakBox<UIViewController>, ScenePhase))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (uint64_t (*)(uint64_t))type metadata accessor for UIViewController, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE2D98]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (HashableWeakBox<UIViewController>, ScenePhase));
  }
}

uint64_t outlined init with copy of HashableWeakBox<UIViewController>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (uint64_t (*)(uint64_t))type metadata accessor for UIViewController, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE2D98]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for HashableWeakBox<UIViewController>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HashableWeakBox<UIViewController>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v0 = type metadata accessor for HashableWeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>);
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance FlipForRTLFrame()
{
  lazy protocol witness table accessor for type FlipForRTLFrame and conformance FlipForRTLFrame();
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type FailedCallbacks<()> and conformance FailedCallbacks<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FailedCallbacks<()> and conformance FailedCallbacks<A>;
  if (!lazy protocol witness table cache variable for type FailedCallbacks<()> and conformance FailedCallbacks<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for FailedCallbacks<()>, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0CE2D28]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2D38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FailedCallbacks<()> and conformance FailedCallbacks<A>);
  }
  return result;
}

void DynamicTypeSize.init(_:)(void *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  DynamicTypeSize.init(uiSizeCategory:)(a1, &v3);
  *a2 = v3;
}

ValueMetadata *type metadata accessor for DragItemTimings()
{
  return &type metadata for DragItemTimings;
}

uint64_t type metadata completion function for CellHostingView()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CellHostingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CellHostingView);
}

unint64_t lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic;
  if (!lazy protocol witness table cache variable for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonMenuStyle.Automatic, &type metadata for ButtonMenuStyle.Automatic);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2C48], MEMORY[0x1E0CE2C50]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance AppBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return AppBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t type metadata accessor for AppBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppBodyAccessor);
}

uint64_t AppBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for AppBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AppBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

void base witness table accessor for _AttributeBody in AnchorTransform<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>);
  }
}

void partial apply for closure #1 in _UIHostingView.sceneActivationStateDidChange(with:)()
{
  _UIHostingView.isEnteringForeground.setter(0);
  _UIHostingView.updateSceneActivationState()();
}

uint64_t @objc _UIHostingView.sceneWillEnterForeground(notification:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc _UIHostingView.windowDidMoveToScene(notification:)(a1, a2, a3, _UIHostingView.sceneWillEnterForeground(notification:));
}

void _UIHostingView.sceneWillEnterForeground(notification:)()
{
  _UIHostingView.sceneActivationStateDidChange(with:)(3u);
}

uint64_t _UIHostingView.isEnteringForeground.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x278)) = result;
  return result;
}

void _UIHostingView.didChangeColorScheme(from:)(unsigned __int8 *a1)
{
  int v1;
  unsigned __int8 v2;

  v1 = *a1;
  _UIHostingView.colorScheme.getter(&v2);
  if (v1 == 2)
  {
    if (v2 == 2)
      return;
LABEL_6:
    _UIHostingView.viewController.getter();
  }
  if (v2 == 2 || ((v2 ^ v1) & 1) != 0)
    goto LABEL_6;
}

uint64_t _UIHostingView.environmentOverride.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x120));
  swift_beginAccess();
  v5 = *v4;
  *v4 = v2;
  v4[1] = v3;
  outlined consume of EnvironmentValues?(v5);
  return _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(2, v6, v7, v8);
}

void closure #6 in _UIHostingView.updateEnvironment()(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (void *)v6;
    a4();

  }
}

void partial apply for closure #1 in _UIHostingView.requestUpdate(after:)()
{
  uint64_t *v0;

  closure #6 in _UIHostingView.updateEnvironment()(v0[4], v0[2], v0[3], _UIHostingView.requestImmediateUpdate());
}

void _UIHostingView.colorScheme.setter(_BYTE *a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x180);
  v3 = *((_BYTE *)v1 + v2);
  *((_BYTE *)v1 + v2) = *a1;
  v4 = v3;
  _UIHostingView.didChangeColorScheme(from:)(&v4);
}

uint64_t _UIHostingView.rootViewDelegate.setter(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x248)) = a1;
  return swift_release();
}

ValueMetadata *type metadata accessor for ToolbarStorage()
{
  return &type metadata for ToolbarStorage;
}

void type metadata completion function for ToolbarStorage.GroupItem()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata completion function for ToolbarStorage.GroupItem.CollapsedContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.GroupItem.CollapsedContent);
}

uint64_t type metadata completion function for ToolbarStorage.Entry()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ToolbarStorage.Entry.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for ToolbarStorage.Item()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata completion function for ToolbarStorage.NavigationProperties()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata completion function for ToolbarStorage.SearchItem()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for SubmitTriggers()
{
  return &type metadata for SubmitTriggers;
}

void type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)?, (uint64_t (*)(uint64_t))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PlacementProperties<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlacementProperties);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>));
  }
}

uint64_t getEnumTagSinglePayload for StackPlacement(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v7 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v12 = AssociatedTypeWitness;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 | 7;
  v16 = ((v14 + 16) & ~v14) + *(_QWORD *)(v9 + 64) + 7;
  if (v11 < a2)
  {
    if (((((((((((((((((((((((v16 + ((v13 + v15 + 1) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 43) & 0xFFFFFFFFFFFFFFF8)
                       + 31) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 102) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 47) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v11 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X0 }
  }
  if ((_DWORD)v7 == v11)
  {
    v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v22 = a1;
    v10 = v7;
    v12 = v5;
    return v21(v22, v10, v12);
  }
  v23 = (a1 + v13 + v15 + 1) & ~v15;
  if ((_DWORD)v10 == v11)
  {
    v22 = (v14 + ((v23 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14;
    v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    return v21(v22, v10, v12);
  }
  v24 = *(_QWORD *)((((((((v16 + v23) & 0xFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFF8) + 27) & 0xFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  return (v24 + 1);
}

uint64_t type metadata completion function for StackPlacement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = swift_checkMetadataState();
  v4 = v2;
  if (v5 <= 0x3F)
  {
    v4 = type metadata accessor for MinorProperties(319, v2, *(_QWORD *)(a1 + 24), v3);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v4;
}

uint64_t type metadata accessor for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StackPlacement);
}

uint64_t specialized StackPlacement.emit(_:at:size:anchor:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, CGFloat a6, CGFloat a7)
{
  return specialized StackPlacement.emit(_:at:size:anchor:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  return specialized StackPlacement.emit(_:at:size:anchor:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  return specialized StackPlacement.emit(_:at:size:anchor:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v7;
  uint64_t v8;
  CGSize v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v21;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __C::CGRect v28;

  v8 = v7;
  v21 = a3 & 1;
  v23 = a5 & 1;
  v12 = _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)0);
  v28.size.width = v12.width;
  v28.size.height = v12.height;
  v28.origin.x = a6;
  v28.origin.y = a7;
  UnitPoint.in(_:)(v28);
  if (*(_QWORD *)(v7 + 40) == 1)
    _ProposedSize.subscript.setter();
  _Placement.init(proposedSize:anchoring:at:)();
  v13 = IncrementalLayoutViewCache.item(data:)(a1 + 16);
  swift_beginAccess();
  result = swift_unownedRetainStrong();
  if (result)
  {
    v15 = *(_DWORD *)(result + 212);
    swift_release();
    *(_DWORD *)(v13 + 188) = v15;
    *(_DWORD *)(v13 + 196) = 0;
    *(_QWORD *)(v13 + 288) = a2;
    *(_QWORD *)(v13 + 296) = v21;
    *(_QWORD *)(v13 + 304) = a4;
    *(_QWORD *)(v13 + 312) = v23;
    *(_QWORD *)(v13 + 320) = v24;
    *(_QWORD *)(v13 + 328) = v25;
    *(_QWORD *)(v13 + 336) = v26;
    *(_QWORD *)(v13 + 344) = v27;
    *(_BYTE *)(v13 + 352) = 0;
    v16 = *(_QWORD *)(v8 + 256);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
      v16 = result;
    }
    v18 = *(_QWORD *)(v16 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    if (v18 >= v17 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, (char *)v16);
      v16 = result;
    }
    *(_QWORD *)(v16 + 16) = v18 + 1;
    v19 = v16 + 72 * v18;
    *(_QWORD *)(v19 + 32) = v13;
    *(_QWORD *)(v19 + 40) = a2;
    *(_BYTE *)(v19 + 48) = v21;
    *(_QWORD *)(v19 + 56) = a4;
    *(_BYTE *)(v19 + 64) = v23;
    *(_QWORD *)(v19 + 72) = v24;
    *(_QWORD *)(v19 + 80) = v25;
    *(_QWORD *)(v19 + 88) = v26;
    *(_QWORD *)(v19 + 96) = v27;
    *(_QWORD *)(v8 + 256) = v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  return specialized StackPlacement.emit(_:at:size:anchor:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v7;
  uint64_t v8;
  CGSize v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v21;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __C::CGRect v28;

  v8 = v7;
  v21 = a3 & 1;
  v23 = a5 & 1;
  v12 = _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)0);
  v28.size.width = v12.width;
  v28.size.height = v12.height;
  v28.origin.x = a6;
  v28.origin.y = a7;
  UnitPoint.in(_:)(v28);
  if (*(_QWORD *)(v7 + 32) == 1)
    _ProposedSize.subscript.setter();
  _Placement.init(proposedSize:anchoring:at:)();
  v13 = IncrementalLayoutViewCache.item(data:)(a1 + 16);
  swift_beginAccess();
  result = swift_unownedRetainStrong();
  if (result)
  {
    v15 = *(_DWORD *)(result + 212);
    swift_release();
    *(_DWORD *)(v13 + 188) = v15;
    *(_DWORD *)(v13 + 196) = 0;
    *(_QWORD *)(v13 + 288) = a2;
    *(_QWORD *)(v13 + 296) = v21;
    *(_QWORD *)(v13 + 304) = a4;
    *(_QWORD *)(v13 + 312) = v23;
    *(_QWORD *)(v13 + 320) = v24;
    *(_QWORD *)(v13 + 328) = v25;
    *(_QWORD *)(v13 + 336) = v26;
    *(_QWORD *)(v13 + 344) = v27;
    *(_BYTE *)(v13 + 352) = 0;
    v16 = *(_QWORD *)(v8 + 248);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
      v16 = result;
    }
    v18 = *(_QWORD *)(v16 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    if (v18 >= v17 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, (char *)v16);
      v16 = result;
    }
    *(_QWORD *)(v16 + 16) = v18 + 1;
    v19 = v16 + 72 * v18;
    *(_QWORD *)(v19 + 32) = v13;
    *(_QWORD *)(v19 + 40) = a2;
    *(_BYTE *)(v19 + 48) = v21;
    *(_QWORD *)(v19 + 56) = a4;
    *(_BYTE *)(v19 + 64) = v23;
    *(_QWORD *)(v19 + 72) = v24;
    *(_QWORD *)(v19 + 80) = v25;
    *(_QWORD *)(v19 + 88) = v26;
    *(_QWORD *)(v19 + 96) = v27;
    *(_QWORD *)(v8 + 248) = v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for PagingBehavior()
{
  return &type metadata for PagingBehavior;
}

uint64_t type metadata completion function for OpenURLContext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for OpenURLContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OpenURLContext;
  if (!type metadata singleton initialization cache for OpenURLContext)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for HVGridGeometry()
{
  return &type metadata for HVGridGeometry;
}

ValueMetadata *type metadata accessor for FocusStoreList()
{
  return &type metadata for FocusStoreList;
}

void type metadata accessor for AnimatablePair<CGFloat, CGFloat>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<CGFloat, CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    v0 = type metadata accessor for AnimatablePair();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<CGFloat, CGFloat>);
  }
}

unint64_t lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout;
  if (!lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2648], MEMORY[0x1E0CE2660]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout);
  }
  return result;
}

_QWORD *assignWithCopy for _TaskModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t type metadata completion function for _TaskModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TaskPriority();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TaskModifier.Child()
{
  lazy protocol witness table accessor for type _TaskModifier.Child and conformance _TaskModifier.Child();
  return static AsyncAttribute.flags.getter();
}

_QWORD *assignWithCopy for _TaskModifier.InnerModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 20);
  v12 = (char *)a1 + v11;
  v13 = (_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + v11) = *v13;
  swift_retain();
  swift_release();
  *((_QWORD *)v12 + 1) = v13[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t type metadata completion function for _TaskModifier.InnerModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _TaskModifier(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for _TabViewValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + (v8 | 7)) & ~(v8 | 7);
  v10 = ~v8;
  v11 = v8 + 16;
  v12 = *(_QWORD *)(v7 + 64);
  v13 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v13 + v8 + 8) & v10);
    v16 = v11 & ~v8;
    if (!(_DWORD)result)
    {
LABEL_5:
      swift_release();
      swift_release();
      result = (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v13 + v8 + 8) & v10, v6);
    }
  }
  else
  {
    v14 = *v13;
    if ((unint64_t)*v13 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    result = (v14 + 1);
    v16 = v11 & ~v8;
    if ((_DWORD)v14 == -1)
      goto LABEL_5;
  }
  if (*(_QWORD *)(((v12 + v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t assignWithCopy for _TabViewValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  int v31;
  uint64_t v32;
  size_t v33;
  size_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = ~v9;
  v15 = *(_QWORD *)(v8 + 64);
  v16 = ((v9 + 16) & ~v9) + v15;
  v17 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v35 = v7;
  if ((v13 & 0x80000000) == 0)
  {
    v18 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = *v18;
    if ((unint64_t)*v18 >= 0xFFFFFFFF)
      LODWORD(v19) = -1;
    v20 = v19 + 1;
    if (*v17 > 0xFFFFFFFEuLL)
      goto LABEL_5;
LABEL_8:
    if (v20)
      goto LABEL_9;
    *v11 = *v12;
    *v17 = *v18;
    v34 = v16;
    v23 = ((unint64_t)v17 + v9 + 8) & v14;
    v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v25 = v23;
    v16 = v34;
    v24(v25, ((unint64_t)v18 + v9 + 8) & v14, v35);
    goto LABEL_12;
  }
  v32 = a1;
  v33 = ((v9 + 16) & ~v9) + v15;
  v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  v31 = v21(((unint64_t)v17 + v9 + 8) & v14, v13, v7);
  v22 = v7;
  v18 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = v33;
  v20 = v21(((unint64_t)v18 + v9 + 8) & v14, v13, v22);
  a1 = v32;
  if (v31)
    goto LABEL_8;
LABEL_5:
  if (v20)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v17 + v9 + 8) & v14, v35);
LABEL_9:
    memcpy(v11, v12, v16);
    goto LABEL_12;
  }
  *v11 = *v12;
  swift_retain();
  swift_release();
  *v17 = *v18;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v17 + v9 + 8) & v14, ((unint64_t)v18 + v9 + 8) & v14, v35);
LABEL_12:
  v26 = ((unint64_t)v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 8);
  if (*(_QWORD *)(v26 + 8) < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
      *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_18:
    v29 = *(_OWORD *)v27;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    *(_OWORD *)v26 = v29;
    return a1;
  }
  if (v28 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_18;
  }
  *(_QWORD *)v26 = *(_QWORD *)v27;
  swift_retain();
  swift_release();
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  return a1;
}

uint64_t type metadata completion function for _TabViewValue(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    result = type metadata accessor for TabViewStyleConfiguration(319, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), v3);
    if (v5 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void _TabViewValue.init(style:configuration:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for _TabViewValue();
}

uint64_t sub_186F49628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v7 + *(int *)(a1 + 52);
  v9 = type metadata accessor for TabViewStyleConfiguration(0, v5, v4, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, v6, v9);
}

void protocol witness for Rule.value.getter in conformance _TabViewValue<A, B>.Init2(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _TabViewValue.Init2.value.getter(a1[2], a1[3], a1[4], a1[5], a2);
}

void base witness table accessor for _AttributeBody in _TabViewValue<A, B>.Init2()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for _TabViewValue.Init2()
{
  JUMPOUT(0x18D75FF28);
}

void _TabViewValue.Init2.value.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t Value;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a5;
  v28 = a3;
  v8 = type metadata accessor for TabViewStyleConfiguration(0, a2, a4, a3);
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v25 - v10;
  v13 = type metadata accessor for ResolvedTabView(0, a2, a4, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v25 - v16;
  v18 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, Value, a1);
  v24 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v24, v13);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v11, v17, v26);
  _TabViewValue.init(style:configuration:)((uint64_t)v22, a1, v27);
}

void type metadata accessor for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>)
  {
    type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ChangedGesture<PhysicalButtonPressGesture> and conformance _ChangedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>, MEMORY[0x1E0CE2F88]);
    v0 = type metadata accessor for _EndedGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>);
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata accessor for ToolbarBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarBridge);
}

uint64_t ToolbarBridge.uiSafeAreaTransitionState.getter()
{
  return Toolbar.PlatformVended.uiSafeAreaTransitionState.getter();
}

BOOL specialized ToolbarBridge.hasEntries(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (uint64_t *)(v1 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  v4 = *v3;
  if (*(_QWORD *)(v4 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 24 * v5);
    v8 = *v7;
    v9 = v7[1];
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    outlined consume of Toolbar.LocationStorage?(v8);
    v10 = *(_QWORD *)(v9 + 16);
    swift_bridgeObjectRelease();
    return v10 != 0;
  }
  else
  {
    swift_endAccess();
    return 0;
  }
}

uint64_t static StyleModifier._viewListCount(inputs:body:)(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v6 = *((_DWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 3);
  v17 = *a1;
  v18 = v6;
  v19 = v7;
  type metadata accessor for StyleModifierType(0, a4, a5, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for StyleInput(0, AssociatedTypeWitness, v9, v10);
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v11);
  _ViewListCountInputs.append<A, B>(_:to:)();
  v14 = v17;
  v15 = v18;
  v16 = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = a2(&v14);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v12;
}

void type metadata accessor for PPTTestBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PPTTestBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    v6 = type metadata accessor for PPTTestBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PPTTestBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

ValueMetadata *type metadata accessor for FocusedValues()
{
  return &type metadata for FocusedValues;
}

uint64_t outlined consume of _ViewList_ID??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1C80], MEMORY[0x1E0CE1C78]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect;
  if (!lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1BC8], MEMORY[0x1E0CE1BE0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect);
  }
  return result;
}

unint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.SelectionBasedStorageKey<A>@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;
  int v3;
  int v4;

  result = static _GraphInputs.SelectionBasedStorageKey.defaultValue.getter();
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  return result;
}

uint64_t type metadata accessor for _GraphInputs.SelectionBasedStorageKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _GraphInputs.SelectionBasedStorageKey);
}

unint64_t static _GraphInputs.SelectionBasedStorageKey.defaultValue.getter()
{
  return *MEMORY[0x1E0CFED28] | ((unint64_t)*MEMORY[0x1E0CFED28] << 32);
}

uint64_t _GraphInputs.selectionStorage<A>(forType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v4 = type metadata accessor for _GraphInputs.SelectionBasedStorageKey(0, a2, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.SelectionBasedStorageKey<A>, v4);
  _GraphInputs.subscript.getter();
  return v6;
}

uint64_t protocol witness for PlatformLayerFactory.platformLayerType.getter in conformance _CALayerView<A>(uint64_t a1)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _CALayerView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CALayerView<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _CALayerView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _CALayerView._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t _CALayerView.platformLayerType.getter(uint64_t a1)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)(a1 + 16));
}

uint64_t static _CALayerView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for _CALayerView(0, a3, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CALayerView<A>, v4);
  return static RendererLeafView.makeLeafView(view:inputs:)();
}

uint64_t type metadata completion function for ViewThatFits()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ViewModifier.requiring<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InterfaceIdiomPredicate();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v9);
  return StaticIf<>.init<>(_:then:)((uint64_t)v8, a2, a3);
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AEFBA8, (uint64_t)&type metadata for ResetContentMarginModifier, (uint64_t)&protocol witness table for ResetContentMarginModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AF4A38, (uint64_t)&type metadata for TransformScrollDeceleration, (uint64_t)&protocol witness table for TransformScrollDeceleration);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AD6C48, (uint64_t)&type metadata for ContentMarginModifier, (uint64_t)&protocol witness table for ContentMarginModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static InjectKeyModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AF7000, (uint64_t)&type metadata for ListHasStackBehaviorModifier, (uint64_t)&protocol witness table for ListHasStackBehaviorModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ACD3F0, (uint64_t)&type metadata for ContentModeModifier, (uint64_t)&protocol witness table for ContentModeModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static RefreshableModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static ResolvedScrollBehaviorModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ADC218, (uint64_t)&type metadata for InspectorBarManagement, (uint64_t)&protocol witness table for InspectorBarManagement);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AE69D0, (uint64_t)&type metadata for SearchAdjustmentModifier, (uint64_t)&protocol witness table for SearchAdjustmentModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B018B0, (uint64_t)&type metadata for SearchDisabledAdjustmentModifier, (uint64_t)&protocol witness table for SearchDisabledAdjustmentModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AF7B70, (uint64_t)&type metadata for ResetFormEnvironmentModifier, (uint64_t)&protocol witness table for ResetFormEnvironmentModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B018E0, (uint64_t (*)(_QWORD))type metadata accessor for SearchEnvironmentWritingModifier, (uint64_t)&protocol witness table for SearchEnvironmentWritingModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AFD8D8, (uint64_t)&type metadata for ResetSearchEnvironmentModifier, (uint64_t)&protocol witness table for ResetSearchEnvironmentModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AD7018, (uint64_t)&type metadata for EditModeScopeModifier.TransformModifier, (uint64_t)&protocol witness table for EditModeScopeModifier.TransformModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B06368, (uint64_t)&type metadata for NavigationColumnEnvironmentTransform, (uint64_t)&protocol witness table for NavigationColumnEnvironmentTransform);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B063F8, (uint64_t)&type metadata for NavigationCommonTransformEnvironment, (uint64_t)&protocol witness table for NavigationCommonTransformEnvironment);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ABF3F0, type metadata accessor for KeyPressModifier, (uint64_t)&protocol witness table for KeyPressModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B08BC8, (uint64_t)&type metadata for ContentConfigurationBasedRootEnvironment, (uint64_t)&protocol witness table for ContentConfigurationBasedRootEnvironment);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B05B30, (uint64_t)&type metadata for UpdateEnvironmentToAllowedBehaviors, (uint64_t)&protocol witness table for UpdateEnvironmentToAllowedBehaviors);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AF8350, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomizationModifier, (uint64_t)&protocol witness table for TabViewCustomizationModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ADA518, (uint64_t)&type metadata for _SymbolEffectModifier, (uint64_t)&protocol witness table for _SymbolEffectModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ADFA40, (uint64_t)&type metadata for _SymbolEffectsModifier, (uint64_t)&protocol witness table for _SymbolEffectsModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AFBC50, (uint64_t)&type metadata for _SymbolEffectsRemovedModifier, (uint64_t)&protocol witness table for _SymbolEffectsRemovedModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B00708, type metadata accessor for _IndefiniteSymbolEffectModifier, (uint64_t)&protocol witness table for _IndefiniteSymbolEffectModifier);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B01ED0, type metadata accessor for _ConditionalSymbolEffectModifier, (uint64_t)&protocol witness table for _ConditionalSymbolEffectModifier);
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static ResolvedScrollBehaviorModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AEFBA8, (uint64_t)&type metadata for ResetContentMarginModifier, (uint64_t)&protocol witness table for ResetContentMarginModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AF4A38, (uint64_t)&type metadata for TransformScrollDeceleration, (uint64_t)&protocol witness table for TransformScrollDeceleration);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ABF3F0, type metadata accessor for KeyPressModifier, (uint64_t)&protocol witness table for KeyPressModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static InjectKeyModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ACD3F0, (uint64_t)&type metadata for ContentModeModifier, (uint64_t)&protocol witness table for ContentModeModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static RefreshableModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AD6C48, (uint64_t)&type metadata for ContentMarginModifier, (uint64_t)&protocol witness table for ContentMarginModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AD7018, (uint64_t)&type metadata for EditModeScopeModifier.TransformModifier, (uint64_t)&protocol witness table for EditModeScopeModifier.TransformModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ADC218, (uint64_t)&type metadata for InspectorBarManagement, (uint64_t)&protocol witness table for InspectorBarManagement);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AE69D0, (uint64_t)&type metadata for SearchAdjustmentModifier, (uint64_t)&protocol witness table for SearchAdjustmentModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AF7000, (uint64_t)&type metadata for ListHasStackBehaviorModifier, (uint64_t)&protocol witness table for ListHasStackBehaviorModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AF7B70, (uint64_t)&type metadata for ResetFormEnvironmentModifier, (uint64_t)&protocol witness table for ResetFormEnvironmentModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AF8350, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomizationModifier, (uint64_t)&protocol witness table for TabViewCustomizationModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AFD8D8, (uint64_t)&type metadata for ResetSearchEnvironmentModifier, (uint64_t)&protocol witness table for ResetSearchEnvironmentModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B018B0, (uint64_t)&type metadata for SearchDisabledAdjustmentModifier, (uint64_t)&protocol witness table for SearchDisabledAdjustmentModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B018E0, (uint64_t (*)(_QWORD))type metadata accessor for SearchEnvironmentWritingModifier, (uint64_t)&protocol witness table for SearchEnvironmentWritingModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B05B30, (uint64_t)&type metadata for UpdateEnvironmentToAllowedBehaviors, (uint64_t)&protocol witness table for UpdateEnvironmentToAllowedBehaviors);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B06368, (uint64_t)&type metadata for NavigationColumnEnvironmentTransform, (uint64_t)&protocol witness table for NavigationColumnEnvironmentTransform);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B063F8, (uint64_t)&type metadata for NavigationCommonTransformEnvironment, (uint64_t)&protocol witness table for NavigationCommonTransformEnvironment);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B08BC8, (uint64_t)&type metadata for ContentConfigurationBasedRootEnvironment, (uint64_t)&protocol witness table for ContentConfigurationBasedRootEnvironment);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ADA518, (uint64_t)&type metadata for _SymbolEffectModifier, (uint64_t)&protocol witness table for _SymbolEffectModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1ADFA40, (uint64_t)&type metadata for _SymbolEffectsModifier, (uint64_t)&protocol witness table for _SymbolEffectsModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1AFBC50, (uint64_t)&type metadata for _SymbolEffectsRemovedModifier, (uint64_t)&protocol witness table for _SymbolEffectsRemovedModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B00708, type metadata accessor for _IndefiniteSymbolEffectModifier, (uint64_t)&protocol witness table for _IndefiniteSymbolEffectModifier);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))&off_1E1B01ED0, type metadata accessor for _ConditionalSymbolEffectModifier, (uint64_t)&protocol witness table for _ConditionalSymbolEffectModifier);
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;

  v4 = *(_DWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 64);
  v24 = *(_OWORD *)(a2 + 48);
  v25 = v7;
  v26 = v4;
  v8 = *(_OWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  v22 = v8;
  v23 = v6;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ScrollTargetModifier>, (uint64_t)&type metadata for ScrollTargetModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphInputs.scrollTargetRole.setter();
  _GraphInputs.scrollTargetRemovePreference.setter();
  v12 = v21;
  v13 = DWORD2(v21);
  v14 = v22;
  v15 = v23 | 0x80000000000;
  v16 = *((_QWORD *)&v23 + 1);
  v17 = v24;
  v18 = v11;
  v19 = v5;
  v20 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<StackDepthModifier>, (uint64_t)&type metadata for StackDepthModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
  lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>();
  _GraphInputs.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ObservableDocumentBoxModifier>, (uint64_t)&type metadata for ObservableDocumentBoxModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput();
  result = PropertyList.subscript.getter();
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    PropertyList.subscript.setter();
    v9 = v18;
    v10 = DWORD2(v18);
    v11 = *(_QWORD *)v19;
    v12 = *(_OWORD *)&v19[8];
    v13 = *(_QWORD *)&v19[24];
    v14 = *(_QWORD *)v20;
    v15 = *(_OWORD *)&v20[8];
    v16 = *(_QWORD *)&v20[24];
    v17 = v21;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v8 = swift_bridgeObjectRetain();
    a3(v8, &v9);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  return result;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationPresentationAdaptorModifier>, (uint64_t)&type metadata for NavigationPresentationAdaptorModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_ReclaimForEachElementsViewModifier>, (uint64_t)&type metadata for _ReclaimForEachElementsViewModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity;
  if (!lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewIdentity, &type metadata for ViewIdentity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity;
  if (!lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewIdentity, &type metadata for ViewIdentity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity);
  }
  return result;
}

void type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

ValueMetadata *type metadata accessor for TableRowView()
{
  return &type metadata for TableRowView;
}

unint64_t lazy protocol witness table accessor for type TableRowView and conformance TableRowView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableRowView and conformance TableRowView;
  if (!lazy protocol witness table cache variable for type TableRowView and conformance TableRowView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowView, &type metadata for TableRowView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowView and conformance TableRowView);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for TableRowView(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TableRowView and conformance TableRowView();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for StatusBarKey.StatusBar()
{
  return &type metadata for StatusBarKey.StatusBar;
}

uint64_t type metadata accessor for SheetContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SheetContent);
}

uint64_t static SceneBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t assignWithTake for RootModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a2 + 48))
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    else
      outlined destroy of AnyHashable(a1 + 24);
  }
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = (_OWORD *)(a2 + 72);
  v6 = *(unsigned __int8 *)(a1 + 88);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    if (v7 != 255)
    {
      v8 = *(_QWORD *)(a1 + 72);
      v9 = *(_QWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 72) = *v5;
      *(_BYTE *)(a1 + 88) = v7 & 1;
      outlined consume of SceneID(v8, v9, v6 & 1);
      goto LABEL_10;
    }
    outlined destroy of SceneID(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *v5;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
LABEL_10:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithCopy for RootModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  char v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 24);
      v7 = *(_QWORD *)(a2 + 56);
      v8 = *(_OWORD *)(a2 + 40);
      *v4 = *v5;
      *(_OWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 56) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *v4 = v9;
    *(_OWORD *)(a1 + 40) = v10;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v11 = (__int128 *)(a1 + 72);
  v12 = (__int128 *)(a2 + 72);
  v13 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v13 == 255)
    {
      v15 = *v12;
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *v11 = v15;
    }
    else
    {
      v22 = v13 & 1;
      v23 = *(_QWORD *)(a2 + 72);
      v24 = *(_QWORD *)(a2 + 80);
      outlined copy of SceneID(v23, v24, v13 & 1);
      *(_QWORD *)(a1 + 72) = v23;
      *(_QWORD *)(a1 + 80) = v24;
      *(_BYTE *)(a1 + 88) = v22;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of SceneID(a1 + 72);
    v14 = *(_BYTE *)(a2 + 88);
    *v11 = *v12;
    *(_BYTE *)(a1 + 88) = v14;
  }
  else
  {
    v16 = v13 & 1;
    v17 = *(_QWORD *)(a2 + 72);
    v18 = *(_QWORD *)(a2 + 80);
    outlined copy of SceneID(v17, v18, v13 & 1);
    v19 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 80);
    v21 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v18;
    *(_BYTE *)(a1 + 88) = v16;
    outlined consume of SceneID(v19, v20, v21);
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

unint64_t lazy protocol witness table accessor for type RootModifier and conformance RootModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RootModifier and conformance RootModifier;
  if (!lazy protocol witness table cache variable for type RootModifier and conformance RootModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RootModifier, &type metadata for RootModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootModifier and conformance RootModifier);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedList<A>(int *a1)
{
  return static ResolvedList._makeViewList(view:inputs:)(a1);
}

_QWORD *assignWithCopy for ResolvedList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *result;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;

  v3 = a2;
  v44 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v44 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_DWORD *)(v4 + 80) & 0xF8;
  v8 = v7 | 7;
  v9 = ~(v7 | 7);
  v10 = (v7 + 23) & v9;
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (unint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = *v12;
  if (*v11 >= 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v43 = a1;
      swift_retain();
      swift_release();
      *v11 = *v12;
      swift_retain();
      swift_release();
      result = v43;
      v15 = (unint64_t)v11 + v8 + 8;
      v16 = (_QWORD *)(v15 & v9);
      v17 = (unint64_t)v12 + v8 + 8;
      v18 = (_QWORD *)(v17 & v9);
      if ((v15 & v9) == (v17 & v9))
        return result;
      if (v6)
        v19 = v5;
      else
        v19 = v5 + 1;
      if (v19 <= v5)
        v20 = v5;
      else
        v20 = v19;
      if (v20 <= 8)
        v21 = 8;
      else
        v21 = v20;
      v22 = *((unsigned __int8 *)v16 + v21);
      if (v22 >= 3)
      {
        if (v21 <= 3)
          v23 = v21;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      if (v22 == 2)
        goto LABEL_75;
      if (v22 != 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v4 + 48))(v16, 1, v44))
LABEL_75:
        (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v16, v44);
LABEL_77:
      v40 = *((unsigned __int8 *)v18 + v21);
      if (v40 >= 3)
      {
        if (v21 <= 3)
          v41 = v21;
        else
          v41 = 4;
        __asm { BR              X12 }
      }
      if (v40 == 2)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(v16, v18, v44);
        v42 = 2;
LABEL_91:
        *((_BYTE *)v16 + v21) = v42;
        return v43;
      }
      if (v40 == 1)
      {
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v4 + 48))(v18, 1, v44))
        {
          memcpy(v16, v18, v19);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(v16, v18, v44);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v16, 0, 1, v44);
        }
        v42 = 1;
        goto LABEL_91;
      }
      *v16 = *v18;
      *((_BYTE *)v16 + v21) = 0;
      goto LABEL_88;
    }
    v31 = a1;
    swift_release();
    swift_release();
    v32 = ((unint64_t)v11 + v8 + 8) & v9;
    if (v6)
      v33 = v5;
    else
      v33 = v5 + 1;
    if (v33 <= v5)
      v33 = v5;
    if (v33 <= 8)
      v34 = 8;
    else
      v34 = v33;
    v35 = *(unsigned __int8 *)(v32 + v34);
    if (v35 >= 3)
    {
      if (v34 <= 3)
        v36 = v34;
      else
        v36 = 4;
      __asm { BR              X12 }
    }
    if (v35 == 2)
      goto LABEL_68;
    if (v35 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_71;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v32, 1, v44))
LABEL_68:
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v32, v44);
LABEL_71:
    v38 = v34 + v10 + 1;
    a1 = v31;
    a2 = v3;
LABEL_72:
    memcpy(a1, a2, v38);
    return v31;
  }
  if (v13 < 0xFFFFFFFF)
  {
    if (v6)
      v37 = *(_QWORD *)(v4 + 64);
    else
      v37 = v5 + 1;
    if (v37 <= v5)
      v37 = *(_QWORD *)(v4 + 64);
    if (v37 <= 8)
      v37 = 8;
    v38 = v37 + v10 + 1;
    v31 = a1;
    goto LABEL_72;
  }
  v43 = a1;
  *a1 = *a2;
  *v11 = *v12;
  v24 = (_QWORD *)(((unint64_t)v11 + v8 + 8) & v9);
  v25 = (_QWORD *)(((unint64_t)v12 + v8 + 8) & v9);
  if (v6)
    v26 = v5;
  else
    v26 = v5 + 1;
  if (v26 <= v5)
    v27 = v5;
  else
    v27 = v26;
  if (v27 <= 8)
    v28 = 8;
  else
    v28 = v27;
  v29 = *((unsigned __int8 *)v25 + v28);
  swift_retain();
  swift_retain();
  if (v29 >= 3)
  {
    if (v28 <= 3)
      v30 = v28;
    else
      v30 = 4;
    __asm { BR              X11 }
  }
  if (v29 == 2)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(v24, v25, v44);
    v39 = 2;
  }
  else
  {
    if (v29 != 1)
    {
      *v24 = *v25;
      *((_BYTE *)v24 + v28) = 0;
LABEL_88:
      swift_bridgeObjectRetain();
      return v43;
    }
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v4 + 48))(v25, 1, v44))
    {
      memcpy(v24, v25, v26);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(v24, v25, v44);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v24, 0, 1, v44);
    }
    v39 = 1;
  }
  *((_BYTE *)v24 + v28) = v39;
  return v43;
}

uint64_t type metadata completion function for ResolvedList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v4 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v4);
  result = type metadata accessor for _ListStyleConfiguration(319, v4, v5, v6);
  if (v8 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static ResolvedList._makeViewList(view:inputs:)(int *a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD v5[3];

  v1 = *a1;
  lazy protocol witness table accessor for type ListStyleInput and conformance ListStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    v5[0] = v1;
    static ResolvedList.makeViewList<A>(view:style:inputs:)((uint64_t)v5, 0);
  }
  v5[0] = v1;
  return (*(uint64_t (**)(_DWORD *))(v4 + 16))(v5);
}

void *type metadata accessor for Fix_53164375()
{
  return &unk_1E1AB2228;
}

uint64_t type metadata completion function for ButtonAction()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LinkDestination();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void type metadata accessor for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>)
  {
    lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
    v0 = type metadata accessor for BothFeatures();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>);
  }
}

void base witness table accessor for _AttributeBody in AnchorWriter<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnchorWriter<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnchorWriter<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for AnchorWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnchorWriter);
}

ValueMetadata *type metadata accessor for AlertStorage()
{
  return &type metadata for AlertStorage;
}

uint64_t associated type witness table accessor for Scene.Body : Scene in WindowGroup<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for WindowGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v6 = (a1 + v5 + 32) & ~v5;
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v7 = 16;
  else
    v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v6 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
    swift_release();
  else
    (*(void (**)(uint64_t))(v4 + 8))(v6);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)((((((v7 + v6 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for WindowGroup(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;

  v6 = a2[3];
  if (v6 < 0xFFFFFFFF)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    outlined copy of Text.Storage(*a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  v13 = v12 + 39;
  v14 = v12 + 39 + a1;
  v15 = ~v12 & 0xFFFFFFFFFFFFFFF8;
  v16 = (_QWORD *)(v14 & v15);
  v17 = (_QWORD *)(((unint64_t)a2 + v13) & v15);
  if (*(_QWORD *)(v11 + 64) <= 0x10uLL)
    v18 = 16;
  else
    v18 = *(_QWORD *)(v11 + 64);
  v19 = *((unsigned __int8 *)v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  if (v19 == 1)
  {
    v21 = v17[1];
    *v16 = *v17;
    *(_QWORD *)((v14 & v15) + 8) = v21;
    swift_retain();
    v22 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v11 + 16))(v16, v17);
    v22 = 0;
  }
  *((_BYTE *)v16 + v18) = v22;
  v23 = (_QWORD *)(((unint64_t)v16 + v18 + 8) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v17 + v18 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v23[1] = v24[1];
  v25 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
  *v26 = *v25;
  v27 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = (unint64_t *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = *v28;
  swift_bridgeObjectRetain();
  if (v29 < 0xFFFFFFFF)
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
  }
  else
  {
    v30 = v28[1];
    *(_QWORD *)v27 = v29;
    *(_QWORD *)(v27 + 8) = v30;
    swift_retain();
  }
  return a1;
}

uint64_t type metadata completion function for WindowGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for WindowGroupRootContent(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t WindowGroup.init(content:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  int *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v8 = (int *)type metadata accessor for WindowGroup(0, a2, a3, a3);
  *a4 = 0u;
  a4[1] = 0u;
  v9 = (_QWORD *)((char *)a4 + v8[10]);
  *v9 = 0;
  v9[1] = 0;
  *(_QWORD *)((char *)a4 + v8[11]) = 0;
  v10 = (_QWORD *)((char *)a4 + v8[12]);
  *v10 = 0;
  v10[1] = 0;
  a1();
  type metadata accessor for WindowGroupRootContent(0, a2, a3, v11);
  return swift_storeEnumTagMultiPayload();
}

uint64_t WindowGroup.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for WindowGroupRootContent(0, v7, *(_QWORD *)(a1 + 24), a2);
  v9 = WindowGroupRootContent.makeContent()(v8);
  v11 = *v3;
  v10 = v3[1];
  v12 = v3[2];
  v13 = v3[3];
  v14 = *(int *)(a1 + 40);
  v15 = *(uint64_t *)((char *)v3 + *(int *)(a1 + 44));
  v16 = (uint64_t *)((char *)v3 + *(int *)(a1 + 48));
  v17 = *v16;
  v18 = v16[1];
  v19 = (uint64_t *)((char *)v4 + v14);
  v20 = *v19;
  v21 = v19[1];
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v10;
  a3[3] = v12;
  a3[4] = v13;
  a3[5] = v15;
  a3[6] = v17;
  a3[7] = v18;
  a3[8] = v20;
  a3[9] = v21;
  a3[10] = v7;
  outlined copy of Text?(v11, v10, v12, v13);
  outlined copy of AppIntentExecutor?(v17);
  return swift_bridgeObjectRetain();
}

uint64_t static ToolbarContentBuilder.buildIf<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

ValueMetadata *type metadata accessor for ToolbarRole.Role()
{
  return &type metadata for ToolbarRole.Role;
}

uint64_t type metadata completion function for ToolbarItem()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<ModifiedContent<AnyView, RootModifier>, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, RootModifier>, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, RootModifier>, SheetPreference.Key>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t SheetBridge.presenter.getter()
{
  uint64_t v0;
  uint64_t result;

  result = MEMORY[0x18D760234](v0 + direct field offset for SheetBridge.presenterOverride);
  if (!result)
  {
    result = MEMORY[0x18D760234](v0 + direct field offset for SheetBridge.host);
    if (result)
      _UIHostingView.presenterViewController.getter();
    __break(1u);
  }
  return result;
}

void SheetBridge.presenterOverride.getter()
{
  JUMPOUT(0x18D760234);
}

uint64_t SheetBridge.presentationState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  return outlined init with copy of PresentationState(v3, a1);
}

uint64_t SceneBridge.init()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_BYTE *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + 48) = -1;
  v2 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = v2;
  *(_QWORD *)(v0 + 72) = -1;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = v1;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 124) = 1;
  *(_DWORD *)(v0 + 128) = 0;
  *(_BYTE *)(v0 + 132) = 1;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 136) = 0;
  *(_WORD *)(v0 + 160) = 256;
  *(_QWORD *)(v0 + 168) = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_unknownObjectWeakAssign();
  return v0;
}

void SceneBridge.userActivityPreferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  objc_class *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  char *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  char *v39;
  objc_super v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v2 = v1;
  v41 = *a1;
  PreferenceList.subscript.getter();
  v4 = v42;
  v3 = v43;
  v5 = v44;
  if ((*(_BYTE *)(v1 + 124) & 1) == 0 && v45 != -1)
  {
    v6 = *(_DWORD *)(v1 + 120);
    if (v6 != -1 && v45 == v6)
    {
      outlined consume of FocusStore?(v42, v43);
      return;
    }
  }
  *(_DWORD *)(v1 + 120) = v45;
  *(_BYTE *)(v1 + 124) = 0;
  if (v3)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v8 = *(void **)(v1 + 112);
      if (v8)
      {
        v9 = *(char **)(v1 + 112);
      }
      else
      {
        v14 = (objc_class *)type metadata accessor for UserActivityTrackingInfo();
        v15 = (char *)objc_allocWithZone(v14);
        *(_QWORD *)&v15[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity] = 0;
        v16 = OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_handlers;
        *(_QWORD *)&v15[v16] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
        swift_weakInit();
        swift_weakAssign();
        v17 = (uint64_t *)&v15[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_activityType];
        *v17 = v4;
        v17[1] = v3;
        v40.receiver = v15;
        v40.super_class = v14;
        swift_bridgeObjectRetain();
        v9 = (char *)objc_msgSendSuper2(&v40, sel_init);
      }
      v18 = OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity;
      v19 = *(void **)&v9[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity];
      if (v19)
      {
        v20 = v8;
        v21 = objc_msgSend(v19, sel_activityType);
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v24 = v23;

        if (v22 == v4 && v3 == v24)
        {
          swift_bridgeObjectRelease();
LABEL_28:
          v37 = *(void **)&v9[v18];
          if (v37)
            objc_msgSend(v37, sel_setNeedsSave_, 1);
          swift_bridgeObjectRelease();
LABEL_33:
          v39 = &v9[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_handlers];
          swift_beginAccess();
          *(_QWORD *)v39 = v5;

          swift_bridgeObjectRelease();
          return;
        }
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v26 & 1) != 0)
          goto LABEL_28;
      }
      else
      {
        v27 = v8;
      }
      v28 = objc_allocWithZone(MEMORY[0x1E0CB3B10]);
      swift_bridgeObjectRetain();
      v29 = (void *)MEMORY[0x18D75CC88](v4, v3);
      swift_bridgeObjectRelease();
      v30 = objc_msgSend(v28, sel_initWithActivityType_, v29);

      objc_msgSend(v30, sel_becomeCurrent);
      v31 = v30;
      UserActivityTrackingInfo.userActivity.setter(v30);
      v32 = *(void **)(v2 + 112);
      *(_QWORD *)(v2 + 112) = v9;
      v33 = v9;

      v34 = *(void **)&v9[v18];
      v35 = (void *)MEMORY[0x18D760234](v2 + 40);
      if (v35)
      {
        v36 = v35;
        objc_msgSend(v35, sel_setUserActivity_, v34);
      }
      else
      {
        v36 = *(void **)(v2 + 80);
        *(_QWORD *)(v2 + 80) = v34;
        v38 = v34;
      }
      swift_bridgeObjectRelease();

      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = *(void **)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;

  v11 = (void *)MEMORY[0x18D760234](v1 + 40);
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, sel_setUserActivity_, 0);

  }
  else
  {
    v13 = *(void **)(v1 + 80);
    *(_QWORD *)(v1 + 80) = 0;

  }
}

void SceneBridge.setActivationConditions(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  char v8;
  int v9;
  id v10;
  uint64_t v11;
  char v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;

  if (a1 || *(_QWORD *)(v2 + 96))
  {
    v5 = (void *)MEMORY[0x18D760234](v2 + 32);
    if (v5)
    {
      v20 = v5;
      v6 = objc_msgSend(v5, sel_activationConditions);
      v21 = v6;
      if (a1)
      {
        if (*(_QWORD *)(v2 + 96)
          && (v7 = swift_bridgeObjectRetain(),
              v8 = specialized static Set.== infix(_:_:)(v7, a1),
              swift_bridgeObjectRelease(),
              (v8 & 1) != 0))
        {
          v9 = 0;
        }
        else
        {
          v10 = specialized SceneBridge.buildActivationConditions(_:)(a1);
          objc_msgSend(v21, sel_setPrefersToActivateForTargetContentIdentifierPredicate_, v10);

          v9 = 1;
        }
        if (*(_QWORD *)(v2 + 96)
          && (v11 = swift_bridgeObjectRetain(),
              v12 = specialized static Set.== infix(_:_:)(v11, a2),
              swift_bridgeObjectRelease(),
              (v12 & 1) != 0))
        {
          if (!v9)
          {

            v13 = v20;
LABEL_17:

            return;
          }
        }
        else
        {
          v14 = specialized SceneBridge.buildActivationConditions(_:)(a2);
          objc_msgSend(v21, sel_setCanActivateForTargetContentIdentifierPredicate_, v14);

        }
        v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3BC8]), sel_init);
        v16 = objc_msgSend(v21, sel_prefersToActivateForTargetContentIdentifierPredicate);
        objc_msgSend(v15, sel_setPrefersToActivateForTargetContentIdentifierPredicate_, v16);

        v17 = objc_msgSend(v21, sel_canActivateForTargetContentIdentifierPredicate);
        objc_msgSend(v15, sel_setCanActivateForTargetContentIdentifierPredicate_, v17);

        v18 = v20;
        objc_msgSend(v18, sel_setActivationConditions_, v15);

        v19 = *(_QWORD *)(v2 + 96);
        *(_QWORD *)(v2 + 96) = a1;
        *(_QWORD *)(v2 + 104) = a2;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v19);
        return;
      }
      objc_msgSend(v20, sel_setActivationConditions_, v6);

      v13 = v21;
      goto LABEL_17;
    }
  }
}

uint64_t SceneBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v7[2];
  int v8;
  uint64_t v9;

  v2 = *a1;
  if (_SwiftUIIsAppleInternalBuild())
  {
    v9 = v2;
    PreferenceList.subscript.getter();
    *(_QWORD *)(v1 + 88) = v7[0];
    swift_bridgeObjectRelease();
  }
  v7[0] = v2;
  SceneBridge.userActivityPreferencesDidChange(_:)(v7);
  v9 = v2;
  PreferenceList.subscript.getter();
  v3 = v7[0];
  v4 = v7[1];
  if ((*(_BYTE *)(v1 + 132) & 1) != 0 || v8 == -1 || (v5 = *(_DWORD *)(v1 + 128), v5 == -1) || v8 != v5)
  {
    *(_DWORD *)(v1 + 128) = v8;
    *(_BYTE *)(v1 + 132) = 0;
    SceneBridge.setActivationConditions(_:)(v3, v4);
  }
  outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v3);
  swift_beginAccess();
  swift_retain();
  specialized VersionSeedTracker.didChange(_:action:)(v2, (_DWORD *)(v1 + 48), v1);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  specialized VersionSeedTracker.didChange(_:action:)(v2, (_DWORD *)(v1 + 72), v1);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  specialized VersionSeedTracker.didChange(_:action:)(v2, (_DWORD *)(v1 + 76), v1);
  swift_endAccess();
  return swift_release();
}

uint64_t SceneBridge.flushEnqueuedEvents(for:type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t i;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  _BYTE v21[40];
  _BYTE v22[32];

  v3 = v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 168);
  if (!*(_QWORD *)(v6 + 16))
    return swift_endAccess();
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v11 = v9 + 32;
    v12 = (uint64_t *)(v3 + 16);
    for (i = v10 - 1; ; --i)
    {
      outlined init with copy of Any(v11, (uint64_t)v22);
      if (static SceneBridge._devNullSceneBridge)
        v14 = static SceneBridge._devNullSceneBridge == v3;
      else
        v14 = 0;
      if (!v14)
      {
        AnyHashable.init<A>(_:)();
        swift_beginAccess();
        v15 = *v12;
        if (*(_QWORD *)(*v12 + 16)
          && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21), (v17 & 1) != 0))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
          swift_endAccess();
          swift_bridgeObjectRetain();
          outlined destroy of AnyHashable((uint64_t)v21);
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          if (*(_QWORD *)(v18 + 16))
          {
            specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
            if ((v19 & 1) != 0)
            {
              swift_retain();
              swift_bridgeObjectRelease();
              outlined destroy of AnyHashable((uint64_t)v21);
              PassthroughSubject.send(_:)();
              swift_release();
              goto LABEL_18;
            }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_endAccess();
        }
        outlined destroy of AnyHashable((uint64_t)v21);
      }
      SceneBridge.enqueueUnpublishedEvent(_:for:)((uint64_t)v22, a1, a2);
LABEL_18:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      if (!i)
        return swift_bridgeObjectRelease();
      v11 += 32;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)()
{
  uint64_t v0;

  return SceneBridge.flushEnqueuedEvents(for:type:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void type metadata accessor for LocationBox<UIKitNavigationBridgePresentationModeLocation>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LocationBox<UIKitNavigationBridgePresentationModeLocation>)
  {
    lazy protocol witness table accessor for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation();
    v0 = type metadata accessor for LocationBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<UIKitNavigationBridgePresentationModeLocation>);
  }
}

uint64_t storeEnumTagSinglePayload for ListPadding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

uint64_t specialized LazyHVStack<>.place(children:length:minorGeometry:emit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized LazyHVStack<>.place(children:length:minorGeometry:emit:)(a1, a2, a3, a4, a5, a6, a7, 1, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment);
}

{
  return specialized LazyHVStack<>.place(children:length:minorGeometry:emit:)(a1, a2, a3, a4, a5, a6, a7, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment);
}

uint64_t outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<ToolbarItemPlacement.Role>.Content, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1158]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  if ((a2 & 0x100) != 0)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = a2 & 1;
  }
  else
  {
    outlined copy of Environment<CGFloat?>.Content(result, a2, 0);
    v5 = static os_log_type_t.fault.getter();
    v6 = static Log.runtimeIssuesLog.getter();
    v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000187BDF1E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v9, -1, -1);
      MEMORY[0x18D760108](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat?>.Content(v4, a2, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  if ((a2 & 0x100) != 0)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = a2 & 1;
  }
  else
  {
    outlined copy of Environment<CGFloat?>.Content(result, a2, 0);
    v5 = static os_log_type_t.fault.getter();
    v6 = static Log.runtimeIssuesLog.getter();
    v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x8000000187BDF2A0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v9, -1, -1);
      MEMORY[0x18D760108](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat?>.Content(v4, a2, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t assignWithCopy for DragGesture(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = (__int128 *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1 + 8);
    if (*(_BYTE *)(a2 + 48))
    {
      v6 = *v4;
      v7 = v4[1];
      *(_OWORD *)((char *)v5 + 25) = *(__int128 *)((char *)v4 + 25);
      *v5 = v6;
      v5[1] = v7;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(_OWORD *, __int128 *))(v8 - 8))(v5, v4);
      *(_BYTE *)(a1 + 48) = 0;
    }
  }
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  return a1;
}

uint64_t type metadata completion function for DragGesture.Value()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DragGesture.Value(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DragGesture.Value);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self();
}

uint64_t AnyGradient.init(colors:locations:interpolations:)()
{
  lazy protocol witness table accessor for type CubicGradientProvider and conformance CubicGradientProvider();
  return AnyGradient.init<A>(provider:)();
}

ValueMetadata *type metadata accessor for ActionSheet.Presentation()
{
  return &type metadata for ActionSheet.Presentation;
}

_UNKNOWN **associated type witness table accessor for AlertControllerConvertible.Key : HostPreferenceKey in ActionSheet.Presentation()
{
  return &protocol witness table for ActionSheet.Presentation.Key;
}

ValueMetadata *type metadata accessor for ActionSheet.Presentation.Key()
{
  return &type metadata for ActionSheet.Presentation.Key;
}

void type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<TintShapeStyle>, MEMORY[0x1E0CE2A98], MEMORY[0x1E0CE2A88], MEMORY[0x1E0CE4650]);
    lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape();
    lazy protocol witness table accessor for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>);
  }
}

uint64_t destroy for _ListValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(void))(v4 + 8))();
  v6 = *(_QWORD *)(v4 + 64) + a1;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = (_QWORD *)((((v6 + v9) & ~v9) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 >= 0xFFFFFFFFuLL)
  {
    v11 = *(_DWORD *)(v8 + 84);
    v12 = *(_QWORD *)(v8 + 64);
    swift_release();
    swift_release();
    v13 = ((unint64_t)v10 + v9 + 8) & ~v9;
    if (v11)
      v14 = v12;
    else
      v14 = v12 + 1;
    if (v14 <= v12)
      v14 = v12;
    if (v14 <= 8)
      v14 = 8;
    v15 = *(unsigned __int8 *)(v13 + v14);
    if (v15 >= 3)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X13 }
    }
    if (v15 == 2)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
    if (v15 != 1)
      return swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
  }
  return result;
}

uint64_t type metadata completion function for _ListValue(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    v5 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), v3);
    v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v5);
    result = type metadata accessor for _ListStyleConfiguration(319, v5, v6, v7);
    if (v8 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void _ListValue.init(style:configuration:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for _ListValue();
}

uint64_t sub_186F4CC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = v7 + *(int *)(a1 + 52);
  v9 = type metadata accessor for SelectionManagerBox(255, v5, v4, a4);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v9);
  v12 = type metadata accessor for _ListStyleConfiguration(0, v9, v10, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v6, v12);
}

void protocol witness for Rule.value.getter in conformance _ListValue<A, B>.Init2(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _ListValue.Init2.value.getter(a1[2], a1[3], a1[4], a1[5], a2);
}

void base witness table accessor for _AttributeBody in _ListValue<A, B>.Init2()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for _ListValue.Init2()
{
  JUMPOUT(0x18D75FF28);
}

void _ListValue.Init2.value.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t Value;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;

  v30 = a5;
  v31 = a3;
  v29[0] = a2;
  v29[1] = a4;
  v8 = type metadata accessor for SelectionManagerBox(255, a2, a4, a3);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v8);
  v11 = type metadata accessor for _ListStyleConfiguration(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v29 - v14;
  v17 = type metadata accessor for ResolvedList(0, a2, a4, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v29 - v20;
  v22 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v26, Value, a1);
  v28 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v28, v17);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v21, v11);
  _ListValue.init(style:configuration:)((uint64_t)v26, a1, v30);
}

ValueMetadata *type metadata accessor for StyledView()
{
  return &type metadata for StyledView;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StyledView()
{
  type metadata accessor for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>();
  lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>();
  return static _ViewListOutputs.groupViewListCount<A, B, C>(inputs:contentType:headerType:footerType:)();
}

unint64_t type metadata accessor for Scrollable()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Scrollable;
  if (!lazy cache variable for type metadata for Scrollable)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ScrollView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void storeEnumTagSinglePayload for ScrollView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFF88)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFF88)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 120);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_186F4D0C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F4D15CLL);
}

void sub_186F4D0C8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F4D0D0);
  JUMPOUT(0x186F4D15CLL);
}

void sub_186F4D118()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F4D15CLL);
}

void sub_186F4D120()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F4D15CLL);
}

uint64_t sub_186F4D128(uint64_t a1, int a2, unsigned int a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    v4 = (v7 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (a2 < 0)
      JUMPOUT(0x186F4D134);
    *(_QWORD *)(v4 + 64) = (a2 - 1);
    *(_QWORD *)(v4 + 72) = 1;
LABEL_6:
    JUMPOUT(0x186F4D15CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v7);
}

uint64_t assignWithCopy for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_BYTE *)(v7 + 1) = *(_BYTE *)(v8 + 1);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 40) = *(_BYTE *)(v8 + 40);
  v9 = (_OWORD *)(v7 + 48);
  v10 = *(_QWORD *)(v8 + 48);
  if (*(_QWORD *)(v7 + 48))
  {
    if (v10)
    {
      v11 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(v7 + 48) = v10;
      *(_QWORD *)(v7 + 56) = v11;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of ScrollToTopGestureAction((uint64_t)v9);
  }
  else if (v10)
  {
    v12 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v7 + 48) = v10;
    *(_QWORD *)(v7 + 56) = v12;
    swift_retain();
    goto LABEL_8;
  }
  *v9 = *(_OWORD *)(v8 + 48);
LABEL_8:
  swift_unknownObjectWeakCopyAssign();
  v14 = (_OWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 80);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  v16 = (_OWORD *)(v8 + 80);
  v15 = *(_QWORD *)(v8 + 80);
  if (v13)
  {
    if (v15)
    {
      v17 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v7 + 80) = v15;
      *(_QWORD *)(v7 + 88) = v17;
      swift_retain();
      swift_release();
      *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
    }
    else
    {
      outlined destroy of RefreshAction(v7 + 80);
      v19 = *(_QWORD *)(v8 + 96);
      *v14 = *v16;
      *(_QWORD *)(v7 + 96) = v19;
    }
  }
  else if (v15)
  {
    v18 = *(_QWORD *)(v8 + 88);
    *(_QWORD *)(v7 + 80) = v15;
    *(_QWORD *)(v7 + 88) = v18;
    *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
    swift_retain();
  }
  else
  {
    v20 = *v16;
    *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
    *v14 = v20;
  }
  *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v8 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t ScrollView.init(_:showsIndicators:content:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;

  v10 = a7 + *(int *)(type metadata accessor for ScrollView(0, a5, a6, a4) + 36);
  *(_BYTE *)v10 = a1;
  *(_BYTE *)(v10 + 1) = a2;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 40) = 2;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  v11 = swift_unknownObjectWeakInit();
  *(_QWORD *)(v10 + 112) = 0;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  return a3(v11);
}

uint64_t type metadata completion function for ScrollView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ScrollView.scrollsContentToBeginningInRightToLeft.setter(uint64_t a1, uint64_t a2)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2);
}

uint64_t initializeWithTake for PushTarget(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t storeEnumTagSinglePayload for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t outlined init with take of PushTarget?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for PushTarget?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for MutableBox<UInt32>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MutableBox<UInt32>)
  {
    v0 = type metadata accessor for MutableBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>);
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyVStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVStack<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyVStack<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static LazyVStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t assignWithCopy for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 24 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 24 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t type metadata completion function for LazyVStack()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t LazyVStack.init(alignment:spacing:pinnedViews:content:)(uint64_t a1, uint64_t a2)
{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t partial apply for closure #1 in static LazyVStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static LazyVStack._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t static LazyVStack._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v12 = type metadata accessor for _VariadicView.Tree();
  LODWORD(v21) = v7;
  type metadata accessor for LazyVStack(255, a3, a4, v13);
  type metadata accessor for _GraphValue();
  v14 = a2[3];
  v15 = a2[4];
  v18 = *(_OWORD *)(a2 + 7);
  v19 = *(_OWORD *)(a2 + 5);
  v16 = a2[9];
  _GraphValue.subscript.getter();
  v20[1] = a4;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v14;
  v25 = v15;
  v26 = v19;
  v27 = v18;
  v28 = v16;
  v29 = v11;
  v20[0] = &protocol witness table for LazyVStackLayout;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v20);
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyHStack<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static LazyHStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void storeEnumTagSinglePayload for LazyHStack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 24) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 24) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for LazyHStack()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static LazyHStack._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v12 = type metadata accessor for _VariadicView.Tree();
  LODWORD(v21) = v7;
  type metadata accessor for LazyHStack(255, a3, a4, v13);
  type metadata accessor for _GraphValue();
  v14 = a2[3];
  v15 = a2[4];
  v18 = *(_OWORD *)(a2 + 7);
  v19 = *(_OWORD *)(a2 + 5);
  v16 = a2[9];
  _GraphValue.subscript.getter();
  v20[1] = a4;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v14;
  v25 = v15;
  v26 = v19;
  v27 = v18;
  v28 = v16;
  v29 = v11;
  v20[0] = &protocol witness table for LazyHStackLayout;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v20);
  return static View.makeDebuggableView(view:inputs:)();
}

void base witness table accessor for _AttributeBody in IsAnimated<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IsAnimated<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsAnimated<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for IsAnimated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IsAnimated);
}

uint64_t partial apply for closure #2 in IsAnimated.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 32))(a1, *(_QWORD *)(v1 + 48));
}

uint64_t IsAnimated.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *Value;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t FunctionTypeMetadata;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _QWORD v21[5];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  type metadata accessor for TransactionalPreferenceTransformModifier(0, v5, v6, a4);
  Value = (uint64_t *)AGGraphGetValue();
  v9 = v8;
  v11 = *Value;
  v10 = Value[1];
  v22[0] = swift_getAssociatedTypeWitness();
  v12 = MEMORY[0x1E0DEE9C0] + 8;
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  result = AGGraphGetOutputValue();
  if (result)
    v15 = (v9 & 1) == 0;
  else
    v15 = 0;
  if (!v15)
  {
    swift_retain();
    AGGraphClearUpdate();
    v16 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = v5;
    v17[3] = v6;
    v17[4] = v11;
    v17[5] = v10;
    v17[6] = v16;
    v22[0] = partial apply for closure #2 in IsAnimated.updateValue();
    v22[1] = v17;
    v19 = MEMORY[0x1E0C80A78](v17, v18);
    v21[2] = a1;
    v21[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsAnimated<A>, a1, v19);
    swift_retain();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v22, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v21, FunctionTypeMetadata, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v20);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverPhase()
{
  return &type metadata for HoverPhase;
}

ValueMetadata *type metadata accessor for FocusStore()
{
  return &type metadata for FocusStore;
}

unint64_t lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets;
  if (!lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0B20], MEMORY[0x1E0CE0B90]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarListBody<A, B>.CollectionViewBody()
{
  return static View._viewListCount(inputs:)();
}

uint64_t type metadata accessor for SwiftUIApplication()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for didUpdateListLayout()
{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD00000000000001CLL, 0x8000000187BE94A0);
  static ClarityUI.didUpdateListLayout = result;
  return result;
}

uint64_t type metadata accessor for UICollectionViewListCoordinatorBaseBase()
{
  return objc_opt_self();
}

uint64_t assignWithCopy for SettingsLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  LOBYTE(v5) = *(_BYTE *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v8, v5);
  v10 = *(_QWORD *)v7;
  v11 = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v10, v11);
  return a1;
}

void type metadata accessor for PassthroughSubject<Any, Never>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PassthroughSubject<Any, Never>)
  {
    v0 = type metadata accessor for PassthroughSubject();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PassthroughSubject<Any, Never>);
  }
}

uint64_t lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

unint64_t lazy protocol witness table accessor for type External<Bool> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<Bool> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<Bool> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>);
  }
  return result;
}

void type metadata accessor for External<[SceneList.Item.Summary]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<[SceneList.Item.Summary]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [SceneList.Item.Summary], (uint64_t)&type metadata for SceneList.Item.Summary, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<[SceneList.Item.Summary]>);
  }
}

unint64_t lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>)
  {
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(255, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E0CE4E20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type External<HostingScrollView> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<BridgedListState> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for External<BridgedListState>, type metadata accessor for BridgedListState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<Scrollable> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<Scrollable> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<Scrollable> and conformance External<A>)
  {
    type metadata accessor for [Scrollable](255, (unint64_t *)&lazy cache variable for type metadata for External<Scrollable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<Scrollable> and conformance External<A>);
  }
  return result;
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1)
{
  _BYTE v1[8];
  id v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  outlined init with copy of ListScrollViewProvider(a1, (uint64_t)v1);
  v2 = (id)MEMORY[0x18D760234](v1);
  outlined destroy of ListScrollViewProvider((uint64_t)v1);
  type metadata accessor for UIScrollView?();
  AGGraphSetOutputValue();

}

{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  if (!*(_QWORD *)(a1 + 120))
  {
    v2 = (id)AGSubgraphGetGraph();
    v3 = (void *)AGSubgraphCreate();

    v4 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v3;
    v6 = v3;

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v5 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityToolbarContent.IndirectOutputs.updateValue()(a1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(int *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(_DWORD *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(_QWORD *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

_DWORD *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in closure #1 in Attribute.init(value:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init(type:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

void type metadata accessor for Predicate<Pack{URL}>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Predicate<Pack{URL}>)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Predicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Predicate<Pack{URL}>);
  }
}

void type metadata accessor for (source: IndexPath, destination: IndexPath)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath))
  {
    type metadata accessor for IndexPath();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath));
  }
}

uint64_t AttributedString.transformingUIKitAttributedForSwiftUI()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  char *v129;
  void (*v130)(uint64_t, unint64_t, uint64_t, double);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  char *v135;
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char v145;
  void (*v146)(char *, uint64_t);
  void (*v147)(id *, _QWORD);
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  void (*v155)(char *, uint64_t);
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  id v159;
  char *v160;
  char *v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  uint64_t KeyPath;
  uint64_t v166;
  uint64_t v167;
  id v168;
  void (*v169)(id *, _QWORD);
  void (*v170)(id *, _QWORD);
  char *v171;
  char *v172;
  void (*v173)(char *, uint64_t);
  unint64_t v174;
  id v175;
  char *v176;
  char *v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(id *, _QWORD);
  void (*v185)(id *, _QWORD);
  char *v186;
  char *v187;
  void (*v188)(char *, uint64_t);
  unint64_t v189;
  id v190;
  char *v191;
  char *v192;
  uint64_t v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  void (*v200)(id *, _QWORD);
  void (*v201)(id *, _QWORD);
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(id *, _QWORD);
  void (*v214)(id *, _QWORD);
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(id *, _QWORD);
  void (*v227)(id *, _QWORD);
  char *v228;
  char *v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(id *, _QWORD);
  void (*v240)(id *, _QWORD);
  char *v241;
  char *v242;
  uint64_t v243;
  void *v244;
  char *v245;
  char *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  unint64_t v254;
  id v255;
  id v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void (*v262)(id *, _QWORD);
  void (*v263)(id *, _QWORD);
  void (*v264)(id *, _QWORD);
  char *v265;
  char *v266;
  void *v267;
  char *v268;
  char *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  unint64_t v277;
  id v278;
  id v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void (*v285)(id *, _QWORD);
  void (*v286)(id *, _QWORD);
  void (*v287)(id *, _QWORD);
  char *v288;
  char *v289;
  id v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  uint64_t v295;
  id v296;
  uint64_t v297;
  uint64_t v298;
  void (*v299)(uint64_t *, _QWORD);
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  id v304;
  void (*v305)(id *, _QWORD);
  uint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  void (*v311)(char *, uint64_t);
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t (*v315)(uint64_t, uint64_t, uint64_t);
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  void (*v328)(char *, uint64_t, uint64_t, uint64_t);
  void (*v329)(id *, _QWORD);
  void (*v330)(id *, _QWORD);
  uint64_t v332;
  char *v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  id v340;
  char *v341;
  char *v342;
  char *v343;
  uint64_t v344;
  char *i;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  char *v357;
  uint64_t v358;
  char *v359;
  char *v360;
  char *v361;
  char *v362;
  char *v363;
  char *v364;
  char *v365;
  char *v366;
  char *v367;
  char *v368;
  uint64_t v369;
  char *v370;
  void (*v371)(char *, uint64_t);
  void (*v372)(char *, char *, uint64_t);
  char *v373;
  uint64_t v374;
  uint64_t v375;
  void (*v376)(char *, char *, uint64_t);
  char *v377;
  char *v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  void (*v395)(char *, uint64_t);
  char *v396;
  void (*v397)(char *, uint64_t);
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  id v403;
  uint64_t v404;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x1E0CA7930]);
  MEMORY[0x1E0C80A78](v2, v3);
  v337 = (char *)&v332 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v343 = (char *)&v332 - v7;
  MEMORY[0x1E0C80A78](v8, v9);
  v370 = (char *)&v332 - v10;
  v384 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v383 = *(_QWORD *)(v384 - 8);
  MEMORY[0x1E0C80A78](v384, v11);
  v382 = (char *)&v332 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v387 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v386 = (char *)&v332 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CAFB30];
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ScopedAttributeContainer<AttributeScopes.SwiftUIAttributes>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0900], lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, MEMORY[0x1E0CAFB30]);
  v393 = *(_QWORD *)(v17 - 8);
  v394 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v342 = (char *)&v332 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v392 = (char *)&v332 - v22;
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ScopedAttributeContainer<AttributeScopes.UIKitAttributes>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC1A00], lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes, v16);
  v389 = v23;
  v369 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v368 = (char *)&v332 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v367 = (char *)&v332 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v336 = (char *)&v332 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v366 = (char *)&v332 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v335 = (char *)&v332 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v365 = (char *)&v332 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v364 = (char *)&v332 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v363 = (char *)&v332 - v46;
  MEMORY[0x1E0C80A78](v47, v48);
  v362 = (char *)&v332 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v361 = (char *)&v332 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v360 = (char *)&v332 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v359 = (char *)&v332 - v58;
  v390 = type metadata accessor for AttributeContainer();
  v358 = *(_QWORD *)(v390 - 8);
  MEMORY[0x1E0C80A78](v390, v59);
  v341 = (char *)&v332 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v61, v62);
  v357 = (char *)&v332 - v63;
  MEMORY[0x1E0C80A78](v64, v65);
  v356 = (char *)&v332 - v66;
  MEMORY[0x1E0C80A78](v67, v68);
  v334 = (char *)&v332 - v69;
  MEMORY[0x1E0C80A78](v70, v71);
  v355 = (char *)&v332 - v72;
  MEMORY[0x1E0C80A78](v73, v74);
  v333 = (char *)&v332 - v75;
  MEMORY[0x1E0C80A78](v76, v77);
  v354 = (char *)&v332 - v78;
  MEMORY[0x1E0C80A78](v79, v80);
  v353 = (char *)&v332 - v81;
  MEMORY[0x1E0C80A78](v82, v83);
  v352 = (char *)&v332 - v84;
  MEMORY[0x1E0C80A78](v85, v86);
  v351 = (char *)&v332 - v87;
  MEMORY[0x1E0C80A78](v88, v89);
  v350 = (char *)&v332 - v90;
  MEMORY[0x1E0C80A78](v91, v92);
  v349 = (char *)&v332 - v93;
  MEMORY[0x1E0C80A78](v94, v95);
  v391 = (char *)&v332 - v96;
  MEMORY[0x1E0C80A78](v97, v98);
  v348 = (char *)&v332 - v99;
  v385 = type metadata accessor for AttributedString.Runs.Run();
  v375 = *(_QWORD *)(v385 - 8);
  MEMORY[0x1E0C80A78](v385, v100);
  v396 = (char *)&v332 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, v102);
  MEMORY[0x1E0C80A78](v103, v104);
  v379 = (char *)&v332 - v105;
  v381 = type metadata accessor for AttributedString.Runs.Index();
  v380 = *(_QWORD *)(v381 - 8);
  MEMORY[0x1E0C80A78](v381, v106);
  v378 = (char *)&v332 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v108, v109);
  v111 = (char *)&v332 - v110;
  v374 = type metadata accessor for AttributedString.Runs();
  v398 = *(_QWORD *)(v374 - 8);
  MEMORY[0x1E0C80A78](v374, v112);
  v114 = (char *)&v332 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for AttributedString();
  v116 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115, v117);
  v119 = (char *)&v332 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v121 = v120;
  MEMORY[0x1E0C80A78](v120, v122);
  v124 = (char *)&v332 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = MEMORY[0x1E0C80A78](v125, v126);
  v129 = (char *)&v332 - v128;
  v130 = *(void (**)(uint64_t, unint64_t, uint64_t, double))(v116 + 16);
  v130(a1, v399, v115, v127);
  v388 = a1;
  ((void (*)(char *, uint64_t, uint64_t))v130)(v119, a1, v115);
  v131 = v374;
  AttributedString.runs.getter();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v119, v115);
  v132 = v398;
  v372 = *(void (**)(char *, char *, uint64_t))(v398 + 16);
  v372(v124, v114, v131);
  v133 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
  dispatch thunk of Collection.startIndex.getter();
  v134 = *(void (**)(char *, uint64_t))(v132 + 8);
  v373 = v114;
  v371 = v134;
  v134(v114, v131);
  v135 = &v124[*(int *)(v121 + 36)];
  v136 = v380;
  v137 = *(void (**)(char *, char *, uint64_t))(v380 + 32);
  v377 = v111;
  v138 = (uint64_t)v129;
  v137(v135, v111, v381);
  outlined init with take of IndexingIterator<AttributedString.Runs>((uint64_t)v124, (uint64_t)v129);
  v139 = *(int *)(v121 + 36);
  v140 = v375;
  v141 = &v129[v139];
  v376 = *(void (**)(char *, char *, uint64_t))(v136 + 16);
  v347 = v138;
  v346 = v133;
  for (i = v141; ; v141 = i)
  {
    v142 = v377;
    v143 = v381;
    v376(v377, v141, v381);
    v144 = v378;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
    v145 = dispatch thunk of static Equatable.== infix(_:_:)();
    v146 = *(void (**)(char *, uint64_t))(v380 + 8);
    v146(v144, v143);
    v146(v142, v143);
    if ((v145 & 1) != 0)
      break;
    v147 = (void (*)(id *, _QWORD))dispatch thunk of Collection.subscript.read();
    v148 = v379;
    v149 = v385;
    (*(void (**)(char *))(v140 + 16))(v379);
    v147(&v403, 0);
    v150 = v373;
    v372(v373, (char *)v138, v131);
    dispatch thunk of Collection.formIndex(after:)();
    v371(v150, v131);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v148, 0, 1, v149);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v148, 1, v149) == 1)
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v138, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
    (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v396, v148, v149);
    v151 = v348;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v152 = type metadata accessor for AttributeScopes.UIKitAttributes();
    v153 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes();
    v154 = v359;
    v398 = v153;
    v399 = v152;
    AttributeContainer.subscript.getter();
    swift_release();
    v155 = *(void (**)(char *, uint64_t))(v358 + 8);
    v156 = v390;
    v155(v151, v390);
    swift_getKeyPath();
    v157 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute();
    v158 = v389;
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397 = *(void (**)(char *, uint64_t))(v369 + 8);
    v397(v154, v158);
    v159 = v403;
    v395 = v155;
    if (v403)
    {
      v344 = v157;
      v160 = v391;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v161 = v392;
      AttributeContainer.subscript.getter();
      swift_release();
      v155(v160, v156);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
      v162 = v394;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v161, v162);
      v163 = v403;
      swift_release();
      if (v163)
      {

      }
      else
      {
        v164 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        KeyPath = swift_getKeyPath();
        MEMORY[0x1E0C80A78](KeyPath, v166);
        *(&v332 - 2) = v167;
        swift_getKeyPath();
        v403 = v159;
        type metadata accessor for UIColor();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
        v168 = v159;
        v400 = Color.init<A>(provider:)();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v169 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        v156 = v390;
        AttributedSubstring.subscript.setter();
        v169(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v164, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = 0;
        v170 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v170(&v403, 0);

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v164, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      }
      v158 = v389;
    }
    v171 = v349;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v172 = v360;
    AttributeContainer.subscript.getter();
    swift_release();
    v173 = v395;
    v395(v171, v156);
    swift_getKeyPath();
    v174 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v172, v158);
    v175 = v403;
    if (v403)
    {
      v344 = v174;
      v176 = v391;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v177 = v392;
      AttributeContainer.subscript.getter();
      swift_release();
      v173(v176, v156);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
      v178 = v394;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v177, v178);
      v179 = v403;
      swift_release();
      if (v179)
      {

      }
      else
      {
        v180 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        v181 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v181, v182);
        *(&v332 - 2) = v183;
        swift_getKeyPath();
        v403 = v175;
        type metadata accessor for UIColor();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
        v340 = v175;
        v400 = Color.init<A>(provider:)();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v184 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v184(&v403, 0);
        v156 = v390;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v180, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = 0;
        v158 = v389;
        v185 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v185(&v403, 0);

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v180, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      }
    }
    v186 = v350;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v187 = v361;
    AttributeContainer.subscript.getter();
    swift_release();
    v188 = v395;
    v395(v186, v156);
    swift_getKeyPath();
    v189 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v187, v158);
    v190 = v403;
    if (v403)
    {
      v344 = v189;
      v191 = v391;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v192 = v392;
      AttributeContainer.subscript.getter();
      swift_release();
      v188(v191, v156);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
      v193 = v394;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v192, v193);
      v194 = v403;
      swift_release();
      if (v194)
      {

      }
      else
      {
        v195 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        v196 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v196, v197);
        *(&v332 - 2) = v198;
        swift_getKeyPath();
        v199 = v190;
        v400 = Font.init(_:)();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v200 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v200(&v403, 0);
        v156 = v390;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v195, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = 0;
        v201 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v201(&v403, 0);

        v158 = v389;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v195, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      }
      v188 = v395;
    }
    v202 = v351;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v203 = v362;
    AttributeContainer.subscript.getter();
    swift_release();
    v188(v202, v156);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v203, v158);
    if ((v404 & 1) == 0)
    {
      v204 = (uint64_t)v403;
      v205 = v391;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v206 = v392;
      AttributeContainer.subscript.getter();
      swift_release();
      v188(v205, v156);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
      v207 = v394;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v206, v207);
      if (v404 == 1)
      {
        v344 = (uint64_t)v403;
        v208 = v204;
        v209 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        v210 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v210, v211);
        *(&v332 - 2) = v212;
        swift_getKeyPath();
        v400 = v208;
        LOBYTE(v401) = 0;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v213 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v213(&v403, 0);
        v158 = v389;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v209, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = v344;
        v156 = v390;
        LOBYTE(v401) = 1;
        v188 = v395;
        v214 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v214(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v209, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      }
    }
    v215 = v352;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v216 = v363;
    AttributeContainer.subscript.getter();
    swift_release();
    v188(v215, v156);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v216, v158);
    if ((v404 & 1) == 0)
    {
      v217 = (uint64_t)v403;
      v218 = v391;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v219 = v392;
      AttributeContainer.subscript.getter();
      swift_release();
      v188(v218, v156);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
      v220 = v394;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v219, v220);
      if (v404 == 1)
      {
        v344 = (uint64_t)v403;
        v221 = v217;
        v222 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        v223 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v223, v224);
        *(&v332 - 2) = v225;
        swift_getKeyPath();
        v400 = v221;
        LOBYTE(v401) = 0;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v226 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v226(&v403, 0);
        v158 = v389;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v222, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = v344;
        v156 = v390;
        LOBYTE(v401) = 1;
        v188 = v395;
        v227 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v227(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v222, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      }
    }
    v228 = v353;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v229 = v364;
    AttributeContainer.subscript.getter();
    swift_release();
    v188(v228, v156);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v229, v158);
    if ((v404 & 1) == 0)
    {
      v230 = (uint64_t)v403;
      v231 = v391;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v232 = v392;
      AttributeContainer.subscript.getter();
      swift_release();
      v188(v231, v156);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
      v233 = v394;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v232, v233);
      if (v404 == 1)
      {
        v344 = (uint64_t)v403;
        v234 = v230;
        v235 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        v236 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v236, v237);
        *(&v332 - 2) = v238;
        swift_getKeyPath();
        v400 = v234;
        LOBYTE(v401) = 0;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v239 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v239(&v403, 0);
        v158 = v389;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v235, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = v344;
        v156 = v390;
        LOBYTE(v401) = 1;
        v188 = v395;
        v240 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v240(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v235, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      }
    }
    v241 = v354;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v242 = v365;
    AttributeContainer.subscript.getter();
    swift_release();
    v188(v241, v156);
    swift_getKeyPath();
    v243 = v156;
    v244 = (void *)lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v242, v158);
    if ((v404 & 1) == 0)
    {
      v245 = v391;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v246 = v392;
      AttributeContainer.subscript.getter();
      swift_release();
      v188(v245, v243);
      swift_getKeyPath();
      v247 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
      v248 = v394;
      v344 = v247;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v246, v248);
      v249 = v404;
      outlined consume of Text.LineStyle?((uint64_t)v403, v404);
      if (v249 == 1)
      {
        v340 = v244;
        Text.LineStyle.init(_nsUnderlineStyle:)();
        v251 = (uint64_t)v403;
        v250 = v404;
        v252 = v333;
        AttributedString.Runs.Run.attributes.getter();
        swift_getKeyPath();
        v253 = v335;
        AttributeContainer.subscript.getter();
        swift_release();
        v188(v252, v243);
        swift_getKeyPath();
        v254 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute();
        ScopedAttributeContainer.subscript.getter();
        swift_release();
        v397(v253, v158);
        v255 = v403;
        v339 = v254;
        if (v403)
        {
          if (v250 == 1)
          {

          }
          else
          {
            type metadata accessor for UIColor();
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
            v256 = v255;
            v257 = Color.init<A>(provider:)();

            swift_release();
            v250 = v257;
          }
        }
        v338 = v250;
        v258 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        v259 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v259, v260);
        *(&v332 - 2) = v261;
        swift_getKeyPath();
        v400 = v251;
        v401 = v250;
        outlined copy of _ViewList_ID.Canonical?(v251, v250);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v262 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v262(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v258, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = 0;
        LOBYTE(v401) = 1;
        v263 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v263(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v258, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = 0;
        v264 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v264(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v258, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        outlined consume of Text.LineStyle?(v251, v338);
        v158 = v389;
        v243 = v390;
        v188 = v395;
      }
    }
    v265 = v355;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v266 = v366;
    AttributeContainer.subscript.getter();
    swift_release();
    v188(v265, v243);
    swift_getKeyPath();
    v267 = (void *)lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v266, v158);
    if ((v404 & 1) == 0)
    {
      v268 = v391;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v269 = v392;
      AttributeContainer.subscript.getter();
      swift_release();
      v188(v268, v243);
      swift_getKeyPath();
      v270 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
      v271 = v394;
      v344 = v270;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v269, v271);
      v272 = v404;
      outlined consume of Text.LineStyle?((uint64_t)v403, v404);
      if (v272 == 1)
      {
        v340 = v267;
        Text.LineStyle.init(_nsUnderlineStyle:)();
        v274 = (uint64_t)v403;
        v273 = v404;
        v275 = v334;
        AttributedString.Runs.Run.attributes.getter();
        swift_getKeyPath();
        v276 = v336;
        AttributeContainer.subscript.getter();
        swift_release();
        v188(v275, v243);
        swift_getKeyPath();
        v277 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute();
        ScopedAttributeContainer.subscript.getter();
        swift_release();
        v397(v276, v158);
        v278 = v403;
        v339 = v277;
        if (v403)
        {
          if (v273 == 1)
          {

          }
          else
          {
            type metadata accessor for UIColor();
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
            v279 = v278;
            v280 = Color.init<A>(provider:)();

            swift_release();
            v273 = v280;
          }
        }
        v338 = v273;
        v281 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        v282 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v282, v283);
        *(&v332 - 2) = v284;
        swift_getKeyPath();
        v400 = v274;
        v401 = v273;
        outlined copy of _ViewList_ID.Canonical?(v274, v273);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v285 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v285(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v281, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = 0;
        LOBYTE(v401) = 1;
        v286 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v286(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v281, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v400 = 0;
        v287 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v287(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v281, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        outlined consume of Text.LineStyle?(v274, v338);
        v158 = v389;
        v243 = v390;
        v188 = v395;
      }
    }
    v288 = v356;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v289 = v367;
    AttributeContainer.subscript.getter();
    swift_release();
    v188(v288, v243);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v289, v158);
    v290 = v403;
    if (v403)
    {
      objc_opt_self();
      v291 = swift_dynamicCastObjCClass();
      if (v291)
      {
        v292 = v291;
        v293 = v391;
        AttributedString.Runs.Run.attributes.getter();
        swift_getKeyPath();
        type metadata accessor for AttributeScopes.SwiftUIAttributes();
        lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
        v294 = v392;
        AttributeContainer.subscript.getter();
        swift_release();
        v188(v293, v390);
        swift_getKeyPath();
        lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute();
        v295 = v394;
        ScopedAttributeContainer.subscript.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v393 + 8))(v294, v295);
        v296 = v403;

        if (v296)
        {

          v297 = v384;
          v158 = v389;
          goto LABEL_51;
        }
        v298 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        swift_getKeyPath();
        swift_getKeyPath();
        v402 = 0;
        v344 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v340 = (id)AttributedString.subscript.modify();
        v299 = (void (*)(uint64_t *, _QWORD))AttributedSubstring.subscript.modify();
        v300 = v389;
        ScopedAttributeContainer.subscript.setter();
        v299(&v400, 0);
        swift_release();
        ((void (*)(id *, _QWORD))v340)(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v298, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v301 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v301, v302);
        *(&v332 - 2) = v303;
        swift_getKeyPath();
        v400 = v292;
        v304 = v290;
        v305 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        v158 = v300;
        AttributedSubstring.subscript.setter();
        v305(&v403, 0);

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v298, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      }
      else
      {

      }
    }
    v297 = v384;
LABEL_51:
    v306 = v390;
    v307 = v357;
    v308 = v396;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v309 = v368;
    AttributeContainer.subscript.getter();
    swift_release();
    v310 = v307;
    v311 = v395;
    v395(v310, v306);
    swift_getKeyPath();
    v312 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute();
    v313 = (uint64_t)v370;
    v399 = v312;
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v397(v309, v158);
    v314 = v383;
    v315 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v383 + 48);
    if (v315(v313, 1, v297) == 1)
    {
      v140 = v375;
      (*(void (**)(char *, uint64_t))(v375 + 8))(v308, v385);
      outlined destroy of AttributedString.AdaptiveImageGlyph?(v313);
    }
    else
    {
      v316 = v306;
      (*(void (**)(char *, uint64_t, uint64_t))(v314 + 32))(v382, v313, v297);
      v317 = v341;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v318 = v342;
      AttributeContainer.subscript.getter();
      swift_release();
      v311(v317, v316);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
      v319 = (uint64_t)v343;
      v320 = v394;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v393 + 8))(v318, v320);
      v321 = v315(v319, 1, v297);
      outlined destroy of AttributedString.AdaptiveImageGlyph?(v319);
      if (v321 == 1)
      {
        v322 = (uint64_t)v386;
        AttributedString.Runs.Run.range.getter();
        v323 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v323, v324);
        *(&v332 - 2) = v325;
        v398 = swift_getKeyPath();
        v326 = v383;
        v327 = v337;
        (*(void (**)(char *, char *, uint64_t))(v383 + 16))(v337, v382, v384);
        v328 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v326 + 56);
        v328(v327, 0, 1, v384);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
        v329 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v329(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v322, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v328(v327, 1, 1, v384);
        v330 = (void (*)(id *, _QWORD))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v330(&v403, 0);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v322, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        (*(void (**)(char *, uint64_t))(v383 + 8))(v382, v384);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v383 + 8))(v382, v297);
      }
      v140 = v375;
      (*(void (**)(char *, uint64_t))(v375 + 8))(v308, v385);
    }
    v131 = v374;
    v138 = v347;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v379, 1, 1, v385);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v138, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC1978], MEMORY[0x1E0DC1988]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC1960], MEMORY[0x1E0DC1970]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC1948], MEMORY[0x1E0DC1958]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC1930], MEMORY[0x1E0DC1940]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC18E8], MEMORY[0x1E0DC18F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC18D0], MEMORY[0x1E0DC18E0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC18B8], MEMORY[0x1E0DC18C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC1870], MEMORY[0x1E0DC1880]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute);
  }
  return result;
}

BOOL _AXSwiftUIIsAnyStringEmpty(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  if (!v1)
    goto LABEL_7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    goto LABEL_7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = objc_msgSend(v1, "length") == 0;
      goto LABEL_8;
    }
LABEL_7:
    v3 = 1;
    goto LABEL_8;
  }
  objc_msgSend(v1, "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "length") == 0;

LABEL_8:
  return v3;
}

id _AXSwiftUIGetObjectFromSelectorAsAny(void *a1, const char *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    NSStringFromSelector(a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "valueForKey:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t _AXSwiftUIUnarchiveChartDescriptor(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3710], "unarchiveTopLevelObjectWithData:error:", a1, 0);
}

id AXSwiftUIInteractionLocationDescriptorDefaultName()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr;
  v6 = getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr;
  if (!getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr)
  {
    v1 = (void *)AXRuntimeLibrary();
    v0 = (id *)dlsym(v1, "AXInteractionLocationDescriptorDefaultName");
    v4[3] = (uint64_t)v0;
    getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  return *v0;
}

void sub_186F52C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id AXAttributedStringConvert(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;

  v1 = a1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v2 = getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr;
  v12 = getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr;
  if (!getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr)
  {
    v3 = (void *)AXRuntimeLibrary();
    v2 = dlsym(v3, "AXGetCFAttributedStringFromAXAttributedString");
    v10[3] = (uint64_t)v2;
    getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v9, 8);
  if (!v2)
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  v4 = (void *)((uint64_t (*)(id))v2)(v1);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v6 = objc_alloc(MEMORY[0x1E0CB3498]);
    v5 = (id)objc_msgSend(v6, "initWithString:", v1, v9);
  }
  v7 = v5;

  return v7;
}

void sub_186F52CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id AXAttributedStringCreate(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr;
  v9 = getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr;
  if (!getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr)
  {
    v3 = (void *)AXRuntimeLibrary();
    v2 = dlsym(v3, "AXCreateAXAttributedStringFromCFAttributedString");
    v7[3] = (uint64_t)v2;
    getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  ((void (*)(id))v2)(v1);
  v4 = (id)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_186F52E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id AXSwiftUIMoveToElementNotificationKeyElement()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr;
  v6 = getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr;
  if (!getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr)
  {
    v1 = (void *)AXRuntimeLibrary();
    v0 = (id *)dlsym(v1, "kAXMoveToElementNotificationKeyElement");
    v4[3] = (uint64_t)v0;
    getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  return *v0;
}

void sub_186F52EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id AXSwiftUIPerformElementUpdateImmediatelyToken()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr;
  v6 = getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr;
  if (!getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr)
  {
    v1 = (void *)AXRuntimeLibrary();
    v0 = (id *)dlsym(v1, "kAXPerformElementUpdateImmediatelyToken");
    v4[3] = (uint64_t)v0;
    getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  return *v0;
}

void sub_186F52F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t AXRuntimeLibrary()
{
  uint64_t v0;
  void *v2;

  if (!AXRuntimeLibraryCore_frameworkLibrary)
    AXRuntimeLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = AXRuntimeLibraryCore_frameworkLibrary;
  if (!AXRuntimeLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_186F5319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBGTaskSchedulerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!BackgroundTasksLibraryCore_frameworkLibrary)
  {
    BackgroundTasksLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!BackgroundTasksLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_6:
      __getBGTaskSchedulerClass_block_invoke_cold_1();
    }
  }
  result = objc_getClass("BGTaskScheduler");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_6;
  getBGTaskSchedulerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_186F536B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _SwizzleMethods(objc_class *a1, const char *a2, const char *a3)
{
  objc_method *InstanceMethod;
  objc_method *v7;
  void (*Implementation)(void);
  const char *TypeEncoding;
  void (*v10)(void);
  const char *v11;

  InstanceMethod = class_getInstanceMethod(a1, a2);
  v7 = class_getInstanceMethod(a1, a3);
  Implementation = method_getImplementation(v7);
  TypeEncoding = method_getTypeEncoding(v7);
  if (class_addMethod(a1, a2, Implementation, TypeEncoding))
  {
    v10 = method_getImplementation(InstanceMethod);
    v11 = method_getTypeEncoding(InstanceMethod);
    class_replaceMethod(a1, a3, v10, v11);
  }
  else
  {
    method_exchangeImplementations(InstanceMethod, v7);
  }
}

void _PerformTestingSwizzles()
{
  if (_PerformTestingSwizzles_onceToken != -1)
    dispatch_once(&_PerformTestingSwizzles_onceToken, &__block_literal_global);
}

uint64_t _CATransactionCompletionItem()
{
  return objc_msgSend(MEMORY[0x1E0CD28C0], "completionItem");
}

Class __getLPLinkMetadataClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!LinkPresentationLibraryCore_frameworkLibrary)
  {
    LinkPresentationLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!LinkPresentationLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_6:
      __getLPLinkMetadataClass_block_invoke_cold_1();
    }
  }
  result = objc_getClass("LPLinkMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_6;
  getLPLinkMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL _DirectionForCharIsRTL()
{
  return MEMORY[0x18D760300]() == 1;
}

id _NSTextLayoutFragmentLayoutFragmentWithKeyframe(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a1;
  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v3, "layoutFragmentWithKeyframe:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "layout");
    if (v5)
      v6 = v5;
    else
      v6 = v3;
    v7 = v6;

  }
  else
  {
    v7 = v3;
  }

  return v7;
}

ProtocolDescriptor *_sceneProtocolDescriptor()
{
  return &protocol descriptor for Scene;
}

ProtocolDescriptor *_widgetProtocolDescriptor()
{
  return &protocol descriptor for Widget;
}

ProtocolDescriptor *_controlWidgetProtocolDescriptor()
{
  return &protocol descriptor for ControlWidget;
}

ProtocolDescriptor *_previewProviderProtocolDescriptor()
{
  return &protocol descriptor for PreviewProvider;
}

ProtocolDescriptor *_printContentDescriptor()
{
  return &protocol descriptor for PrintContent;
}

ProtocolDescriptor *_accessibilityRotorContentProtocolDescriptor()
{
  return &protocol descriptor for AccessibilityRotorContent;
}

ProtocolDescriptor *_navigationDestinationProtocolDescriptor()
{
  return &protocol descriptor for NavigationDestination;
}

ProtocolDescriptor *_commandsProtocolDescriptor()
{
  return &protocol descriptor for Commands;
}

ProtocolDescriptor *_tableColumnProtocolDescriptor()
{
  return &protocol descriptor for TableColumnContent;
}

ProtocolDescriptor *_tableRowProtocolDescriptor()
{
  return &protocol descriptor for TableRowContent;
}

ProtocolDescriptor *_defaultStyleModifierProtocolDescriptor()
{
  return &protocol descriptor for DefaultStyleModifier;
}

ProtocolDescriptor *_styleOverrideModifierProtocolDescriptor()
{
  return &protocol descriptor for StyleOverrideModifier;
}

ProtocolDescriptor *_styleWriterOverrideModifierProtocolDescriptor()
{
  return &protocol descriptor for StyleWriterOverrideModifier;
}

uint64_t _HighFrameRateReasonMake(int a1)
{
  return a1 | 0x270000u;
}

void SidebarListBody.body.getter()
{
  type metadata accessor for SidebarListBody.CollectionViewBody();
}

void sub_186F53E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = v0;
  *(_QWORD *)(v4 - 96) = v1;
  type metadata accessor for SidebarListBody.TableViewRoot();
}

void sub_186F53EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v1 - 120) = MEMORY[0x1E0CE4C48];
  *(_QWORD *)(v1 - 112) = v0;
  v3 = MEMORY[0x1E0CE4C38];
  *(_QWORD *)(v1 - 104) = v2;
  *(_QWORD *)(v1 - 96) = v3;
  type metadata accessor for StaticIf();
}

void sub_186F53EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  *(_QWORD *)(v9 - 288) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)(v9 - 192) = v7;
  *(_QWORD *)(v9 - 184) = v6;
  *(_QWORD *)(v9 - 176) = v2;
  *(_QWORD *)(v9 - 168) = v4;
  v13 = *(_QWORD *)(v9 - 296);
  *(_QWORD *)(v9 - 160) = v13;
  *(_QWORD *)(v9 - 256) = v7;
  *(_QWORD *)(v9 - 248) = v6;
  *(_QWORD *)(v9 - 240) = v2;
  *(_QWORD *)(v9 - 232) = v4;
  *(_QWORD *)(v9 - 224) = v13;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>.CollectionViewBody, v3, v12);
  *(_QWORD *)(v9 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>.TableViewRoot, v8);
  *(_QWORD *)(v9 - 128) = v2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v9 - 136);
  StaticIf<>.init(_:then:else:)(MEMORY[0x1E0CE4C48], (void (*)(void))partial apply for closure #1 in SidebarListBody.body.getter);
}

uint64_t sub_186F53FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 152) = v0;
  *(_QWORD *)(v5 - 144) = v4;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v5 - 152);
  static ViewBuilder.buildExpression<A>(_:)(v2, v3, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 288) + 8);
  v7(v2, v3);
  static ViewBuilder.buildBlock<A>(_:)(v1, v3, *(_QWORD *)(v5 - 280));
  return v7(v1, v3);
}

void closure #1 in SidebarListBody.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Binding();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for SidebarListBody.CollectionViewBody();
}

void sub_186F5413C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 - 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v5;
  *(_QWORD *)(v6 - 88) = v2;
  type metadata accessor for SidebarListBody();
}

void sub_186F541A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(v6 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v7 + *(int *)(a1 + 56), v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 144) + 16))(v5, v7, *(_QWORD *)(v6 - 136));
  SidebarListBody.CollectionViewBody.init(content:selection:)(v1);
}

uint64_t sub_186F541F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>.CollectionViewBody, v1);
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 152) + 8);
  v5(v0, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v3 - 120));
  return v5(v2, v1);
}

void SidebarListBody.CollectionViewBody.init(content:selection:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = swift_getKeyPath();
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = swift_getKeyPath();
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = swift_getKeyPath();
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 98) = 0u;
  type metadata accessor for SidebarListBody.CollectionViewBody();
}

uint64_t sub_186F5431C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v2 + *(int *)(a1 + 64), v4, v3);
  v6 = v2 + *(int *)(a1 + 68);
  type metadata accessor for Binding();
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v1, v7);
}

void closure #2 in SidebarListBody.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding();
  v1 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v1, v0);
  type metadata accessor for SidebarListBody.TableViewRoot();
}

void sub_186F54420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&a9 - v12;
  v14 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v11 - 216) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  (*(void (**)(uint64_t, _QWORD, _QWORD, double))(v9 + 16))(v10, *(_QWORD *)(v11 - 208), *(_QWORD *)(v11 - 224), v18);
  SidebarListBody.TableViewRoot.init(selection:)((uint64_t)v13);
}

uint64_t sub_186F544EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  *(_QWORD *)(v9 - 176) = v2;
  *(_QWORD *)(v9 - 168) = v4;
  *(_QWORD *)(v9 - 160) = v3;
  *(_QWORD *)(v9 - 152) = v0;
  *(_QWORD *)(v9 - 144) = v1;
  _VariadicView.Tree.init(_:content:)();
  *(_QWORD *)(v9 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>.TableViewRoot, v6);
  *(_QWORD *)(v9 - 128) = v3;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v9 - 136);
  static ViewBuilder.buildExpression<A>(_:)(v8, v5, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 216) + 8);
  v11(v8, v5);
  static ViewBuilder.buildBlock<A>(_:)(v7, v5, *(_QWORD *)(v9 - 200));
  return v11(v7, v5);
}

void SidebarListBody.TableViewRoot.init(selection:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = swift_getKeyPath();
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = swift_getKeyPath();
  *(_BYTE *)(a1 + 40) = 0;
  type metadata accessor for SidebarListBody.TableViewRoot();
}

uint64_t sub_186F54634(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 60);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void closure #1 in closure #2 in SidebarListBody.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for SidebarListBody();
}

uint64_t sub_186F546EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 56), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void SidebarListBody.CollectionViewBody.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = a2;
  v15 = a1[3];
  v3 = v15;
  type metadata accessor for Binding();
  v12 = type metadata accessor for Optional();
  v11[6] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v4);
  v11[5] = (char *)v11 - v5;
  v6 = a1[2];
  v11[2] = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x1E0C80A78](v7, v8);
  v18 = (char *)v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[4];
  v13 = a1[5];
  v19 = v10;
  v20 = v3;
  v21 = v14;
  v22 = v13;
  type metadata accessor for CollectionViewListRoot();
}

void sub_186F5484C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;

  *(_QWORD *)(v11 - 368) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v11 - 424) = (char *)&a9 - v12;
  v13 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 440) = v13;
  *(_QWORD *)(v11 - 376) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v11 - 400) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v11 - 384) = (char *)&a9 - v18;
  v19 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  *(_QWORD *)(v11 - 496) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&a9 - v25;
  v27 = *(_QWORD *)(v10 + 32);
  v28 = *(_BYTE *)(v10 + 40);
  outlined copy of Environment<Bool>.Content(v27, v28);
  v29 = specialized Environment.wrappedValue.getter(v27, v28);
  outlined consume of Environment<Bool>.Content(v27, v28);
  v30 = (unsigned int *)MEMORY[0x1E0DC28A0];
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 104);
  *(_QWORD *)(v11 - 464) = v20;
  if ((v29 & 1) == 0)
    v30 = (unsigned int *)MEMORY[0x1E0DC2878];
  v32 = *v30;
  *(_QWORD *)(v11 - 472) = v19;
  v31(v26, v32, v19);
  outlined copy of Environment<Bool>.Content(v27, v28);
  specialized Environment.wrappedValue.getter(v27, v28);
  outlined consume of Environment<Bool>.Content(v27, v28);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v11 - 480) + 16))(*(_QWORD *)(v11 - 344), v10 + *(int *)(v9 + 64), *(_QWORD *)(v11 - 352));
  (*(void (**)(_QWORD, char *, uint64_t))(v20 + 16))(*(_QWORD *)(v11 - 496), v26, v19);
  v33 = *(_QWORD *)v10;
  v34 = *(unsigned __int8 *)(v10 + 8);
  v35 = *(unsigned __int8 *)(v10 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v10, v34, *(_BYTE *)(v10 + 9));
  *(_QWORD *)(v11 - 480) = specialized Environment.wrappedValue.getter(v33, v34 | (v35 << 8));
  *(_DWORD *)(v11 - 484) = v36 & 1;
  outlined consume of Environment<CGFloat?>.Content(v33, v34, v35);
  v37 = *(_QWORD *)(v10 + 16);
  v38 = *(unsigned __int8 *)(v10 + 24);
  v39 = *(unsigned __int8 *)(v10 + 25);
  outlined copy of Environment<CGFloat?>.Content(v37, v38, *(_BYTE *)(v10 + 25));
  specialized Environment.wrappedValue.getter(v37, v38 | (v39 << 8));
  outlined consume of Environment<CGFloat?>.Content(v37, v38, v39);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v11 - 448) + 16))(*(_QWORD *)(v11 - 456), v10 + *(int *)(v9 + 68), *(_QWORD *)(v11 - 432));
  v40 = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v11 - 144) = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v11 - 128) = v40;
  *(_WORD *)(v11 - 112) = *(_WORD *)(v10 + 112);
  v41 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 - 176) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 - 160) = v41;
  outlined retain of Environment<ListPadding>(v11 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter(v11 - 248);
  outlined retain of Environment<ListPadding>(v11 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined consume of Environment<ListPadding>.Content);
  v42 = *(_QWORD *)(v11 - 240);
  v43 = *(_BYTE *)(v11 - 232);
  v44 = *(_QWORD *)(v11 - 224);
  v45 = *(_BYTE *)(v11 - 216);
  v46 = *(_QWORD *)(v11 - 208);
  v47 = *(_BYTE *)(v11 - 200);
  v48 = *(_QWORD *)(v11 - 192);
  v49 = *(_BYTE *)(v11 - 184);
  *(_BYTE *)(v11 - 320) = *(_BYTE *)(v11 - 248);
  *(_QWORD *)(v11 - 312) = v42;
  *(_BYTE *)(v11 - 304) = v43;
  *(_QWORD *)(v11 - 296) = v44;
  *(_BYTE *)(v11 - 288) = v45;
  *(_QWORD *)(v11 - 280) = v46;
  *(_BYTE *)(v11 - 272) = v47;
  *(_QWORD *)(v11 - 264) = v48;
  *(_BYTE *)(v11 - 256) = v49;
  CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)(*(_QWORD *)(v11 - 344), *(_QWORD *)(v11 - 352), *(_QWORD *)(v11 - 424));
}

uint64_t sub_186F54C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v0);
  v5 = type metadata accessor for AccessibilitySidebarListModifier(0, v0, (uint64_t)&protocol witness table for CollectionViewListRoot<A, B>, v4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilitySidebarListModifier<A>, v5);
  *(_QWORD *)(v3 - 336) = &protocol witness table for CollectionViewListRoot<A, B>;
  *(_QWORD *)(v3 - 328) = &protocol witness table for AccessibilityAttachmentModifier;
  v7 = *(_QWORD *)(v3 - 440);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v3 - 336);
  v9 = *(_QWORD *)(v3 - 400);
  View.accessibilityConfiguration<A>(_:)(v8, v0, v5, (uint64_t)&protocol witness table for CollectionViewListRoot<A, B>, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 368) + 8))(v1, v0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 464) + 8))(v2, *(_QWORD *)(v3 - 472));
  v10 = *(_QWORD *)(v3 - 384);
  static ViewBuilder.buildExpression<A>(_:)(v9, v7, v8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 376) + 8);
  v11(v9, v7);
  static ViewBuilder.buildBlock<A>(_:)(v10, v7, *(_QWORD *)(v3 - 360));
  return v11(v10, v7);
}

uint64_t key path setter for EnvironmentValues._defaultMinListRowHeight : EnvironmentValues(uint64_t a1)
{
  return EnvironmentValues._defaultMinListRowHeight.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t static SidebarListBody.TableViewRoot._viewListOptions.getter()
{
  return 44;
}

void SidebarListBody.TableViewRoot.body(children:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v18 = a1;
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v19 = (char *)&v11 - v6;
  v7 = *(_QWORD *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = AssociatedTypeWitness;
  v16 = v2;
  v17 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for TableViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v15 = v10;
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListDataSource<A>, v10);
  v23 = v10;
  v24 = v2;
  v25 = v14;
  v26 = v7;
  type metadata accessor for TableViewListCore();
}

void sub_186F54EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;

  *(_QWORD *)(v9 + 80) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v9 + 24) = (char *)&a9 - v17;
  outlined init with copy of _VariadicView_Children(v11, v9 + 240);
  v18 = *(_QWORD *)v10;
  v19 = *(unsigned __int8 *)(v10 + 8);
  v20 = *(unsigned __int8 *)(v10 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v10, v19, *(_BYTE *)(v10 + 9));
  *(_QWORD *)v9 = specialized Environment.wrappedValue.getter(v18, v19 | (v20 << 8));
  v22 = v21 & 1;
  outlined consume of Environment<CGFloat?>.Content(v18, v19, v20);
  v23 = *(_QWORD *)(v10 + 16);
  v24 = *(unsigned __int8 *)(v10 + 24);
  v25 = *(unsigned __int8 *)(v10 + 25);
  outlined copy of Environment<CGFloat?>.Content(v23, v24, *(_BYTE *)(v10 + 25));
  v26 = specialized Environment.wrappedValue.getter(v23, v24 | (v25 << 8));
  v28 = v27;
  outlined consume of Environment<CGFloat?>.Content(v23, v24, v25);
  v29 = *(double *)&v26;
  if ((v28 & 1) != 0)
    v29 = 44.0;
  v30 = TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)(v9 + 240, 0, *(_QWORD *)v9, v22, v12 - 216, v29);
  (*(void (**)(_QWORD, uint64_t, _QWORD, double))(*(_QWORD *)(v9 + 88) + 16))(*(_QWORD *)(v9 + 72), v10 + *(int *)(*(_QWORD *)(v9 + 64) + 60), *(_QWORD *)(v9 + 96), v30);
  v31 = *(_QWORD *)(v10 + 32);
  v32 = *(_BYTE *)(v10 + 40);
  outlined copy of Environment<Bool>.Content(v31, v32);
  v33 = specialized Environment.wrappedValue.getter(v31, v32);
  outlined consume of Environment<Bool>.Content(v31, v32);
  v34 = v33 & 1;
  v35 = *(_QWORD *)(v9 + 40);
  static TableViewListCore.Configuration.sidebar(isInExpandedSplitView:)(v34, (_OWORD *)(v9 + 112));
  TableViewListCore.init(dataSource:selection:configuration:)(v12 - 216, v35, (uint64_t)v14);
}

uint64_t sub_186F55070()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = v0[3];
  static ViewBuilder.buildExpression<A>(_:)(v1, v2, &protocol witness table for TableViewListCore<A, B>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0[10] + 8);
  v4(v1, v2);
  static ViewBuilder.buildBlock<A>(_:)(v3, v2, v0[13]);
  return v4(v3, v2);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance SidebarListBody<A, B>.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>.TableViewRoot, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._viewListCount(inputs:body:) in conformance SidebarListBody<A, B>.TableViewRoot()
{
  return 1;
}

void SidebarListBody.init(selection:options:content:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for SidebarListBody();
}

uint64_t sub_186F551F0(uint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + *(int *)(a1 + 52)) = v2;
  return v1();
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance SidebarListBody<A, B>.TableViewRoot()
{
  return static SidebarListBody.TableViewRoot._viewListOptions.getter();
}

void protocol witness for Gesture.body.getter in conformance SequenceGesture<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SequenceGesture<A, B>, a1);
  specialized PrimitiveGesture.body.getter();
}

void protocol witness for View.body.getter in conformance SubscriptionView<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubscriptionView<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

void protocol witness for Gesture.body.getter in conformance GestureStateGesture<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureStateGesture<A, B>, a1);
  specialized PrimitiveGesture.body.getter();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _GeometryActionModifier<A>()
{
  return 1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _GeometryActionModifier2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GeometryActionModifier2<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _GeometryActionModifier2<A>()
{
  return 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PositionLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v23 = *a1;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v12 = *(_OWORD *)(a2 + 5);
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v12;
  v20 = *(_OWORD *)(a2 + 7);
  v21 = a2[9];
  v22 = v11;
  v13 = lazy protocol witness table accessor for type _PositionLayout and conformance _PositionLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 80))(&v23, &v15, a3, a4, a5, v13);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnchorWritingModifier2<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AnchorWritingModifier2<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ViewThatFits<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewThatFits<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
}

void protocol witness for View.body.getter in conformance ViewThatFits<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewThatFits<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _BackdropGroupEffect(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  int v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  v5 = *a1;
  v6 = v2;
  v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _CoordinateSpaceModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _CoordinateSpaceModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for _CoordinateSpaceModifier<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EquatableView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableView<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EquatableView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for EquatableView<A>);
}

void protocol witness for View.body.getter in conformance EquatableView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableView<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _DefaultForegroundStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _CoordinateSpaceModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for _DefaultForegroundStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _CoordinateSpaceModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](a6, a4);
  return MEMORY[0x18D7596B8](a1, a2, a3, a4, v10);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Grid<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Grid<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance Grid<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for Grid<A>);
}

void protocol witness for View.body.getter in conformance Grid<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Grid<A>, a1);
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance GridRow<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridRow<A>, a1);
  specialized PrimitiveView.body.getter();
}

void protocol witness for static Layout.layoutProperties.getter in conformance GridLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(_BYTE *)(a1 + 2) = 0;
}

void protocol witness for static Layout.layoutProperties.getter in conformance _GridLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(_BYTE *)(a1 + 2) = 0;
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance _GridLayout@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_BYTE *)a1 + 16);
  v7 = *((_BYTE *)a1 + 17);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_BYTE *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  v11 = *(_BYTE *)(v2 + 40);
  *(_QWORD *)(a2 + 72) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 1;
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 104) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 112) = v12;
  *(_QWORD *)(a2 + 120) = v12;
  *(_QWORD *)(a2 + 128) = v12;
  v13 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(a2 + 136) = v12;
  *(_QWORD *)(a2 + 144) = v13;
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_BYTE *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 65) = v7;
  swift_bridgeObjectRetain();
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance _GridLayout(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_BYTE *)a2 + 16);
  v7 = *((_BYTE *)a2 + 17);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_BYTE *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  v11 = *(_BYTE *)(v2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 65) = v7;
  *(_QWORD *)(a1 + 88) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance _GridLayout@<X0>(uint64_t a1@<X8>)
{
  return GridLayout.Cache.spacing()(a1);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _GridLayout()
{
  lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout();
  return DerivedLayout.sizeThatFits(proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _GridLayout()
{
  lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout();
  return DerivedLayout.placeSubviews(in:proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _GridLayout(a1, a2, a9, a10, a11, a12, a3, a4, a5, a6, a7, a8, a13, MEMORY[0x1E0CE1E78]);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _GridLayout(a1, a2, a9, a10, a11, a12, a3, a4, a5, a6, a7, a8, a13, MEMORY[0x1E0CE1E80]);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _GridLayout(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t, double, double, double, double))
{
  lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout();
  return a14(a1, a2, a3, a4, a5, a6);
}

uint64_t default argument 1 of View.hidden(_:allowingDisplayList:)()
{
  return 0;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnchorTransformModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AnchorTransformModifier<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnchorTransformModifier2<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AnchorTransformModifier2<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _IdentifiedModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _IdentifiedModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t default argument 1 of View.hiddenAllowingHostPreferences(_:allowingDisplayList:)()
{
  return 0;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShadowView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ShadowView<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ShadowView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ShadowView<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](a4);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _ShadowView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ShadowView<A>, a1);
  specialized PrimitiveView.body.getter();
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AGAttribute()
{
  return UInt32._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  char v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x18D75EE24](a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = static UInt32._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 1;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AGAttribute@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = static UInt32._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance UIRectEdge@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance UIRectEdge@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance UIRectEdge(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance UIRectEdge@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance UIRectEdge@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance UIRectEdge(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance UIRectEdge(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance UIRectEdge@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance UIRectEdge(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance UIRectEdge(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance UIRectEdge(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance UIRectEdge()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance UIRectEdge()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance UIRectEdge(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AXSwiftUITraits()
{
  return UInt64._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AXSwiftUITraits@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static UInt64._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AXSwiftUITraits(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x18D75EE54](a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AXSwiftUITraits(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  return v3 & 1;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSNotificationName(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSNotificationName(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSNotificationName@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x18D75CC88](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance UITableViewStyle()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UIKeyboardHIDUsage()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UIKeyboardHIDUsage()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance UIRectEdge@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance UIRectEdge@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UIRectEdge(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotificationName()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AGAttribute@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AGAttribute(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGAttribute()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, MEMORY[0x1E0CFED18]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (uint64_t)&protocol conformance descriptor for AGAttribute);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIMenuIdentifier()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UIMenuIdentifier, (uint64_t)&protocol conformance descriptor for UIMenuIdentifier);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UIMenuIdentifier, (uint64_t)&protocol conformance descriptor for UIMenuIdentifier);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance _UIImageNamedColorStyle()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, (uint64_t (*)(uint64_t))type metadata accessor for _UIImageNamedColorStyle, (uint64_t)&protocol conformance descriptor for _UIImageNamedColorStyle);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, (uint64_t (*)(uint64_t))type metadata accessor for _UIImageNamedColorStyle, (uint64_t)&protocol conformance descriptor for _UIImageNamedColorStyle);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIApplicationOpenExternalURLOptionsKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIApplicationLaunchOptionsKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationLaunchOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationLaunchOptionsKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationLaunchOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationLaunchOptionsKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSRunLoopMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSRunLoopMode()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AXSwiftUITraits()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AXSwiftUITraits and conformance AXSwiftUITraits, (uint64_t (*)(uint64_t))type metadata accessor for AXSwiftUITraits, (uint64_t)&protocol conformance descriptor for AXSwiftUITraits);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AXSwiftUITraits and conformance AXSwiftUITraits, (uint64_t (*)(uint64_t))type metadata accessor for AXSwiftUITraits, (uint64_t)&protocol conformance descriptor for AXSwiftUITraits);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIActivityType()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, (uint64_t (*)(uint64_t))type metadata accessor for UIActivityType, (uint64_t)&protocol conformance descriptor for UIActivityType);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, (uint64_t (*)(uint64_t))type metadata accessor for UIActivityType, (uint64_t)&protocol conformance descriptor for UIActivityType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIAccessibilityTraits()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIAccessibilityTextualContext()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTextualContext, (uint64_t)&protocol conformance descriptor for UIAccessibilityTextualContext);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTextualContext, (uint64_t)&protocol conformance descriptor for UIAccessibilityTextualContext);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UISheetPresentationControllerDetentIdentifier()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UIMenuIdentifier@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x18D75CC88](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBDisplayListRenderKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSRunLoopMode(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSNotificationName(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AXSwiftUITraits()
{
  return UInt64.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance AXSwiftUITraits()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance AXSwiftUITraits()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSNotificationName(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSAttributedStringKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSAttributedStringKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void specialized PrimitiveView.body.getter()
{
  specialized View.bodyError()();
}

void specialized PrimitiveGesture.body.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type _PositionLayout and conformance _PositionLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout;
  if (!lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PositionLayout, &type metadata for _PositionLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout;
  if (!lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PositionLayout, &type metadata for _PositionLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout;
  if (!lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PositionLayout, &type metadata for _PositionLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout;
  if (!lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PositionLayout, &type metadata for _PositionLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackdropGroupEffect and conformance _BackdropGroupEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _BackdropGroupEffect, &type metadata for _BackdropGroupEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _BackdropGroupEffect, &type metadata for _BackdropGroupEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _BackdropGroupEffect, &type metadata for _BackdropGroupEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _BackdropGroupEffect, &type metadata for _BackdropGroupEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect;
  if (!lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _BackdropGroupEffect, &type metadata for _BackdropGroupEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackdropGroupEffect and conformance _BackdropGroupEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout;
  if (!lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GridLayout, &type metadata for _GridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout;
  if (!lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GridLayout, &type metadata for _GridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout;
  if (!lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GridLayout, &type metadata for _GridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout);
  }
  return result;
}

void type metadata accessor for _DUIPreviewMode(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for _DUIPreviewMode);
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CGImageRef);
}

void type metadata accessor for RPTTestRunnerPPTLifetimeEvent(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for RPTTestRunnerPPTLifetimeEvent);
}

void type metadata accessor for UISplitViewControllerColumn(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UISplitViewControllerColumn);
}

void type metadata accessor for UIDatePickerStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIDatePickerStyle);
}

void type metadata accessor for UIGestureRecognizerState(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIGestureRecognizerState);
}

void type metadata accessor for UISceneActivationState(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UISceneActivationState);
}

void type metadata accessor for UIAlertControllerStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIAlertControllerStyle);
}

void type metadata accessor for UISheetPresentationControllerDetentIdentifier(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UISheetPresentationControllerDetentIdentifier);
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UIPopoverArrowDirection);
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CFDictionaryRef);
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SPRotation3D(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SPRotation3D(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for SPRotation3D(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for SPRotation3D);
}

void type metadata accessor for UIRectEdge(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIRectEdge);
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for UIKeyboardType(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIKeyboardType);
}

void type metadata accessor for UIAccessibilityContainerType(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityContainerType);
}

void type metadata accessor for UIAccessibilityTraits(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIAccessibilityTraits);
}

void type metadata accessor for CGContextRef(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CGContextRef);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for _NSRange);
}

uint64_t type metadata completion function for SidebarListBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SidebarListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 + 8;
  if ((v10 | v7) <= 7
    && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v10 + 8 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v10) + *(_QWORD *)(v9 + 64) <= 0x18)
  {
    v15 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    v25 = ~v7;
    v26 = *(_QWORD *)(a3 + 16);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      v17 = ~v10;
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v15 + v7 + 8) & ~v7))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_17:
        v21 = (_QWORD *)(((unint64_t)__dst + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
        v22 = (_QWORD *)(((unint64_t)__src + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
        *v21 = *v22;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v21 + v11) & v17, ((unint64_t)v22 + v11) & v17, v26);
        return __dst;
      }
    }
    else
    {
      v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = ~v10;
      if ((_DWORD)v16 != -1)
        goto LABEL_14;
    }
    *__dst = *__src;
    v18 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v15;
    v24 = ((unint64_t)v18 + v7 + 8) & v25;
    v19 = ((unint64_t)v15 + v7 + 8) & v25;
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v20(v24, v19, v5);
    goto LABEL_17;
  }
  v14 = *__src;
  *__dst = *__src;
  __dst = (_QWORD *)(v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
  swift_retain();
  return __dst;
}

uint64_t destroy for SidebarListBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v7))
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + v8 + ((v6 + 16) & v7) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
    goto LABEL_5;
  }
  v10 = *v9;
  if ((unint64_t)*v9 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  if ((_DWORD)v10 == -1)
  {
LABEL_5:
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v7, v4);
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + v8 + ((v6 + 16) & v7) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for SidebarListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    v22 = ((unint64_t)v15 + v8 + 8) & v9;
    v16 = ((unint64_t)v12 + v8 + 8) & v9;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v17(v22, v16, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  v18 = (_QWORD *)(((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 16))(((unint64_t)v18 + *(unsigned __int8 *)(v20 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), ((unint64_t)v19 + *(unsigned __int8 *)(v20 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return __dst;
}

_QWORD *assignWithCopy for SidebarListBody(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  uint64_t v32;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    v30 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v29 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v3 = a3;
    v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    v10 = v30;
    if (!v29)
    {
LABEL_5:
      if (!v14)
      {
        *a1 = *a2;
        swift_retain();
        swift_release();
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v11 + v9 + 8) & v32, ((unint64_t)v12 + v9 + 8) & v32, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v32, v6);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *a1 = *a2;
    *v11 = *v12;
    v16 = (unint64_t)v11 + v9 + 8;
    v17 = v3;
    v18 = v16 & v32;
    v19 = (unint64_t)v12 + v9 + 8;
    v20 = v10;
    v21 = v19 & v32;
    v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v23 = v18;
    v3 = v17;
    v24 = v21;
    v10 = v20;
    v22(v23, v24, v6);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v10);
LABEL_12:
  v25 = (_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 24))(((unint64_t)v25 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v26 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

_QWORD *initializeWithTake for SidebarListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  v16 = (_QWORD *)(((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))(((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v17 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return __dst;
}

_QWORD *assignWithTake for SidebarListBody(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v23;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    v21 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v20 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v3 = a3;
    v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    v10 = v21;
    if (!v20)
    {
LABEL_5:
      if (!v14)
      {
        *a1 = *a2;
        swift_release();
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v11 + v9 + 8) & v23, ((unint64_t)v12 + v9 + 8) & v23, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v23, v6);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *a1 = *a2;
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v11 + v9 + 8) & v23, ((unint64_t)v12 + v9 + 8) & v23, v6);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v10);
LABEL_12:
  v16 = (_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))(((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v17 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = v7 - 1;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8)
    v11 = v8;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = ((v12 + 16) & ~v12) + *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 + 8;
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v17 = ((v15 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v14) + *(_QWORD *)(v9 + 64);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if (v8 < v10)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v9 + 48))((v15 + ((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v14, *(unsigned int *)(v9 + 84), v4);
      v24 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v26 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v24 + v12 + 8) & ~v12);
      }
      else
      {
        v25 = *v24;
        if (v25 >= 0xFFFFFFFF)
          LODWORD(v25) = -1;
        v26 = v25 + 1;
      }
      if (v26 >= 2)
        return v26 - 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = ((v15 + ((v13 + 7) & 0xFFFFFFF8)) & ~(_DWORD)v14) + *(_DWORD *)(v9 + 64);
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v11 + v22 + 1;
}

void storeEnumTagSinglePayload for SidebarListBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= (v6 - 1))
    v8 = v6 - 1;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = ((*(unsigned __int8 *)(v7 + 80)
       + 8
       + ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + *(_QWORD *)(v5 + 64)
         + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void type metadata accessor for SidebarListBody()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for AGGraphRef(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for AGGraphRef);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for RawRepresentable in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for Equatable in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for RawRepresentable in AGAttribute()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (uint64_t)&protocol conformance descriptor for AGAttribute);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AGAttribute()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (uint64_t)&protocol conformance descriptor for AGAttribute);
}

uint64_t base witness table accessor for Equatable in UIRectEdge()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIRectEdge and conformance UIRectEdge, (uint64_t (*)(uint64_t))type metadata accessor for UIRectEdge, (uint64_t)&protocol conformance descriptor for UIRectEdge);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIRectEdge()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIRectEdge and conformance UIRectEdge, (uint64_t (*)(uint64_t))type metadata accessor for UIRectEdge, (uint64_t)&protocol conformance descriptor for UIRectEdge);
}

uint64_t base witness table accessor for RawRepresentable in UIRectEdge()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIRectEdge and conformance UIRectEdge, (uint64_t (*)(uint64_t))type metadata accessor for UIRectEdge, (uint64_t)&protocol conformance descriptor for UIRectEdge);
}

uint64_t base witness table accessor for SetAlgebra in UIRectEdge()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIRectEdge and conformance UIRectEdge, (uint64_t (*)(uint64_t))type metadata accessor for UIRectEdge, (uint64_t)&protocol conformance descriptor for UIRectEdge);
}

uint64_t base witness table accessor for Equatable in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&protocol conformance descriptor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&protocol conformance descriptor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for RawRepresentable in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&protocol conformance descriptor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for SetAlgebra in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&protocol conformance descriptor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for RawRepresentable in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for Equatable in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UISheetPresentationControllerDetentIdentifier, (uint64_t)&protocol conformance descriptor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for Equatable in UISplitViewControllerColumn()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn, (uint64_t (*)(uint64_t))type metadata accessor for UISplitViewControllerColumn, (uint64_t)&protocol conformance descriptor for UISplitViewControllerColumn);
}

void type metadata accessor for SidebarListBody.CollectionViewBody()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for SidebarListBody.TableViewRoot()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #1 in SidebarListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in SidebarListBody.body.getter);
}

uint64_t partial apply for closure #2 in SidebarListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in SidebarListBody.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in SidebarListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #2 in SidebarListBody.body.getter);
}

void type metadata accessor for UIApplicationOpenExternalURLOptionsKey(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIApplicationOpenExternalURLOptionsKey);
}

void type metadata accessor for CTCompositionLanguage(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for CTCompositionLanguage);
}

void type metadata accessor for UITransition(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UITransition);
}

void type metadata accessor for UIKeyboardHIDUsage(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIKeyboardHIDUsage);
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIUserInterfaceIdiom);
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIUserInterfaceSizeClass);
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for NSUnderlineStyle);
}

void type metadata accessor for UIApplicationLaunchOptionsKey(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIApplicationLaunchOptionsKey);
}

void type metadata accessor for UITableViewCellEditingStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UITableViewCellEditingStyle);
}

void type metadata accessor for UIActivityType(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UIActivityType);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for NSKeyValueChangeKey);
}

void type metadata accessor for AXSwiftUITraits(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for AXSwiftUITraits);
}

void type metadata accessor for UISplitViewControllerDisplayMode(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UISplitViewControllerDisplayMode);
}

void type metadata accessor for UIDocumentBrowserImportMode(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UIDocumentBrowserImportMode);
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for NSURLResourceKey);
}

uint64_t getEnumTagSinglePayload for NSDecimal(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NSDecimal(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for NSDecimal(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for NSDecimal);
}

uint64_t type metadata completion function for SidebarListBody.TableViewRoot()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ~(v6 | 7);
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  if (v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0 && (((v6 | 7) + 41) & ~(v6 | 7)) + v8 <= 0x18)
  {
    v35 = *(_DWORD *)(v5 + 84);
    v36 = *(_QWORD *)(a3 + 24);
    v12 = *(_QWORD *)a2;
    v13 = *(_BYTE *)(a2 + 9);
    v14 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v14, v13);
    *(_QWORD *)a1 = v12;
    *(_BYTE *)(a1 + 8) = v14;
    *(_BYTE *)(a1 + 9) = v13;
    v15 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    v16 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)v16;
    LOBYTE(v12) = *(_BYTE *)(v16 + 9);
    v18 = *(_BYTE *)(v16 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v16, v18, v12);
    *(_QWORD *)v15 = v17;
    *(_BYTE *)(v15 + 8) = v18;
    *(_BYTE *)(v15 + 9) = v12;
    v19 = (v15 + 17) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v16 + 17) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(_QWORD *)v20;
    v22 = *(_BYTE *)(v20 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v20, v22);
    *(_QWORD *)v19 = v21;
    *(_BYTE *)(v19 + 8) = v22;
    v23 = (_QWORD *)((v15 + 33) & v7);
    v24 = (_QWORD *)((v16 + 33) & v7);
    v25 = (uint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v35 < 0)
    {
      v28 = v36;
      v29 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v25 + v6 + 8) & ~v6);
      v27 = ~v6;
      if (v29)
      {
LABEL_14:
        memcpy(v23, v24, v8);
        return a1;
      }
    }
    else
    {
      v26 = *v25;
      if ((unint64_t)*v25 >= 0xFFFFFFFF)
        LODWORD(v26) = -1;
      v27 = ~v6;
      v28 = v36;
      if ((_DWORD)v26 != -1)
        goto LABEL_14;
    }
    *v23 = *v24;
    v30 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v30 = *v25;
    v31 = ((unint64_t)v30 + v6 + 8) & v27;
    v32 = ((unint64_t)v25 + v6 + 8) & v27;
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v33(v31, v32, v28);
    return a1;
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1 = v11 + ((v6 + 16) & v7);
  swift_retain();
  return a1;
}

uint64_t destroy for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;

  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)v4, *(unsigned __int8 *)(v4 + 8), *(_BYTE *)(v4 + 9));
  v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v5, *(_BYTE *)(v5 + 8));
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + (v8 | 7) + 9) & ~(v8 | 7);
  v10 = ~v8;
  v11 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v8 + 8) & v10);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v8 + 8) & v10, v6);
  }
  v12 = *v11;
  if ((unint64_t)*v11 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  result = (v12 + 1);
  if ((_DWORD)v12 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(uint64_t, unint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v8, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 9) = v7;
  v9 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v6) = *(_BYTE *)(v10 + 9);
  v12 = *(_BYTE *)(v10 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v10, v12, v6);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v12;
  *(_BYTE *)(v9 + 9) = v6;
  v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v10 + 17) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  LOBYTE(v6) = *(_BYTE *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v14, v6);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v6;
  v16 = *(_QWORD *)(a3 + 24);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 | 7) + 9;
  v20 = (_QWORD *)((v19 + v13) & ~(v18 | 7));
  v21 = (_QWORD *)((v19 + v14) & ~(v18 | 7));
  v22 = ~v18;
  v23 = *(_QWORD *)(v17 + 64);
  v24 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v17 + 84) & 0x80000000) == 0)
  {
    v25 = *v24;
    if ((unint64_t)*v24 >= 0xFFFFFFFF)
      LODWORD(v25) = -1;
    if ((_DWORD)v25 != -1)
      goto LABEL_5;
LABEL_7:
    *v20 = *v21;
    v26 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v24;
    v27 = ((unint64_t)v26 + v18 + 8) & v22;
    v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
    swift_retain();
    swift_retain();
    v28(v27, ((unint64_t)v24 + v18 + 8) & v22, v16);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v17 + 48))(((unint64_t)v24 + v18 + 8) & v22))
    goto LABEL_7;
LABEL_5:
  memcpy(v20, v21, ((v18 + 16) & ~v18) + v23);
  return a1;
}

uint64_t assignWithCopy for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t (*v36)(unint64_t, uint64_t, uint64_t);
  int v37;
  uint64_t (*v38)(unint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t __n;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v8, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v6;
  v11 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v9, v11, v10);
  v12 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  LOBYTE(v6) = *(_BYTE *)(v13 + 9);
  v15 = *(_BYTE *)(v13 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v13, v15, v6);
  v16 = *(_QWORD *)v12;
  v17 = *(_BYTE *)(v12 + 9);
  *(_QWORD *)v12 = v14;
  v18 = *(unsigned __int8 *)(v12 + 8);
  *(_BYTE *)(v12 + 8) = v15;
  *(_BYTE *)(v12 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v13 + 17) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  LOBYTE(v6) = *(_BYTE *)(v20 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v20, v6);
  v22 = *(_QWORD *)v19;
  v23 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v6;
  outlined consume of Environment<Bool>.Content(v22, v23);
  v24 = *(_QWORD *)(a3 + 24);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (v26 | 7) + 9;
  v28 = (_QWORD *)((v27 + v19) & ~(v26 | 7));
  v29 = (_QWORD *)((v27 + v20) & ~(v26 | 7));
  v30 = *(unsigned int *)(v25 + 84);
  v31 = ~v26;
  __n = ((v26 + 16) & ~v26) + *(_QWORD *)(v25 + 64);
  v32 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v30 & 0x80000000) != 0)
  {
    v36 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v25 + 48);
    v37 = v36(((unint64_t)v32 + v26 + 8) & ~v26, v30, v24);
    v38 = v36;
    v45 = v37;
    v33 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    v31 = ~v26;
    v35 = v38(((unint64_t)v33 + v26 + 8) & ~v26, v30, v24);
    if (!v45)
    {
LABEL_5:
      if (!v35)
      {
        *v28 = *v29;
        swift_retain();
        swift_release();
        *v32 = *v33;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v25 + 24))(((unint64_t)v32 + v26 + 8) & v31, ((unint64_t)v33 + v26 + 8) & v31, v24);
        return a1;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v25 + 8))(((unint64_t)v32 + v26 + 8) & v31, v24);
      goto LABEL_9;
    }
  }
  else
  {
    v33 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    v34 = *v33;
    if (*v33 >= 0xFFFFFFFFuLL)
      LODWORD(v34) = -1;
    v35 = v34 + 1;
    if (*v32 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v35)
  {
    *v28 = *v29;
    *v32 = *v33;
    v39 = v31;
    v40 = ((unint64_t)v32 + v26 + 8) & v31;
    v41 = ((unint64_t)v33 + v26 + 8) & v39;
    v42 = v24;
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    swift_retain();
    swift_retain();
    v43(v40, v41, v42);
    return a1;
  }
LABEL_9:
  memcpy(v28, v29, __n);
  return a1;
}

uint64_t initializeWithTake for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v5 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_WORD *)(v4 + 8) = *(_WORD *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 | 7) + 9;
  v14 = (char *)((v13 + v7) & ~(v12 | 7));
  v15 = (_QWORD *)((v13 + v8) & ~(v12 | 7));
  v16 = ~v12;
  v17 = *(_QWORD *)(v11 + 64);
  v18 = (uint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) == 0)
  {
    v19 = *v18;
    if ((unint64_t)*v18 >= 0xFFFFFFFF)
      LODWORD(v19) = -1;
    if ((_DWORD)v19 != -1)
      goto LABEL_5;
LABEL_7:
    *(_QWORD *)v14 = *v15;
    v20 = (unint64_t)(v14 + 15);
    *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((v12 + 8 + (v20 & 0xFFFFFFFFFFFFFFF8)) & v16, ((unint64_t)v18 + v12 + 8) & v16, v10);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v11 + 48))(((unint64_t)v18 + v12 + 8) & v16))
    goto LABEL_7;
LABEL_5:
  memcpy(v14, v15, ((v12 + 16) & ~v12) + v17);
  return a1;
}

uint64_t assignWithTake for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  size_t v37;
  void *v38;
  const void *v39;
  uint64_t (*v40)(unint64_t, uint64_t, uint64_t);
  int v41;
  uint64_t (*v42)(unint64_t, uint64_t, uint64_t);
  int v44;
  size_t __n;

  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  v14 = *(_BYTE *)(v12 + 9);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_BYTE *)(v19 + 8);
  v21 = *(_QWORD *)v18;
  v22 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  v23 = *(_QWORD *)(a3 + 24);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 | 7) + 9;
  v27 = (_QWORD *)((v26 + v18) & ~(v25 | 7));
  v28 = (_QWORD *)((v26 + v19) & ~(v25 | 7));
  v29 = *(unsigned int *)(v24 + 84);
  v30 = ~v25;
  v31 = *(_QWORD *)(v24 + 64);
  v32 = ((v25 + 16) & ~v25) + v31;
  v33 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v29 & 0x80000000) != 0)
  {
    __n = ((v25 + 16) & ~v25) + v31;
    v40 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 48);
    v41 = v40(((unint64_t)v33 + v25 + 8) & ~v25, v29, v23);
    v42 = v40;
    v44 = v41;
    v34 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = ~v25;
    v36 = v42(((unint64_t)v34 + v25 + 8) & ~v25, v29, v23);
    v32 = __n;
    if (!v44)
    {
LABEL_5:
      if (!v36)
      {
        *v27 = *v28;
        swift_release();
        *v33 = *v34;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 40))(((unint64_t)v33 + v25 + 8) & v30, ((unint64_t)v34 + v25 + 8) & v30, v23);
        return a1;
      }
      v37 = v32;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v24 + 8))(((unint64_t)v33 + v25 + 8) & v30, v23);
      v38 = v27;
      v39 = v28;
      v32 = v37;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    v35 = *v34;
    if (*v34 >= 0xFFFFFFFFuLL)
      LODWORD(v35) = -1;
    v36 = v35 + 1;
    if (*v33 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v36)
  {
    *v27 = *v28;
    *v33 = *v34;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 32))(((unint64_t)v33 + v25 + 8) & v30, ((unint64_t)v34 + v25 + 8) & v30, v23);
    return a1;
  }
  v38 = v27;
  v39 = v28;
LABEL_10:
  memcpy(v38, v39, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListBody.TableViewRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64) + ((v8 + 41) & ~v8);
  v10 = 8 * v9;
  if (v9 > 3)
    goto LABEL_7;
  v13 = (((1 << v10) + a2 - v6) >> v10) + 1;
  if (HIWORD(v13))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_15;
LABEL_24:
    v16 = (unint64_t *)((((((((a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v8 + 9) & ~v8)
                              + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v7 + 8) & ~v7);
    }
    else
    {
      v17 = *v16;
      if (v17 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      v18 = v17 + 1;
    }
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
  if (v13 > 0xFF)
  {
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v13 < 2)
    goto LABEL_24;
LABEL_7:
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_24;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 <= 3)
      v15 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64) + ((v8 + 41) & ~(_DWORD)v8);
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  return (v14 + v6);
}

void storeEnumTagSinglePayload for SidebarListBody.TableViewRoot(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  v10 = (((v8 | 7) + 41) & ~(v8 | 7)) + v9;
  if (v6 - 1 >= a3)
  {
    v11 = 0u;
  }
  else
  {
    v11 = 1u;
    if (v10 <= 3)
    {
      v12 = (((v11 << (8 * v10)) + a3 - v6) >> (8 * v10)) + 1;
      if (HIWORD(v12))
      {
        v11 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v12 >= 0x100)
          v11 = 2;
        else
          v11 = v12 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X17 }
      }
LABEL_14:
      v13 = a2 - v6;
      if (v10 < 4)
      {
        if ((_DWORD)v10)
        {
          v14 = v13 & ~(-1 << (8 * v10));
          bzero(a1, v10);
          if ((_DWORD)v10 == 3)
          {
            *a1 = v14;
            *((_BYTE *)a1 + 2) = BYTE2(v14);
          }
          else if ((_DWORD)v10 == 2)
          {
            *a1 = v14;
          }
          else
          {
            *(_BYTE *)a1 = v14;
          }
        }
      }
      else
      {
        bzero(a1, (((v8 | 7) + 41) & ~(v8 | 7)) + v9);
        *(_DWORD *)a1 = v13;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_186F5964C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F596B8);
}

void sub_186F59654()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F596B8);
}

void sub_186F5965C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F596B8);
}

void sub_186F5968C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x186F596B8);
}

void sub_186F5969C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x186F596B8);
}

void sub_186F596A4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x186F596B8);
}

uint64_t type metadata completion function for SidebarListBody.CollectionViewBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(unint64_t, unint64_t, uint64_t);
  uint64_t __n;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if ((v9 | v7) <= 7
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + (((v9 | 7) + *(_QWORD *)(v6 + 64) + ((v7 + 114) & ~v7)) & ~(v9 | 7)) <= 0x18)
  {
    __n = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64);
    v62 = *(_QWORD *)(a3 + 24);
    v56 = *(_QWORD *)(v6 + 64);
    v58 = ~(v9 | 7);
    v57 = *(_DWORD *)(v8 + 84);
    v60 = *(_QWORD *)(v62 - 8);
    v61 = ~v9;
    v14 = *(_QWORD *)a2;
    v15 = *(_BYTE *)(a2 + 9);
    v16 = *(_BYTE *)(a2 + 8);
    v53 = *(_QWORD *)(v5 - 8);
    v54 = *(_QWORD *)(a3 + 16);
    v55 = v9 | 7;
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v16, v15);
    *(_QWORD *)a1 = v14;
    *(_BYTE *)(a1 + 8) = v16;
    *(_BYTE *)(a1 + 9) = v15;
    v63 = a1;
    v17 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    v59 = v9;
    v18 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    LOBYTE(v14) = *(_BYTE *)(v18 + 9);
    v20 = *(_BYTE *)(v18 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v18, v20, v14);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 9) = v14;
    v21 = (v17 + 17) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v18 + 17) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)v22;
    LOBYTE(v14) = *(_BYTE *)(v22 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v22, v14);
    *(_QWORD *)v21 = v23;
    *(_BYTE *)(v21 + 8) = v14;
    v24 = (v17 + 33) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v18 + 33) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    v31 = *(_QWORD *)(v25 + 32);
    v30 = *(_QWORD *)(v25 + 40);
    v32 = *(_QWORD *)(v25 + 56);
    v50 = *(_QWORD *)(v25 + 48);
    v51 = *(_BYTE *)(v25 + 64);
    v52 = *(_BYTE *)(v25 + 65);
    outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v25, v27, v28, v29, v31, v30, v50, v32, v51, v52);
    *(_QWORD *)v24 = v26;
    *(_QWORD *)(v24 + 8) = v27;
    *(_QWORD *)(v24 + 16) = v28;
    *(_QWORD *)(v24 + 24) = v29;
    *(_QWORD *)(v24 + 32) = v31;
    *(_QWORD *)(v24 + 40) = v30;
    *(_QWORD *)(v24 + 48) = v50;
    *(_QWORD *)(v24 + 56) = v32;
    *(_BYTE *)(v24 + 64) = v51;
    *(_BYTE *)(v24 + 65) = v52;
    v33 = (v25 + v7 + 66) & ~v7;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v53 + 16))((v24 + v7 + 66) & ~v7, v33, v54);
    v34 = (_QWORD *)((((v24 + v7 + 66) & ~v7) + v56 + v55) & v58);
    v35 = (_QWORD *)((v33 + v56 + v55) & v58);
    v36 = (uint64_t *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v57 < 0)
    {
      v38 = v62;
      v42 = (*(uint64_t (**)(unint64_t))(v60 + 48))(((unint64_t)v36 + v59 + 8) & v61);
      v40 = v60;
      v39 = v59;
      v41 = v61;
      if (v42)
      {
LABEL_14:
        memcpy(v34, v35, __n);
        return v63;
      }
    }
    else
    {
      v37 = *v36;
      if ((unint64_t)*v36 >= 0xFFFFFFFF)
        LODWORD(v37) = -1;
      v38 = v62;
      v39 = v59;
      v40 = v60;
      v41 = v61;
      if ((_DWORD)v37 != -1)
        goto LABEL_14;
    }
    *v34 = *v35;
    v43 = (_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v43 = *v36;
    v44 = v39 + 8;
    v45 = ((unint64_t)v43 + v44) & v41;
    v46 = ((unint64_t)v36 + v44) & v41;
    v47 = *(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16);
    swift_retain();
    swift_retain();
    v47(v45, v46, v38);
    return v63;
  }
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v13 = v12 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16));
  swift_retain();
  return v13;
}

uint64_t destroy for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;

  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)v4, *(unsigned __int8 *)(v4 + 8), *(_BYTE *)(v4 + 9));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 17) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 17) & 0xFFFFFFFFFFFFFFF8) + 8));
  v5 = (v4 + 33) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_BYTE *)(v5 + 64), *(_BYTE *)(v5 + 65));
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 66) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + (v11 | 7)) & ~(v11 | 7);
  v13 = ~v11;
  v14 = (uint64_t *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v10 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v14 + v11 + 8) & v13);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v10 + 8))(((unint64_t)v14 + v11 + 8) & v13, v9);
  }
  v15 = *v14;
  if ((unint64_t)*v14 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  result = (v15 + 1);
  if ((_DWORD)v15 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(uint64_t, unint64_t, uint64_t);
  char v44;
  char v45;
  uint64_t v47;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  v47 = a1;
  v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  LOBYTE(v5) = *(_BYTE *)(v9 + 9);
  v11 = *(_BYTE *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v9, v11, v5);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 9) = v5;
  v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  LOBYTE(v5) = *(_BYTE *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v13, v5);
  *(_QWORD *)v12 = v14;
  *(_BYTE *)(v12 + 8) = v5;
  v15 = (v8 + 33) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v9 + 33) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  v18 = *(_QWORD *)(v16 + 8);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = *(_QWORD *)(v16 + 24);
  v21 = *(_QWORD *)(v16 + 32);
  v22 = *(_QWORD *)(v16 + 40);
  v23 = *(_QWORD *)(v16 + 48);
  v24 = *(_QWORD *)(v16 + 56);
  v44 = *(_BYTE *)(v16 + 64);
  v45 = *(_BYTE *)(v16 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v16, v18, v19, v20, v21, v22, v23, v24, v44, v45);
  *(_QWORD *)v15 = v17;
  *(_QWORD *)(v15 + 8) = v18;
  *(_QWORD *)(v15 + 16) = v19;
  *(_QWORD *)(v15 + 24) = v20;
  *(_QWORD *)(v15 + 32) = v21;
  *(_QWORD *)(v15 + 40) = v22;
  *(_QWORD *)(v15 + 48) = v23;
  *(_QWORD *)(v15 + 56) = v24;
  *(_BYTE *)(v15 + 64) = v44;
  *(_BYTE *)(v15 + 65) = v45;
  v25 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (v26 + 66 + v15) & ~v26;
  v28 = (v26 + 66 + v16) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v27, v28);
  v29 = *(_QWORD *)(v25 + 64);
  v30 = *(_QWORD *)(a3 + 24);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v32 | 7) + v29;
  v34 = (_QWORD *)((v33 + v27) & ~(v32 | 7));
  v35 = (_QWORD *)((v33 + v28) & ~(v32 | 7));
  v36 = ~v32;
  v37 = *(_QWORD *)(v31 + 64);
  v38 = (uint64_t *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v31 + 84) & 0x80000000) == 0)
  {
    v39 = *v38;
    if ((unint64_t)*v38 >= 0xFFFFFFFF)
      LODWORD(v39) = -1;
    if ((_DWORD)v39 != -1)
      goto LABEL_5;
LABEL_7:
    *v34 = *v35;
    v40 = (_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v40 = *v38;
    v41 = ((unint64_t)v40 + v32 + 8) & v36;
    v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 16);
    swift_retain();
    swift_retain();
    v42(v41, ((unint64_t)v38 + v32 + 8) & v36, v30);
    return v47;
  }
  if (!(*(unsigned int (**)(unint64_t))(v31 + 48))(((unint64_t)v38 + v32 + 8) & v36))
    goto LABEL_7;
LABEL_5:
  memcpy(v34, v35, ((v32 + 16) & ~v32) + v37);
  return v47;
}

uint64_t assignWithCopy for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t (*v61)(unint64_t, uint64_t, uint64_t);
  uint64_t v62;
  void (*v63)(unint64_t, unint64_t, uint64_t);
  uint64_t v65;
  char v66;
  int v67;
  char v68;
  size_t v69;
  _QWORD *v71;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v5;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v65 = a1;
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  LOBYTE(v5) = *(_BYTE *)(v12 + 9);
  v14 = *(_BYTE *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v12, v14, v5);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = v13;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v14;
  *(_BYTE *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  LOBYTE(v5) = *(_BYTE *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v19, v5);
  v21 = *(_QWORD *)v18;
  v22 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v21, v22);
  v23 = (v12 + 33) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  v26 = (v11 + 33) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)(v23 + 16);
  v28 = *(_QWORD *)(v23 + 24);
  v29 = *(_QWORD *)(v23 + 32);
  v30 = *(_QWORD *)(v23 + 40);
  v31 = *(_QWORD *)(v23 + 48);
  v32 = *(_QWORD *)(v23 + 56);
  v66 = *(_BYTE *)(v23 + 64);
  v68 = *(_BYTE *)(v23 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v23, v25, v27, v28, v29, v30, v31, v32, v66, v68);
  v33 = *(_QWORD *)v26;
  v34 = *(_QWORD *)(v26 + 8);
  v35 = *(_QWORD *)(v26 + 16);
  v36 = *(_QWORD *)(v26 + 24);
  v37 = *(_QWORD *)(v26 + 32);
  v38 = *(_QWORD *)(v26 + 40);
  v39 = *(_QWORD *)(v26 + 48);
  v40 = *(_QWORD *)(v26 + 56);
  v41 = *(_BYTE *)(v26 + 64);
  v42 = *(_BYTE *)(v26 + 65);
  *(_QWORD *)v26 = v24;
  *(_QWORD *)(v26 + 8) = v25;
  *(_QWORD *)(v26 + 16) = v27;
  *(_QWORD *)(v26 + 24) = v28;
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v30;
  *(_QWORD *)(v26 + 48) = v31;
  *(_QWORD *)(v26 + 56) = v32;
  *(_BYTE *)(v26 + 64) = v66;
  *(_BYTE *)(v26 + 65) = v68;
  outlined consume of Environment<ListPadding>.Content(v33, v34, v35, v36, v37, v38, v39, v40, v41, v42);
  v43 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v44 = *(unsigned __int8 *)(v43 + 80);
  v45 = (v44 + 66 + v26) & ~v44;
  v46 = (v44 + 66 + v23) & ~v44;
  (*(void (**)(uint64_t, uint64_t))(v43 + 24))(v45, v46);
  v47 = *(_QWORD *)(a3 + 24);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(unsigned __int8 *)(v48 + 80);
  v50 = (v49 | 7) + *(_QWORD *)(v43 + 64);
  v51 = (_QWORD *)((v50 + v45) & ~(v49 | 7));
  v52 = (_QWORD *)((v50 + v46) & ~(v49 | 7));
  v53 = *(unsigned int *)(v48 + 84);
  v54 = ~v49;
  v55 = *(_QWORD *)(v48 + 64);
  v56 = ((v49 + 16) & ~v49) + v55;
  v57 = (_QWORD *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v53 & 0x80000000) != 0)
  {
    v69 = ((v49 + 16) & ~v49) + v55;
    v71 = v52;
    v61 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v48 + 48);
    v67 = v61(((unint64_t)v57 + v49 + 8) & ~v49, v53, v47);
    v58 = (_QWORD *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
    v54 = ~v49;
    v56 = v69;
    v60 = v61(((unint64_t)v58 + v49 + 8) & ~v49, v53, v47);
    v52 = v71;
    if (!v67)
    {
LABEL_5:
      if (!v60)
      {
        *v51 = *v52;
        swift_retain();
        swift_release();
        *v57 = *v58;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 24))(((unint64_t)v57 + v49 + 8) & v54, ((unint64_t)v58 + v49 + 8) & v54, v47);
        return v65;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v48 + 8))(((unint64_t)v57 + v49 + 8) & v54, v47);
      goto LABEL_9;
    }
  }
  else
  {
    v58 = (_QWORD *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
    v59 = *v58;
    if (*v58 >= 0xFFFFFFFFuLL)
      LODWORD(v59) = -1;
    v60 = v59 + 1;
    if (*v57 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v60)
  {
    *v51 = *v52;
    *v57 = *v58;
    v62 = v47;
    v63 = *(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 16);
    swift_retain();
    swift_retain();
    v63(((unint64_t)v57 + v49 + 8) & v54, ((unint64_t)v58 + v49 + 8) & v54, v62);
    return v65;
  }
LABEL_9:
  memcpy(v51, v52, v56);
  return v65;
}

uint64_t initializeWithTake for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v5 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  *(_WORD *)(v5 + 8) = *(_WORD *)(v6 + 8);
  *(_QWORD *)v5 = v7;
  v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v6 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = (v5 + 33) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v6 + 33) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_OWORD *)(v12 + 32);
  v13 = *(_OWORD *)(v12 + 48);
  v15 = *(_OWORD *)(v12 + 16);
  *(_WORD *)(v11 + 64) = *(_WORD *)(v12 + 64);
  *(_OWORD *)(v11 + 32) = v14;
  *(_OWORD *)(v11 + 48) = v13;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 + 66 + v11) & ~v17;
  v19 = (v17 + 66 + v12) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v18, v19);
  v20 = *(_QWORD *)(v16 + 64);
  v21 = *(_QWORD *)(a3 + 24);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v23 | 7) + v20;
  v25 = (char *)((v24 + v18) & ~(v23 | 7));
  v26 = (_QWORD *)((v24 + v19) & ~(v23 | 7));
  v27 = ~v23;
  v28 = *(_QWORD *)(v22 + 64);
  v29 = (uint64_t *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v22 + 84) & 0x80000000) == 0)
  {
    v30 = *v29;
    if ((unint64_t)*v29 >= 0xFFFFFFFF)
      LODWORD(v30) = -1;
    if ((_DWORD)v30 != -1)
      goto LABEL_5;
LABEL_7:
    *(_QWORD *)v25 = *v26;
    v31 = (unint64_t)(v25 + 15);
    *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8) = *v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 32))((v23 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & v27, ((unint64_t)v29 + v23 + 8) & v27, v21);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v22 + 48))(((unint64_t)v29 + v23 + 8) & v27))
    goto LABEL_7;
LABEL_5:
  memcpy(v25, v26, ((v23 + 16) & ~v23) + v28);
  return a1;
}

uint64_t assignWithTake for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  size_t v58;
  void *v59;
  const void *v60;
  uint64_t (*v61)(unint64_t, uint64_t, uint64_t);
  int v62;
  uint64_t (*v63)(unint64_t, uint64_t, uint64_t);
  int v65;
  size_t __n;

  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  v14 = *(_BYTE *)(v12 + 9);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = *(_BYTE *)(v19 + 8);
  v21 = *(_QWORD *)v18;
  v22 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  v23 = (v12 + 33) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_BYTE *)(v23 + 64);
  v25 = *(_BYTE *)(v23 + 65);
  v26 = (v11 + 33) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)v26;
  v28 = *(_QWORD *)(v26 + 8);
  v29 = *(_QWORD *)(v26 + 16);
  v30 = *(_QWORD *)(v26 + 24);
  v31 = *(_QWORD *)(v26 + 32);
  v32 = *(_QWORD *)(v26 + 40);
  v33 = *(_QWORD *)(v26 + 48);
  v34 = *(_QWORD *)(v26 + 56);
  v35 = *(_BYTE *)(v26 + 64);
  v36 = *(_BYTE *)(v26 + 65);
  v37 = *(_OWORD *)(v23 + 16);
  v38 = *(_OWORD *)(v23 + 32);
  v39 = *(_OWORD *)(v23 + 48);
  *(_OWORD *)v26 = *(_OWORD *)v23;
  *(_OWORD *)(v26 + 16) = v37;
  *(_OWORD *)(v26 + 32) = v38;
  *(_OWORD *)(v26 + 48) = v39;
  *(_BYTE *)(v26 + 64) = v24;
  *(_BYTE *)(v26 + 65) = v25;
  outlined consume of Environment<ListPadding>.Content(v27, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  v40 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (v41 + 66 + v26) & ~v41;
  v43 = (v41 + 66 + v23) & ~v41;
  (*(void (**)(uint64_t, uint64_t))(v40 + 40))(v42, v43);
  v44 = *(_QWORD *)(a3 + 24);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(unsigned __int8 *)(v45 + 80);
  v47 = (v46 | 7) + *(_QWORD *)(v40 + 64);
  v48 = (_QWORD *)((v47 + v42) & ~(v46 | 7));
  v49 = (_QWORD *)((v47 + v43) & ~(v46 | 7));
  v50 = *(unsigned int *)(v45 + 84);
  v51 = ~v46;
  v52 = *(_QWORD *)(v45 + 64);
  v53 = ((v46 + 16) & ~v46) + v52;
  v54 = (_QWORD *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v50 & 0x80000000) != 0)
  {
    __n = ((v46 + 16) & ~v46) + v52;
    v61 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v45 + 48);
    v62 = v61(((unint64_t)v54 + v46 + 8) & ~v46, v50, v44);
    v63 = v61;
    v65 = v62;
    v55 = (_QWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
    v51 = ~v46;
    v57 = v63(((unint64_t)v55 + v46 + 8) & ~v46, v50, v44);
    v53 = __n;
    if (!v65)
    {
LABEL_5:
      if (!v57)
      {
        *v48 = *v49;
        swift_release();
        *v54 = *v55;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v45 + 40))(((unint64_t)v54 + v46 + 8) & v51, ((unint64_t)v55 + v46 + 8) & v51, v44);
        return a1;
      }
      v58 = v53;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v45 + 8))(((unint64_t)v54 + v46 + 8) & v51, v44);
      v59 = v48;
      v60 = v49;
      v53 = v58;
      goto LABEL_10;
    }
  }
  else
  {
    v55 = (_QWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
    v56 = *v55;
    if (*v55 >= 0xFFFFFFFFuLL)
      LODWORD(v56) = -1;
    v57 = v56 + 1;
    if (*v54 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v57)
  {
    *v48 = *v49;
    *v54 = *v55;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v45 + 32))(((unint64_t)v54 + v46 + 8) & v51, ((unint64_t)v55 + v46 + 8) & v51, v44);
    return a1;
  }
  v59 = v48;
  v60 = v49;
LABEL_10:
  memcpy(v59, v60, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListBody.CollectionViewBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = v9 - 1;
  if (v6 <= v9 - 1)
    v11 = v9 - 1;
  else
    v11 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = v14 | 7;
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v17 = ((v14 + 16) & ~v14) + *(_QWORD *)(v7 + 64) + ((v15 + v13 + ((v12 + 114) & ~v12)) & ~v15);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      v24 = (((((a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 33) & 0xFFFFFFFFFFFFFFF8) + v12 + 66) & ~v12;
      if (v6 >= v10)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))(v24, *(unsigned int *)(v5 + 84), v4);
      v25 = (unint64_t *)((((v24 + v13 + v15) & ~v15) + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 0x80000000) != 0)
      {
        v27 = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v25 + v14 + 8) & ~v14);
      }
      else
      {
        v26 = *v25;
        if (v26 >= 0xFFFFFFFF)
          LODWORD(v26) = -1;
        v27 = v26 + 1;
      }
      if (v27 >= 2)
        return v27 - 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = ((v14 + 16) & ~(_DWORD)v14)
          + *(_DWORD *)(v7 + 64)
          + ((v15 + v13 + ((v12 + 114) & ~(_DWORD)v12)) & ~(_DWORD)v15);
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v11 + v22 + 1;
}

void storeEnumTagSinglePayload for SidebarListBody.CollectionViewBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (*(_DWORD *)(v5 + 84) <= (v7 - 1))
    v8 = v7 - 1;
  else
    v8 = *(_DWORD *)(v5 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (((v9 | 7)
        + *(_QWORD *)(v5 + 64)
        + ((*(unsigned __int8 *)(v5 + 80) + 114) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(v9 | 7))
      + ((v9 + 16) & ~v9)
      + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v10 <= 3)
    {
      v13 = ((a3 - v8 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v8 < a2)
  {
    v12 = ~v8 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X22 }
}

void type metadata accessor for UIPageControlBackgroundStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UIPageControlBackgroundStyle);
}

void type metadata accessor for UIMenuIdentifier(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIMenuIdentifier);
}

void type metadata accessor for UIDropOperation(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UIDropOperation);
}

void type metadata accessor for UITableViewStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UITableViewStyle);
}

void type metadata accessor for NSComparisonResult(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for NSComparisonResult);
}

void sub_186F5ACA0()
{
  type metadata accessor for SidebarListBody.CollectionViewBody();
}

void sub_186F5ACD4()
{
  type metadata accessor for SidebarListBody.TableViewRoot();
}

void sub_186F5ACEC()
{
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for StaticIf();
}

uint64_t sub_186F5AD30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>.CollectionViewBody, v2);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>.TableViewRoot, v3);
  v10 = v4;
  v8[0] = v6;
  v8[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v1, &v9);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v8);
}

uint64_t base witness table accessor for Equatable in UITableViewStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UITableViewStyle and conformance UITableViewStyle, (uint64_t (*)(uint64_t))type metadata accessor for UITableViewStyle, (uint64_t)&protocol conformance descriptor for UITableViewStyle);
}

uint64_t base witness table accessor for RawRepresentable in UIMenuIdentifier()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UIMenuIdentifier, (uint64_t)&protocol conformance descriptor for UIMenuIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIMenuIdentifier()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UIMenuIdentifier, (uint64_t)&protocol conformance descriptor for UIMenuIdentifier);
}

uint64_t instantiation function for generic protocol witness table for SidebarListBody<A, B>.TableViewRoot(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>.TableViewRoot);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for RawRepresentable in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for Equatable in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for RawRepresentable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for Equatable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for RawRepresentable in AXSwiftUITraits()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AXSwiftUITraits and conformance AXSwiftUITraits, (uint64_t (*)(uint64_t))type metadata accessor for AXSwiftUITraits, (uint64_t)&protocol conformance descriptor for AXSwiftUITraits);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AXSwiftUITraits()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AXSwiftUITraits and conformance AXSwiftUITraits, (uint64_t (*)(uint64_t))type metadata accessor for AXSwiftUITraits, (uint64_t)&protocol conformance descriptor for AXSwiftUITraits);
}

uint64_t base witness table accessor for Equatable in AXSwiftUITraits()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AXSwiftUITraits and conformance AXSwiftUITraits, (uint64_t (*)(uint64_t))type metadata accessor for AXSwiftUITraits, (uint64_t)&protocol conformance descriptor for AXSwiftUITraits);
}

uint64_t base witness table accessor for RawRepresentable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for RawRepresentable in UIActivityType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, (uint64_t (*)(uint64_t))type metadata accessor for UIActivityType, (uint64_t)&protocol conformance descriptor for UIActivityType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIActivityType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, (uint64_t (*)(uint64_t))type metadata accessor for UIActivityType, (uint64_t)&protocol conformance descriptor for UIActivityType);
}

uint64_t base witness table accessor for Equatable in UIActivityType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, (uint64_t (*)(uint64_t))type metadata accessor for UIActivityType, (uint64_t)&protocol conformance descriptor for UIActivityType);
}

uint64_t base witness table accessor for RawRepresentable in UIApplicationLaunchOptionsKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationLaunchOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationLaunchOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIApplicationLaunchOptionsKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationLaunchOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationLaunchOptionsKey);
}

uint64_t base witness table accessor for RawRepresentable in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
}

uint64_t base witness table accessor for RawRepresentable in _UIImageNamedColorStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, (uint64_t (*)(uint64_t))type metadata accessor for _UIImageNamedColorStyle, (uint64_t)&protocol conformance descriptor for _UIImageNamedColorStyle);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in _UIImageNamedColorStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, (uint64_t (*)(uint64_t))type metadata accessor for _UIImageNamedColorStyle, (uint64_t)&protocol conformance descriptor for _UIImageNamedColorStyle);
}

uint64_t base witness table accessor for RawRepresentable in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for Equatable in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for Equatable in UIKeyboardHIDUsage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage, (uint64_t (*)(uint64_t))type metadata accessor for UIKeyboardHIDUsage, (uint64_t)&protocol conformance descriptor for UIKeyboardHIDUsage);
}

uint64_t base witness table accessor for Equatable in UIApplicationLaunchOptionsKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationLaunchOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationLaunchOptionsKey);
}

uint64_t base witness table accessor for Equatable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in UIMenuIdentifier()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for UIMenuIdentifier, (uint64_t)&protocol conformance descriptor for UIMenuIdentifier);
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in SidebarListBody<A, B>.TableViewRoot()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in SidebarListBody<A, B>.CollectionViewBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t outlined init with copy of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE5600] - 8) + 16))(a2, a1);
  return a2;
}

void type metadata accessor for UIAccessibilityTextualContext(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIAccessibilityTextualContext);
}

void type metadata accessor for UIButtonType(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UIButtonType);
}

